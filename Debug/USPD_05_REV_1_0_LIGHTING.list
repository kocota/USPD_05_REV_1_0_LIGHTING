
USPD_05_REV_1_0_LIGHTING.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08010000  08010000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001f9ac  08010190  08010190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000700  0802fb40  0802fb40  0002fb40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08030240  08030240  000400e0  2**0
                  CONTENTS
  4 .ARM          00000008  08030240  08030240  00030240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08030248  08030248  000400e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08030248  08030248  00030248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0803024c  0803024c  0003024c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e0  20000000  08030250  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000400e0  2**0
                  CONTENTS
 10 .bss          0000af9c  200000e0  200000e0  000400e0  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000b07c  2000b07c  000400e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000400e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0004562d  00000000  00000000  00040110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006828  00000000  00000000  0008573d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000023e0  00000000  00000000  0008bf68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002150  00000000  00000000  0008e348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000334d6  00000000  00000000  00090498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00038c77  00000000  00000000  000c396e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00108637  00000000  00000000  000fc5e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00204c1c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009994  00000000  00000000  00204c70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08010190 <__do_global_dtors_aux>:
 8010190:	b510      	push	{r4, lr}
 8010192:	4c05      	ldr	r4, [pc, #20]	; (80101a8 <__do_global_dtors_aux+0x18>)
 8010194:	7823      	ldrb	r3, [r4, #0]
 8010196:	b933      	cbnz	r3, 80101a6 <__do_global_dtors_aux+0x16>
 8010198:	4b04      	ldr	r3, [pc, #16]	; (80101ac <__do_global_dtors_aux+0x1c>)
 801019a:	b113      	cbz	r3, 80101a2 <__do_global_dtors_aux+0x12>
 801019c:	4804      	ldr	r0, [pc, #16]	; (80101b0 <__do_global_dtors_aux+0x20>)
 801019e:	f3af 8000 	nop.w
 80101a2:	2301      	movs	r3, #1
 80101a4:	7023      	strb	r3, [r4, #0]
 80101a6:	bd10      	pop	{r4, pc}
 80101a8:	200000e0 	.word	0x200000e0
 80101ac:	00000000 	.word	0x00000000
 80101b0:	0802fb24 	.word	0x0802fb24

080101b4 <frame_dummy>:
 80101b4:	b508      	push	{r3, lr}
 80101b6:	4b03      	ldr	r3, [pc, #12]	; (80101c4 <frame_dummy+0x10>)
 80101b8:	b11b      	cbz	r3, 80101c2 <frame_dummy+0xe>
 80101ba:	4903      	ldr	r1, [pc, #12]	; (80101c8 <frame_dummy+0x14>)
 80101bc:	4803      	ldr	r0, [pc, #12]	; (80101cc <frame_dummy+0x18>)
 80101be:	f3af 8000 	nop.w
 80101c2:	bd08      	pop	{r3, pc}
 80101c4:	00000000 	.word	0x00000000
 80101c8:	200000e4 	.word	0x200000e4
 80101cc:	0802fb24 	.word	0x0802fb24

080101d0 <strlen>:
 80101d0:	4603      	mov	r3, r0
 80101d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80101d6:	2a00      	cmp	r2, #0
 80101d8:	d1fb      	bne.n	80101d2 <strlen+0x2>
 80101da:	1a18      	subs	r0, r3, r0
 80101dc:	3801      	subs	r0, #1
 80101de:	4770      	bx	lr

080101e0 <memchr>:
 80101e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80101e4:	2a10      	cmp	r2, #16
 80101e6:	db2b      	blt.n	8010240 <memchr+0x60>
 80101e8:	f010 0f07 	tst.w	r0, #7
 80101ec:	d008      	beq.n	8010200 <memchr+0x20>
 80101ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80101f2:	3a01      	subs	r2, #1
 80101f4:	428b      	cmp	r3, r1
 80101f6:	d02d      	beq.n	8010254 <memchr+0x74>
 80101f8:	f010 0f07 	tst.w	r0, #7
 80101fc:	b342      	cbz	r2, 8010250 <memchr+0x70>
 80101fe:	d1f6      	bne.n	80101ee <memchr+0xe>
 8010200:	b4f0      	push	{r4, r5, r6, r7}
 8010202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8010206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 801020a:	f022 0407 	bic.w	r4, r2, #7
 801020e:	f07f 0700 	mvns.w	r7, #0
 8010212:	2300      	movs	r3, #0
 8010214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8010218:	3c08      	subs	r4, #8
 801021a:	ea85 0501 	eor.w	r5, r5, r1
 801021e:	ea86 0601 	eor.w	r6, r6, r1
 8010222:	fa85 f547 	uadd8	r5, r5, r7
 8010226:	faa3 f587 	sel	r5, r3, r7
 801022a:	fa86 f647 	uadd8	r6, r6, r7
 801022e:	faa5 f687 	sel	r6, r5, r7
 8010232:	b98e      	cbnz	r6, 8010258 <memchr+0x78>
 8010234:	d1ee      	bne.n	8010214 <memchr+0x34>
 8010236:	bcf0      	pop	{r4, r5, r6, r7}
 8010238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 801023c:	f002 0207 	and.w	r2, r2, #7
 8010240:	b132      	cbz	r2, 8010250 <memchr+0x70>
 8010242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010246:	3a01      	subs	r2, #1
 8010248:	ea83 0301 	eor.w	r3, r3, r1
 801024c:	b113      	cbz	r3, 8010254 <memchr+0x74>
 801024e:	d1f8      	bne.n	8010242 <memchr+0x62>
 8010250:	2000      	movs	r0, #0
 8010252:	4770      	bx	lr
 8010254:	3801      	subs	r0, #1
 8010256:	4770      	bx	lr
 8010258:	2d00      	cmp	r5, #0
 801025a:	bf06      	itte	eq
 801025c:	4635      	moveq	r5, r6
 801025e:	3803      	subeq	r0, #3
 8010260:	3807      	subne	r0, #7
 8010262:	f015 0f01 	tst.w	r5, #1
 8010266:	d107      	bne.n	8010278 <memchr+0x98>
 8010268:	3001      	adds	r0, #1
 801026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 801026e:	bf02      	ittt	eq
 8010270:	3001      	addeq	r0, #1
 8010272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8010276:	3001      	addeq	r0, #1
 8010278:	bcf0      	pop	{r4, r5, r6, r7}
 801027a:	3801      	subs	r0, #1
 801027c:	4770      	bx	lr
 801027e:	bf00      	nop

08010280 <__aeabi_drsub>:
 8010280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8010284:	e002      	b.n	801028c <__adddf3>
 8010286:	bf00      	nop

08010288 <__aeabi_dsub>:
 8010288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0801028c <__adddf3>:
 801028c:	b530      	push	{r4, r5, lr}
 801028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8010292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8010296:	ea94 0f05 	teq	r4, r5
 801029a:	bf08      	it	eq
 801029c:	ea90 0f02 	teqeq	r0, r2
 80102a0:	bf1f      	itttt	ne
 80102a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80102a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80102aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80102ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80102b2:	f000 80e2 	beq.w	801047a <__adddf3+0x1ee>
 80102b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80102ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80102be:	bfb8      	it	lt
 80102c0:	426d      	neglt	r5, r5
 80102c2:	dd0c      	ble.n	80102de <__adddf3+0x52>
 80102c4:	442c      	add	r4, r5
 80102c6:	ea80 0202 	eor.w	r2, r0, r2
 80102ca:	ea81 0303 	eor.w	r3, r1, r3
 80102ce:	ea82 0000 	eor.w	r0, r2, r0
 80102d2:	ea83 0101 	eor.w	r1, r3, r1
 80102d6:	ea80 0202 	eor.w	r2, r0, r2
 80102da:	ea81 0303 	eor.w	r3, r1, r3
 80102de:	2d36      	cmp	r5, #54	; 0x36
 80102e0:	bf88      	it	hi
 80102e2:	bd30      	pophi	{r4, r5, pc}
 80102e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80102e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80102ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80102f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80102f4:	d002      	beq.n	80102fc <__adddf3+0x70>
 80102f6:	4240      	negs	r0, r0
 80102f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80102fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8010300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8010304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8010308:	d002      	beq.n	8010310 <__adddf3+0x84>
 801030a:	4252      	negs	r2, r2
 801030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010310:	ea94 0f05 	teq	r4, r5
 8010314:	f000 80a7 	beq.w	8010466 <__adddf3+0x1da>
 8010318:	f1a4 0401 	sub.w	r4, r4, #1
 801031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8010320:	db0d      	blt.n	801033e <__adddf3+0xb2>
 8010322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8010326:	fa22 f205 	lsr.w	r2, r2, r5
 801032a:	1880      	adds	r0, r0, r2
 801032c:	f141 0100 	adc.w	r1, r1, #0
 8010330:	fa03 f20e 	lsl.w	r2, r3, lr
 8010334:	1880      	adds	r0, r0, r2
 8010336:	fa43 f305 	asr.w	r3, r3, r5
 801033a:	4159      	adcs	r1, r3
 801033c:	e00e      	b.n	801035c <__adddf3+0xd0>
 801033e:	f1a5 0520 	sub.w	r5, r5, #32
 8010342:	f10e 0e20 	add.w	lr, lr, #32
 8010346:	2a01      	cmp	r2, #1
 8010348:	fa03 fc0e 	lsl.w	ip, r3, lr
 801034c:	bf28      	it	cs
 801034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8010352:	fa43 f305 	asr.w	r3, r3, r5
 8010356:	18c0      	adds	r0, r0, r3
 8010358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 801035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8010360:	d507      	bpl.n	8010372 <__adddf3+0xe6>
 8010362:	f04f 0e00 	mov.w	lr, #0
 8010366:	f1dc 0c00 	rsbs	ip, ip, #0
 801036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 801036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8010372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8010376:	d31b      	bcc.n	80103b0 <__adddf3+0x124>
 8010378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 801037c:	d30c      	bcc.n	8010398 <__adddf3+0x10c>
 801037e:	0849      	lsrs	r1, r1, #1
 8010380:	ea5f 0030 	movs.w	r0, r0, rrx
 8010384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8010388:	f104 0401 	add.w	r4, r4, #1
 801038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8010390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8010394:	f080 809a 	bcs.w	80104cc <__adddf3+0x240>
 8010398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 801039c:	bf08      	it	eq
 801039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80103a2:	f150 0000 	adcs.w	r0, r0, #0
 80103a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80103aa:	ea41 0105 	orr.w	r1, r1, r5
 80103ae:	bd30      	pop	{r4, r5, pc}
 80103b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80103b4:	4140      	adcs	r0, r0
 80103b6:	eb41 0101 	adc.w	r1, r1, r1
 80103ba:	3c01      	subs	r4, #1
 80103bc:	bf28      	it	cs
 80103be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80103c2:	d2e9      	bcs.n	8010398 <__adddf3+0x10c>
 80103c4:	f091 0f00 	teq	r1, #0
 80103c8:	bf04      	itt	eq
 80103ca:	4601      	moveq	r1, r0
 80103cc:	2000      	moveq	r0, #0
 80103ce:	fab1 f381 	clz	r3, r1
 80103d2:	bf08      	it	eq
 80103d4:	3320      	addeq	r3, #32
 80103d6:	f1a3 030b 	sub.w	r3, r3, #11
 80103da:	f1b3 0220 	subs.w	r2, r3, #32
 80103de:	da0c      	bge.n	80103fa <__adddf3+0x16e>
 80103e0:	320c      	adds	r2, #12
 80103e2:	dd08      	ble.n	80103f6 <__adddf3+0x16a>
 80103e4:	f102 0c14 	add.w	ip, r2, #20
 80103e8:	f1c2 020c 	rsb	r2, r2, #12
 80103ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80103f0:	fa21 f102 	lsr.w	r1, r1, r2
 80103f4:	e00c      	b.n	8010410 <__adddf3+0x184>
 80103f6:	f102 0214 	add.w	r2, r2, #20
 80103fa:	bfd8      	it	le
 80103fc:	f1c2 0c20 	rsble	ip, r2, #32
 8010400:	fa01 f102 	lsl.w	r1, r1, r2
 8010404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8010408:	bfdc      	itt	le
 801040a:	ea41 010c 	orrle.w	r1, r1, ip
 801040e:	4090      	lslle	r0, r2
 8010410:	1ae4      	subs	r4, r4, r3
 8010412:	bfa2      	ittt	ge
 8010414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8010418:	4329      	orrge	r1, r5
 801041a:	bd30      	popge	{r4, r5, pc}
 801041c:	ea6f 0404 	mvn.w	r4, r4
 8010420:	3c1f      	subs	r4, #31
 8010422:	da1c      	bge.n	801045e <__adddf3+0x1d2>
 8010424:	340c      	adds	r4, #12
 8010426:	dc0e      	bgt.n	8010446 <__adddf3+0x1ba>
 8010428:	f104 0414 	add.w	r4, r4, #20
 801042c:	f1c4 0220 	rsb	r2, r4, #32
 8010430:	fa20 f004 	lsr.w	r0, r0, r4
 8010434:	fa01 f302 	lsl.w	r3, r1, r2
 8010438:	ea40 0003 	orr.w	r0, r0, r3
 801043c:	fa21 f304 	lsr.w	r3, r1, r4
 8010440:	ea45 0103 	orr.w	r1, r5, r3
 8010444:	bd30      	pop	{r4, r5, pc}
 8010446:	f1c4 040c 	rsb	r4, r4, #12
 801044a:	f1c4 0220 	rsb	r2, r4, #32
 801044e:	fa20 f002 	lsr.w	r0, r0, r2
 8010452:	fa01 f304 	lsl.w	r3, r1, r4
 8010456:	ea40 0003 	orr.w	r0, r0, r3
 801045a:	4629      	mov	r1, r5
 801045c:	bd30      	pop	{r4, r5, pc}
 801045e:	fa21 f004 	lsr.w	r0, r1, r4
 8010462:	4629      	mov	r1, r5
 8010464:	bd30      	pop	{r4, r5, pc}
 8010466:	f094 0f00 	teq	r4, #0
 801046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 801046e:	bf06      	itte	eq
 8010470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8010474:	3401      	addeq	r4, #1
 8010476:	3d01      	subne	r5, #1
 8010478:	e74e      	b.n	8010318 <__adddf3+0x8c>
 801047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 801047e:	bf18      	it	ne
 8010480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8010484:	d029      	beq.n	80104da <__adddf3+0x24e>
 8010486:	ea94 0f05 	teq	r4, r5
 801048a:	bf08      	it	eq
 801048c:	ea90 0f02 	teqeq	r0, r2
 8010490:	d005      	beq.n	801049e <__adddf3+0x212>
 8010492:	ea54 0c00 	orrs.w	ip, r4, r0
 8010496:	bf04      	itt	eq
 8010498:	4619      	moveq	r1, r3
 801049a:	4610      	moveq	r0, r2
 801049c:	bd30      	pop	{r4, r5, pc}
 801049e:	ea91 0f03 	teq	r1, r3
 80104a2:	bf1e      	ittt	ne
 80104a4:	2100      	movne	r1, #0
 80104a6:	2000      	movne	r0, #0
 80104a8:	bd30      	popne	{r4, r5, pc}
 80104aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80104ae:	d105      	bne.n	80104bc <__adddf3+0x230>
 80104b0:	0040      	lsls	r0, r0, #1
 80104b2:	4149      	adcs	r1, r1
 80104b4:	bf28      	it	cs
 80104b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80104ba:	bd30      	pop	{r4, r5, pc}
 80104bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80104c0:	bf3c      	itt	cc
 80104c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80104c6:	bd30      	popcc	{r4, r5, pc}
 80104c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80104cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80104d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80104d4:	f04f 0000 	mov.w	r0, #0
 80104d8:	bd30      	pop	{r4, r5, pc}
 80104da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80104de:	bf1a      	itte	ne
 80104e0:	4619      	movne	r1, r3
 80104e2:	4610      	movne	r0, r2
 80104e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80104e8:	bf1c      	itt	ne
 80104ea:	460b      	movne	r3, r1
 80104ec:	4602      	movne	r2, r0
 80104ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80104f2:	bf06      	itte	eq
 80104f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80104f8:	ea91 0f03 	teqeq	r1, r3
 80104fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8010500:	bd30      	pop	{r4, r5, pc}
 8010502:	bf00      	nop

08010504 <__aeabi_ui2d>:
 8010504:	f090 0f00 	teq	r0, #0
 8010508:	bf04      	itt	eq
 801050a:	2100      	moveq	r1, #0
 801050c:	4770      	bxeq	lr
 801050e:	b530      	push	{r4, r5, lr}
 8010510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8010514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8010518:	f04f 0500 	mov.w	r5, #0
 801051c:	f04f 0100 	mov.w	r1, #0
 8010520:	e750      	b.n	80103c4 <__adddf3+0x138>
 8010522:	bf00      	nop

08010524 <__aeabi_i2d>:
 8010524:	f090 0f00 	teq	r0, #0
 8010528:	bf04      	itt	eq
 801052a:	2100      	moveq	r1, #0
 801052c:	4770      	bxeq	lr
 801052e:	b530      	push	{r4, r5, lr}
 8010530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8010534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8010538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 801053c:	bf48      	it	mi
 801053e:	4240      	negmi	r0, r0
 8010540:	f04f 0100 	mov.w	r1, #0
 8010544:	e73e      	b.n	80103c4 <__adddf3+0x138>
 8010546:	bf00      	nop

08010548 <__aeabi_f2d>:
 8010548:	0042      	lsls	r2, r0, #1
 801054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 801054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8010552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8010556:	bf1f      	itttt	ne
 8010558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 801055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8010560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8010564:	4770      	bxne	lr
 8010566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 801056a:	bf08      	it	eq
 801056c:	4770      	bxeq	lr
 801056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8010572:	bf04      	itt	eq
 8010574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8010578:	4770      	bxeq	lr
 801057a:	b530      	push	{r4, r5, lr}
 801057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8010580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8010584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8010588:	e71c      	b.n	80103c4 <__adddf3+0x138>
 801058a:	bf00      	nop

0801058c <__aeabi_ul2d>:
 801058c:	ea50 0201 	orrs.w	r2, r0, r1
 8010590:	bf08      	it	eq
 8010592:	4770      	bxeq	lr
 8010594:	b530      	push	{r4, r5, lr}
 8010596:	f04f 0500 	mov.w	r5, #0
 801059a:	e00a      	b.n	80105b2 <__aeabi_l2d+0x16>

0801059c <__aeabi_l2d>:
 801059c:	ea50 0201 	orrs.w	r2, r0, r1
 80105a0:	bf08      	it	eq
 80105a2:	4770      	bxeq	lr
 80105a4:	b530      	push	{r4, r5, lr}
 80105a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80105aa:	d502      	bpl.n	80105b2 <__aeabi_l2d+0x16>
 80105ac:	4240      	negs	r0, r0
 80105ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80105b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80105b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80105ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80105be:	f43f aed8 	beq.w	8010372 <__adddf3+0xe6>
 80105c2:	f04f 0203 	mov.w	r2, #3
 80105c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80105ca:	bf18      	it	ne
 80105cc:	3203      	addne	r2, #3
 80105ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80105d2:	bf18      	it	ne
 80105d4:	3203      	addne	r2, #3
 80105d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80105da:	f1c2 0320 	rsb	r3, r2, #32
 80105de:	fa00 fc03 	lsl.w	ip, r0, r3
 80105e2:	fa20 f002 	lsr.w	r0, r0, r2
 80105e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80105ea:	ea40 000e 	orr.w	r0, r0, lr
 80105ee:	fa21 f102 	lsr.w	r1, r1, r2
 80105f2:	4414      	add	r4, r2
 80105f4:	e6bd      	b.n	8010372 <__adddf3+0xe6>
 80105f6:	bf00      	nop

080105f8 <__aeabi_dmul>:
 80105f8:	b570      	push	{r4, r5, r6, lr}
 80105fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80105fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8010602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8010606:	bf1d      	ittte	ne
 8010608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 801060c:	ea94 0f0c 	teqne	r4, ip
 8010610:	ea95 0f0c 	teqne	r5, ip
 8010614:	f000 f8de 	bleq	80107d4 <__aeabi_dmul+0x1dc>
 8010618:	442c      	add	r4, r5
 801061a:	ea81 0603 	eor.w	r6, r1, r3
 801061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8010622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8010626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 801062a:	bf18      	it	ne
 801062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8010630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8010634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010638:	d038      	beq.n	80106ac <__aeabi_dmul+0xb4>
 801063a:	fba0 ce02 	umull	ip, lr, r0, r2
 801063e:	f04f 0500 	mov.w	r5, #0
 8010642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8010646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 801064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 801064e:	f04f 0600 	mov.w	r6, #0
 8010652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8010656:	f09c 0f00 	teq	ip, #0
 801065a:	bf18      	it	ne
 801065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8010660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8010664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8010668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 801066c:	d204      	bcs.n	8010678 <__aeabi_dmul+0x80>
 801066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8010672:	416d      	adcs	r5, r5
 8010674:	eb46 0606 	adc.w	r6, r6, r6
 8010678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 801067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8010680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8010684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8010688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 801068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8010690:	bf88      	it	hi
 8010692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8010696:	d81e      	bhi.n	80106d6 <__aeabi_dmul+0xde>
 8010698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 801069c:	bf08      	it	eq
 801069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80106a2:	f150 0000 	adcs.w	r0, r0, #0
 80106a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80106aa:	bd70      	pop	{r4, r5, r6, pc}
 80106ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80106b0:	ea46 0101 	orr.w	r1, r6, r1
 80106b4:	ea40 0002 	orr.w	r0, r0, r2
 80106b8:	ea81 0103 	eor.w	r1, r1, r3
 80106bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80106c0:	bfc2      	ittt	gt
 80106c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80106c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80106ca:	bd70      	popgt	{r4, r5, r6, pc}
 80106cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80106d0:	f04f 0e00 	mov.w	lr, #0
 80106d4:	3c01      	subs	r4, #1
 80106d6:	f300 80ab 	bgt.w	8010830 <__aeabi_dmul+0x238>
 80106da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80106de:	bfde      	ittt	le
 80106e0:	2000      	movle	r0, #0
 80106e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80106e6:	bd70      	pople	{r4, r5, r6, pc}
 80106e8:	f1c4 0400 	rsb	r4, r4, #0
 80106ec:	3c20      	subs	r4, #32
 80106ee:	da35      	bge.n	801075c <__aeabi_dmul+0x164>
 80106f0:	340c      	adds	r4, #12
 80106f2:	dc1b      	bgt.n	801072c <__aeabi_dmul+0x134>
 80106f4:	f104 0414 	add.w	r4, r4, #20
 80106f8:	f1c4 0520 	rsb	r5, r4, #32
 80106fc:	fa00 f305 	lsl.w	r3, r0, r5
 8010700:	fa20 f004 	lsr.w	r0, r0, r4
 8010704:	fa01 f205 	lsl.w	r2, r1, r5
 8010708:	ea40 0002 	orr.w	r0, r0, r2
 801070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8010710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8010714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8010718:	fa21 f604 	lsr.w	r6, r1, r4
 801071c:	eb42 0106 	adc.w	r1, r2, r6
 8010720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8010724:	bf08      	it	eq
 8010726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801072a:	bd70      	pop	{r4, r5, r6, pc}
 801072c:	f1c4 040c 	rsb	r4, r4, #12
 8010730:	f1c4 0520 	rsb	r5, r4, #32
 8010734:	fa00 f304 	lsl.w	r3, r0, r4
 8010738:	fa20 f005 	lsr.w	r0, r0, r5
 801073c:	fa01 f204 	lsl.w	r2, r1, r4
 8010740:	ea40 0002 	orr.w	r0, r0, r2
 8010744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8010748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 801074c:	f141 0100 	adc.w	r1, r1, #0
 8010750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8010754:	bf08      	it	eq
 8010756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801075a:	bd70      	pop	{r4, r5, r6, pc}
 801075c:	f1c4 0520 	rsb	r5, r4, #32
 8010760:	fa00 f205 	lsl.w	r2, r0, r5
 8010764:	ea4e 0e02 	orr.w	lr, lr, r2
 8010768:	fa20 f304 	lsr.w	r3, r0, r4
 801076c:	fa01 f205 	lsl.w	r2, r1, r5
 8010770:	ea43 0302 	orr.w	r3, r3, r2
 8010774:	fa21 f004 	lsr.w	r0, r1, r4
 8010778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 801077c:	fa21 f204 	lsr.w	r2, r1, r4
 8010780:	ea20 0002 	bic.w	r0, r0, r2
 8010784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8010788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 801078c:	bf08      	it	eq
 801078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8010792:	bd70      	pop	{r4, r5, r6, pc}
 8010794:	f094 0f00 	teq	r4, #0
 8010798:	d10f      	bne.n	80107ba <__aeabi_dmul+0x1c2>
 801079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 801079e:	0040      	lsls	r0, r0, #1
 80107a0:	eb41 0101 	adc.w	r1, r1, r1
 80107a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80107a8:	bf08      	it	eq
 80107aa:	3c01      	subeq	r4, #1
 80107ac:	d0f7      	beq.n	801079e <__aeabi_dmul+0x1a6>
 80107ae:	ea41 0106 	orr.w	r1, r1, r6
 80107b2:	f095 0f00 	teq	r5, #0
 80107b6:	bf18      	it	ne
 80107b8:	4770      	bxne	lr
 80107ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80107be:	0052      	lsls	r2, r2, #1
 80107c0:	eb43 0303 	adc.w	r3, r3, r3
 80107c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80107c8:	bf08      	it	eq
 80107ca:	3d01      	subeq	r5, #1
 80107cc:	d0f7      	beq.n	80107be <__aeabi_dmul+0x1c6>
 80107ce:	ea43 0306 	orr.w	r3, r3, r6
 80107d2:	4770      	bx	lr
 80107d4:	ea94 0f0c 	teq	r4, ip
 80107d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80107dc:	bf18      	it	ne
 80107de:	ea95 0f0c 	teqne	r5, ip
 80107e2:	d00c      	beq.n	80107fe <__aeabi_dmul+0x206>
 80107e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80107e8:	bf18      	it	ne
 80107ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80107ee:	d1d1      	bne.n	8010794 <__aeabi_dmul+0x19c>
 80107f0:	ea81 0103 	eor.w	r1, r1, r3
 80107f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80107f8:	f04f 0000 	mov.w	r0, #0
 80107fc:	bd70      	pop	{r4, r5, r6, pc}
 80107fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010802:	bf06      	itte	eq
 8010804:	4610      	moveq	r0, r2
 8010806:	4619      	moveq	r1, r3
 8010808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 801080c:	d019      	beq.n	8010842 <__aeabi_dmul+0x24a>
 801080e:	ea94 0f0c 	teq	r4, ip
 8010812:	d102      	bne.n	801081a <__aeabi_dmul+0x222>
 8010814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8010818:	d113      	bne.n	8010842 <__aeabi_dmul+0x24a>
 801081a:	ea95 0f0c 	teq	r5, ip
 801081e:	d105      	bne.n	801082c <__aeabi_dmul+0x234>
 8010820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8010824:	bf1c      	itt	ne
 8010826:	4610      	movne	r0, r2
 8010828:	4619      	movne	r1, r3
 801082a:	d10a      	bne.n	8010842 <__aeabi_dmul+0x24a>
 801082c:	ea81 0103 	eor.w	r1, r1, r3
 8010830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8010834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8010838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801083c:	f04f 0000 	mov.w	r0, #0
 8010840:	bd70      	pop	{r4, r5, r6, pc}
 8010842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8010846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 801084a:	bd70      	pop	{r4, r5, r6, pc}

0801084c <__aeabi_ddiv>:
 801084c:	b570      	push	{r4, r5, r6, lr}
 801084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8010852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8010856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 801085a:	bf1d      	ittte	ne
 801085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8010860:	ea94 0f0c 	teqne	r4, ip
 8010864:	ea95 0f0c 	teqne	r5, ip
 8010868:	f000 f8a7 	bleq	80109ba <__aeabi_ddiv+0x16e>
 801086c:	eba4 0405 	sub.w	r4, r4, r5
 8010870:	ea81 0e03 	eor.w	lr, r1, r3
 8010874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8010878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 801087c:	f000 8088 	beq.w	8010990 <__aeabi_ddiv+0x144>
 8010880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8010884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8010888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 801088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8010890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8010894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8010898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 801089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80108a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80108a4:	429d      	cmp	r5, r3
 80108a6:	bf08      	it	eq
 80108a8:	4296      	cmpeq	r6, r2
 80108aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80108ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80108b2:	d202      	bcs.n	80108ba <__aeabi_ddiv+0x6e>
 80108b4:	085b      	lsrs	r3, r3, #1
 80108b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80108ba:	1ab6      	subs	r6, r6, r2
 80108bc:	eb65 0503 	sbc.w	r5, r5, r3
 80108c0:	085b      	lsrs	r3, r3, #1
 80108c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80108c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80108ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80108ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80108d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80108d6:	bf22      	ittt	cs
 80108d8:	1ab6      	subcs	r6, r6, r2
 80108da:	4675      	movcs	r5, lr
 80108dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80108e0:	085b      	lsrs	r3, r3, #1
 80108e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80108e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80108ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80108ee:	bf22      	ittt	cs
 80108f0:	1ab6      	subcs	r6, r6, r2
 80108f2:	4675      	movcs	r5, lr
 80108f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80108f8:	085b      	lsrs	r3, r3, #1
 80108fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80108fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8010902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8010906:	bf22      	ittt	cs
 8010908:	1ab6      	subcs	r6, r6, r2
 801090a:	4675      	movcs	r5, lr
 801090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8010910:	085b      	lsrs	r3, r3, #1
 8010912:	ea4f 0232 	mov.w	r2, r2, rrx
 8010916:	ebb6 0e02 	subs.w	lr, r6, r2
 801091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 801091e:	bf22      	ittt	cs
 8010920:	1ab6      	subcs	r6, r6, r2
 8010922:	4675      	movcs	r5, lr
 8010924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8010928:	ea55 0e06 	orrs.w	lr, r5, r6
 801092c:	d018      	beq.n	8010960 <__aeabi_ddiv+0x114>
 801092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8010932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8010936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 801093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 801093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8010942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8010946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 801094a:	d1c0      	bne.n	80108ce <__aeabi_ddiv+0x82>
 801094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8010950:	d10b      	bne.n	801096a <__aeabi_ddiv+0x11e>
 8010952:	ea41 0100 	orr.w	r1, r1, r0
 8010956:	f04f 0000 	mov.w	r0, #0
 801095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 801095e:	e7b6      	b.n	80108ce <__aeabi_ddiv+0x82>
 8010960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8010964:	bf04      	itt	eq
 8010966:	4301      	orreq	r1, r0
 8010968:	2000      	moveq	r0, #0
 801096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 801096e:	bf88      	it	hi
 8010970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8010974:	f63f aeaf 	bhi.w	80106d6 <__aeabi_dmul+0xde>
 8010978:	ebb5 0c03 	subs.w	ip, r5, r3
 801097c:	bf04      	itt	eq
 801097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8010982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8010986:	f150 0000 	adcs.w	r0, r0, #0
 801098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 801098e:	bd70      	pop	{r4, r5, r6, pc}
 8010990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8010994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8010998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 801099c:	bfc2      	ittt	gt
 801099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80109a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80109a6:	bd70      	popgt	{r4, r5, r6, pc}
 80109a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80109ac:	f04f 0e00 	mov.w	lr, #0
 80109b0:	3c01      	subs	r4, #1
 80109b2:	e690      	b.n	80106d6 <__aeabi_dmul+0xde>
 80109b4:	ea45 0e06 	orr.w	lr, r5, r6
 80109b8:	e68d      	b.n	80106d6 <__aeabi_dmul+0xde>
 80109ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80109be:	ea94 0f0c 	teq	r4, ip
 80109c2:	bf08      	it	eq
 80109c4:	ea95 0f0c 	teqeq	r5, ip
 80109c8:	f43f af3b 	beq.w	8010842 <__aeabi_dmul+0x24a>
 80109cc:	ea94 0f0c 	teq	r4, ip
 80109d0:	d10a      	bne.n	80109e8 <__aeabi_ddiv+0x19c>
 80109d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80109d6:	f47f af34 	bne.w	8010842 <__aeabi_dmul+0x24a>
 80109da:	ea95 0f0c 	teq	r5, ip
 80109de:	f47f af25 	bne.w	801082c <__aeabi_dmul+0x234>
 80109e2:	4610      	mov	r0, r2
 80109e4:	4619      	mov	r1, r3
 80109e6:	e72c      	b.n	8010842 <__aeabi_dmul+0x24a>
 80109e8:	ea95 0f0c 	teq	r5, ip
 80109ec:	d106      	bne.n	80109fc <__aeabi_ddiv+0x1b0>
 80109ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80109f2:	f43f aefd 	beq.w	80107f0 <__aeabi_dmul+0x1f8>
 80109f6:	4610      	mov	r0, r2
 80109f8:	4619      	mov	r1, r3
 80109fa:	e722      	b.n	8010842 <__aeabi_dmul+0x24a>
 80109fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010a00:	bf18      	it	ne
 8010a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8010a06:	f47f aec5 	bne.w	8010794 <__aeabi_dmul+0x19c>
 8010a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8010a0e:	f47f af0d 	bne.w	801082c <__aeabi_dmul+0x234>
 8010a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8010a16:	f47f aeeb 	bne.w	80107f0 <__aeabi_dmul+0x1f8>
 8010a1a:	e712      	b.n	8010842 <__aeabi_dmul+0x24a>

08010a1c <__gedf2>:
 8010a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8010a20:	e006      	b.n	8010a30 <__cmpdf2+0x4>
 8010a22:	bf00      	nop

08010a24 <__ledf2>:
 8010a24:	f04f 0c01 	mov.w	ip, #1
 8010a28:	e002      	b.n	8010a30 <__cmpdf2+0x4>
 8010a2a:	bf00      	nop

08010a2c <__cmpdf2>:
 8010a2c:	f04f 0c01 	mov.w	ip, #1
 8010a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8010a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010a40:	bf18      	it	ne
 8010a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8010a46:	d01b      	beq.n	8010a80 <__cmpdf2+0x54>
 8010a48:	b001      	add	sp, #4
 8010a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8010a4e:	bf0c      	ite	eq
 8010a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8010a54:	ea91 0f03 	teqne	r1, r3
 8010a58:	bf02      	ittt	eq
 8010a5a:	ea90 0f02 	teqeq	r0, r2
 8010a5e:	2000      	moveq	r0, #0
 8010a60:	4770      	bxeq	lr
 8010a62:	f110 0f00 	cmn.w	r0, #0
 8010a66:	ea91 0f03 	teq	r1, r3
 8010a6a:	bf58      	it	pl
 8010a6c:	4299      	cmppl	r1, r3
 8010a6e:	bf08      	it	eq
 8010a70:	4290      	cmpeq	r0, r2
 8010a72:	bf2c      	ite	cs
 8010a74:	17d8      	asrcs	r0, r3, #31
 8010a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8010a7a:	f040 0001 	orr.w	r0, r0, #1
 8010a7e:	4770      	bx	lr
 8010a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010a88:	d102      	bne.n	8010a90 <__cmpdf2+0x64>
 8010a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8010a8e:	d107      	bne.n	8010aa0 <__cmpdf2+0x74>
 8010a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010a98:	d1d6      	bne.n	8010a48 <__cmpdf2+0x1c>
 8010a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8010a9e:	d0d3      	beq.n	8010a48 <__cmpdf2+0x1c>
 8010aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8010aa4:	4770      	bx	lr
 8010aa6:	bf00      	nop

08010aa8 <__aeabi_cdrcmple>:
 8010aa8:	4684      	mov	ip, r0
 8010aaa:	4610      	mov	r0, r2
 8010aac:	4662      	mov	r2, ip
 8010aae:	468c      	mov	ip, r1
 8010ab0:	4619      	mov	r1, r3
 8010ab2:	4663      	mov	r3, ip
 8010ab4:	e000      	b.n	8010ab8 <__aeabi_cdcmpeq>
 8010ab6:	bf00      	nop

08010ab8 <__aeabi_cdcmpeq>:
 8010ab8:	b501      	push	{r0, lr}
 8010aba:	f7ff ffb7 	bl	8010a2c <__cmpdf2>
 8010abe:	2800      	cmp	r0, #0
 8010ac0:	bf48      	it	mi
 8010ac2:	f110 0f00 	cmnmi.w	r0, #0
 8010ac6:	bd01      	pop	{r0, pc}

08010ac8 <__aeabi_dcmpeq>:
 8010ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010acc:	f7ff fff4 	bl	8010ab8 <__aeabi_cdcmpeq>
 8010ad0:	bf0c      	ite	eq
 8010ad2:	2001      	moveq	r0, #1
 8010ad4:	2000      	movne	r0, #0
 8010ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8010ada:	bf00      	nop

08010adc <__aeabi_dcmplt>:
 8010adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010ae0:	f7ff ffea 	bl	8010ab8 <__aeabi_cdcmpeq>
 8010ae4:	bf34      	ite	cc
 8010ae6:	2001      	movcc	r0, #1
 8010ae8:	2000      	movcs	r0, #0
 8010aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8010aee:	bf00      	nop

08010af0 <__aeabi_dcmple>:
 8010af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010af4:	f7ff ffe0 	bl	8010ab8 <__aeabi_cdcmpeq>
 8010af8:	bf94      	ite	ls
 8010afa:	2001      	movls	r0, #1
 8010afc:	2000      	movhi	r0, #0
 8010afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b02:	bf00      	nop

08010b04 <__aeabi_dcmpge>:
 8010b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b08:	f7ff ffce 	bl	8010aa8 <__aeabi_cdrcmple>
 8010b0c:	bf94      	ite	ls
 8010b0e:	2001      	movls	r0, #1
 8010b10:	2000      	movhi	r0, #0
 8010b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b16:	bf00      	nop

08010b18 <__aeabi_dcmpgt>:
 8010b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b1c:	f7ff ffc4 	bl	8010aa8 <__aeabi_cdrcmple>
 8010b20:	bf34      	ite	cc
 8010b22:	2001      	movcc	r0, #1
 8010b24:	2000      	movcs	r0, #0
 8010b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b2a:	bf00      	nop

08010b2c <__aeabi_dcmpun>:
 8010b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010b34:	d102      	bne.n	8010b3c <__aeabi_dcmpun+0x10>
 8010b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8010b3a:	d10a      	bne.n	8010b52 <__aeabi_dcmpun+0x26>
 8010b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010b44:	d102      	bne.n	8010b4c <__aeabi_dcmpun+0x20>
 8010b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8010b4a:	d102      	bne.n	8010b52 <__aeabi_dcmpun+0x26>
 8010b4c:	f04f 0000 	mov.w	r0, #0
 8010b50:	4770      	bx	lr
 8010b52:	f04f 0001 	mov.w	r0, #1
 8010b56:	4770      	bx	lr

08010b58 <__aeabi_uldivmod>:
 8010b58:	b953      	cbnz	r3, 8010b70 <__aeabi_uldivmod+0x18>
 8010b5a:	b94a      	cbnz	r2, 8010b70 <__aeabi_uldivmod+0x18>
 8010b5c:	2900      	cmp	r1, #0
 8010b5e:	bf08      	it	eq
 8010b60:	2800      	cmpeq	r0, #0
 8010b62:	bf1c      	itt	ne
 8010b64:	f04f 31ff 	movne.w	r1, #4294967295
 8010b68:	f04f 30ff 	movne.w	r0, #4294967295
 8010b6c:	f000 b96e 	b.w	8010e4c <__aeabi_idiv0>
 8010b70:	f1ad 0c08 	sub.w	ip, sp, #8
 8010b74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8010b78:	f000 f806 	bl	8010b88 <__udivmoddi4>
 8010b7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010b80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010b84:	b004      	add	sp, #16
 8010b86:	4770      	bx	lr

08010b88 <__udivmoddi4>:
 8010b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010b8c:	9d08      	ldr	r5, [sp, #32]
 8010b8e:	4604      	mov	r4, r0
 8010b90:	468c      	mov	ip, r1
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	f040 8083 	bne.w	8010c9e <__udivmoddi4+0x116>
 8010b98:	428a      	cmp	r2, r1
 8010b9a:	4617      	mov	r7, r2
 8010b9c:	d947      	bls.n	8010c2e <__udivmoddi4+0xa6>
 8010b9e:	fab2 f282 	clz	r2, r2
 8010ba2:	b142      	cbz	r2, 8010bb6 <__udivmoddi4+0x2e>
 8010ba4:	f1c2 0020 	rsb	r0, r2, #32
 8010ba8:	fa24 f000 	lsr.w	r0, r4, r0
 8010bac:	4091      	lsls	r1, r2
 8010bae:	4097      	lsls	r7, r2
 8010bb0:	ea40 0c01 	orr.w	ip, r0, r1
 8010bb4:	4094      	lsls	r4, r2
 8010bb6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8010bba:	0c23      	lsrs	r3, r4, #16
 8010bbc:	fbbc f6f8 	udiv	r6, ip, r8
 8010bc0:	fa1f fe87 	uxth.w	lr, r7
 8010bc4:	fb08 c116 	mls	r1, r8, r6, ip
 8010bc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8010bcc:	fb06 f10e 	mul.w	r1, r6, lr
 8010bd0:	4299      	cmp	r1, r3
 8010bd2:	d909      	bls.n	8010be8 <__udivmoddi4+0x60>
 8010bd4:	18fb      	adds	r3, r7, r3
 8010bd6:	f106 30ff 	add.w	r0, r6, #4294967295
 8010bda:	f080 8119 	bcs.w	8010e10 <__udivmoddi4+0x288>
 8010bde:	4299      	cmp	r1, r3
 8010be0:	f240 8116 	bls.w	8010e10 <__udivmoddi4+0x288>
 8010be4:	3e02      	subs	r6, #2
 8010be6:	443b      	add	r3, r7
 8010be8:	1a5b      	subs	r3, r3, r1
 8010bea:	b2a4      	uxth	r4, r4
 8010bec:	fbb3 f0f8 	udiv	r0, r3, r8
 8010bf0:	fb08 3310 	mls	r3, r8, r0, r3
 8010bf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8010bf8:	fb00 fe0e 	mul.w	lr, r0, lr
 8010bfc:	45a6      	cmp	lr, r4
 8010bfe:	d909      	bls.n	8010c14 <__udivmoddi4+0x8c>
 8010c00:	193c      	adds	r4, r7, r4
 8010c02:	f100 33ff 	add.w	r3, r0, #4294967295
 8010c06:	f080 8105 	bcs.w	8010e14 <__udivmoddi4+0x28c>
 8010c0a:	45a6      	cmp	lr, r4
 8010c0c:	f240 8102 	bls.w	8010e14 <__udivmoddi4+0x28c>
 8010c10:	3802      	subs	r0, #2
 8010c12:	443c      	add	r4, r7
 8010c14:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8010c18:	eba4 040e 	sub.w	r4, r4, lr
 8010c1c:	2600      	movs	r6, #0
 8010c1e:	b11d      	cbz	r5, 8010c28 <__udivmoddi4+0xa0>
 8010c20:	40d4      	lsrs	r4, r2
 8010c22:	2300      	movs	r3, #0
 8010c24:	e9c5 4300 	strd	r4, r3, [r5]
 8010c28:	4631      	mov	r1, r6
 8010c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c2e:	b902      	cbnz	r2, 8010c32 <__udivmoddi4+0xaa>
 8010c30:	deff      	udf	#255	; 0xff
 8010c32:	fab2 f282 	clz	r2, r2
 8010c36:	2a00      	cmp	r2, #0
 8010c38:	d150      	bne.n	8010cdc <__udivmoddi4+0x154>
 8010c3a:	1bcb      	subs	r3, r1, r7
 8010c3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8010c40:	fa1f f887 	uxth.w	r8, r7
 8010c44:	2601      	movs	r6, #1
 8010c46:	fbb3 fcfe 	udiv	ip, r3, lr
 8010c4a:	0c21      	lsrs	r1, r4, #16
 8010c4c:	fb0e 331c 	mls	r3, lr, ip, r3
 8010c50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8010c54:	fb08 f30c 	mul.w	r3, r8, ip
 8010c58:	428b      	cmp	r3, r1
 8010c5a:	d907      	bls.n	8010c6c <__udivmoddi4+0xe4>
 8010c5c:	1879      	adds	r1, r7, r1
 8010c5e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8010c62:	d202      	bcs.n	8010c6a <__udivmoddi4+0xe2>
 8010c64:	428b      	cmp	r3, r1
 8010c66:	f200 80e9 	bhi.w	8010e3c <__udivmoddi4+0x2b4>
 8010c6a:	4684      	mov	ip, r0
 8010c6c:	1ac9      	subs	r1, r1, r3
 8010c6e:	b2a3      	uxth	r3, r4
 8010c70:	fbb1 f0fe 	udiv	r0, r1, lr
 8010c74:	fb0e 1110 	mls	r1, lr, r0, r1
 8010c78:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8010c7c:	fb08 f800 	mul.w	r8, r8, r0
 8010c80:	45a0      	cmp	r8, r4
 8010c82:	d907      	bls.n	8010c94 <__udivmoddi4+0x10c>
 8010c84:	193c      	adds	r4, r7, r4
 8010c86:	f100 33ff 	add.w	r3, r0, #4294967295
 8010c8a:	d202      	bcs.n	8010c92 <__udivmoddi4+0x10a>
 8010c8c:	45a0      	cmp	r8, r4
 8010c8e:	f200 80d9 	bhi.w	8010e44 <__udivmoddi4+0x2bc>
 8010c92:	4618      	mov	r0, r3
 8010c94:	eba4 0408 	sub.w	r4, r4, r8
 8010c98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8010c9c:	e7bf      	b.n	8010c1e <__udivmoddi4+0x96>
 8010c9e:	428b      	cmp	r3, r1
 8010ca0:	d909      	bls.n	8010cb6 <__udivmoddi4+0x12e>
 8010ca2:	2d00      	cmp	r5, #0
 8010ca4:	f000 80b1 	beq.w	8010e0a <__udivmoddi4+0x282>
 8010ca8:	2600      	movs	r6, #0
 8010caa:	e9c5 0100 	strd	r0, r1, [r5]
 8010cae:	4630      	mov	r0, r6
 8010cb0:	4631      	mov	r1, r6
 8010cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010cb6:	fab3 f683 	clz	r6, r3
 8010cba:	2e00      	cmp	r6, #0
 8010cbc:	d14a      	bne.n	8010d54 <__udivmoddi4+0x1cc>
 8010cbe:	428b      	cmp	r3, r1
 8010cc0:	d302      	bcc.n	8010cc8 <__udivmoddi4+0x140>
 8010cc2:	4282      	cmp	r2, r0
 8010cc4:	f200 80b8 	bhi.w	8010e38 <__udivmoddi4+0x2b0>
 8010cc8:	1a84      	subs	r4, r0, r2
 8010cca:	eb61 0103 	sbc.w	r1, r1, r3
 8010cce:	2001      	movs	r0, #1
 8010cd0:	468c      	mov	ip, r1
 8010cd2:	2d00      	cmp	r5, #0
 8010cd4:	d0a8      	beq.n	8010c28 <__udivmoddi4+0xa0>
 8010cd6:	e9c5 4c00 	strd	r4, ip, [r5]
 8010cda:	e7a5      	b.n	8010c28 <__udivmoddi4+0xa0>
 8010cdc:	f1c2 0320 	rsb	r3, r2, #32
 8010ce0:	fa20 f603 	lsr.w	r6, r0, r3
 8010ce4:	4097      	lsls	r7, r2
 8010ce6:	fa01 f002 	lsl.w	r0, r1, r2
 8010cea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8010cee:	40d9      	lsrs	r1, r3
 8010cf0:	4330      	orrs	r0, r6
 8010cf2:	0c03      	lsrs	r3, r0, #16
 8010cf4:	fbb1 f6fe 	udiv	r6, r1, lr
 8010cf8:	fa1f f887 	uxth.w	r8, r7
 8010cfc:	fb0e 1116 	mls	r1, lr, r6, r1
 8010d00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8010d04:	fb06 f108 	mul.w	r1, r6, r8
 8010d08:	4299      	cmp	r1, r3
 8010d0a:	fa04 f402 	lsl.w	r4, r4, r2
 8010d0e:	d909      	bls.n	8010d24 <__udivmoddi4+0x19c>
 8010d10:	18fb      	adds	r3, r7, r3
 8010d12:	f106 3cff 	add.w	ip, r6, #4294967295
 8010d16:	f080 808d 	bcs.w	8010e34 <__udivmoddi4+0x2ac>
 8010d1a:	4299      	cmp	r1, r3
 8010d1c:	f240 808a 	bls.w	8010e34 <__udivmoddi4+0x2ac>
 8010d20:	3e02      	subs	r6, #2
 8010d22:	443b      	add	r3, r7
 8010d24:	1a5b      	subs	r3, r3, r1
 8010d26:	b281      	uxth	r1, r0
 8010d28:	fbb3 f0fe 	udiv	r0, r3, lr
 8010d2c:	fb0e 3310 	mls	r3, lr, r0, r3
 8010d30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8010d34:	fb00 f308 	mul.w	r3, r0, r8
 8010d38:	428b      	cmp	r3, r1
 8010d3a:	d907      	bls.n	8010d4c <__udivmoddi4+0x1c4>
 8010d3c:	1879      	adds	r1, r7, r1
 8010d3e:	f100 3cff 	add.w	ip, r0, #4294967295
 8010d42:	d273      	bcs.n	8010e2c <__udivmoddi4+0x2a4>
 8010d44:	428b      	cmp	r3, r1
 8010d46:	d971      	bls.n	8010e2c <__udivmoddi4+0x2a4>
 8010d48:	3802      	subs	r0, #2
 8010d4a:	4439      	add	r1, r7
 8010d4c:	1acb      	subs	r3, r1, r3
 8010d4e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8010d52:	e778      	b.n	8010c46 <__udivmoddi4+0xbe>
 8010d54:	f1c6 0c20 	rsb	ip, r6, #32
 8010d58:	fa03 f406 	lsl.w	r4, r3, r6
 8010d5c:	fa22 f30c 	lsr.w	r3, r2, ip
 8010d60:	431c      	orrs	r4, r3
 8010d62:	fa20 f70c 	lsr.w	r7, r0, ip
 8010d66:	fa01 f306 	lsl.w	r3, r1, r6
 8010d6a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8010d6e:	fa21 f10c 	lsr.w	r1, r1, ip
 8010d72:	431f      	orrs	r7, r3
 8010d74:	0c3b      	lsrs	r3, r7, #16
 8010d76:	fbb1 f9fe 	udiv	r9, r1, lr
 8010d7a:	fa1f f884 	uxth.w	r8, r4
 8010d7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8010d82:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8010d86:	fb09 fa08 	mul.w	sl, r9, r8
 8010d8a:	458a      	cmp	sl, r1
 8010d8c:	fa02 f206 	lsl.w	r2, r2, r6
 8010d90:	fa00 f306 	lsl.w	r3, r0, r6
 8010d94:	d908      	bls.n	8010da8 <__udivmoddi4+0x220>
 8010d96:	1861      	adds	r1, r4, r1
 8010d98:	f109 30ff 	add.w	r0, r9, #4294967295
 8010d9c:	d248      	bcs.n	8010e30 <__udivmoddi4+0x2a8>
 8010d9e:	458a      	cmp	sl, r1
 8010da0:	d946      	bls.n	8010e30 <__udivmoddi4+0x2a8>
 8010da2:	f1a9 0902 	sub.w	r9, r9, #2
 8010da6:	4421      	add	r1, r4
 8010da8:	eba1 010a 	sub.w	r1, r1, sl
 8010dac:	b2bf      	uxth	r7, r7
 8010dae:	fbb1 f0fe 	udiv	r0, r1, lr
 8010db2:	fb0e 1110 	mls	r1, lr, r0, r1
 8010db6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8010dba:	fb00 f808 	mul.w	r8, r0, r8
 8010dbe:	45b8      	cmp	r8, r7
 8010dc0:	d907      	bls.n	8010dd2 <__udivmoddi4+0x24a>
 8010dc2:	19e7      	adds	r7, r4, r7
 8010dc4:	f100 31ff 	add.w	r1, r0, #4294967295
 8010dc8:	d22e      	bcs.n	8010e28 <__udivmoddi4+0x2a0>
 8010dca:	45b8      	cmp	r8, r7
 8010dcc:	d92c      	bls.n	8010e28 <__udivmoddi4+0x2a0>
 8010dce:	3802      	subs	r0, #2
 8010dd0:	4427      	add	r7, r4
 8010dd2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8010dd6:	eba7 0708 	sub.w	r7, r7, r8
 8010dda:	fba0 8902 	umull	r8, r9, r0, r2
 8010dde:	454f      	cmp	r7, r9
 8010de0:	46c6      	mov	lr, r8
 8010de2:	4649      	mov	r1, r9
 8010de4:	d31a      	bcc.n	8010e1c <__udivmoddi4+0x294>
 8010de6:	d017      	beq.n	8010e18 <__udivmoddi4+0x290>
 8010de8:	b15d      	cbz	r5, 8010e02 <__udivmoddi4+0x27a>
 8010dea:	ebb3 020e 	subs.w	r2, r3, lr
 8010dee:	eb67 0701 	sbc.w	r7, r7, r1
 8010df2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8010df6:	40f2      	lsrs	r2, r6
 8010df8:	ea4c 0202 	orr.w	r2, ip, r2
 8010dfc:	40f7      	lsrs	r7, r6
 8010dfe:	e9c5 2700 	strd	r2, r7, [r5]
 8010e02:	2600      	movs	r6, #0
 8010e04:	4631      	mov	r1, r6
 8010e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e0a:	462e      	mov	r6, r5
 8010e0c:	4628      	mov	r0, r5
 8010e0e:	e70b      	b.n	8010c28 <__udivmoddi4+0xa0>
 8010e10:	4606      	mov	r6, r0
 8010e12:	e6e9      	b.n	8010be8 <__udivmoddi4+0x60>
 8010e14:	4618      	mov	r0, r3
 8010e16:	e6fd      	b.n	8010c14 <__udivmoddi4+0x8c>
 8010e18:	4543      	cmp	r3, r8
 8010e1a:	d2e5      	bcs.n	8010de8 <__udivmoddi4+0x260>
 8010e1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8010e20:	eb69 0104 	sbc.w	r1, r9, r4
 8010e24:	3801      	subs	r0, #1
 8010e26:	e7df      	b.n	8010de8 <__udivmoddi4+0x260>
 8010e28:	4608      	mov	r0, r1
 8010e2a:	e7d2      	b.n	8010dd2 <__udivmoddi4+0x24a>
 8010e2c:	4660      	mov	r0, ip
 8010e2e:	e78d      	b.n	8010d4c <__udivmoddi4+0x1c4>
 8010e30:	4681      	mov	r9, r0
 8010e32:	e7b9      	b.n	8010da8 <__udivmoddi4+0x220>
 8010e34:	4666      	mov	r6, ip
 8010e36:	e775      	b.n	8010d24 <__udivmoddi4+0x19c>
 8010e38:	4630      	mov	r0, r6
 8010e3a:	e74a      	b.n	8010cd2 <__udivmoddi4+0x14a>
 8010e3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8010e40:	4439      	add	r1, r7
 8010e42:	e713      	b.n	8010c6c <__udivmoddi4+0xe4>
 8010e44:	3802      	subs	r0, #2
 8010e46:	443c      	add	r4, r7
 8010e48:	e724      	b.n	8010c94 <__udivmoddi4+0x10c>
 8010e4a:	bf00      	nop

08010e4c <__aeabi_idiv0>:
 8010e4c:	4770      	bx	lr
 8010e4e:	bf00      	nop

08010e50 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8010e50:	b480      	push	{r7}
 8010e52:	b085      	sub	sp, #20
 8010e54:	af00      	add	r7, sp, #0
 8010e56:	60f8      	str	r0, [r7, #12]
 8010e58:	60b9      	str	r1, [r7, #8]
 8010e5a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8010e5c:	68fb      	ldr	r3, [r7, #12]
 8010e5e:	4a07      	ldr	r2, [pc, #28]	; (8010e7c <vApplicationGetIdleTaskMemory+0x2c>)
 8010e60:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8010e62:	68bb      	ldr	r3, [r7, #8]
 8010e64:	4a06      	ldr	r2, [pc, #24]	; (8010e80 <vApplicationGetIdleTaskMemory+0x30>)
 8010e66:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	2280      	movs	r2, #128	; 0x80
 8010e6c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8010e6e:	bf00      	nop
 8010e70:	3714      	adds	r7, #20
 8010e72:	46bd      	mov	sp, r7
 8010e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e78:	4770      	bx	lr
 8010e7a:	bf00      	nop
 8010e7c:	200000fc 	.word	0x200000fc
 8010e80:	200001b0 	.word	0x200001b0

08010e84 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8010e84:	b480      	push	{r7}
 8010e86:	b085      	sub	sp, #20
 8010e88:	af00      	add	r7, sp, #0
 8010e8a:	60f8      	str	r0, [r7, #12]
 8010e8c:	60b9      	str	r1, [r7, #8]
 8010e8e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8010e90:	68fb      	ldr	r3, [r7, #12]
 8010e92:	4a07      	ldr	r2, [pc, #28]	; (8010eb0 <vApplicationGetTimerTaskMemory+0x2c>)
 8010e94:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8010e96:	68bb      	ldr	r3, [r7, #8]
 8010e98:	4a06      	ldr	r2, [pc, #24]	; (8010eb4 <vApplicationGetTimerTaskMemory+0x30>)
 8010e9a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010ea2:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8010ea4:	bf00      	nop
 8010ea6:	3714      	adds	r7, #20
 8010ea8:	46bd      	mov	sp, r7
 8010eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eae:	4770      	bx	lr
 8010eb0:	200003b0 	.word	0x200003b0
 8010eb4:	20000464 	.word	0x20000464

08010eb8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8010eb8:	b480      	push	{r7}
 8010eba:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8010ebc:	f3bf 8f4f 	dsb	sy
}
 8010ec0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8010ec2:	4b06      	ldr	r3, [pc, #24]	; (8010edc <__NVIC_SystemReset+0x24>)
 8010ec4:	68db      	ldr	r3, [r3, #12]
 8010ec6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8010eca:	4904      	ldr	r1, [pc, #16]	; (8010edc <__NVIC_SystemReset+0x24>)
 8010ecc:	4b04      	ldr	r3, [pc, #16]	; (8010ee0 <__NVIC_SystemReset+0x28>)
 8010ece:	4313      	orrs	r3, r2
 8010ed0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8010ed2:	f3bf 8f4f 	dsb	sy
}
 8010ed6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8010ed8:	bf00      	nop
 8010eda:	e7fd      	b.n	8010ed8 <__NVIC_SystemReset+0x20>
 8010edc:	e000ed00 	.word	0xe000ed00
 8010ee0:	05fa0004 	.word	0x05fa0004

08010ee4 <HAL_UART_TxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8010ee4:	b580      	push	{r7, lr}
 8010ee6:	b082      	sub	sp, #8
 8010ee8:	af00      	add	r7, sp, #0
 8010eea:	6078      	str	r0, [r7, #4]
	  if (huart->Instance == USART3)
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	681b      	ldr	r3, [r3, #0]
 8010ef0:	4a10      	ldr	r2, [pc, #64]	; (8010f34 <HAL_UART_TxCpltCallback+0x50>)
 8010ef2:	4293      	cmp	r3, r2
 8010ef4:	d104      	bne.n	8010f00 <HAL_UART_TxCpltCallback+0x1c>
	  {
		  osSemaphoreRelease(TransmissionStateHandle);
 8010ef6:	4b10      	ldr	r3, [pc, #64]	; (8010f38 <HAL_UART_TxCpltCallback+0x54>)
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	4618      	mov	r0, r3
 8010efc:	f008 fad8 	bl	80194b0 <osSemaphoreRelease>
	  }

	  if (huart->Instance == USART6)
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	681b      	ldr	r3, [r3, #0]
 8010f04:	4a0d      	ldr	r2, [pc, #52]	; (8010f3c <HAL_UART_TxCpltCallback+0x58>)
 8010f06:	4293      	cmp	r3, r2
 8010f08:	d10f      	bne.n	8010f2a <HAL_UART_TxCpltCallback+0x46>
	  {
		  //LED8_TOGGLE();
		  osSemaphoreRelease(RS485TransmissionStateHandle);
 8010f0a:	4b0d      	ldr	r3, [pc, #52]	; (8010f40 <HAL_UART_TxCpltCallback+0x5c>)
 8010f0c:	681b      	ldr	r3, [r3, #0]
 8010f0e:	4618      	mov	r0, r3
 8010f10:	f008 face 	bl	80194b0 <osSemaphoreRelease>
		  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_RESET); // устанавливаем микросхему на прием
 8010f14:	2200      	movs	r2, #0
 8010f16:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8010f1a:	480a      	ldr	r0, [pc, #40]	; (8010f44 <HAL_UART_TxCpltCallback+0x60>)
 8010f1c:	f003 fcb8 	bl	8014890 <HAL_GPIO_WritePin>
		  HAL_UART_Receive_DMA(&huart6, &meter_data[0], 1); // включаем прием со счетчика
 8010f20:	2201      	movs	r2, #1
 8010f22:	4909      	ldr	r1, [pc, #36]	; (8010f48 <HAL_UART_TxCpltCallback+0x64>)
 8010f24:	4809      	ldr	r0, [pc, #36]	; (8010f4c <HAL_UART_TxCpltCallback+0x68>)
 8010f26:	f006 fffd 	bl	8017f24 <HAL_UART_Receive_DMA>

	  }

}
 8010f2a:	bf00      	nop
 8010f2c:	3708      	adds	r7, #8
 8010f2e:	46bd      	mov	sp, r7
 8010f30:	bd80      	pop	{r7, pc}
 8010f32:	bf00      	nop
 8010f34:	40004800 	.word	0x40004800
 8010f38:	20009ea0 	.word	0x20009ea0
 8010f3c:	40011400 	.word	0x40011400
 8010f40:	20009b98 	.word	0x20009b98
 8010f44:	40021800 	.word	0x40021800
 8010f48:	20009850 	.word	0x20009850
 8010f4c:	20009dc4 	.word	0x20009dc4

08010f50 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8010f50:	b580      	push	{r7, lr}
 8010f52:	b082      	sub	sp, #8
 8010f54:	af00      	add	r7, sp, #0
 8010f56:	6078      	str	r0, [r7, #4]

	  if (huart->Instance == USART3)
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	681b      	ldr	r3, [r3, #0]
 8010f5c:	4a21      	ldr	r2, [pc, #132]	; (8010fe4 <HAL_UART_RxCpltCallback+0x94>)
 8010f5e:	4293      	cmp	r3, r2
 8010f60:	d119      	bne.n	8010f96 <HAL_UART_RxCpltCallback+0x46>
	  {
		  //LED_VD5_TOGGLE();
		  modem_rx_buffer[modem_rx_number++] = modem_rx_data[0];
 8010f62:	4b21      	ldr	r3, [pc, #132]	; (8010fe8 <HAL_UART_RxCpltCallback+0x98>)
 8010f64:	781b      	ldrb	r3, [r3, #0]
 8010f66:	1c5a      	adds	r2, r3, #1
 8010f68:	b2d1      	uxtb	r1, r2
 8010f6a:	4a1f      	ldr	r2, [pc, #124]	; (8010fe8 <HAL_UART_RxCpltCallback+0x98>)
 8010f6c:	7011      	strb	r1, [r2, #0]
 8010f6e:	461a      	mov	r2, r3
 8010f70:	4b1e      	ldr	r3, [pc, #120]	; (8010fec <HAL_UART_RxCpltCallback+0x9c>)
 8010f72:	7819      	ldrb	r1, [r3, #0]
 8010f74:	4b1e      	ldr	r3, [pc, #120]	; (8010ff0 <HAL_UART_RxCpltCallback+0xa0>)
 8010f76:	5499      	strb	r1, [r3, r2]
		  osMessagePut(ModbusQueueHandle, (uint32_t)modem_rx_data[0], 2000);
 8010f78:	4b1e      	ldr	r3, [pc, #120]	; (8010ff4 <HAL_UART_RxCpltCallback+0xa4>)
 8010f7a:	681b      	ldr	r3, [r3, #0]
 8010f7c:	4a1b      	ldr	r2, [pc, #108]	; (8010fec <HAL_UART_RxCpltCallback+0x9c>)
 8010f7e:	7812      	ldrb	r2, [r2, #0]
 8010f80:	4611      	mov	r1, r2
 8010f82:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8010f86:	4618      	mov	r0, r3
 8010f88:	f008 faf0 	bl	801956c <osMessagePut>
		  HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 8010f8c:	2201      	movs	r2, #1
 8010f8e:	4917      	ldr	r1, [pc, #92]	; (8010fec <HAL_UART_RxCpltCallback+0x9c>)
 8010f90:	4819      	ldr	r0, [pc, #100]	; (8010ff8 <HAL_UART_RxCpltCallback+0xa8>)
 8010f92:	f006 ffc7 	bl	8017f24 <HAL_UART_Receive_DMA>
	  }

	  if (huart->Instance == USART6)
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	681b      	ldr	r3, [r3, #0]
 8010f9a:	4a18      	ldr	r2, [pc, #96]	; (8010ffc <HAL_UART_RxCpltCallback+0xac>)
 8010f9c:	4293      	cmp	r3, r2
 8010f9e:	d11c      	bne.n	8010fda <HAL_UART_RxCpltCallback+0x8a>
	  {
		  //LED7_TOGGLE();
		  meter_data[0] = meter_data[0]&0x7F;
 8010fa0:	4b17      	ldr	r3, [pc, #92]	; (8011000 <HAL_UART_RxCpltCallback+0xb0>)
 8010fa2:	781b      	ldrb	r3, [r3, #0]
 8010fa4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010fa8:	b2da      	uxtb	r2, r3
 8010faa:	4b15      	ldr	r3, [pc, #84]	; (8011000 <HAL_UART_RxCpltCallback+0xb0>)
 8010fac:	701a      	strb	r2, [r3, #0]
		  meter_rx_buffer[meter_rx_number++] = meter_data[0];
 8010fae:	4b15      	ldr	r3, [pc, #84]	; (8011004 <HAL_UART_RxCpltCallback+0xb4>)
 8010fb0:	781b      	ldrb	r3, [r3, #0]
 8010fb2:	1c5a      	adds	r2, r3, #1
 8010fb4:	b2d1      	uxtb	r1, r2
 8010fb6:	4a13      	ldr	r2, [pc, #76]	; (8011004 <HAL_UART_RxCpltCallback+0xb4>)
 8010fb8:	7011      	strb	r1, [r2, #0]
 8010fba:	461a      	mov	r2, r3
 8010fbc:	4b10      	ldr	r3, [pc, #64]	; (8011000 <HAL_UART_RxCpltCallback+0xb0>)
 8010fbe:	7819      	ldrb	r1, [r3, #0]
 8010fc0:	4b11      	ldr	r3, [pc, #68]	; (8011008 <HAL_UART_RxCpltCallback+0xb8>)
 8010fc2:	5499      	strb	r1, [r3, r2]
		  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_RESET); // устанавливаем микросхему на прием
 8010fc4:	2200      	movs	r2, #0
 8010fc6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8010fca:	4810      	ldr	r0, [pc, #64]	; (801100c <HAL_UART_RxCpltCallback+0xbc>)
 8010fcc:	f003 fc60 	bl	8014890 <HAL_GPIO_WritePin>
		  HAL_UART_Receive_DMA(&huart6, &meter_data[0], 1); // включаем прием со счетчика
 8010fd0:	2201      	movs	r2, #1
 8010fd2:	490b      	ldr	r1, [pc, #44]	; (8011000 <HAL_UART_RxCpltCallback+0xb0>)
 8010fd4:	480e      	ldr	r0, [pc, #56]	; (8011010 <HAL_UART_RxCpltCallback+0xc0>)
 8010fd6:	f006 ffa5 	bl	8017f24 <HAL_UART_Receive_DMA>

		  //if(meter_rx_number>10){meter_rx_number=0;}

	  }

}
 8010fda:	bf00      	nop
 8010fdc:	3708      	adds	r7, #8
 8010fde:	46bd      	mov	sp, r7
 8010fe0:	bd80      	pop	{r7, pc}
 8010fe2:	bf00      	nop
 8010fe4:	40004800 	.word	0x40004800
 8010fe8:	20000864 	.word	0x20000864
 8010fec:	20009bbc 	.word	0x20009bbc
 8010ff0:	20009cc4 	.word	0x20009cc4
 8010ff4:	2000830c 	.word	0x2000830c
 8010ff8:	2000825c 	.word	0x2000825c
 8010ffc:	40011400 	.word	0x40011400
 8011000:	20009850 	.word	0x20009850
 8011004:	20000865 	.word	0x20000865
 8011008:	20009a0c 	.word	0x20009a0c
 801100c:	40021800 	.word	0x40021800
 8011010:	20009dc4 	.word	0x20009dc4

08011014 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8011014:	b480      	push	{r7}
 8011016:	b083      	sub	sp, #12
 8011018:	af00      	add	r7, sp, #0
 801101a:	6078      	str	r0, [r7, #4]
  if(hadc->Instance == ADC1)
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	681b      	ldr	r3, [r3, #0]
 8011020:	4a3d      	ldr	r2, [pc, #244]	; (8011118 <HAL_ADC_ConvCpltCallback+0x104>)
 8011022:	4293      	cmp	r3, r2
 8011024:	d171      	bne.n	801110a <HAL_ADC_ConvCpltCallback+0xf6>
  {
	//LED_VD5_TOGGLE();

	cur_data[0] = cur_data[0] + data_in[0];
 8011026:	4b3d      	ldr	r3, [pc, #244]	; (801111c <HAL_ADC_ConvCpltCallback+0x108>)
 8011028:	681b      	ldr	r3, [r3, #0]
 801102a:	4a3d      	ldr	r2, [pc, #244]	; (8011120 <HAL_ADC_ConvCpltCallback+0x10c>)
 801102c:	8812      	ldrh	r2, [r2, #0]
 801102e:	4413      	add	r3, r2
 8011030:	4a3a      	ldr	r2, [pc, #232]	; (801111c <HAL_ADC_ConvCpltCallback+0x108>)
 8011032:	6013      	str	r3, [r2, #0]
	cur_data[1] = cur_data[1] + data_in[1];
 8011034:	4b39      	ldr	r3, [pc, #228]	; (801111c <HAL_ADC_ConvCpltCallback+0x108>)
 8011036:	685b      	ldr	r3, [r3, #4]
 8011038:	4a39      	ldr	r2, [pc, #228]	; (8011120 <HAL_ADC_ConvCpltCallback+0x10c>)
 801103a:	8852      	ldrh	r2, [r2, #2]
 801103c:	4413      	add	r3, r2
 801103e:	4a37      	ldr	r2, [pc, #220]	; (801111c <HAL_ADC_ConvCpltCallback+0x108>)
 8011040:	6053      	str	r3, [r2, #4]
	cur_data[2] = cur_data[2] + data_in[2];
 8011042:	4b36      	ldr	r3, [pc, #216]	; (801111c <HAL_ADC_ConvCpltCallback+0x108>)
 8011044:	689b      	ldr	r3, [r3, #8]
 8011046:	4a36      	ldr	r2, [pc, #216]	; (8011120 <HAL_ADC_ConvCpltCallback+0x10c>)
 8011048:	8892      	ldrh	r2, [r2, #4]
 801104a:	4413      	add	r3, r2
 801104c:	4a33      	ldr	r2, [pc, #204]	; (801111c <HAL_ADC_ConvCpltCallback+0x108>)
 801104e:	6093      	str	r3, [r2, #8]

	cur_counter++;
 8011050:	4b34      	ldr	r3, [pc, #208]	; (8011124 <HAL_ADC_ConvCpltCallback+0x110>)
 8011052:	881b      	ldrh	r3, [r3, #0]
 8011054:	b29b      	uxth	r3, r3
 8011056:	3301      	adds	r3, #1
 8011058:	b29a      	uxth	r2, r3
 801105a:	4b32      	ldr	r3, [pc, #200]	; (8011124 <HAL_ADC_ConvCpltCallback+0x110>)
 801105c:	801a      	strh	r2, [r3, #0]

	if(cur_counter>=100)
 801105e:	4b31      	ldr	r3, [pc, #196]	; (8011124 <HAL_ADC_ConvCpltCallback+0x110>)
 8011060:	881b      	ldrh	r3, [r3, #0]
 8011062:	b29b      	uxth	r3, r3
 8011064:	2b63      	cmp	r3, #99	; 0x63
 8011066:	d950      	bls.n	801110a <HAL_ADC_ConvCpltCallback+0xf6>
	{
		cur_counter=0;
 8011068:	4b2e      	ldr	r3, [pc, #184]	; (8011124 <HAL_ADC_ConvCpltCallback+0x110>)
 801106a:	2200      	movs	r2, #0
 801106c:	801a      	strh	r2, [r3, #0]

		cur_a_average = cur_data[0]/100;
 801106e:	4b2b      	ldr	r3, [pc, #172]	; (801111c <HAL_ADC_ConvCpltCallback+0x108>)
 8011070:	681b      	ldr	r3, [r3, #0]
 8011072:	4a2d      	ldr	r2, [pc, #180]	; (8011128 <HAL_ADC_ConvCpltCallback+0x114>)
 8011074:	fba2 2303 	umull	r2, r3, r2, r3
 8011078:	095b      	lsrs	r3, r3, #5
 801107a:	4a2c      	ldr	r2, [pc, #176]	; (801112c <HAL_ADC_ConvCpltCallback+0x118>)
 801107c:	6013      	str	r3, [r2, #0]
		cur_b_average = cur_data[1]/100;
 801107e:	4b27      	ldr	r3, [pc, #156]	; (801111c <HAL_ADC_ConvCpltCallback+0x108>)
 8011080:	685b      	ldr	r3, [r3, #4]
 8011082:	4a29      	ldr	r2, [pc, #164]	; (8011128 <HAL_ADC_ConvCpltCallback+0x114>)
 8011084:	fba2 2303 	umull	r2, r3, r2, r3
 8011088:	095b      	lsrs	r3, r3, #5
 801108a:	4a29      	ldr	r2, [pc, #164]	; (8011130 <HAL_ADC_ConvCpltCallback+0x11c>)
 801108c:	6013      	str	r3, [r2, #0]
		cur_c_average = cur_data[2]/100;
 801108e:	4b23      	ldr	r3, [pc, #140]	; (801111c <HAL_ADC_ConvCpltCallback+0x108>)
 8011090:	689b      	ldr	r3, [r3, #8]
 8011092:	4a25      	ldr	r2, [pc, #148]	; (8011128 <HAL_ADC_ConvCpltCallback+0x114>)
 8011094:	fba2 2303 	umull	r2, r3, r2, r3
 8011098:	095b      	lsrs	r3, r3, #5
 801109a:	4a26      	ldr	r2, [pc, #152]	; (8011134 <HAL_ADC_ConvCpltCallback+0x120>)
 801109c:	6013      	str	r3, [r2, #0]

		cur_data[0] = 0;
 801109e:	4b1f      	ldr	r3, [pc, #124]	; (801111c <HAL_ADC_ConvCpltCallback+0x108>)
 80110a0:	2200      	movs	r2, #0
 80110a2:	601a      	str	r2, [r3, #0]
		cur_data[1] = 0;
 80110a4:	4b1d      	ldr	r3, [pc, #116]	; (801111c <HAL_ADC_ConvCpltCallback+0x108>)
 80110a6:	2200      	movs	r2, #0
 80110a8:	605a      	str	r2, [r3, #4]
		cur_data[2] = 0;
 80110aa:	4b1c      	ldr	r3, [pc, #112]	; (801111c <HAL_ADC_ConvCpltCallback+0x108>)
 80110ac:	2200      	movs	r2, #0
 80110ae:	609a      	str	r2, [r3, #8]

		cur_a = cur_a_average*283/4095; // 283 1300
 80110b0:	4b1e      	ldr	r3, [pc, #120]	; (801112c <HAL_ADC_ConvCpltCallback+0x118>)
 80110b2:	681b      	ldr	r3, [r3, #0]
 80110b4:	f240 121b 	movw	r2, #283	; 0x11b
 80110b8:	fb02 f203 	mul.w	r2, r2, r3
 80110bc:	4b1e      	ldr	r3, [pc, #120]	; (8011138 <HAL_ADC_ConvCpltCallback+0x124>)
 80110be:	fba3 1302 	umull	r1, r3, r3, r2
 80110c2:	1ad2      	subs	r2, r2, r3
 80110c4:	0852      	lsrs	r2, r2, #1
 80110c6:	4413      	add	r3, r2
 80110c8:	0adb      	lsrs	r3, r3, #11
 80110ca:	4a1c      	ldr	r2, [pc, #112]	; (801113c <HAL_ADC_ConvCpltCallback+0x128>)
 80110cc:	6013      	str	r3, [r2, #0]
		cur_b = cur_b_average*283/4095; // 283 1300
 80110ce:	4b18      	ldr	r3, [pc, #96]	; (8011130 <HAL_ADC_ConvCpltCallback+0x11c>)
 80110d0:	681b      	ldr	r3, [r3, #0]
 80110d2:	f240 121b 	movw	r2, #283	; 0x11b
 80110d6:	fb02 f203 	mul.w	r2, r2, r3
 80110da:	4b17      	ldr	r3, [pc, #92]	; (8011138 <HAL_ADC_ConvCpltCallback+0x124>)
 80110dc:	fba3 1302 	umull	r1, r3, r3, r2
 80110e0:	1ad2      	subs	r2, r2, r3
 80110e2:	0852      	lsrs	r2, r2, #1
 80110e4:	4413      	add	r3, r2
 80110e6:	0adb      	lsrs	r3, r3, #11
 80110e8:	4a15      	ldr	r2, [pc, #84]	; (8011140 <HAL_ADC_ConvCpltCallback+0x12c>)
 80110ea:	6013      	str	r3, [r2, #0]
		cur_c = cur_c_average*283/4095; // 283 1300
 80110ec:	4b11      	ldr	r3, [pc, #68]	; (8011134 <HAL_ADC_ConvCpltCallback+0x120>)
 80110ee:	681b      	ldr	r3, [r3, #0]
 80110f0:	f240 121b 	movw	r2, #283	; 0x11b
 80110f4:	fb02 f203 	mul.w	r2, r2, r3
 80110f8:	4b0f      	ldr	r3, [pc, #60]	; (8011138 <HAL_ADC_ConvCpltCallback+0x124>)
 80110fa:	fba3 1302 	umull	r1, r3, r3, r2
 80110fe:	1ad2      	subs	r2, r2, r3
 8011100:	0852      	lsrs	r2, r2, #1
 8011102:	4413      	add	r3, r2
 8011104:	0adb      	lsrs	r3, r3, #11
 8011106:	4a0f      	ldr	r2, [pc, #60]	; (8011144 <HAL_ADC_ConvCpltCallback+0x130>)
 8011108:	6013      	str	r3, [r2, #0]
    //for (uint8_t i = 0; i < ADC_CHANNELS_NUM; i++)
    //{
      //adcVoltage[i] = adcData[i] * 3.3 / 4095;
    //}
  }
}
 801110a:	bf00      	nop
 801110c:	370c      	adds	r7, #12
 801110e:	46bd      	mov	sp, r7
 8011110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011114:	4770      	bx	lr
 8011116:	bf00      	nop
 8011118:	40012000 	.word	0x40012000
 801111c:	20000868 	.word	0x20000868
 8011120:	20009f58 	.word	0x20009f58
 8011124:	20000874 	.word	0x20000874
 8011128:	51eb851f 	.word	0x51eb851f
 801112c:	20009e9c 	.word	0x20009e9c
 8011130:	20009834 	.word	0x20009834
 8011134:	20009b9c 	.word	0x20009b9c
 8011138:	00100101 	.word	0x00100101
 801113c:	20009710 	.word	0x20009710
 8011140:	20009cc0 	.word	0x20009cc0
 8011144:	20009a00 	.word	0x20009a00

08011148 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8011148:	b5b0      	push	{r4, r5, r7, lr}
 801114a:	b0e6      	sub	sp, #408	; 0x198
 801114c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 801114e:	f001 fe79 	bl	8012e44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8011152:	f000 f9f3 	bl	801153c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8011156:	f000 fd29 	bl	8011bac <MX_GPIO_Init>
  MX_IWDG_Init();
 801115a:	f000 faf9 	bl	8011750 <MX_IWDG_Init>
  MX_DMA_Init();
 801115e:	f000 fcd7 	bl	8011b10 <MX_DMA_Init>
  MX_SPI2_Init();
 8011162:	f000 fb4f 	bl	8011804 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8011166:	f000 fc55 	bl	8011a14 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 801116a:	f000 fc7d 	bl	8011a68 <MX_USART3_UART_Init>
  MX_RTC_Init();
 801116e:	f000 fb05 	bl	801177c <MX_RTC_Init>
  MX_USART6_UART_Init();
 8011172:	f000 fca3 	bl	8011abc <MX_USART6_UART_Init>
  MX_I2C1_Init();
 8011176:	f000 fabd 	bl	80116f4 <MX_I2C1_Init>
  MX_SPI3_Init();
 801117a:	f000 fb79 	bl	8011870 <MX_SPI3_Init>
  MX_ADC1_Init();
 801117e:	f000 fa4b 	bl	8011618 <MX_ADC1_Init>
  MX_TIM2_Init();
 8011182:	f000 fbad 	bl	80118e0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8011186:	f000 fbf7 	bl	8011978 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  BUZ_ON();
 801118a:	f019 fd2d 	bl	802abe8 <BUZ_ON>
  HAL_Delay(50);
 801118e:	2032      	movs	r0, #50	; 0x32
 8011190:	f001 fe9a 	bl	8012ec8 <HAL_Delay>
  BUZ_OFF();
 8011194:	f019 fd34 	bl	802ac00 <BUZ_OFF>

  if( ((RCC->BDCR)&0x02) != 0 ) // Проверяем, запустился ли часовой кварц, если запустился включаем светодиод
 8011198:	4bc1      	ldr	r3, [pc, #772]	; (80114a0 <main+0x358>)
 801119a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801119c:	f003 0302 	and.w	r3, r3, #2
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d002      	beq.n	80111aa <main+0x62>
  {
	  LED_VD4_ON();
 80111a4:	f019 fd38 	bl	802ac18 <LED_VD4_ON>
 80111a8:	e001      	b.n	80111ae <main+0x66>
  }
  else
  {
	  LED_VD4_OFF();
 80111aa:	f019 fd3c 	bl	802ac26 <LED_VD4_OFF>
  }

  TSL2561_setTiming_ms(gain, time,&ms);
 80111ae:	4bbd      	ldr	r3, [pc, #756]	; (80114a4 <main+0x35c>)
 80111b0:	781b      	ldrb	r3, [r3, #0]
 80111b2:	4abd      	ldr	r2, [pc, #756]	; (80114a8 <main+0x360>)
 80111b4:	7811      	ldrb	r1, [r2, #0]
 80111b6:	4abd      	ldr	r2, [pc, #756]	; (80114ac <main+0x364>)
 80111b8:	4618      	mov	r0, r3
 80111ba:	f01c fdac 	bl	802dd16 <TSL2561_setTiming_ms>
  TSL2561_setPowerUp();
 80111be:	f01c fd63 	bl	802dc88 <TSL2561_setPowerUp>
  /* USER CODE END 2 */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */

  osMutexDef(UartMutex);
 80111c2:	2300      	movs	r3, #0
 80111c4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 80111c8:	2300      	movs	r3, #0
 80111ca:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
  UartMutexHandle = osMutexCreate(osMutex(UartMutex));
 80111ce:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80111d2:	4618      	mov	r0, r3
 80111d4:	f008 f850 	bl	8019278 <osMutexCreate>
 80111d8:	4603      	mov	r3, r0
 80111da:	4ab5      	ldr	r2, [pc, #724]	; (80114b0 <main+0x368>)
 80111dc:	6013      	str	r3, [r2, #0]

  osMutexDef(Fm25v02Mutex);
 80111de:	2300      	movs	r3, #0
 80111e0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80111e4:	2300      	movs	r3, #0
 80111e6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  Fm25v02MutexHandle = osMutexCreate(osMutex(Fm25v02Mutex));
 80111ea:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80111ee:	4618      	mov	r0, r3
 80111f0:	f008 f842 	bl	8019278 <osMutexCreate>
 80111f4:	4603      	mov	r3, r0
 80111f6:	4aaf      	ldr	r2, [pc, #700]	; (80114b4 <main+0x36c>)
 80111f8:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */

  osSemaphoreDef(TransmissionState);
 80111fa:	2300      	movs	r3, #0
 80111fc:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8011200:	2300      	movs	r3, #0
 8011202:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
  TransmissionStateHandle = osSemaphoreCreate(osSemaphore(TransmissionState), 1);
 8011206:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 801120a:	2101      	movs	r1, #1
 801120c:	4618      	mov	r0, r3
 801120e:	f008 f8cf 	bl	80193b0 <osSemaphoreCreate>
 8011212:	4603      	mov	r3, r0
 8011214:	4aa8      	ldr	r2, [pc, #672]	; (80114b8 <main+0x370>)
 8011216:	6013      	str	r3, [r2, #0]

  osSemaphoreDef(ReceiveState);
 8011218:	2300      	movs	r3, #0
 801121a:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 801121e:	2300      	movs	r3, #0
 8011220:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
  ReceiveStateHandle = osSemaphoreCreate(osSemaphore(ReceiveState), 1);
 8011224:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8011228:	2101      	movs	r1, #1
 801122a:	4618      	mov	r0, r3
 801122c:	f008 f8c0 	bl	80193b0 <osSemaphoreCreate>
 8011230:	4603      	mov	r3, r0
 8011232:	4aa2      	ldr	r2, [pc, #648]	; (80114bc <main+0x374>)
 8011234:	6013      	str	r3, [r2, #0]

  osSemaphoreDef(RS485TransmissionState);
 8011236:	2300      	movs	r3, #0
 8011238:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 801123c:	2300      	movs	r3, #0
 801123e:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
  RS485TransmissionStateHandle = osSemaphoreCreate(osSemaphore(RS485TransmissionState), 1);
 8011242:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8011246:	2101      	movs	r1, #1
 8011248:	4618      	mov	r0, r3
 801124a:	f008 f8b1 	bl	80193b0 <osSemaphoreCreate>
 801124e:	4603      	mov	r3, r0
 8011250:	4a9b      	ldr	r2, [pc, #620]	; (80114c0 <main+0x378>)
 8011252:	6013      	str	r3, [r2, #0]

  osSemaphoreDef(ModbusPacketReceive);
 8011254:	2300      	movs	r3, #0
 8011256:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 801125a:	2300      	movs	r3, #0
 801125c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
  ModbusPacketReceiveHandle = osSemaphoreCreate(osSemaphore(ModbusPacketReceive), 1);
 8011260:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8011264:	2101      	movs	r1, #1
 8011266:	4618      	mov	r0, r3
 8011268:	f008 f8a2 	bl	80193b0 <osSemaphoreCreate>
 801126c:	4603      	mov	r3, r0
 801126e:	4a95      	ldr	r2, [pc, #596]	; (80114c4 <main+0x37c>)
 8011270:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */

  osTimerDef(AT_Timer, Callback_AT_Timer);
 8011272:	4b95      	ldr	r3, [pc, #596]	; (80114c8 <main+0x380>)
 8011274:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8011278:	2300      	movs	r3, #0
 801127a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  AT_TimerHandle = osTimerCreate(osTimer(AT_Timer), osTimerOnce, NULL);
 801127e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8011282:	2200      	movs	r2, #0
 8011284:	2100      	movs	r1, #0
 8011286:	4618      	mov	r0, r3
 8011288:	f007 ff42 	bl	8019110 <osTimerCreate>
 801128c:	4603      	mov	r3, r0
 801128e:	4a8f      	ldr	r2, [pc, #572]	; (80114cc <main+0x384>)
 8011290:	6013      	str	r3, [r2, #0]

  osTimerDef(Ring_Center_Timer, Callback_Ring_Center_Timer);
 8011292:	4b8f      	ldr	r3, [pc, #572]	; (80114d0 <main+0x388>)
 8011294:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8011298:	2300      	movs	r3, #0
 801129a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  Ring_Center_TimerHandle = osTimerCreate(osTimer(Ring_Center_Timer), osTimerOnce, NULL);
 801129e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80112a2:	2200      	movs	r2, #0
 80112a4:	2100      	movs	r1, #0
 80112a6:	4618      	mov	r0, r3
 80112a8:	f007 ff32 	bl	8019110 <osTimerCreate>
 80112ac:	4603      	mov	r3, r0
 80112ae:	4a89      	ldr	r2, [pc, #548]	; (80114d4 <main+0x38c>)
 80112b0:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */

  osMessageQDef(ModbusQueue, 256, uint8_t);
 80112b2:	4b89      	ldr	r3, [pc, #548]	; (80114d8 <main+0x390>)
 80112b4:	f507 74a4 	add.w	r4, r7, #328	; 0x148
 80112b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80112ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ModbusQueueHandle = osMessageCreate(osMessageQ(ModbusQueue), NULL);
 80112be:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80112c2:	2100      	movs	r1, #0
 80112c4:	4618      	mov	r0, r3
 80112c6:	f008 f929 	bl	801951c <osMessageCreate>
 80112ca:	4603      	mov	r3, r0
 80112cc:	4a83      	ldr	r2, [pc, #524]	; (80114dc <main+0x394>)
 80112ce:	6013      	str	r3, [r2, #0]

  osMessageQDef(MeterQueue, 256, uint8_t);
 80112d0:	4b81      	ldr	r3, [pc, #516]	; (80114d8 <main+0x390>)
 80112d2:	f507 749c 	add.w	r4, r7, #312	; 0x138
 80112d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80112d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  MeterQueueHandle = osMessageCreate(osMessageQ(MeterQueue), NULL);
 80112dc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80112e0:	2100      	movs	r1, #0
 80112e2:	4618      	mov	r0, r3
 80112e4:	f008 f91a 	bl	801951c <osMessageCreate>
 80112e8:	4603      	mov	r3, r0
 80112ea:	4a7d      	ldr	r2, [pc, #500]	; (80114e0 <main+0x398>)
 80112ec:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80112ee:	4b7d      	ldr	r3, [pc, #500]	; (80114e4 <main+0x39c>)
 80112f0:	f507 748e 	add.w	r4, r7, #284	; 0x11c
 80112f4:	461d      	mov	r5, r3
 80112f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80112f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80112fa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80112fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8011302:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8011306:	2100      	movs	r1, #0
 8011308:	4618      	mov	r0, r3
 801130a:	f007 fea0 	bl	801904e <osThreadCreate>
 801130e:	4603      	mov	r3, r0
 8011310:	4a75      	ldr	r2, [pc, #468]	; (80114e8 <main+0x3a0>)
 8011312:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  osThreadDef(M95Task, ThreadM95Task, osPriorityNormal, 0, 128);
 8011314:	4b75      	ldr	r3, [pc, #468]	; (80114ec <main+0x3a4>)
 8011316:	f507 7480 	add.w	r4, r7, #256	; 0x100
 801131a:	461d      	mov	r5, r3
 801131c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801131e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011320:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8011324:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  M95TaskHandle = osThreadCreate(osThread(M95Task), NULL);
 8011328:	f507 7380 	add.w	r3, r7, #256	; 0x100
 801132c:	2100      	movs	r1, #0
 801132e:	4618      	mov	r0, r3
 8011330:	f007 fe8d 	bl	801904e <osThreadCreate>
 8011334:	4603      	mov	r3, r0
 8011336:	4a6e      	ldr	r2, [pc, #440]	; (80114f0 <main+0x3a8>)
 8011338:	6013      	str	r3, [r2, #0]

  osThreadDef(ModbusTask, ThreadModbusTask, osPriorityNormal, 0, 128);
 801133a:	4b6e      	ldr	r3, [pc, #440]	; (80114f4 <main+0x3ac>)
 801133c:	f107 04e4 	add.w	r4, r7, #228	; 0xe4
 8011340:	461d      	mov	r5, r3
 8011342:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011344:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011346:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801134a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ModbusTaskHandle = osThreadCreate(osThread(ModbusTask), NULL);
 801134e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8011352:	2100      	movs	r1, #0
 8011354:	4618      	mov	r0, r3
 8011356:	f007 fe7a 	bl	801904e <osThreadCreate>
 801135a:	4603      	mov	r3, r0
 801135c:	4a66      	ldr	r2, [pc, #408]	; (80114f8 <main+0x3b0>)
 801135e:	6013      	str	r3, [r2, #0]

  osThreadDef(MainTask, ThreadMainTask, osPriorityNormal, 0, 128);
 8011360:	4b66      	ldr	r3, [pc, #408]	; (80114fc <main+0x3b4>)
 8011362:	f107 04c8 	add.w	r4, r7, #200	; 0xc8
 8011366:	461d      	mov	r5, r3
 8011368:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801136a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801136c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8011370:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MainTaskHandle = osThreadCreate(osThread(MainTask), NULL);
 8011374:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8011378:	2100      	movs	r1, #0
 801137a:	4618      	mov	r0, r3
 801137c:	f007 fe67 	bl	801904e <osThreadCreate>
 8011380:	4603      	mov	r3, r0
 8011382:	4a5f      	ldr	r2, [pc, #380]	; (8011500 <main+0x3b8>)
 8011384:	6013      	str	r3, [r2, #0]

  osThreadDef(ModbusPacketTask, ThreadModbusPacketTask, osPriorityNormal, 0, 128);
 8011386:	4b5f      	ldr	r3, [pc, #380]	; (8011504 <main+0x3bc>)
 8011388:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 801138c:	461d      	mov	r5, r3
 801138e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011390:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011392:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8011396:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ModbusPacketTaskHandle = osThreadCreate(osThread(ModbusPacketTask), NULL);
 801139a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 801139e:	2100      	movs	r1, #0
 80113a0:	4618      	mov	r0, r3
 80113a2:	f007 fe54 	bl	801904e <osThreadCreate>
 80113a6:	4603      	mov	r3, r0
 80113a8:	4a57      	ldr	r2, [pc, #348]	; (8011508 <main+0x3c0>)
 80113aa:	6013      	str	r3, [r2, #0]

  osThreadDef(ReadRegistersTask, ThreadReadRegistersTask, osPriorityNormal, 0, 128);
 80113ac:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80113b0:	4a56      	ldr	r2, [pc, #344]	; (801150c <main+0x3c4>)
 80113b2:	461c      	mov	r4, r3
 80113b4:	4615      	mov	r5, r2
 80113b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80113b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80113ba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80113be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ReadRegistersTaskHandle = osThreadCreate(osThread(ReadRegistersTask), NULL);
 80113c2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80113c6:	2100      	movs	r1, #0
 80113c8:	4618      	mov	r0, r3
 80113ca:	f007 fe40 	bl	801904e <osThreadCreate>
 80113ce:	4603      	mov	r3, r0
 80113d0:	4a4f      	ldr	r2, [pc, #316]	; (8011510 <main+0x3c8>)
 80113d2:	6013      	str	r3, [r2, #0]

  osThreadDef(EventWriteTask, ThreadEventWriteTask, osPriorityNormal, 0, 128);
 80113d4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80113d8:	4a4e      	ldr	r2, [pc, #312]	; (8011514 <main+0x3cc>)
 80113da:	461c      	mov	r4, r3
 80113dc:	4615      	mov	r5, r2
 80113de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80113e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80113e2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80113e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  EventWriteTaskHandle = osThreadCreate(osThread(EventWriteTask), NULL);
 80113ea:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80113ee:	2100      	movs	r1, #0
 80113f0:	4618      	mov	r0, r3
 80113f2:	f007 fe2c 	bl	801904e <osThreadCreate>
 80113f6:	4603      	mov	r3, r0
 80113f8:	4a47      	ldr	r2, [pc, #284]	; (8011518 <main+0x3d0>)
 80113fa:	6013      	str	r3, [r2, #0]

  osThreadDef(GetCurrentTask, ThreadGetCurrentTask, osPriorityNormal, 0, 128);
 80113fc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8011400:	4a46      	ldr	r2, [pc, #280]	; (801151c <main+0x3d4>)
 8011402:	461c      	mov	r4, r3
 8011404:	4615      	mov	r5, r2
 8011406:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011408:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801140a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801140e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  GetCurrentTaskHandle = osThreadCreate(osThread(GetCurrentTask), NULL);
 8011412:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8011416:	2100      	movs	r1, #0
 8011418:	4618      	mov	r0, r3
 801141a:	f007 fe18 	bl	801904e <osThreadCreate>
 801141e:	4603      	mov	r3, r0
 8011420:	4a3f      	ldr	r2, [pc, #252]	; (8011520 <main+0x3d8>)
 8011422:	6013      	str	r3, [r2, #0]

  osThreadDef(MeterTask, ThreadMeterTask, osPriorityNormal, 0, 128);
 8011424:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8011428:	4a3e      	ldr	r2, [pc, #248]	; (8011524 <main+0x3dc>)
 801142a:	461c      	mov	r4, r3
 801142c:	4615      	mov	r5, r2
 801142e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011430:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011432:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8011436:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MeterTaskHandle = osThreadCreate(osThread(MeterTask), NULL);
 801143a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801143e:	2100      	movs	r1, #0
 8011440:	4618      	mov	r0, r3
 8011442:	f007 fe04 	bl	801904e <osThreadCreate>
 8011446:	4603      	mov	r3, r0
 8011448:	4a37      	ldr	r2, [pc, #220]	; (8011528 <main+0x3e0>)
 801144a:	6013      	str	r3, [r2, #0]

  osThreadDef(DisplayTask, ThreadDisplayTask, osPriorityNormal, 0, 128);
 801144c:	f107 0320 	add.w	r3, r7, #32
 8011450:	4a36      	ldr	r2, [pc, #216]	; (801152c <main+0x3e4>)
 8011452:	461c      	mov	r4, r3
 8011454:	4615      	mov	r5, r2
 8011456:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011458:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801145a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801145e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  DisplayTaskHandle = osThreadCreate(osThread(DisplayTask), NULL);
 8011462:	f107 0320 	add.w	r3, r7, #32
 8011466:	2100      	movs	r1, #0
 8011468:	4618      	mov	r0, r3
 801146a:	f007 fdf0 	bl	801904e <osThreadCreate>
 801146e:	4603      	mov	r3, r0
 8011470:	4a2f      	ldr	r2, [pc, #188]	; (8011530 <main+0x3e8>)
 8011472:	6013      	str	r3, [r2, #0]

  osThreadDef(CallRingCenterTask, ThreadCallRingCenterTask, osPriorityNormal, 0, 128);
 8011474:	1d3b      	adds	r3, r7, #4
 8011476:	4a2f      	ldr	r2, [pc, #188]	; (8011534 <main+0x3ec>)
 8011478:	461c      	mov	r4, r3
 801147a:	4615      	mov	r5, r2
 801147c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801147e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011480:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8011484:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  CallRingCenterTaskHandle = osThreadCreate(osThread(CallRingCenterTask), NULL);
 8011488:	1d3b      	adds	r3, r7, #4
 801148a:	2100      	movs	r1, #0
 801148c:	4618      	mov	r0, r3
 801148e:	f007 fdde 	bl	801904e <osThreadCreate>
 8011492:	4603      	mov	r3, r0
 8011494:	4a28      	ldr	r2, [pc, #160]	; (8011538 <main+0x3f0>)
 8011496:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8011498:	f007 fdd2 	bl	8019040 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 801149c:	e7fe      	b.n	801149c <main+0x354>
 801149e:	bf00      	nop
 80114a0:	40023800 	.word	0x40023800
 80114a4:	20000876 	.word	0x20000876
 80114a8:	20000000 	.word	0x20000000
 80114ac:	20009720 	.word	0x20009720
 80114b0:	2000971c 	.word	0x2000971c
 80114b4:	20009bb8 	.word	0x20009bb8
 80114b8:	20009ea0 	.word	0x20009ea0
 80114bc:	20009eb8 	.word	0x20009eb8
 80114c0:	20009b98 	.word	0x20009b98
 80114c4:	20009b0c 	.word	0x20009b0c
 80114c8:	08011dc9 	.word	0x08011dc9
 80114cc:	20009714 	.word	0x20009714
 80114d0:	08011de9 	.word	0x08011de9
 80114d4:	20009724 	.word	0x20009724
 80114d8:	0802fbe0 	.word	0x0802fbe0
 80114dc:	2000830c 	.word	0x2000830c
 80114e0:	200082fc 	.word	0x200082fc
 80114e4:	0802fbf0 	.word	0x0802fbf0
 80114e8:	20008138 	.word	0x20008138
 80114ec:	0802fc0c 	.word	0x0802fc0c
 80114f0:	20009a08 	.word	0x20009a08
 80114f4:	0802fc28 	.word	0x0802fc28
 80114f8:	20009a04 	.word	0x20009a04
 80114fc:	0802fc44 	.word	0x0802fc44
 8011500:	20009838 	.word	0x20009838
 8011504:	0802fc60 	.word	0x0802fc60
 8011508:	20009790 	.word	0x20009790
 801150c:	0802fc7c 	.word	0x0802fc7c
 8011510:	200082f8 	.word	0x200082f8
 8011514:	0802fc98 	.word	0x0802fc98
 8011518:	20009718 	.word	0x20009718
 801151c:	0802fcb4 	.word	0x0802fcb4
 8011520:	20009788 	.word	0x20009788
 8011524:	0802fcd0 	.word	0x0802fcd0
 8011528:	200081f4 	.word	0x200081f4
 801152c:	0802fcec 	.word	0x0802fcec
 8011530:	20009cbc 	.word	0x20009cbc
 8011534:	0802fd08 	.word	0x0802fd08
 8011538:	200082a0 	.word	0x200082a0

0801153c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 801153c:	b580      	push	{r7, lr}
 801153e:	b094      	sub	sp, #80	; 0x50
 8011540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8011542:	f107 0320 	add.w	r3, r7, #32
 8011546:	2230      	movs	r2, #48	; 0x30
 8011548:	2100      	movs	r1, #0
 801154a:	4618      	mov	r0, r3
 801154c:	f01c fe8e 	bl	802e26c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8011550:	f107 030c 	add.w	r3, r7, #12
 8011554:	2200      	movs	r2, #0
 8011556:	601a      	str	r2, [r3, #0]
 8011558:	605a      	str	r2, [r3, #4]
 801155a:	609a      	str	r2, [r3, #8]
 801155c:	60da      	str	r2, [r3, #12]
 801155e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8011560:	2300      	movs	r3, #0
 8011562:	60bb      	str	r3, [r7, #8]
 8011564:	4b2a      	ldr	r3, [pc, #168]	; (8011610 <SystemClock_Config+0xd4>)
 8011566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011568:	4a29      	ldr	r2, [pc, #164]	; (8011610 <SystemClock_Config+0xd4>)
 801156a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801156e:	6413      	str	r3, [r2, #64]	; 0x40
 8011570:	4b27      	ldr	r3, [pc, #156]	; (8011610 <SystemClock_Config+0xd4>)
 8011572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011578:	60bb      	str	r3, [r7, #8]
 801157a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 801157c:	2300      	movs	r3, #0
 801157e:	607b      	str	r3, [r7, #4]
 8011580:	4b24      	ldr	r3, [pc, #144]	; (8011614 <SystemClock_Config+0xd8>)
 8011582:	681b      	ldr	r3, [r3, #0]
 8011584:	4a23      	ldr	r2, [pc, #140]	; (8011614 <SystemClock_Config+0xd8>)
 8011586:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801158a:	6013      	str	r3, [r2, #0]
 801158c:	4b21      	ldr	r3, [pc, #132]	; (8011614 <SystemClock_Config+0xd8>)
 801158e:	681b      	ldr	r3, [r3, #0]
 8011590:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011594:	607b      	str	r3, [r7, #4]
 8011596:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE
 8011598:	230d      	movs	r3, #13
 801159a:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 801159c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80115a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80115a2:	2301      	movs	r3, #1
 80115a4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80115a6:	2301      	movs	r3, #1
 80115a8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80115aa:	2302      	movs	r3, #2
 80115ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80115ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80115b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80115b4:	2319      	movs	r3, #25
 80115b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80115b8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80115bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80115be:	2302      	movs	r3, #2
 80115c0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80115c2:	2304      	movs	r3, #4
 80115c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80115c6:	f107 0320 	add.w	r3, r7, #32
 80115ca:	4618      	mov	r0, r3
 80115cc:	f004 f95a 	bl	8015884 <HAL_RCC_OscConfig>
 80115d0:	4603      	mov	r3, r0
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	d001      	beq.n	80115da <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80115d6:	f000 ff49 	bl	801246c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80115da:	230f      	movs	r3, #15
 80115dc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80115de:	2302      	movs	r3, #2
 80115e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80115e2:	2300      	movs	r3, #0
 80115e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80115e6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80115ea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80115ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80115f0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80115f2:	f107 030c 	add.w	r3, r7, #12
 80115f6:	2105      	movs	r1, #5
 80115f8:	4618      	mov	r0, r3
 80115fa:	f004 fbbb 	bl	8015d74 <HAL_RCC_ClockConfig>
 80115fe:	4603      	mov	r3, r0
 8011600:	2b00      	cmp	r3, #0
 8011602:	d001      	beq.n	8011608 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8011604:	f000 ff32 	bl	801246c <Error_Handler>
  }
}
 8011608:	bf00      	nop
 801160a:	3750      	adds	r7, #80	; 0x50
 801160c:	46bd      	mov	sp, r7
 801160e:	bd80      	pop	{r7, pc}
 8011610:	40023800 	.word	0x40023800
 8011614:	40007000 	.word	0x40007000

08011618 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8011618:	b580      	push	{r7, lr}
 801161a:	b084      	sub	sp, #16
 801161c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 801161e:	463b      	mov	r3, r7
 8011620:	2200      	movs	r2, #0
 8011622:	601a      	str	r2, [r3, #0]
 8011624:	605a      	str	r2, [r3, #4]
 8011626:	609a      	str	r2, [r3, #8]
 8011628:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 801162a:	4b2f      	ldr	r3, [pc, #188]	; (80116e8 <MX_ADC1_Init+0xd0>)
 801162c:	4a2f      	ldr	r2, [pc, #188]	; (80116ec <MX_ADC1_Init+0xd4>)
 801162e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8011630:	4b2d      	ldr	r3, [pc, #180]	; (80116e8 <MX_ADC1_Init+0xd0>)
 8011632:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8011636:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8011638:	4b2b      	ldr	r3, [pc, #172]	; (80116e8 <MX_ADC1_Init+0xd0>)
 801163a:	2200      	movs	r2, #0
 801163c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 801163e:	4b2a      	ldr	r3, [pc, #168]	; (80116e8 <MX_ADC1_Init+0xd0>)
 8011640:	2201      	movs	r2, #1
 8011642:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8011644:	4b28      	ldr	r3, [pc, #160]	; (80116e8 <MX_ADC1_Init+0xd0>)
 8011646:	2200      	movs	r2, #0
 8011648:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 801164a:	4b27      	ldr	r3, [pc, #156]	; (80116e8 <MX_ADC1_Init+0xd0>)
 801164c:	2200      	movs	r2, #0
 801164e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8011652:	4b25      	ldr	r3, [pc, #148]	; (80116e8 <MX_ADC1_Init+0xd0>)
 8011654:	2200      	movs	r2, #0
 8011656:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8011658:	4b23      	ldr	r3, [pc, #140]	; (80116e8 <MX_ADC1_Init+0xd0>)
 801165a:	4a25      	ldr	r2, [pc, #148]	; (80116f0 <MX_ADC1_Init+0xd8>)
 801165c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 801165e:	4b22      	ldr	r3, [pc, #136]	; (80116e8 <MX_ADC1_Init+0xd0>)
 8011660:	2200      	movs	r2, #0
 8011662:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8011664:	4b20      	ldr	r3, [pc, #128]	; (80116e8 <MX_ADC1_Init+0xd0>)
 8011666:	2203      	movs	r2, #3
 8011668:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 801166a:	4b1f      	ldr	r3, [pc, #124]	; (80116e8 <MX_ADC1_Init+0xd0>)
 801166c:	2200      	movs	r2, #0
 801166e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8011672:	4b1d      	ldr	r3, [pc, #116]	; (80116e8 <MX_ADC1_Init+0xd0>)
 8011674:	2201      	movs	r2, #1
 8011676:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8011678:	481b      	ldr	r0, [pc, #108]	; (80116e8 <MX_ADC1_Init+0xd0>)
 801167a:	f001 fc49 	bl	8012f10 <HAL_ADC_Init>
 801167e:	4603      	mov	r3, r0
 8011680:	2b00      	cmp	r3, #0
 8011682:	d001      	beq.n	8011688 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8011684:	f000 fef2 	bl	801246c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8011688:	230a      	movs	r3, #10
 801168a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 801168c:	2301      	movs	r3, #1
 801168e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8011690:	2300      	movs	r3, #0
 8011692:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8011694:	463b      	mov	r3, r7
 8011696:	4619      	mov	r1, r3
 8011698:	4813      	ldr	r0, [pc, #76]	; (80116e8 <MX_ADC1_Init+0xd0>)
 801169a:	f001 febb 	bl	8013414 <HAL_ADC_ConfigChannel>
 801169e:	4603      	mov	r3, r0
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	d001      	beq.n	80116a8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80116a4:	f000 fee2 	bl	801246c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80116a8:	230c      	movs	r3, #12
 80116aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80116ac:	2302      	movs	r3, #2
 80116ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80116b0:	463b      	mov	r3, r7
 80116b2:	4619      	mov	r1, r3
 80116b4:	480c      	ldr	r0, [pc, #48]	; (80116e8 <MX_ADC1_Init+0xd0>)
 80116b6:	f001 fead 	bl	8013414 <HAL_ADC_ConfigChannel>
 80116ba:	4603      	mov	r3, r0
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d001      	beq.n	80116c4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80116c0:	f000 fed4 	bl	801246c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80116c4:	230d      	movs	r3, #13
 80116c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80116c8:	2303      	movs	r3, #3
 80116ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80116cc:	463b      	mov	r3, r7
 80116ce:	4619      	mov	r1, r3
 80116d0:	4805      	ldr	r0, [pc, #20]	; (80116e8 <MX_ADC1_Init+0xd0>)
 80116d2:	f001 fe9f 	bl	8013414 <HAL_ADC_ConfigChannel>
 80116d6:	4603      	mov	r3, r0
 80116d8:	2b00      	cmp	r3, #0
 80116da:	d001      	beq.n	80116e0 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80116dc:	f000 fec6 	bl	801246c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80116e0:	bf00      	nop
 80116e2:	3710      	adds	r7, #16
 80116e4:	46bd      	mov	sp, r7
 80116e6:	bd80      	pop	{r7, pc}
 80116e8:	200099b0 	.word	0x200099b0
 80116ec:	40012000 	.word	0x40012000
 80116f0:	0f000001 	.word	0x0f000001

080116f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80116f4:	b580      	push	{r7, lr}
 80116f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80116f8:	4b12      	ldr	r3, [pc, #72]	; (8011744 <MX_I2C1_Init+0x50>)
 80116fa:	4a13      	ldr	r2, [pc, #76]	; (8011748 <MX_I2C1_Init+0x54>)
 80116fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80116fe:	4b11      	ldr	r3, [pc, #68]	; (8011744 <MX_I2C1_Init+0x50>)
 8011700:	4a12      	ldr	r2, [pc, #72]	; (801174c <MX_I2C1_Init+0x58>)
 8011702:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8011704:	4b0f      	ldr	r3, [pc, #60]	; (8011744 <MX_I2C1_Init+0x50>)
 8011706:	2200      	movs	r2, #0
 8011708:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 801170a:	4b0e      	ldr	r3, [pc, #56]	; (8011744 <MX_I2C1_Init+0x50>)
 801170c:	2200      	movs	r2, #0
 801170e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8011710:	4b0c      	ldr	r3, [pc, #48]	; (8011744 <MX_I2C1_Init+0x50>)
 8011712:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8011716:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8011718:	4b0a      	ldr	r3, [pc, #40]	; (8011744 <MX_I2C1_Init+0x50>)
 801171a:	2200      	movs	r2, #0
 801171c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 801171e:	4b09      	ldr	r3, [pc, #36]	; (8011744 <MX_I2C1_Init+0x50>)
 8011720:	2200      	movs	r2, #0
 8011722:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8011724:	4b07      	ldr	r3, [pc, #28]	; (8011744 <MX_I2C1_Init+0x50>)
 8011726:	2200      	movs	r2, #0
 8011728:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 801172a:	4b06      	ldr	r3, [pc, #24]	; (8011744 <MX_I2C1_Init+0x50>)
 801172c:	2200      	movs	r2, #0
 801172e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8011730:	4804      	ldr	r0, [pc, #16]	; (8011744 <MX_I2C1_Init+0x50>)
 8011732:	f003 f8e1 	bl	80148f8 <HAL_I2C_Init>
 8011736:	4603      	mov	r3, r0
 8011738:	2b00      	cmp	r3, #0
 801173a:	d001      	beq.n	8011740 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 801173c:	f000 fe96 	bl	801246c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8011740:	bf00      	nop
 8011742:	bd80      	pop	{r7, pc}
 8011744:	200082a4 	.word	0x200082a4
 8011748:	40005400 	.word	0x40005400
 801174c:	000186a0 	.word	0x000186a0

08011750 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8011750:	b480      	push	{r7}
 8011752:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8011754:	4b07      	ldr	r3, [pc, #28]	; (8011774 <MX_IWDG_Init+0x24>)
 8011756:	4a08      	ldr	r2, [pc, #32]	; (8011778 <MX_IWDG_Init+0x28>)
 8011758:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 801175a:	4b06      	ldr	r3, [pc, #24]	; (8011774 <MX_IWDG_Init+0x24>)
 801175c:	2203      	movs	r2, #3
 801175e:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4000;
 8011760:	4b04      	ldr	r3, [pc, #16]	; (8011774 <MX_IWDG_Init+0x24>)
 8011762:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8011766:	609a      	str	r2, [r3, #8]
  //}
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8011768:	bf00      	nop
 801176a:	46bd      	mov	sp, r7
 801176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011770:	4770      	bx	lr
 8011772:	bf00      	nop
 8011774:	20008300 	.word	0x20008300
 8011778:	40003000 	.word	0x40003000

0801177c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 801177c:	b580      	push	{r7, lr}
 801177e:	b086      	sub	sp, #24
 8011780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8011782:	1d3b      	adds	r3, r7, #4
 8011784:	2200      	movs	r2, #0
 8011786:	601a      	str	r2, [r3, #0]
 8011788:	605a      	str	r2, [r3, #4]
 801178a:	609a      	str	r2, [r3, #8]
 801178c:	60da      	str	r2, [r3, #12]
 801178e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8011790:	2300      	movs	r3, #0
 8011792:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8011794:	4b19      	ldr	r3, [pc, #100]	; (80117fc <MX_RTC_Init+0x80>)
 8011796:	4a1a      	ldr	r2, [pc, #104]	; (8011800 <MX_RTC_Init+0x84>)
 8011798:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 801179a:	4b18      	ldr	r3, [pc, #96]	; (80117fc <MX_RTC_Init+0x80>)
 801179c:	2200      	movs	r2, #0
 801179e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80117a0:	4b16      	ldr	r3, [pc, #88]	; (80117fc <MX_RTC_Init+0x80>)
 80117a2:	227f      	movs	r2, #127	; 0x7f
 80117a4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80117a6:	4b15      	ldr	r3, [pc, #84]	; (80117fc <MX_RTC_Init+0x80>)
 80117a8:	22ff      	movs	r2, #255	; 0xff
 80117aa:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80117ac:	4b13      	ldr	r3, [pc, #76]	; (80117fc <MX_RTC_Init+0x80>)
 80117ae:	2200      	movs	r2, #0
 80117b0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80117b2:	4b12      	ldr	r3, [pc, #72]	; (80117fc <MX_RTC_Init+0x80>)
 80117b4:	2200      	movs	r2, #0
 80117b6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80117b8:	4b10      	ldr	r3, [pc, #64]	; (80117fc <MX_RTC_Init+0x80>)
 80117ba:	2200      	movs	r2, #0
 80117bc:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80117be:	480f      	ldr	r0, [pc, #60]	; (80117fc <MX_RTC_Init+0x80>)
 80117c0:	f004 fdbc 	bl	801633c <HAL_RTC_Init>
 80117c4:	4603      	mov	r3, r0
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d001      	beq.n	80117ce <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80117ca:	f000 fe4f 	bl	801246c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80117ce:	2300      	movs	r3, #0
 80117d0:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80117d2:	2300      	movs	r3, #0
 80117d4:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80117d6:	2300      	movs	r3, #0
 80117d8:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80117da:	2300      	movs	r3, #0
 80117dc:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80117de:	2300      	movs	r3, #0
 80117e0:	617b      	str	r3, [r7, #20]
  //if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
  //{
    //Error_Handler();
  //}
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80117e2:	2301      	movs	r3, #1
 80117e4:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80117e6:	2301      	movs	r3, #1
 80117e8:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80117ea:	2301      	movs	r3, #1
 80117ec:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80117ee:	2300      	movs	r3, #0
 80117f0:	70fb      	strb	r3, [r7, #3]
  //}
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80117f2:	bf00      	nop
 80117f4:	3718      	adds	r7, #24
 80117f6:	46bd      	mov	sp, r7
 80117f8:	bd80      	pop	{r7, pc}
 80117fa:	bf00      	nop
 80117fc:	20009b74 	.word	0x20009b74
 8011800:	40002800 	.word	0x40002800

08011804 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8011804:	b580      	push	{r7, lr}
 8011806:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8011808:	4b17      	ldr	r3, [pc, #92]	; (8011868 <MX_SPI2_Init+0x64>)
 801180a:	4a18      	ldr	r2, [pc, #96]	; (801186c <MX_SPI2_Init+0x68>)
 801180c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 801180e:	4b16      	ldr	r3, [pc, #88]	; (8011868 <MX_SPI2_Init+0x64>)
 8011810:	f44f 7282 	mov.w	r2, #260	; 0x104
 8011814:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8011816:	4b14      	ldr	r3, [pc, #80]	; (8011868 <MX_SPI2_Init+0x64>)
 8011818:	2200      	movs	r2, #0
 801181a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 801181c:	4b12      	ldr	r3, [pc, #72]	; (8011868 <MX_SPI2_Init+0x64>)
 801181e:	2200      	movs	r2, #0
 8011820:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8011822:	4b11      	ldr	r3, [pc, #68]	; (8011868 <MX_SPI2_Init+0x64>)
 8011824:	2200      	movs	r2, #0
 8011826:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8011828:	4b0f      	ldr	r3, [pc, #60]	; (8011868 <MX_SPI2_Init+0x64>)
 801182a:	2200      	movs	r2, #0
 801182c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 801182e:	4b0e      	ldr	r3, [pc, #56]	; (8011868 <MX_SPI2_Init+0x64>)
 8011830:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011834:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8011836:	4b0c      	ldr	r3, [pc, #48]	; (8011868 <MX_SPI2_Init+0x64>)
 8011838:	2220      	movs	r2, #32
 801183a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 801183c:	4b0a      	ldr	r3, [pc, #40]	; (8011868 <MX_SPI2_Init+0x64>)
 801183e:	2200      	movs	r2, #0
 8011840:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8011842:	4b09      	ldr	r3, [pc, #36]	; (8011868 <MX_SPI2_Init+0x64>)
 8011844:	2200      	movs	r2, #0
 8011846:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8011848:	4b07      	ldr	r3, [pc, #28]	; (8011868 <MX_SPI2_Init+0x64>)
 801184a:	2200      	movs	r2, #0
 801184c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 801184e:	4b06      	ldr	r3, [pc, #24]	; (8011868 <MX_SPI2_Init+0x64>)
 8011850:	220a      	movs	r2, #10
 8011852:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8011854:	4804      	ldr	r0, [pc, #16]	; (8011868 <MX_SPI2_Init+0x64>)
 8011856:	f005 f86f 	bl	8016938 <HAL_SPI_Init>
 801185a:	4603      	mov	r3, r0
 801185c:	2b00      	cmp	r3, #0
 801185e:	d001      	beq.n	8011864 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8011860:	f000 fe04 	bl	801246c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8011864:	bf00      	nop
 8011866:	bd80      	pop	{r7, pc}
 8011868:	2000819c 	.word	0x2000819c
 801186c:	40003800 	.word	0x40003800

08011870 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8011870:	b580      	push	{r7, lr}
 8011872:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8011874:	4b18      	ldr	r3, [pc, #96]	; (80118d8 <MX_SPI3_Init+0x68>)
 8011876:	4a19      	ldr	r2, [pc, #100]	; (80118dc <MX_SPI3_Init+0x6c>)
 8011878:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 801187a:	4b17      	ldr	r3, [pc, #92]	; (80118d8 <MX_SPI3_Init+0x68>)
 801187c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8011880:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 8011882:	4b15      	ldr	r3, [pc, #84]	; (80118d8 <MX_SPI3_Init+0x68>)
 8011884:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8011888:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 801188a:	4b13      	ldr	r3, [pc, #76]	; (80118d8 <MX_SPI3_Init+0x68>)
 801188c:	2200      	movs	r2, #0
 801188e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8011890:	4b11      	ldr	r3, [pc, #68]	; (80118d8 <MX_SPI3_Init+0x68>)
 8011892:	2200      	movs	r2, #0
 8011894:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8011896:	4b10      	ldr	r3, [pc, #64]	; (80118d8 <MX_SPI3_Init+0x68>)
 8011898:	2200      	movs	r2, #0
 801189a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 801189c:	4b0e      	ldr	r3, [pc, #56]	; (80118d8 <MX_SPI3_Init+0x68>)
 801189e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80118a2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80118a4:	4b0c      	ldr	r3, [pc, #48]	; (80118d8 <MX_SPI3_Init+0x68>)
 80118a6:	2220      	movs	r2, #32
 80118a8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80118aa:	4b0b      	ldr	r3, [pc, #44]	; (80118d8 <MX_SPI3_Init+0x68>)
 80118ac:	2200      	movs	r2, #0
 80118ae:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80118b0:	4b09      	ldr	r3, [pc, #36]	; (80118d8 <MX_SPI3_Init+0x68>)
 80118b2:	2200      	movs	r2, #0
 80118b4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80118b6:	4b08      	ldr	r3, [pc, #32]	; (80118d8 <MX_SPI3_Init+0x68>)
 80118b8:	2200      	movs	r2, #0
 80118ba:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80118bc:	4b06      	ldr	r3, [pc, #24]	; (80118d8 <MX_SPI3_Init+0x68>)
 80118be:	220a      	movs	r2, #10
 80118c0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80118c2:	4805      	ldr	r0, [pc, #20]	; (80118d8 <MX_SPI3_Init+0x68>)
 80118c4:	f005 f838 	bl	8016938 <HAL_SPI_Init>
 80118c8:	4603      	mov	r3, r0
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d001      	beq.n	80118d2 <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 80118ce:	f000 fdcd 	bl	801246c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80118d2:	bf00      	nop
 80118d4:	bd80      	pop	{r7, pc}
 80118d6:	bf00      	nop
 80118d8:	200097dc 	.word	0x200097dc
 80118dc:	40003c00 	.word	0x40003c00

080118e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80118e0:	b580      	push	{r7, lr}
 80118e2:	b086      	sub	sp, #24
 80118e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80118e6:	f107 0308 	add.w	r3, r7, #8
 80118ea:	2200      	movs	r2, #0
 80118ec:	601a      	str	r2, [r3, #0]
 80118ee:	605a      	str	r2, [r3, #4]
 80118f0:	609a      	str	r2, [r3, #8]
 80118f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80118f4:	463b      	mov	r3, r7
 80118f6:	2200      	movs	r2, #0
 80118f8:	601a      	str	r2, [r3, #0]
 80118fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80118fc:	4b1d      	ldr	r3, [pc, #116]	; (8011974 <MX_TIM2_Init+0x94>)
 80118fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8011902:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8011904:	4b1b      	ldr	r3, [pc, #108]	; (8011974 <MX_TIM2_Init+0x94>)
 8011906:	2253      	movs	r2, #83	; 0x53
 8011908:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 801190a:	4b1a      	ldr	r3, [pc, #104]	; (8011974 <MX_TIM2_Init+0x94>)
 801190c:	2200      	movs	r2, #0
 801190e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8011910:	4b18      	ldr	r3, [pc, #96]	; (8011974 <MX_TIM2_Init+0x94>)
 8011912:	f240 32e7 	movw	r2, #999	; 0x3e7
 8011916:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8011918:	4b16      	ldr	r3, [pc, #88]	; (8011974 <MX_TIM2_Init+0x94>)
 801191a:	2200      	movs	r2, #0
 801191c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801191e:	4b15      	ldr	r3, [pc, #84]	; (8011974 <MX_TIM2_Init+0x94>)
 8011920:	2200      	movs	r2, #0
 8011922:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8011924:	4813      	ldr	r0, [pc, #76]	; (8011974 <MX_TIM2_Init+0x94>)
 8011926:	f005 fdaf 	bl	8017488 <HAL_TIM_Base_Init>
 801192a:	4603      	mov	r3, r0
 801192c:	2b00      	cmp	r3, #0
 801192e:	d001      	beq.n	8011934 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8011930:	f000 fd9c 	bl	801246c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8011934:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011938:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 801193a:	f107 0308 	add.w	r3, r7, #8
 801193e:	4619      	mov	r1, r3
 8011940:	480c      	ldr	r0, [pc, #48]	; (8011974 <MX_TIM2_Init+0x94>)
 8011942:	f005 ff69 	bl	8017818 <HAL_TIM_ConfigClockSource>
 8011946:	4603      	mov	r3, r0
 8011948:	2b00      	cmp	r3, #0
 801194a:	d001      	beq.n	8011950 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 801194c:	f000 fd8e 	bl	801246c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8011950:	2300      	movs	r3, #0
 8011952:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8011954:	2300      	movs	r3, #0
 8011956:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8011958:	463b      	mov	r3, r7
 801195a:	4619      	mov	r1, r3
 801195c:	4805      	ldr	r0, [pc, #20]	; (8011974 <MX_TIM2_Init+0x94>)
 801195e:	f006 f985 	bl	8017c6c <HAL_TIMEx_MasterConfigSynchronization>
 8011962:	4603      	mov	r3, r0
 8011964:	2b00      	cmp	r3, #0
 8011966:	d001      	beq.n	801196c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8011968:	f000 fd80 	bl	801246c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 801196c:	bf00      	nop
 801196e:	3718      	adds	r7, #24
 8011970:	46bd      	mov	sp, r7
 8011972:	bd80      	pop	{r7, pc}
 8011974:	20009e08 	.word	0x20009e08

08011978 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8011978:	b580      	push	{r7, lr}
 801197a:	b086      	sub	sp, #24
 801197c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801197e:	f107 0308 	add.w	r3, r7, #8
 8011982:	2200      	movs	r2, #0
 8011984:	601a      	str	r2, [r3, #0]
 8011986:	605a      	str	r2, [r3, #4]
 8011988:	609a      	str	r2, [r3, #8]
 801198a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801198c:	463b      	mov	r3, r7
 801198e:	2200      	movs	r2, #0
 8011990:	601a      	str	r2, [r3, #0]
 8011992:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8011994:	4b1d      	ldr	r3, [pc, #116]	; (8011a0c <MX_TIM3_Init+0x94>)
 8011996:	4a1e      	ldr	r2, [pc, #120]	; (8011a10 <MX_TIM3_Init+0x98>)
 8011998:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 801199a:	4b1c      	ldr	r3, [pc, #112]	; (8011a0c <MX_TIM3_Init+0x94>)
 801199c:	2200      	movs	r2, #0
 801199e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80119a0:	4b1a      	ldr	r3, [pc, #104]	; (8011a0c <MX_TIM3_Init+0x94>)
 80119a2:	2200      	movs	r2, #0
 80119a4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 8399;
 80119a6:	4b19      	ldr	r3, [pc, #100]	; (8011a0c <MX_TIM3_Init+0x94>)
 80119a8:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80119ac:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80119ae:	4b17      	ldr	r3, [pc, #92]	; (8011a0c <MX_TIM3_Init+0x94>)
 80119b0:	2200      	movs	r2, #0
 80119b2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80119b4:	4b15      	ldr	r3, [pc, #84]	; (8011a0c <MX_TIM3_Init+0x94>)
 80119b6:	2200      	movs	r2, #0
 80119b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80119ba:	4814      	ldr	r0, [pc, #80]	; (8011a0c <MX_TIM3_Init+0x94>)
 80119bc:	f005 fd64 	bl	8017488 <HAL_TIM_Base_Init>
 80119c0:	4603      	mov	r3, r0
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	d001      	beq.n	80119ca <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80119c6:	f000 fd51 	bl	801246c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80119ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80119ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80119d0:	f107 0308 	add.w	r3, r7, #8
 80119d4:	4619      	mov	r1, r3
 80119d6:	480d      	ldr	r0, [pc, #52]	; (8011a0c <MX_TIM3_Init+0x94>)
 80119d8:	f005 ff1e 	bl	8017818 <HAL_TIM_ConfigClockSource>
 80119dc:	4603      	mov	r3, r0
 80119de:	2b00      	cmp	r3, #0
 80119e0:	d001      	beq.n	80119e6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80119e2:	f000 fd43 	bl	801246c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80119e6:	2300      	movs	r3, #0
 80119e8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80119ea:	2300      	movs	r3, #0
 80119ec:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80119ee:	463b      	mov	r3, r7
 80119f0:	4619      	mov	r1, r3
 80119f2:	4806      	ldr	r0, [pc, #24]	; (8011a0c <MX_TIM3_Init+0x94>)
 80119f4:	f006 f93a 	bl	8017c6c <HAL_TIMEx_MasterConfigSynchronization>
 80119f8:	4603      	mov	r3, r0
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d001      	beq.n	8011a02 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80119fe:	f000 fd35 	bl	801246c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8011a02:	bf00      	nop
 8011a04:	3718      	adds	r7, #24
 8011a06:	46bd      	mov	sp, r7
 8011a08:	bd80      	pop	{r7, pc}
 8011a0a:	bf00      	nop
 8011a0c:	20009794 	.word	0x20009794
 8011a10:	40000400 	.word	0x40000400

08011a14 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8011a14:	b580      	push	{r7, lr}
 8011a16:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8011a18:	4b11      	ldr	r3, [pc, #68]	; (8011a60 <MX_USART2_UART_Init+0x4c>)
 8011a1a:	4a12      	ldr	r2, [pc, #72]	; (8011a64 <MX_USART2_UART_Init+0x50>)
 8011a1c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8011a1e:	4b10      	ldr	r3, [pc, #64]	; (8011a60 <MX_USART2_UART_Init+0x4c>)
 8011a20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8011a24:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8011a26:	4b0e      	ldr	r3, [pc, #56]	; (8011a60 <MX_USART2_UART_Init+0x4c>)
 8011a28:	2200      	movs	r2, #0
 8011a2a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8011a2c:	4b0c      	ldr	r3, [pc, #48]	; (8011a60 <MX_USART2_UART_Init+0x4c>)
 8011a2e:	2200      	movs	r2, #0
 8011a30:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8011a32:	4b0b      	ldr	r3, [pc, #44]	; (8011a60 <MX_USART2_UART_Init+0x4c>)
 8011a34:	2200      	movs	r2, #0
 8011a36:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8011a38:	4b09      	ldr	r3, [pc, #36]	; (8011a60 <MX_USART2_UART_Init+0x4c>)
 8011a3a:	220c      	movs	r2, #12
 8011a3c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8011a3e:	4b08      	ldr	r3, [pc, #32]	; (8011a60 <MX_USART2_UART_Init+0x4c>)
 8011a40:	2200      	movs	r2, #0
 8011a42:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8011a44:	4b06      	ldr	r3, [pc, #24]	; (8011a60 <MX_USART2_UART_Init+0x4c>)
 8011a46:	2200      	movs	r2, #0
 8011a48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8011a4a:	4805      	ldr	r0, [pc, #20]	; (8011a60 <MX_USART2_UART_Init+0x4c>)
 8011a4c:	f006 f99e 	bl	8017d8c <HAL_UART_Init>
 8011a50:	4603      	mov	r3, r0
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d001      	beq.n	8011a5a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8011a56:	f000 fd09 	bl	801246c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8011a5a:	bf00      	nop
 8011a5c:	bd80      	pop	{r7, pc}
 8011a5e:	bf00      	nop
 8011a60:	20009e58 	.word	0x20009e58
 8011a64:	40004400 	.word	0x40004400

08011a68 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8011a68:	b580      	push	{r7, lr}
 8011a6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8011a6c:	4b11      	ldr	r3, [pc, #68]	; (8011ab4 <MX_USART3_UART_Init+0x4c>)
 8011a6e:	4a12      	ldr	r2, [pc, #72]	; (8011ab8 <MX_USART3_UART_Init+0x50>)
 8011a70:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8011a72:	4b10      	ldr	r3, [pc, #64]	; (8011ab4 <MX_USART3_UART_Init+0x4c>)
 8011a74:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8011a78:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8011a7a:	4b0e      	ldr	r3, [pc, #56]	; (8011ab4 <MX_USART3_UART_Init+0x4c>)
 8011a7c:	2200      	movs	r2, #0
 8011a7e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8011a80:	4b0c      	ldr	r3, [pc, #48]	; (8011ab4 <MX_USART3_UART_Init+0x4c>)
 8011a82:	2200      	movs	r2, #0
 8011a84:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8011a86:	4b0b      	ldr	r3, [pc, #44]	; (8011ab4 <MX_USART3_UART_Init+0x4c>)
 8011a88:	2200      	movs	r2, #0
 8011a8a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8011a8c:	4b09      	ldr	r3, [pc, #36]	; (8011ab4 <MX_USART3_UART_Init+0x4c>)
 8011a8e:	220c      	movs	r2, #12
 8011a90:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8011a92:	4b08      	ldr	r3, [pc, #32]	; (8011ab4 <MX_USART3_UART_Init+0x4c>)
 8011a94:	2200      	movs	r2, #0
 8011a96:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8011a98:	4b06      	ldr	r3, [pc, #24]	; (8011ab4 <MX_USART3_UART_Init+0x4c>)
 8011a9a:	2200      	movs	r2, #0
 8011a9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8011a9e:	4805      	ldr	r0, [pc, #20]	; (8011ab4 <MX_USART3_UART_Init+0x4c>)
 8011aa0:	f006 f974 	bl	8017d8c <HAL_UART_Init>
 8011aa4:	4603      	mov	r3, r0
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	d001      	beq.n	8011aae <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8011aaa:	f000 fcdf 	bl	801246c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8011aae:	bf00      	nop
 8011ab0:	bd80      	pop	{r7, pc}
 8011ab2:	bf00      	nop
 8011ab4:	2000825c 	.word	0x2000825c
 8011ab8:	40004800 	.word	0x40004800

08011abc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8011abc:	b580      	push	{r7, lr}
 8011abe:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8011ac0:	4b11      	ldr	r3, [pc, #68]	; (8011b08 <MX_USART6_UART_Init+0x4c>)
 8011ac2:	4a12      	ldr	r2, [pc, #72]	; (8011b0c <MX_USART6_UART_Init+0x50>)
 8011ac4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8011ac6:	4b10      	ldr	r3, [pc, #64]	; (8011b08 <MX_USART6_UART_Init+0x4c>)
 8011ac8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8011acc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8011ace:	4b0e      	ldr	r3, [pc, #56]	; (8011b08 <MX_USART6_UART_Init+0x4c>)
 8011ad0:	2200      	movs	r2, #0
 8011ad2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8011ad4:	4b0c      	ldr	r3, [pc, #48]	; (8011b08 <MX_USART6_UART_Init+0x4c>)
 8011ad6:	2200      	movs	r2, #0
 8011ad8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_EVEN;
 8011ada:	4b0b      	ldr	r3, [pc, #44]	; (8011b08 <MX_USART6_UART_Init+0x4c>)
 8011adc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8011ae0:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8011ae2:	4b09      	ldr	r3, [pc, #36]	; (8011b08 <MX_USART6_UART_Init+0x4c>)
 8011ae4:	220c      	movs	r2, #12
 8011ae6:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8011ae8:	4b07      	ldr	r3, [pc, #28]	; (8011b08 <MX_USART6_UART_Init+0x4c>)
 8011aea:	2200      	movs	r2, #0
 8011aec:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8011aee:	4b06      	ldr	r3, [pc, #24]	; (8011b08 <MX_USART6_UART_Init+0x4c>)
 8011af0:	2200      	movs	r2, #0
 8011af2:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8011af4:	4804      	ldr	r0, [pc, #16]	; (8011b08 <MX_USART6_UART_Init+0x4c>)
 8011af6:	f006 f949 	bl	8017d8c <HAL_UART_Init>
 8011afa:	4603      	mov	r3, r0
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d001      	beq.n	8011b04 <MX_USART6_UART_Init+0x48>
  {
    Error_Handler();
 8011b00:	f000 fcb4 	bl	801246c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8011b04:	bf00      	nop
 8011b06:	bd80      	pop	{r7, pc}
 8011b08:	20009dc4 	.word	0x20009dc4
 8011b0c:	40011400 	.word	0x40011400

08011b10 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8011b10:	b580      	push	{r7, lr}
 8011b12:	b082      	sub	sp, #8
 8011b14:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8011b16:	2300      	movs	r3, #0
 8011b18:	607b      	str	r3, [r7, #4]
 8011b1a:	4b23      	ldr	r3, [pc, #140]	; (8011ba8 <MX_DMA_Init+0x98>)
 8011b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011b1e:	4a22      	ldr	r2, [pc, #136]	; (8011ba8 <MX_DMA_Init+0x98>)
 8011b20:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8011b24:	6313      	str	r3, [r2, #48]	; 0x30
 8011b26:	4b20      	ldr	r3, [pc, #128]	; (8011ba8 <MX_DMA_Init+0x98>)
 8011b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011b2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011b2e:	607b      	str	r3, [r7, #4]
 8011b30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8011b32:	2300      	movs	r3, #0
 8011b34:	603b      	str	r3, [r7, #0]
 8011b36:	4b1c      	ldr	r3, [pc, #112]	; (8011ba8 <MX_DMA_Init+0x98>)
 8011b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011b3a:	4a1b      	ldr	r2, [pc, #108]	; (8011ba8 <MX_DMA_Init+0x98>)
 8011b3c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8011b40:	6313      	str	r3, [r2, #48]	; 0x30
 8011b42:	4b19      	ldr	r3, [pc, #100]	; (8011ba8 <MX_DMA_Init+0x98>)
 8011b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011b46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011b4a:	603b      	str	r3, [r7, #0]
 8011b4c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8011b4e:	2200      	movs	r2, #0
 8011b50:	2105      	movs	r1, #5
 8011b52:	200c      	movs	r0, #12
 8011b54:	f001 ffc0 	bl	8013ad8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8011b58:	200c      	movs	r0, #12
 8011b5a:	f001 ffd9 	bl	8013b10 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8011b5e:	2200      	movs	r2, #0
 8011b60:	2105      	movs	r1, #5
 8011b62:	200e      	movs	r0, #14
 8011b64:	f001 ffb8 	bl	8013ad8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8011b68:	200e      	movs	r0, #14
 8011b6a:	f001 ffd1 	bl	8013b10 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8011b6e:	2200      	movs	r2, #0
 8011b70:	2105      	movs	r1, #5
 8011b72:	2038      	movs	r0, #56	; 0x38
 8011b74:	f001 ffb0 	bl	8013ad8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8011b78:	2038      	movs	r0, #56	; 0x38
 8011b7a:	f001 ffc9 	bl	8013b10 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8011b7e:	2200      	movs	r2, #0
 8011b80:	2105      	movs	r1, #5
 8011b82:	2039      	movs	r0, #57	; 0x39
 8011b84:	f001 ffa8 	bl	8013ad8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8011b88:	2039      	movs	r0, #57	; 0x39
 8011b8a:	f001 ffc1 	bl	8013b10 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8011b8e:	2200      	movs	r2, #0
 8011b90:	2105      	movs	r1, #5
 8011b92:	2045      	movs	r0, #69	; 0x45
 8011b94:	f001 ffa0 	bl	8013ad8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8011b98:	2045      	movs	r0, #69	; 0x45
 8011b9a:	f001 ffb9 	bl	8013b10 <HAL_NVIC_EnableIRQ>

}
 8011b9e:	bf00      	nop
 8011ba0:	3708      	adds	r7, #8
 8011ba2:	46bd      	mov	sp, r7
 8011ba4:	bd80      	pop	{r7, pc}
 8011ba6:	bf00      	nop
 8011ba8:	40023800 	.word	0x40023800

08011bac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8011bac:	b580      	push	{r7, lr}
 8011bae:	b08c      	sub	sp, #48	; 0x30
 8011bb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011bb2:	f107 031c 	add.w	r3, r7, #28
 8011bb6:	2200      	movs	r2, #0
 8011bb8:	601a      	str	r2, [r3, #0]
 8011bba:	605a      	str	r2, [r3, #4]
 8011bbc:	609a      	str	r2, [r3, #8]
 8011bbe:	60da      	str	r2, [r3, #12]
 8011bc0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8011bc2:	2300      	movs	r3, #0
 8011bc4:	61bb      	str	r3, [r7, #24]
 8011bc6:	4b7a      	ldr	r3, [pc, #488]	; (8011db0 <MX_GPIO_Init+0x204>)
 8011bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011bca:	4a79      	ldr	r2, [pc, #484]	; (8011db0 <MX_GPIO_Init+0x204>)
 8011bcc:	f043 0310 	orr.w	r3, r3, #16
 8011bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8011bd2:	4b77      	ldr	r3, [pc, #476]	; (8011db0 <MX_GPIO_Init+0x204>)
 8011bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011bd6:	f003 0310 	and.w	r3, r3, #16
 8011bda:	61bb      	str	r3, [r7, #24]
 8011bdc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8011bde:	2300      	movs	r3, #0
 8011be0:	617b      	str	r3, [r7, #20]
 8011be2:	4b73      	ldr	r3, [pc, #460]	; (8011db0 <MX_GPIO_Init+0x204>)
 8011be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011be6:	4a72      	ldr	r2, [pc, #456]	; (8011db0 <MX_GPIO_Init+0x204>)
 8011be8:	f043 0304 	orr.w	r3, r3, #4
 8011bec:	6313      	str	r3, [r2, #48]	; 0x30
 8011bee:	4b70      	ldr	r3, [pc, #448]	; (8011db0 <MX_GPIO_Init+0x204>)
 8011bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011bf2:	f003 0304 	and.w	r3, r3, #4
 8011bf6:	617b      	str	r3, [r7, #20]
 8011bf8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8011bfa:	2300      	movs	r3, #0
 8011bfc:	613b      	str	r3, [r7, #16]
 8011bfe:	4b6c      	ldr	r3, [pc, #432]	; (8011db0 <MX_GPIO_Init+0x204>)
 8011c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011c02:	4a6b      	ldr	r2, [pc, #428]	; (8011db0 <MX_GPIO_Init+0x204>)
 8011c04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011c08:	6313      	str	r3, [r2, #48]	; 0x30
 8011c0a:	4b69      	ldr	r3, [pc, #420]	; (8011db0 <MX_GPIO_Init+0x204>)
 8011c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011c12:	613b      	str	r3, [r7, #16]
 8011c14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8011c16:	2300      	movs	r3, #0
 8011c18:	60fb      	str	r3, [r7, #12]
 8011c1a:	4b65      	ldr	r3, [pc, #404]	; (8011db0 <MX_GPIO_Init+0x204>)
 8011c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011c1e:	4a64      	ldr	r2, [pc, #400]	; (8011db0 <MX_GPIO_Init+0x204>)
 8011c20:	f043 0301 	orr.w	r3, r3, #1
 8011c24:	6313      	str	r3, [r2, #48]	; 0x30
 8011c26:	4b62      	ldr	r3, [pc, #392]	; (8011db0 <MX_GPIO_Init+0x204>)
 8011c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011c2a:	f003 0301 	and.w	r3, r3, #1
 8011c2e:	60fb      	str	r3, [r7, #12]
 8011c30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8011c32:	2300      	movs	r3, #0
 8011c34:	60bb      	str	r3, [r7, #8]
 8011c36:	4b5e      	ldr	r3, [pc, #376]	; (8011db0 <MX_GPIO_Init+0x204>)
 8011c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011c3a:	4a5d      	ldr	r2, [pc, #372]	; (8011db0 <MX_GPIO_Init+0x204>)
 8011c3c:	f043 0302 	orr.w	r3, r3, #2
 8011c40:	6313      	str	r3, [r2, #48]	; 0x30
 8011c42:	4b5b      	ldr	r3, [pc, #364]	; (8011db0 <MX_GPIO_Init+0x204>)
 8011c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011c46:	f003 0302 	and.w	r3, r3, #2
 8011c4a:	60bb      	str	r3, [r7, #8]
 8011c4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8011c4e:	2300      	movs	r3, #0
 8011c50:	607b      	str	r3, [r7, #4]
 8011c52:	4b57      	ldr	r3, [pc, #348]	; (8011db0 <MX_GPIO_Init+0x204>)
 8011c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011c56:	4a56      	ldr	r2, [pc, #344]	; (8011db0 <MX_GPIO_Init+0x204>)
 8011c58:	f043 0308 	orr.w	r3, r3, #8
 8011c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8011c5e:	4b54      	ldr	r3, [pc, #336]	; (8011db0 <MX_GPIO_Init+0x204>)
 8011c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011c62:	f003 0308 	and.w	r3, r3, #8
 8011c66:	607b      	str	r3, [r7, #4]
 8011c68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8011c6a:	2200      	movs	r2, #0
 8011c6c:	f248 017e 	movw	r1, #32894	; 0x807e
 8011c70:	4850      	ldr	r0, [pc, #320]	; (8011db4 <MX_GPIO_Init+0x208>)
 8011c72:	f002 fe0d 	bl	8014890 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_15|GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_1, GPIO_PIN_RESET);
 8011c76:	2200      	movs	r2, #0
 8011c78:	f242 0102 	movw	r1, #8194	; 0x2002
 8011c7c:	484e      	ldr	r0, [pc, #312]	; (8011db8 <MX_GPIO_Init+0x20c>)
 8011c7e:	f002 fe07 	bl	8014890 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8011c82:	2200      	movs	r2, #0
 8011c84:	2103      	movs	r1, #3
 8011c86:	484d      	ldr	r0, [pc, #308]	; (8011dbc <MX_GPIO_Init+0x210>)
 8011c88:	f002 fe02 	bl	8014890 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_5, GPIO_PIN_RESET);
 8011c8c:	2200      	movs	r2, #0
 8011c8e:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 8011c92:	484b      	ldr	r0, [pc, #300]	; (8011dc0 <MX_GPIO_Init+0x214>)
 8011c94:	f002 fdfc 	bl	8014890 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8011c98:	2200      	movs	r2, #0
 8011c9a:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8011c9e:	4849      	ldr	r0, [pc, #292]	; (8011dc4 <MX_GPIO_Init+0x218>)
 8011ca0:	f002 fdf6 	bl	8014890 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);
 8011ca4:	2201      	movs	r2, #1
 8011ca6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8011caa:	4843      	ldr	r0, [pc, #268]	; (8011db8 <MX_GPIO_Init+0x20c>)
 8011cac:	f002 fdf0 	bl	8014890 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE15 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8011cb0:	f248 037e 	movw	r3, #32894	; 0x807e
 8011cb4:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_15|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011cb6:	2301      	movs	r3, #1
 8011cb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011cba:	2300      	movs	r3, #0
 8011cbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011cbe:	2300      	movs	r3, #0
 8011cc0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8011cc2:	f107 031c 	add.w	r3, r7, #28
 8011cc6:	4619      	mov	r1, r3
 8011cc8:	483a      	ldr	r0, [pc, #232]	; (8011db4 <MX_GPIO_Init+0x208>)
 8011cca:	f002 fb31 	bl	8014330 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC1 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_1|GPIO_PIN_11;
 8011cce:	f642 0302 	movw	r3, #10242	; 0x2802
 8011cd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011cd4:	2301      	movs	r3, #1
 8011cd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011cd8:	2300      	movs	r3, #0
 8011cda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011cdc:	2300      	movs	r3, #0
 8011cde:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8011ce0:	f107 031c 	add.w	r3, r7, #28
 8011ce4:	4619      	mov	r1, r3
 8011ce6:	4834      	ldr	r0, [pc, #208]	; (8011db8 <MX_GPIO_Init+0x20c>)
 8011ce8:	f002 fb22 	bl	8014330 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8011cec:	2303      	movs	r3, #3
 8011cee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011cf0:	2301      	movs	r3, #1
 8011cf2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011cf4:	2300      	movs	r3, #0
 8011cf6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011cf8:	2300      	movs	r3, #0
 8011cfa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011cfc:	f107 031c 	add.w	r3, r7, #28
 8011d00:	4619      	mov	r1, r3
 8011d02:	482e      	ldr	r0, [pc, #184]	; (8011dbc <MX_GPIO_Init+0x210>)
 8011d04:	f002 fb14 	bl	8014330 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8011d08:	23f0      	movs	r3, #240	; 0xf0
 8011d0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8011d0c:	2300      	movs	r3, #0
 8011d0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011d10:	2300      	movs	r3, #0
 8011d12:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011d14:	f107 031c 	add.w	r3, r7, #28
 8011d18:	4619      	mov	r1, r3
 8011d1a:	4828      	ldr	r0, [pc, #160]	; (8011dbc <MX_GPIO_Init+0x210>)
 8011d1c:	f002 fb08 	bl	8014330 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8011d20:	2330      	movs	r3, #48	; 0x30
 8011d22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8011d24:	2300      	movs	r3, #0
 8011d26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011d28:	2300      	movs	r3, #0
 8011d2a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8011d2c:	f107 031c 	add.w	r3, r7, #28
 8011d30:	4619      	mov	r1, r3
 8011d32:	4821      	ldr	r0, [pc, #132]	; (8011db8 <MX_GPIO_Init+0x20c>)
 8011d34:	f002 fafc 	bl	8014330 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8011d38:	2303      	movs	r3, #3
 8011d3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8011d3c:	2300      	movs	r3, #0
 8011d3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011d40:	2300      	movs	r3, #0
 8011d42:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011d44:	f107 031c 	add.w	r3, r7, #28
 8011d48:	4619      	mov	r1, r3
 8011d4a:	481d      	ldr	r0, [pc, #116]	; (8011dc0 <MX_GPIO_Init+0x214>)
 8011d4c:	f002 faf0 	bl	8014330 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8011d50:	f240 7381 	movw	r3, #1921	; 0x781
 8011d54:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8011d56:	2300      	movs	r3, #0
 8011d58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011d5a:	2300      	movs	r3, #0
 8011d5c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8011d5e:	f107 031c 	add.w	r3, r7, #28
 8011d62:	4619      	mov	r1, r3
 8011d64:	4813      	ldr	r0, [pc, #76]	; (8011db4 <MX_GPIO_Init+0x208>)
 8011d66:	f002 fae3 	bl	8014330 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_5;
 8011d6a:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8011d6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011d70:	2301      	movs	r3, #1
 8011d72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011d74:	2300      	movs	r3, #0
 8011d76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011d78:	2300      	movs	r3, #0
 8011d7a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011d7c:	f107 031c 	add.w	r3, r7, #28
 8011d80:	4619      	mov	r1, r3
 8011d82:	480f      	ldr	r0, [pc, #60]	; (8011dc0 <MX_GPIO_Init+0x214>)
 8011d84:	f002 fad4 	bl	8014330 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8011d88:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8011d8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011d8e:	2301      	movs	r3, #1
 8011d90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8011d92:	2302      	movs	r3, #2
 8011d94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011d96:	2300      	movs	r3, #0
 8011d98:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8011d9a:	f107 031c 	add.w	r3, r7, #28
 8011d9e:	4619      	mov	r1, r3
 8011da0:	4808      	ldr	r0, [pc, #32]	; (8011dc4 <MX_GPIO_Init+0x218>)
 8011da2:	f002 fac5 	bl	8014330 <HAL_GPIO_Init>

}
 8011da6:	bf00      	nop
 8011da8:	3730      	adds	r7, #48	; 0x30
 8011daa:	46bd      	mov	sp, r7
 8011dac:	bd80      	pop	{r7, pc}
 8011dae:	bf00      	nop
 8011db0:	40023800 	.word	0x40023800
 8011db4:	40021000 	.word	0x40021000
 8011db8:	40020800 	.word	0x40020800
 8011dbc:	40020000 	.word	0x40020000
 8011dc0:	40020400 	.word	0x40020400
 8011dc4:	40020c00 	.word	0x40020c00

08011dc8 <Callback_AT_Timer>:

/* USER CODE BEGIN 4 */

void Callback_AT_Timer(void const * argument)
{
 8011dc8:	b480      	push	{r7}
 8011dca:	b083      	sub	sp, #12
 8011dcc:	af00      	add	r7, sp, #0
 8011dce:	6078      	str	r0, [r7, #4]

	read_rx_state = NOT_ACTIVE;
 8011dd0:	4b04      	ldr	r3, [pc, #16]	; (8011de4 <Callback_AT_Timer+0x1c>)
 8011dd2:	2200      	movs	r2, #0
 8011dd4:	701a      	strb	r2, [r3, #0]

}
 8011dd6:	bf00      	nop
 8011dd8:	370c      	adds	r7, #12
 8011dda:	46bd      	mov	sp, r7
 8011ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011de0:	4770      	bx	lr
 8011de2:	bf00      	nop
 8011de4:	20009b10 	.word	0x20009b10

08011de8 <Callback_Ring_Center_Timer>:

/* Callback_Ring_Center_Timer function */
void Callback_Ring_Center_Timer(void const * argument)
{
 8011de8:	b580      	push	{r7, lr}
 8011dea:	b082      	sub	sp, #8
 8011dec:	af00      	add	r7, sp, #0
 8011dee:	6078      	str	r0, [r7, #4]

	//NVIC_SystemReset();
	m95_power_off();
 8011df0:	f019 f886 	bl	802af00 <m95_power_off>
	osTimerStart(Ring_Center_TimerHandle, 60000);// перезапускаем таймер перезагрузки
 8011df4:	4b05      	ldr	r3, [pc, #20]	; (8011e0c <Callback_Ring_Center_Timer+0x24>)
 8011df6:	681b      	ldr	r3, [r3, #0]
 8011df8:	f64e 2160 	movw	r1, #60000	; 0xea60
 8011dfc:	4618      	mov	r0, r3
 8011dfe:	f007 f9bb 	bl	8019178 <osTimerStart>


}
 8011e02:	bf00      	nop
 8011e04:	3708      	adds	r7, #8
 8011e06:	46bd      	mov	sp, r7
 8011e08:	bd80      	pop	{r7, pc}
 8011e0a:	bf00      	nop
 8011e0c:	20009724 	.word	0x20009724

08011e10 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8011e10:	b580      	push	{r7, lr}
 8011e12:	b082      	sub	sp, #8
 8011e14:	af00      	add	r7, sp, #0
 8011e16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {

	osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8011e18:	4b08      	ldr	r3, [pc, #32]	; (8011e3c <StartDefaultTask+0x2c>)
 8011e1a:	681b      	ldr	r3, [r3, #0]
 8011e1c:	f04f 31ff 	mov.w	r1, #4294967295
 8011e20:	4618      	mov	r0, r3
 8011e22:	f007 fa41 	bl	80192a8 <osMutexWait>

	//HAL_IWDG_Refresh(&hiwdg);
	//LED_VD3_TOGGLE();

	osMutexRelease(Fm25v02MutexHandle);
 8011e26:	4b05      	ldr	r3, [pc, #20]	; (8011e3c <StartDefaultTask+0x2c>)
 8011e28:	681b      	ldr	r3, [r3, #0]
 8011e2a:	4618      	mov	r0, r3
 8011e2c:	f007 fa8a 	bl	8019344 <osMutexRelease>

	osDelay(1000);
 8011e30:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8011e34:	f007 f957 	bl	80190e6 <osDelay>
	osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8011e38:	e7ee      	b.n	8011e18 <StartDefaultTask+0x8>
 8011e3a:	bf00      	nop
 8011e3c:	20009bb8 	.word	0x20009bb8

08011e40 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8011e40:	b580      	push	{r7, lr}
 8011e42:	b082      	sub	sp, #8
 8011e44:	af00      	add	r7, sp, #0
 8011e46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	681b      	ldr	r3, [r3, #0]
 8011e4c:	4a95      	ldr	r2, [pc, #596]	; (80120a4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8011e4e:	4293      	cmp	r3, r2
 8011e50:	d101      	bne.n	8011e56 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8011e52:	f001 f819 	bl	8012e88 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

	if(htim->Instance == TIM3) //check if the interrupt comes from TIM1
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	681b      	ldr	r3, [r3, #0]
 8011e5a:	4a93      	ldr	r2, [pc, #588]	; (80120a8 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8011e5c:	4293      	cmp	r3, r2
 8011e5e:	d107      	bne.n	8011e70 <HAL_TIM_PeriodElapsedCallback+0x30>
	{
		HAL_TIM_Base_Start_IT(&htim3);
 8011e60:	4892      	ldr	r0, [pc, #584]	; (80120ac <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8011e62:	f005 fb61 	bl	8017528 <HAL_TIM_Base_Start_IT>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)data_in, 3);
 8011e66:	2203      	movs	r2, #3
 8011e68:	4991      	ldr	r1, [pc, #580]	; (80120b0 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8011e6a:	4892      	ldr	r0, [pc, #584]	; (80120b4 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8011e6c:	f001 f9a4 	bl	80131b8 <HAL_ADC_Start_DMA>
		//LED_VD5_TOGGLE();

	}


	if(htim->Instance == TIM2)
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	681b      	ldr	r3, [r3, #0]
 8011e74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011e78:	f040 82e5 	bne.w	8012446 <HAL_TIM_PeriodElapsedCallback+0x606>
	{
		TIM2->CNT = 0;
 8011e7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011e80:	2200      	movs	r2, #0
 8011e82:	625a      	str	r2, [r3, #36]	; 0x24

//----программа обработки кнопки 1----------------------------------------------

		if( HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7) == GPIO_PIN_RESET)
 8011e84:	2180      	movs	r1, #128	; 0x80
 8011e86:	488c      	ldr	r0, [pc, #560]	; (80120b8 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8011e88:	f002 fcea 	bl	8014860 <HAL_GPIO_ReadPin>
 8011e8c:	4603      	mov	r3, r0
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d125      	bne.n	8011ede <HAL_TIM_PeriodElapsedCallback+0x9e>
		{
			//spi_buf[0] = 1;
			if(key1_state<key_delay)
 8011e92:	4b8a      	ldr	r3, [pc, #552]	; (80120bc <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8011e94:	881b      	ldrh	r3, [r3, #0]
 8011e96:	b29a      	uxth	r2, r3
 8011e98:	4b89      	ldr	r3, [pc, #548]	; (80120c0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8011e9a:	881b      	ldrh	r3, [r3, #0]
 8011e9c:	b29b      	uxth	r3, r3
 8011e9e:	429a      	cmp	r2, r3
 8011ea0:	d207      	bcs.n	8011eb2 <HAL_TIM_PeriodElapsedCallback+0x72>
			{
				key1_state++;
 8011ea2:	4b86      	ldr	r3, [pc, #536]	; (80120bc <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8011ea4:	881b      	ldrh	r3, [r3, #0]
 8011ea6:	b29b      	uxth	r3, r3
 8011ea8:	3301      	adds	r3, #1
 8011eaa:	b29a      	uxth	r2, r3
 8011eac:	4b83      	ldr	r3, [pc, #524]	; (80120bc <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8011eae:	801a      	strh	r2, [r3, #0]
 8011eb0:	e011      	b.n	8011ed6 <HAL_TIM_PeriodElapsedCallback+0x96>
			}
			else if(key1_state==key_delay)
 8011eb2:	4b82      	ldr	r3, [pc, #520]	; (80120bc <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8011eb4:	881b      	ldrh	r3, [r3, #0]
 8011eb6:	b29a      	uxth	r2, r3
 8011eb8:	4b81      	ldr	r3, [pc, #516]	; (80120c0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8011eba:	881b      	ldrh	r3, [r3, #0]
 8011ebc:	b29b      	uxth	r3, r3
 8011ebe:	429a      	cmp	r2, r3
 8011ec0:	d109      	bne.n	8011ed6 <HAL_TIM_PeriodElapsedCallback+0x96>
			{
				key1_state++;
 8011ec2:	4b7e      	ldr	r3, [pc, #504]	; (80120bc <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8011ec4:	881b      	ldrh	r3, [r3, #0]
 8011ec6:	b29b      	uxth	r3, r3
 8011ec8:	3301      	adds	r3, #1
 8011eca:	b29a      	uxth	r2, r3
 8011ecc:	4b7b      	ldr	r3, [pc, #492]	; (80120bc <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8011ece:	801a      	strh	r2, [r3, #0]
				key1_press_state = 1;
 8011ed0:	4b7c      	ldr	r3, [pc, #496]	; (80120c4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8011ed2:	2201      	movs	r2, #1
 8011ed4:	701a      	strb	r2, [r3, #0]

			}

			key1_off_state = 0;
 8011ed6:	4b7c      	ldr	r3, [pc, #496]	; (80120c8 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8011ed8:	2200      	movs	r2, #0
 8011eda:	701a      	strb	r2, [r3, #0]
 8011edc:	e038      	b.n	8011f50 <HAL_TIM_PeriodElapsedCallback+0x110>

		}
		else
		{

			if( (key1_state>5)&&(key1_state<key_delay) )
 8011ede:	4b77      	ldr	r3, [pc, #476]	; (80120bc <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8011ee0:	881b      	ldrh	r3, [r3, #0]
 8011ee2:	b29b      	uxth	r3, r3
 8011ee4:	2b05      	cmp	r3, #5
 8011ee6:	d911      	bls.n	8011f0c <HAL_TIM_PeriodElapsedCallback+0xcc>
 8011ee8:	4b74      	ldr	r3, [pc, #464]	; (80120bc <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8011eea:	881b      	ldrh	r3, [r3, #0]
 8011eec:	b29a      	uxth	r2, r3
 8011eee:	4b74      	ldr	r3, [pc, #464]	; (80120c0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8011ef0:	881b      	ldrh	r3, [r3, #0]
 8011ef2:	b29b      	uxth	r3, r3
 8011ef4:	429a      	cmp	r2, r3
 8011ef6:	d209      	bcs.n	8011f0c <HAL_TIM_PeriodElapsedCallback+0xcc>
			{
				key1_state = 0;
 8011ef8:	4b70      	ldr	r3, [pc, #448]	; (80120bc <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8011efa:	2200      	movs	r2, #0
 8011efc:	801a      	strh	r2, [r3, #0]
				key1_on_state = 1;
 8011efe:	4b73      	ldr	r3, [pc, #460]	; (80120cc <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8011f00:	2201      	movs	r2, #1
 8011f02:	701a      	strb	r2, [r3, #0]

				//key_speed = 0;
				key_delay = 200;
 8011f04:	4b6e      	ldr	r3, [pc, #440]	; (80120c0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8011f06:	22c8      	movs	r2, #200	; 0xc8
 8011f08:	801a      	strh	r2, [r3, #0]
 8011f0a:	e00d      	b.n	8011f28 <HAL_TIM_PeriodElapsedCallback+0xe8>
			}
			else if(key1_state>=key_delay)
 8011f0c:	4b6b      	ldr	r3, [pc, #428]	; (80120bc <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8011f0e:	881b      	ldrh	r3, [r3, #0]
 8011f10:	b29a      	uxth	r2, r3
 8011f12:	4b6b      	ldr	r3, [pc, #428]	; (80120c0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8011f14:	881b      	ldrh	r3, [r3, #0]
 8011f16:	b29b      	uxth	r3, r3
 8011f18:	429a      	cmp	r2, r3
 8011f1a:	d305      	bcc.n	8011f28 <HAL_TIM_PeriodElapsedCallback+0xe8>
			{
				key1_state = 0;
 8011f1c:	4b67      	ldr	r3, [pc, #412]	; (80120bc <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8011f1e:	2200      	movs	r2, #0
 8011f20:	801a      	strh	r2, [r3, #0]

				//key_speed = 0;
				key_delay = 200;
 8011f22:	4b67      	ldr	r3, [pc, #412]	; (80120c0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8011f24:	22c8      	movs	r2, #200	; 0xc8
 8011f26:	801a      	strh	r2, [r3, #0]
			//else if(key1_state>0)
			//{
				//key_delay = 200;
			//}

			if(key1_off_state<20)
 8011f28:	4b67      	ldr	r3, [pc, #412]	; (80120c8 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8011f2a:	781b      	ldrb	r3, [r3, #0]
 8011f2c:	b2db      	uxtb	r3, r3
 8011f2e:	2b13      	cmp	r3, #19
 8011f30:	d80e      	bhi.n	8011f50 <HAL_TIM_PeriodElapsedCallback+0x110>
			{
				key1_off_state++;
 8011f32:	4b65      	ldr	r3, [pc, #404]	; (80120c8 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8011f34:	781b      	ldrb	r3, [r3, #0]
 8011f36:	b2db      	uxtb	r3, r3
 8011f38:	3301      	adds	r3, #1
 8011f3a:	b2da      	uxtb	r2, r3
 8011f3c:	4b62      	ldr	r3, [pc, #392]	; (80120c8 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8011f3e:	701a      	strb	r2, [r3, #0]
				if(key1_off_state==20)
 8011f40:	4b61      	ldr	r3, [pc, #388]	; (80120c8 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8011f42:	781b      	ldrb	r3, [r3, #0]
 8011f44:	b2db      	uxtb	r3, r3
 8011f46:	2b14      	cmp	r3, #20
 8011f48:	d102      	bne.n	8011f50 <HAL_TIM_PeriodElapsedCallback+0x110>
				{
					key_delay = 200;
 8011f4a:	4b5d      	ldr	r3, [pc, #372]	; (80120c0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8011f4c:	22c8      	movs	r2, #200	; 0xc8
 8011f4e:	801a      	strh	r2, [r3, #0]
				}
			}

		}

		if(key1_on_state == 1) // обработчик короткого нажатия кнопки 1
 8011f50:	4b5e      	ldr	r3, [pc, #376]	; (80120cc <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8011f52:	781b      	ldrb	r3, [r3, #0]
 8011f54:	b2db      	uxtb	r3, r3
 8011f56:	2b01      	cmp	r3, #1
 8011f58:	d11f      	bne.n	8011f9a <HAL_TIM_PeriodElapsedCallback+0x15a>
		{
			key1_on_state = 0; // обнуление состояния короткого нажатия на кнопку 1
 8011f5a:	4b5c      	ldr	r3, [pc, #368]	; (80120cc <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8011f5c:	2200      	movs	r2, #0
 8011f5e:	701a      	strb	r2, [r3, #0]

			reset_display_time_state = 0;
 8011f60:	4b5b      	ldr	r3, [pc, #364]	; (80120d0 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8011f62:	2200      	movs	r2, #0
 8011f64:	801a      	strh	r2, [r3, #0]

			if(register_menu_state > 0)
 8011f66:	4b5b      	ldr	r3, [pc, #364]	; (80120d4 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8011f68:	881b      	ldrh	r3, [r3, #0]
 8011f6a:	b29b      	uxth	r3, r3
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	d014      	beq.n	8011f9a <HAL_TIM_PeriodElapsedCallback+0x15a>
			{
				if(register_content_menu_state == 0)
 8011f70:	4b59      	ldr	r3, [pc, #356]	; (80120d8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8011f72:	881b      	ldrh	r3, [r3, #0]
 8011f74:	b29b      	uxth	r3, r3
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d107      	bne.n	8011f8a <HAL_TIM_PeriodElapsedCallback+0x14a>
				{
					register_menu_state--;
 8011f7a:	4b56      	ldr	r3, [pc, #344]	; (80120d4 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8011f7c:	881b      	ldrh	r3, [r3, #0]
 8011f7e:	b29b      	uxth	r3, r3
 8011f80:	3b01      	subs	r3, #1
 8011f82:	b29a      	uxth	r2, r3
 8011f84:	4b53      	ldr	r3, [pc, #332]	; (80120d4 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8011f86:	801a      	strh	r2, [r3, #0]
 8011f88:	e007      	b.n	8011f9a <HAL_TIM_PeriodElapsedCallback+0x15a>
					//reset_display_time_state = 0;
				}
				else if(register_content_menu_state == 2)
 8011f8a:	4b53      	ldr	r3, [pc, #332]	; (80120d8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8011f8c:	881b      	ldrh	r3, [r3, #0]
 8011f8e:	b29b      	uxth	r3, r3
 8011f90:	2b02      	cmp	r3, #2
 8011f92:	d102      	bne.n	8011f9a <HAL_TIM_PeriodElapsedCallback+0x15a>
				{
					control_register_decrement_state = 1;
 8011f94:	4b51      	ldr	r3, [pc, #324]	; (80120dc <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8011f96:	2201      	movs	r2, #1
 8011f98:	701a      	strb	r2, [r3, #0]
				}
			}

		}

		if(key1_press_state == 1) // обработчик длительного нажатия кнопки 1
 8011f9a:	4b4a      	ldr	r3, [pc, #296]	; (80120c4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8011f9c:	781b      	ldrb	r3, [r3, #0]
 8011f9e:	b2db      	uxtb	r3, r3
 8011fa0:	2b01      	cmp	r3, #1
 8011fa2:	d13a      	bne.n	801201a <HAL_TIM_PeriodElapsedCallback+0x1da>
		{
			key1_press_state = 0; // обнуление состояния длинного нажатия на кнопку 1
 8011fa4:	4b47      	ldr	r3, [pc, #284]	; (80120c4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8011fa6:	2200      	movs	r2, #0
 8011fa8:	701a      	strb	r2, [r3, #0]

			reset_display_time_state = 0;
 8011faa:	4b49      	ldr	r3, [pc, #292]	; (80120d0 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8011fac:	2200      	movs	r2, #0
 8011fae:	801a      	strh	r2, [r3, #0]

			if(register_menu_state > 0)
 8011fb0:	4b48      	ldr	r3, [pc, #288]	; (80120d4 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8011fb2:	881b      	ldrh	r3, [r3, #0]
 8011fb4:	b29b      	uxth	r3, r3
 8011fb6:	2b00      	cmp	r3, #0
 8011fb8:	d02c      	beq.n	8012014 <HAL_TIM_PeriodElapsedCallback+0x1d4>
			{
				if(register_content_menu_state == 0)
 8011fba:	4b47      	ldr	r3, [pc, #284]	; (80120d8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8011fbc:	881b      	ldrh	r3, [r3, #0]
 8011fbe:	b29b      	uxth	r3, r3
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	d113      	bne.n	8011fec <HAL_TIM_PeriodElapsedCallback+0x1ac>
				{
					register_menu_state--;
 8011fc4:	4b43      	ldr	r3, [pc, #268]	; (80120d4 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8011fc6:	881b      	ldrh	r3, [r3, #0]
 8011fc8:	b29b      	uxth	r3, r3
 8011fca:	3b01      	subs	r3, #1
 8011fcc:	b29a      	uxth	r2, r3
 8011fce:	4b41      	ldr	r3, [pc, #260]	; (80120d4 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8011fd0:	801a      	strh	r2, [r3, #0]

					if(key_delay>10)
 8011fd2:	4b3b      	ldr	r3, [pc, #236]	; (80120c0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8011fd4:	881b      	ldrh	r3, [r3, #0]
 8011fd6:	b29b      	uxth	r3, r3
 8011fd8:	2b0a      	cmp	r3, #10
 8011fda:	d91b      	bls.n	8012014 <HAL_TIM_PeriodElapsedCallback+0x1d4>
					{
						key_delay = key_delay - 10;
 8011fdc:	4b38      	ldr	r3, [pc, #224]	; (80120c0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8011fde:	881b      	ldrh	r3, [r3, #0]
 8011fe0:	b29b      	uxth	r3, r3
 8011fe2:	3b0a      	subs	r3, #10
 8011fe4:	b29a      	uxth	r2, r3
 8011fe6:	4b36      	ldr	r3, [pc, #216]	; (80120c0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8011fe8:	801a      	strh	r2, [r3, #0]
 8011fea:	e013      	b.n	8012014 <HAL_TIM_PeriodElapsedCallback+0x1d4>
					}

					//register_menu_state = register_menu_state - ( 1+(key_speed/10) );
				}
				else if(register_content_menu_state == 2)
 8011fec:	4b3a      	ldr	r3, [pc, #232]	; (80120d8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8011fee:	881b      	ldrh	r3, [r3, #0]
 8011ff0:	b29b      	uxth	r3, r3
 8011ff2:	2b02      	cmp	r3, #2
 8011ff4:	d10e      	bne.n	8012014 <HAL_TIM_PeriodElapsedCallback+0x1d4>
				{
					control_register_decrement_state = 1;
 8011ff6:	4b39      	ldr	r3, [pc, #228]	; (80120dc <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8011ff8:	2201      	movs	r2, #1
 8011ffa:	701a      	strb	r2, [r3, #0]

					if(key_delay>5)
 8011ffc:	4b30      	ldr	r3, [pc, #192]	; (80120c0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8011ffe:	881b      	ldrh	r3, [r3, #0]
 8012000:	b29b      	uxth	r3, r3
 8012002:	2b05      	cmp	r3, #5
 8012004:	d906      	bls.n	8012014 <HAL_TIM_PeriodElapsedCallback+0x1d4>
					{
						key_delay = key_delay - 5;
 8012006:	4b2e      	ldr	r3, [pc, #184]	; (80120c0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8012008:	881b      	ldrh	r3, [r3, #0]
 801200a:	b29b      	uxth	r3, r3
 801200c:	3b05      	subs	r3, #5
 801200e:	b29a      	uxth	r2, r3
 8012010:	4b2b      	ldr	r3, [pc, #172]	; (80120c0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8012012:	801a      	strh	r2, [r3, #0]
					}

				}
			}

			key1_state = 0;
 8012014:	4b29      	ldr	r3, [pc, #164]	; (80120bc <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8012016:	2200      	movs	r2, #0
 8012018:	801a      	strh	r2, [r3, #0]

//----------------------------------------------------------------------------------

//----программа обработки кнопки 2----------------------------------------------

		if( HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_8) == GPIO_PIN_RESET)
 801201a:	f44f 7180 	mov.w	r1, #256	; 0x100
 801201e:	4826      	ldr	r0, [pc, #152]	; (80120b8 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8012020:	f002 fc1e 	bl	8014860 <HAL_GPIO_ReadPin>
 8012024:	4603      	mov	r3, r0
 8012026:	2b00      	cmp	r3, #0
 8012028:	d125      	bne.n	8012076 <HAL_TIM_PeriodElapsedCallback+0x236>
		{
			//spi_buf[0] = 2;
			if(key2_state<key_delay)
 801202a:	4b2d      	ldr	r3, [pc, #180]	; (80120e0 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 801202c:	881b      	ldrh	r3, [r3, #0]
 801202e:	b29a      	uxth	r2, r3
 8012030:	4b23      	ldr	r3, [pc, #140]	; (80120c0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8012032:	881b      	ldrh	r3, [r3, #0]
 8012034:	b29b      	uxth	r3, r3
 8012036:	429a      	cmp	r2, r3
 8012038:	d207      	bcs.n	801204a <HAL_TIM_PeriodElapsedCallback+0x20a>
			{

				key2_state++;
 801203a:	4b29      	ldr	r3, [pc, #164]	; (80120e0 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 801203c:	881b      	ldrh	r3, [r3, #0]
 801203e:	b29b      	uxth	r3, r3
 8012040:	3301      	adds	r3, #1
 8012042:	b29a      	uxth	r2, r3
 8012044:	4b26      	ldr	r3, [pc, #152]	; (80120e0 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8012046:	801a      	strh	r2, [r3, #0]
 8012048:	e011      	b.n	801206e <HAL_TIM_PeriodElapsedCallback+0x22e>

			}
			else if(key2_state==key_delay)
 801204a:	4b25      	ldr	r3, [pc, #148]	; (80120e0 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 801204c:	881b      	ldrh	r3, [r3, #0]
 801204e:	b29a      	uxth	r2, r3
 8012050:	4b1b      	ldr	r3, [pc, #108]	; (80120c0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8012052:	881b      	ldrh	r3, [r3, #0]
 8012054:	b29b      	uxth	r3, r3
 8012056:	429a      	cmp	r2, r3
 8012058:	d109      	bne.n	801206e <HAL_TIM_PeriodElapsedCallback+0x22e>
			{
				key2_state++;
 801205a:	4b21      	ldr	r3, [pc, #132]	; (80120e0 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 801205c:	881b      	ldrh	r3, [r3, #0]
 801205e:	b29b      	uxth	r3, r3
 8012060:	3301      	adds	r3, #1
 8012062:	b29a      	uxth	r2, r3
 8012064:	4b1e      	ldr	r3, [pc, #120]	; (80120e0 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8012066:	801a      	strh	r2, [r3, #0]
				key2_press_state = 1;
 8012068:	4b1e      	ldr	r3, [pc, #120]	; (80120e4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 801206a:	2201      	movs	r2, #1
 801206c:	701a      	strb	r2, [r3, #0]
			}

			key2_off_state = 0;
 801206e:	4b1e      	ldr	r3, [pc, #120]	; (80120e8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8012070:	2200      	movs	r2, #0
 8012072:	701a      	strb	r2, [r3, #0]
 8012074:	e05e      	b.n	8012134 <HAL_TIM_PeriodElapsedCallback+0x2f4>

		}
		else
		{
			if( (key2_state>5)&&(key2_state<key_delay) )
 8012076:	4b1a      	ldr	r3, [pc, #104]	; (80120e0 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8012078:	881b      	ldrh	r3, [r3, #0]
 801207a:	b29b      	uxth	r3, r3
 801207c:	2b05      	cmp	r3, #5
 801207e:	d937      	bls.n	80120f0 <HAL_TIM_PeriodElapsedCallback+0x2b0>
 8012080:	4b17      	ldr	r3, [pc, #92]	; (80120e0 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8012082:	881b      	ldrh	r3, [r3, #0]
 8012084:	b29a      	uxth	r2, r3
 8012086:	4b0e      	ldr	r3, [pc, #56]	; (80120c0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8012088:	881b      	ldrh	r3, [r3, #0]
 801208a:	b29b      	uxth	r3, r3
 801208c:	429a      	cmp	r2, r3
 801208e:	d22f      	bcs.n	80120f0 <HAL_TIM_PeriodElapsedCallback+0x2b0>
			{
				key2_state = 0;
 8012090:	4b13      	ldr	r3, [pc, #76]	; (80120e0 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8012092:	2200      	movs	r2, #0
 8012094:	801a      	strh	r2, [r3, #0]
				key2_on_state = 1;
 8012096:	4b15      	ldr	r3, [pc, #84]	; (80120ec <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8012098:	2201      	movs	r2, #1
 801209a:	701a      	strb	r2, [r3, #0]

				//key_speed = 0;
				key_delay = 200;
 801209c:	4b08      	ldr	r3, [pc, #32]	; (80120c0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 801209e:	22c8      	movs	r2, #200	; 0xc8
 80120a0:	801a      	strh	r2, [r3, #0]
 80120a2:	e033      	b.n	801210c <HAL_TIM_PeriodElapsedCallback+0x2cc>
 80120a4:	40010000 	.word	0x40010000
 80120a8:	40000400 	.word	0x40000400
 80120ac:	20009794 	.word	0x20009794
 80120b0:	20009f58 	.word	0x20009f58
 80120b4:	200099b0 	.word	0x200099b0
 80120b8:	40021000 	.word	0x40021000
 80120bc:	20000878 	.word	0x20000878
 80120c0:	20000002 	.word	0x20000002
 80120c4:	2000087b 	.word	0x2000087b
 80120c8:	20000888 	.word	0x20000888
 80120cc:	2000087a 	.word	0x2000087a
 80120d0:	20000004 	.word	0x20000004
 80120d4:	20008010 	.word	0x20008010
 80120d8:	20008012 	.word	0x20008012
 80120dc:	20008015 	.word	0x20008015
 80120e0:	2000087c 	.word	0x2000087c
 80120e4:	2000087f 	.word	0x2000087f
 80120e8:	20000889 	.word	0x20000889
 80120ec:	2000087e 	.word	0x2000087e
			}
			else if(key2_state>=key_delay)
 80120f0:	4b92      	ldr	r3, [pc, #584]	; (801233c <HAL_TIM_PeriodElapsedCallback+0x4fc>)
 80120f2:	881b      	ldrh	r3, [r3, #0]
 80120f4:	b29a      	uxth	r2, r3
 80120f6:	4b92      	ldr	r3, [pc, #584]	; (8012340 <HAL_TIM_PeriodElapsedCallback+0x500>)
 80120f8:	881b      	ldrh	r3, [r3, #0]
 80120fa:	b29b      	uxth	r3, r3
 80120fc:	429a      	cmp	r2, r3
 80120fe:	d305      	bcc.n	801210c <HAL_TIM_PeriodElapsedCallback+0x2cc>
			{
				key2_state = 0;
 8012100:	4b8e      	ldr	r3, [pc, #568]	; (801233c <HAL_TIM_PeriodElapsedCallback+0x4fc>)
 8012102:	2200      	movs	r2, #0
 8012104:	801a      	strh	r2, [r3, #0]

				//key_speed = 0;
				key_delay = 200;
 8012106:	4b8e      	ldr	r3, [pc, #568]	; (8012340 <HAL_TIM_PeriodElapsedCallback+0x500>)
 8012108:	22c8      	movs	r2, #200	; 0xc8
 801210a:	801a      	strh	r2, [r3, #0]
			//}
			//else if(key2_state>0)
			//{
				//key_delay = 200;
			//}
			if(key2_off_state<20)
 801210c:	4b8d      	ldr	r3, [pc, #564]	; (8012344 <HAL_TIM_PeriodElapsedCallback+0x504>)
 801210e:	781b      	ldrb	r3, [r3, #0]
 8012110:	b2db      	uxtb	r3, r3
 8012112:	2b13      	cmp	r3, #19
 8012114:	d80e      	bhi.n	8012134 <HAL_TIM_PeriodElapsedCallback+0x2f4>
			{
				key2_off_state++;
 8012116:	4b8b      	ldr	r3, [pc, #556]	; (8012344 <HAL_TIM_PeriodElapsedCallback+0x504>)
 8012118:	781b      	ldrb	r3, [r3, #0]
 801211a:	b2db      	uxtb	r3, r3
 801211c:	3301      	adds	r3, #1
 801211e:	b2da      	uxtb	r2, r3
 8012120:	4b88      	ldr	r3, [pc, #544]	; (8012344 <HAL_TIM_PeriodElapsedCallback+0x504>)
 8012122:	701a      	strb	r2, [r3, #0]
				if(key2_off_state==20)
 8012124:	4b87      	ldr	r3, [pc, #540]	; (8012344 <HAL_TIM_PeriodElapsedCallback+0x504>)
 8012126:	781b      	ldrb	r3, [r3, #0]
 8012128:	b2db      	uxtb	r3, r3
 801212a:	2b14      	cmp	r3, #20
 801212c:	d102      	bne.n	8012134 <HAL_TIM_PeriodElapsedCallback+0x2f4>
				{
					key_delay = 200;
 801212e:	4b84      	ldr	r3, [pc, #528]	; (8012340 <HAL_TIM_PeriodElapsedCallback+0x500>)
 8012130:	22c8      	movs	r2, #200	; 0xc8
 8012132:	801a      	strh	r2, [r3, #0]
				}
			}

		}

		if(key2_on_state == 1) // обработчик короткого нажатия кнопки 2
 8012134:	4b84      	ldr	r3, [pc, #528]	; (8012348 <HAL_TIM_PeriodElapsedCallback+0x508>)
 8012136:	781b      	ldrb	r3, [r3, #0]
 8012138:	b2db      	uxtb	r3, r3
 801213a:	2b01      	cmp	r3, #1
 801213c:	d121      	bne.n	8012182 <HAL_TIM_PeriodElapsedCallback+0x342>
		{
			key2_on_state = 0; // обнуление состояния короткого нажатия на кнопку 2
 801213e:	4b82      	ldr	r3, [pc, #520]	; (8012348 <HAL_TIM_PeriodElapsedCallback+0x508>)
 8012140:	2200      	movs	r2, #0
 8012142:	701a      	strb	r2, [r3, #0]

			reset_display_time_state = 0;
 8012144:	4b81      	ldr	r3, [pc, #516]	; (801234c <HAL_TIM_PeriodElapsedCallback+0x50c>)
 8012146:	2200      	movs	r2, #0
 8012148:	801a      	strh	r2, [r3, #0]

			if(register_menu_state < MAX_MENU_NUMBER)
 801214a:	4b81      	ldr	r3, [pc, #516]	; (8012350 <HAL_TIM_PeriodElapsedCallback+0x510>)
 801214c:	881b      	ldrh	r3, [r3, #0]
 801214e:	b29b      	uxth	r3, r3
 8012150:	f240 629a 	movw	r2, #1690	; 0x69a
 8012154:	4293      	cmp	r3, r2
 8012156:	d814      	bhi.n	8012182 <HAL_TIM_PeriodElapsedCallback+0x342>
			{
				if(register_content_menu_state == 0)
 8012158:	4b7e      	ldr	r3, [pc, #504]	; (8012354 <HAL_TIM_PeriodElapsedCallback+0x514>)
 801215a:	881b      	ldrh	r3, [r3, #0]
 801215c:	b29b      	uxth	r3, r3
 801215e:	2b00      	cmp	r3, #0
 8012160:	d107      	bne.n	8012172 <HAL_TIM_PeriodElapsedCallback+0x332>
				{
					register_menu_state++;
 8012162:	4b7b      	ldr	r3, [pc, #492]	; (8012350 <HAL_TIM_PeriodElapsedCallback+0x510>)
 8012164:	881b      	ldrh	r3, [r3, #0]
 8012166:	b29b      	uxth	r3, r3
 8012168:	3301      	adds	r3, #1
 801216a:	b29a      	uxth	r2, r3
 801216c:	4b78      	ldr	r3, [pc, #480]	; (8012350 <HAL_TIM_PeriodElapsedCallback+0x510>)
 801216e:	801a      	strh	r2, [r3, #0]
 8012170:	e007      	b.n	8012182 <HAL_TIM_PeriodElapsedCallback+0x342>

				}
				else if(register_content_menu_state == 2)
 8012172:	4b78      	ldr	r3, [pc, #480]	; (8012354 <HAL_TIM_PeriodElapsedCallback+0x514>)
 8012174:	881b      	ldrh	r3, [r3, #0]
 8012176:	b29b      	uxth	r3, r3
 8012178:	2b02      	cmp	r3, #2
 801217a:	d102      	bne.n	8012182 <HAL_TIM_PeriodElapsedCallback+0x342>
				{
					control_register_increment_state = 1;
 801217c:	4b76      	ldr	r3, [pc, #472]	; (8012358 <HAL_TIM_PeriodElapsedCallback+0x518>)
 801217e:	2201      	movs	r2, #1
 8012180:	701a      	strb	r2, [r3, #0]
				}
			}

		}
		if(key2_press_state == 1) // обработчик длительного нажатия кнопки 2
 8012182:	4b76      	ldr	r3, [pc, #472]	; (801235c <HAL_TIM_PeriodElapsedCallback+0x51c>)
 8012184:	781b      	ldrb	r3, [r3, #0]
 8012186:	b2db      	uxtb	r3, r3
 8012188:	2b01      	cmp	r3, #1
 801218a:	d13c      	bne.n	8012206 <HAL_TIM_PeriodElapsedCallback+0x3c6>
		{
			key2_press_state = 0; // обнуление состояния длинного нажатия на кнопку 2
 801218c:	4b73      	ldr	r3, [pc, #460]	; (801235c <HAL_TIM_PeriodElapsedCallback+0x51c>)
 801218e:	2200      	movs	r2, #0
 8012190:	701a      	strb	r2, [r3, #0]

			reset_display_time_state = 0;
 8012192:	4b6e      	ldr	r3, [pc, #440]	; (801234c <HAL_TIM_PeriodElapsedCallback+0x50c>)
 8012194:	2200      	movs	r2, #0
 8012196:	801a      	strh	r2, [r3, #0]

			if(register_menu_state < MAX_MENU_NUMBER)
 8012198:	4b6d      	ldr	r3, [pc, #436]	; (8012350 <HAL_TIM_PeriodElapsedCallback+0x510>)
 801219a:	881b      	ldrh	r3, [r3, #0]
 801219c:	b29b      	uxth	r3, r3
 801219e:	f240 629a 	movw	r2, #1690	; 0x69a
 80121a2:	4293      	cmp	r3, r2
 80121a4:	d82c      	bhi.n	8012200 <HAL_TIM_PeriodElapsedCallback+0x3c0>
			{
				if(register_content_menu_state == 0)
 80121a6:	4b6b      	ldr	r3, [pc, #428]	; (8012354 <HAL_TIM_PeriodElapsedCallback+0x514>)
 80121a8:	881b      	ldrh	r3, [r3, #0]
 80121aa:	b29b      	uxth	r3, r3
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	d113      	bne.n	80121d8 <HAL_TIM_PeriodElapsedCallback+0x398>
				{
					register_menu_state++;
 80121b0:	4b67      	ldr	r3, [pc, #412]	; (8012350 <HAL_TIM_PeriodElapsedCallback+0x510>)
 80121b2:	881b      	ldrh	r3, [r3, #0]
 80121b4:	b29b      	uxth	r3, r3
 80121b6:	3301      	adds	r3, #1
 80121b8:	b29a      	uxth	r2, r3
 80121ba:	4b65      	ldr	r3, [pc, #404]	; (8012350 <HAL_TIM_PeriodElapsedCallback+0x510>)
 80121bc:	801a      	strh	r2, [r3, #0]

					if(key_delay>10)
 80121be:	4b60      	ldr	r3, [pc, #384]	; (8012340 <HAL_TIM_PeriodElapsedCallback+0x500>)
 80121c0:	881b      	ldrh	r3, [r3, #0]
 80121c2:	b29b      	uxth	r3, r3
 80121c4:	2b0a      	cmp	r3, #10
 80121c6:	d91b      	bls.n	8012200 <HAL_TIM_PeriodElapsedCallback+0x3c0>
					{
						key_delay = key_delay - 10;
 80121c8:	4b5d      	ldr	r3, [pc, #372]	; (8012340 <HAL_TIM_PeriodElapsedCallback+0x500>)
 80121ca:	881b      	ldrh	r3, [r3, #0]
 80121cc:	b29b      	uxth	r3, r3
 80121ce:	3b0a      	subs	r3, #10
 80121d0:	b29a      	uxth	r2, r3
 80121d2:	4b5b      	ldr	r3, [pc, #364]	; (8012340 <HAL_TIM_PeriodElapsedCallback+0x500>)
 80121d4:	801a      	strh	r2, [r3, #0]
 80121d6:	e013      	b.n	8012200 <HAL_TIM_PeriodElapsedCallback+0x3c0>
					}

					//register_menu_state = register_menu_state + ( 1+(key_speed/10) );
				}
				else if(register_content_menu_state == 2)
 80121d8:	4b5e      	ldr	r3, [pc, #376]	; (8012354 <HAL_TIM_PeriodElapsedCallback+0x514>)
 80121da:	881b      	ldrh	r3, [r3, #0]
 80121dc:	b29b      	uxth	r3, r3
 80121de:	2b02      	cmp	r3, #2
 80121e0:	d10e      	bne.n	8012200 <HAL_TIM_PeriodElapsedCallback+0x3c0>
				{
					control_register_increment_state = 1;
 80121e2:	4b5d      	ldr	r3, [pc, #372]	; (8012358 <HAL_TIM_PeriodElapsedCallback+0x518>)
 80121e4:	2201      	movs	r2, #1
 80121e6:	701a      	strb	r2, [r3, #0]

					if(key_delay>5)
 80121e8:	4b55      	ldr	r3, [pc, #340]	; (8012340 <HAL_TIM_PeriodElapsedCallback+0x500>)
 80121ea:	881b      	ldrh	r3, [r3, #0]
 80121ec:	b29b      	uxth	r3, r3
 80121ee:	2b05      	cmp	r3, #5
 80121f0:	d906      	bls.n	8012200 <HAL_TIM_PeriodElapsedCallback+0x3c0>
					{
						key_delay = key_delay - 5;
 80121f2:	4b53      	ldr	r3, [pc, #332]	; (8012340 <HAL_TIM_PeriodElapsedCallback+0x500>)
 80121f4:	881b      	ldrh	r3, [r3, #0]
 80121f6:	b29b      	uxth	r3, r3
 80121f8:	3b05      	subs	r3, #5
 80121fa:	b29a      	uxth	r2, r3
 80121fc:	4b50      	ldr	r3, [pc, #320]	; (8012340 <HAL_TIM_PeriodElapsedCallback+0x500>)
 80121fe:	801a      	strh	r2, [r3, #0]
					}

				}
			}

			key2_state = 0;
 8012200:	4b4e      	ldr	r3, [pc, #312]	; (801233c <HAL_TIM_PeriodElapsedCallback+0x4fc>)
 8012202:	2200      	movs	r2, #0
 8012204:	801a      	strh	r2, [r3, #0]

//----------------------------------------------------------------------------------

		//----программа обработки кнопки 3----------------------------------------------

				if( HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_9) == GPIO_PIN_RESET)
 8012206:	f44f 7100 	mov.w	r1, #512	; 0x200
 801220a:	4855      	ldr	r0, [pc, #340]	; (8012360 <HAL_TIM_PeriodElapsedCallback+0x520>)
 801220c:	f002 fb28 	bl	8014860 <HAL_GPIO_ReadPin>
 8012210:	4603      	mov	r3, r0
 8012212:	2b00      	cmp	r3, #0
 8012214:	d11e      	bne.n	8012254 <HAL_TIM_PeriodElapsedCallback+0x414>
				{
					if(key3_state<2000)
 8012216:	4b53      	ldr	r3, [pc, #332]	; (8012364 <HAL_TIM_PeriodElapsedCallback+0x524>)
 8012218:	881b      	ldrh	r3, [r3, #0]
 801221a:	b29b      	uxth	r3, r3
 801221c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8012220:	d207      	bcs.n	8012232 <HAL_TIM_PeriodElapsedCallback+0x3f2>
					{

						key3_state++;
 8012222:	4b50      	ldr	r3, [pc, #320]	; (8012364 <HAL_TIM_PeriodElapsedCallback+0x524>)
 8012224:	881b      	ldrh	r3, [r3, #0]
 8012226:	b29b      	uxth	r3, r3
 8012228:	3301      	adds	r3, #1
 801222a:	b29a      	uxth	r2, r3
 801222c:	4b4d      	ldr	r3, [pc, #308]	; (8012364 <HAL_TIM_PeriodElapsedCallback+0x524>)
 801222e:	801a      	strh	r2, [r3, #0]
 8012230:	e02b      	b.n	801228a <HAL_TIM_PeriodElapsedCallback+0x44a>

					}
					else if(key3_state==2000)
 8012232:	4b4c      	ldr	r3, [pc, #304]	; (8012364 <HAL_TIM_PeriodElapsedCallback+0x524>)
 8012234:	881b      	ldrh	r3, [r3, #0]
 8012236:	b29b      	uxth	r3, r3
 8012238:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 801223c:	d125      	bne.n	801228a <HAL_TIM_PeriodElapsedCallback+0x44a>
					{
						key3_state++;
 801223e:	4b49      	ldr	r3, [pc, #292]	; (8012364 <HAL_TIM_PeriodElapsedCallback+0x524>)
 8012240:	881b      	ldrh	r3, [r3, #0]
 8012242:	b29b      	uxth	r3, r3
 8012244:	3301      	adds	r3, #1
 8012246:	b29a      	uxth	r2, r3
 8012248:	4b46      	ldr	r3, [pc, #280]	; (8012364 <HAL_TIM_PeriodElapsedCallback+0x524>)
 801224a:	801a      	strh	r2, [r3, #0]
						key3_press_state = 1;
 801224c:	4b46      	ldr	r3, [pc, #280]	; (8012368 <HAL_TIM_PeriodElapsedCallback+0x528>)
 801224e:	2201      	movs	r2, #1
 8012250:	701a      	strb	r2, [r3, #0]
 8012252:	e01a      	b.n	801228a <HAL_TIM_PeriodElapsedCallback+0x44a>
					}
				}
				else
				{
					if( (key3_state>5)&&(key3_state<2000) )
 8012254:	4b43      	ldr	r3, [pc, #268]	; (8012364 <HAL_TIM_PeriodElapsedCallback+0x524>)
 8012256:	881b      	ldrh	r3, [r3, #0]
 8012258:	b29b      	uxth	r3, r3
 801225a:	2b05      	cmp	r3, #5
 801225c:	d90c      	bls.n	8012278 <HAL_TIM_PeriodElapsedCallback+0x438>
 801225e:	4b41      	ldr	r3, [pc, #260]	; (8012364 <HAL_TIM_PeriodElapsedCallback+0x524>)
 8012260:	881b      	ldrh	r3, [r3, #0]
 8012262:	b29b      	uxth	r3, r3
 8012264:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8012268:	d206      	bcs.n	8012278 <HAL_TIM_PeriodElapsedCallback+0x438>
					{
						key3_state = 0;
 801226a:	4b3e      	ldr	r3, [pc, #248]	; (8012364 <HAL_TIM_PeriodElapsedCallback+0x524>)
 801226c:	2200      	movs	r2, #0
 801226e:	801a      	strh	r2, [r3, #0]
						key3_on_state = 1;
 8012270:	4b3e      	ldr	r3, [pc, #248]	; (801236c <HAL_TIM_PeriodElapsedCallback+0x52c>)
 8012272:	2201      	movs	r2, #1
 8012274:	701a      	strb	r2, [r3, #0]
 8012276:	e008      	b.n	801228a <HAL_TIM_PeriodElapsedCallback+0x44a>
					}
					else if(key3_state>=2000)
 8012278:	4b3a      	ldr	r3, [pc, #232]	; (8012364 <HAL_TIM_PeriodElapsedCallback+0x524>)
 801227a:	881b      	ldrh	r3, [r3, #0]
 801227c:	b29b      	uxth	r3, r3
 801227e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8012282:	d302      	bcc.n	801228a <HAL_TIM_PeriodElapsedCallback+0x44a>
					{
						key3_state = 0;
 8012284:	4b37      	ldr	r3, [pc, #220]	; (8012364 <HAL_TIM_PeriodElapsedCallback+0x524>)
 8012286:	2200      	movs	r2, #0
 8012288:	801a      	strh	r2, [r3, #0]
					}
				}

				if(key3_on_state == 1) // обработчик короткого нажатия кнопки 3
 801228a:	4b38      	ldr	r3, [pc, #224]	; (801236c <HAL_TIM_PeriodElapsedCallback+0x52c>)
 801228c:	781b      	ldrb	r3, [r3, #0]
 801228e:	b2db      	uxtb	r3, r3
 8012290:	2b01      	cmp	r3, #1
 8012292:	d111      	bne.n	80122b8 <HAL_TIM_PeriodElapsedCallback+0x478>
				{
					key3_on_state = 0; // обнуление состояния короткого нажатия на кнопку 3
 8012294:	4b35      	ldr	r3, [pc, #212]	; (801236c <HAL_TIM_PeriodElapsedCallback+0x52c>)
 8012296:	2200      	movs	r2, #0
 8012298:	701a      	strb	r2, [r3, #0]

					reset_display_time_state = 0;
 801229a:	4b2c      	ldr	r3, [pc, #176]	; (801234c <HAL_TIM_PeriodElapsedCallback+0x50c>)
 801229c:	2200      	movs	r2, #0
 801229e:	801a      	strh	r2, [r3, #0]

					if(register_content_menu_state == 1)
 80122a0:	4b2c      	ldr	r3, [pc, #176]	; (8012354 <HAL_TIM_PeriodElapsedCallback+0x514>)
 80122a2:	881b      	ldrh	r3, [r3, #0]
 80122a4:	b29b      	uxth	r3, r3
 80122a6:	2b01      	cmp	r3, #1
 80122a8:	d106      	bne.n	80122b8 <HAL_TIM_PeriodElapsedCallback+0x478>
					{
						register_content_menu_state--;
 80122aa:	4b2a      	ldr	r3, [pc, #168]	; (8012354 <HAL_TIM_PeriodElapsedCallback+0x514>)
 80122ac:	881b      	ldrh	r3, [r3, #0]
 80122ae:	b29b      	uxth	r3, r3
 80122b0:	3b01      	subs	r3, #1
 80122b2:	b29a      	uxth	r2, r3
 80122b4:	4b27      	ldr	r3, [pc, #156]	; (8012354 <HAL_TIM_PeriodElapsedCallback+0x514>)
 80122b6:	801a      	strh	r2, [r3, #0]
						//reset_display_time_state = 0;
					}
				}
				if(key3_press_state == 1) // обработчик длительного нажатия кнопки 3
 80122b8:	4b2b      	ldr	r3, [pc, #172]	; (8012368 <HAL_TIM_PeriodElapsedCallback+0x528>)
 80122ba:	781b      	ldrb	r3, [r3, #0]
 80122bc:	b2db      	uxtb	r3, r3
 80122be:	2b01      	cmp	r3, #1
 80122c0:	d102      	bne.n	80122c8 <HAL_TIM_PeriodElapsedCallback+0x488>
				{
					key3_press_state = 0; // обнуление состояния длинного нажатия на кнопку 3
 80122c2:	4b29      	ldr	r3, [pc, #164]	; (8012368 <HAL_TIM_PeriodElapsedCallback+0x528>)
 80122c4:	2200      	movs	r2, #0
 80122c6:	701a      	strb	r2, [r3, #0]

		//----------------------------------------------------------------------------------

				//----программа обработки кнопки 4----------------------------------------------

						if( HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_10) == GPIO_PIN_RESET)
 80122c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80122cc:	4824      	ldr	r0, [pc, #144]	; (8012360 <HAL_TIM_PeriodElapsedCallback+0x520>)
 80122ce:	f002 fac7 	bl	8014860 <HAL_GPIO_ReadPin>
 80122d2:	4603      	mov	r3, r0
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	d11e      	bne.n	8012316 <HAL_TIM_PeriodElapsedCallback+0x4d6>
						{
							if(key4_state<2000)
 80122d8:	4b25      	ldr	r3, [pc, #148]	; (8012370 <HAL_TIM_PeriodElapsedCallback+0x530>)
 80122da:	881b      	ldrh	r3, [r3, #0]
 80122dc:	b29b      	uxth	r3, r3
 80122de:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80122e2:	d207      	bcs.n	80122f4 <HAL_TIM_PeriodElapsedCallback+0x4b4>
							{

								key4_state++;
 80122e4:	4b22      	ldr	r3, [pc, #136]	; (8012370 <HAL_TIM_PeriodElapsedCallback+0x530>)
 80122e6:	881b      	ldrh	r3, [r3, #0]
 80122e8:	b29b      	uxth	r3, r3
 80122ea:	3301      	adds	r3, #1
 80122ec:	b29a      	uxth	r2, r3
 80122ee:	4b20      	ldr	r3, [pc, #128]	; (8012370 <HAL_TIM_PeriodElapsedCallback+0x530>)
 80122f0:	801a      	strh	r2, [r3, #0]
 80122f2:	e04c      	b.n	801238e <HAL_TIM_PeriodElapsedCallback+0x54e>

							}
							else if(key4_state==2000)
 80122f4:	4b1e      	ldr	r3, [pc, #120]	; (8012370 <HAL_TIM_PeriodElapsedCallback+0x530>)
 80122f6:	881b      	ldrh	r3, [r3, #0]
 80122f8:	b29b      	uxth	r3, r3
 80122fa:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80122fe:	d146      	bne.n	801238e <HAL_TIM_PeriodElapsedCallback+0x54e>
							{
								key4_state++;
 8012300:	4b1b      	ldr	r3, [pc, #108]	; (8012370 <HAL_TIM_PeriodElapsedCallback+0x530>)
 8012302:	881b      	ldrh	r3, [r3, #0]
 8012304:	b29b      	uxth	r3, r3
 8012306:	3301      	adds	r3, #1
 8012308:	b29a      	uxth	r2, r3
 801230a:	4b19      	ldr	r3, [pc, #100]	; (8012370 <HAL_TIM_PeriodElapsedCallback+0x530>)
 801230c:	801a      	strh	r2, [r3, #0]
								key4_press_state = 1;
 801230e:	4b19      	ldr	r3, [pc, #100]	; (8012374 <HAL_TIM_PeriodElapsedCallback+0x534>)
 8012310:	2201      	movs	r2, #1
 8012312:	701a      	strb	r2, [r3, #0]
 8012314:	e03b      	b.n	801238e <HAL_TIM_PeriodElapsedCallback+0x54e>
							}
						}
						else
						{
							if( (key4_state>5)&&(key4_state<2000) )
 8012316:	4b16      	ldr	r3, [pc, #88]	; (8012370 <HAL_TIM_PeriodElapsedCallback+0x530>)
 8012318:	881b      	ldrh	r3, [r3, #0]
 801231a:	b29b      	uxth	r3, r3
 801231c:	2b05      	cmp	r3, #5
 801231e:	d92d      	bls.n	801237c <HAL_TIM_PeriodElapsedCallback+0x53c>
 8012320:	4b13      	ldr	r3, [pc, #76]	; (8012370 <HAL_TIM_PeriodElapsedCallback+0x530>)
 8012322:	881b      	ldrh	r3, [r3, #0]
 8012324:	b29b      	uxth	r3, r3
 8012326:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 801232a:	d227      	bcs.n	801237c <HAL_TIM_PeriodElapsedCallback+0x53c>
							{
								key4_state = 0;
 801232c:	4b10      	ldr	r3, [pc, #64]	; (8012370 <HAL_TIM_PeriodElapsedCallback+0x530>)
 801232e:	2200      	movs	r2, #0
 8012330:	801a      	strh	r2, [r3, #0]
								key4_on_state = 1;
 8012332:	4b11      	ldr	r3, [pc, #68]	; (8012378 <HAL_TIM_PeriodElapsedCallback+0x538>)
 8012334:	2201      	movs	r2, #1
 8012336:	701a      	strb	r2, [r3, #0]
 8012338:	e029      	b.n	801238e <HAL_TIM_PeriodElapsedCallback+0x54e>
 801233a:	bf00      	nop
 801233c:	2000087c 	.word	0x2000087c
 8012340:	20000002 	.word	0x20000002
 8012344:	20000889 	.word	0x20000889
 8012348:	2000087e 	.word	0x2000087e
 801234c:	20000004 	.word	0x20000004
 8012350:	20008010 	.word	0x20008010
 8012354:	20008012 	.word	0x20008012
 8012358:	20008014 	.word	0x20008014
 801235c:	2000087f 	.word	0x2000087f
 8012360:	40021000 	.word	0x40021000
 8012364:	20000880 	.word	0x20000880
 8012368:	20000883 	.word	0x20000883
 801236c:	20000882 	.word	0x20000882
 8012370:	20000884 	.word	0x20000884
 8012374:	20000887 	.word	0x20000887
 8012378:	20000886 	.word	0x20000886
							}
							else if(key4_state>=2000)
 801237c:	4b34      	ldr	r3, [pc, #208]	; (8012450 <HAL_TIM_PeriodElapsedCallback+0x610>)
 801237e:	881b      	ldrh	r3, [r3, #0]
 8012380:	b29b      	uxth	r3, r3
 8012382:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8012386:	d302      	bcc.n	801238e <HAL_TIM_PeriodElapsedCallback+0x54e>
							{
								key4_state = 0;
 8012388:	4b31      	ldr	r3, [pc, #196]	; (8012450 <HAL_TIM_PeriodElapsedCallback+0x610>)
 801238a:	2200      	movs	r2, #0
 801238c:	801a      	strh	r2, [r3, #0]
							}
						}

						if(key4_on_state == 1) // обработчик короткого нажатия кнопки 4
 801238e:	4b31      	ldr	r3, [pc, #196]	; (8012454 <HAL_TIM_PeriodElapsedCallback+0x614>)
 8012390:	781b      	ldrb	r3, [r3, #0]
 8012392:	b2db      	uxtb	r3, r3
 8012394:	2b01      	cmp	r3, #1
 8012396:	d111      	bne.n	80123bc <HAL_TIM_PeriodElapsedCallback+0x57c>
						{
							key4_on_state = 0; // обнуление состояния короткого нажатия на кнопку 4
 8012398:	4b2e      	ldr	r3, [pc, #184]	; (8012454 <HAL_TIM_PeriodElapsedCallback+0x614>)
 801239a:	2200      	movs	r2, #0
 801239c:	701a      	strb	r2, [r3, #0]

							reset_display_time_state = 0;
 801239e:	4b2e      	ldr	r3, [pc, #184]	; (8012458 <HAL_TIM_PeriodElapsedCallback+0x618>)
 80123a0:	2200      	movs	r2, #0
 80123a2:	801a      	strh	r2, [r3, #0]

							if(register_content_menu_state == 0)
 80123a4:	4b2d      	ldr	r3, [pc, #180]	; (801245c <HAL_TIM_PeriodElapsedCallback+0x61c>)
 80123a6:	881b      	ldrh	r3, [r3, #0]
 80123a8:	b29b      	uxth	r3, r3
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	d106      	bne.n	80123bc <HAL_TIM_PeriodElapsedCallback+0x57c>
							{
								register_content_menu_state++;
 80123ae:	4b2b      	ldr	r3, [pc, #172]	; (801245c <HAL_TIM_PeriodElapsedCallback+0x61c>)
 80123b0:	881b      	ldrh	r3, [r3, #0]
 80123b2:	b29b      	uxth	r3, r3
 80123b4:	3301      	adds	r3, #1
 80123b6:	b29a      	uxth	r2, r3
 80123b8:	4b28      	ldr	r3, [pc, #160]	; (801245c <HAL_TIM_PeriodElapsedCallback+0x61c>)
 80123ba:	801a      	strh	r2, [r3, #0]
								//reset_display_time_state = 0;
							}
						}
						if(key4_press_state == 1) // обработчик длительного нажатия кнопки 4
 80123bc:	4b28      	ldr	r3, [pc, #160]	; (8012460 <HAL_TIM_PeriodElapsedCallback+0x620>)
 80123be:	781b      	ldrb	r3, [r3, #0]
 80123c0:	b2db      	uxtb	r3, r3
 80123c2:	2b01      	cmp	r3, #1
 80123c4:	d11f      	bne.n	8012406 <HAL_TIM_PeriodElapsedCallback+0x5c6>
						{
							key4_press_state = 0; // обнуление состояния длинного нажатия на кнопку 4
 80123c6:	4b26      	ldr	r3, [pc, #152]	; (8012460 <HAL_TIM_PeriodElapsedCallback+0x620>)
 80123c8:	2200      	movs	r2, #0
 80123ca:	701a      	strb	r2, [r3, #0]

							if( (register_content_menu_state == 1) && (register_menu_state >= Y1) && (register_menu_state <= MAX_B_NUMBER) )
 80123cc:	4b23      	ldr	r3, [pc, #140]	; (801245c <HAL_TIM_PeriodElapsedCallback+0x61c>)
 80123ce:	881b      	ldrh	r3, [r3, #0]
 80123d0:	b29b      	uxth	r3, r3
 80123d2:	2b01      	cmp	r3, #1
 80123d4:	d10f      	bne.n	80123f6 <HAL_TIM_PeriodElapsedCallback+0x5b6>
 80123d6:	4b23      	ldr	r3, [pc, #140]	; (8012464 <HAL_TIM_PeriodElapsedCallback+0x624>)
 80123d8:	881b      	ldrh	r3, [r3, #0]
 80123da:	b29b      	uxth	r3, r3
 80123dc:	2b44      	cmp	r3, #68	; 0x44
 80123de:	d90a      	bls.n	80123f6 <HAL_TIM_PeriodElapsedCallback+0x5b6>
 80123e0:	4b20      	ldr	r3, [pc, #128]	; (8012464 <HAL_TIM_PeriodElapsedCallback+0x624>)
 80123e2:	881b      	ldrh	r3, [r3, #0]
 80123e4:	b29b      	uxth	r3, r3
 80123e6:	f240 629b 	movw	r2, #1691	; 0x69b
 80123ea:	4293      	cmp	r3, r2
 80123ec:	d803      	bhi.n	80123f6 <HAL_TIM_PeriodElapsedCallback+0x5b6>
							{
								register_content_menu_state = 2;
 80123ee:	4b1b      	ldr	r3, [pc, #108]	; (801245c <HAL_TIM_PeriodElapsedCallback+0x61c>)
 80123f0:	2202      	movs	r2, #2
 80123f2:	801a      	strh	r2, [r3, #0]
 80123f4:	e007      	b.n	8012406 <HAL_TIM_PeriodElapsedCallback+0x5c6>
								//LED_VD4_ON();
							}

							else if( register_content_menu_state == 2 )
 80123f6:	4b19      	ldr	r3, [pc, #100]	; (801245c <HAL_TIM_PeriodElapsedCallback+0x61c>)
 80123f8:	881b      	ldrh	r3, [r3, #0]
 80123fa:	b29b      	uxth	r3, r3
 80123fc:	2b02      	cmp	r3, #2
 80123fe:	d102      	bne.n	8012406 <HAL_TIM_PeriodElapsedCallback+0x5c6>
							{
								//register_content_menu_state = 1;
								control_register_save_state = 1;
 8012400:	4b19      	ldr	r3, [pc, #100]	; (8012468 <HAL_TIM_PeriodElapsedCallback+0x628>)
 8012402:	2201      	movs	r2, #1
 8012404:	701a      	strb	r2, [r3, #0]
							}
						}

				//----------------------------------------------------------------------------------

		if( reset_display_time_state < 30000)
 8012406:	4b14      	ldr	r3, [pc, #80]	; (8012458 <HAL_TIM_PeriodElapsedCallback+0x618>)
 8012408:	881b      	ldrh	r3, [r3, #0]
 801240a:	b29b      	uxth	r3, r3
 801240c:	f247 522f 	movw	r2, #29999	; 0x752f
 8012410:	4293      	cmp	r3, r2
 8012412:	d807      	bhi.n	8012424 <HAL_TIM_PeriodElapsedCallback+0x5e4>
		{
			reset_display_time_state++;
 8012414:	4b10      	ldr	r3, [pc, #64]	; (8012458 <HAL_TIM_PeriodElapsedCallback+0x618>)
 8012416:	881b      	ldrh	r3, [r3, #0]
 8012418:	b29b      	uxth	r3, r3
 801241a:	3301      	adds	r3, #1
 801241c:	b29a      	uxth	r2, r3
 801241e:	4b0e      	ldr	r3, [pc, #56]	; (8012458 <HAL_TIM_PeriodElapsedCallback+0x618>)
 8012420:	801a      	strh	r2, [r3, #0]


	}

  /* USER CODE END Callback 1 */
}
 8012422:	e010      	b.n	8012446 <HAL_TIM_PeriodElapsedCallback+0x606>
		else if( reset_display_time_state == 30000)
 8012424:	4b0c      	ldr	r3, [pc, #48]	; (8012458 <HAL_TIM_PeriodElapsedCallback+0x618>)
 8012426:	881b      	ldrh	r3, [r3, #0]
 8012428:	b29b      	uxth	r3, r3
 801242a:	f247 5230 	movw	r2, #30000	; 0x7530
 801242e:	4293      	cmp	r3, r2
 8012430:	d109      	bne.n	8012446 <HAL_TIM_PeriodElapsedCallback+0x606>
			register_content_menu_state = 0;
 8012432:	4b0a      	ldr	r3, [pc, #40]	; (801245c <HAL_TIM_PeriodElapsedCallback+0x61c>)
 8012434:	2200      	movs	r2, #0
 8012436:	801a      	strh	r2, [r3, #0]
			register_menu_state = 0;
 8012438:	4b0a      	ldr	r3, [pc, #40]	; (8012464 <HAL_TIM_PeriodElapsedCallback+0x624>)
 801243a:	2200      	movs	r2, #0
 801243c:	801a      	strh	r2, [r3, #0]
			reset_display_time_state = 30001;
 801243e:	4b06      	ldr	r3, [pc, #24]	; (8012458 <HAL_TIM_PeriodElapsedCallback+0x618>)
 8012440:	f247 5231 	movw	r2, #30001	; 0x7531
 8012444:	801a      	strh	r2, [r3, #0]
}
 8012446:	bf00      	nop
 8012448:	3708      	adds	r7, #8
 801244a:	46bd      	mov	sp, r7
 801244c:	bd80      	pop	{r7, pc}
 801244e:	bf00      	nop
 8012450:	20000884 	.word	0x20000884
 8012454:	20000886 	.word	0x20000886
 8012458:	20000004 	.word	0x20000004
 801245c:	20008012 	.word	0x20008012
 8012460:	20000887 	.word	0x20000887
 8012464:	20008010 	.word	0x20008010
 8012468:	20008016 	.word	0x20008016

0801246c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 801246c:	b580      	push	{r7, lr}
 801246e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */

	NVIC_SystemReset();
 8012470:	f7fe fd22 	bl	8010eb8 <__NVIC_SystemReset>

08012474 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8012474:	b580      	push	{r7, lr}
 8012476:	b082      	sub	sp, #8
 8012478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801247a:	2300      	movs	r3, #0
 801247c:	607b      	str	r3, [r7, #4]
 801247e:	4b12      	ldr	r3, [pc, #72]	; (80124c8 <HAL_MspInit+0x54>)
 8012480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012482:	4a11      	ldr	r2, [pc, #68]	; (80124c8 <HAL_MspInit+0x54>)
 8012484:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8012488:	6453      	str	r3, [r2, #68]	; 0x44
 801248a:	4b0f      	ldr	r3, [pc, #60]	; (80124c8 <HAL_MspInit+0x54>)
 801248c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801248e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012492:	607b      	str	r3, [r7, #4]
 8012494:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8012496:	2300      	movs	r3, #0
 8012498:	603b      	str	r3, [r7, #0]
 801249a:	4b0b      	ldr	r3, [pc, #44]	; (80124c8 <HAL_MspInit+0x54>)
 801249c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801249e:	4a0a      	ldr	r2, [pc, #40]	; (80124c8 <HAL_MspInit+0x54>)
 80124a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80124a4:	6413      	str	r3, [r2, #64]	; 0x40
 80124a6:	4b08      	ldr	r3, [pc, #32]	; (80124c8 <HAL_MspInit+0x54>)
 80124a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80124aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80124ae:	603b      	str	r3, [r7, #0]
 80124b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80124b2:	2200      	movs	r2, #0
 80124b4:	210f      	movs	r1, #15
 80124b6:	f06f 0001 	mvn.w	r0, #1
 80124ba:	f001 fb0d 	bl	8013ad8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80124be:	bf00      	nop
 80124c0:	3708      	adds	r7, #8
 80124c2:	46bd      	mov	sp, r7
 80124c4:	bd80      	pop	{r7, pc}
 80124c6:	bf00      	nop
 80124c8:	40023800 	.word	0x40023800

080124cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80124cc:	b580      	push	{r7, lr}
 80124ce:	b08a      	sub	sp, #40	; 0x28
 80124d0:	af00      	add	r7, sp, #0
 80124d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80124d4:	f107 0314 	add.w	r3, r7, #20
 80124d8:	2200      	movs	r2, #0
 80124da:	601a      	str	r2, [r3, #0]
 80124dc:	605a      	str	r2, [r3, #4]
 80124de:	609a      	str	r2, [r3, #8]
 80124e0:	60da      	str	r2, [r3, #12]
 80124e2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	681b      	ldr	r3, [r3, #0]
 80124e8:	4a32      	ldr	r2, [pc, #200]	; (80125b4 <HAL_ADC_MspInit+0xe8>)
 80124ea:	4293      	cmp	r3, r2
 80124ec:	d15e      	bne.n	80125ac <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80124ee:	2300      	movs	r3, #0
 80124f0:	613b      	str	r3, [r7, #16]
 80124f2:	4b31      	ldr	r3, [pc, #196]	; (80125b8 <HAL_ADC_MspInit+0xec>)
 80124f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80124f6:	4a30      	ldr	r2, [pc, #192]	; (80125b8 <HAL_ADC_MspInit+0xec>)
 80124f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80124fc:	6453      	str	r3, [r2, #68]	; 0x44
 80124fe:	4b2e      	ldr	r3, [pc, #184]	; (80125b8 <HAL_ADC_MspInit+0xec>)
 8012500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012506:	613b      	str	r3, [r7, #16]
 8012508:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 801250a:	2300      	movs	r3, #0
 801250c:	60fb      	str	r3, [r7, #12]
 801250e:	4b2a      	ldr	r3, [pc, #168]	; (80125b8 <HAL_ADC_MspInit+0xec>)
 8012510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012512:	4a29      	ldr	r2, [pc, #164]	; (80125b8 <HAL_ADC_MspInit+0xec>)
 8012514:	f043 0304 	orr.w	r3, r3, #4
 8012518:	6313      	str	r3, [r2, #48]	; 0x30
 801251a:	4b27      	ldr	r3, [pc, #156]	; (80125b8 <HAL_ADC_MspInit+0xec>)
 801251c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801251e:	f003 0304 	and.w	r3, r3, #4
 8012522:	60fb      	str	r3, [r7, #12]
 8012524:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8012526:	230d      	movs	r3, #13
 8012528:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 801252a:	2303      	movs	r3, #3
 801252c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801252e:	2300      	movs	r3, #0
 8012530:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8012532:	f107 0314 	add.w	r3, r7, #20
 8012536:	4619      	mov	r1, r3
 8012538:	4820      	ldr	r0, [pc, #128]	; (80125bc <HAL_ADC_MspInit+0xf0>)
 801253a:	f001 fef9 	bl	8014330 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 801253e:	4b20      	ldr	r3, [pc, #128]	; (80125c0 <HAL_ADC_MspInit+0xf4>)
 8012540:	4a20      	ldr	r2, [pc, #128]	; (80125c4 <HAL_ADC_MspInit+0xf8>)
 8012542:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8012544:	4b1e      	ldr	r3, [pc, #120]	; (80125c0 <HAL_ADC_MspInit+0xf4>)
 8012546:	2200      	movs	r2, #0
 8012548:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 801254a:	4b1d      	ldr	r3, [pc, #116]	; (80125c0 <HAL_ADC_MspInit+0xf4>)
 801254c:	2200      	movs	r2, #0
 801254e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8012550:	4b1b      	ldr	r3, [pc, #108]	; (80125c0 <HAL_ADC_MspInit+0xf4>)
 8012552:	2200      	movs	r2, #0
 8012554:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8012556:	4b1a      	ldr	r3, [pc, #104]	; (80125c0 <HAL_ADC_MspInit+0xf4>)
 8012558:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801255c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 801255e:	4b18      	ldr	r3, [pc, #96]	; (80125c0 <HAL_ADC_MspInit+0xf4>)
 8012560:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012564:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8012566:	4b16      	ldr	r3, [pc, #88]	; (80125c0 <HAL_ADC_MspInit+0xf4>)
 8012568:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801256c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 801256e:	4b14      	ldr	r3, [pc, #80]	; (80125c0 <HAL_ADC_MspInit+0xf4>)
 8012570:	2200      	movs	r2, #0
 8012572:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8012574:	4b12      	ldr	r3, [pc, #72]	; (80125c0 <HAL_ADC_MspInit+0xf4>)
 8012576:	2200      	movs	r2, #0
 8012578:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 801257a:	4b11      	ldr	r3, [pc, #68]	; (80125c0 <HAL_ADC_MspInit+0xf4>)
 801257c:	2200      	movs	r2, #0
 801257e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8012580:	480f      	ldr	r0, [pc, #60]	; (80125c0 <HAL_ADC_MspInit+0xf4>)
 8012582:	f001 fad3 	bl	8013b2c <HAL_DMA_Init>
 8012586:	4603      	mov	r3, r0
 8012588:	2b00      	cmp	r3, #0
 801258a:	d001      	beq.n	8012590 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 801258c:	f7ff ff6e 	bl	801246c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	4a0b      	ldr	r2, [pc, #44]	; (80125c0 <HAL_ADC_MspInit+0xf4>)
 8012594:	639a      	str	r2, [r3, #56]	; 0x38
 8012596:	4a0a      	ldr	r2, [pc, #40]	; (80125c0 <HAL_ADC_MspInit+0xf4>)
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 801259c:	2200      	movs	r2, #0
 801259e:	2105      	movs	r1, #5
 80125a0:	2012      	movs	r0, #18
 80125a2:	f001 fa99 	bl	8013ad8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80125a6:	2012      	movs	r0, #18
 80125a8:	f001 fab2 	bl	8013b10 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80125ac:	bf00      	nop
 80125ae:	3728      	adds	r7, #40	; 0x28
 80125b0:	46bd      	mov	sp, r7
 80125b2:	bd80      	pop	{r7, pc}
 80125b4:	40012000 	.word	0x40012000
 80125b8:	40023800 	.word	0x40023800
 80125bc:	40020800 	.word	0x40020800
 80125c0:	20009b14 	.word	0x20009b14
 80125c4:	40026410 	.word	0x40026410

080125c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80125c8:	b580      	push	{r7, lr}
 80125ca:	b08a      	sub	sp, #40	; 0x28
 80125cc:	af00      	add	r7, sp, #0
 80125ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80125d0:	f107 0314 	add.w	r3, r7, #20
 80125d4:	2200      	movs	r2, #0
 80125d6:	601a      	str	r2, [r3, #0]
 80125d8:	605a      	str	r2, [r3, #4]
 80125da:	609a      	str	r2, [r3, #8]
 80125dc:	60da      	str	r2, [r3, #12]
 80125de:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	681b      	ldr	r3, [r3, #0]
 80125e4:	4a19      	ldr	r2, [pc, #100]	; (801264c <HAL_I2C_MspInit+0x84>)
 80125e6:	4293      	cmp	r3, r2
 80125e8:	d12c      	bne.n	8012644 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80125ea:	2300      	movs	r3, #0
 80125ec:	613b      	str	r3, [r7, #16]
 80125ee:	4b18      	ldr	r3, [pc, #96]	; (8012650 <HAL_I2C_MspInit+0x88>)
 80125f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80125f2:	4a17      	ldr	r2, [pc, #92]	; (8012650 <HAL_I2C_MspInit+0x88>)
 80125f4:	f043 0302 	orr.w	r3, r3, #2
 80125f8:	6313      	str	r3, [r2, #48]	; 0x30
 80125fa:	4b15      	ldr	r3, [pc, #84]	; (8012650 <HAL_I2C_MspInit+0x88>)
 80125fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80125fe:	f003 0302 	and.w	r3, r3, #2
 8012602:	613b      	str	r3, [r7, #16]
 8012604:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8012606:	f44f 7340 	mov.w	r3, #768	; 0x300
 801260a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 801260c:	2312      	movs	r3, #18
 801260e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012610:	2300      	movs	r3, #0
 8012612:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012614:	2303      	movs	r3, #3
 8012616:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8012618:	2304      	movs	r3, #4
 801261a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801261c:	f107 0314 	add.w	r3, r7, #20
 8012620:	4619      	mov	r1, r3
 8012622:	480c      	ldr	r0, [pc, #48]	; (8012654 <HAL_I2C_MspInit+0x8c>)
 8012624:	f001 fe84 	bl	8014330 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8012628:	2300      	movs	r3, #0
 801262a:	60fb      	str	r3, [r7, #12]
 801262c:	4b08      	ldr	r3, [pc, #32]	; (8012650 <HAL_I2C_MspInit+0x88>)
 801262e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012630:	4a07      	ldr	r2, [pc, #28]	; (8012650 <HAL_I2C_MspInit+0x88>)
 8012632:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8012636:	6413      	str	r3, [r2, #64]	; 0x40
 8012638:	4b05      	ldr	r3, [pc, #20]	; (8012650 <HAL_I2C_MspInit+0x88>)
 801263a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801263c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012640:	60fb      	str	r3, [r7, #12]
 8012642:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8012644:	bf00      	nop
 8012646:	3728      	adds	r7, #40	; 0x28
 8012648:	46bd      	mov	sp, r7
 801264a:	bd80      	pop	{r7, pc}
 801264c:	40005400 	.word	0x40005400
 8012650:	40023800 	.word	0x40023800
 8012654:	40020400 	.word	0x40020400

08012658 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8012658:	b580      	push	{r7, lr}
 801265a:	b082      	sub	sp, #8
 801265c:	af00      	add	r7, sp, #0
 801265e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	681b      	ldr	r3, [r3, #0]
 8012664:	4a0b      	ldr	r2, [pc, #44]	; (8012694 <HAL_I2C_MspDeInit+0x3c>)
 8012666:	4293      	cmp	r3, r2
 8012668:	d10f      	bne.n	801268a <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 801266a:	4b0b      	ldr	r3, [pc, #44]	; (8012698 <HAL_I2C_MspDeInit+0x40>)
 801266c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801266e:	4a0a      	ldr	r2, [pc, #40]	; (8012698 <HAL_I2C_MspDeInit+0x40>)
 8012670:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8012674:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8012676:	f44f 7180 	mov.w	r1, #256	; 0x100
 801267a:	4808      	ldr	r0, [pc, #32]	; (801269c <HAL_I2C_MspDeInit+0x44>)
 801267c:	f001 fff4 	bl	8014668 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8012680:	f44f 7100 	mov.w	r1, #512	; 0x200
 8012684:	4805      	ldr	r0, [pc, #20]	; (801269c <HAL_I2C_MspDeInit+0x44>)
 8012686:	f001 ffef 	bl	8014668 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 801268a:	bf00      	nop
 801268c:	3708      	adds	r7, #8
 801268e:	46bd      	mov	sp, r7
 8012690:	bd80      	pop	{r7, pc}
 8012692:	bf00      	nop
 8012694:	40005400 	.word	0x40005400
 8012698:	40023800 	.word	0x40023800
 801269c:	40020400 	.word	0x40020400

080126a0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80126a0:	b580      	push	{r7, lr}
 80126a2:	b086      	sub	sp, #24
 80126a4:	af00      	add	r7, sp, #0
 80126a6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80126a8:	f107 0308 	add.w	r3, r7, #8
 80126ac:	2200      	movs	r2, #0
 80126ae:	601a      	str	r2, [r3, #0]
 80126b0:	605a      	str	r2, [r3, #4]
 80126b2:	609a      	str	r2, [r3, #8]
 80126b4:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	681b      	ldr	r3, [r3, #0]
 80126ba:	4a0c      	ldr	r2, [pc, #48]	; (80126ec <HAL_RTC_MspInit+0x4c>)
 80126bc:	4293      	cmp	r3, r2
 80126be:	d111      	bne.n	80126e4 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80126c0:	2302      	movs	r3, #2
 80126c2:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80126c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80126c8:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80126ca:	f107 0308 	add.w	r3, r7, #8
 80126ce:	4618      	mov	r0, r3
 80126d0:	f003 fd52 	bl	8016178 <HAL_RCCEx_PeriphCLKConfig>
 80126d4:	4603      	mov	r3, r0
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	d001      	beq.n	80126de <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80126da:	f7ff fec7 	bl	801246c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80126de:	4b04      	ldr	r3, [pc, #16]	; (80126f0 <HAL_RTC_MspInit+0x50>)
 80126e0:	2201      	movs	r2, #1
 80126e2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80126e4:	bf00      	nop
 80126e6:	3718      	adds	r7, #24
 80126e8:	46bd      	mov	sp, r7
 80126ea:	bd80      	pop	{r7, pc}
 80126ec:	40002800 	.word	0x40002800
 80126f0:	42470e3c 	.word	0x42470e3c

080126f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80126f4:	b580      	push	{r7, lr}
 80126f6:	b08c      	sub	sp, #48	; 0x30
 80126f8:	af00      	add	r7, sp, #0
 80126fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80126fc:	f107 031c 	add.w	r3, r7, #28
 8012700:	2200      	movs	r2, #0
 8012702:	601a      	str	r2, [r3, #0]
 8012704:	605a      	str	r2, [r3, #4]
 8012706:	609a      	str	r2, [r3, #8]
 8012708:	60da      	str	r2, [r3, #12]
 801270a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	681b      	ldr	r3, [r3, #0]
 8012710:	4a33      	ldr	r2, [pc, #204]	; (80127e0 <HAL_SPI_MspInit+0xec>)
 8012712:	4293      	cmp	r3, r2
 8012714:	d12d      	bne.n	8012772 <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8012716:	2300      	movs	r3, #0
 8012718:	61bb      	str	r3, [r7, #24]
 801271a:	4b32      	ldr	r3, [pc, #200]	; (80127e4 <HAL_SPI_MspInit+0xf0>)
 801271c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801271e:	4a31      	ldr	r2, [pc, #196]	; (80127e4 <HAL_SPI_MspInit+0xf0>)
 8012720:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8012724:	6413      	str	r3, [r2, #64]	; 0x40
 8012726:	4b2f      	ldr	r3, [pc, #188]	; (80127e4 <HAL_SPI_MspInit+0xf0>)
 8012728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801272a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801272e:	61bb      	str	r3, [r7, #24]
 8012730:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8012732:	2300      	movs	r3, #0
 8012734:	617b      	str	r3, [r7, #20]
 8012736:	4b2b      	ldr	r3, [pc, #172]	; (80127e4 <HAL_SPI_MspInit+0xf0>)
 8012738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801273a:	4a2a      	ldr	r2, [pc, #168]	; (80127e4 <HAL_SPI_MspInit+0xf0>)
 801273c:	f043 0302 	orr.w	r3, r3, #2
 8012740:	6313      	str	r3, [r2, #48]	; 0x30
 8012742:	4b28      	ldr	r3, [pc, #160]	; (80127e4 <HAL_SPI_MspInit+0xf0>)
 8012744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012746:	f003 0302 	and.w	r3, r3, #2
 801274a:	617b      	str	r3, [r7, #20]
 801274c:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 801274e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8012752:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012754:	2302      	movs	r3, #2
 8012756:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012758:	2300      	movs	r3, #0
 801275a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801275c:	2303      	movs	r3, #3
 801275e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8012760:	2305      	movs	r3, #5
 8012762:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8012764:	f107 031c 	add.w	r3, r7, #28
 8012768:	4619      	mov	r1, r3
 801276a:	481f      	ldr	r0, [pc, #124]	; (80127e8 <HAL_SPI_MspInit+0xf4>)
 801276c:	f001 fde0 	bl	8014330 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8012770:	e031      	b.n	80127d6 <HAL_SPI_MspInit+0xe2>
  else if(hspi->Instance==SPI3)
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	681b      	ldr	r3, [r3, #0]
 8012776:	4a1d      	ldr	r2, [pc, #116]	; (80127ec <HAL_SPI_MspInit+0xf8>)
 8012778:	4293      	cmp	r3, r2
 801277a:	d12c      	bne.n	80127d6 <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 801277c:	2300      	movs	r3, #0
 801277e:	613b      	str	r3, [r7, #16]
 8012780:	4b18      	ldr	r3, [pc, #96]	; (80127e4 <HAL_SPI_MspInit+0xf0>)
 8012782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012784:	4a17      	ldr	r2, [pc, #92]	; (80127e4 <HAL_SPI_MspInit+0xf0>)
 8012786:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801278a:	6413      	str	r3, [r2, #64]	; 0x40
 801278c:	4b15      	ldr	r3, [pc, #84]	; (80127e4 <HAL_SPI_MspInit+0xf0>)
 801278e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012790:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012794:	613b      	str	r3, [r7, #16]
 8012796:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8012798:	2300      	movs	r3, #0
 801279a:	60fb      	str	r3, [r7, #12]
 801279c:	4b11      	ldr	r3, [pc, #68]	; (80127e4 <HAL_SPI_MspInit+0xf0>)
 801279e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80127a0:	4a10      	ldr	r2, [pc, #64]	; (80127e4 <HAL_SPI_MspInit+0xf0>)
 80127a2:	f043 0304 	orr.w	r3, r3, #4
 80127a6:	6313      	str	r3, [r2, #48]	; 0x30
 80127a8:	4b0e      	ldr	r3, [pc, #56]	; (80127e4 <HAL_SPI_MspInit+0xf0>)
 80127aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80127ac:	f003 0304 	and.w	r3, r3, #4
 80127b0:	60fb      	str	r3, [r7, #12]
 80127b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 80127b4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80127b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80127ba:	2302      	movs	r3, #2
 80127bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80127be:	2300      	movs	r3, #0
 80127c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80127c2:	2303      	movs	r3, #3
 80127c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80127c6:	2306      	movs	r3, #6
 80127c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80127ca:	f107 031c 	add.w	r3, r7, #28
 80127ce:	4619      	mov	r1, r3
 80127d0:	4807      	ldr	r0, [pc, #28]	; (80127f0 <HAL_SPI_MspInit+0xfc>)
 80127d2:	f001 fdad 	bl	8014330 <HAL_GPIO_Init>
}
 80127d6:	bf00      	nop
 80127d8:	3730      	adds	r7, #48	; 0x30
 80127da:	46bd      	mov	sp, r7
 80127dc:	bd80      	pop	{r7, pc}
 80127de:	bf00      	nop
 80127e0:	40003800 	.word	0x40003800
 80127e4:	40023800 	.word	0x40023800
 80127e8:	40020400 	.word	0x40020400
 80127ec:	40003c00 	.word	0x40003c00
 80127f0:	40020800 	.word	0x40020800

080127f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80127f4:	b580      	push	{r7, lr}
 80127f6:	b084      	sub	sp, #16
 80127f8:	af00      	add	r7, sp, #0
 80127fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	681b      	ldr	r3, [r3, #0]
 8012800:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012804:	d116      	bne.n	8012834 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8012806:	2300      	movs	r3, #0
 8012808:	60fb      	str	r3, [r7, #12]
 801280a:	4b1a      	ldr	r3, [pc, #104]	; (8012874 <HAL_TIM_Base_MspInit+0x80>)
 801280c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801280e:	4a19      	ldr	r2, [pc, #100]	; (8012874 <HAL_TIM_Base_MspInit+0x80>)
 8012810:	f043 0301 	orr.w	r3, r3, #1
 8012814:	6413      	str	r3, [r2, #64]	; 0x40
 8012816:	4b17      	ldr	r3, [pc, #92]	; (8012874 <HAL_TIM_Base_MspInit+0x80>)
 8012818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801281a:	f003 0301 	and.w	r3, r3, #1
 801281e:	60fb      	str	r3, [r7, #12]
 8012820:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8012822:	2200      	movs	r2, #0
 8012824:	2105      	movs	r1, #5
 8012826:	201c      	movs	r0, #28
 8012828:	f001 f956 	bl	8013ad8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 801282c:	201c      	movs	r0, #28
 801282e:	f001 f96f 	bl	8013b10 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8012832:	e01a      	b.n	801286a <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	4a0f      	ldr	r2, [pc, #60]	; (8012878 <HAL_TIM_Base_MspInit+0x84>)
 801283a:	4293      	cmp	r3, r2
 801283c:	d115      	bne.n	801286a <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 801283e:	2300      	movs	r3, #0
 8012840:	60bb      	str	r3, [r7, #8]
 8012842:	4b0c      	ldr	r3, [pc, #48]	; (8012874 <HAL_TIM_Base_MspInit+0x80>)
 8012844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012846:	4a0b      	ldr	r2, [pc, #44]	; (8012874 <HAL_TIM_Base_MspInit+0x80>)
 8012848:	f043 0302 	orr.w	r3, r3, #2
 801284c:	6413      	str	r3, [r2, #64]	; 0x40
 801284e:	4b09      	ldr	r3, [pc, #36]	; (8012874 <HAL_TIM_Base_MspInit+0x80>)
 8012850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012852:	f003 0302 	and.w	r3, r3, #2
 8012856:	60bb      	str	r3, [r7, #8]
 8012858:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 801285a:	2200      	movs	r2, #0
 801285c:	2105      	movs	r1, #5
 801285e:	201d      	movs	r0, #29
 8012860:	f001 f93a 	bl	8013ad8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8012864:	201d      	movs	r0, #29
 8012866:	f001 f953 	bl	8013b10 <HAL_NVIC_EnableIRQ>
}
 801286a:	bf00      	nop
 801286c:	3710      	adds	r7, #16
 801286e:	46bd      	mov	sp, r7
 8012870:	bd80      	pop	{r7, pc}
 8012872:	bf00      	nop
 8012874:	40023800 	.word	0x40023800
 8012878:	40000400 	.word	0x40000400

0801287c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 801287c:	b580      	push	{r7, lr}
 801287e:	b08e      	sub	sp, #56	; 0x38
 8012880:	af00      	add	r7, sp, #0
 8012882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012884:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012888:	2200      	movs	r2, #0
 801288a:	601a      	str	r2, [r3, #0]
 801288c:	605a      	str	r2, [r3, #4]
 801288e:	609a      	str	r2, [r3, #8]
 8012890:	60da      	str	r2, [r3, #12]
 8012892:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	681b      	ldr	r3, [r3, #0]
 8012898:	4a63      	ldr	r2, [pc, #396]	; (8012a28 <HAL_UART_MspInit+0x1ac>)
 801289a:	4293      	cmp	r3, r2
 801289c:	d12c      	bne.n	80128f8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 801289e:	2300      	movs	r3, #0
 80128a0:	623b      	str	r3, [r7, #32]
 80128a2:	4b62      	ldr	r3, [pc, #392]	; (8012a2c <HAL_UART_MspInit+0x1b0>)
 80128a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80128a6:	4a61      	ldr	r2, [pc, #388]	; (8012a2c <HAL_UART_MspInit+0x1b0>)
 80128a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80128ac:	6413      	str	r3, [r2, #64]	; 0x40
 80128ae:	4b5f      	ldr	r3, [pc, #380]	; (8012a2c <HAL_UART_MspInit+0x1b0>)
 80128b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80128b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80128b6:	623b      	str	r3, [r7, #32]
 80128b8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80128ba:	2300      	movs	r3, #0
 80128bc:	61fb      	str	r3, [r7, #28]
 80128be:	4b5b      	ldr	r3, [pc, #364]	; (8012a2c <HAL_UART_MspInit+0x1b0>)
 80128c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80128c2:	4a5a      	ldr	r2, [pc, #360]	; (8012a2c <HAL_UART_MspInit+0x1b0>)
 80128c4:	f043 0301 	orr.w	r3, r3, #1
 80128c8:	6313      	str	r3, [r2, #48]	; 0x30
 80128ca:	4b58      	ldr	r3, [pc, #352]	; (8012a2c <HAL_UART_MspInit+0x1b0>)
 80128cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80128ce:	f003 0301 	and.w	r3, r3, #1
 80128d2:	61fb      	str	r3, [r7, #28]
 80128d4:	69fb      	ldr	r3, [r7, #28]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80128d6:	230c      	movs	r3, #12
 80128d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80128da:	2302      	movs	r3, #2
 80128dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80128de:	2300      	movs	r3, #0
 80128e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80128e2:	2303      	movs	r3, #3
 80128e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80128e6:	2307      	movs	r3, #7
 80128e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80128ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80128ee:	4619      	mov	r1, r3
 80128f0:	484f      	ldr	r0, [pc, #316]	; (8012a30 <HAL_UART_MspInit+0x1b4>)
 80128f2:	f001 fd1d 	bl	8014330 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80128f6:	e13f      	b.n	8012b78 <HAL_UART_MspInit+0x2fc>
  else if(huart->Instance==USART3)
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	681b      	ldr	r3, [r3, #0]
 80128fc:	4a4d      	ldr	r2, [pc, #308]	; (8012a34 <HAL_UART_MspInit+0x1b8>)
 80128fe:	4293      	cmp	r3, r2
 8012900:	f040 80a4 	bne.w	8012a4c <HAL_UART_MspInit+0x1d0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8012904:	2300      	movs	r3, #0
 8012906:	61bb      	str	r3, [r7, #24]
 8012908:	4b48      	ldr	r3, [pc, #288]	; (8012a2c <HAL_UART_MspInit+0x1b0>)
 801290a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801290c:	4a47      	ldr	r2, [pc, #284]	; (8012a2c <HAL_UART_MspInit+0x1b0>)
 801290e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8012912:	6413      	str	r3, [r2, #64]	; 0x40
 8012914:	4b45      	ldr	r3, [pc, #276]	; (8012a2c <HAL_UART_MspInit+0x1b0>)
 8012916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012918:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801291c:	61bb      	str	r3, [r7, #24]
 801291e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8012920:	2300      	movs	r3, #0
 8012922:	617b      	str	r3, [r7, #20]
 8012924:	4b41      	ldr	r3, [pc, #260]	; (8012a2c <HAL_UART_MspInit+0x1b0>)
 8012926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012928:	4a40      	ldr	r2, [pc, #256]	; (8012a2c <HAL_UART_MspInit+0x1b0>)
 801292a:	f043 0302 	orr.w	r3, r3, #2
 801292e:	6313      	str	r3, [r2, #48]	; 0x30
 8012930:	4b3e      	ldr	r3, [pc, #248]	; (8012a2c <HAL_UART_MspInit+0x1b0>)
 8012932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012934:	f003 0302 	and.w	r3, r3, #2
 8012938:	617b      	str	r3, [r7, #20]
 801293a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 801293c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8012940:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012942:	2302      	movs	r3, #2
 8012944:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012946:	2300      	movs	r3, #0
 8012948:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801294a:	2303      	movs	r3, #3
 801294c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 801294e:	2307      	movs	r3, #7
 8012950:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8012952:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012956:	4619      	mov	r1, r3
 8012958:	4837      	ldr	r0, [pc, #220]	; (8012a38 <HAL_UART_MspInit+0x1bc>)
 801295a:	f001 fce9 	bl	8014330 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Stream3;
 801295e:	4b37      	ldr	r3, [pc, #220]	; (8012a3c <HAL_UART_MspInit+0x1c0>)
 8012960:	4a37      	ldr	r2, [pc, #220]	; (8012a40 <HAL_UART_MspInit+0x1c4>)
 8012962:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8012964:	4b35      	ldr	r3, [pc, #212]	; (8012a3c <HAL_UART_MspInit+0x1c0>)
 8012966:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 801296a:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 801296c:	4b33      	ldr	r3, [pc, #204]	; (8012a3c <HAL_UART_MspInit+0x1c0>)
 801296e:	2240      	movs	r2, #64	; 0x40
 8012970:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8012972:	4b32      	ldr	r3, [pc, #200]	; (8012a3c <HAL_UART_MspInit+0x1c0>)
 8012974:	2200      	movs	r2, #0
 8012976:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8012978:	4b30      	ldr	r3, [pc, #192]	; (8012a3c <HAL_UART_MspInit+0x1c0>)
 801297a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801297e:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8012980:	4b2e      	ldr	r3, [pc, #184]	; (8012a3c <HAL_UART_MspInit+0x1c0>)
 8012982:	2200      	movs	r2, #0
 8012984:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8012986:	4b2d      	ldr	r3, [pc, #180]	; (8012a3c <HAL_UART_MspInit+0x1c0>)
 8012988:	2200      	movs	r2, #0
 801298a:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 801298c:	4b2b      	ldr	r3, [pc, #172]	; (8012a3c <HAL_UART_MspInit+0x1c0>)
 801298e:	2200      	movs	r2, #0
 8012990:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8012992:	4b2a      	ldr	r3, [pc, #168]	; (8012a3c <HAL_UART_MspInit+0x1c0>)
 8012994:	2200      	movs	r2, #0
 8012996:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8012998:	4b28      	ldr	r3, [pc, #160]	; (8012a3c <HAL_UART_MspInit+0x1c0>)
 801299a:	2200      	movs	r2, #0
 801299c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 801299e:	4827      	ldr	r0, [pc, #156]	; (8012a3c <HAL_UART_MspInit+0x1c0>)
 80129a0:	f001 f8c4 	bl	8013b2c <HAL_DMA_Init>
 80129a4:	4603      	mov	r3, r0
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d001      	beq.n	80129ae <HAL_UART_MspInit+0x132>
      Error_Handler();
 80129aa:	f7ff fd5f 	bl	801246c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	4a22      	ldr	r2, [pc, #136]	; (8012a3c <HAL_UART_MspInit+0x1c0>)
 80129b2:	635a      	str	r2, [r3, #52]	; 0x34
 80129b4:	4a21      	ldr	r2, [pc, #132]	; (8012a3c <HAL_UART_MspInit+0x1c0>)
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80129ba:	4b22      	ldr	r3, [pc, #136]	; (8012a44 <HAL_UART_MspInit+0x1c8>)
 80129bc:	4a22      	ldr	r2, [pc, #136]	; (8012a48 <HAL_UART_MspInit+0x1cc>)
 80129be:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80129c0:	4b20      	ldr	r3, [pc, #128]	; (8012a44 <HAL_UART_MspInit+0x1c8>)
 80129c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80129c6:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80129c8:	4b1e      	ldr	r3, [pc, #120]	; (8012a44 <HAL_UART_MspInit+0x1c8>)
 80129ca:	2200      	movs	r2, #0
 80129cc:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80129ce:	4b1d      	ldr	r3, [pc, #116]	; (8012a44 <HAL_UART_MspInit+0x1c8>)
 80129d0:	2200      	movs	r2, #0
 80129d2:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80129d4:	4b1b      	ldr	r3, [pc, #108]	; (8012a44 <HAL_UART_MspInit+0x1c8>)
 80129d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80129da:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80129dc:	4b19      	ldr	r3, [pc, #100]	; (8012a44 <HAL_UART_MspInit+0x1c8>)
 80129de:	2200      	movs	r2, #0
 80129e0:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80129e2:	4b18      	ldr	r3, [pc, #96]	; (8012a44 <HAL_UART_MspInit+0x1c8>)
 80129e4:	2200      	movs	r2, #0
 80129e6:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80129e8:	4b16      	ldr	r3, [pc, #88]	; (8012a44 <HAL_UART_MspInit+0x1c8>)
 80129ea:	2200      	movs	r2, #0
 80129ec:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80129ee:	4b15      	ldr	r3, [pc, #84]	; (8012a44 <HAL_UART_MspInit+0x1c8>)
 80129f0:	2200      	movs	r2, #0
 80129f2:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80129f4:	4b13      	ldr	r3, [pc, #76]	; (8012a44 <HAL_UART_MspInit+0x1c8>)
 80129f6:	2200      	movs	r2, #0
 80129f8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80129fa:	4812      	ldr	r0, [pc, #72]	; (8012a44 <HAL_UART_MspInit+0x1c8>)
 80129fc:	f001 f896 	bl	8013b2c <HAL_DMA_Init>
 8012a00:	4603      	mov	r3, r0
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	d001      	beq.n	8012a0a <HAL_UART_MspInit+0x18e>
      Error_Handler();
 8012a06:	f7ff fd31 	bl	801246c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	4a0d      	ldr	r2, [pc, #52]	; (8012a44 <HAL_UART_MspInit+0x1c8>)
 8012a0e:	639a      	str	r2, [r3, #56]	; 0x38
 8012a10:	4a0c      	ldr	r2, [pc, #48]	; (8012a44 <HAL_UART_MspInit+0x1c8>)
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8012a16:	2200      	movs	r2, #0
 8012a18:	2105      	movs	r1, #5
 8012a1a:	2027      	movs	r0, #39	; 0x27
 8012a1c:	f001 f85c 	bl	8013ad8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8012a20:	2027      	movs	r0, #39	; 0x27
 8012a22:	f001 f875 	bl	8013b10 <HAL_NVIC_EnableIRQ>
}
 8012a26:	e0a7      	b.n	8012b78 <HAL_UART_MspInit+0x2fc>
 8012a28:	40004400 	.word	0x40004400
 8012a2c:	40023800 	.word	0x40023800
 8012a30:	40020000 	.word	0x40020000
 8012a34:	40004800 	.word	0x40004800
 8012a38:	40020400 	.word	0x40020400
 8012a3c:	20009728 	.word	0x20009728
 8012a40:	40026058 	.word	0x40026058
 8012a44:	200081f8 	.word	0x200081f8
 8012a48:	40026028 	.word	0x40026028
  else if(huart->Instance==USART6)
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	681b      	ldr	r3, [r3, #0]
 8012a50:	4a4b      	ldr	r2, [pc, #300]	; (8012b80 <HAL_UART_MspInit+0x304>)
 8012a52:	4293      	cmp	r3, r2
 8012a54:	f040 8090 	bne.w	8012b78 <HAL_UART_MspInit+0x2fc>
    __HAL_RCC_USART6_CLK_ENABLE();
 8012a58:	2300      	movs	r3, #0
 8012a5a:	613b      	str	r3, [r7, #16]
 8012a5c:	4b49      	ldr	r3, [pc, #292]	; (8012b84 <HAL_UART_MspInit+0x308>)
 8012a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012a60:	4a48      	ldr	r2, [pc, #288]	; (8012b84 <HAL_UART_MspInit+0x308>)
 8012a62:	f043 0320 	orr.w	r3, r3, #32
 8012a66:	6453      	str	r3, [r2, #68]	; 0x44
 8012a68:	4b46      	ldr	r3, [pc, #280]	; (8012b84 <HAL_UART_MspInit+0x308>)
 8012a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012a6c:	f003 0320 	and.w	r3, r3, #32
 8012a70:	613b      	str	r3, [r7, #16]
 8012a72:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8012a74:	2300      	movs	r3, #0
 8012a76:	60fb      	str	r3, [r7, #12]
 8012a78:	4b42      	ldr	r3, [pc, #264]	; (8012b84 <HAL_UART_MspInit+0x308>)
 8012a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012a7c:	4a41      	ldr	r2, [pc, #260]	; (8012b84 <HAL_UART_MspInit+0x308>)
 8012a7e:	f043 0304 	orr.w	r3, r3, #4
 8012a82:	6313      	str	r3, [r2, #48]	; 0x30
 8012a84:	4b3f      	ldr	r3, [pc, #252]	; (8012b84 <HAL_UART_MspInit+0x308>)
 8012a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012a88:	f003 0304 	and.w	r3, r3, #4
 8012a8c:	60fb      	str	r3, [r7, #12]
 8012a8e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8012a90:	23c0      	movs	r3, #192	; 0xc0
 8012a92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012a94:	2302      	movs	r3, #2
 8012a96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012a98:	2300      	movs	r3, #0
 8012a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012a9c:	2303      	movs	r3, #3
 8012a9e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8012aa0:	2308      	movs	r3, #8
 8012aa2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8012aa4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012aa8:	4619      	mov	r1, r3
 8012aaa:	4837      	ldr	r0, [pc, #220]	; (8012b88 <HAL_UART_MspInit+0x30c>)
 8012aac:	f001 fc40 	bl	8014330 <HAL_GPIO_Init>
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8012ab0:	4b36      	ldr	r3, [pc, #216]	; (8012b8c <HAL_UART_MspInit+0x310>)
 8012ab2:	4a37      	ldr	r2, [pc, #220]	; (8012b90 <HAL_UART_MspInit+0x314>)
 8012ab4:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8012ab6:	4b35      	ldr	r3, [pc, #212]	; (8012b8c <HAL_UART_MspInit+0x310>)
 8012ab8:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8012abc:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8012abe:	4b33      	ldr	r3, [pc, #204]	; (8012b8c <HAL_UART_MspInit+0x310>)
 8012ac0:	2240      	movs	r2, #64	; 0x40
 8012ac2:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8012ac4:	4b31      	ldr	r3, [pc, #196]	; (8012b8c <HAL_UART_MspInit+0x310>)
 8012ac6:	2200      	movs	r2, #0
 8012ac8:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8012aca:	4b30      	ldr	r3, [pc, #192]	; (8012b8c <HAL_UART_MspInit+0x310>)
 8012acc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8012ad0:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8012ad2:	4b2e      	ldr	r3, [pc, #184]	; (8012b8c <HAL_UART_MspInit+0x310>)
 8012ad4:	2200      	movs	r2, #0
 8012ad6:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8012ad8:	4b2c      	ldr	r3, [pc, #176]	; (8012b8c <HAL_UART_MspInit+0x310>)
 8012ada:	2200      	movs	r2, #0
 8012adc:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8012ade:	4b2b      	ldr	r3, [pc, #172]	; (8012b8c <HAL_UART_MspInit+0x310>)
 8012ae0:	2200      	movs	r2, #0
 8012ae2:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8012ae4:	4b29      	ldr	r3, [pc, #164]	; (8012b8c <HAL_UART_MspInit+0x310>)
 8012ae6:	2200      	movs	r2, #0
 8012ae8:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8012aea:	4b28      	ldr	r3, [pc, #160]	; (8012b8c <HAL_UART_MspInit+0x310>)
 8012aec:	2200      	movs	r2, #0
 8012aee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8012af0:	4826      	ldr	r0, [pc, #152]	; (8012b8c <HAL_UART_MspInit+0x310>)
 8012af2:	f001 f81b 	bl	8013b2c <HAL_DMA_Init>
 8012af6:	4603      	mov	r3, r0
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	d001      	beq.n	8012b00 <HAL_UART_MspInit+0x284>
      Error_Handler();
 8012afc:	f7ff fcb6 	bl	801246c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	4a22      	ldr	r2, [pc, #136]	; (8012b8c <HAL_UART_MspInit+0x310>)
 8012b04:	635a      	str	r2, [r3, #52]	; 0x34
 8012b06:	4a21      	ldr	r2, [pc, #132]	; (8012b8c <HAL_UART_MspInit+0x310>)
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8012b0c:	4b21      	ldr	r3, [pc, #132]	; (8012b94 <HAL_UART_MspInit+0x318>)
 8012b0e:	4a22      	ldr	r2, [pc, #136]	; (8012b98 <HAL_UART_MspInit+0x31c>)
 8012b10:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8012b12:	4b20      	ldr	r3, [pc, #128]	; (8012b94 <HAL_UART_MspInit+0x318>)
 8012b14:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8012b18:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8012b1a:	4b1e      	ldr	r3, [pc, #120]	; (8012b94 <HAL_UART_MspInit+0x318>)
 8012b1c:	2200      	movs	r2, #0
 8012b1e:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8012b20:	4b1c      	ldr	r3, [pc, #112]	; (8012b94 <HAL_UART_MspInit+0x318>)
 8012b22:	2200      	movs	r2, #0
 8012b24:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8012b26:	4b1b      	ldr	r3, [pc, #108]	; (8012b94 <HAL_UART_MspInit+0x318>)
 8012b28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8012b2c:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8012b2e:	4b19      	ldr	r3, [pc, #100]	; (8012b94 <HAL_UART_MspInit+0x318>)
 8012b30:	2200      	movs	r2, #0
 8012b32:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8012b34:	4b17      	ldr	r3, [pc, #92]	; (8012b94 <HAL_UART_MspInit+0x318>)
 8012b36:	2200      	movs	r2, #0
 8012b38:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8012b3a:	4b16      	ldr	r3, [pc, #88]	; (8012b94 <HAL_UART_MspInit+0x318>)
 8012b3c:	2200      	movs	r2, #0
 8012b3e:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8012b40:	4b14      	ldr	r3, [pc, #80]	; (8012b94 <HAL_UART_MspInit+0x318>)
 8012b42:	2200      	movs	r2, #0
 8012b44:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8012b46:	4b13      	ldr	r3, [pc, #76]	; (8012b94 <HAL_UART_MspInit+0x318>)
 8012b48:	2200      	movs	r2, #0
 8012b4a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8012b4c:	4811      	ldr	r0, [pc, #68]	; (8012b94 <HAL_UART_MspInit+0x318>)
 8012b4e:	f000 ffed 	bl	8013b2c <HAL_DMA_Init>
 8012b52:	4603      	mov	r3, r0
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d001      	beq.n	8012b5c <HAL_UART_MspInit+0x2e0>
      Error_Handler();
 8012b58:	f7ff fc88 	bl	801246c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	4a0d      	ldr	r2, [pc, #52]	; (8012b94 <HAL_UART_MspInit+0x318>)
 8012b60:	639a      	str	r2, [r3, #56]	; 0x38
 8012b62:	4a0c      	ldr	r2, [pc, #48]	; (8012b94 <HAL_UART_MspInit+0x318>)
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8012b68:	2200      	movs	r2, #0
 8012b6a:	2105      	movs	r1, #5
 8012b6c:	2047      	movs	r0, #71	; 0x47
 8012b6e:	f000 ffb3 	bl	8013ad8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8012b72:	2047      	movs	r0, #71	; 0x47
 8012b74:	f000 ffcc 	bl	8013b10 <HAL_NVIC_EnableIRQ>
}
 8012b78:	bf00      	nop
 8012b7a:	3738      	adds	r7, #56	; 0x38
 8012b7c:	46bd      	mov	sp, r7
 8012b7e:	bd80      	pop	{r7, pc}
 8012b80:	40011400 	.word	0x40011400
 8012b84:	40023800 	.word	0x40023800
 8012b88:	40020800 	.word	0x40020800
 8012b8c:	20009950 	.word	0x20009950
 8012b90:	400264a0 	.word	0x400264a0
 8012b94:	2000813c 	.word	0x2000813c
 8012b98:	40026428 	.word	0x40026428

08012b9c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8012b9c:	b580      	push	{r7, lr}
 8012b9e:	b08c      	sub	sp, #48	; 0x30
 8012ba0:	af00      	add	r7, sp, #0
 8012ba2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8012ba4:	2300      	movs	r3, #0
 8012ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8012ba8:	2300      	movs	r3, #0
 8012baa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8012bac:	2200      	movs	r2, #0
 8012bae:	6879      	ldr	r1, [r7, #4]
 8012bb0:	2019      	movs	r0, #25
 8012bb2:	f000 ff91 	bl	8013ad8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8012bb6:	2019      	movs	r0, #25
 8012bb8:	f000 ffaa 	bl	8013b10 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8012bbc:	2300      	movs	r3, #0
 8012bbe:	60fb      	str	r3, [r7, #12]
 8012bc0:	4b1f      	ldr	r3, [pc, #124]	; (8012c40 <HAL_InitTick+0xa4>)
 8012bc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012bc4:	4a1e      	ldr	r2, [pc, #120]	; (8012c40 <HAL_InitTick+0xa4>)
 8012bc6:	f043 0301 	orr.w	r3, r3, #1
 8012bca:	6453      	str	r3, [r2, #68]	; 0x44
 8012bcc:	4b1c      	ldr	r3, [pc, #112]	; (8012c40 <HAL_InitTick+0xa4>)
 8012bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012bd0:	f003 0301 	and.w	r3, r3, #1
 8012bd4:	60fb      	str	r3, [r7, #12]
 8012bd6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8012bd8:	f107 0210 	add.w	r2, r7, #16
 8012bdc:	f107 0314 	add.w	r3, r7, #20
 8012be0:	4611      	mov	r1, r2
 8012be2:	4618      	mov	r0, r3
 8012be4:	f003 fa96 	bl	8016114 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8012be8:	f003 fa80 	bl	80160ec <HAL_RCC_GetPCLK2Freq>
 8012bec:	4603      	mov	r3, r0
 8012bee:	005b      	lsls	r3, r3, #1
 8012bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8012bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bf4:	4a13      	ldr	r2, [pc, #76]	; (8012c44 <HAL_InitTick+0xa8>)
 8012bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8012bfa:	0c9b      	lsrs	r3, r3, #18
 8012bfc:	3b01      	subs	r3, #1
 8012bfe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8012c00:	4b11      	ldr	r3, [pc, #68]	; (8012c48 <HAL_InitTick+0xac>)
 8012c02:	4a12      	ldr	r2, [pc, #72]	; (8012c4c <HAL_InitTick+0xb0>)
 8012c04:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8012c06:	4b10      	ldr	r3, [pc, #64]	; (8012c48 <HAL_InitTick+0xac>)
 8012c08:	f240 32e7 	movw	r2, #999	; 0x3e7
 8012c0c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8012c0e:	4a0e      	ldr	r2, [pc, #56]	; (8012c48 <HAL_InitTick+0xac>)
 8012c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c12:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8012c14:	4b0c      	ldr	r3, [pc, #48]	; (8012c48 <HAL_InitTick+0xac>)
 8012c16:	2200      	movs	r2, #0
 8012c18:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8012c1a:	4b0b      	ldr	r3, [pc, #44]	; (8012c48 <HAL_InitTick+0xac>)
 8012c1c:	2200      	movs	r2, #0
 8012c1e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8012c20:	4809      	ldr	r0, [pc, #36]	; (8012c48 <HAL_InitTick+0xac>)
 8012c22:	f004 fc31 	bl	8017488 <HAL_TIM_Base_Init>
 8012c26:	4603      	mov	r3, r0
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	d104      	bne.n	8012c36 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8012c2c:	4806      	ldr	r0, [pc, #24]	; (8012c48 <HAL_InitTick+0xac>)
 8012c2e:	f004 fc7b 	bl	8017528 <HAL_TIM_Base_Start_IT>
 8012c32:	4603      	mov	r3, r0
 8012c34:	e000      	b.n	8012c38 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8012c36:	2301      	movs	r3, #1
}
 8012c38:	4618      	mov	r0, r3
 8012c3a:	3730      	adds	r7, #48	; 0x30
 8012c3c:	46bd      	mov	sp, r7
 8012c3e:	bd80      	pop	{r7, pc}
 8012c40:	40023800 	.word	0x40023800
 8012c44:	431bde83 	.word	0x431bde83
 8012c48:	20009ebc 	.word	0x20009ebc
 8012c4c:	40010000 	.word	0x40010000

08012c50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8012c50:	b480      	push	{r7}
 8012c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8012c54:	e7fe      	b.n	8012c54 <NMI_Handler+0x4>

08012c56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8012c56:	b480      	push	{r7}
 8012c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8012c5a:	e7fe      	b.n	8012c5a <HardFault_Handler+0x4>

08012c5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8012c5c:	b480      	push	{r7}
 8012c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8012c60:	e7fe      	b.n	8012c60 <MemManage_Handler+0x4>

08012c62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8012c62:	b480      	push	{r7}
 8012c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8012c66:	e7fe      	b.n	8012c66 <BusFault_Handler+0x4>

08012c68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8012c68:	b480      	push	{r7}
 8012c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8012c6c:	e7fe      	b.n	8012c6c <UsageFault_Handler+0x4>

08012c6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8012c6e:	b480      	push	{r7}
 8012c70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8012c72:	bf00      	nop
 8012c74:	46bd      	mov	sp, r7
 8012c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c7a:	4770      	bx	lr

08012c7c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8012c7c:	b580      	push	{r7, lr}
 8012c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8012c80:	4802      	ldr	r0, [pc, #8]	; (8012c8c <DMA1_Stream1_IRQHandler+0x10>)
 8012c82:	f001 f8eb 	bl	8013e5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8012c86:	bf00      	nop
 8012c88:	bd80      	pop	{r7, pc}
 8012c8a:	bf00      	nop
 8012c8c:	200081f8 	.word	0x200081f8

08012c90 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8012c90:	b580      	push	{r7, lr}
 8012c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8012c94:	4802      	ldr	r0, [pc, #8]	; (8012ca0 <DMA1_Stream3_IRQHandler+0x10>)
 8012c96:	f001 f8e1 	bl	8013e5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8012c9a:	bf00      	nop
 8012c9c:	bd80      	pop	{r7, pc}
 8012c9e:	bf00      	nop
 8012ca0:	20009728 	.word	0x20009728

08012ca4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8012ca4:	b580      	push	{r7, lr}
 8012ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8012ca8:	4802      	ldr	r0, [pc, #8]	; (8012cb4 <ADC_IRQHandler+0x10>)
 8012caa:	f000 f974 	bl	8012f96 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8012cae:	bf00      	nop
 8012cb0:	bd80      	pop	{r7, pc}
 8012cb2:	bf00      	nop
 8012cb4:	200099b0 	.word	0x200099b0

08012cb8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8012cb8:	b580      	push	{r7, lr}
 8012cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8012cbc:	4802      	ldr	r0, [pc, #8]	; (8012cc8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8012cbe:	f004 fca3 	bl	8017608 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8012cc2:	bf00      	nop
 8012cc4:	bd80      	pop	{r7, pc}
 8012cc6:	bf00      	nop
 8012cc8:	20009ebc 	.word	0x20009ebc

08012ccc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8012ccc:	b580      	push	{r7, lr}
 8012cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8012cd0:	4802      	ldr	r0, [pc, #8]	; (8012cdc <TIM2_IRQHandler+0x10>)
 8012cd2:	f004 fc99 	bl	8017608 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8012cd6:	bf00      	nop
 8012cd8:	bd80      	pop	{r7, pc}
 8012cda:	bf00      	nop
 8012cdc:	20009e08 	.word	0x20009e08

08012ce0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8012ce0:	b580      	push	{r7, lr}
 8012ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8012ce4:	4802      	ldr	r0, [pc, #8]	; (8012cf0 <TIM3_IRQHandler+0x10>)
 8012ce6:	f004 fc8f 	bl	8017608 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8012cea:	bf00      	nop
 8012cec:	bd80      	pop	{r7, pc}
 8012cee:	bf00      	nop
 8012cf0:	20009794 	.word	0x20009794

08012cf4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8012cf4:	b580      	push	{r7, lr}
 8012cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8012cf8:	4802      	ldr	r0, [pc, #8]	; (8012d04 <USART3_IRQHandler+0x10>)
 8012cfa:	f005 f943 	bl	8017f84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8012cfe:	bf00      	nop
 8012d00:	bd80      	pop	{r7, pc}
 8012d02:	bf00      	nop
 8012d04:	2000825c 	.word	0x2000825c

08012d08 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8012d08:	b580      	push	{r7, lr}
 8012d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8012d0c:	4802      	ldr	r0, [pc, #8]	; (8012d18 <DMA2_Stream0_IRQHandler+0x10>)
 8012d0e:	f001 f8a5 	bl	8013e5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8012d12:	bf00      	nop
 8012d14:	bd80      	pop	{r7, pc}
 8012d16:	bf00      	nop
 8012d18:	20009b14 	.word	0x20009b14

08012d1c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8012d1c:	b580      	push	{r7, lr}
 8012d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8012d20:	4802      	ldr	r0, [pc, #8]	; (8012d2c <DMA2_Stream1_IRQHandler+0x10>)
 8012d22:	f001 f89b 	bl	8013e5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8012d26:	bf00      	nop
 8012d28:	bd80      	pop	{r7, pc}
 8012d2a:	bf00      	nop
 8012d2c:	2000813c 	.word	0x2000813c

08012d30 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8012d30:	b580      	push	{r7, lr}
 8012d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8012d34:	4802      	ldr	r0, [pc, #8]	; (8012d40 <DMA2_Stream6_IRQHandler+0x10>)
 8012d36:	f001 f891 	bl	8013e5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8012d3a:	bf00      	nop
 8012d3c:	bd80      	pop	{r7, pc}
 8012d3e:	bf00      	nop
 8012d40:	20009950 	.word	0x20009950

08012d44 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8012d44:	b580      	push	{r7, lr}
 8012d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8012d48:	4802      	ldr	r0, [pc, #8]	; (8012d54 <USART6_IRQHandler+0x10>)
 8012d4a:	f005 f91b 	bl	8017f84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8012d4e:	bf00      	nop
 8012d50:	bd80      	pop	{r7, pc}
 8012d52:	bf00      	nop
 8012d54:	20009dc4 	.word	0x20009dc4

08012d58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8012d58:	b580      	push	{r7, lr}
 8012d5a:	b086      	sub	sp, #24
 8012d5c:	af00      	add	r7, sp, #0
 8012d5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8012d60:	4a14      	ldr	r2, [pc, #80]	; (8012db4 <_sbrk+0x5c>)
 8012d62:	4b15      	ldr	r3, [pc, #84]	; (8012db8 <_sbrk+0x60>)
 8012d64:	1ad3      	subs	r3, r2, r3
 8012d66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8012d68:	697b      	ldr	r3, [r7, #20]
 8012d6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8012d6c:	4b13      	ldr	r3, [pc, #76]	; (8012dbc <_sbrk+0x64>)
 8012d6e:	681b      	ldr	r3, [r3, #0]
 8012d70:	2b00      	cmp	r3, #0
 8012d72:	d102      	bne.n	8012d7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8012d74:	4b11      	ldr	r3, [pc, #68]	; (8012dbc <_sbrk+0x64>)
 8012d76:	4a12      	ldr	r2, [pc, #72]	; (8012dc0 <_sbrk+0x68>)
 8012d78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8012d7a:	4b10      	ldr	r3, [pc, #64]	; (8012dbc <_sbrk+0x64>)
 8012d7c:	681a      	ldr	r2, [r3, #0]
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	4413      	add	r3, r2
 8012d82:	693a      	ldr	r2, [r7, #16]
 8012d84:	429a      	cmp	r2, r3
 8012d86:	d207      	bcs.n	8012d98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8012d88:	f01b fa36 	bl	802e1f8 <__errno>
 8012d8c:	4603      	mov	r3, r0
 8012d8e:	220c      	movs	r2, #12
 8012d90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8012d92:	f04f 33ff 	mov.w	r3, #4294967295
 8012d96:	e009      	b.n	8012dac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8012d98:	4b08      	ldr	r3, [pc, #32]	; (8012dbc <_sbrk+0x64>)
 8012d9a:	681b      	ldr	r3, [r3, #0]
 8012d9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8012d9e:	4b07      	ldr	r3, [pc, #28]	; (8012dbc <_sbrk+0x64>)
 8012da0:	681a      	ldr	r2, [r3, #0]
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	4413      	add	r3, r2
 8012da6:	4a05      	ldr	r2, [pc, #20]	; (8012dbc <_sbrk+0x64>)
 8012da8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8012daa:	68fb      	ldr	r3, [r7, #12]
}
 8012dac:	4618      	mov	r0, r3
 8012dae:	3718      	adds	r7, #24
 8012db0:	46bd      	mov	sp, r7
 8012db2:	bd80      	pop	{r7, pc}
 8012db4:	20020000 	.word	0x20020000
 8012db8:	00000400 	.word	0x00000400
 8012dbc:	2000088c 	.word	0x2000088c
 8012dc0:	2000b080 	.word	0x2000b080

08012dc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8012dc4:	b480      	push	{r7}
 8012dc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8012dc8:	4b07      	ldr	r3, [pc, #28]	; (8012de8 <SystemInit+0x24>)
 8012dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012dce:	4a06      	ldr	r2, [pc, #24]	; (8012de8 <SystemInit+0x24>)
 8012dd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012dd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8012dd8:	4b03      	ldr	r3, [pc, #12]	; (8012de8 <SystemInit+0x24>)
 8012dda:	4a04      	ldr	r2, [pc, #16]	; (8012dec <SystemInit+0x28>)
 8012ddc:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8012dde:	bf00      	nop
 8012de0:	46bd      	mov	sp, r7
 8012de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012de6:	4770      	bx	lr
 8012de8:	e000ed00 	.word	0xe000ed00
 8012dec:	08010000 	.word	0x08010000

08012df0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8012df0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8012e28 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8012df4:	480d      	ldr	r0, [pc, #52]	; (8012e2c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8012df6:	490e      	ldr	r1, [pc, #56]	; (8012e30 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8012df8:	4a0e      	ldr	r2, [pc, #56]	; (8012e34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8012dfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8012dfc:	e002      	b.n	8012e04 <LoopCopyDataInit>

08012dfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8012dfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8012e00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8012e02:	3304      	adds	r3, #4

08012e04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8012e04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8012e06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8012e08:	d3f9      	bcc.n	8012dfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8012e0a:	4a0b      	ldr	r2, [pc, #44]	; (8012e38 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8012e0c:	4c0b      	ldr	r4, [pc, #44]	; (8012e3c <LoopFillZerobss+0x26>)
  movs r3, #0
 8012e0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8012e10:	e001      	b.n	8012e16 <LoopFillZerobss>

08012e12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8012e12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8012e14:	3204      	adds	r2, #4

08012e16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8012e16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8012e18:	d3fb      	bcc.n	8012e12 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8012e1a:	f7ff ffd3 	bl	8012dc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8012e1e:	f01b f9f1 	bl	802e204 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8012e22:	f7fe f991 	bl	8011148 <main>
  bx  lr    
 8012e26:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8012e28:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8012e2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8012e30:	200000e0 	.word	0x200000e0
  ldr r2, =_sidata
 8012e34:	08030250 	.word	0x08030250
  ldr r2, =_sbss
 8012e38:	200000e0 	.word	0x200000e0
  ldr r4, =_ebss
 8012e3c:	2000b07c 	.word	0x2000b07c

08012e40 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8012e40:	e7fe      	b.n	8012e40 <CAN1_RX0_IRQHandler>
	...

08012e44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8012e44:	b580      	push	{r7, lr}
 8012e46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8012e48:	4b0e      	ldr	r3, [pc, #56]	; (8012e84 <HAL_Init+0x40>)
 8012e4a:	681b      	ldr	r3, [r3, #0]
 8012e4c:	4a0d      	ldr	r2, [pc, #52]	; (8012e84 <HAL_Init+0x40>)
 8012e4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8012e52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8012e54:	4b0b      	ldr	r3, [pc, #44]	; (8012e84 <HAL_Init+0x40>)
 8012e56:	681b      	ldr	r3, [r3, #0]
 8012e58:	4a0a      	ldr	r2, [pc, #40]	; (8012e84 <HAL_Init+0x40>)
 8012e5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8012e5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8012e60:	4b08      	ldr	r3, [pc, #32]	; (8012e84 <HAL_Init+0x40>)
 8012e62:	681b      	ldr	r3, [r3, #0]
 8012e64:	4a07      	ldr	r2, [pc, #28]	; (8012e84 <HAL_Init+0x40>)
 8012e66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012e6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8012e6c:	2003      	movs	r0, #3
 8012e6e:	f000 fe28 	bl	8013ac2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8012e72:	200f      	movs	r0, #15
 8012e74:	f7ff fe92 	bl	8012b9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8012e78:	f7ff fafc 	bl	8012474 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8012e7c:	2300      	movs	r3, #0
}
 8012e7e:	4618      	mov	r0, r3
 8012e80:	bd80      	pop	{r7, pc}
 8012e82:	bf00      	nop
 8012e84:	40023c00 	.word	0x40023c00

08012e88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8012e88:	b480      	push	{r7}
 8012e8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8012e8c:	4b06      	ldr	r3, [pc, #24]	; (8012ea8 <HAL_IncTick+0x20>)
 8012e8e:	781b      	ldrb	r3, [r3, #0]
 8012e90:	461a      	mov	r2, r3
 8012e92:	4b06      	ldr	r3, [pc, #24]	; (8012eac <HAL_IncTick+0x24>)
 8012e94:	681b      	ldr	r3, [r3, #0]
 8012e96:	4413      	add	r3, r2
 8012e98:	4a04      	ldr	r2, [pc, #16]	; (8012eac <HAL_IncTick+0x24>)
 8012e9a:	6013      	str	r3, [r2, #0]
}
 8012e9c:	bf00      	nop
 8012e9e:	46bd      	mov	sp, r7
 8012ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ea4:	4770      	bx	lr
 8012ea6:	bf00      	nop
 8012ea8:	20000010 	.word	0x20000010
 8012eac:	20009f04 	.word	0x20009f04

08012eb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8012eb0:	b480      	push	{r7}
 8012eb2:	af00      	add	r7, sp, #0
  return uwTick;
 8012eb4:	4b03      	ldr	r3, [pc, #12]	; (8012ec4 <HAL_GetTick+0x14>)
 8012eb6:	681b      	ldr	r3, [r3, #0]
}
 8012eb8:	4618      	mov	r0, r3
 8012eba:	46bd      	mov	sp, r7
 8012ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ec0:	4770      	bx	lr
 8012ec2:	bf00      	nop
 8012ec4:	20009f04 	.word	0x20009f04

08012ec8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8012ec8:	b580      	push	{r7, lr}
 8012eca:	b084      	sub	sp, #16
 8012ecc:	af00      	add	r7, sp, #0
 8012ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8012ed0:	f7ff ffee 	bl	8012eb0 <HAL_GetTick>
 8012ed4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8012eda:	68fb      	ldr	r3, [r7, #12]
 8012edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ee0:	d005      	beq.n	8012eee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8012ee2:	4b0a      	ldr	r3, [pc, #40]	; (8012f0c <HAL_Delay+0x44>)
 8012ee4:	781b      	ldrb	r3, [r3, #0]
 8012ee6:	461a      	mov	r2, r3
 8012ee8:	68fb      	ldr	r3, [r7, #12]
 8012eea:	4413      	add	r3, r2
 8012eec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8012eee:	bf00      	nop
 8012ef0:	f7ff ffde 	bl	8012eb0 <HAL_GetTick>
 8012ef4:	4602      	mov	r2, r0
 8012ef6:	68bb      	ldr	r3, [r7, #8]
 8012ef8:	1ad3      	subs	r3, r2, r3
 8012efa:	68fa      	ldr	r2, [r7, #12]
 8012efc:	429a      	cmp	r2, r3
 8012efe:	d8f7      	bhi.n	8012ef0 <HAL_Delay+0x28>
  {
  }
}
 8012f00:	bf00      	nop
 8012f02:	bf00      	nop
 8012f04:	3710      	adds	r7, #16
 8012f06:	46bd      	mov	sp, r7
 8012f08:	bd80      	pop	{r7, pc}
 8012f0a:	bf00      	nop
 8012f0c:	20000010 	.word	0x20000010

08012f10 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8012f10:	b580      	push	{r7, lr}
 8012f12:	b084      	sub	sp, #16
 8012f14:	af00      	add	r7, sp, #0
 8012f16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8012f18:	2300      	movs	r3, #0
 8012f1a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	2b00      	cmp	r3, #0
 8012f20:	d101      	bne.n	8012f26 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8012f22:	2301      	movs	r3, #1
 8012f24:	e033      	b.n	8012f8e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	d109      	bne.n	8012f42 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8012f2e:	6878      	ldr	r0, [r7, #4]
 8012f30:	f7ff facc 	bl	80124cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	2200      	movs	r2, #0
 8012f38:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	2200      	movs	r2, #0
 8012f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012f46:	f003 0310 	and.w	r3, r3, #16
 8012f4a:	2b00      	cmp	r3, #0
 8012f4c:	d118      	bne.n	8012f80 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8012f4e:	687b      	ldr	r3, [r7, #4]
 8012f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012f52:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8012f56:	f023 0302 	bic.w	r3, r3, #2
 8012f5a:	f043 0202 	orr.w	r2, r3, #2
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8012f62:	6878      	ldr	r0, [r7, #4]
 8012f64:	f000 fb78 	bl	8013658 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	2200      	movs	r2, #0
 8012f6c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012f72:	f023 0303 	bic.w	r3, r3, #3
 8012f76:	f043 0201 	orr.w	r2, r3, #1
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	641a      	str	r2, [r3, #64]	; 0x40
 8012f7e:	e001      	b.n	8012f84 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8012f80:	2301      	movs	r3, #1
 8012f82:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	2200      	movs	r2, #0
 8012f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8012f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8012f8e:	4618      	mov	r0, r3
 8012f90:	3710      	adds	r7, #16
 8012f92:	46bd      	mov	sp, r7
 8012f94:	bd80      	pop	{r7, pc}

08012f96 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8012f96:	b580      	push	{r7, lr}
 8012f98:	b086      	sub	sp, #24
 8012f9a:	af00      	add	r7, sp, #0
 8012f9c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8012f9e:	2300      	movs	r3, #0
 8012fa0:	617b      	str	r3, [r7, #20]
 8012fa2:	2300      	movs	r3, #0
 8012fa4:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	681b      	ldr	r3, [r3, #0]
 8012faa:	681b      	ldr	r3, [r3, #0]
 8012fac:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	681b      	ldr	r3, [r3, #0]
 8012fb2:	685b      	ldr	r3, [r3, #4]
 8012fb4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8012fb6:	68fb      	ldr	r3, [r7, #12]
 8012fb8:	f003 0302 	and.w	r3, r3, #2
 8012fbc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8012fbe:	68bb      	ldr	r3, [r7, #8]
 8012fc0:	f003 0320 	and.w	r3, r3, #32
 8012fc4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8012fc6:	697b      	ldr	r3, [r7, #20]
 8012fc8:	2b00      	cmp	r3, #0
 8012fca:	d049      	beq.n	8013060 <HAL_ADC_IRQHandler+0xca>
 8012fcc:	693b      	ldr	r3, [r7, #16]
 8012fce:	2b00      	cmp	r3, #0
 8012fd0:	d046      	beq.n	8013060 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012fd6:	f003 0310 	and.w	r3, r3, #16
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	d105      	bne.n	8012fea <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012fe2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	681b      	ldr	r3, [r3, #0]
 8012fee:	689b      	ldr	r3, [r3, #8]
 8012ff0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8012ff4:	2b00      	cmp	r3, #0
 8012ff6:	d12b      	bne.n	8013050 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	d127      	bne.n	8013050 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	681b      	ldr	r3, [r3, #0]
 8013004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013006:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 801300a:	2b00      	cmp	r3, #0
 801300c:	d006      	beq.n	801301c <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	681b      	ldr	r3, [r3, #0]
 8013012:	689b      	ldr	r3, [r3, #8]
 8013014:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8013018:	2b00      	cmp	r3, #0
 801301a:	d119      	bne.n	8013050 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	681b      	ldr	r3, [r3, #0]
 8013020:	685a      	ldr	r2, [r3, #4]
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	681b      	ldr	r3, [r3, #0]
 8013026:	f022 0220 	bic.w	r2, r2, #32
 801302a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013030:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801303c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8013040:	2b00      	cmp	r3, #0
 8013042:	d105      	bne.n	8013050 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013048:	f043 0201 	orr.w	r2, r3, #1
 801304c:	687b      	ldr	r3, [r7, #4]
 801304e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8013050:	6878      	ldr	r0, [r7, #4]
 8013052:	f7fd ffdf 	bl	8011014 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	681b      	ldr	r3, [r3, #0]
 801305a:	f06f 0212 	mvn.w	r2, #18
 801305e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8013060:	68fb      	ldr	r3, [r7, #12]
 8013062:	f003 0304 	and.w	r3, r3, #4
 8013066:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8013068:	68bb      	ldr	r3, [r7, #8]
 801306a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801306e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8013070:	697b      	ldr	r3, [r7, #20]
 8013072:	2b00      	cmp	r3, #0
 8013074:	d057      	beq.n	8013126 <HAL_ADC_IRQHandler+0x190>
 8013076:	693b      	ldr	r3, [r7, #16]
 8013078:	2b00      	cmp	r3, #0
 801307a:	d054      	beq.n	8013126 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013080:	f003 0310 	and.w	r3, r3, #16
 8013084:	2b00      	cmp	r3, #0
 8013086:	d105      	bne.n	8013094 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801308c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	681b      	ldr	r3, [r3, #0]
 8013098:	689b      	ldr	r3, [r3, #8]
 801309a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 801309e:	2b00      	cmp	r3, #0
 80130a0:	d139      	bne.n	8013116 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	681b      	ldr	r3, [r3, #0]
 80130a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80130a8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	d006      	beq.n	80130be <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	681b      	ldr	r3, [r3, #0]
 80130b4:	689b      	ldr	r3, [r3, #8]
 80130b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80130ba:	2b00      	cmp	r3, #0
 80130bc:	d12b      	bne.n	8013116 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	681b      	ldr	r3, [r3, #0]
 80130c2:	685b      	ldr	r3, [r3, #4]
 80130c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80130c8:	2b00      	cmp	r3, #0
 80130ca:	d124      	bne.n	8013116 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	681b      	ldr	r3, [r3, #0]
 80130d0:	689b      	ldr	r3, [r3, #8]
 80130d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80130d6:	2b00      	cmp	r3, #0
 80130d8:	d11d      	bne.n	8013116 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80130da:	687b      	ldr	r3, [r7, #4]
 80130dc:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80130de:	2b00      	cmp	r3, #0
 80130e0:	d119      	bne.n	8013116 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	681b      	ldr	r3, [r3, #0]
 80130e6:	685a      	ldr	r2, [r3, #4]
 80130e8:	687b      	ldr	r3, [r7, #4]
 80130ea:	681b      	ldr	r3, [r3, #0]
 80130ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80130f0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80130f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013106:	2b00      	cmp	r3, #0
 8013108:	d105      	bne.n	8013116 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801310e:	f043 0201 	orr.w	r2, r3, #1
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8013116:	6878      	ldr	r0, [r7, #4]
 8013118:	f000 fc1c 	bl	8013954 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	681b      	ldr	r3, [r3, #0]
 8013120:	f06f 020c 	mvn.w	r2, #12
 8013124:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8013126:	68fb      	ldr	r3, [r7, #12]
 8013128:	f003 0301 	and.w	r3, r3, #1
 801312c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 801312e:	68bb      	ldr	r3, [r7, #8]
 8013130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013134:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8013136:	697b      	ldr	r3, [r7, #20]
 8013138:	2b00      	cmp	r3, #0
 801313a:	d017      	beq.n	801316c <HAL_ADC_IRQHandler+0x1d6>
 801313c:	693b      	ldr	r3, [r7, #16]
 801313e:	2b00      	cmp	r3, #0
 8013140:	d014      	beq.n	801316c <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	681b      	ldr	r3, [r3, #0]
 8013146:	681b      	ldr	r3, [r3, #0]
 8013148:	f003 0301 	and.w	r3, r3, #1
 801314c:	2b01      	cmp	r3, #1
 801314e:	d10d      	bne.n	801316c <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013154:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 801315c:	6878      	ldr	r0, [r7, #4]
 801315e:	f000 f945 	bl	80133ec <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8013162:	687b      	ldr	r3, [r7, #4]
 8013164:	681b      	ldr	r3, [r3, #0]
 8013166:	f06f 0201 	mvn.w	r2, #1
 801316a:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 801316c:	68fb      	ldr	r3, [r7, #12]
 801316e:	f003 0320 	and.w	r3, r3, #32
 8013172:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8013174:	68bb      	ldr	r3, [r7, #8]
 8013176:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801317a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 801317c:	697b      	ldr	r3, [r7, #20]
 801317e:	2b00      	cmp	r3, #0
 8013180:	d015      	beq.n	80131ae <HAL_ADC_IRQHandler+0x218>
 8013182:	693b      	ldr	r3, [r7, #16]
 8013184:	2b00      	cmp	r3, #0
 8013186:	d012      	beq.n	80131ae <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801318c:	f043 0202 	orr.w	r2, r3, #2
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	681b      	ldr	r3, [r3, #0]
 8013198:	f06f 0220 	mvn.w	r2, #32
 801319c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 801319e:	6878      	ldr	r0, [r7, #4]
 80131a0:	f000 f92e 	bl	8013400 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	681b      	ldr	r3, [r3, #0]
 80131a8:	f06f 0220 	mvn.w	r2, #32
 80131ac:	601a      	str	r2, [r3, #0]
  }
}
 80131ae:	bf00      	nop
 80131b0:	3718      	adds	r7, #24
 80131b2:	46bd      	mov	sp, r7
 80131b4:	bd80      	pop	{r7, pc}
	...

080131b8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80131b8:	b580      	push	{r7, lr}
 80131ba:	b086      	sub	sp, #24
 80131bc:	af00      	add	r7, sp, #0
 80131be:	60f8      	str	r0, [r7, #12]
 80131c0:	60b9      	str	r1, [r7, #8]
 80131c2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80131c4:	2300      	movs	r3, #0
 80131c6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80131c8:	68fb      	ldr	r3, [r7, #12]
 80131ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80131ce:	2b01      	cmp	r3, #1
 80131d0:	d101      	bne.n	80131d6 <HAL_ADC_Start_DMA+0x1e>
 80131d2:	2302      	movs	r3, #2
 80131d4:	e0e9      	b.n	80133aa <HAL_ADC_Start_DMA+0x1f2>
 80131d6:	68fb      	ldr	r3, [r7, #12]
 80131d8:	2201      	movs	r2, #1
 80131da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80131de:	68fb      	ldr	r3, [r7, #12]
 80131e0:	681b      	ldr	r3, [r3, #0]
 80131e2:	689b      	ldr	r3, [r3, #8]
 80131e4:	f003 0301 	and.w	r3, r3, #1
 80131e8:	2b01      	cmp	r3, #1
 80131ea:	d018      	beq.n	801321e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80131ec:	68fb      	ldr	r3, [r7, #12]
 80131ee:	681b      	ldr	r3, [r3, #0]
 80131f0:	689a      	ldr	r2, [r3, #8]
 80131f2:	68fb      	ldr	r3, [r7, #12]
 80131f4:	681b      	ldr	r3, [r3, #0]
 80131f6:	f042 0201 	orr.w	r2, r2, #1
 80131fa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80131fc:	4b6d      	ldr	r3, [pc, #436]	; (80133b4 <HAL_ADC_Start_DMA+0x1fc>)
 80131fe:	681b      	ldr	r3, [r3, #0]
 8013200:	4a6d      	ldr	r2, [pc, #436]	; (80133b8 <HAL_ADC_Start_DMA+0x200>)
 8013202:	fba2 2303 	umull	r2, r3, r2, r3
 8013206:	0c9a      	lsrs	r2, r3, #18
 8013208:	4613      	mov	r3, r2
 801320a:	005b      	lsls	r3, r3, #1
 801320c:	4413      	add	r3, r2
 801320e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8013210:	e002      	b.n	8013218 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8013212:	693b      	ldr	r3, [r7, #16]
 8013214:	3b01      	subs	r3, #1
 8013216:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8013218:	693b      	ldr	r3, [r7, #16]
 801321a:	2b00      	cmp	r3, #0
 801321c:	d1f9      	bne.n	8013212 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 801321e:	68fb      	ldr	r3, [r7, #12]
 8013220:	681b      	ldr	r3, [r3, #0]
 8013222:	689b      	ldr	r3, [r3, #8]
 8013224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013228:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801322c:	d107      	bne.n	801323e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 801322e:	68fb      	ldr	r3, [r7, #12]
 8013230:	681b      	ldr	r3, [r3, #0]
 8013232:	689a      	ldr	r2, [r3, #8]
 8013234:	68fb      	ldr	r3, [r7, #12]
 8013236:	681b      	ldr	r3, [r3, #0]
 8013238:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801323c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 801323e:	68fb      	ldr	r3, [r7, #12]
 8013240:	681b      	ldr	r3, [r3, #0]
 8013242:	689b      	ldr	r3, [r3, #8]
 8013244:	f003 0301 	and.w	r3, r3, #1
 8013248:	2b01      	cmp	r3, #1
 801324a:	f040 80a1 	bne.w	8013390 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 801324e:	68fb      	ldr	r3, [r7, #12]
 8013250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013252:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8013256:	f023 0301 	bic.w	r3, r3, #1
 801325a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801325e:	68fb      	ldr	r3, [r7, #12]
 8013260:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8013262:	68fb      	ldr	r3, [r7, #12]
 8013264:	681b      	ldr	r3, [r3, #0]
 8013266:	685b      	ldr	r3, [r3, #4]
 8013268:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801326c:	2b00      	cmp	r3, #0
 801326e:	d007      	beq.n	8013280 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8013270:	68fb      	ldr	r3, [r7, #12]
 8013272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013274:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8013278:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 801327c:	68fb      	ldr	r3, [r7, #12]
 801327e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8013280:	68fb      	ldr	r3, [r7, #12]
 8013282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013284:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8013288:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801328c:	d106      	bne.n	801329c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 801328e:	68fb      	ldr	r3, [r7, #12]
 8013290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013292:	f023 0206 	bic.w	r2, r3, #6
 8013296:	68fb      	ldr	r3, [r7, #12]
 8013298:	645a      	str	r2, [r3, #68]	; 0x44
 801329a:	e002      	b.n	80132a2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 801329c:	68fb      	ldr	r3, [r7, #12]
 801329e:	2200      	movs	r2, #0
 80132a0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80132a2:	68fb      	ldr	r3, [r7, #12]
 80132a4:	2200      	movs	r2, #0
 80132a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80132aa:	4b44      	ldr	r3, [pc, #272]	; (80133bc <HAL_ADC_Start_DMA+0x204>)
 80132ac:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80132ae:	68fb      	ldr	r3, [r7, #12]
 80132b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80132b2:	4a43      	ldr	r2, [pc, #268]	; (80133c0 <HAL_ADC_Start_DMA+0x208>)
 80132b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80132b6:	68fb      	ldr	r3, [r7, #12]
 80132b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80132ba:	4a42      	ldr	r2, [pc, #264]	; (80133c4 <HAL_ADC_Start_DMA+0x20c>)
 80132bc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80132be:	68fb      	ldr	r3, [r7, #12]
 80132c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80132c2:	4a41      	ldr	r2, [pc, #260]	; (80133c8 <HAL_ADC_Start_DMA+0x210>)
 80132c4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80132c6:	68fb      	ldr	r3, [r7, #12]
 80132c8:	681b      	ldr	r3, [r3, #0]
 80132ca:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80132ce:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80132d0:	68fb      	ldr	r3, [r7, #12]
 80132d2:	681b      	ldr	r3, [r3, #0]
 80132d4:	685a      	ldr	r2, [r3, #4]
 80132d6:	68fb      	ldr	r3, [r7, #12]
 80132d8:	681b      	ldr	r3, [r3, #0]
 80132da:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80132de:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80132e0:	68fb      	ldr	r3, [r7, #12]
 80132e2:	681b      	ldr	r3, [r3, #0]
 80132e4:	689a      	ldr	r2, [r3, #8]
 80132e6:	68fb      	ldr	r3, [r7, #12]
 80132e8:	681b      	ldr	r3, [r3, #0]
 80132ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80132ee:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80132f0:	68fb      	ldr	r3, [r7, #12]
 80132f2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80132f4:	68fb      	ldr	r3, [r7, #12]
 80132f6:	681b      	ldr	r3, [r3, #0]
 80132f8:	334c      	adds	r3, #76	; 0x4c
 80132fa:	4619      	mov	r1, r3
 80132fc:	68ba      	ldr	r2, [r7, #8]
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	f000 fcc2 	bl	8013c88 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8013304:	697b      	ldr	r3, [r7, #20]
 8013306:	685b      	ldr	r3, [r3, #4]
 8013308:	f003 031f 	and.w	r3, r3, #31
 801330c:	2b00      	cmp	r3, #0
 801330e:	d12a      	bne.n	8013366 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8013310:	68fb      	ldr	r3, [r7, #12]
 8013312:	681b      	ldr	r3, [r3, #0]
 8013314:	4a2d      	ldr	r2, [pc, #180]	; (80133cc <HAL_ADC_Start_DMA+0x214>)
 8013316:	4293      	cmp	r3, r2
 8013318:	d015      	beq.n	8013346 <HAL_ADC_Start_DMA+0x18e>
 801331a:	68fb      	ldr	r3, [r7, #12]
 801331c:	681b      	ldr	r3, [r3, #0]
 801331e:	4a2c      	ldr	r2, [pc, #176]	; (80133d0 <HAL_ADC_Start_DMA+0x218>)
 8013320:	4293      	cmp	r3, r2
 8013322:	d105      	bne.n	8013330 <HAL_ADC_Start_DMA+0x178>
 8013324:	4b25      	ldr	r3, [pc, #148]	; (80133bc <HAL_ADC_Start_DMA+0x204>)
 8013326:	685b      	ldr	r3, [r3, #4]
 8013328:	f003 031f 	and.w	r3, r3, #31
 801332c:	2b00      	cmp	r3, #0
 801332e:	d00a      	beq.n	8013346 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8013330:	68fb      	ldr	r3, [r7, #12]
 8013332:	681b      	ldr	r3, [r3, #0]
 8013334:	4a27      	ldr	r2, [pc, #156]	; (80133d4 <HAL_ADC_Start_DMA+0x21c>)
 8013336:	4293      	cmp	r3, r2
 8013338:	d136      	bne.n	80133a8 <HAL_ADC_Start_DMA+0x1f0>
 801333a:	4b20      	ldr	r3, [pc, #128]	; (80133bc <HAL_ADC_Start_DMA+0x204>)
 801333c:	685b      	ldr	r3, [r3, #4]
 801333e:	f003 0310 	and.w	r3, r3, #16
 8013342:	2b00      	cmp	r3, #0
 8013344:	d130      	bne.n	80133a8 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8013346:	68fb      	ldr	r3, [r7, #12]
 8013348:	681b      	ldr	r3, [r3, #0]
 801334a:	689b      	ldr	r3, [r3, #8]
 801334c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8013350:	2b00      	cmp	r3, #0
 8013352:	d129      	bne.n	80133a8 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8013354:	68fb      	ldr	r3, [r7, #12]
 8013356:	681b      	ldr	r3, [r3, #0]
 8013358:	689a      	ldr	r2, [r3, #8]
 801335a:	68fb      	ldr	r3, [r7, #12]
 801335c:	681b      	ldr	r3, [r3, #0]
 801335e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8013362:	609a      	str	r2, [r3, #8]
 8013364:	e020      	b.n	80133a8 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8013366:	68fb      	ldr	r3, [r7, #12]
 8013368:	681b      	ldr	r3, [r3, #0]
 801336a:	4a18      	ldr	r2, [pc, #96]	; (80133cc <HAL_ADC_Start_DMA+0x214>)
 801336c:	4293      	cmp	r3, r2
 801336e:	d11b      	bne.n	80133a8 <HAL_ADC_Start_DMA+0x1f0>
 8013370:	68fb      	ldr	r3, [r7, #12]
 8013372:	681b      	ldr	r3, [r3, #0]
 8013374:	689b      	ldr	r3, [r3, #8]
 8013376:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801337a:	2b00      	cmp	r3, #0
 801337c:	d114      	bne.n	80133a8 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 801337e:	68fb      	ldr	r3, [r7, #12]
 8013380:	681b      	ldr	r3, [r3, #0]
 8013382:	689a      	ldr	r2, [r3, #8]
 8013384:	68fb      	ldr	r3, [r7, #12]
 8013386:	681b      	ldr	r3, [r3, #0]
 8013388:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 801338c:	609a      	str	r2, [r3, #8]
 801338e:	e00b      	b.n	80133a8 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8013390:	68fb      	ldr	r3, [r7, #12]
 8013392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013394:	f043 0210 	orr.w	r2, r3, #16
 8013398:	68fb      	ldr	r3, [r7, #12]
 801339a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801339c:	68fb      	ldr	r3, [r7, #12]
 801339e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80133a0:	f043 0201 	orr.w	r2, r3, #1
 80133a4:	68fb      	ldr	r3, [r7, #12]
 80133a6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80133a8:	2300      	movs	r3, #0
}
 80133aa:	4618      	mov	r0, r3
 80133ac:	3718      	adds	r7, #24
 80133ae:	46bd      	mov	sp, r7
 80133b0:	bd80      	pop	{r7, pc}
 80133b2:	bf00      	nop
 80133b4:	20000008 	.word	0x20000008
 80133b8:	431bde83 	.word	0x431bde83
 80133bc:	40012300 	.word	0x40012300
 80133c0:	08013851 	.word	0x08013851
 80133c4:	0801390b 	.word	0x0801390b
 80133c8:	08013927 	.word	0x08013927
 80133cc:	40012000 	.word	0x40012000
 80133d0:	40012100 	.word	0x40012100
 80133d4:	40012200 	.word	0x40012200

080133d8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80133d8:	b480      	push	{r7}
 80133da:	b083      	sub	sp, #12
 80133dc:	af00      	add	r7, sp, #0
 80133de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80133e0:	bf00      	nop
 80133e2:	370c      	adds	r7, #12
 80133e4:	46bd      	mov	sp, r7
 80133e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133ea:	4770      	bx	lr

080133ec <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80133ec:	b480      	push	{r7}
 80133ee:	b083      	sub	sp, #12
 80133f0:	af00      	add	r7, sp, #0
 80133f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80133f4:	bf00      	nop
 80133f6:	370c      	adds	r7, #12
 80133f8:	46bd      	mov	sp, r7
 80133fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133fe:	4770      	bx	lr

08013400 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8013400:	b480      	push	{r7}
 8013402:	b083      	sub	sp, #12
 8013404:	af00      	add	r7, sp, #0
 8013406:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8013408:	bf00      	nop
 801340a:	370c      	adds	r7, #12
 801340c:	46bd      	mov	sp, r7
 801340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013412:	4770      	bx	lr

08013414 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8013414:	b480      	push	{r7}
 8013416:	b085      	sub	sp, #20
 8013418:	af00      	add	r7, sp, #0
 801341a:	6078      	str	r0, [r7, #4]
 801341c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 801341e:	2300      	movs	r3, #0
 8013420:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013428:	2b01      	cmp	r3, #1
 801342a:	d101      	bne.n	8013430 <HAL_ADC_ConfigChannel+0x1c>
 801342c:	2302      	movs	r3, #2
 801342e:	e105      	b.n	801363c <HAL_ADC_ConfigChannel+0x228>
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	2201      	movs	r2, #1
 8013434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8013438:	683b      	ldr	r3, [r7, #0]
 801343a:	681b      	ldr	r3, [r3, #0]
 801343c:	2b09      	cmp	r3, #9
 801343e:	d925      	bls.n	801348c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	681b      	ldr	r3, [r3, #0]
 8013444:	68d9      	ldr	r1, [r3, #12]
 8013446:	683b      	ldr	r3, [r7, #0]
 8013448:	681b      	ldr	r3, [r3, #0]
 801344a:	b29b      	uxth	r3, r3
 801344c:	461a      	mov	r2, r3
 801344e:	4613      	mov	r3, r2
 8013450:	005b      	lsls	r3, r3, #1
 8013452:	4413      	add	r3, r2
 8013454:	3b1e      	subs	r3, #30
 8013456:	2207      	movs	r2, #7
 8013458:	fa02 f303 	lsl.w	r3, r2, r3
 801345c:	43da      	mvns	r2, r3
 801345e:	687b      	ldr	r3, [r7, #4]
 8013460:	681b      	ldr	r3, [r3, #0]
 8013462:	400a      	ands	r2, r1
 8013464:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	681b      	ldr	r3, [r3, #0]
 801346a:	68d9      	ldr	r1, [r3, #12]
 801346c:	683b      	ldr	r3, [r7, #0]
 801346e:	689a      	ldr	r2, [r3, #8]
 8013470:	683b      	ldr	r3, [r7, #0]
 8013472:	681b      	ldr	r3, [r3, #0]
 8013474:	b29b      	uxth	r3, r3
 8013476:	4618      	mov	r0, r3
 8013478:	4603      	mov	r3, r0
 801347a:	005b      	lsls	r3, r3, #1
 801347c:	4403      	add	r3, r0
 801347e:	3b1e      	subs	r3, #30
 8013480:	409a      	lsls	r2, r3
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	681b      	ldr	r3, [r3, #0]
 8013486:	430a      	orrs	r2, r1
 8013488:	60da      	str	r2, [r3, #12]
 801348a:	e022      	b.n	80134d2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	681b      	ldr	r3, [r3, #0]
 8013490:	6919      	ldr	r1, [r3, #16]
 8013492:	683b      	ldr	r3, [r7, #0]
 8013494:	681b      	ldr	r3, [r3, #0]
 8013496:	b29b      	uxth	r3, r3
 8013498:	461a      	mov	r2, r3
 801349a:	4613      	mov	r3, r2
 801349c:	005b      	lsls	r3, r3, #1
 801349e:	4413      	add	r3, r2
 80134a0:	2207      	movs	r2, #7
 80134a2:	fa02 f303 	lsl.w	r3, r2, r3
 80134a6:	43da      	mvns	r2, r3
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	681b      	ldr	r3, [r3, #0]
 80134ac:	400a      	ands	r2, r1
 80134ae:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	681b      	ldr	r3, [r3, #0]
 80134b4:	6919      	ldr	r1, [r3, #16]
 80134b6:	683b      	ldr	r3, [r7, #0]
 80134b8:	689a      	ldr	r2, [r3, #8]
 80134ba:	683b      	ldr	r3, [r7, #0]
 80134bc:	681b      	ldr	r3, [r3, #0]
 80134be:	b29b      	uxth	r3, r3
 80134c0:	4618      	mov	r0, r3
 80134c2:	4603      	mov	r3, r0
 80134c4:	005b      	lsls	r3, r3, #1
 80134c6:	4403      	add	r3, r0
 80134c8:	409a      	lsls	r2, r3
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	681b      	ldr	r3, [r3, #0]
 80134ce:	430a      	orrs	r2, r1
 80134d0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80134d2:	683b      	ldr	r3, [r7, #0]
 80134d4:	685b      	ldr	r3, [r3, #4]
 80134d6:	2b06      	cmp	r3, #6
 80134d8:	d824      	bhi.n	8013524 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80134da:	687b      	ldr	r3, [r7, #4]
 80134dc:	681b      	ldr	r3, [r3, #0]
 80134de:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80134e0:	683b      	ldr	r3, [r7, #0]
 80134e2:	685a      	ldr	r2, [r3, #4]
 80134e4:	4613      	mov	r3, r2
 80134e6:	009b      	lsls	r3, r3, #2
 80134e8:	4413      	add	r3, r2
 80134ea:	3b05      	subs	r3, #5
 80134ec:	221f      	movs	r2, #31
 80134ee:	fa02 f303 	lsl.w	r3, r2, r3
 80134f2:	43da      	mvns	r2, r3
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	681b      	ldr	r3, [r3, #0]
 80134f8:	400a      	ands	r2, r1
 80134fa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80134fc:	687b      	ldr	r3, [r7, #4]
 80134fe:	681b      	ldr	r3, [r3, #0]
 8013500:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8013502:	683b      	ldr	r3, [r7, #0]
 8013504:	681b      	ldr	r3, [r3, #0]
 8013506:	b29b      	uxth	r3, r3
 8013508:	4618      	mov	r0, r3
 801350a:	683b      	ldr	r3, [r7, #0]
 801350c:	685a      	ldr	r2, [r3, #4]
 801350e:	4613      	mov	r3, r2
 8013510:	009b      	lsls	r3, r3, #2
 8013512:	4413      	add	r3, r2
 8013514:	3b05      	subs	r3, #5
 8013516:	fa00 f203 	lsl.w	r2, r0, r3
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	681b      	ldr	r3, [r3, #0]
 801351e:	430a      	orrs	r2, r1
 8013520:	635a      	str	r2, [r3, #52]	; 0x34
 8013522:	e04c      	b.n	80135be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8013524:	683b      	ldr	r3, [r7, #0]
 8013526:	685b      	ldr	r3, [r3, #4]
 8013528:	2b0c      	cmp	r3, #12
 801352a:	d824      	bhi.n	8013576 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	681b      	ldr	r3, [r3, #0]
 8013530:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8013532:	683b      	ldr	r3, [r7, #0]
 8013534:	685a      	ldr	r2, [r3, #4]
 8013536:	4613      	mov	r3, r2
 8013538:	009b      	lsls	r3, r3, #2
 801353a:	4413      	add	r3, r2
 801353c:	3b23      	subs	r3, #35	; 0x23
 801353e:	221f      	movs	r2, #31
 8013540:	fa02 f303 	lsl.w	r3, r2, r3
 8013544:	43da      	mvns	r2, r3
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	681b      	ldr	r3, [r3, #0]
 801354a:	400a      	ands	r2, r1
 801354c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	681b      	ldr	r3, [r3, #0]
 8013552:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8013554:	683b      	ldr	r3, [r7, #0]
 8013556:	681b      	ldr	r3, [r3, #0]
 8013558:	b29b      	uxth	r3, r3
 801355a:	4618      	mov	r0, r3
 801355c:	683b      	ldr	r3, [r7, #0]
 801355e:	685a      	ldr	r2, [r3, #4]
 8013560:	4613      	mov	r3, r2
 8013562:	009b      	lsls	r3, r3, #2
 8013564:	4413      	add	r3, r2
 8013566:	3b23      	subs	r3, #35	; 0x23
 8013568:	fa00 f203 	lsl.w	r2, r0, r3
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	681b      	ldr	r3, [r3, #0]
 8013570:	430a      	orrs	r2, r1
 8013572:	631a      	str	r2, [r3, #48]	; 0x30
 8013574:	e023      	b.n	80135be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	681b      	ldr	r3, [r3, #0]
 801357a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801357c:	683b      	ldr	r3, [r7, #0]
 801357e:	685a      	ldr	r2, [r3, #4]
 8013580:	4613      	mov	r3, r2
 8013582:	009b      	lsls	r3, r3, #2
 8013584:	4413      	add	r3, r2
 8013586:	3b41      	subs	r3, #65	; 0x41
 8013588:	221f      	movs	r2, #31
 801358a:	fa02 f303 	lsl.w	r3, r2, r3
 801358e:	43da      	mvns	r2, r3
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	681b      	ldr	r3, [r3, #0]
 8013594:	400a      	ands	r2, r1
 8013596:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	681b      	ldr	r3, [r3, #0]
 801359c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801359e:	683b      	ldr	r3, [r7, #0]
 80135a0:	681b      	ldr	r3, [r3, #0]
 80135a2:	b29b      	uxth	r3, r3
 80135a4:	4618      	mov	r0, r3
 80135a6:	683b      	ldr	r3, [r7, #0]
 80135a8:	685a      	ldr	r2, [r3, #4]
 80135aa:	4613      	mov	r3, r2
 80135ac:	009b      	lsls	r3, r3, #2
 80135ae:	4413      	add	r3, r2
 80135b0:	3b41      	subs	r3, #65	; 0x41
 80135b2:	fa00 f203 	lsl.w	r2, r0, r3
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	681b      	ldr	r3, [r3, #0]
 80135ba:	430a      	orrs	r2, r1
 80135bc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80135be:	4b22      	ldr	r3, [pc, #136]	; (8013648 <HAL_ADC_ConfigChannel+0x234>)
 80135c0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	681b      	ldr	r3, [r3, #0]
 80135c6:	4a21      	ldr	r2, [pc, #132]	; (801364c <HAL_ADC_ConfigChannel+0x238>)
 80135c8:	4293      	cmp	r3, r2
 80135ca:	d109      	bne.n	80135e0 <HAL_ADC_ConfigChannel+0x1cc>
 80135cc:	683b      	ldr	r3, [r7, #0]
 80135ce:	681b      	ldr	r3, [r3, #0]
 80135d0:	2b12      	cmp	r3, #18
 80135d2:	d105      	bne.n	80135e0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80135d4:	68fb      	ldr	r3, [r7, #12]
 80135d6:	685b      	ldr	r3, [r3, #4]
 80135d8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80135dc:	68fb      	ldr	r3, [r7, #12]
 80135de:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	681b      	ldr	r3, [r3, #0]
 80135e4:	4a19      	ldr	r2, [pc, #100]	; (801364c <HAL_ADC_ConfigChannel+0x238>)
 80135e6:	4293      	cmp	r3, r2
 80135e8:	d123      	bne.n	8013632 <HAL_ADC_ConfigChannel+0x21e>
 80135ea:	683b      	ldr	r3, [r7, #0]
 80135ec:	681b      	ldr	r3, [r3, #0]
 80135ee:	2b10      	cmp	r3, #16
 80135f0:	d003      	beq.n	80135fa <HAL_ADC_ConfigChannel+0x1e6>
 80135f2:	683b      	ldr	r3, [r7, #0]
 80135f4:	681b      	ldr	r3, [r3, #0]
 80135f6:	2b11      	cmp	r3, #17
 80135f8:	d11b      	bne.n	8013632 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80135fa:	68fb      	ldr	r3, [r7, #12]
 80135fc:	685b      	ldr	r3, [r3, #4]
 80135fe:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8013602:	68fb      	ldr	r3, [r7, #12]
 8013604:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8013606:	683b      	ldr	r3, [r7, #0]
 8013608:	681b      	ldr	r3, [r3, #0]
 801360a:	2b10      	cmp	r3, #16
 801360c:	d111      	bne.n	8013632 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 801360e:	4b10      	ldr	r3, [pc, #64]	; (8013650 <HAL_ADC_ConfigChannel+0x23c>)
 8013610:	681b      	ldr	r3, [r3, #0]
 8013612:	4a10      	ldr	r2, [pc, #64]	; (8013654 <HAL_ADC_ConfigChannel+0x240>)
 8013614:	fba2 2303 	umull	r2, r3, r2, r3
 8013618:	0c9a      	lsrs	r2, r3, #18
 801361a:	4613      	mov	r3, r2
 801361c:	009b      	lsls	r3, r3, #2
 801361e:	4413      	add	r3, r2
 8013620:	005b      	lsls	r3, r3, #1
 8013622:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8013624:	e002      	b.n	801362c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8013626:	68bb      	ldr	r3, [r7, #8]
 8013628:	3b01      	subs	r3, #1
 801362a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 801362c:	68bb      	ldr	r3, [r7, #8]
 801362e:	2b00      	cmp	r3, #0
 8013630:	d1f9      	bne.n	8013626 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	2200      	movs	r2, #0
 8013636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 801363a:	2300      	movs	r3, #0
}
 801363c:	4618      	mov	r0, r3
 801363e:	3714      	adds	r7, #20
 8013640:	46bd      	mov	sp, r7
 8013642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013646:	4770      	bx	lr
 8013648:	40012300 	.word	0x40012300
 801364c:	40012000 	.word	0x40012000
 8013650:	20000008 	.word	0x20000008
 8013654:	431bde83 	.word	0x431bde83

08013658 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8013658:	b480      	push	{r7}
 801365a:	b085      	sub	sp, #20
 801365c:	af00      	add	r7, sp, #0
 801365e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8013660:	4b79      	ldr	r3, [pc, #484]	; (8013848 <ADC_Init+0x1f0>)
 8013662:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8013664:	68fb      	ldr	r3, [r7, #12]
 8013666:	685b      	ldr	r3, [r3, #4]
 8013668:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 801366c:	68fb      	ldr	r3, [r7, #12]
 801366e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8013670:	68fb      	ldr	r3, [r7, #12]
 8013672:	685a      	ldr	r2, [r3, #4]
 8013674:	687b      	ldr	r3, [r7, #4]
 8013676:	685b      	ldr	r3, [r3, #4]
 8013678:	431a      	orrs	r2, r3
 801367a:	68fb      	ldr	r3, [r7, #12]
 801367c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	681b      	ldr	r3, [r3, #0]
 8013682:	685a      	ldr	r2, [r3, #4]
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	681b      	ldr	r3, [r3, #0]
 8013688:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801368c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 801368e:	687b      	ldr	r3, [r7, #4]
 8013690:	681b      	ldr	r3, [r3, #0]
 8013692:	6859      	ldr	r1, [r3, #4]
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	691b      	ldr	r3, [r3, #16]
 8013698:	021a      	lsls	r2, r3, #8
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	681b      	ldr	r3, [r3, #0]
 801369e:	430a      	orrs	r2, r1
 80136a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80136a2:	687b      	ldr	r3, [r7, #4]
 80136a4:	681b      	ldr	r3, [r3, #0]
 80136a6:	685a      	ldr	r2, [r3, #4]
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	681b      	ldr	r3, [r3, #0]
 80136ac:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80136b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	681b      	ldr	r3, [r3, #0]
 80136b6:	6859      	ldr	r1, [r3, #4]
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	689a      	ldr	r2, [r3, #8]
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	681b      	ldr	r3, [r3, #0]
 80136c0:	430a      	orrs	r2, r1
 80136c2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	681b      	ldr	r3, [r3, #0]
 80136c8:	689a      	ldr	r2, [r3, #8]
 80136ca:	687b      	ldr	r3, [r7, #4]
 80136cc:	681b      	ldr	r3, [r3, #0]
 80136ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80136d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	681b      	ldr	r3, [r3, #0]
 80136d8:	6899      	ldr	r1, [r3, #8]
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	68da      	ldr	r2, [r3, #12]
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	681b      	ldr	r3, [r3, #0]
 80136e2:	430a      	orrs	r2, r1
 80136e4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80136ea:	4a58      	ldr	r2, [pc, #352]	; (801384c <ADC_Init+0x1f4>)
 80136ec:	4293      	cmp	r3, r2
 80136ee:	d022      	beq.n	8013736 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	681b      	ldr	r3, [r3, #0]
 80136f4:	689a      	ldr	r2, [r3, #8]
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	681b      	ldr	r3, [r3, #0]
 80136fa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80136fe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8013700:	687b      	ldr	r3, [r7, #4]
 8013702:	681b      	ldr	r3, [r3, #0]
 8013704:	6899      	ldr	r1, [r3, #8]
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	681b      	ldr	r3, [r3, #0]
 801370e:	430a      	orrs	r2, r1
 8013710:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	681b      	ldr	r3, [r3, #0]
 8013716:	689a      	ldr	r2, [r3, #8]
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	681b      	ldr	r3, [r3, #0]
 801371c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8013720:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	681b      	ldr	r3, [r3, #0]
 8013726:	6899      	ldr	r1, [r3, #8]
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801372c:	687b      	ldr	r3, [r7, #4]
 801372e:	681b      	ldr	r3, [r3, #0]
 8013730:	430a      	orrs	r2, r1
 8013732:	609a      	str	r2, [r3, #8]
 8013734:	e00f      	b.n	8013756 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	681b      	ldr	r3, [r3, #0]
 801373a:	689a      	ldr	r2, [r3, #8]
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	681b      	ldr	r3, [r3, #0]
 8013740:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8013744:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	681b      	ldr	r3, [r3, #0]
 801374a:	689a      	ldr	r2, [r3, #8]
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	681b      	ldr	r3, [r3, #0]
 8013750:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8013754:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8013756:	687b      	ldr	r3, [r7, #4]
 8013758:	681b      	ldr	r3, [r3, #0]
 801375a:	689a      	ldr	r2, [r3, #8]
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	681b      	ldr	r3, [r3, #0]
 8013760:	f022 0202 	bic.w	r2, r2, #2
 8013764:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	681b      	ldr	r3, [r3, #0]
 801376a:	6899      	ldr	r1, [r3, #8]
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	7e1b      	ldrb	r3, [r3, #24]
 8013770:	005a      	lsls	r2, r3, #1
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	681b      	ldr	r3, [r3, #0]
 8013776:	430a      	orrs	r2, r1
 8013778:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013780:	2b00      	cmp	r3, #0
 8013782:	d01b      	beq.n	80137bc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	681b      	ldr	r3, [r3, #0]
 8013788:	685a      	ldr	r2, [r3, #4]
 801378a:	687b      	ldr	r3, [r7, #4]
 801378c:	681b      	ldr	r3, [r3, #0]
 801378e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8013792:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	681b      	ldr	r3, [r3, #0]
 8013798:	685a      	ldr	r2, [r3, #4]
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	681b      	ldr	r3, [r3, #0]
 801379e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80137a2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	681b      	ldr	r3, [r3, #0]
 80137a8:	6859      	ldr	r1, [r3, #4]
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80137ae:	3b01      	subs	r3, #1
 80137b0:	035a      	lsls	r2, r3, #13
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	681b      	ldr	r3, [r3, #0]
 80137b6:	430a      	orrs	r2, r1
 80137b8:	605a      	str	r2, [r3, #4]
 80137ba:	e007      	b.n	80137cc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	681b      	ldr	r3, [r3, #0]
 80137c0:	685a      	ldr	r2, [r3, #4]
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	681b      	ldr	r3, [r3, #0]
 80137c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80137ca:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	681b      	ldr	r3, [r3, #0]
 80137d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	681b      	ldr	r3, [r3, #0]
 80137d6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80137da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	681b      	ldr	r3, [r3, #0]
 80137e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	69db      	ldr	r3, [r3, #28]
 80137e6:	3b01      	subs	r3, #1
 80137e8:	051a      	lsls	r2, r3, #20
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	681b      	ldr	r3, [r3, #0]
 80137ee:	430a      	orrs	r2, r1
 80137f0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	681b      	ldr	r3, [r3, #0]
 80137f6:	689a      	ldr	r2, [r3, #8]
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	681b      	ldr	r3, [r3, #0]
 80137fc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8013800:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8013802:	687b      	ldr	r3, [r7, #4]
 8013804:	681b      	ldr	r3, [r3, #0]
 8013806:	6899      	ldr	r1, [r3, #8]
 8013808:	687b      	ldr	r3, [r7, #4]
 801380a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801380e:	025a      	lsls	r2, r3, #9
 8013810:	687b      	ldr	r3, [r7, #4]
 8013812:	681b      	ldr	r3, [r3, #0]
 8013814:	430a      	orrs	r2, r1
 8013816:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	681b      	ldr	r3, [r3, #0]
 801381c:	689a      	ldr	r2, [r3, #8]
 801381e:	687b      	ldr	r3, [r7, #4]
 8013820:	681b      	ldr	r3, [r3, #0]
 8013822:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013826:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8013828:	687b      	ldr	r3, [r7, #4]
 801382a:	681b      	ldr	r3, [r3, #0]
 801382c:	6899      	ldr	r1, [r3, #8]
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	695b      	ldr	r3, [r3, #20]
 8013832:	029a      	lsls	r2, r3, #10
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	681b      	ldr	r3, [r3, #0]
 8013838:	430a      	orrs	r2, r1
 801383a:	609a      	str	r2, [r3, #8]
}
 801383c:	bf00      	nop
 801383e:	3714      	adds	r7, #20
 8013840:	46bd      	mov	sp, r7
 8013842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013846:	4770      	bx	lr
 8013848:	40012300 	.word	0x40012300
 801384c:	0f000001 	.word	0x0f000001

08013850 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8013850:	b580      	push	{r7, lr}
 8013852:	b084      	sub	sp, #16
 8013854:	af00      	add	r7, sp, #0
 8013856:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801385c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 801385e:	68fb      	ldr	r3, [r7, #12]
 8013860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013862:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8013866:	2b00      	cmp	r3, #0
 8013868:	d13c      	bne.n	80138e4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 801386a:	68fb      	ldr	r3, [r7, #12]
 801386c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801386e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8013872:	68fb      	ldr	r3, [r7, #12]
 8013874:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8013876:	68fb      	ldr	r3, [r7, #12]
 8013878:	681b      	ldr	r3, [r3, #0]
 801387a:	689b      	ldr	r3, [r3, #8]
 801387c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8013880:	2b00      	cmp	r3, #0
 8013882:	d12b      	bne.n	80138dc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8013884:	68fb      	ldr	r3, [r7, #12]
 8013886:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8013888:	2b00      	cmp	r3, #0
 801388a:	d127      	bne.n	80138dc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 801388c:	68fb      	ldr	r3, [r7, #12]
 801388e:	681b      	ldr	r3, [r3, #0]
 8013890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013892:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8013896:	2b00      	cmp	r3, #0
 8013898:	d006      	beq.n	80138a8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 801389a:	68fb      	ldr	r3, [r7, #12]
 801389c:	681b      	ldr	r3, [r3, #0]
 801389e:	689b      	ldr	r3, [r3, #8]
 80138a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80138a4:	2b00      	cmp	r3, #0
 80138a6:	d119      	bne.n	80138dc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80138a8:	68fb      	ldr	r3, [r7, #12]
 80138aa:	681b      	ldr	r3, [r3, #0]
 80138ac:	685a      	ldr	r2, [r3, #4]
 80138ae:	68fb      	ldr	r3, [r7, #12]
 80138b0:	681b      	ldr	r3, [r3, #0]
 80138b2:	f022 0220 	bic.w	r2, r2, #32
 80138b6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80138b8:	68fb      	ldr	r3, [r7, #12]
 80138ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80138bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80138c0:	68fb      	ldr	r3, [r7, #12]
 80138c2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80138c4:	68fb      	ldr	r3, [r7, #12]
 80138c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80138c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80138cc:	2b00      	cmp	r3, #0
 80138ce:	d105      	bne.n	80138dc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80138d0:	68fb      	ldr	r3, [r7, #12]
 80138d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80138d4:	f043 0201 	orr.w	r2, r3, #1
 80138d8:	68fb      	ldr	r3, [r7, #12]
 80138da:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80138dc:	68f8      	ldr	r0, [r7, #12]
 80138de:	f7fd fb99 	bl	8011014 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80138e2:	e00e      	b.n	8013902 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80138e4:	68fb      	ldr	r3, [r7, #12]
 80138e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80138e8:	f003 0310 	and.w	r3, r3, #16
 80138ec:	2b00      	cmp	r3, #0
 80138ee:	d003      	beq.n	80138f8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80138f0:	68f8      	ldr	r0, [r7, #12]
 80138f2:	f7ff fd85 	bl	8013400 <HAL_ADC_ErrorCallback>
}
 80138f6:	e004      	b.n	8013902 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80138f8:	68fb      	ldr	r3, [r7, #12]
 80138fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80138fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80138fe:	6878      	ldr	r0, [r7, #4]
 8013900:	4798      	blx	r3
}
 8013902:	bf00      	nop
 8013904:	3710      	adds	r7, #16
 8013906:	46bd      	mov	sp, r7
 8013908:	bd80      	pop	{r7, pc}

0801390a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 801390a:	b580      	push	{r7, lr}
 801390c:	b084      	sub	sp, #16
 801390e:	af00      	add	r7, sp, #0
 8013910:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013916:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8013918:	68f8      	ldr	r0, [r7, #12]
 801391a:	f7ff fd5d 	bl	80133d8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 801391e:	bf00      	nop
 8013920:	3710      	adds	r7, #16
 8013922:	46bd      	mov	sp, r7
 8013924:	bd80      	pop	{r7, pc}

08013926 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8013926:	b580      	push	{r7, lr}
 8013928:	b084      	sub	sp, #16
 801392a:	af00      	add	r7, sp, #0
 801392c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013932:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8013934:	68fb      	ldr	r3, [r7, #12]
 8013936:	2240      	movs	r2, #64	; 0x40
 8013938:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 801393a:	68fb      	ldr	r3, [r7, #12]
 801393c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801393e:	f043 0204 	orr.w	r2, r3, #4
 8013942:	68fb      	ldr	r3, [r7, #12]
 8013944:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8013946:	68f8      	ldr	r0, [r7, #12]
 8013948:	f7ff fd5a 	bl	8013400 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 801394c:	bf00      	nop
 801394e:	3710      	adds	r7, #16
 8013950:	46bd      	mov	sp, r7
 8013952:	bd80      	pop	{r7, pc}

08013954 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8013954:	b480      	push	{r7}
 8013956:	b083      	sub	sp, #12
 8013958:	af00      	add	r7, sp, #0
 801395a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 801395c:	bf00      	nop
 801395e:	370c      	adds	r7, #12
 8013960:	46bd      	mov	sp, r7
 8013962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013966:	4770      	bx	lr

08013968 <__NVIC_SetPriorityGrouping>:
{
 8013968:	b480      	push	{r7}
 801396a:	b085      	sub	sp, #20
 801396c:	af00      	add	r7, sp, #0
 801396e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	f003 0307 	and.w	r3, r3, #7
 8013976:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8013978:	4b0c      	ldr	r3, [pc, #48]	; (80139ac <__NVIC_SetPriorityGrouping+0x44>)
 801397a:	68db      	ldr	r3, [r3, #12]
 801397c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801397e:	68ba      	ldr	r2, [r7, #8]
 8013980:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8013984:	4013      	ands	r3, r2
 8013986:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8013988:	68fb      	ldr	r3, [r7, #12]
 801398a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801398c:	68bb      	ldr	r3, [r7, #8]
 801398e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8013990:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8013994:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8013998:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801399a:	4a04      	ldr	r2, [pc, #16]	; (80139ac <__NVIC_SetPriorityGrouping+0x44>)
 801399c:	68bb      	ldr	r3, [r7, #8]
 801399e:	60d3      	str	r3, [r2, #12]
}
 80139a0:	bf00      	nop
 80139a2:	3714      	adds	r7, #20
 80139a4:	46bd      	mov	sp, r7
 80139a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139aa:	4770      	bx	lr
 80139ac:	e000ed00 	.word	0xe000ed00

080139b0 <__NVIC_GetPriorityGrouping>:
{
 80139b0:	b480      	push	{r7}
 80139b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80139b4:	4b04      	ldr	r3, [pc, #16]	; (80139c8 <__NVIC_GetPriorityGrouping+0x18>)
 80139b6:	68db      	ldr	r3, [r3, #12]
 80139b8:	0a1b      	lsrs	r3, r3, #8
 80139ba:	f003 0307 	and.w	r3, r3, #7
}
 80139be:	4618      	mov	r0, r3
 80139c0:	46bd      	mov	sp, r7
 80139c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139c6:	4770      	bx	lr
 80139c8:	e000ed00 	.word	0xe000ed00

080139cc <__NVIC_EnableIRQ>:
{
 80139cc:	b480      	push	{r7}
 80139ce:	b083      	sub	sp, #12
 80139d0:	af00      	add	r7, sp, #0
 80139d2:	4603      	mov	r3, r0
 80139d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80139d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80139da:	2b00      	cmp	r3, #0
 80139dc:	db0b      	blt.n	80139f6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80139de:	79fb      	ldrb	r3, [r7, #7]
 80139e0:	f003 021f 	and.w	r2, r3, #31
 80139e4:	4907      	ldr	r1, [pc, #28]	; (8013a04 <__NVIC_EnableIRQ+0x38>)
 80139e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80139ea:	095b      	lsrs	r3, r3, #5
 80139ec:	2001      	movs	r0, #1
 80139ee:	fa00 f202 	lsl.w	r2, r0, r2
 80139f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80139f6:	bf00      	nop
 80139f8:	370c      	adds	r7, #12
 80139fa:	46bd      	mov	sp, r7
 80139fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a00:	4770      	bx	lr
 8013a02:	bf00      	nop
 8013a04:	e000e100 	.word	0xe000e100

08013a08 <__NVIC_SetPriority>:
{
 8013a08:	b480      	push	{r7}
 8013a0a:	b083      	sub	sp, #12
 8013a0c:	af00      	add	r7, sp, #0
 8013a0e:	4603      	mov	r3, r0
 8013a10:	6039      	str	r1, [r7, #0]
 8013a12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8013a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013a18:	2b00      	cmp	r3, #0
 8013a1a:	db0a      	blt.n	8013a32 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8013a1c:	683b      	ldr	r3, [r7, #0]
 8013a1e:	b2da      	uxtb	r2, r3
 8013a20:	490c      	ldr	r1, [pc, #48]	; (8013a54 <__NVIC_SetPriority+0x4c>)
 8013a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013a26:	0112      	lsls	r2, r2, #4
 8013a28:	b2d2      	uxtb	r2, r2
 8013a2a:	440b      	add	r3, r1
 8013a2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8013a30:	e00a      	b.n	8013a48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8013a32:	683b      	ldr	r3, [r7, #0]
 8013a34:	b2da      	uxtb	r2, r3
 8013a36:	4908      	ldr	r1, [pc, #32]	; (8013a58 <__NVIC_SetPriority+0x50>)
 8013a38:	79fb      	ldrb	r3, [r7, #7]
 8013a3a:	f003 030f 	and.w	r3, r3, #15
 8013a3e:	3b04      	subs	r3, #4
 8013a40:	0112      	lsls	r2, r2, #4
 8013a42:	b2d2      	uxtb	r2, r2
 8013a44:	440b      	add	r3, r1
 8013a46:	761a      	strb	r2, [r3, #24]
}
 8013a48:	bf00      	nop
 8013a4a:	370c      	adds	r7, #12
 8013a4c:	46bd      	mov	sp, r7
 8013a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a52:	4770      	bx	lr
 8013a54:	e000e100 	.word	0xe000e100
 8013a58:	e000ed00 	.word	0xe000ed00

08013a5c <NVIC_EncodePriority>:
{
 8013a5c:	b480      	push	{r7}
 8013a5e:	b089      	sub	sp, #36	; 0x24
 8013a60:	af00      	add	r7, sp, #0
 8013a62:	60f8      	str	r0, [r7, #12]
 8013a64:	60b9      	str	r1, [r7, #8]
 8013a66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8013a68:	68fb      	ldr	r3, [r7, #12]
 8013a6a:	f003 0307 	and.w	r3, r3, #7
 8013a6e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8013a70:	69fb      	ldr	r3, [r7, #28]
 8013a72:	f1c3 0307 	rsb	r3, r3, #7
 8013a76:	2b04      	cmp	r3, #4
 8013a78:	bf28      	it	cs
 8013a7a:	2304      	movcs	r3, #4
 8013a7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8013a7e:	69fb      	ldr	r3, [r7, #28]
 8013a80:	3304      	adds	r3, #4
 8013a82:	2b06      	cmp	r3, #6
 8013a84:	d902      	bls.n	8013a8c <NVIC_EncodePriority+0x30>
 8013a86:	69fb      	ldr	r3, [r7, #28]
 8013a88:	3b03      	subs	r3, #3
 8013a8a:	e000      	b.n	8013a8e <NVIC_EncodePriority+0x32>
 8013a8c:	2300      	movs	r3, #0
 8013a8e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8013a90:	f04f 32ff 	mov.w	r2, #4294967295
 8013a94:	69bb      	ldr	r3, [r7, #24]
 8013a96:	fa02 f303 	lsl.w	r3, r2, r3
 8013a9a:	43da      	mvns	r2, r3
 8013a9c:	68bb      	ldr	r3, [r7, #8]
 8013a9e:	401a      	ands	r2, r3
 8013aa0:	697b      	ldr	r3, [r7, #20]
 8013aa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8013aa4:	f04f 31ff 	mov.w	r1, #4294967295
 8013aa8:	697b      	ldr	r3, [r7, #20]
 8013aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8013aae:	43d9      	mvns	r1, r3
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8013ab4:	4313      	orrs	r3, r2
}
 8013ab6:	4618      	mov	r0, r3
 8013ab8:	3724      	adds	r7, #36	; 0x24
 8013aba:	46bd      	mov	sp, r7
 8013abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ac0:	4770      	bx	lr

08013ac2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8013ac2:	b580      	push	{r7, lr}
 8013ac4:	b082      	sub	sp, #8
 8013ac6:	af00      	add	r7, sp, #0
 8013ac8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8013aca:	6878      	ldr	r0, [r7, #4]
 8013acc:	f7ff ff4c 	bl	8013968 <__NVIC_SetPriorityGrouping>
}
 8013ad0:	bf00      	nop
 8013ad2:	3708      	adds	r7, #8
 8013ad4:	46bd      	mov	sp, r7
 8013ad6:	bd80      	pop	{r7, pc}

08013ad8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8013ad8:	b580      	push	{r7, lr}
 8013ada:	b086      	sub	sp, #24
 8013adc:	af00      	add	r7, sp, #0
 8013ade:	4603      	mov	r3, r0
 8013ae0:	60b9      	str	r1, [r7, #8]
 8013ae2:	607a      	str	r2, [r7, #4]
 8013ae4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8013ae6:	2300      	movs	r3, #0
 8013ae8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8013aea:	f7ff ff61 	bl	80139b0 <__NVIC_GetPriorityGrouping>
 8013aee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8013af0:	687a      	ldr	r2, [r7, #4]
 8013af2:	68b9      	ldr	r1, [r7, #8]
 8013af4:	6978      	ldr	r0, [r7, #20]
 8013af6:	f7ff ffb1 	bl	8013a5c <NVIC_EncodePriority>
 8013afa:	4602      	mov	r2, r0
 8013afc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013b00:	4611      	mov	r1, r2
 8013b02:	4618      	mov	r0, r3
 8013b04:	f7ff ff80 	bl	8013a08 <__NVIC_SetPriority>
}
 8013b08:	bf00      	nop
 8013b0a:	3718      	adds	r7, #24
 8013b0c:	46bd      	mov	sp, r7
 8013b0e:	bd80      	pop	{r7, pc}

08013b10 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8013b10:	b580      	push	{r7, lr}
 8013b12:	b082      	sub	sp, #8
 8013b14:	af00      	add	r7, sp, #0
 8013b16:	4603      	mov	r3, r0
 8013b18:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8013b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013b1e:	4618      	mov	r0, r3
 8013b20:	f7ff ff54 	bl	80139cc <__NVIC_EnableIRQ>
}
 8013b24:	bf00      	nop
 8013b26:	3708      	adds	r7, #8
 8013b28:	46bd      	mov	sp, r7
 8013b2a:	bd80      	pop	{r7, pc}

08013b2c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8013b2c:	b580      	push	{r7, lr}
 8013b2e:	b086      	sub	sp, #24
 8013b30:	af00      	add	r7, sp, #0
 8013b32:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8013b34:	2300      	movs	r3, #0
 8013b36:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8013b38:	f7ff f9ba 	bl	8012eb0 <HAL_GetTick>
 8013b3c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	2b00      	cmp	r3, #0
 8013b42:	d101      	bne.n	8013b48 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8013b44:	2301      	movs	r3, #1
 8013b46:	e099      	b.n	8013c7c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8013b48:	687b      	ldr	r3, [r7, #4]
 8013b4a:	2202      	movs	r2, #2
 8013b4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	2200      	movs	r2, #0
 8013b54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8013b58:	687b      	ldr	r3, [r7, #4]
 8013b5a:	681b      	ldr	r3, [r3, #0]
 8013b5c:	681a      	ldr	r2, [r3, #0]
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	681b      	ldr	r3, [r3, #0]
 8013b62:	f022 0201 	bic.w	r2, r2, #1
 8013b66:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8013b68:	e00f      	b.n	8013b8a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8013b6a:	f7ff f9a1 	bl	8012eb0 <HAL_GetTick>
 8013b6e:	4602      	mov	r2, r0
 8013b70:	693b      	ldr	r3, [r7, #16]
 8013b72:	1ad3      	subs	r3, r2, r3
 8013b74:	2b05      	cmp	r3, #5
 8013b76:	d908      	bls.n	8013b8a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	2220      	movs	r2, #32
 8013b7c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	2203      	movs	r2, #3
 8013b82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8013b86:	2303      	movs	r3, #3
 8013b88:	e078      	b.n	8013c7c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8013b8a:	687b      	ldr	r3, [r7, #4]
 8013b8c:	681b      	ldr	r3, [r3, #0]
 8013b8e:	681b      	ldr	r3, [r3, #0]
 8013b90:	f003 0301 	and.w	r3, r3, #1
 8013b94:	2b00      	cmp	r3, #0
 8013b96:	d1e8      	bne.n	8013b6a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	681b      	ldr	r3, [r3, #0]
 8013b9c:	681b      	ldr	r3, [r3, #0]
 8013b9e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8013ba0:	697a      	ldr	r2, [r7, #20]
 8013ba2:	4b38      	ldr	r3, [pc, #224]	; (8013c84 <HAL_DMA_Init+0x158>)
 8013ba4:	4013      	ands	r3, r2
 8013ba6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	685a      	ldr	r2, [r3, #4]
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	689b      	ldr	r3, [r3, #8]
 8013bb0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8013bb2:	687b      	ldr	r3, [r7, #4]
 8013bb4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8013bb6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8013bb8:	687b      	ldr	r3, [r7, #4]
 8013bba:	691b      	ldr	r3, [r3, #16]
 8013bbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8013bc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	699b      	ldr	r3, [r3, #24]
 8013bc8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8013bce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	6a1b      	ldr	r3, [r3, #32]
 8013bd4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8013bd6:	697a      	ldr	r2, [r7, #20]
 8013bd8:	4313      	orrs	r3, r2
 8013bda:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8013bdc:	687b      	ldr	r3, [r7, #4]
 8013bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013be0:	2b04      	cmp	r3, #4
 8013be2:	d107      	bne.n	8013bf4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013bec:	4313      	orrs	r3, r2
 8013bee:	697a      	ldr	r2, [r7, #20]
 8013bf0:	4313      	orrs	r3, r2
 8013bf2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	681b      	ldr	r3, [r3, #0]
 8013bf8:	697a      	ldr	r2, [r7, #20]
 8013bfa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	681b      	ldr	r3, [r3, #0]
 8013c00:	695b      	ldr	r3, [r3, #20]
 8013c02:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8013c04:	697b      	ldr	r3, [r7, #20]
 8013c06:	f023 0307 	bic.w	r3, r3, #7
 8013c0a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c10:	697a      	ldr	r2, [r7, #20]
 8013c12:	4313      	orrs	r3, r2
 8013c14:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c1a:	2b04      	cmp	r3, #4
 8013c1c:	d117      	bne.n	8013c4e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8013c1e:	687b      	ldr	r3, [r7, #4]
 8013c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013c22:	697a      	ldr	r2, [r7, #20]
 8013c24:	4313      	orrs	r3, r2
 8013c26:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c2c:	2b00      	cmp	r3, #0
 8013c2e:	d00e      	beq.n	8013c4e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8013c30:	6878      	ldr	r0, [r7, #4]
 8013c32:	f000 fb01 	bl	8014238 <DMA_CheckFifoParam>
 8013c36:	4603      	mov	r3, r0
 8013c38:	2b00      	cmp	r3, #0
 8013c3a:	d008      	beq.n	8013c4e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	2240      	movs	r2, #64	; 0x40
 8013c40:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	2201      	movs	r2, #1
 8013c46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8013c4a:	2301      	movs	r3, #1
 8013c4c:	e016      	b.n	8013c7c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	681b      	ldr	r3, [r3, #0]
 8013c52:	697a      	ldr	r2, [r7, #20]
 8013c54:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8013c56:	6878      	ldr	r0, [r7, #4]
 8013c58:	f000 fab8 	bl	80141cc <DMA_CalcBaseAndBitshift>
 8013c5c:	4603      	mov	r3, r0
 8013c5e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013c64:	223f      	movs	r2, #63	; 0x3f
 8013c66:	409a      	lsls	r2, r3
 8013c68:	68fb      	ldr	r3, [r7, #12]
 8013c6a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	2200      	movs	r2, #0
 8013c70:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	2201      	movs	r2, #1
 8013c76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8013c7a:	2300      	movs	r3, #0
}
 8013c7c:	4618      	mov	r0, r3
 8013c7e:	3718      	adds	r7, #24
 8013c80:	46bd      	mov	sp, r7
 8013c82:	bd80      	pop	{r7, pc}
 8013c84:	f010803f 	.word	0xf010803f

08013c88 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8013c88:	b580      	push	{r7, lr}
 8013c8a:	b086      	sub	sp, #24
 8013c8c:	af00      	add	r7, sp, #0
 8013c8e:	60f8      	str	r0, [r7, #12]
 8013c90:	60b9      	str	r1, [r7, #8]
 8013c92:	607a      	str	r2, [r7, #4]
 8013c94:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8013c96:	2300      	movs	r3, #0
 8013c98:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8013c9a:	68fb      	ldr	r3, [r7, #12]
 8013c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013c9e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8013ca0:	68fb      	ldr	r3, [r7, #12]
 8013ca2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013ca6:	2b01      	cmp	r3, #1
 8013ca8:	d101      	bne.n	8013cae <HAL_DMA_Start_IT+0x26>
 8013caa:	2302      	movs	r3, #2
 8013cac:	e040      	b.n	8013d30 <HAL_DMA_Start_IT+0xa8>
 8013cae:	68fb      	ldr	r3, [r7, #12]
 8013cb0:	2201      	movs	r2, #1
 8013cb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8013cb6:	68fb      	ldr	r3, [r7, #12]
 8013cb8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8013cbc:	b2db      	uxtb	r3, r3
 8013cbe:	2b01      	cmp	r3, #1
 8013cc0:	d12f      	bne.n	8013d22 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8013cc2:	68fb      	ldr	r3, [r7, #12]
 8013cc4:	2202      	movs	r2, #2
 8013cc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8013cca:	68fb      	ldr	r3, [r7, #12]
 8013ccc:	2200      	movs	r2, #0
 8013cce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8013cd0:	683b      	ldr	r3, [r7, #0]
 8013cd2:	687a      	ldr	r2, [r7, #4]
 8013cd4:	68b9      	ldr	r1, [r7, #8]
 8013cd6:	68f8      	ldr	r0, [r7, #12]
 8013cd8:	f000 fa4a 	bl	8014170 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8013cdc:	68fb      	ldr	r3, [r7, #12]
 8013cde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013ce0:	223f      	movs	r2, #63	; 0x3f
 8013ce2:	409a      	lsls	r2, r3
 8013ce4:	693b      	ldr	r3, [r7, #16]
 8013ce6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8013ce8:	68fb      	ldr	r3, [r7, #12]
 8013cea:	681b      	ldr	r3, [r3, #0]
 8013cec:	681a      	ldr	r2, [r3, #0]
 8013cee:	68fb      	ldr	r3, [r7, #12]
 8013cf0:	681b      	ldr	r3, [r3, #0]
 8013cf2:	f042 0216 	orr.w	r2, r2, #22
 8013cf6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8013cf8:	68fb      	ldr	r3, [r7, #12]
 8013cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013cfc:	2b00      	cmp	r3, #0
 8013cfe:	d007      	beq.n	8013d10 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8013d00:	68fb      	ldr	r3, [r7, #12]
 8013d02:	681b      	ldr	r3, [r3, #0]
 8013d04:	681a      	ldr	r2, [r3, #0]
 8013d06:	68fb      	ldr	r3, [r7, #12]
 8013d08:	681b      	ldr	r3, [r3, #0]
 8013d0a:	f042 0208 	orr.w	r2, r2, #8
 8013d0e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8013d10:	68fb      	ldr	r3, [r7, #12]
 8013d12:	681b      	ldr	r3, [r3, #0]
 8013d14:	681a      	ldr	r2, [r3, #0]
 8013d16:	68fb      	ldr	r3, [r7, #12]
 8013d18:	681b      	ldr	r3, [r3, #0]
 8013d1a:	f042 0201 	orr.w	r2, r2, #1
 8013d1e:	601a      	str	r2, [r3, #0]
 8013d20:	e005      	b.n	8013d2e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8013d22:	68fb      	ldr	r3, [r7, #12]
 8013d24:	2200      	movs	r2, #0
 8013d26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8013d2a:	2302      	movs	r3, #2
 8013d2c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8013d2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013d30:	4618      	mov	r0, r3
 8013d32:	3718      	adds	r7, #24
 8013d34:	46bd      	mov	sp, r7
 8013d36:	bd80      	pop	{r7, pc}

08013d38 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8013d38:	b580      	push	{r7, lr}
 8013d3a:	b084      	sub	sp, #16
 8013d3c:	af00      	add	r7, sp, #0
 8013d3e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013d44:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8013d46:	f7ff f8b3 	bl	8012eb0 <HAL_GetTick>
 8013d4a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8013d4c:	687b      	ldr	r3, [r7, #4]
 8013d4e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8013d52:	b2db      	uxtb	r3, r3
 8013d54:	2b02      	cmp	r3, #2
 8013d56:	d008      	beq.n	8013d6a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	2280      	movs	r2, #128	; 0x80
 8013d5c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	2200      	movs	r2, #0
 8013d62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8013d66:	2301      	movs	r3, #1
 8013d68:	e052      	b.n	8013e10 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	681b      	ldr	r3, [r3, #0]
 8013d6e:	681a      	ldr	r2, [r3, #0]
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	681b      	ldr	r3, [r3, #0]
 8013d74:	f022 0216 	bic.w	r2, r2, #22
 8013d78:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8013d7a:	687b      	ldr	r3, [r7, #4]
 8013d7c:	681b      	ldr	r3, [r3, #0]
 8013d7e:	695a      	ldr	r2, [r3, #20]
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	681b      	ldr	r3, [r3, #0]
 8013d84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8013d88:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013d8e:	2b00      	cmp	r3, #0
 8013d90:	d103      	bne.n	8013d9a <HAL_DMA_Abort+0x62>
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013d96:	2b00      	cmp	r3, #0
 8013d98:	d007      	beq.n	8013daa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	681b      	ldr	r3, [r3, #0]
 8013d9e:	681a      	ldr	r2, [r3, #0]
 8013da0:	687b      	ldr	r3, [r7, #4]
 8013da2:	681b      	ldr	r3, [r3, #0]
 8013da4:	f022 0208 	bic.w	r2, r2, #8
 8013da8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	681b      	ldr	r3, [r3, #0]
 8013dae:	681a      	ldr	r2, [r3, #0]
 8013db0:	687b      	ldr	r3, [r7, #4]
 8013db2:	681b      	ldr	r3, [r3, #0]
 8013db4:	f022 0201 	bic.w	r2, r2, #1
 8013db8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8013dba:	e013      	b.n	8013de4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8013dbc:	f7ff f878 	bl	8012eb0 <HAL_GetTick>
 8013dc0:	4602      	mov	r2, r0
 8013dc2:	68bb      	ldr	r3, [r7, #8]
 8013dc4:	1ad3      	subs	r3, r2, r3
 8013dc6:	2b05      	cmp	r3, #5
 8013dc8:	d90c      	bls.n	8013de4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	2220      	movs	r2, #32
 8013dce:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	2203      	movs	r2, #3
 8013dd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	2200      	movs	r2, #0
 8013ddc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8013de0:	2303      	movs	r3, #3
 8013de2:	e015      	b.n	8013e10 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	681b      	ldr	r3, [r3, #0]
 8013de8:	681b      	ldr	r3, [r3, #0]
 8013dea:	f003 0301 	and.w	r3, r3, #1
 8013dee:	2b00      	cmp	r3, #0
 8013df0:	d1e4      	bne.n	8013dbc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013df6:	223f      	movs	r2, #63	; 0x3f
 8013df8:	409a      	lsls	r2, r3
 8013dfa:	68fb      	ldr	r3, [r7, #12]
 8013dfc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	2201      	movs	r2, #1
 8013e02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	2200      	movs	r2, #0
 8013e0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8013e0e:	2300      	movs	r3, #0
}
 8013e10:	4618      	mov	r0, r3
 8013e12:	3710      	adds	r7, #16
 8013e14:	46bd      	mov	sp, r7
 8013e16:	bd80      	pop	{r7, pc}

08013e18 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8013e18:	b480      	push	{r7}
 8013e1a:	b083      	sub	sp, #12
 8013e1c:	af00      	add	r7, sp, #0
 8013e1e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8013e20:	687b      	ldr	r3, [r7, #4]
 8013e22:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8013e26:	b2db      	uxtb	r3, r3
 8013e28:	2b02      	cmp	r3, #2
 8013e2a:	d004      	beq.n	8013e36 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	2280      	movs	r2, #128	; 0x80
 8013e30:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8013e32:	2301      	movs	r3, #1
 8013e34:	e00c      	b.n	8013e50 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8013e36:	687b      	ldr	r3, [r7, #4]
 8013e38:	2205      	movs	r2, #5
 8013e3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	681b      	ldr	r3, [r3, #0]
 8013e42:	681a      	ldr	r2, [r3, #0]
 8013e44:	687b      	ldr	r3, [r7, #4]
 8013e46:	681b      	ldr	r3, [r3, #0]
 8013e48:	f022 0201 	bic.w	r2, r2, #1
 8013e4c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8013e4e:	2300      	movs	r3, #0
}
 8013e50:	4618      	mov	r0, r3
 8013e52:	370c      	adds	r7, #12
 8013e54:	46bd      	mov	sp, r7
 8013e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e5a:	4770      	bx	lr

08013e5c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8013e5c:	b580      	push	{r7, lr}
 8013e5e:	b086      	sub	sp, #24
 8013e60:	af00      	add	r7, sp, #0
 8013e62:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8013e64:	2300      	movs	r3, #0
 8013e66:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8013e68:	4b92      	ldr	r3, [pc, #584]	; (80140b4 <HAL_DMA_IRQHandler+0x258>)
 8013e6a:	681b      	ldr	r3, [r3, #0]
 8013e6c:	4a92      	ldr	r2, [pc, #584]	; (80140b8 <HAL_DMA_IRQHandler+0x25c>)
 8013e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8013e72:	0a9b      	lsrs	r3, r3, #10
 8013e74:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013e7a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8013e7c:	693b      	ldr	r3, [r7, #16]
 8013e7e:	681b      	ldr	r3, [r3, #0]
 8013e80:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013e86:	2208      	movs	r2, #8
 8013e88:	409a      	lsls	r2, r3
 8013e8a:	68fb      	ldr	r3, [r7, #12]
 8013e8c:	4013      	ands	r3, r2
 8013e8e:	2b00      	cmp	r3, #0
 8013e90:	d01a      	beq.n	8013ec8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8013e92:	687b      	ldr	r3, [r7, #4]
 8013e94:	681b      	ldr	r3, [r3, #0]
 8013e96:	681b      	ldr	r3, [r3, #0]
 8013e98:	f003 0304 	and.w	r3, r3, #4
 8013e9c:	2b00      	cmp	r3, #0
 8013e9e:	d013      	beq.n	8013ec8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	681b      	ldr	r3, [r3, #0]
 8013ea4:	681a      	ldr	r2, [r3, #0]
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	681b      	ldr	r3, [r3, #0]
 8013eaa:	f022 0204 	bic.w	r2, r2, #4
 8013eae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013eb4:	2208      	movs	r2, #8
 8013eb6:	409a      	lsls	r2, r3
 8013eb8:	693b      	ldr	r3, [r7, #16]
 8013eba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013ec0:	f043 0201 	orr.w	r2, r3, #1
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013ecc:	2201      	movs	r2, #1
 8013ece:	409a      	lsls	r2, r3
 8013ed0:	68fb      	ldr	r3, [r7, #12]
 8013ed2:	4013      	ands	r3, r2
 8013ed4:	2b00      	cmp	r3, #0
 8013ed6:	d012      	beq.n	8013efe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	681b      	ldr	r3, [r3, #0]
 8013edc:	695b      	ldr	r3, [r3, #20]
 8013ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013ee2:	2b00      	cmp	r3, #0
 8013ee4:	d00b      	beq.n	8013efe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013eea:	2201      	movs	r2, #1
 8013eec:	409a      	lsls	r2, r3
 8013eee:	693b      	ldr	r3, [r7, #16]
 8013ef0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013ef6:	f043 0202 	orr.w	r2, r3, #2
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013f02:	2204      	movs	r2, #4
 8013f04:	409a      	lsls	r2, r3
 8013f06:	68fb      	ldr	r3, [r7, #12]
 8013f08:	4013      	ands	r3, r2
 8013f0a:	2b00      	cmp	r3, #0
 8013f0c:	d012      	beq.n	8013f34 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8013f0e:	687b      	ldr	r3, [r7, #4]
 8013f10:	681b      	ldr	r3, [r3, #0]
 8013f12:	681b      	ldr	r3, [r3, #0]
 8013f14:	f003 0302 	and.w	r3, r3, #2
 8013f18:	2b00      	cmp	r3, #0
 8013f1a:	d00b      	beq.n	8013f34 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8013f1c:	687b      	ldr	r3, [r7, #4]
 8013f1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013f20:	2204      	movs	r2, #4
 8013f22:	409a      	lsls	r2, r3
 8013f24:	693b      	ldr	r3, [r7, #16]
 8013f26:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8013f28:	687b      	ldr	r3, [r7, #4]
 8013f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013f2c:	f043 0204 	orr.w	r2, r3, #4
 8013f30:	687b      	ldr	r3, [r7, #4]
 8013f32:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8013f34:	687b      	ldr	r3, [r7, #4]
 8013f36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013f38:	2210      	movs	r2, #16
 8013f3a:	409a      	lsls	r2, r3
 8013f3c:	68fb      	ldr	r3, [r7, #12]
 8013f3e:	4013      	ands	r3, r2
 8013f40:	2b00      	cmp	r3, #0
 8013f42:	d043      	beq.n	8013fcc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	681b      	ldr	r3, [r3, #0]
 8013f48:	681b      	ldr	r3, [r3, #0]
 8013f4a:	f003 0308 	and.w	r3, r3, #8
 8013f4e:	2b00      	cmp	r3, #0
 8013f50:	d03c      	beq.n	8013fcc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013f56:	2210      	movs	r2, #16
 8013f58:	409a      	lsls	r2, r3
 8013f5a:	693b      	ldr	r3, [r7, #16]
 8013f5c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8013f5e:	687b      	ldr	r3, [r7, #4]
 8013f60:	681b      	ldr	r3, [r3, #0]
 8013f62:	681b      	ldr	r3, [r3, #0]
 8013f64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8013f68:	2b00      	cmp	r3, #0
 8013f6a:	d018      	beq.n	8013f9e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8013f6c:	687b      	ldr	r3, [r7, #4]
 8013f6e:	681b      	ldr	r3, [r3, #0]
 8013f70:	681b      	ldr	r3, [r3, #0]
 8013f72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8013f76:	2b00      	cmp	r3, #0
 8013f78:	d108      	bne.n	8013f8c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8013f7a:	687b      	ldr	r3, [r7, #4]
 8013f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f7e:	2b00      	cmp	r3, #0
 8013f80:	d024      	beq.n	8013fcc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f86:	6878      	ldr	r0, [r7, #4]
 8013f88:	4798      	blx	r3
 8013f8a:	e01f      	b.n	8013fcc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8013f8c:	687b      	ldr	r3, [r7, #4]
 8013f8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013f90:	2b00      	cmp	r3, #0
 8013f92:	d01b      	beq.n	8013fcc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8013f94:	687b      	ldr	r3, [r7, #4]
 8013f96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013f98:	6878      	ldr	r0, [r7, #4]
 8013f9a:	4798      	blx	r3
 8013f9c:	e016      	b.n	8013fcc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	681b      	ldr	r3, [r3, #0]
 8013fa2:	681b      	ldr	r3, [r3, #0]
 8013fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013fa8:	2b00      	cmp	r3, #0
 8013faa:	d107      	bne.n	8013fbc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	681b      	ldr	r3, [r3, #0]
 8013fb0:	681a      	ldr	r2, [r3, #0]
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	681b      	ldr	r3, [r3, #0]
 8013fb6:	f022 0208 	bic.w	r2, r2, #8
 8013fba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8013fbc:	687b      	ldr	r3, [r7, #4]
 8013fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013fc0:	2b00      	cmp	r3, #0
 8013fc2:	d003      	beq.n	8013fcc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8013fc4:	687b      	ldr	r3, [r7, #4]
 8013fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013fc8:	6878      	ldr	r0, [r7, #4]
 8013fca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013fd0:	2220      	movs	r2, #32
 8013fd2:	409a      	lsls	r2, r3
 8013fd4:	68fb      	ldr	r3, [r7, #12]
 8013fd6:	4013      	ands	r3, r2
 8013fd8:	2b00      	cmp	r3, #0
 8013fda:	f000 808e 	beq.w	80140fa <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	681b      	ldr	r3, [r3, #0]
 8013fe2:	681b      	ldr	r3, [r3, #0]
 8013fe4:	f003 0310 	and.w	r3, r3, #16
 8013fe8:	2b00      	cmp	r3, #0
 8013fea:	f000 8086 	beq.w	80140fa <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013ff2:	2220      	movs	r2, #32
 8013ff4:	409a      	lsls	r2, r3
 8013ff6:	693b      	ldr	r3, [r7, #16]
 8013ff8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8013ffa:	687b      	ldr	r3, [r7, #4]
 8013ffc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8014000:	b2db      	uxtb	r3, r3
 8014002:	2b05      	cmp	r3, #5
 8014004:	d136      	bne.n	8014074 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	681b      	ldr	r3, [r3, #0]
 801400a:	681a      	ldr	r2, [r3, #0]
 801400c:	687b      	ldr	r3, [r7, #4]
 801400e:	681b      	ldr	r3, [r3, #0]
 8014010:	f022 0216 	bic.w	r2, r2, #22
 8014014:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	681b      	ldr	r3, [r3, #0]
 801401a:	695a      	ldr	r2, [r3, #20]
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	681b      	ldr	r3, [r3, #0]
 8014020:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8014024:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8014026:	687b      	ldr	r3, [r7, #4]
 8014028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801402a:	2b00      	cmp	r3, #0
 801402c:	d103      	bne.n	8014036 <HAL_DMA_IRQHandler+0x1da>
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014032:	2b00      	cmp	r3, #0
 8014034:	d007      	beq.n	8014046 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8014036:	687b      	ldr	r3, [r7, #4]
 8014038:	681b      	ldr	r3, [r3, #0]
 801403a:	681a      	ldr	r2, [r3, #0]
 801403c:	687b      	ldr	r3, [r7, #4]
 801403e:	681b      	ldr	r3, [r3, #0]
 8014040:	f022 0208 	bic.w	r2, r2, #8
 8014044:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801404a:	223f      	movs	r2, #63	; 0x3f
 801404c:	409a      	lsls	r2, r3
 801404e:	693b      	ldr	r3, [r7, #16]
 8014050:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8014052:	687b      	ldr	r3, [r7, #4]
 8014054:	2201      	movs	r2, #1
 8014056:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	2200      	movs	r2, #0
 801405e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8014062:	687b      	ldr	r3, [r7, #4]
 8014064:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014066:	2b00      	cmp	r3, #0
 8014068:	d07d      	beq.n	8014166 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801406e:	6878      	ldr	r0, [r7, #4]
 8014070:	4798      	blx	r3
        }
        return;
 8014072:	e078      	b.n	8014166 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	681b      	ldr	r3, [r3, #0]
 8014078:	681b      	ldr	r3, [r3, #0]
 801407a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801407e:	2b00      	cmp	r3, #0
 8014080:	d01c      	beq.n	80140bc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	681b      	ldr	r3, [r3, #0]
 8014086:	681b      	ldr	r3, [r3, #0]
 8014088:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801408c:	2b00      	cmp	r3, #0
 801408e:	d108      	bne.n	80140a2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014094:	2b00      	cmp	r3, #0
 8014096:	d030      	beq.n	80140fa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8014098:	687b      	ldr	r3, [r7, #4]
 801409a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801409c:	6878      	ldr	r0, [r7, #4]
 801409e:	4798      	blx	r3
 80140a0:	e02b      	b.n	80140fa <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80140a2:	687b      	ldr	r3, [r7, #4]
 80140a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80140a6:	2b00      	cmp	r3, #0
 80140a8:	d027      	beq.n	80140fa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80140ae:	6878      	ldr	r0, [r7, #4]
 80140b0:	4798      	blx	r3
 80140b2:	e022      	b.n	80140fa <HAL_DMA_IRQHandler+0x29e>
 80140b4:	20000008 	.word	0x20000008
 80140b8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	681b      	ldr	r3, [r3, #0]
 80140c0:	681b      	ldr	r3, [r3, #0]
 80140c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80140c6:	2b00      	cmp	r3, #0
 80140c8:	d10f      	bne.n	80140ea <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	681b      	ldr	r3, [r3, #0]
 80140ce:	681a      	ldr	r2, [r3, #0]
 80140d0:	687b      	ldr	r3, [r7, #4]
 80140d2:	681b      	ldr	r3, [r3, #0]
 80140d4:	f022 0210 	bic.w	r2, r2, #16
 80140d8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80140da:	687b      	ldr	r3, [r7, #4]
 80140dc:	2201      	movs	r2, #1
 80140de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	2200      	movs	r2, #0
 80140e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80140ea:	687b      	ldr	r3, [r7, #4]
 80140ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80140ee:	2b00      	cmp	r3, #0
 80140f0:	d003      	beq.n	80140fa <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80140f6:	6878      	ldr	r0, [r7, #4]
 80140f8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80140fe:	2b00      	cmp	r3, #0
 8014100:	d032      	beq.n	8014168 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014106:	f003 0301 	and.w	r3, r3, #1
 801410a:	2b00      	cmp	r3, #0
 801410c:	d022      	beq.n	8014154 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 801410e:	687b      	ldr	r3, [r7, #4]
 8014110:	2205      	movs	r2, #5
 8014112:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8014116:	687b      	ldr	r3, [r7, #4]
 8014118:	681b      	ldr	r3, [r3, #0]
 801411a:	681a      	ldr	r2, [r3, #0]
 801411c:	687b      	ldr	r3, [r7, #4]
 801411e:	681b      	ldr	r3, [r3, #0]
 8014120:	f022 0201 	bic.w	r2, r2, #1
 8014124:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8014126:	68bb      	ldr	r3, [r7, #8]
 8014128:	3301      	adds	r3, #1
 801412a:	60bb      	str	r3, [r7, #8]
 801412c:	697a      	ldr	r2, [r7, #20]
 801412e:	429a      	cmp	r2, r3
 8014130:	d307      	bcc.n	8014142 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	681b      	ldr	r3, [r3, #0]
 8014136:	681b      	ldr	r3, [r3, #0]
 8014138:	f003 0301 	and.w	r3, r3, #1
 801413c:	2b00      	cmp	r3, #0
 801413e:	d1f2      	bne.n	8014126 <HAL_DMA_IRQHandler+0x2ca>
 8014140:	e000      	b.n	8014144 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8014142:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	2201      	movs	r2, #1
 8014148:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	2200      	movs	r2, #0
 8014150:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014158:	2b00      	cmp	r3, #0
 801415a:	d005      	beq.n	8014168 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014160:	6878      	ldr	r0, [r7, #4]
 8014162:	4798      	blx	r3
 8014164:	e000      	b.n	8014168 <HAL_DMA_IRQHandler+0x30c>
        return;
 8014166:	bf00      	nop
    }
  }
}
 8014168:	3718      	adds	r7, #24
 801416a:	46bd      	mov	sp, r7
 801416c:	bd80      	pop	{r7, pc}
 801416e:	bf00      	nop

08014170 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8014170:	b480      	push	{r7}
 8014172:	b085      	sub	sp, #20
 8014174:	af00      	add	r7, sp, #0
 8014176:	60f8      	str	r0, [r7, #12]
 8014178:	60b9      	str	r1, [r7, #8]
 801417a:	607a      	str	r2, [r7, #4]
 801417c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 801417e:	68fb      	ldr	r3, [r7, #12]
 8014180:	681b      	ldr	r3, [r3, #0]
 8014182:	681a      	ldr	r2, [r3, #0]
 8014184:	68fb      	ldr	r3, [r7, #12]
 8014186:	681b      	ldr	r3, [r3, #0]
 8014188:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 801418c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 801418e:	68fb      	ldr	r3, [r7, #12]
 8014190:	681b      	ldr	r3, [r3, #0]
 8014192:	683a      	ldr	r2, [r7, #0]
 8014194:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8014196:	68fb      	ldr	r3, [r7, #12]
 8014198:	689b      	ldr	r3, [r3, #8]
 801419a:	2b40      	cmp	r3, #64	; 0x40
 801419c:	d108      	bne.n	80141b0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 801419e:	68fb      	ldr	r3, [r7, #12]
 80141a0:	681b      	ldr	r3, [r3, #0]
 80141a2:	687a      	ldr	r2, [r7, #4]
 80141a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80141a6:	68fb      	ldr	r3, [r7, #12]
 80141a8:	681b      	ldr	r3, [r3, #0]
 80141aa:	68ba      	ldr	r2, [r7, #8]
 80141ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80141ae:	e007      	b.n	80141c0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80141b0:	68fb      	ldr	r3, [r7, #12]
 80141b2:	681b      	ldr	r3, [r3, #0]
 80141b4:	68ba      	ldr	r2, [r7, #8]
 80141b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80141b8:	68fb      	ldr	r3, [r7, #12]
 80141ba:	681b      	ldr	r3, [r3, #0]
 80141bc:	687a      	ldr	r2, [r7, #4]
 80141be:	60da      	str	r2, [r3, #12]
}
 80141c0:	bf00      	nop
 80141c2:	3714      	adds	r7, #20
 80141c4:	46bd      	mov	sp, r7
 80141c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141ca:	4770      	bx	lr

080141cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80141cc:	b480      	push	{r7}
 80141ce:	b085      	sub	sp, #20
 80141d0:	af00      	add	r7, sp, #0
 80141d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	681b      	ldr	r3, [r3, #0]
 80141d8:	b2db      	uxtb	r3, r3
 80141da:	3b10      	subs	r3, #16
 80141dc:	4a14      	ldr	r2, [pc, #80]	; (8014230 <DMA_CalcBaseAndBitshift+0x64>)
 80141de:	fba2 2303 	umull	r2, r3, r2, r3
 80141e2:	091b      	lsrs	r3, r3, #4
 80141e4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80141e6:	4a13      	ldr	r2, [pc, #76]	; (8014234 <DMA_CalcBaseAndBitshift+0x68>)
 80141e8:	68fb      	ldr	r3, [r7, #12]
 80141ea:	4413      	add	r3, r2
 80141ec:	781b      	ldrb	r3, [r3, #0]
 80141ee:	461a      	mov	r2, r3
 80141f0:	687b      	ldr	r3, [r7, #4]
 80141f2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80141f4:	68fb      	ldr	r3, [r7, #12]
 80141f6:	2b03      	cmp	r3, #3
 80141f8:	d909      	bls.n	801420e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80141fa:	687b      	ldr	r3, [r7, #4]
 80141fc:	681b      	ldr	r3, [r3, #0]
 80141fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8014202:	f023 0303 	bic.w	r3, r3, #3
 8014206:	1d1a      	adds	r2, r3, #4
 8014208:	687b      	ldr	r3, [r7, #4]
 801420a:	659a      	str	r2, [r3, #88]	; 0x58
 801420c:	e007      	b.n	801421e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 801420e:	687b      	ldr	r3, [r7, #4]
 8014210:	681b      	ldr	r3, [r3, #0]
 8014212:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8014216:	f023 0303 	bic.w	r3, r3, #3
 801421a:	687a      	ldr	r2, [r7, #4]
 801421c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 801421e:	687b      	ldr	r3, [r7, #4]
 8014220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8014222:	4618      	mov	r0, r3
 8014224:	3714      	adds	r7, #20
 8014226:	46bd      	mov	sp, r7
 8014228:	f85d 7b04 	ldr.w	r7, [sp], #4
 801422c:	4770      	bx	lr
 801422e:	bf00      	nop
 8014230:	aaaaaaab 	.word	0xaaaaaaab
 8014234:	0802ff64 	.word	0x0802ff64

08014238 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8014238:	b480      	push	{r7}
 801423a:	b085      	sub	sp, #20
 801423c:	af00      	add	r7, sp, #0
 801423e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8014240:	2300      	movs	r3, #0
 8014242:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014248:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 801424a:	687b      	ldr	r3, [r7, #4]
 801424c:	699b      	ldr	r3, [r3, #24]
 801424e:	2b00      	cmp	r3, #0
 8014250:	d11f      	bne.n	8014292 <DMA_CheckFifoParam+0x5a>
 8014252:	68bb      	ldr	r3, [r7, #8]
 8014254:	2b03      	cmp	r3, #3
 8014256:	d856      	bhi.n	8014306 <DMA_CheckFifoParam+0xce>
 8014258:	a201      	add	r2, pc, #4	; (adr r2, 8014260 <DMA_CheckFifoParam+0x28>)
 801425a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801425e:	bf00      	nop
 8014260:	08014271 	.word	0x08014271
 8014264:	08014283 	.word	0x08014283
 8014268:	08014271 	.word	0x08014271
 801426c:	08014307 	.word	0x08014307
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014274:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8014278:	2b00      	cmp	r3, #0
 801427a:	d046      	beq.n	801430a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 801427c:	2301      	movs	r3, #1
 801427e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8014280:	e043      	b.n	801430a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8014282:	687b      	ldr	r3, [r7, #4]
 8014284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014286:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 801428a:	d140      	bne.n	801430e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 801428c:	2301      	movs	r3, #1
 801428e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8014290:	e03d      	b.n	801430e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8014292:	687b      	ldr	r3, [r7, #4]
 8014294:	699b      	ldr	r3, [r3, #24]
 8014296:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801429a:	d121      	bne.n	80142e0 <DMA_CheckFifoParam+0xa8>
 801429c:	68bb      	ldr	r3, [r7, #8]
 801429e:	2b03      	cmp	r3, #3
 80142a0:	d837      	bhi.n	8014312 <DMA_CheckFifoParam+0xda>
 80142a2:	a201      	add	r2, pc, #4	; (adr r2, 80142a8 <DMA_CheckFifoParam+0x70>)
 80142a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80142a8:	080142b9 	.word	0x080142b9
 80142ac:	080142bf 	.word	0x080142bf
 80142b0:	080142b9 	.word	0x080142b9
 80142b4:	080142d1 	.word	0x080142d1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80142b8:	2301      	movs	r3, #1
 80142ba:	73fb      	strb	r3, [r7, #15]
      break;
 80142bc:	e030      	b.n	8014320 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80142be:	687b      	ldr	r3, [r7, #4]
 80142c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80142c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80142c6:	2b00      	cmp	r3, #0
 80142c8:	d025      	beq.n	8014316 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80142ca:	2301      	movs	r3, #1
 80142cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80142ce:	e022      	b.n	8014316 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80142d4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80142d8:	d11f      	bne.n	801431a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80142da:	2301      	movs	r3, #1
 80142dc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80142de:	e01c      	b.n	801431a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80142e0:	68bb      	ldr	r3, [r7, #8]
 80142e2:	2b02      	cmp	r3, #2
 80142e4:	d903      	bls.n	80142ee <DMA_CheckFifoParam+0xb6>
 80142e6:	68bb      	ldr	r3, [r7, #8]
 80142e8:	2b03      	cmp	r3, #3
 80142ea:	d003      	beq.n	80142f4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80142ec:	e018      	b.n	8014320 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80142ee:	2301      	movs	r3, #1
 80142f0:	73fb      	strb	r3, [r7, #15]
      break;
 80142f2:	e015      	b.n	8014320 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80142f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80142fc:	2b00      	cmp	r3, #0
 80142fe:	d00e      	beq.n	801431e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8014300:	2301      	movs	r3, #1
 8014302:	73fb      	strb	r3, [r7, #15]
      break;
 8014304:	e00b      	b.n	801431e <DMA_CheckFifoParam+0xe6>
      break;
 8014306:	bf00      	nop
 8014308:	e00a      	b.n	8014320 <DMA_CheckFifoParam+0xe8>
      break;
 801430a:	bf00      	nop
 801430c:	e008      	b.n	8014320 <DMA_CheckFifoParam+0xe8>
      break;
 801430e:	bf00      	nop
 8014310:	e006      	b.n	8014320 <DMA_CheckFifoParam+0xe8>
      break;
 8014312:	bf00      	nop
 8014314:	e004      	b.n	8014320 <DMA_CheckFifoParam+0xe8>
      break;
 8014316:	bf00      	nop
 8014318:	e002      	b.n	8014320 <DMA_CheckFifoParam+0xe8>
      break;   
 801431a:	bf00      	nop
 801431c:	e000      	b.n	8014320 <DMA_CheckFifoParam+0xe8>
      break;
 801431e:	bf00      	nop
    }
  } 
  
  return status; 
 8014320:	7bfb      	ldrb	r3, [r7, #15]
}
 8014322:	4618      	mov	r0, r3
 8014324:	3714      	adds	r7, #20
 8014326:	46bd      	mov	sp, r7
 8014328:	f85d 7b04 	ldr.w	r7, [sp], #4
 801432c:	4770      	bx	lr
 801432e:	bf00      	nop

08014330 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8014330:	b480      	push	{r7}
 8014332:	b089      	sub	sp, #36	; 0x24
 8014334:	af00      	add	r7, sp, #0
 8014336:	6078      	str	r0, [r7, #4]
 8014338:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 801433a:	2300      	movs	r3, #0
 801433c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 801433e:	2300      	movs	r3, #0
 8014340:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8014342:	2300      	movs	r3, #0
 8014344:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8014346:	2300      	movs	r3, #0
 8014348:	61fb      	str	r3, [r7, #28]
 801434a:	e16b      	b.n	8014624 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 801434c:	2201      	movs	r2, #1
 801434e:	69fb      	ldr	r3, [r7, #28]
 8014350:	fa02 f303 	lsl.w	r3, r2, r3
 8014354:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8014356:	683b      	ldr	r3, [r7, #0]
 8014358:	681b      	ldr	r3, [r3, #0]
 801435a:	697a      	ldr	r2, [r7, #20]
 801435c:	4013      	ands	r3, r2
 801435e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8014360:	693a      	ldr	r2, [r7, #16]
 8014362:	697b      	ldr	r3, [r7, #20]
 8014364:	429a      	cmp	r2, r3
 8014366:	f040 815a 	bne.w	801461e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 801436a:	683b      	ldr	r3, [r7, #0]
 801436c:	685b      	ldr	r3, [r3, #4]
 801436e:	f003 0303 	and.w	r3, r3, #3
 8014372:	2b01      	cmp	r3, #1
 8014374:	d005      	beq.n	8014382 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8014376:	683b      	ldr	r3, [r7, #0]
 8014378:	685b      	ldr	r3, [r3, #4]
 801437a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 801437e:	2b02      	cmp	r3, #2
 8014380:	d130      	bne.n	80143e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	689b      	ldr	r3, [r3, #8]
 8014386:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8014388:	69fb      	ldr	r3, [r7, #28]
 801438a:	005b      	lsls	r3, r3, #1
 801438c:	2203      	movs	r2, #3
 801438e:	fa02 f303 	lsl.w	r3, r2, r3
 8014392:	43db      	mvns	r3, r3
 8014394:	69ba      	ldr	r2, [r7, #24]
 8014396:	4013      	ands	r3, r2
 8014398:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801439a:	683b      	ldr	r3, [r7, #0]
 801439c:	68da      	ldr	r2, [r3, #12]
 801439e:	69fb      	ldr	r3, [r7, #28]
 80143a0:	005b      	lsls	r3, r3, #1
 80143a2:	fa02 f303 	lsl.w	r3, r2, r3
 80143a6:	69ba      	ldr	r2, [r7, #24]
 80143a8:	4313      	orrs	r3, r2
 80143aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80143ac:	687b      	ldr	r3, [r7, #4]
 80143ae:	69ba      	ldr	r2, [r7, #24]
 80143b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80143b2:	687b      	ldr	r3, [r7, #4]
 80143b4:	685b      	ldr	r3, [r3, #4]
 80143b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80143b8:	2201      	movs	r2, #1
 80143ba:	69fb      	ldr	r3, [r7, #28]
 80143bc:	fa02 f303 	lsl.w	r3, r2, r3
 80143c0:	43db      	mvns	r3, r3
 80143c2:	69ba      	ldr	r2, [r7, #24]
 80143c4:	4013      	ands	r3, r2
 80143c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80143c8:	683b      	ldr	r3, [r7, #0]
 80143ca:	685b      	ldr	r3, [r3, #4]
 80143cc:	091b      	lsrs	r3, r3, #4
 80143ce:	f003 0201 	and.w	r2, r3, #1
 80143d2:	69fb      	ldr	r3, [r7, #28]
 80143d4:	fa02 f303 	lsl.w	r3, r2, r3
 80143d8:	69ba      	ldr	r2, [r7, #24]
 80143da:	4313      	orrs	r3, r2
 80143dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80143de:	687b      	ldr	r3, [r7, #4]
 80143e0:	69ba      	ldr	r2, [r7, #24]
 80143e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80143e4:	683b      	ldr	r3, [r7, #0]
 80143e6:	685b      	ldr	r3, [r3, #4]
 80143e8:	f003 0303 	and.w	r3, r3, #3
 80143ec:	2b03      	cmp	r3, #3
 80143ee:	d017      	beq.n	8014420 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80143f0:	687b      	ldr	r3, [r7, #4]
 80143f2:	68db      	ldr	r3, [r3, #12]
 80143f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80143f6:	69fb      	ldr	r3, [r7, #28]
 80143f8:	005b      	lsls	r3, r3, #1
 80143fa:	2203      	movs	r2, #3
 80143fc:	fa02 f303 	lsl.w	r3, r2, r3
 8014400:	43db      	mvns	r3, r3
 8014402:	69ba      	ldr	r2, [r7, #24]
 8014404:	4013      	ands	r3, r2
 8014406:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8014408:	683b      	ldr	r3, [r7, #0]
 801440a:	689a      	ldr	r2, [r3, #8]
 801440c:	69fb      	ldr	r3, [r7, #28]
 801440e:	005b      	lsls	r3, r3, #1
 8014410:	fa02 f303 	lsl.w	r3, r2, r3
 8014414:	69ba      	ldr	r2, [r7, #24]
 8014416:	4313      	orrs	r3, r2
 8014418:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 801441a:	687b      	ldr	r3, [r7, #4]
 801441c:	69ba      	ldr	r2, [r7, #24]
 801441e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8014420:	683b      	ldr	r3, [r7, #0]
 8014422:	685b      	ldr	r3, [r3, #4]
 8014424:	f003 0303 	and.w	r3, r3, #3
 8014428:	2b02      	cmp	r3, #2
 801442a:	d123      	bne.n	8014474 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801442c:	69fb      	ldr	r3, [r7, #28]
 801442e:	08da      	lsrs	r2, r3, #3
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	3208      	adds	r2, #8
 8014434:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014438:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 801443a:	69fb      	ldr	r3, [r7, #28]
 801443c:	f003 0307 	and.w	r3, r3, #7
 8014440:	009b      	lsls	r3, r3, #2
 8014442:	220f      	movs	r2, #15
 8014444:	fa02 f303 	lsl.w	r3, r2, r3
 8014448:	43db      	mvns	r3, r3
 801444a:	69ba      	ldr	r2, [r7, #24]
 801444c:	4013      	ands	r3, r2
 801444e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8014450:	683b      	ldr	r3, [r7, #0]
 8014452:	691a      	ldr	r2, [r3, #16]
 8014454:	69fb      	ldr	r3, [r7, #28]
 8014456:	f003 0307 	and.w	r3, r3, #7
 801445a:	009b      	lsls	r3, r3, #2
 801445c:	fa02 f303 	lsl.w	r3, r2, r3
 8014460:	69ba      	ldr	r2, [r7, #24]
 8014462:	4313      	orrs	r3, r2
 8014464:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8014466:	69fb      	ldr	r3, [r7, #28]
 8014468:	08da      	lsrs	r2, r3, #3
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	3208      	adds	r2, #8
 801446e:	69b9      	ldr	r1, [r7, #24]
 8014470:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8014474:	687b      	ldr	r3, [r7, #4]
 8014476:	681b      	ldr	r3, [r3, #0]
 8014478:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 801447a:	69fb      	ldr	r3, [r7, #28]
 801447c:	005b      	lsls	r3, r3, #1
 801447e:	2203      	movs	r2, #3
 8014480:	fa02 f303 	lsl.w	r3, r2, r3
 8014484:	43db      	mvns	r3, r3
 8014486:	69ba      	ldr	r2, [r7, #24]
 8014488:	4013      	ands	r3, r2
 801448a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801448c:	683b      	ldr	r3, [r7, #0]
 801448e:	685b      	ldr	r3, [r3, #4]
 8014490:	f003 0203 	and.w	r2, r3, #3
 8014494:	69fb      	ldr	r3, [r7, #28]
 8014496:	005b      	lsls	r3, r3, #1
 8014498:	fa02 f303 	lsl.w	r3, r2, r3
 801449c:	69ba      	ldr	r2, [r7, #24]
 801449e:	4313      	orrs	r3, r2
 80144a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80144a2:	687b      	ldr	r3, [r7, #4]
 80144a4:	69ba      	ldr	r2, [r7, #24]
 80144a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80144a8:	683b      	ldr	r3, [r7, #0]
 80144aa:	685b      	ldr	r3, [r3, #4]
 80144ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80144b0:	2b00      	cmp	r3, #0
 80144b2:	f000 80b4 	beq.w	801461e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80144b6:	2300      	movs	r3, #0
 80144b8:	60fb      	str	r3, [r7, #12]
 80144ba:	4b60      	ldr	r3, [pc, #384]	; (801463c <HAL_GPIO_Init+0x30c>)
 80144bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80144be:	4a5f      	ldr	r2, [pc, #380]	; (801463c <HAL_GPIO_Init+0x30c>)
 80144c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80144c4:	6453      	str	r3, [r2, #68]	; 0x44
 80144c6:	4b5d      	ldr	r3, [pc, #372]	; (801463c <HAL_GPIO_Init+0x30c>)
 80144c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80144ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80144ce:	60fb      	str	r3, [r7, #12]
 80144d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80144d2:	4a5b      	ldr	r2, [pc, #364]	; (8014640 <HAL_GPIO_Init+0x310>)
 80144d4:	69fb      	ldr	r3, [r7, #28]
 80144d6:	089b      	lsrs	r3, r3, #2
 80144d8:	3302      	adds	r3, #2
 80144da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80144de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80144e0:	69fb      	ldr	r3, [r7, #28]
 80144e2:	f003 0303 	and.w	r3, r3, #3
 80144e6:	009b      	lsls	r3, r3, #2
 80144e8:	220f      	movs	r2, #15
 80144ea:	fa02 f303 	lsl.w	r3, r2, r3
 80144ee:	43db      	mvns	r3, r3
 80144f0:	69ba      	ldr	r2, [r7, #24]
 80144f2:	4013      	ands	r3, r2
 80144f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80144f6:	687b      	ldr	r3, [r7, #4]
 80144f8:	4a52      	ldr	r2, [pc, #328]	; (8014644 <HAL_GPIO_Init+0x314>)
 80144fa:	4293      	cmp	r3, r2
 80144fc:	d02b      	beq.n	8014556 <HAL_GPIO_Init+0x226>
 80144fe:	687b      	ldr	r3, [r7, #4]
 8014500:	4a51      	ldr	r2, [pc, #324]	; (8014648 <HAL_GPIO_Init+0x318>)
 8014502:	4293      	cmp	r3, r2
 8014504:	d025      	beq.n	8014552 <HAL_GPIO_Init+0x222>
 8014506:	687b      	ldr	r3, [r7, #4]
 8014508:	4a50      	ldr	r2, [pc, #320]	; (801464c <HAL_GPIO_Init+0x31c>)
 801450a:	4293      	cmp	r3, r2
 801450c:	d01f      	beq.n	801454e <HAL_GPIO_Init+0x21e>
 801450e:	687b      	ldr	r3, [r7, #4]
 8014510:	4a4f      	ldr	r2, [pc, #316]	; (8014650 <HAL_GPIO_Init+0x320>)
 8014512:	4293      	cmp	r3, r2
 8014514:	d019      	beq.n	801454a <HAL_GPIO_Init+0x21a>
 8014516:	687b      	ldr	r3, [r7, #4]
 8014518:	4a4e      	ldr	r2, [pc, #312]	; (8014654 <HAL_GPIO_Init+0x324>)
 801451a:	4293      	cmp	r3, r2
 801451c:	d013      	beq.n	8014546 <HAL_GPIO_Init+0x216>
 801451e:	687b      	ldr	r3, [r7, #4]
 8014520:	4a4d      	ldr	r2, [pc, #308]	; (8014658 <HAL_GPIO_Init+0x328>)
 8014522:	4293      	cmp	r3, r2
 8014524:	d00d      	beq.n	8014542 <HAL_GPIO_Init+0x212>
 8014526:	687b      	ldr	r3, [r7, #4]
 8014528:	4a4c      	ldr	r2, [pc, #304]	; (801465c <HAL_GPIO_Init+0x32c>)
 801452a:	4293      	cmp	r3, r2
 801452c:	d007      	beq.n	801453e <HAL_GPIO_Init+0x20e>
 801452e:	687b      	ldr	r3, [r7, #4]
 8014530:	4a4b      	ldr	r2, [pc, #300]	; (8014660 <HAL_GPIO_Init+0x330>)
 8014532:	4293      	cmp	r3, r2
 8014534:	d101      	bne.n	801453a <HAL_GPIO_Init+0x20a>
 8014536:	2307      	movs	r3, #7
 8014538:	e00e      	b.n	8014558 <HAL_GPIO_Init+0x228>
 801453a:	2308      	movs	r3, #8
 801453c:	e00c      	b.n	8014558 <HAL_GPIO_Init+0x228>
 801453e:	2306      	movs	r3, #6
 8014540:	e00a      	b.n	8014558 <HAL_GPIO_Init+0x228>
 8014542:	2305      	movs	r3, #5
 8014544:	e008      	b.n	8014558 <HAL_GPIO_Init+0x228>
 8014546:	2304      	movs	r3, #4
 8014548:	e006      	b.n	8014558 <HAL_GPIO_Init+0x228>
 801454a:	2303      	movs	r3, #3
 801454c:	e004      	b.n	8014558 <HAL_GPIO_Init+0x228>
 801454e:	2302      	movs	r3, #2
 8014550:	e002      	b.n	8014558 <HAL_GPIO_Init+0x228>
 8014552:	2301      	movs	r3, #1
 8014554:	e000      	b.n	8014558 <HAL_GPIO_Init+0x228>
 8014556:	2300      	movs	r3, #0
 8014558:	69fa      	ldr	r2, [r7, #28]
 801455a:	f002 0203 	and.w	r2, r2, #3
 801455e:	0092      	lsls	r2, r2, #2
 8014560:	4093      	lsls	r3, r2
 8014562:	69ba      	ldr	r2, [r7, #24]
 8014564:	4313      	orrs	r3, r2
 8014566:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8014568:	4935      	ldr	r1, [pc, #212]	; (8014640 <HAL_GPIO_Init+0x310>)
 801456a:	69fb      	ldr	r3, [r7, #28]
 801456c:	089b      	lsrs	r3, r3, #2
 801456e:	3302      	adds	r3, #2
 8014570:	69ba      	ldr	r2, [r7, #24]
 8014572:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8014576:	4b3b      	ldr	r3, [pc, #236]	; (8014664 <HAL_GPIO_Init+0x334>)
 8014578:	689b      	ldr	r3, [r3, #8]
 801457a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801457c:	693b      	ldr	r3, [r7, #16]
 801457e:	43db      	mvns	r3, r3
 8014580:	69ba      	ldr	r2, [r7, #24]
 8014582:	4013      	ands	r3, r2
 8014584:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8014586:	683b      	ldr	r3, [r7, #0]
 8014588:	685b      	ldr	r3, [r3, #4]
 801458a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801458e:	2b00      	cmp	r3, #0
 8014590:	d003      	beq.n	801459a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8014592:	69ba      	ldr	r2, [r7, #24]
 8014594:	693b      	ldr	r3, [r7, #16]
 8014596:	4313      	orrs	r3, r2
 8014598:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 801459a:	4a32      	ldr	r2, [pc, #200]	; (8014664 <HAL_GPIO_Init+0x334>)
 801459c:	69bb      	ldr	r3, [r7, #24]
 801459e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80145a0:	4b30      	ldr	r3, [pc, #192]	; (8014664 <HAL_GPIO_Init+0x334>)
 80145a2:	68db      	ldr	r3, [r3, #12]
 80145a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80145a6:	693b      	ldr	r3, [r7, #16]
 80145a8:	43db      	mvns	r3, r3
 80145aa:	69ba      	ldr	r2, [r7, #24]
 80145ac:	4013      	ands	r3, r2
 80145ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80145b0:	683b      	ldr	r3, [r7, #0]
 80145b2:	685b      	ldr	r3, [r3, #4]
 80145b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80145b8:	2b00      	cmp	r3, #0
 80145ba:	d003      	beq.n	80145c4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80145bc:	69ba      	ldr	r2, [r7, #24]
 80145be:	693b      	ldr	r3, [r7, #16]
 80145c0:	4313      	orrs	r3, r2
 80145c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80145c4:	4a27      	ldr	r2, [pc, #156]	; (8014664 <HAL_GPIO_Init+0x334>)
 80145c6:	69bb      	ldr	r3, [r7, #24]
 80145c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80145ca:	4b26      	ldr	r3, [pc, #152]	; (8014664 <HAL_GPIO_Init+0x334>)
 80145cc:	685b      	ldr	r3, [r3, #4]
 80145ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80145d0:	693b      	ldr	r3, [r7, #16]
 80145d2:	43db      	mvns	r3, r3
 80145d4:	69ba      	ldr	r2, [r7, #24]
 80145d6:	4013      	ands	r3, r2
 80145d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80145da:	683b      	ldr	r3, [r7, #0]
 80145dc:	685b      	ldr	r3, [r3, #4]
 80145de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80145e2:	2b00      	cmp	r3, #0
 80145e4:	d003      	beq.n	80145ee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80145e6:	69ba      	ldr	r2, [r7, #24]
 80145e8:	693b      	ldr	r3, [r7, #16]
 80145ea:	4313      	orrs	r3, r2
 80145ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80145ee:	4a1d      	ldr	r2, [pc, #116]	; (8014664 <HAL_GPIO_Init+0x334>)
 80145f0:	69bb      	ldr	r3, [r7, #24]
 80145f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80145f4:	4b1b      	ldr	r3, [pc, #108]	; (8014664 <HAL_GPIO_Init+0x334>)
 80145f6:	681b      	ldr	r3, [r3, #0]
 80145f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80145fa:	693b      	ldr	r3, [r7, #16]
 80145fc:	43db      	mvns	r3, r3
 80145fe:	69ba      	ldr	r2, [r7, #24]
 8014600:	4013      	ands	r3, r2
 8014602:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8014604:	683b      	ldr	r3, [r7, #0]
 8014606:	685b      	ldr	r3, [r3, #4]
 8014608:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801460c:	2b00      	cmp	r3, #0
 801460e:	d003      	beq.n	8014618 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8014610:	69ba      	ldr	r2, [r7, #24]
 8014612:	693b      	ldr	r3, [r7, #16]
 8014614:	4313      	orrs	r3, r2
 8014616:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8014618:	4a12      	ldr	r2, [pc, #72]	; (8014664 <HAL_GPIO_Init+0x334>)
 801461a:	69bb      	ldr	r3, [r7, #24]
 801461c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 801461e:	69fb      	ldr	r3, [r7, #28]
 8014620:	3301      	adds	r3, #1
 8014622:	61fb      	str	r3, [r7, #28]
 8014624:	69fb      	ldr	r3, [r7, #28]
 8014626:	2b0f      	cmp	r3, #15
 8014628:	f67f ae90 	bls.w	801434c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 801462c:	bf00      	nop
 801462e:	bf00      	nop
 8014630:	3724      	adds	r7, #36	; 0x24
 8014632:	46bd      	mov	sp, r7
 8014634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014638:	4770      	bx	lr
 801463a:	bf00      	nop
 801463c:	40023800 	.word	0x40023800
 8014640:	40013800 	.word	0x40013800
 8014644:	40020000 	.word	0x40020000
 8014648:	40020400 	.word	0x40020400
 801464c:	40020800 	.word	0x40020800
 8014650:	40020c00 	.word	0x40020c00
 8014654:	40021000 	.word	0x40021000
 8014658:	40021400 	.word	0x40021400
 801465c:	40021800 	.word	0x40021800
 8014660:	40021c00 	.word	0x40021c00
 8014664:	40013c00 	.word	0x40013c00

08014668 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8014668:	b480      	push	{r7}
 801466a:	b087      	sub	sp, #28
 801466c:	af00      	add	r7, sp, #0
 801466e:	6078      	str	r0, [r7, #4]
 8014670:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8014672:	2300      	movs	r3, #0
 8014674:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8014676:	2300      	movs	r3, #0
 8014678:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 801467a:	2300      	movs	r3, #0
 801467c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 801467e:	2300      	movs	r3, #0
 8014680:	617b      	str	r3, [r7, #20]
 8014682:	e0cd      	b.n	8014820 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8014684:	2201      	movs	r2, #1
 8014686:	697b      	ldr	r3, [r7, #20]
 8014688:	fa02 f303 	lsl.w	r3, r2, r3
 801468c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 801468e:	683a      	ldr	r2, [r7, #0]
 8014690:	693b      	ldr	r3, [r7, #16]
 8014692:	4013      	ands	r3, r2
 8014694:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8014696:	68fa      	ldr	r2, [r7, #12]
 8014698:	693b      	ldr	r3, [r7, #16]
 801469a:	429a      	cmp	r2, r3
 801469c:	f040 80bd 	bne.w	801481a <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80146a0:	4a65      	ldr	r2, [pc, #404]	; (8014838 <HAL_GPIO_DeInit+0x1d0>)
 80146a2:	697b      	ldr	r3, [r7, #20]
 80146a4:	089b      	lsrs	r3, r3, #2
 80146a6:	3302      	adds	r3, #2
 80146a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80146ac:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80146ae:	697b      	ldr	r3, [r7, #20]
 80146b0:	f003 0303 	and.w	r3, r3, #3
 80146b4:	009b      	lsls	r3, r3, #2
 80146b6:	220f      	movs	r2, #15
 80146b8:	fa02 f303 	lsl.w	r3, r2, r3
 80146bc:	68ba      	ldr	r2, [r7, #8]
 80146be:	4013      	ands	r3, r2
 80146c0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80146c2:	687b      	ldr	r3, [r7, #4]
 80146c4:	4a5d      	ldr	r2, [pc, #372]	; (801483c <HAL_GPIO_DeInit+0x1d4>)
 80146c6:	4293      	cmp	r3, r2
 80146c8:	d02b      	beq.n	8014722 <HAL_GPIO_DeInit+0xba>
 80146ca:	687b      	ldr	r3, [r7, #4]
 80146cc:	4a5c      	ldr	r2, [pc, #368]	; (8014840 <HAL_GPIO_DeInit+0x1d8>)
 80146ce:	4293      	cmp	r3, r2
 80146d0:	d025      	beq.n	801471e <HAL_GPIO_DeInit+0xb6>
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	4a5b      	ldr	r2, [pc, #364]	; (8014844 <HAL_GPIO_DeInit+0x1dc>)
 80146d6:	4293      	cmp	r3, r2
 80146d8:	d01f      	beq.n	801471a <HAL_GPIO_DeInit+0xb2>
 80146da:	687b      	ldr	r3, [r7, #4]
 80146dc:	4a5a      	ldr	r2, [pc, #360]	; (8014848 <HAL_GPIO_DeInit+0x1e0>)
 80146de:	4293      	cmp	r3, r2
 80146e0:	d019      	beq.n	8014716 <HAL_GPIO_DeInit+0xae>
 80146e2:	687b      	ldr	r3, [r7, #4]
 80146e4:	4a59      	ldr	r2, [pc, #356]	; (801484c <HAL_GPIO_DeInit+0x1e4>)
 80146e6:	4293      	cmp	r3, r2
 80146e8:	d013      	beq.n	8014712 <HAL_GPIO_DeInit+0xaa>
 80146ea:	687b      	ldr	r3, [r7, #4]
 80146ec:	4a58      	ldr	r2, [pc, #352]	; (8014850 <HAL_GPIO_DeInit+0x1e8>)
 80146ee:	4293      	cmp	r3, r2
 80146f0:	d00d      	beq.n	801470e <HAL_GPIO_DeInit+0xa6>
 80146f2:	687b      	ldr	r3, [r7, #4]
 80146f4:	4a57      	ldr	r2, [pc, #348]	; (8014854 <HAL_GPIO_DeInit+0x1ec>)
 80146f6:	4293      	cmp	r3, r2
 80146f8:	d007      	beq.n	801470a <HAL_GPIO_DeInit+0xa2>
 80146fa:	687b      	ldr	r3, [r7, #4]
 80146fc:	4a56      	ldr	r2, [pc, #344]	; (8014858 <HAL_GPIO_DeInit+0x1f0>)
 80146fe:	4293      	cmp	r3, r2
 8014700:	d101      	bne.n	8014706 <HAL_GPIO_DeInit+0x9e>
 8014702:	2307      	movs	r3, #7
 8014704:	e00e      	b.n	8014724 <HAL_GPIO_DeInit+0xbc>
 8014706:	2308      	movs	r3, #8
 8014708:	e00c      	b.n	8014724 <HAL_GPIO_DeInit+0xbc>
 801470a:	2306      	movs	r3, #6
 801470c:	e00a      	b.n	8014724 <HAL_GPIO_DeInit+0xbc>
 801470e:	2305      	movs	r3, #5
 8014710:	e008      	b.n	8014724 <HAL_GPIO_DeInit+0xbc>
 8014712:	2304      	movs	r3, #4
 8014714:	e006      	b.n	8014724 <HAL_GPIO_DeInit+0xbc>
 8014716:	2303      	movs	r3, #3
 8014718:	e004      	b.n	8014724 <HAL_GPIO_DeInit+0xbc>
 801471a:	2302      	movs	r3, #2
 801471c:	e002      	b.n	8014724 <HAL_GPIO_DeInit+0xbc>
 801471e:	2301      	movs	r3, #1
 8014720:	e000      	b.n	8014724 <HAL_GPIO_DeInit+0xbc>
 8014722:	2300      	movs	r3, #0
 8014724:	697a      	ldr	r2, [r7, #20]
 8014726:	f002 0203 	and.w	r2, r2, #3
 801472a:	0092      	lsls	r2, r2, #2
 801472c:	4093      	lsls	r3, r2
 801472e:	68ba      	ldr	r2, [r7, #8]
 8014730:	429a      	cmp	r2, r3
 8014732:	d132      	bne.n	801479a <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8014734:	4b49      	ldr	r3, [pc, #292]	; (801485c <HAL_GPIO_DeInit+0x1f4>)
 8014736:	681a      	ldr	r2, [r3, #0]
 8014738:	68fb      	ldr	r3, [r7, #12]
 801473a:	43db      	mvns	r3, r3
 801473c:	4947      	ldr	r1, [pc, #284]	; (801485c <HAL_GPIO_DeInit+0x1f4>)
 801473e:	4013      	ands	r3, r2
 8014740:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8014742:	4b46      	ldr	r3, [pc, #280]	; (801485c <HAL_GPIO_DeInit+0x1f4>)
 8014744:	685a      	ldr	r2, [r3, #4]
 8014746:	68fb      	ldr	r3, [r7, #12]
 8014748:	43db      	mvns	r3, r3
 801474a:	4944      	ldr	r1, [pc, #272]	; (801485c <HAL_GPIO_DeInit+0x1f4>)
 801474c:	4013      	ands	r3, r2
 801474e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8014750:	4b42      	ldr	r3, [pc, #264]	; (801485c <HAL_GPIO_DeInit+0x1f4>)
 8014752:	68da      	ldr	r2, [r3, #12]
 8014754:	68fb      	ldr	r3, [r7, #12]
 8014756:	43db      	mvns	r3, r3
 8014758:	4940      	ldr	r1, [pc, #256]	; (801485c <HAL_GPIO_DeInit+0x1f4>)
 801475a:	4013      	ands	r3, r2
 801475c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 801475e:	4b3f      	ldr	r3, [pc, #252]	; (801485c <HAL_GPIO_DeInit+0x1f4>)
 8014760:	689a      	ldr	r2, [r3, #8]
 8014762:	68fb      	ldr	r3, [r7, #12]
 8014764:	43db      	mvns	r3, r3
 8014766:	493d      	ldr	r1, [pc, #244]	; (801485c <HAL_GPIO_DeInit+0x1f4>)
 8014768:	4013      	ands	r3, r2
 801476a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 801476c:	697b      	ldr	r3, [r7, #20]
 801476e:	f003 0303 	and.w	r3, r3, #3
 8014772:	009b      	lsls	r3, r3, #2
 8014774:	220f      	movs	r2, #15
 8014776:	fa02 f303 	lsl.w	r3, r2, r3
 801477a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 801477c:	4a2e      	ldr	r2, [pc, #184]	; (8014838 <HAL_GPIO_DeInit+0x1d0>)
 801477e:	697b      	ldr	r3, [r7, #20]
 8014780:	089b      	lsrs	r3, r3, #2
 8014782:	3302      	adds	r3, #2
 8014784:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8014788:	68bb      	ldr	r3, [r7, #8]
 801478a:	43da      	mvns	r2, r3
 801478c:	482a      	ldr	r0, [pc, #168]	; (8014838 <HAL_GPIO_DeInit+0x1d0>)
 801478e:	697b      	ldr	r3, [r7, #20]
 8014790:	089b      	lsrs	r3, r3, #2
 8014792:	400a      	ands	r2, r1
 8014794:	3302      	adds	r3, #2
 8014796:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 801479a:	687b      	ldr	r3, [r7, #4]
 801479c:	681a      	ldr	r2, [r3, #0]
 801479e:	697b      	ldr	r3, [r7, #20]
 80147a0:	005b      	lsls	r3, r3, #1
 80147a2:	2103      	movs	r1, #3
 80147a4:	fa01 f303 	lsl.w	r3, r1, r3
 80147a8:	43db      	mvns	r3, r3
 80147aa:	401a      	ands	r2, r3
 80147ac:	687b      	ldr	r3, [r7, #4]
 80147ae:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80147b0:	697b      	ldr	r3, [r7, #20]
 80147b2:	08da      	lsrs	r2, r3, #3
 80147b4:	687b      	ldr	r3, [r7, #4]
 80147b6:	3208      	adds	r2, #8
 80147b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80147bc:	697b      	ldr	r3, [r7, #20]
 80147be:	f003 0307 	and.w	r3, r3, #7
 80147c2:	009b      	lsls	r3, r3, #2
 80147c4:	220f      	movs	r2, #15
 80147c6:	fa02 f303 	lsl.w	r3, r2, r3
 80147ca:	43db      	mvns	r3, r3
 80147cc:	697a      	ldr	r2, [r7, #20]
 80147ce:	08d2      	lsrs	r2, r2, #3
 80147d0:	4019      	ands	r1, r3
 80147d2:	687b      	ldr	r3, [r7, #4]
 80147d4:	3208      	adds	r2, #8
 80147d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80147da:	687b      	ldr	r3, [r7, #4]
 80147dc:	68da      	ldr	r2, [r3, #12]
 80147de:	697b      	ldr	r3, [r7, #20]
 80147e0:	005b      	lsls	r3, r3, #1
 80147e2:	2103      	movs	r1, #3
 80147e4:	fa01 f303 	lsl.w	r3, r1, r3
 80147e8:	43db      	mvns	r3, r3
 80147ea:	401a      	ands	r2, r3
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80147f0:	687b      	ldr	r3, [r7, #4]
 80147f2:	685a      	ldr	r2, [r3, #4]
 80147f4:	2101      	movs	r1, #1
 80147f6:	697b      	ldr	r3, [r7, #20]
 80147f8:	fa01 f303 	lsl.w	r3, r1, r3
 80147fc:	43db      	mvns	r3, r3
 80147fe:	401a      	ands	r2, r3
 8014800:	687b      	ldr	r3, [r7, #4]
 8014802:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	689a      	ldr	r2, [r3, #8]
 8014808:	697b      	ldr	r3, [r7, #20]
 801480a:	005b      	lsls	r3, r3, #1
 801480c:	2103      	movs	r1, #3
 801480e:	fa01 f303 	lsl.w	r3, r1, r3
 8014812:	43db      	mvns	r3, r3
 8014814:	401a      	ands	r2, r3
 8014816:	687b      	ldr	r3, [r7, #4]
 8014818:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 801481a:	697b      	ldr	r3, [r7, #20]
 801481c:	3301      	adds	r3, #1
 801481e:	617b      	str	r3, [r7, #20]
 8014820:	697b      	ldr	r3, [r7, #20]
 8014822:	2b0f      	cmp	r3, #15
 8014824:	f67f af2e 	bls.w	8014684 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8014828:	bf00      	nop
 801482a:	bf00      	nop
 801482c:	371c      	adds	r7, #28
 801482e:	46bd      	mov	sp, r7
 8014830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014834:	4770      	bx	lr
 8014836:	bf00      	nop
 8014838:	40013800 	.word	0x40013800
 801483c:	40020000 	.word	0x40020000
 8014840:	40020400 	.word	0x40020400
 8014844:	40020800 	.word	0x40020800
 8014848:	40020c00 	.word	0x40020c00
 801484c:	40021000 	.word	0x40021000
 8014850:	40021400 	.word	0x40021400
 8014854:	40021800 	.word	0x40021800
 8014858:	40021c00 	.word	0x40021c00
 801485c:	40013c00 	.word	0x40013c00

08014860 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8014860:	b480      	push	{r7}
 8014862:	b085      	sub	sp, #20
 8014864:	af00      	add	r7, sp, #0
 8014866:	6078      	str	r0, [r7, #4]
 8014868:	460b      	mov	r3, r1
 801486a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 801486c:	687b      	ldr	r3, [r7, #4]
 801486e:	691a      	ldr	r2, [r3, #16]
 8014870:	887b      	ldrh	r3, [r7, #2]
 8014872:	4013      	ands	r3, r2
 8014874:	2b00      	cmp	r3, #0
 8014876:	d002      	beq.n	801487e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8014878:	2301      	movs	r3, #1
 801487a:	73fb      	strb	r3, [r7, #15]
 801487c:	e001      	b.n	8014882 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 801487e:	2300      	movs	r3, #0
 8014880:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8014882:	7bfb      	ldrb	r3, [r7, #15]
}
 8014884:	4618      	mov	r0, r3
 8014886:	3714      	adds	r7, #20
 8014888:	46bd      	mov	sp, r7
 801488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801488e:	4770      	bx	lr

08014890 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8014890:	b480      	push	{r7}
 8014892:	b083      	sub	sp, #12
 8014894:	af00      	add	r7, sp, #0
 8014896:	6078      	str	r0, [r7, #4]
 8014898:	460b      	mov	r3, r1
 801489a:	807b      	strh	r3, [r7, #2]
 801489c:	4613      	mov	r3, r2
 801489e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80148a0:	787b      	ldrb	r3, [r7, #1]
 80148a2:	2b00      	cmp	r3, #0
 80148a4:	d003      	beq.n	80148ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80148a6:	887a      	ldrh	r2, [r7, #2]
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80148ac:	e003      	b.n	80148b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80148ae:	887b      	ldrh	r3, [r7, #2]
 80148b0:	041a      	lsls	r2, r3, #16
 80148b2:	687b      	ldr	r3, [r7, #4]
 80148b4:	619a      	str	r2, [r3, #24]
}
 80148b6:	bf00      	nop
 80148b8:	370c      	adds	r7, #12
 80148ba:	46bd      	mov	sp, r7
 80148bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148c0:	4770      	bx	lr

080148c2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80148c2:	b480      	push	{r7}
 80148c4:	b085      	sub	sp, #20
 80148c6:	af00      	add	r7, sp, #0
 80148c8:	6078      	str	r0, [r7, #4]
 80148ca:	460b      	mov	r3, r1
 80148cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	695b      	ldr	r3, [r3, #20]
 80148d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80148d4:	887a      	ldrh	r2, [r7, #2]
 80148d6:	68fb      	ldr	r3, [r7, #12]
 80148d8:	4013      	ands	r3, r2
 80148da:	041a      	lsls	r2, r3, #16
 80148dc:	68fb      	ldr	r3, [r7, #12]
 80148de:	43d9      	mvns	r1, r3
 80148e0:	887b      	ldrh	r3, [r7, #2]
 80148e2:	400b      	ands	r3, r1
 80148e4:	431a      	orrs	r2, r3
 80148e6:	687b      	ldr	r3, [r7, #4]
 80148e8:	619a      	str	r2, [r3, #24]
}
 80148ea:	bf00      	nop
 80148ec:	3714      	adds	r7, #20
 80148ee:	46bd      	mov	sp, r7
 80148f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148f4:	4770      	bx	lr
	...

080148f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80148f8:	b580      	push	{r7, lr}
 80148fa:	b084      	sub	sp, #16
 80148fc:	af00      	add	r7, sp, #0
 80148fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	2b00      	cmp	r3, #0
 8014904:	d101      	bne.n	801490a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8014906:	2301      	movs	r3, #1
 8014908:	e12b      	b.n	8014b62 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014910:	b2db      	uxtb	r3, r3
 8014912:	2b00      	cmp	r3, #0
 8014914:	d106      	bne.n	8014924 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8014916:	687b      	ldr	r3, [r7, #4]
 8014918:	2200      	movs	r2, #0
 801491a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 801491e:	6878      	ldr	r0, [r7, #4]
 8014920:	f7fd fe52 	bl	80125c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8014924:	687b      	ldr	r3, [r7, #4]
 8014926:	2224      	movs	r2, #36	; 0x24
 8014928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	681b      	ldr	r3, [r3, #0]
 8014930:	681a      	ldr	r2, [r3, #0]
 8014932:	687b      	ldr	r3, [r7, #4]
 8014934:	681b      	ldr	r3, [r3, #0]
 8014936:	f022 0201 	bic.w	r2, r2, #1
 801493a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 801493c:	687b      	ldr	r3, [r7, #4]
 801493e:	681b      	ldr	r3, [r3, #0]
 8014940:	681a      	ldr	r2, [r3, #0]
 8014942:	687b      	ldr	r3, [r7, #4]
 8014944:	681b      	ldr	r3, [r3, #0]
 8014946:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801494a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 801494c:	687b      	ldr	r3, [r7, #4]
 801494e:	681b      	ldr	r3, [r3, #0]
 8014950:	681a      	ldr	r2, [r3, #0]
 8014952:	687b      	ldr	r3, [r7, #4]
 8014954:	681b      	ldr	r3, [r3, #0]
 8014956:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801495a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 801495c:	f001 fbb2 	bl	80160c4 <HAL_RCC_GetPCLK1Freq>
 8014960:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8014962:	687b      	ldr	r3, [r7, #4]
 8014964:	685b      	ldr	r3, [r3, #4]
 8014966:	4a81      	ldr	r2, [pc, #516]	; (8014b6c <HAL_I2C_Init+0x274>)
 8014968:	4293      	cmp	r3, r2
 801496a:	d807      	bhi.n	801497c <HAL_I2C_Init+0x84>
 801496c:	68fb      	ldr	r3, [r7, #12]
 801496e:	4a80      	ldr	r2, [pc, #512]	; (8014b70 <HAL_I2C_Init+0x278>)
 8014970:	4293      	cmp	r3, r2
 8014972:	bf94      	ite	ls
 8014974:	2301      	movls	r3, #1
 8014976:	2300      	movhi	r3, #0
 8014978:	b2db      	uxtb	r3, r3
 801497a:	e006      	b.n	801498a <HAL_I2C_Init+0x92>
 801497c:	68fb      	ldr	r3, [r7, #12]
 801497e:	4a7d      	ldr	r2, [pc, #500]	; (8014b74 <HAL_I2C_Init+0x27c>)
 8014980:	4293      	cmp	r3, r2
 8014982:	bf94      	ite	ls
 8014984:	2301      	movls	r3, #1
 8014986:	2300      	movhi	r3, #0
 8014988:	b2db      	uxtb	r3, r3
 801498a:	2b00      	cmp	r3, #0
 801498c:	d001      	beq.n	8014992 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 801498e:	2301      	movs	r3, #1
 8014990:	e0e7      	b.n	8014b62 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8014992:	68fb      	ldr	r3, [r7, #12]
 8014994:	4a78      	ldr	r2, [pc, #480]	; (8014b78 <HAL_I2C_Init+0x280>)
 8014996:	fba2 2303 	umull	r2, r3, r2, r3
 801499a:	0c9b      	lsrs	r3, r3, #18
 801499c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 801499e:	687b      	ldr	r3, [r7, #4]
 80149a0:	681b      	ldr	r3, [r3, #0]
 80149a2:	685b      	ldr	r3, [r3, #4]
 80149a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	681b      	ldr	r3, [r3, #0]
 80149ac:	68ba      	ldr	r2, [r7, #8]
 80149ae:	430a      	orrs	r2, r1
 80149b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80149b2:	687b      	ldr	r3, [r7, #4]
 80149b4:	681b      	ldr	r3, [r3, #0]
 80149b6:	6a1b      	ldr	r3, [r3, #32]
 80149b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80149bc:	687b      	ldr	r3, [r7, #4]
 80149be:	685b      	ldr	r3, [r3, #4]
 80149c0:	4a6a      	ldr	r2, [pc, #424]	; (8014b6c <HAL_I2C_Init+0x274>)
 80149c2:	4293      	cmp	r3, r2
 80149c4:	d802      	bhi.n	80149cc <HAL_I2C_Init+0xd4>
 80149c6:	68bb      	ldr	r3, [r7, #8]
 80149c8:	3301      	adds	r3, #1
 80149ca:	e009      	b.n	80149e0 <HAL_I2C_Init+0xe8>
 80149cc:	68bb      	ldr	r3, [r7, #8]
 80149ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80149d2:	fb02 f303 	mul.w	r3, r2, r3
 80149d6:	4a69      	ldr	r2, [pc, #420]	; (8014b7c <HAL_I2C_Init+0x284>)
 80149d8:	fba2 2303 	umull	r2, r3, r2, r3
 80149dc:	099b      	lsrs	r3, r3, #6
 80149de:	3301      	adds	r3, #1
 80149e0:	687a      	ldr	r2, [r7, #4]
 80149e2:	6812      	ldr	r2, [r2, #0]
 80149e4:	430b      	orrs	r3, r1
 80149e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	681b      	ldr	r3, [r3, #0]
 80149ec:	69db      	ldr	r3, [r3, #28]
 80149ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80149f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80149f6:	687b      	ldr	r3, [r7, #4]
 80149f8:	685b      	ldr	r3, [r3, #4]
 80149fa:	495c      	ldr	r1, [pc, #368]	; (8014b6c <HAL_I2C_Init+0x274>)
 80149fc:	428b      	cmp	r3, r1
 80149fe:	d819      	bhi.n	8014a34 <HAL_I2C_Init+0x13c>
 8014a00:	68fb      	ldr	r3, [r7, #12]
 8014a02:	1e59      	subs	r1, r3, #1
 8014a04:	687b      	ldr	r3, [r7, #4]
 8014a06:	685b      	ldr	r3, [r3, #4]
 8014a08:	005b      	lsls	r3, r3, #1
 8014a0a:	fbb1 f3f3 	udiv	r3, r1, r3
 8014a0e:	1c59      	adds	r1, r3, #1
 8014a10:	f640 73fc 	movw	r3, #4092	; 0xffc
 8014a14:	400b      	ands	r3, r1
 8014a16:	2b00      	cmp	r3, #0
 8014a18:	d00a      	beq.n	8014a30 <HAL_I2C_Init+0x138>
 8014a1a:	68fb      	ldr	r3, [r7, #12]
 8014a1c:	1e59      	subs	r1, r3, #1
 8014a1e:	687b      	ldr	r3, [r7, #4]
 8014a20:	685b      	ldr	r3, [r3, #4]
 8014a22:	005b      	lsls	r3, r3, #1
 8014a24:	fbb1 f3f3 	udiv	r3, r1, r3
 8014a28:	3301      	adds	r3, #1
 8014a2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8014a2e:	e051      	b.n	8014ad4 <HAL_I2C_Init+0x1dc>
 8014a30:	2304      	movs	r3, #4
 8014a32:	e04f      	b.n	8014ad4 <HAL_I2C_Init+0x1dc>
 8014a34:	687b      	ldr	r3, [r7, #4]
 8014a36:	689b      	ldr	r3, [r3, #8]
 8014a38:	2b00      	cmp	r3, #0
 8014a3a:	d111      	bne.n	8014a60 <HAL_I2C_Init+0x168>
 8014a3c:	68fb      	ldr	r3, [r7, #12]
 8014a3e:	1e58      	subs	r0, r3, #1
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	6859      	ldr	r1, [r3, #4]
 8014a44:	460b      	mov	r3, r1
 8014a46:	005b      	lsls	r3, r3, #1
 8014a48:	440b      	add	r3, r1
 8014a4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8014a4e:	3301      	adds	r3, #1
 8014a50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8014a54:	2b00      	cmp	r3, #0
 8014a56:	bf0c      	ite	eq
 8014a58:	2301      	moveq	r3, #1
 8014a5a:	2300      	movne	r3, #0
 8014a5c:	b2db      	uxtb	r3, r3
 8014a5e:	e012      	b.n	8014a86 <HAL_I2C_Init+0x18e>
 8014a60:	68fb      	ldr	r3, [r7, #12]
 8014a62:	1e58      	subs	r0, r3, #1
 8014a64:	687b      	ldr	r3, [r7, #4]
 8014a66:	6859      	ldr	r1, [r3, #4]
 8014a68:	460b      	mov	r3, r1
 8014a6a:	009b      	lsls	r3, r3, #2
 8014a6c:	440b      	add	r3, r1
 8014a6e:	0099      	lsls	r1, r3, #2
 8014a70:	440b      	add	r3, r1
 8014a72:	fbb0 f3f3 	udiv	r3, r0, r3
 8014a76:	3301      	adds	r3, #1
 8014a78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8014a7c:	2b00      	cmp	r3, #0
 8014a7e:	bf0c      	ite	eq
 8014a80:	2301      	moveq	r3, #1
 8014a82:	2300      	movne	r3, #0
 8014a84:	b2db      	uxtb	r3, r3
 8014a86:	2b00      	cmp	r3, #0
 8014a88:	d001      	beq.n	8014a8e <HAL_I2C_Init+0x196>
 8014a8a:	2301      	movs	r3, #1
 8014a8c:	e022      	b.n	8014ad4 <HAL_I2C_Init+0x1dc>
 8014a8e:	687b      	ldr	r3, [r7, #4]
 8014a90:	689b      	ldr	r3, [r3, #8]
 8014a92:	2b00      	cmp	r3, #0
 8014a94:	d10e      	bne.n	8014ab4 <HAL_I2C_Init+0x1bc>
 8014a96:	68fb      	ldr	r3, [r7, #12]
 8014a98:	1e58      	subs	r0, r3, #1
 8014a9a:	687b      	ldr	r3, [r7, #4]
 8014a9c:	6859      	ldr	r1, [r3, #4]
 8014a9e:	460b      	mov	r3, r1
 8014aa0:	005b      	lsls	r3, r3, #1
 8014aa2:	440b      	add	r3, r1
 8014aa4:	fbb0 f3f3 	udiv	r3, r0, r3
 8014aa8:	3301      	adds	r3, #1
 8014aaa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8014aae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8014ab2:	e00f      	b.n	8014ad4 <HAL_I2C_Init+0x1dc>
 8014ab4:	68fb      	ldr	r3, [r7, #12]
 8014ab6:	1e58      	subs	r0, r3, #1
 8014ab8:	687b      	ldr	r3, [r7, #4]
 8014aba:	6859      	ldr	r1, [r3, #4]
 8014abc:	460b      	mov	r3, r1
 8014abe:	009b      	lsls	r3, r3, #2
 8014ac0:	440b      	add	r3, r1
 8014ac2:	0099      	lsls	r1, r3, #2
 8014ac4:	440b      	add	r3, r1
 8014ac6:	fbb0 f3f3 	udiv	r3, r0, r3
 8014aca:	3301      	adds	r3, #1
 8014acc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8014ad0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8014ad4:	6879      	ldr	r1, [r7, #4]
 8014ad6:	6809      	ldr	r1, [r1, #0]
 8014ad8:	4313      	orrs	r3, r2
 8014ada:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8014adc:	687b      	ldr	r3, [r7, #4]
 8014ade:	681b      	ldr	r3, [r3, #0]
 8014ae0:	681b      	ldr	r3, [r3, #0]
 8014ae2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8014ae6:	687b      	ldr	r3, [r7, #4]
 8014ae8:	69da      	ldr	r2, [r3, #28]
 8014aea:	687b      	ldr	r3, [r7, #4]
 8014aec:	6a1b      	ldr	r3, [r3, #32]
 8014aee:	431a      	orrs	r2, r3
 8014af0:	687b      	ldr	r3, [r7, #4]
 8014af2:	681b      	ldr	r3, [r3, #0]
 8014af4:	430a      	orrs	r2, r1
 8014af6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8014af8:	687b      	ldr	r3, [r7, #4]
 8014afa:	681b      	ldr	r3, [r3, #0]
 8014afc:	689b      	ldr	r3, [r3, #8]
 8014afe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8014b02:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8014b06:	687a      	ldr	r2, [r7, #4]
 8014b08:	6911      	ldr	r1, [r2, #16]
 8014b0a:	687a      	ldr	r2, [r7, #4]
 8014b0c:	68d2      	ldr	r2, [r2, #12]
 8014b0e:	4311      	orrs	r1, r2
 8014b10:	687a      	ldr	r2, [r7, #4]
 8014b12:	6812      	ldr	r2, [r2, #0]
 8014b14:	430b      	orrs	r3, r1
 8014b16:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8014b18:	687b      	ldr	r3, [r7, #4]
 8014b1a:	681b      	ldr	r3, [r3, #0]
 8014b1c:	68db      	ldr	r3, [r3, #12]
 8014b1e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	695a      	ldr	r2, [r3, #20]
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	699b      	ldr	r3, [r3, #24]
 8014b2a:	431a      	orrs	r2, r3
 8014b2c:	687b      	ldr	r3, [r7, #4]
 8014b2e:	681b      	ldr	r3, [r3, #0]
 8014b30:	430a      	orrs	r2, r1
 8014b32:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8014b34:	687b      	ldr	r3, [r7, #4]
 8014b36:	681b      	ldr	r3, [r3, #0]
 8014b38:	681a      	ldr	r2, [r3, #0]
 8014b3a:	687b      	ldr	r3, [r7, #4]
 8014b3c:	681b      	ldr	r3, [r3, #0]
 8014b3e:	f042 0201 	orr.w	r2, r2, #1
 8014b42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	2200      	movs	r2, #0
 8014b48:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8014b4a:	687b      	ldr	r3, [r7, #4]
 8014b4c:	2220      	movs	r2, #32
 8014b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8014b52:	687b      	ldr	r3, [r7, #4]
 8014b54:	2200      	movs	r2, #0
 8014b56:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8014b58:	687b      	ldr	r3, [r7, #4]
 8014b5a:	2200      	movs	r2, #0
 8014b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8014b60:	2300      	movs	r3, #0
}
 8014b62:	4618      	mov	r0, r3
 8014b64:	3710      	adds	r7, #16
 8014b66:	46bd      	mov	sp, r7
 8014b68:	bd80      	pop	{r7, pc}
 8014b6a:	bf00      	nop
 8014b6c:	000186a0 	.word	0x000186a0
 8014b70:	001e847f 	.word	0x001e847f
 8014b74:	003d08ff 	.word	0x003d08ff
 8014b78:	431bde83 	.word	0x431bde83
 8014b7c:	10624dd3 	.word	0x10624dd3

08014b80 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8014b80:	b580      	push	{r7, lr}
 8014b82:	b082      	sub	sp, #8
 8014b84:	af00      	add	r7, sp, #0
 8014b86:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8014b88:	687b      	ldr	r3, [r7, #4]
 8014b8a:	2b00      	cmp	r3, #0
 8014b8c:	d101      	bne.n	8014b92 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8014b8e:	2301      	movs	r3, #1
 8014b90:	e021      	b.n	8014bd6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8014b92:	687b      	ldr	r3, [r7, #4]
 8014b94:	2224      	movs	r2, #36	; 0x24
 8014b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8014b9a:	687b      	ldr	r3, [r7, #4]
 8014b9c:	681b      	ldr	r3, [r3, #0]
 8014b9e:	681a      	ldr	r2, [r3, #0]
 8014ba0:	687b      	ldr	r3, [r7, #4]
 8014ba2:	681b      	ldr	r3, [r3, #0]
 8014ba4:	f022 0201 	bic.w	r2, r2, #1
 8014ba8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8014baa:	6878      	ldr	r0, [r7, #4]
 8014bac:	f7fd fd54 	bl	8012658 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8014bb0:	687b      	ldr	r3, [r7, #4]
 8014bb2:	2200      	movs	r2, #0
 8014bb4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8014bb6:	687b      	ldr	r3, [r7, #4]
 8014bb8:	2200      	movs	r2, #0
 8014bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8014bbe:	687b      	ldr	r3, [r7, #4]
 8014bc0:	2200      	movs	r2, #0
 8014bc2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8014bc4:	687b      	ldr	r3, [r7, #4]
 8014bc6:	2200      	movs	r2, #0
 8014bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8014bcc:	687b      	ldr	r3, [r7, #4]
 8014bce:	2200      	movs	r2, #0
 8014bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8014bd4:	2300      	movs	r3, #0
}
 8014bd6:	4618      	mov	r0, r3
 8014bd8:	3708      	adds	r7, #8
 8014bda:	46bd      	mov	sp, r7
 8014bdc:	bd80      	pop	{r7, pc}
	...

08014be0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8014be0:	b580      	push	{r7, lr}
 8014be2:	b088      	sub	sp, #32
 8014be4:	af02      	add	r7, sp, #8
 8014be6:	60f8      	str	r0, [r7, #12]
 8014be8:	607a      	str	r2, [r7, #4]
 8014bea:	461a      	mov	r2, r3
 8014bec:	460b      	mov	r3, r1
 8014bee:	817b      	strh	r3, [r7, #10]
 8014bf0:	4613      	mov	r3, r2
 8014bf2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8014bf4:	f7fe f95c 	bl	8012eb0 <HAL_GetTick>
 8014bf8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8014bfa:	68fb      	ldr	r3, [r7, #12]
 8014bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014c00:	b2db      	uxtb	r3, r3
 8014c02:	2b20      	cmp	r3, #32
 8014c04:	f040 80e0 	bne.w	8014dc8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8014c08:	697b      	ldr	r3, [r7, #20]
 8014c0a:	9300      	str	r3, [sp, #0]
 8014c0c:	2319      	movs	r3, #25
 8014c0e:	2201      	movs	r2, #1
 8014c10:	4970      	ldr	r1, [pc, #448]	; (8014dd4 <HAL_I2C_Master_Transmit+0x1f4>)
 8014c12:	68f8      	ldr	r0, [r7, #12]
 8014c14:	f000 fc58 	bl	80154c8 <I2C_WaitOnFlagUntilTimeout>
 8014c18:	4603      	mov	r3, r0
 8014c1a:	2b00      	cmp	r3, #0
 8014c1c:	d001      	beq.n	8014c22 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8014c1e:	2302      	movs	r3, #2
 8014c20:	e0d3      	b.n	8014dca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8014c22:	68fb      	ldr	r3, [r7, #12]
 8014c24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8014c28:	2b01      	cmp	r3, #1
 8014c2a:	d101      	bne.n	8014c30 <HAL_I2C_Master_Transmit+0x50>
 8014c2c:	2302      	movs	r3, #2
 8014c2e:	e0cc      	b.n	8014dca <HAL_I2C_Master_Transmit+0x1ea>
 8014c30:	68fb      	ldr	r3, [r7, #12]
 8014c32:	2201      	movs	r2, #1
 8014c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8014c38:	68fb      	ldr	r3, [r7, #12]
 8014c3a:	681b      	ldr	r3, [r3, #0]
 8014c3c:	681b      	ldr	r3, [r3, #0]
 8014c3e:	f003 0301 	and.w	r3, r3, #1
 8014c42:	2b01      	cmp	r3, #1
 8014c44:	d007      	beq.n	8014c56 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8014c46:	68fb      	ldr	r3, [r7, #12]
 8014c48:	681b      	ldr	r3, [r3, #0]
 8014c4a:	681a      	ldr	r2, [r3, #0]
 8014c4c:	68fb      	ldr	r3, [r7, #12]
 8014c4e:	681b      	ldr	r3, [r3, #0]
 8014c50:	f042 0201 	orr.w	r2, r2, #1
 8014c54:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8014c56:	68fb      	ldr	r3, [r7, #12]
 8014c58:	681b      	ldr	r3, [r3, #0]
 8014c5a:	681a      	ldr	r2, [r3, #0]
 8014c5c:	68fb      	ldr	r3, [r7, #12]
 8014c5e:	681b      	ldr	r3, [r3, #0]
 8014c60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8014c64:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8014c66:	68fb      	ldr	r3, [r7, #12]
 8014c68:	2221      	movs	r2, #33	; 0x21
 8014c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8014c6e:	68fb      	ldr	r3, [r7, #12]
 8014c70:	2210      	movs	r2, #16
 8014c72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8014c76:	68fb      	ldr	r3, [r7, #12]
 8014c78:	2200      	movs	r2, #0
 8014c7a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8014c7c:	68fb      	ldr	r3, [r7, #12]
 8014c7e:	687a      	ldr	r2, [r7, #4]
 8014c80:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8014c82:	68fb      	ldr	r3, [r7, #12]
 8014c84:	893a      	ldrh	r2, [r7, #8]
 8014c86:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8014c88:	68fb      	ldr	r3, [r7, #12]
 8014c8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014c8c:	b29a      	uxth	r2, r3
 8014c8e:	68fb      	ldr	r3, [r7, #12]
 8014c90:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8014c92:	68fb      	ldr	r3, [r7, #12]
 8014c94:	4a50      	ldr	r2, [pc, #320]	; (8014dd8 <HAL_I2C_Master_Transmit+0x1f8>)
 8014c96:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8014c98:	8979      	ldrh	r1, [r7, #10]
 8014c9a:	697b      	ldr	r3, [r7, #20]
 8014c9c:	6a3a      	ldr	r2, [r7, #32]
 8014c9e:	68f8      	ldr	r0, [r7, #12]
 8014ca0:	f000 fac2 	bl	8015228 <I2C_MasterRequestWrite>
 8014ca4:	4603      	mov	r3, r0
 8014ca6:	2b00      	cmp	r3, #0
 8014ca8:	d001      	beq.n	8014cae <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8014caa:	2301      	movs	r3, #1
 8014cac:	e08d      	b.n	8014dca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8014cae:	2300      	movs	r3, #0
 8014cb0:	613b      	str	r3, [r7, #16]
 8014cb2:	68fb      	ldr	r3, [r7, #12]
 8014cb4:	681b      	ldr	r3, [r3, #0]
 8014cb6:	695b      	ldr	r3, [r3, #20]
 8014cb8:	613b      	str	r3, [r7, #16]
 8014cba:	68fb      	ldr	r3, [r7, #12]
 8014cbc:	681b      	ldr	r3, [r3, #0]
 8014cbe:	699b      	ldr	r3, [r3, #24]
 8014cc0:	613b      	str	r3, [r7, #16]
 8014cc2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8014cc4:	e066      	b.n	8014d94 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8014cc6:	697a      	ldr	r2, [r7, #20]
 8014cc8:	6a39      	ldr	r1, [r7, #32]
 8014cca:	68f8      	ldr	r0, [r7, #12]
 8014ccc:	f000 fcd2 	bl	8015674 <I2C_WaitOnTXEFlagUntilTimeout>
 8014cd0:	4603      	mov	r3, r0
 8014cd2:	2b00      	cmp	r3, #0
 8014cd4:	d00d      	beq.n	8014cf2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8014cd6:	68fb      	ldr	r3, [r7, #12]
 8014cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014cda:	2b04      	cmp	r3, #4
 8014cdc:	d107      	bne.n	8014cee <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8014cde:	68fb      	ldr	r3, [r7, #12]
 8014ce0:	681b      	ldr	r3, [r3, #0]
 8014ce2:	681a      	ldr	r2, [r3, #0]
 8014ce4:	68fb      	ldr	r3, [r7, #12]
 8014ce6:	681b      	ldr	r3, [r3, #0]
 8014ce8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8014cec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8014cee:	2301      	movs	r3, #1
 8014cf0:	e06b      	b.n	8014dca <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8014cf2:	68fb      	ldr	r3, [r7, #12]
 8014cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014cf6:	781a      	ldrb	r2, [r3, #0]
 8014cf8:	68fb      	ldr	r3, [r7, #12]
 8014cfa:	681b      	ldr	r3, [r3, #0]
 8014cfc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8014cfe:	68fb      	ldr	r3, [r7, #12]
 8014d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d02:	1c5a      	adds	r2, r3, #1
 8014d04:	68fb      	ldr	r3, [r7, #12]
 8014d06:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8014d08:	68fb      	ldr	r3, [r7, #12]
 8014d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014d0c:	b29b      	uxth	r3, r3
 8014d0e:	3b01      	subs	r3, #1
 8014d10:	b29a      	uxth	r2, r3
 8014d12:	68fb      	ldr	r3, [r7, #12]
 8014d14:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8014d16:	68fb      	ldr	r3, [r7, #12]
 8014d18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014d1a:	3b01      	subs	r3, #1
 8014d1c:	b29a      	uxth	r2, r3
 8014d1e:	68fb      	ldr	r3, [r7, #12]
 8014d20:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8014d22:	68fb      	ldr	r3, [r7, #12]
 8014d24:	681b      	ldr	r3, [r3, #0]
 8014d26:	695b      	ldr	r3, [r3, #20]
 8014d28:	f003 0304 	and.w	r3, r3, #4
 8014d2c:	2b04      	cmp	r3, #4
 8014d2e:	d11b      	bne.n	8014d68 <HAL_I2C_Master_Transmit+0x188>
 8014d30:	68fb      	ldr	r3, [r7, #12]
 8014d32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014d34:	2b00      	cmp	r3, #0
 8014d36:	d017      	beq.n	8014d68 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8014d38:	68fb      	ldr	r3, [r7, #12]
 8014d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d3c:	781a      	ldrb	r2, [r3, #0]
 8014d3e:	68fb      	ldr	r3, [r7, #12]
 8014d40:	681b      	ldr	r3, [r3, #0]
 8014d42:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8014d44:	68fb      	ldr	r3, [r7, #12]
 8014d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d48:	1c5a      	adds	r2, r3, #1
 8014d4a:	68fb      	ldr	r3, [r7, #12]
 8014d4c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8014d4e:	68fb      	ldr	r3, [r7, #12]
 8014d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014d52:	b29b      	uxth	r3, r3
 8014d54:	3b01      	subs	r3, #1
 8014d56:	b29a      	uxth	r2, r3
 8014d58:	68fb      	ldr	r3, [r7, #12]
 8014d5a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8014d5c:	68fb      	ldr	r3, [r7, #12]
 8014d5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014d60:	3b01      	subs	r3, #1
 8014d62:	b29a      	uxth	r2, r3
 8014d64:	68fb      	ldr	r3, [r7, #12]
 8014d66:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8014d68:	697a      	ldr	r2, [r7, #20]
 8014d6a:	6a39      	ldr	r1, [r7, #32]
 8014d6c:	68f8      	ldr	r0, [r7, #12]
 8014d6e:	f000 fcc2 	bl	80156f6 <I2C_WaitOnBTFFlagUntilTimeout>
 8014d72:	4603      	mov	r3, r0
 8014d74:	2b00      	cmp	r3, #0
 8014d76:	d00d      	beq.n	8014d94 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8014d78:	68fb      	ldr	r3, [r7, #12]
 8014d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014d7c:	2b04      	cmp	r3, #4
 8014d7e:	d107      	bne.n	8014d90 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8014d80:	68fb      	ldr	r3, [r7, #12]
 8014d82:	681b      	ldr	r3, [r3, #0]
 8014d84:	681a      	ldr	r2, [r3, #0]
 8014d86:	68fb      	ldr	r3, [r7, #12]
 8014d88:	681b      	ldr	r3, [r3, #0]
 8014d8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8014d8e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8014d90:	2301      	movs	r3, #1
 8014d92:	e01a      	b.n	8014dca <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8014d94:	68fb      	ldr	r3, [r7, #12]
 8014d96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014d98:	2b00      	cmp	r3, #0
 8014d9a:	d194      	bne.n	8014cc6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8014d9c:	68fb      	ldr	r3, [r7, #12]
 8014d9e:	681b      	ldr	r3, [r3, #0]
 8014da0:	681a      	ldr	r2, [r3, #0]
 8014da2:	68fb      	ldr	r3, [r7, #12]
 8014da4:	681b      	ldr	r3, [r3, #0]
 8014da6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8014daa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8014dac:	68fb      	ldr	r3, [r7, #12]
 8014dae:	2220      	movs	r2, #32
 8014db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8014db4:	68fb      	ldr	r3, [r7, #12]
 8014db6:	2200      	movs	r2, #0
 8014db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8014dbc:	68fb      	ldr	r3, [r7, #12]
 8014dbe:	2200      	movs	r2, #0
 8014dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8014dc4:	2300      	movs	r3, #0
 8014dc6:	e000      	b.n	8014dca <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8014dc8:	2302      	movs	r3, #2
  }
}
 8014dca:	4618      	mov	r0, r3
 8014dcc:	3718      	adds	r7, #24
 8014dce:	46bd      	mov	sp, r7
 8014dd0:	bd80      	pop	{r7, pc}
 8014dd2:	bf00      	nop
 8014dd4:	00100002 	.word	0x00100002
 8014dd8:	ffff0000 	.word	0xffff0000

08014ddc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8014ddc:	b580      	push	{r7, lr}
 8014dde:	b08c      	sub	sp, #48	; 0x30
 8014de0:	af02      	add	r7, sp, #8
 8014de2:	60f8      	str	r0, [r7, #12]
 8014de4:	607a      	str	r2, [r7, #4]
 8014de6:	461a      	mov	r2, r3
 8014de8:	460b      	mov	r3, r1
 8014dea:	817b      	strh	r3, [r7, #10]
 8014dec:	4613      	mov	r3, r2
 8014dee:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8014df0:	f7fe f85e 	bl	8012eb0 <HAL_GetTick>
 8014df4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8014df6:	68fb      	ldr	r3, [r7, #12]
 8014df8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014dfc:	b2db      	uxtb	r3, r3
 8014dfe:	2b20      	cmp	r3, #32
 8014e00:	f040 820b 	bne.w	801521a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8014e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e06:	9300      	str	r3, [sp, #0]
 8014e08:	2319      	movs	r3, #25
 8014e0a:	2201      	movs	r2, #1
 8014e0c:	497c      	ldr	r1, [pc, #496]	; (8015000 <HAL_I2C_Master_Receive+0x224>)
 8014e0e:	68f8      	ldr	r0, [r7, #12]
 8014e10:	f000 fb5a 	bl	80154c8 <I2C_WaitOnFlagUntilTimeout>
 8014e14:	4603      	mov	r3, r0
 8014e16:	2b00      	cmp	r3, #0
 8014e18:	d001      	beq.n	8014e1e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8014e1a:	2302      	movs	r3, #2
 8014e1c:	e1fe      	b.n	801521c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8014e1e:	68fb      	ldr	r3, [r7, #12]
 8014e20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8014e24:	2b01      	cmp	r3, #1
 8014e26:	d101      	bne.n	8014e2c <HAL_I2C_Master_Receive+0x50>
 8014e28:	2302      	movs	r3, #2
 8014e2a:	e1f7      	b.n	801521c <HAL_I2C_Master_Receive+0x440>
 8014e2c:	68fb      	ldr	r3, [r7, #12]
 8014e2e:	2201      	movs	r2, #1
 8014e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8014e34:	68fb      	ldr	r3, [r7, #12]
 8014e36:	681b      	ldr	r3, [r3, #0]
 8014e38:	681b      	ldr	r3, [r3, #0]
 8014e3a:	f003 0301 	and.w	r3, r3, #1
 8014e3e:	2b01      	cmp	r3, #1
 8014e40:	d007      	beq.n	8014e52 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8014e42:	68fb      	ldr	r3, [r7, #12]
 8014e44:	681b      	ldr	r3, [r3, #0]
 8014e46:	681a      	ldr	r2, [r3, #0]
 8014e48:	68fb      	ldr	r3, [r7, #12]
 8014e4a:	681b      	ldr	r3, [r3, #0]
 8014e4c:	f042 0201 	orr.w	r2, r2, #1
 8014e50:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8014e52:	68fb      	ldr	r3, [r7, #12]
 8014e54:	681b      	ldr	r3, [r3, #0]
 8014e56:	681a      	ldr	r2, [r3, #0]
 8014e58:	68fb      	ldr	r3, [r7, #12]
 8014e5a:	681b      	ldr	r3, [r3, #0]
 8014e5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8014e60:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8014e62:	68fb      	ldr	r3, [r7, #12]
 8014e64:	2222      	movs	r2, #34	; 0x22
 8014e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8014e6a:	68fb      	ldr	r3, [r7, #12]
 8014e6c:	2210      	movs	r2, #16
 8014e6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8014e72:	68fb      	ldr	r3, [r7, #12]
 8014e74:	2200      	movs	r2, #0
 8014e76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8014e78:	68fb      	ldr	r3, [r7, #12]
 8014e7a:	687a      	ldr	r2, [r7, #4]
 8014e7c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8014e7e:	68fb      	ldr	r3, [r7, #12]
 8014e80:	893a      	ldrh	r2, [r7, #8]
 8014e82:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8014e84:	68fb      	ldr	r3, [r7, #12]
 8014e86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014e88:	b29a      	uxth	r2, r3
 8014e8a:	68fb      	ldr	r3, [r7, #12]
 8014e8c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8014e8e:	68fb      	ldr	r3, [r7, #12]
 8014e90:	4a5c      	ldr	r2, [pc, #368]	; (8015004 <HAL_I2C_Master_Receive+0x228>)
 8014e92:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8014e94:	8979      	ldrh	r1, [r7, #10]
 8014e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014e9a:	68f8      	ldr	r0, [r7, #12]
 8014e9c:	f000 fa46 	bl	801532c <I2C_MasterRequestRead>
 8014ea0:	4603      	mov	r3, r0
 8014ea2:	2b00      	cmp	r3, #0
 8014ea4:	d001      	beq.n	8014eaa <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8014ea6:	2301      	movs	r3, #1
 8014ea8:	e1b8      	b.n	801521c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8014eaa:	68fb      	ldr	r3, [r7, #12]
 8014eac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014eae:	2b00      	cmp	r3, #0
 8014eb0:	d113      	bne.n	8014eda <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8014eb2:	2300      	movs	r3, #0
 8014eb4:	623b      	str	r3, [r7, #32]
 8014eb6:	68fb      	ldr	r3, [r7, #12]
 8014eb8:	681b      	ldr	r3, [r3, #0]
 8014eba:	695b      	ldr	r3, [r3, #20]
 8014ebc:	623b      	str	r3, [r7, #32]
 8014ebe:	68fb      	ldr	r3, [r7, #12]
 8014ec0:	681b      	ldr	r3, [r3, #0]
 8014ec2:	699b      	ldr	r3, [r3, #24]
 8014ec4:	623b      	str	r3, [r7, #32]
 8014ec6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8014ec8:	68fb      	ldr	r3, [r7, #12]
 8014eca:	681b      	ldr	r3, [r3, #0]
 8014ecc:	681a      	ldr	r2, [r3, #0]
 8014ece:	68fb      	ldr	r3, [r7, #12]
 8014ed0:	681b      	ldr	r3, [r3, #0]
 8014ed2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8014ed6:	601a      	str	r2, [r3, #0]
 8014ed8:	e18c      	b.n	80151f4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8014eda:	68fb      	ldr	r3, [r7, #12]
 8014edc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014ede:	2b01      	cmp	r3, #1
 8014ee0:	d11b      	bne.n	8014f1a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8014ee2:	68fb      	ldr	r3, [r7, #12]
 8014ee4:	681b      	ldr	r3, [r3, #0]
 8014ee6:	681a      	ldr	r2, [r3, #0]
 8014ee8:	68fb      	ldr	r3, [r7, #12]
 8014eea:	681b      	ldr	r3, [r3, #0]
 8014eec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8014ef0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8014ef2:	2300      	movs	r3, #0
 8014ef4:	61fb      	str	r3, [r7, #28]
 8014ef6:	68fb      	ldr	r3, [r7, #12]
 8014ef8:	681b      	ldr	r3, [r3, #0]
 8014efa:	695b      	ldr	r3, [r3, #20]
 8014efc:	61fb      	str	r3, [r7, #28]
 8014efe:	68fb      	ldr	r3, [r7, #12]
 8014f00:	681b      	ldr	r3, [r3, #0]
 8014f02:	699b      	ldr	r3, [r3, #24]
 8014f04:	61fb      	str	r3, [r7, #28]
 8014f06:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8014f08:	68fb      	ldr	r3, [r7, #12]
 8014f0a:	681b      	ldr	r3, [r3, #0]
 8014f0c:	681a      	ldr	r2, [r3, #0]
 8014f0e:	68fb      	ldr	r3, [r7, #12]
 8014f10:	681b      	ldr	r3, [r3, #0]
 8014f12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8014f16:	601a      	str	r2, [r3, #0]
 8014f18:	e16c      	b.n	80151f4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8014f1a:	68fb      	ldr	r3, [r7, #12]
 8014f1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014f1e:	2b02      	cmp	r3, #2
 8014f20:	d11b      	bne.n	8014f5a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8014f22:	68fb      	ldr	r3, [r7, #12]
 8014f24:	681b      	ldr	r3, [r3, #0]
 8014f26:	681a      	ldr	r2, [r3, #0]
 8014f28:	68fb      	ldr	r3, [r7, #12]
 8014f2a:	681b      	ldr	r3, [r3, #0]
 8014f2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8014f30:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8014f32:	68fb      	ldr	r3, [r7, #12]
 8014f34:	681b      	ldr	r3, [r3, #0]
 8014f36:	681a      	ldr	r2, [r3, #0]
 8014f38:	68fb      	ldr	r3, [r7, #12]
 8014f3a:	681b      	ldr	r3, [r3, #0]
 8014f3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8014f40:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8014f42:	2300      	movs	r3, #0
 8014f44:	61bb      	str	r3, [r7, #24]
 8014f46:	68fb      	ldr	r3, [r7, #12]
 8014f48:	681b      	ldr	r3, [r3, #0]
 8014f4a:	695b      	ldr	r3, [r3, #20]
 8014f4c:	61bb      	str	r3, [r7, #24]
 8014f4e:	68fb      	ldr	r3, [r7, #12]
 8014f50:	681b      	ldr	r3, [r3, #0]
 8014f52:	699b      	ldr	r3, [r3, #24]
 8014f54:	61bb      	str	r3, [r7, #24]
 8014f56:	69bb      	ldr	r3, [r7, #24]
 8014f58:	e14c      	b.n	80151f4 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8014f5a:	68fb      	ldr	r3, [r7, #12]
 8014f5c:	681b      	ldr	r3, [r3, #0]
 8014f5e:	681a      	ldr	r2, [r3, #0]
 8014f60:	68fb      	ldr	r3, [r7, #12]
 8014f62:	681b      	ldr	r3, [r3, #0]
 8014f64:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8014f68:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8014f6a:	2300      	movs	r3, #0
 8014f6c:	617b      	str	r3, [r7, #20]
 8014f6e:	68fb      	ldr	r3, [r7, #12]
 8014f70:	681b      	ldr	r3, [r3, #0]
 8014f72:	695b      	ldr	r3, [r3, #20]
 8014f74:	617b      	str	r3, [r7, #20]
 8014f76:	68fb      	ldr	r3, [r7, #12]
 8014f78:	681b      	ldr	r3, [r3, #0]
 8014f7a:	699b      	ldr	r3, [r3, #24]
 8014f7c:	617b      	str	r3, [r7, #20]
 8014f7e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8014f80:	e138      	b.n	80151f4 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8014f82:	68fb      	ldr	r3, [r7, #12]
 8014f84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014f86:	2b03      	cmp	r3, #3
 8014f88:	f200 80f1 	bhi.w	801516e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8014f8c:	68fb      	ldr	r3, [r7, #12]
 8014f8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014f90:	2b01      	cmp	r3, #1
 8014f92:	d123      	bne.n	8014fdc <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8014f94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014f96:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014f98:	68f8      	ldr	r0, [r7, #12]
 8014f9a:	f000 fbed 	bl	8015778 <I2C_WaitOnRXNEFlagUntilTimeout>
 8014f9e:	4603      	mov	r3, r0
 8014fa0:	2b00      	cmp	r3, #0
 8014fa2:	d001      	beq.n	8014fa8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8014fa4:	2301      	movs	r3, #1
 8014fa6:	e139      	b.n	801521c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8014fa8:	68fb      	ldr	r3, [r7, #12]
 8014faa:	681b      	ldr	r3, [r3, #0]
 8014fac:	691a      	ldr	r2, [r3, #16]
 8014fae:	68fb      	ldr	r3, [r7, #12]
 8014fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014fb2:	b2d2      	uxtb	r2, r2
 8014fb4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8014fb6:	68fb      	ldr	r3, [r7, #12]
 8014fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014fba:	1c5a      	adds	r2, r3, #1
 8014fbc:	68fb      	ldr	r3, [r7, #12]
 8014fbe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8014fc0:	68fb      	ldr	r3, [r7, #12]
 8014fc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014fc4:	3b01      	subs	r3, #1
 8014fc6:	b29a      	uxth	r2, r3
 8014fc8:	68fb      	ldr	r3, [r7, #12]
 8014fca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8014fcc:	68fb      	ldr	r3, [r7, #12]
 8014fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014fd0:	b29b      	uxth	r3, r3
 8014fd2:	3b01      	subs	r3, #1
 8014fd4:	b29a      	uxth	r2, r3
 8014fd6:	68fb      	ldr	r3, [r7, #12]
 8014fd8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8014fda:	e10b      	b.n	80151f4 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8014fdc:	68fb      	ldr	r3, [r7, #12]
 8014fde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014fe0:	2b02      	cmp	r3, #2
 8014fe2:	d14e      	bne.n	8015082 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8014fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fe6:	9300      	str	r3, [sp, #0]
 8014fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fea:	2200      	movs	r2, #0
 8014fec:	4906      	ldr	r1, [pc, #24]	; (8015008 <HAL_I2C_Master_Receive+0x22c>)
 8014fee:	68f8      	ldr	r0, [r7, #12]
 8014ff0:	f000 fa6a 	bl	80154c8 <I2C_WaitOnFlagUntilTimeout>
 8014ff4:	4603      	mov	r3, r0
 8014ff6:	2b00      	cmp	r3, #0
 8014ff8:	d008      	beq.n	801500c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8014ffa:	2301      	movs	r3, #1
 8014ffc:	e10e      	b.n	801521c <HAL_I2C_Master_Receive+0x440>
 8014ffe:	bf00      	nop
 8015000:	00100002 	.word	0x00100002
 8015004:	ffff0000 	.word	0xffff0000
 8015008:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801500c:	68fb      	ldr	r3, [r7, #12]
 801500e:	681b      	ldr	r3, [r3, #0]
 8015010:	681a      	ldr	r2, [r3, #0]
 8015012:	68fb      	ldr	r3, [r7, #12]
 8015014:	681b      	ldr	r3, [r3, #0]
 8015016:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801501a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801501c:	68fb      	ldr	r3, [r7, #12]
 801501e:	681b      	ldr	r3, [r3, #0]
 8015020:	691a      	ldr	r2, [r3, #16]
 8015022:	68fb      	ldr	r3, [r7, #12]
 8015024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015026:	b2d2      	uxtb	r2, r2
 8015028:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 801502a:	68fb      	ldr	r3, [r7, #12]
 801502c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801502e:	1c5a      	adds	r2, r3, #1
 8015030:	68fb      	ldr	r3, [r7, #12]
 8015032:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8015034:	68fb      	ldr	r3, [r7, #12]
 8015036:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015038:	3b01      	subs	r3, #1
 801503a:	b29a      	uxth	r2, r3
 801503c:	68fb      	ldr	r3, [r7, #12]
 801503e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8015040:	68fb      	ldr	r3, [r7, #12]
 8015042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015044:	b29b      	uxth	r3, r3
 8015046:	3b01      	subs	r3, #1
 8015048:	b29a      	uxth	r2, r3
 801504a:	68fb      	ldr	r3, [r7, #12]
 801504c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801504e:	68fb      	ldr	r3, [r7, #12]
 8015050:	681b      	ldr	r3, [r3, #0]
 8015052:	691a      	ldr	r2, [r3, #16]
 8015054:	68fb      	ldr	r3, [r7, #12]
 8015056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015058:	b2d2      	uxtb	r2, r2
 801505a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 801505c:	68fb      	ldr	r3, [r7, #12]
 801505e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015060:	1c5a      	adds	r2, r3, #1
 8015062:	68fb      	ldr	r3, [r7, #12]
 8015064:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8015066:	68fb      	ldr	r3, [r7, #12]
 8015068:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801506a:	3b01      	subs	r3, #1
 801506c:	b29a      	uxth	r2, r3
 801506e:	68fb      	ldr	r3, [r7, #12]
 8015070:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8015072:	68fb      	ldr	r3, [r7, #12]
 8015074:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015076:	b29b      	uxth	r3, r3
 8015078:	3b01      	subs	r3, #1
 801507a:	b29a      	uxth	r2, r3
 801507c:	68fb      	ldr	r3, [r7, #12]
 801507e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8015080:	e0b8      	b.n	80151f4 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8015082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015084:	9300      	str	r3, [sp, #0]
 8015086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015088:	2200      	movs	r2, #0
 801508a:	4966      	ldr	r1, [pc, #408]	; (8015224 <HAL_I2C_Master_Receive+0x448>)
 801508c:	68f8      	ldr	r0, [r7, #12]
 801508e:	f000 fa1b 	bl	80154c8 <I2C_WaitOnFlagUntilTimeout>
 8015092:	4603      	mov	r3, r0
 8015094:	2b00      	cmp	r3, #0
 8015096:	d001      	beq.n	801509c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8015098:	2301      	movs	r3, #1
 801509a:	e0bf      	b.n	801521c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801509c:	68fb      	ldr	r3, [r7, #12]
 801509e:	681b      	ldr	r3, [r3, #0]
 80150a0:	681a      	ldr	r2, [r3, #0]
 80150a2:	68fb      	ldr	r3, [r7, #12]
 80150a4:	681b      	ldr	r3, [r3, #0]
 80150a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80150aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80150ac:	68fb      	ldr	r3, [r7, #12]
 80150ae:	681b      	ldr	r3, [r3, #0]
 80150b0:	691a      	ldr	r2, [r3, #16]
 80150b2:	68fb      	ldr	r3, [r7, #12]
 80150b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80150b6:	b2d2      	uxtb	r2, r2
 80150b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80150ba:	68fb      	ldr	r3, [r7, #12]
 80150bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80150be:	1c5a      	adds	r2, r3, #1
 80150c0:	68fb      	ldr	r3, [r7, #12]
 80150c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80150c4:	68fb      	ldr	r3, [r7, #12]
 80150c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80150c8:	3b01      	subs	r3, #1
 80150ca:	b29a      	uxth	r2, r3
 80150cc:	68fb      	ldr	r3, [r7, #12]
 80150ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80150d0:	68fb      	ldr	r3, [r7, #12]
 80150d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80150d4:	b29b      	uxth	r3, r3
 80150d6:	3b01      	subs	r3, #1
 80150d8:	b29a      	uxth	r2, r3
 80150da:	68fb      	ldr	r3, [r7, #12]
 80150dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80150de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150e0:	9300      	str	r3, [sp, #0]
 80150e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150e4:	2200      	movs	r2, #0
 80150e6:	494f      	ldr	r1, [pc, #316]	; (8015224 <HAL_I2C_Master_Receive+0x448>)
 80150e8:	68f8      	ldr	r0, [r7, #12]
 80150ea:	f000 f9ed 	bl	80154c8 <I2C_WaitOnFlagUntilTimeout>
 80150ee:	4603      	mov	r3, r0
 80150f0:	2b00      	cmp	r3, #0
 80150f2:	d001      	beq.n	80150f8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80150f4:	2301      	movs	r3, #1
 80150f6:	e091      	b.n	801521c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80150f8:	68fb      	ldr	r3, [r7, #12]
 80150fa:	681b      	ldr	r3, [r3, #0]
 80150fc:	681a      	ldr	r2, [r3, #0]
 80150fe:	68fb      	ldr	r3, [r7, #12]
 8015100:	681b      	ldr	r3, [r3, #0]
 8015102:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8015106:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8015108:	68fb      	ldr	r3, [r7, #12]
 801510a:	681b      	ldr	r3, [r3, #0]
 801510c:	691a      	ldr	r2, [r3, #16]
 801510e:	68fb      	ldr	r3, [r7, #12]
 8015110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015112:	b2d2      	uxtb	r2, r2
 8015114:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8015116:	68fb      	ldr	r3, [r7, #12]
 8015118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801511a:	1c5a      	adds	r2, r3, #1
 801511c:	68fb      	ldr	r3, [r7, #12]
 801511e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8015120:	68fb      	ldr	r3, [r7, #12]
 8015122:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015124:	3b01      	subs	r3, #1
 8015126:	b29a      	uxth	r2, r3
 8015128:	68fb      	ldr	r3, [r7, #12]
 801512a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 801512c:	68fb      	ldr	r3, [r7, #12]
 801512e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015130:	b29b      	uxth	r3, r3
 8015132:	3b01      	subs	r3, #1
 8015134:	b29a      	uxth	r2, r3
 8015136:	68fb      	ldr	r3, [r7, #12]
 8015138:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801513a:	68fb      	ldr	r3, [r7, #12]
 801513c:	681b      	ldr	r3, [r3, #0]
 801513e:	691a      	ldr	r2, [r3, #16]
 8015140:	68fb      	ldr	r3, [r7, #12]
 8015142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015144:	b2d2      	uxtb	r2, r2
 8015146:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8015148:	68fb      	ldr	r3, [r7, #12]
 801514a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801514c:	1c5a      	adds	r2, r3, #1
 801514e:	68fb      	ldr	r3, [r7, #12]
 8015150:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8015152:	68fb      	ldr	r3, [r7, #12]
 8015154:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015156:	3b01      	subs	r3, #1
 8015158:	b29a      	uxth	r2, r3
 801515a:	68fb      	ldr	r3, [r7, #12]
 801515c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 801515e:	68fb      	ldr	r3, [r7, #12]
 8015160:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015162:	b29b      	uxth	r3, r3
 8015164:	3b01      	subs	r3, #1
 8015166:	b29a      	uxth	r2, r3
 8015168:	68fb      	ldr	r3, [r7, #12]
 801516a:	855a      	strh	r2, [r3, #42]	; 0x2a
 801516c:	e042      	b.n	80151f4 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801516e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015170:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015172:	68f8      	ldr	r0, [r7, #12]
 8015174:	f000 fb00 	bl	8015778 <I2C_WaitOnRXNEFlagUntilTimeout>
 8015178:	4603      	mov	r3, r0
 801517a:	2b00      	cmp	r3, #0
 801517c:	d001      	beq.n	8015182 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 801517e:	2301      	movs	r3, #1
 8015180:	e04c      	b.n	801521c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8015182:	68fb      	ldr	r3, [r7, #12]
 8015184:	681b      	ldr	r3, [r3, #0]
 8015186:	691a      	ldr	r2, [r3, #16]
 8015188:	68fb      	ldr	r3, [r7, #12]
 801518a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801518c:	b2d2      	uxtb	r2, r2
 801518e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8015190:	68fb      	ldr	r3, [r7, #12]
 8015192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015194:	1c5a      	adds	r2, r3, #1
 8015196:	68fb      	ldr	r3, [r7, #12]
 8015198:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 801519a:	68fb      	ldr	r3, [r7, #12]
 801519c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801519e:	3b01      	subs	r3, #1
 80151a0:	b29a      	uxth	r2, r3
 80151a2:	68fb      	ldr	r3, [r7, #12]
 80151a4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80151a6:	68fb      	ldr	r3, [r7, #12]
 80151a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80151aa:	b29b      	uxth	r3, r3
 80151ac:	3b01      	subs	r3, #1
 80151ae:	b29a      	uxth	r2, r3
 80151b0:	68fb      	ldr	r3, [r7, #12]
 80151b2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80151b4:	68fb      	ldr	r3, [r7, #12]
 80151b6:	681b      	ldr	r3, [r3, #0]
 80151b8:	695b      	ldr	r3, [r3, #20]
 80151ba:	f003 0304 	and.w	r3, r3, #4
 80151be:	2b04      	cmp	r3, #4
 80151c0:	d118      	bne.n	80151f4 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80151c2:	68fb      	ldr	r3, [r7, #12]
 80151c4:	681b      	ldr	r3, [r3, #0]
 80151c6:	691a      	ldr	r2, [r3, #16]
 80151c8:	68fb      	ldr	r3, [r7, #12]
 80151ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80151cc:	b2d2      	uxtb	r2, r2
 80151ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80151d0:	68fb      	ldr	r3, [r7, #12]
 80151d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80151d4:	1c5a      	adds	r2, r3, #1
 80151d6:	68fb      	ldr	r3, [r7, #12]
 80151d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80151da:	68fb      	ldr	r3, [r7, #12]
 80151dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80151de:	3b01      	subs	r3, #1
 80151e0:	b29a      	uxth	r2, r3
 80151e2:	68fb      	ldr	r3, [r7, #12]
 80151e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80151e6:	68fb      	ldr	r3, [r7, #12]
 80151e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80151ea:	b29b      	uxth	r3, r3
 80151ec:	3b01      	subs	r3, #1
 80151ee:	b29a      	uxth	r2, r3
 80151f0:	68fb      	ldr	r3, [r7, #12]
 80151f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80151f4:	68fb      	ldr	r3, [r7, #12]
 80151f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80151f8:	2b00      	cmp	r3, #0
 80151fa:	f47f aec2 	bne.w	8014f82 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80151fe:	68fb      	ldr	r3, [r7, #12]
 8015200:	2220      	movs	r2, #32
 8015202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8015206:	68fb      	ldr	r3, [r7, #12]
 8015208:	2200      	movs	r2, #0
 801520a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801520e:	68fb      	ldr	r3, [r7, #12]
 8015210:	2200      	movs	r2, #0
 8015212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8015216:	2300      	movs	r3, #0
 8015218:	e000      	b.n	801521c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 801521a:	2302      	movs	r3, #2
  }
}
 801521c:	4618      	mov	r0, r3
 801521e:	3728      	adds	r7, #40	; 0x28
 8015220:	46bd      	mov	sp, r7
 8015222:	bd80      	pop	{r7, pc}
 8015224:	00010004 	.word	0x00010004

08015228 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8015228:	b580      	push	{r7, lr}
 801522a:	b088      	sub	sp, #32
 801522c:	af02      	add	r7, sp, #8
 801522e:	60f8      	str	r0, [r7, #12]
 8015230:	607a      	str	r2, [r7, #4]
 8015232:	603b      	str	r3, [r7, #0]
 8015234:	460b      	mov	r3, r1
 8015236:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8015238:	68fb      	ldr	r3, [r7, #12]
 801523a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801523c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 801523e:	697b      	ldr	r3, [r7, #20]
 8015240:	2b08      	cmp	r3, #8
 8015242:	d006      	beq.n	8015252 <I2C_MasterRequestWrite+0x2a>
 8015244:	697b      	ldr	r3, [r7, #20]
 8015246:	2b01      	cmp	r3, #1
 8015248:	d003      	beq.n	8015252 <I2C_MasterRequestWrite+0x2a>
 801524a:	697b      	ldr	r3, [r7, #20]
 801524c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8015250:	d108      	bne.n	8015264 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8015252:	68fb      	ldr	r3, [r7, #12]
 8015254:	681b      	ldr	r3, [r3, #0]
 8015256:	681a      	ldr	r2, [r3, #0]
 8015258:	68fb      	ldr	r3, [r7, #12]
 801525a:	681b      	ldr	r3, [r3, #0]
 801525c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8015260:	601a      	str	r2, [r3, #0]
 8015262:	e00b      	b.n	801527c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8015264:	68fb      	ldr	r3, [r7, #12]
 8015266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015268:	2b12      	cmp	r3, #18
 801526a:	d107      	bne.n	801527c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801526c:	68fb      	ldr	r3, [r7, #12]
 801526e:	681b      	ldr	r3, [r3, #0]
 8015270:	681a      	ldr	r2, [r3, #0]
 8015272:	68fb      	ldr	r3, [r7, #12]
 8015274:	681b      	ldr	r3, [r3, #0]
 8015276:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801527a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 801527c:	683b      	ldr	r3, [r7, #0]
 801527e:	9300      	str	r3, [sp, #0]
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	2200      	movs	r2, #0
 8015284:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8015288:	68f8      	ldr	r0, [r7, #12]
 801528a:	f000 f91d 	bl	80154c8 <I2C_WaitOnFlagUntilTimeout>
 801528e:	4603      	mov	r3, r0
 8015290:	2b00      	cmp	r3, #0
 8015292:	d00d      	beq.n	80152b0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8015294:	68fb      	ldr	r3, [r7, #12]
 8015296:	681b      	ldr	r3, [r3, #0]
 8015298:	681b      	ldr	r3, [r3, #0]
 801529a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801529e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80152a2:	d103      	bne.n	80152ac <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80152a4:	68fb      	ldr	r3, [r7, #12]
 80152a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80152aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80152ac:	2303      	movs	r3, #3
 80152ae:	e035      	b.n	801531c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80152b0:	68fb      	ldr	r3, [r7, #12]
 80152b2:	691b      	ldr	r3, [r3, #16]
 80152b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80152b8:	d108      	bne.n	80152cc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80152ba:	897b      	ldrh	r3, [r7, #10]
 80152bc:	b2db      	uxtb	r3, r3
 80152be:	461a      	mov	r2, r3
 80152c0:	68fb      	ldr	r3, [r7, #12]
 80152c2:	681b      	ldr	r3, [r3, #0]
 80152c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80152c8:	611a      	str	r2, [r3, #16]
 80152ca:	e01b      	b.n	8015304 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80152cc:	897b      	ldrh	r3, [r7, #10]
 80152ce:	11db      	asrs	r3, r3, #7
 80152d0:	b2db      	uxtb	r3, r3
 80152d2:	f003 0306 	and.w	r3, r3, #6
 80152d6:	b2db      	uxtb	r3, r3
 80152d8:	f063 030f 	orn	r3, r3, #15
 80152dc:	b2da      	uxtb	r2, r3
 80152de:	68fb      	ldr	r3, [r7, #12]
 80152e0:	681b      	ldr	r3, [r3, #0]
 80152e2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80152e4:	683b      	ldr	r3, [r7, #0]
 80152e6:	687a      	ldr	r2, [r7, #4]
 80152e8:	490e      	ldr	r1, [pc, #56]	; (8015324 <I2C_MasterRequestWrite+0xfc>)
 80152ea:	68f8      	ldr	r0, [r7, #12]
 80152ec:	f000 f943 	bl	8015576 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80152f0:	4603      	mov	r3, r0
 80152f2:	2b00      	cmp	r3, #0
 80152f4:	d001      	beq.n	80152fa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80152f6:	2301      	movs	r3, #1
 80152f8:	e010      	b.n	801531c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80152fa:	897b      	ldrh	r3, [r7, #10]
 80152fc:	b2da      	uxtb	r2, r3
 80152fe:	68fb      	ldr	r3, [r7, #12]
 8015300:	681b      	ldr	r3, [r3, #0]
 8015302:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8015304:	683b      	ldr	r3, [r7, #0]
 8015306:	687a      	ldr	r2, [r7, #4]
 8015308:	4907      	ldr	r1, [pc, #28]	; (8015328 <I2C_MasterRequestWrite+0x100>)
 801530a:	68f8      	ldr	r0, [r7, #12]
 801530c:	f000 f933 	bl	8015576 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8015310:	4603      	mov	r3, r0
 8015312:	2b00      	cmp	r3, #0
 8015314:	d001      	beq.n	801531a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8015316:	2301      	movs	r3, #1
 8015318:	e000      	b.n	801531c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 801531a:	2300      	movs	r3, #0
}
 801531c:	4618      	mov	r0, r3
 801531e:	3718      	adds	r7, #24
 8015320:	46bd      	mov	sp, r7
 8015322:	bd80      	pop	{r7, pc}
 8015324:	00010008 	.word	0x00010008
 8015328:	00010002 	.word	0x00010002

0801532c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 801532c:	b580      	push	{r7, lr}
 801532e:	b088      	sub	sp, #32
 8015330:	af02      	add	r7, sp, #8
 8015332:	60f8      	str	r0, [r7, #12]
 8015334:	607a      	str	r2, [r7, #4]
 8015336:	603b      	str	r3, [r7, #0]
 8015338:	460b      	mov	r3, r1
 801533a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 801533c:	68fb      	ldr	r3, [r7, #12]
 801533e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015340:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8015342:	68fb      	ldr	r3, [r7, #12]
 8015344:	681b      	ldr	r3, [r3, #0]
 8015346:	681a      	ldr	r2, [r3, #0]
 8015348:	68fb      	ldr	r3, [r7, #12]
 801534a:	681b      	ldr	r3, [r3, #0]
 801534c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8015350:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8015352:	697b      	ldr	r3, [r7, #20]
 8015354:	2b08      	cmp	r3, #8
 8015356:	d006      	beq.n	8015366 <I2C_MasterRequestRead+0x3a>
 8015358:	697b      	ldr	r3, [r7, #20]
 801535a:	2b01      	cmp	r3, #1
 801535c:	d003      	beq.n	8015366 <I2C_MasterRequestRead+0x3a>
 801535e:	697b      	ldr	r3, [r7, #20]
 8015360:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8015364:	d108      	bne.n	8015378 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8015366:	68fb      	ldr	r3, [r7, #12]
 8015368:	681b      	ldr	r3, [r3, #0]
 801536a:	681a      	ldr	r2, [r3, #0]
 801536c:	68fb      	ldr	r3, [r7, #12]
 801536e:	681b      	ldr	r3, [r3, #0]
 8015370:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8015374:	601a      	str	r2, [r3, #0]
 8015376:	e00b      	b.n	8015390 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8015378:	68fb      	ldr	r3, [r7, #12]
 801537a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801537c:	2b11      	cmp	r3, #17
 801537e:	d107      	bne.n	8015390 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8015380:	68fb      	ldr	r3, [r7, #12]
 8015382:	681b      	ldr	r3, [r3, #0]
 8015384:	681a      	ldr	r2, [r3, #0]
 8015386:	68fb      	ldr	r3, [r7, #12]
 8015388:	681b      	ldr	r3, [r3, #0]
 801538a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801538e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8015390:	683b      	ldr	r3, [r7, #0]
 8015392:	9300      	str	r3, [sp, #0]
 8015394:	687b      	ldr	r3, [r7, #4]
 8015396:	2200      	movs	r2, #0
 8015398:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 801539c:	68f8      	ldr	r0, [r7, #12]
 801539e:	f000 f893 	bl	80154c8 <I2C_WaitOnFlagUntilTimeout>
 80153a2:	4603      	mov	r3, r0
 80153a4:	2b00      	cmp	r3, #0
 80153a6:	d00d      	beq.n	80153c4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80153a8:	68fb      	ldr	r3, [r7, #12]
 80153aa:	681b      	ldr	r3, [r3, #0]
 80153ac:	681b      	ldr	r3, [r3, #0]
 80153ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80153b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80153b6:	d103      	bne.n	80153c0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80153b8:	68fb      	ldr	r3, [r7, #12]
 80153ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80153be:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80153c0:	2303      	movs	r3, #3
 80153c2:	e079      	b.n	80154b8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80153c4:	68fb      	ldr	r3, [r7, #12]
 80153c6:	691b      	ldr	r3, [r3, #16]
 80153c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80153cc:	d108      	bne.n	80153e0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80153ce:	897b      	ldrh	r3, [r7, #10]
 80153d0:	b2db      	uxtb	r3, r3
 80153d2:	f043 0301 	orr.w	r3, r3, #1
 80153d6:	b2da      	uxtb	r2, r3
 80153d8:	68fb      	ldr	r3, [r7, #12]
 80153da:	681b      	ldr	r3, [r3, #0]
 80153dc:	611a      	str	r2, [r3, #16]
 80153de:	e05f      	b.n	80154a0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80153e0:	897b      	ldrh	r3, [r7, #10]
 80153e2:	11db      	asrs	r3, r3, #7
 80153e4:	b2db      	uxtb	r3, r3
 80153e6:	f003 0306 	and.w	r3, r3, #6
 80153ea:	b2db      	uxtb	r3, r3
 80153ec:	f063 030f 	orn	r3, r3, #15
 80153f0:	b2da      	uxtb	r2, r3
 80153f2:	68fb      	ldr	r3, [r7, #12]
 80153f4:	681b      	ldr	r3, [r3, #0]
 80153f6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80153f8:	683b      	ldr	r3, [r7, #0]
 80153fa:	687a      	ldr	r2, [r7, #4]
 80153fc:	4930      	ldr	r1, [pc, #192]	; (80154c0 <I2C_MasterRequestRead+0x194>)
 80153fe:	68f8      	ldr	r0, [r7, #12]
 8015400:	f000 f8b9 	bl	8015576 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8015404:	4603      	mov	r3, r0
 8015406:	2b00      	cmp	r3, #0
 8015408:	d001      	beq.n	801540e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 801540a:	2301      	movs	r3, #1
 801540c:	e054      	b.n	80154b8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 801540e:	897b      	ldrh	r3, [r7, #10]
 8015410:	b2da      	uxtb	r2, r3
 8015412:	68fb      	ldr	r3, [r7, #12]
 8015414:	681b      	ldr	r3, [r3, #0]
 8015416:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8015418:	683b      	ldr	r3, [r7, #0]
 801541a:	687a      	ldr	r2, [r7, #4]
 801541c:	4929      	ldr	r1, [pc, #164]	; (80154c4 <I2C_MasterRequestRead+0x198>)
 801541e:	68f8      	ldr	r0, [r7, #12]
 8015420:	f000 f8a9 	bl	8015576 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8015424:	4603      	mov	r3, r0
 8015426:	2b00      	cmp	r3, #0
 8015428:	d001      	beq.n	801542e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 801542a:	2301      	movs	r3, #1
 801542c:	e044      	b.n	80154b8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801542e:	2300      	movs	r3, #0
 8015430:	613b      	str	r3, [r7, #16]
 8015432:	68fb      	ldr	r3, [r7, #12]
 8015434:	681b      	ldr	r3, [r3, #0]
 8015436:	695b      	ldr	r3, [r3, #20]
 8015438:	613b      	str	r3, [r7, #16]
 801543a:	68fb      	ldr	r3, [r7, #12]
 801543c:	681b      	ldr	r3, [r3, #0]
 801543e:	699b      	ldr	r3, [r3, #24]
 8015440:	613b      	str	r3, [r7, #16]
 8015442:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8015444:	68fb      	ldr	r3, [r7, #12]
 8015446:	681b      	ldr	r3, [r3, #0]
 8015448:	681a      	ldr	r2, [r3, #0]
 801544a:	68fb      	ldr	r3, [r7, #12]
 801544c:	681b      	ldr	r3, [r3, #0]
 801544e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8015452:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8015454:	683b      	ldr	r3, [r7, #0]
 8015456:	9300      	str	r3, [sp, #0]
 8015458:	687b      	ldr	r3, [r7, #4]
 801545a:	2200      	movs	r2, #0
 801545c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8015460:	68f8      	ldr	r0, [r7, #12]
 8015462:	f000 f831 	bl	80154c8 <I2C_WaitOnFlagUntilTimeout>
 8015466:	4603      	mov	r3, r0
 8015468:	2b00      	cmp	r3, #0
 801546a:	d00d      	beq.n	8015488 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 801546c:	68fb      	ldr	r3, [r7, #12]
 801546e:	681b      	ldr	r3, [r3, #0]
 8015470:	681b      	ldr	r3, [r3, #0]
 8015472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015476:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801547a:	d103      	bne.n	8015484 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 801547c:	68fb      	ldr	r3, [r7, #12]
 801547e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015482:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8015484:	2303      	movs	r3, #3
 8015486:	e017      	b.n	80154b8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8015488:	897b      	ldrh	r3, [r7, #10]
 801548a:	11db      	asrs	r3, r3, #7
 801548c:	b2db      	uxtb	r3, r3
 801548e:	f003 0306 	and.w	r3, r3, #6
 8015492:	b2db      	uxtb	r3, r3
 8015494:	f063 030e 	orn	r3, r3, #14
 8015498:	b2da      	uxtb	r2, r3
 801549a:	68fb      	ldr	r3, [r7, #12]
 801549c:	681b      	ldr	r3, [r3, #0]
 801549e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80154a0:	683b      	ldr	r3, [r7, #0]
 80154a2:	687a      	ldr	r2, [r7, #4]
 80154a4:	4907      	ldr	r1, [pc, #28]	; (80154c4 <I2C_MasterRequestRead+0x198>)
 80154a6:	68f8      	ldr	r0, [r7, #12]
 80154a8:	f000 f865 	bl	8015576 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80154ac:	4603      	mov	r3, r0
 80154ae:	2b00      	cmp	r3, #0
 80154b0:	d001      	beq.n	80154b6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80154b2:	2301      	movs	r3, #1
 80154b4:	e000      	b.n	80154b8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80154b6:	2300      	movs	r3, #0
}
 80154b8:	4618      	mov	r0, r3
 80154ba:	3718      	adds	r7, #24
 80154bc:	46bd      	mov	sp, r7
 80154be:	bd80      	pop	{r7, pc}
 80154c0:	00010008 	.word	0x00010008
 80154c4:	00010002 	.word	0x00010002

080154c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80154c8:	b580      	push	{r7, lr}
 80154ca:	b084      	sub	sp, #16
 80154cc:	af00      	add	r7, sp, #0
 80154ce:	60f8      	str	r0, [r7, #12]
 80154d0:	60b9      	str	r1, [r7, #8]
 80154d2:	603b      	str	r3, [r7, #0]
 80154d4:	4613      	mov	r3, r2
 80154d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80154d8:	e025      	b.n	8015526 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80154da:	683b      	ldr	r3, [r7, #0]
 80154dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80154e0:	d021      	beq.n	8015526 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80154e2:	f7fd fce5 	bl	8012eb0 <HAL_GetTick>
 80154e6:	4602      	mov	r2, r0
 80154e8:	69bb      	ldr	r3, [r7, #24]
 80154ea:	1ad3      	subs	r3, r2, r3
 80154ec:	683a      	ldr	r2, [r7, #0]
 80154ee:	429a      	cmp	r2, r3
 80154f0:	d302      	bcc.n	80154f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80154f2:	683b      	ldr	r3, [r7, #0]
 80154f4:	2b00      	cmp	r3, #0
 80154f6:	d116      	bne.n	8015526 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80154f8:	68fb      	ldr	r3, [r7, #12]
 80154fa:	2200      	movs	r2, #0
 80154fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80154fe:	68fb      	ldr	r3, [r7, #12]
 8015500:	2220      	movs	r2, #32
 8015502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8015506:	68fb      	ldr	r3, [r7, #12]
 8015508:	2200      	movs	r2, #0
 801550a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 801550e:	68fb      	ldr	r3, [r7, #12]
 8015510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015512:	f043 0220 	orr.w	r2, r3, #32
 8015516:	68fb      	ldr	r3, [r7, #12]
 8015518:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801551a:	68fb      	ldr	r3, [r7, #12]
 801551c:	2200      	movs	r2, #0
 801551e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8015522:	2301      	movs	r3, #1
 8015524:	e023      	b.n	801556e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8015526:	68bb      	ldr	r3, [r7, #8]
 8015528:	0c1b      	lsrs	r3, r3, #16
 801552a:	b2db      	uxtb	r3, r3
 801552c:	2b01      	cmp	r3, #1
 801552e:	d10d      	bne.n	801554c <I2C_WaitOnFlagUntilTimeout+0x84>
 8015530:	68fb      	ldr	r3, [r7, #12]
 8015532:	681b      	ldr	r3, [r3, #0]
 8015534:	695b      	ldr	r3, [r3, #20]
 8015536:	43da      	mvns	r2, r3
 8015538:	68bb      	ldr	r3, [r7, #8]
 801553a:	4013      	ands	r3, r2
 801553c:	b29b      	uxth	r3, r3
 801553e:	2b00      	cmp	r3, #0
 8015540:	bf0c      	ite	eq
 8015542:	2301      	moveq	r3, #1
 8015544:	2300      	movne	r3, #0
 8015546:	b2db      	uxtb	r3, r3
 8015548:	461a      	mov	r2, r3
 801554a:	e00c      	b.n	8015566 <I2C_WaitOnFlagUntilTimeout+0x9e>
 801554c:	68fb      	ldr	r3, [r7, #12]
 801554e:	681b      	ldr	r3, [r3, #0]
 8015550:	699b      	ldr	r3, [r3, #24]
 8015552:	43da      	mvns	r2, r3
 8015554:	68bb      	ldr	r3, [r7, #8]
 8015556:	4013      	ands	r3, r2
 8015558:	b29b      	uxth	r3, r3
 801555a:	2b00      	cmp	r3, #0
 801555c:	bf0c      	ite	eq
 801555e:	2301      	moveq	r3, #1
 8015560:	2300      	movne	r3, #0
 8015562:	b2db      	uxtb	r3, r3
 8015564:	461a      	mov	r2, r3
 8015566:	79fb      	ldrb	r3, [r7, #7]
 8015568:	429a      	cmp	r2, r3
 801556a:	d0b6      	beq.n	80154da <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 801556c:	2300      	movs	r3, #0
}
 801556e:	4618      	mov	r0, r3
 8015570:	3710      	adds	r7, #16
 8015572:	46bd      	mov	sp, r7
 8015574:	bd80      	pop	{r7, pc}

08015576 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8015576:	b580      	push	{r7, lr}
 8015578:	b084      	sub	sp, #16
 801557a:	af00      	add	r7, sp, #0
 801557c:	60f8      	str	r0, [r7, #12]
 801557e:	60b9      	str	r1, [r7, #8]
 8015580:	607a      	str	r2, [r7, #4]
 8015582:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8015584:	e051      	b.n	801562a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8015586:	68fb      	ldr	r3, [r7, #12]
 8015588:	681b      	ldr	r3, [r3, #0]
 801558a:	695b      	ldr	r3, [r3, #20]
 801558c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8015590:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015594:	d123      	bne.n	80155de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8015596:	68fb      	ldr	r3, [r7, #12]
 8015598:	681b      	ldr	r3, [r3, #0]
 801559a:	681a      	ldr	r2, [r3, #0]
 801559c:	68fb      	ldr	r3, [r7, #12]
 801559e:	681b      	ldr	r3, [r3, #0]
 80155a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80155a4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80155a6:	68fb      	ldr	r3, [r7, #12]
 80155a8:	681b      	ldr	r3, [r3, #0]
 80155aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80155ae:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80155b0:	68fb      	ldr	r3, [r7, #12]
 80155b2:	2200      	movs	r2, #0
 80155b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80155b6:	68fb      	ldr	r3, [r7, #12]
 80155b8:	2220      	movs	r2, #32
 80155ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80155be:	68fb      	ldr	r3, [r7, #12]
 80155c0:	2200      	movs	r2, #0
 80155c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80155c6:	68fb      	ldr	r3, [r7, #12]
 80155c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80155ca:	f043 0204 	orr.w	r2, r3, #4
 80155ce:	68fb      	ldr	r3, [r7, #12]
 80155d0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80155d2:	68fb      	ldr	r3, [r7, #12]
 80155d4:	2200      	movs	r2, #0
 80155d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80155da:	2301      	movs	r3, #1
 80155dc:	e046      	b.n	801566c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80155de:	687b      	ldr	r3, [r7, #4]
 80155e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80155e4:	d021      	beq.n	801562a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80155e6:	f7fd fc63 	bl	8012eb0 <HAL_GetTick>
 80155ea:	4602      	mov	r2, r0
 80155ec:	683b      	ldr	r3, [r7, #0]
 80155ee:	1ad3      	subs	r3, r2, r3
 80155f0:	687a      	ldr	r2, [r7, #4]
 80155f2:	429a      	cmp	r2, r3
 80155f4:	d302      	bcc.n	80155fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80155f6:	687b      	ldr	r3, [r7, #4]
 80155f8:	2b00      	cmp	r3, #0
 80155fa:	d116      	bne.n	801562a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80155fc:	68fb      	ldr	r3, [r7, #12]
 80155fe:	2200      	movs	r2, #0
 8015600:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8015602:	68fb      	ldr	r3, [r7, #12]
 8015604:	2220      	movs	r2, #32
 8015606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801560a:	68fb      	ldr	r3, [r7, #12]
 801560c:	2200      	movs	r2, #0
 801560e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8015612:	68fb      	ldr	r3, [r7, #12]
 8015614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015616:	f043 0220 	orr.w	r2, r3, #32
 801561a:	68fb      	ldr	r3, [r7, #12]
 801561c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801561e:	68fb      	ldr	r3, [r7, #12]
 8015620:	2200      	movs	r2, #0
 8015622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8015626:	2301      	movs	r3, #1
 8015628:	e020      	b.n	801566c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 801562a:	68bb      	ldr	r3, [r7, #8]
 801562c:	0c1b      	lsrs	r3, r3, #16
 801562e:	b2db      	uxtb	r3, r3
 8015630:	2b01      	cmp	r3, #1
 8015632:	d10c      	bne.n	801564e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8015634:	68fb      	ldr	r3, [r7, #12]
 8015636:	681b      	ldr	r3, [r3, #0]
 8015638:	695b      	ldr	r3, [r3, #20]
 801563a:	43da      	mvns	r2, r3
 801563c:	68bb      	ldr	r3, [r7, #8]
 801563e:	4013      	ands	r3, r2
 8015640:	b29b      	uxth	r3, r3
 8015642:	2b00      	cmp	r3, #0
 8015644:	bf14      	ite	ne
 8015646:	2301      	movne	r3, #1
 8015648:	2300      	moveq	r3, #0
 801564a:	b2db      	uxtb	r3, r3
 801564c:	e00b      	b.n	8015666 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 801564e:	68fb      	ldr	r3, [r7, #12]
 8015650:	681b      	ldr	r3, [r3, #0]
 8015652:	699b      	ldr	r3, [r3, #24]
 8015654:	43da      	mvns	r2, r3
 8015656:	68bb      	ldr	r3, [r7, #8]
 8015658:	4013      	ands	r3, r2
 801565a:	b29b      	uxth	r3, r3
 801565c:	2b00      	cmp	r3, #0
 801565e:	bf14      	ite	ne
 8015660:	2301      	movne	r3, #1
 8015662:	2300      	moveq	r3, #0
 8015664:	b2db      	uxtb	r3, r3
 8015666:	2b00      	cmp	r3, #0
 8015668:	d18d      	bne.n	8015586 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 801566a:	2300      	movs	r3, #0
}
 801566c:	4618      	mov	r0, r3
 801566e:	3710      	adds	r7, #16
 8015670:	46bd      	mov	sp, r7
 8015672:	bd80      	pop	{r7, pc}

08015674 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8015674:	b580      	push	{r7, lr}
 8015676:	b084      	sub	sp, #16
 8015678:	af00      	add	r7, sp, #0
 801567a:	60f8      	str	r0, [r7, #12]
 801567c:	60b9      	str	r1, [r7, #8]
 801567e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8015680:	e02d      	b.n	80156de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8015682:	68f8      	ldr	r0, [r7, #12]
 8015684:	f000 f8ce 	bl	8015824 <I2C_IsAcknowledgeFailed>
 8015688:	4603      	mov	r3, r0
 801568a:	2b00      	cmp	r3, #0
 801568c:	d001      	beq.n	8015692 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 801568e:	2301      	movs	r3, #1
 8015690:	e02d      	b.n	80156ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8015692:	68bb      	ldr	r3, [r7, #8]
 8015694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015698:	d021      	beq.n	80156de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801569a:	f7fd fc09 	bl	8012eb0 <HAL_GetTick>
 801569e:	4602      	mov	r2, r0
 80156a0:	687b      	ldr	r3, [r7, #4]
 80156a2:	1ad3      	subs	r3, r2, r3
 80156a4:	68ba      	ldr	r2, [r7, #8]
 80156a6:	429a      	cmp	r2, r3
 80156a8:	d302      	bcc.n	80156b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80156aa:	68bb      	ldr	r3, [r7, #8]
 80156ac:	2b00      	cmp	r3, #0
 80156ae:	d116      	bne.n	80156de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80156b0:	68fb      	ldr	r3, [r7, #12]
 80156b2:	2200      	movs	r2, #0
 80156b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80156b6:	68fb      	ldr	r3, [r7, #12]
 80156b8:	2220      	movs	r2, #32
 80156ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80156be:	68fb      	ldr	r3, [r7, #12]
 80156c0:	2200      	movs	r2, #0
 80156c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80156c6:	68fb      	ldr	r3, [r7, #12]
 80156c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80156ca:	f043 0220 	orr.w	r2, r3, #32
 80156ce:	68fb      	ldr	r3, [r7, #12]
 80156d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80156d2:	68fb      	ldr	r3, [r7, #12]
 80156d4:	2200      	movs	r2, #0
 80156d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80156da:	2301      	movs	r3, #1
 80156dc:	e007      	b.n	80156ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80156de:	68fb      	ldr	r3, [r7, #12]
 80156e0:	681b      	ldr	r3, [r3, #0]
 80156e2:	695b      	ldr	r3, [r3, #20]
 80156e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80156e8:	2b80      	cmp	r3, #128	; 0x80
 80156ea:	d1ca      	bne.n	8015682 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80156ec:	2300      	movs	r3, #0
}
 80156ee:	4618      	mov	r0, r3
 80156f0:	3710      	adds	r7, #16
 80156f2:	46bd      	mov	sp, r7
 80156f4:	bd80      	pop	{r7, pc}

080156f6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80156f6:	b580      	push	{r7, lr}
 80156f8:	b084      	sub	sp, #16
 80156fa:	af00      	add	r7, sp, #0
 80156fc:	60f8      	str	r0, [r7, #12]
 80156fe:	60b9      	str	r1, [r7, #8]
 8015700:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8015702:	e02d      	b.n	8015760 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8015704:	68f8      	ldr	r0, [r7, #12]
 8015706:	f000 f88d 	bl	8015824 <I2C_IsAcknowledgeFailed>
 801570a:	4603      	mov	r3, r0
 801570c:	2b00      	cmp	r3, #0
 801570e:	d001      	beq.n	8015714 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8015710:	2301      	movs	r3, #1
 8015712:	e02d      	b.n	8015770 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8015714:	68bb      	ldr	r3, [r7, #8]
 8015716:	f1b3 3fff 	cmp.w	r3, #4294967295
 801571a:	d021      	beq.n	8015760 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801571c:	f7fd fbc8 	bl	8012eb0 <HAL_GetTick>
 8015720:	4602      	mov	r2, r0
 8015722:	687b      	ldr	r3, [r7, #4]
 8015724:	1ad3      	subs	r3, r2, r3
 8015726:	68ba      	ldr	r2, [r7, #8]
 8015728:	429a      	cmp	r2, r3
 801572a:	d302      	bcc.n	8015732 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 801572c:	68bb      	ldr	r3, [r7, #8]
 801572e:	2b00      	cmp	r3, #0
 8015730:	d116      	bne.n	8015760 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8015732:	68fb      	ldr	r3, [r7, #12]
 8015734:	2200      	movs	r2, #0
 8015736:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8015738:	68fb      	ldr	r3, [r7, #12]
 801573a:	2220      	movs	r2, #32
 801573c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8015740:	68fb      	ldr	r3, [r7, #12]
 8015742:	2200      	movs	r2, #0
 8015744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8015748:	68fb      	ldr	r3, [r7, #12]
 801574a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801574c:	f043 0220 	orr.w	r2, r3, #32
 8015750:	68fb      	ldr	r3, [r7, #12]
 8015752:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8015754:	68fb      	ldr	r3, [r7, #12]
 8015756:	2200      	movs	r2, #0
 8015758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801575c:	2301      	movs	r3, #1
 801575e:	e007      	b.n	8015770 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8015760:	68fb      	ldr	r3, [r7, #12]
 8015762:	681b      	ldr	r3, [r3, #0]
 8015764:	695b      	ldr	r3, [r3, #20]
 8015766:	f003 0304 	and.w	r3, r3, #4
 801576a:	2b04      	cmp	r3, #4
 801576c:	d1ca      	bne.n	8015704 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801576e:	2300      	movs	r3, #0
}
 8015770:	4618      	mov	r0, r3
 8015772:	3710      	adds	r7, #16
 8015774:	46bd      	mov	sp, r7
 8015776:	bd80      	pop	{r7, pc}

08015778 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8015778:	b580      	push	{r7, lr}
 801577a:	b084      	sub	sp, #16
 801577c:	af00      	add	r7, sp, #0
 801577e:	60f8      	str	r0, [r7, #12]
 8015780:	60b9      	str	r1, [r7, #8]
 8015782:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8015784:	e042      	b.n	801580c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8015786:	68fb      	ldr	r3, [r7, #12]
 8015788:	681b      	ldr	r3, [r3, #0]
 801578a:	695b      	ldr	r3, [r3, #20]
 801578c:	f003 0310 	and.w	r3, r3, #16
 8015790:	2b10      	cmp	r3, #16
 8015792:	d119      	bne.n	80157c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8015794:	68fb      	ldr	r3, [r7, #12]
 8015796:	681b      	ldr	r3, [r3, #0]
 8015798:	f06f 0210 	mvn.w	r2, #16
 801579c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 801579e:	68fb      	ldr	r3, [r7, #12]
 80157a0:	2200      	movs	r2, #0
 80157a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80157a4:	68fb      	ldr	r3, [r7, #12]
 80157a6:	2220      	movs	r2, #32
 80157a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80157ac:	68fb      	ldr	r3, [r7, #12]
 80157ae:	2200      	movs	r2, #0
 80157b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80157b4:	68fb      	ldr	r3, [r7, #12]
 80157b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80157b8:	68fb      	ldr	r3, [r7, #12]
 80157ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80157bc:	68fb      	ldr	r3, [r7, #12]
 80157be:	2200      	movs	r2, #0
 80157c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80157c4:	2301      	movs	r3, #1
 80157c6:	e029      	b.n	801581c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80157c8:	f7fd fb72 	bl	8012eb0 <HAL_GetTick>
 80157cc:	4602      	mov	r2, r0
 80157ce:	687b      	ldr	r3, [r7, #4]
 80157d0:	1ad3      	subs	r3, r2, r3
 80157d2:	68ba      	ldr	r2, [r7, #8]
 80157d4:	429a      	cmp	r2, r3
 80157d6:	d302      	bcc.n	80157de <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80157d8:	68bb      	ldr	r3, [r7, #8]
 80157da:	2b00      	cmp	r3, #0
 80157dc:	d116      	bne.n	801580c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80157de:	68fb      	ldr	r3, [r7, #12]
 80157e0:	2200      	movs	r2, #0
 80157e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80157e4:	68fb      	ldr	r3, [r7, #12]
 80157e6:	2220      	movs	r2, #32
 80157e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80157ec:	68fb      	ldr	r3, [r7, #12]
 80157ee:	2200      	movs	r2, #0
 80157f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80157f4:	68fb      	ldr	r3, [r7, #12]
 80157f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80157f8:	f043 0220 	orr.w	r2, r3, #32
 80157fc:	68fb      	ldr	r3, [r7, #12]
 80157fe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8015800:	68fb      	ldr	r3, [r7, #12]
 8015802:	2200      	movs	r2, #0
 8015804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8015808:	2301      	movs	r3, #1
 801580a:	e007      	b.n	801581c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 801580c:	68fb      	ldr	r3, [r7, #12]
 801580e:	681b      	ldr	r3, [r3, #0]
 8015810:	695b      	ldr	r3, [r3, #20]
 8015812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015816:	2b40      	cmp	r3, #64	; 0x40
 8015818:	d1b5      	bne.n	8015786 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 801581a:	2300      	movs	r3, #0
}
 801581c:	4618      	mov	r0, r3
 801581e:	3710      	adds	r7, #16
 8015820:	46bd      	mov	sp, r7
 8015822:	bd80      	pop	{r7, pc}

08015824 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8015824:	b480      	push	{r7}
 8015826:	b083      	sub	sp, #12
 8015828:	af00      	add	r7, sp, #0
 801582a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801582c:	687b      	ldr	r3, [r7, #4]
 801582e:	681b      	ldr	r3, [r3, #0]
 8015830:	695b      	ldr	r3, [r3, #20]
 8015832:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8015836:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801583a:	d11b      	bne.n	8015874 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801583c:	687b      	ldr	r3, [r7, #4]
 801583e:	681b      	ldr	r3, [r3, #0]
 8015840:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8015844:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8015846:	687b      	ldr	r3, [r7, #4]
 8015848:	2200      	movs	r2, #0
 801584a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 801584c:	687b      	ldr	r3, [r7, #4]
 801584e:	2220      	movs	r2, #32
 8015850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8015854:	687b      	ldr	r3, [r7, #4]
 8015856:	2200      	movs	r2, #0
 8015858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 801585c:	687b      	ldr	r3, [r7, #4]
 801585e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015860:	f043 0204 	orr.w	r2, r3, #4
 8015864:	687b      	ldr	r3, [r7, #4]
 8015866:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8015868:	687b      	ldr	r3, [r7, #4]
 801586a:	2200      	movs	r2, #0
 801586c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8015870:	2301      	movs	r3, #1
 8015872:	e000      	b.n	8015876 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8015874:	2300      	movs	r3, #0
}
 8015876:	4618      	mov	r0, r3
 8015878:	370c      	adds	r7, #12
 801587a:	46bd      	mov	sp, r7
 801587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015880:	4770      	bx	lr
	...

08015884 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8015884:	b580      	push	{r7, lr}
 8015886:	b086      	sub	sp, #24
 8015888:	af00      	add	r7, sp, #0
 801588a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 801588c:	687b      	ldr	r3, [r7, #4]
 801588e:	2b00      	cmp	r3, #0
 8015890:	d101      	bne.n	8015896 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8015892:	2301      	movs	r3, #1
 8015894:	e264      	b.n	8015d60 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8015896:	687b      	ldr	r3, [r7, #4]
 8015898:	681b      	ldr	r3, [r3, #0]
 801589a:	f003 0301 	and.w	r3, r3, #1
 801589e:	2b00      	cmp	r3, #0
 80158a0:	d075      	beq.n	801598e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80158a2:	4ba3      	ldr	r3, [pc, #652]	; (8015b30 <HAL_RCC_OscConfig+0x2ac>)
 80158a4:	689b      	ldr	r3, [r3, #8]
 80158a6:	f003 030c 	and.w	r3, r3, #12
 80158aa:	2b04      	cmp	r3, #4
 80158ac:	d00c      	beq.n	80158c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80158ae:	4ba0      	ldr	r3, [pc, #640]	; (8015b30 <HAL_RCC_OscConfig+0x2ac>)
 80158b0:	689b      	ldr	r3, [r3, #8]
 80158b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80158b6:	2b08      	cmp	r3, #8
 80158b8:	d112      	bne.n	80158e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80158ba:	4b9d      	ldr	r3, [pc, #628]	; (8015b30 <HAL_RCC_OscConfig+0x2ac>)
 80158bc:	685b      	ldr	r3, [r3, #4]
 80158be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80158c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80158c6:	d10b      	bne.n	80158e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80158c8:	4b99      	ldr	r3, [pc, #612]	; (8015b30 <HAL_RCC_OscConfig+0x2ac>)
 80158ca:	681b      	ldr	r3, [r3, #0]
 80158cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80158d0:	2b00      	cmp	r3, #0
 80158d2:	d05b      	beq.n	801598c <HAL_RCC_OscConfig+0x108>
 80158d4:	687b      	ldr	r3, [r7, #4]
 80158d6:	685b      	ldr	r3, [r3, #4]
 80158d8:	2b00      	cmp	r3, #0
 80158da:	d157      	bne.n	801598c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80158dc:	2301      	movs	r3, #1
 80158de:	e23f      	b.n	8015d60 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80158e0:	687b      	ldr	r3, [r7, #4]
 80158e2:	685b      	ldr	r3, [r3, #4]
 80158e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80158e8:	d106      	bne.n	80158f8 <HAL_RCC_OscConfig+0x74>
 80158ea:	4b91      	ldr	r3, [pc, #580]	; (8015b30 <HAL_RCC_OscConfig+0x2ac>)
 80158ec:	681b      	ldr	r3, [r3, #0]
 80158ee:	4a90      	ldr	r2, [pc, #576]	; (8015b30 <HAL_RCC_OscConfig+0x2ac>)
 80158f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80158f4:	6013      	str	r3, [r2, #0]
 80158f6:	e01d      	b.n	8015934 <HAL_RCC_OscConfig+0xb0>
 80158f8:	687b      	ldr	r3, [r7, #4]
 80158fa:	685b      	ldr	r3, [r3, #4]
 80158fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8015900:	d10c      	bne.n	801591c <HAL_RCC_OscConfig+0x98>
 8015902:	4b8b      	ldr	r3, [pc, #556]	; (8015b30 <HAL_RCC_OscConfig+0x2ac>)
 8015904:	681b      	ldr	r3, [r3, #0]
 8015906:	4a8a      	ldr	r2, [pc, #552]	; (8015b30 <HAL_RCC_OscConfig+0x2ac>)
 8015908:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801590c:	6013      	str	r3, [r2, #0]
 801590e:	4b88      	ldr	r3, [pc, #544]	; (8015b30 <HAL_RCC_OscConfig+0x2ac>)
 8015910:	681b      	ldr	r3, [r3, #0]
 8015912:	4a87      	ldr	r2, [pc, #540]	; (8015b30 <HAL_RCC_OscConfig+0x2ac>)
 8015914:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8015918:	6013      	str	r3, [r2, #0]
 801591a:	e00b      	b.n	8015934 <HAL_RCC_OscConfig+0xb0>
 801591c:	4b84      	ldr	r3, [pc, #528]	; (8015b30 <HAL_RCC_OscConfig+0x2ac>)
 801591e:	681b      	ldr	r3, [r3, #0]
 8015920:	4a83      	ldr	r2, [pc, #524]	; (8015b30 <HAL_RCC_OscConfig+0x2ac>)
 8015922:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8015926:	6013      	str	r3, [r2, #0]
 8015928:	4b81      	ldr	r3, [pc, #516]	; (8015b30 <HAL_RCC_OscConfig+0x2ac>)
 801592a:	681b      	ldr	r3, [r3, #0]
 801592c:	4a80      	ldr	r2, [pc, #512]	; (8015b30 <HAL_RCC_OscConfig+0x2ac>)
 801592e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8015932:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8015934:	687b      	ldr	r3, [r7, #4]
 8015936:	685b      	ldr	r3, [r3, #4]
 8015938:	2b00      	cmp	r3, #0
 801593a:	d013      	beq.n	8015964 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801593c:	f7fd fab8 	bl	8012eb0 <HAL_GetTick>
 8015940:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8015942:	e008      	b.n	8015956 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8015944:	f7fd fab4 	bl	8012eb0 <HAL_GetTick>
 8015948:	4602      	mov	r2, r0
 801594a:	693b      	ldr	r3, [r7, #16]
 801594c:	1ad3      	subs	r3, r2, r3
 801594e:	2b64      	cmp	r3, #100	; 0x64
 8015950:	d901      	bls.n	8015956 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8015952:	2303      	movs	r3, #3
 8015954:	e204      	b.n	8015d60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8015956:	4b76      	ldr	r3, [pc, #472]	; (8015b30 <HAL_RCC_OscConfig+0x2ac>)
 8015958:	681b      	ldr	r3, [r3, #0]
 801595a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801595e:	2b00      	cmp	r3, #0
 8015960:	d0f0      	beq.n	8015944 <HAL_RCC_OscConfig+0xc0>
 8015962:	e014      	b.n	801598e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015964:	f7fd faa4 	bl	8012eb0 <HAL_GetTick>
 8015968:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801596a:	e008      	b.n	801597e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801596c:	f7fd faa0 	bl	8012eb0 <HAL_GetTick>
 8015970:	4602      	mov	r2, r0
 8015972:	693b      	ldr	r3, [r7, #16]
 8015974:	1ad3      	subs	r3, r2, r3
 8015976:	2b64      	cmp	r3, #100	; 0x64
 8015978:	d901      	bls.n	801597e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801597a:	2303      	movs	r3, #3
 801597c:	e1f0      	b.n	8015d60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801597e:	4b6c      	ldr	r3, [pc, #432]	; (8015b30 <HAL_RCC_OscConfig+0x2ac>)
 8015980:	681b      	ldr	r3, [r3, #0]
 8015982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8015986:	2b00      	cmp	r3, #0
 8015988:	d1f0      	bne.n	801596c <HAL_RCC_OscConfig+0xe8>
 801598a:	e000      	b.n	801598e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801598c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801598e:	687b      	ldr	r3, [r7, #4]
 8015990:	681b      	ldr	r3, [r3, #0]
 8015992:	f003 0302 	and.w	r3, r3, #2
 8015996:	2b00      	cmp	r3, #0
 8015998:	d063      	beq.n	8015a62 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801599a:	4b65      	ldr	r3, [pc, #404]	; (8015b30 <HAL_RCC_OscConfig+0x2ac>)
 801599c:	689b      	ldr	r3, [r3, #8]
 801599e:	f003 030c 	and.w	r3, r3, #12
 80159a2:	2b00      	cmp	r3, #0
 80159a4:	d00b      	beq.n	80159be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80159a6:	4b62      	ldr	r3, [pc, #392]	; (8015b30 <HAL_RCC_OscConfig+0x2ac>)
 80159a8:	689b      	ldr	r3, [r3, #8]
 80159aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80159ae:	2b08      	cmp	r3, #8
 80159b0:	d11c      	bne.n	80159ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80159b2:	4b5f      	ldr	r3, [pc, #380]	; (8015b30 <HAL_RCC_OscConfig+0x2ac>)
 80159b4:	685b      	ldr	r3, [r3, #4]
 80159b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80159ba:	2b00      	cmp	r3, #0
 80159bc:	d116      	bne.n	80159ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80159be:	4b5c      	ldr	r3, [pc, #368]	; (8015b30 <HAL_RCC_OscConfig+0x2ac>)
 80159c0:	681b      	ldr	r3, [r3, #0]
 80159c2:	f003 0302 	and.w	r3, r3, #2
 80159c6:	2b00      	cmp	r3, #0
 80159c8:	d005      	beq.n	80159d6 <HAL_RCC_OscConfig+0x152>
 80159ca:	687b      	ldr	r3, [r7, #4]
 80159cc:	68db      	ldr	r3, [r3, #12]
 80159ce:	2b01      	cmp	r3, #1
 80159d0:	d001      	beq.n	80159d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80159d2:	2301      	movs	r3, #1
 80159d4:	e1c4      	b.n	8015d60 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80159d6:	4b56      	ldr	r3, [pc, #344]	; (8015b30 <HAL_RCC_OscConfig+0x2ac>)
 80159d8:	681b      	ldr	r3, [r3, #0]
 80159da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80159de:	687b      	ldr	r3, [r7, #4]
 80159e0:	691b      	ldr	r3, [r3, #16]
 80159e2:	00db      	lsls	r3, r3, #3
 80159e4:	4952      	ldr	r1, [pc, #328]	; (8015b30 <HAL_RCC_OscConfig+0x2ac>)
 80159e6:	4313      	orrs	r3, r2
 80159e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80159ea:	e03a      	b.n	8015a62 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80159ec:	687b      	ldr	r3, [r7, #4]
 80159ee:	68db      	ldr	r3, [r3, #12]
 80159f0:	2b00      	cmp	r3, #0
 80159f2:	d020      	beq.n	8015a36 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80159f4:	4b4f      	ldr	r3, [pc, #316]	; (8015b34 <HAL_RCC_OscConfig+0x2b0>)
 80159f6:	2201      	movs	r2, #1
 80159f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80159fa:	f7fd fa59 	bl	8012eb0 <HAL_GetTick>
 80159fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8015a00:	e008      	b.n	8015a14 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8015a02:	f7fd fa55 	bl	8012eb0 <HAL_GetTick>
 8015a06:	4602      	mov	r2, r0
 8015a08:	693b      	ldr	r3, [r7, #16]
 8015a0a:	1ad3      	subs	r3, r2, r3
 8015a0c:	2b02      	cmp	r3, #2
 8015a0e:	d901      	bls.n	8015a14 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8015a10:	2303      	movs	r3, #3
 8015a12:	e1a5      	b.n	8015d60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8015a14:	4b46      	ldr	r3, [pc, #280]	; (8015b30 <HAL_RCC_OscConfig+0x2ac>)
 8015a16:	681b      	ldr	r3, [r3, #0]
 8015a18:	f003 0302 	and.w	r3, r3, #2
 8015a1c:	2b00      	cmp	r3, #0
 8015a1e:	d0f0      	beq.n	8015a02 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8015a20:	4b43      	ldr	r3, [pc, #268]	; (8015b30 <HAL_RCC_OscConfig+0x2ac>)
 8015a22:	681b      	ldr	r3, [r3, #0]
 8015a24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8015a28:	687b      	ldr	r3, [r7, #4]
 8015a2a:	691b      	ldr	r3, [r3, #16]
 8015a2c:	00db      	lsls	r3, r3, #3
 8015a2e:	4940      	ldr	r1, [pc, #256]	; (8015b30 <HAL_RCC_OscConfig+0x2ac>)
 8015a30:	4313      	orrs	r3, r2
 8015a32:	600b      	str	r3, [r1, #0]
 8015a34:	e015      	b.n	8015a62 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8015a36:	4b3f      	ldr	r3, [pc, #252]	; (8015b34 <HAL_RCC_OscConfig+0x2b0>)
 8015a38:	2200      	movs	r2, #0
 8015a3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8015a3c:	f7fd fa38 	bl	8012eb0 <HAL_GetTick>
 8015a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8015a42:	e008      	b.n	8015a56 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8015a44:	f7fd fa34 	bl	8012eb0 <HAL_GetTick>
 8015a48:	4602      	mov	r2, r0
 8015a4a:	693b      	ldr	r3, [r7, #16]
 8015a4c:	1ad3      	subs	r3, r2, r3
 8015a4e:	2b02      	cmp	r3, #2
 8015a50:	d901      	bls.n	8015a56 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8015a52:	2303      	movs	r3, #3
 8015a54:	e184      	b.n	8015d60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8015a56:	4b36      	ldr	r3, [pc, #216]	; (8015b30 <HAL_RCC_OscConfig+0x2ac>)
 8015a58:	681b      	ldr	r3, [r3, #0]
 8015a5a:	f003 0302 	and.w	r3, r3, #2
 8015a5e:	2b00      	cmp	r3, #0
 8015a60:	d1f0      	bne.n	8015a44 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8015a62:	687b      	ldr	r3, [r7, #4]
 8015a64:	681b      	ldr	r3, [r3, #0]
 8015a66:	f003 0308 	and.w	r3, r3, #8
 8015a6a:	2b00      	cmp	r3, #0
 8015a6c:	d030      	beq.n	8015ad0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8015a6e:	687b      	ldr	r3, [r7, #4]
 8015a70:	695b      	ldr	r3, [r3, #20]
 8015a72:	2b00      	cmp	r3, #0
 8015a74:	d016      	beq.n	8015aa4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8015a76:	4b30      	ldr	r3, [pc, #192]	; (8015b38 <HAL_RCC_OscConfig+0x2b4>)
 8015a78:	2201      	movs	r2, #1
 8015a7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8015a7c:	f7fd fa18 	bl	8012eb0 <HAL_GetTick>
 8015a80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8015a82:	e008      	b.n	8015a96 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8015a84:	f7fd fa14 	bl	8012eb0 <HAL_GetTick>
 8015a88:	4602      	mov	r2, r0
 8015a8a:	693b      	ldr	r3, [r7, #16]
 8015a8c:	1ad3      	subs	r3, r2, r3
 8015a8e:	2b02      	cmp	r3, #2
 8015a90:	d901      	bls.n	8015a96 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8015a92:	2303      	movs	r3, #3
 8015a94:	e164      	b.n	8015d60 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8015a96:	4b26      	ldr	r3, [pc, #152]	; (8015b30 <HAL_RCC_OscConfig+0x2ac>)
 8015a98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015a9a:	f003 0302 	and.w	r3, r3, #2
 8015a9e:	2b00      	cmp	r3, #0
 8015aa0:	d0f0      	beq.n	8015a84 <HAL_RCC_OscConfig+0x200>
 8015aa2:	e015      	b.n	8015ad0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8015aa4:	4b24      	ldr	r3, [pc, #144]	; (8015b38 <HAL_RCC_OscConfig+0x2b4>)
 8015aa6:	2200      	movs	r2, #0
 8015aa8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8015aaa:	f7fd fa01 	bl	8012eb0 <HAL_GetTick>
 8015aae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8015ab0:	e008      	b.n	8015ac4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8015ab2:	f7fd f9fd 	bl	8012eb0 <HAL_GetTick>
 8015ab6:	4602      	mov	r2, r0
 8015ab8:	693b      	ldr	r3, [r7, #16]
 8015aba:	1ad3      	subs	r3, r2, r3
 8015abc:	2b02      	cmp	r3, #2
 8015abe:	d901      	bls.n	8015ac4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8015ac0:	2303      	movs	r3, #3
 8015ac2:	e14d      	b.n	8015d60 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8015ac4:	4b1a      	ldr	r3, [pc, #104]	; (8015b30 <HAL_RCC_OscConfig+0x2ac>)
 8015ac6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015ac8:	f003 0302 	and.w	r3, r3, #2
 8015acc:	2b00      	cmp	r3, #0
 8015ace:	d1f0      	bne.n	8015ab2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8015ad0:	687b      	ldr	r3, [r7, #4]
 8015ad2:	681b      	ldr	r3, [r3, #0]
 8015ad4:	f003 0304 	and.w	r3, r3, #4
 8015ad8:	2b00      	cmp	r3, #0
 8015ada:	f000 80a0 	beq.w	8015c1e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8015ade:	2300      	movs	r3, #0
 8015ae0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8015ae2:	4b13      	ldr	r3, [pc, #76]	; (8015b30 <HAL_RCC_OscConfig+0x2ac>)
 8015ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8015aea:	2b00      	cmp	r3, #0
 8015aec:	d10f      	bne.n	8015b0e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8015aee:	2300      	movs	r3, #0
 8015af0:	60bb      	str	r3, [r7, #8]
 8015af2:	4b0f      	ldr	r3, [pc, #60]	; (8015b30 <HAL_RCC_OscConfig+0x2ac>)
 8015af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015af6:	4a0e      	ldr	r2, [pc, #56]	; (8015b30 <HAL_RCC_OscConfig+0x2ac>)
 8015af8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015afc:	6413      	str	r3, [r2, #64]	; 0x40
 8015afe:	4b0c      	ldr	r3, [pc, #48]	; (8015b30 <HAL_RCC_OscConfig+0x2ac>)
 8015b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8015b06:	60bb      	str	r3, [r7, #8]
 8015b08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8015b0a:	2301      	movs	r3, #1
 8015b0c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8015b0e:	4b0b      	ldr	r3, [pc, #44]	; (8015b3c <HAL_RCC_OscConfig+0x2b8>)
 8015b10:	681b      	ldr	r3, [r3, #0]
 8015b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015b16:	2b00      	cmp	r3, #0
 8015b18:	d121      	bne.n	8015b5e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8015b1a:	4b08      	ldr	r3, [pc, #32]	; (8015b3c <HAL_RCC_OscConfig+0x2b8>)
 8015b1c:	681b      	ldr	r3, [r3, #0]
 8015b1e:	4a07      	ldr	r2, [pc, #28]	; (8015b3c <HAL_RCC_OscConfig+0x2b8>)
 8015b20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015b24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8015b26:	f7fd f9c3 	bl	8012eb0 <HAL_GetTick>
 8015b2a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8015b2c:	e011      	b.n	8015b52 <HAL_RCC_OscConfig+0x2ce>
 8015b2e:	bf00      	nop
 8015b30:	40023800 	.word	0x40023800
 8015b34:	42470000 	.word	0x42470000
 8015b38:	42470e80 	.word	0x42470e80
 8015b3c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8015b40:	f7fd f9b6 	bl	8012eb0 <HAL_GetTick>
 8015b44:	4602      	mov	r2, r0
 8015b46:	693b      	ldr	r3, [r7, #16]
 8015b48:	1ad3      	subs	r3, r2, r3
 8015b4a:	2b02      	cmp	r3, #2
 8015b4c:	d901      	bls.n	8015b52 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8015b4e:	2303      	movs	r3, #3
 8015b50:	e106      	b.n	8015d60 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8015b52:	4b85      	ldr	r3, [pc, #532]	; (8015d68 <HAL_RCC_OscConfig+0x4e4>)
 8015b54:	681b      	ldr	r3, [r3, #0]
 8015b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015b5a:	2b00      	cmp	r3, #0
 8015b5c:	d0f0      	beq.n	8015b40 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8015b5e:	687b      	ldr	r3, [r7, #4]
 8015b60:	689b      	ldr	r3, [r3, #8]
 8015b62:	2b01      	cmp	r3, #1
 8015b64:	d106      	bne.n	8015b74 <HAL_RCC_OscConfig+0x2f0>
 8015b66:	4b81      	ldr	r3, [pc, #516]	; (8015d6c <HAL_RCC_OscConfig+0x4e8>)
 8015b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015b6a:	4a80      	ldr	r2, [pc, #512]	; (8015d6c <HAL_RCC_OscConfig+0x4e8>)
 8015b6c:	f043 0301 	orr.w	r3, r3, #1
 8015b70:	6713      	str	r3, [r2, #112]	; 0x70
 8015b72:	e01c      	b.n	8015bae <HAL_RCC_OscConfig+0x32a>
 8015b74:	687b      	ldr	r3, [r7, #4]
 8015b76:	689b      	ldr	r3, [r3, #8]
 8015b78:	2b05      	cmp	r3, #5
 8015b7a:	d10c      	bne.n	8015b96 <HAL_RCC_OscConfig+0x312>
 8015b7c:	4b7b      	ldr	r3, [pc, #492]	; (8015d6c <HAL_RCC_OscConfig+0x4e8>)
 8015b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015b80:	4a7a      	ldr	r2, [pc, #488]	; (8015d6c <HAL_RCC_OscConfig+0x4e8>)
 8015b82:	f043 0304 	orr.w	r3, r3, #4
 8015b86:	6713      	str	r3, [r2, #112]	; 0x70
 8015b88:	4b78      	ldr	r3, [pc, #480]	; (8015d6c <HAL_RCC_OscConfig+0x4e8>)
 8015b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015b8c:	4a77      	ldr	r2, [pc, #476]	; (8015d6c <HAL_RCC_OscConfig+0x4e8>)
 8015b8e:	f043 0301 	orr.w	r3, r3, #1
 8015b92:	6713      	str	r3, [r2, #112]	; 0x70
 8015b94:	e00b      	b.n	8015bae <HAL_RCC_OscConfig+0x32a>
 8015b96:	4b75      	ldr	r3, [pc, #468]	; (8015d6c <HAL_RCC_OscConfig+0x4e8>)
 8015b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015b9a:	4a74      	ldr	r2, [pc, #464]	; (8015d6c <HAL_RCC_OscConfig+0x4e8>)
 8015b9c:	f023 0301 	bic.w	r3, r3, #1
 8015ba0:	6713      	str	r3, [r2, #112]	; 0x70
 8015ba2:	4b72      	ldr	r3, [pc, #456]	; (8015d6c <HAL_RCC_OscConfig+0x4e8>)
 8015ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015ba6:	4a71      	ldr	r2, [pc, #452]	; (8015d6c <HAL_RCC_OscConfig+0x4e8>)
 8015ba8:	f023 0304 	bic.w	r3, r3, #4
 8015bac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8015bae:	687b      	ldr	r3, [r7, #4]
 8015bb0:	689b      	ldr	r3, [r3, #8]
 8015bb2:	2b00      	cmp	r3, #0
 8015bb4:	d015      	beq.n	8015be2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8015bb6:	f7fd f97b 	bl	8012eb0 <HAL_GetTick>
 8015bba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8015bbc:	e00a      	b.n	8015bd4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8015bbe:	f7fd f977 	bl	8012eb0 <HAL_GetTick>
 8015bc2:	4602      	mov	r2, r0
 8015bc4:	693b      	ldr	r3, [r7, #16]
 8015bc6:	1ad3      	subs	r3, r2, r3
 8015bc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8015bcc:	4293      	cmp	r3, r2
 8015bce:	d901      	bls.n	8015bd4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8015bd0:	2303      	movs	r3, #3
 8015bd2:	e0c5      	b.n	8015d60 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8015bd4:	4b65      	ldr	r3, [pc, #404]	; (8015d6c <HAL_RCC_OscConfig+0x4e8>)
 8015bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015bd8:	f003 0302 	and.w	r3, r3, #2
 8015bdc:	2b00      	cmp	r3, #0
 8015bde:	d0ee      	beq.n	8015bbe <HAL_RCC_OscConfig+0x33a>
 8015be0:	e014      	b.n	8015c0c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8015be2:	f7fd f965 	bl	8012eb0 <HAL_GetTick>
 8015be6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8015be8:	e00a      	b.n	8015c00 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8015bea:	f7fd f961 	bl	8012eb0 <HAL_GetTick>
 8015bee:	4602      	mov	r2, r0
 8015bf0:	693b      	ldr	r3, [r7, #16]
 8015bf2:	1ad3      	subs	r3, r2, r3
 8015bf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8015bf8:	4293      	cmp	r3, r2
 8015bfa:	d901      	bls.n	8015c00 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8015bfc:	2303      	movs	r3, #3
 8015bfe:	e0af      	b.n	8015d60 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8015c00:	4b5a      	ldr	r3, [pc, #360]	; (8015d6c <HAL_RCC_OscConfig+0x4e8>)
 8015c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015c04:	f003 0302 	and.w	r3, r3, #2
 8015c08:	2b00      	cmp	r3, #0
 8015c0a:	d1ee      	bne.n	8015bea <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8015c0c:	7dfb      	ldrb	r3, [r7, #23]
 8015c0e:	2b01      	cmp	r3, #1
 8015c10:	d105      	bne.n	8015c1e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8015c12:	4b56      	ldr	r3, [pc, #344]	; (8015d6c <HAL_RCC_OscConfig+0x4e8>)
 8015c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015c16:	4a55      	ldr	r2, [pc, #340]	; (8015d6c <HAL_RCC_OscConfig+0x4e8>)
 8015c18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8015c1c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8015c1e:	687b      	ldr	r3, [r7, #4]
 8015c20:	699b      	ldr	r3, [r3, #24]
 8015c22:	2b00      	cmp	r3, #0
 8015c24:	f000 809b 	beq.w	8015d5e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8015c28:	4b50      	ldr	r3, [pc, #320]	; (8015d6c <HAL_RCC_OscConfig+0x4e8>)
 8015c2a:	689b      	ldr	r3, [r3, #8]
 8015c2c:	f003 030c 	and.w	r3, r3, #12
 8015c30:	2b08      	cmp	r3, #8
 8015c32:	d05c      	beq.n	8015cee <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8015c34:	687b      	ldr	r3, [r7, #4]
 8015c36:	699b      	ldr	r3, [r3, #24]
 8015c38:	2b02      	cmp	r3, #2
 8015c3a:	d141      	bne.n	8015cc0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8015c3c:	4b4c      	ldr	r3, [pc, #304]	; (8015d70 <HAL_RCC_OscConfig+0x4ec>)
 8015c3e:	2200      	movs	r2, #0
 8015c40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015c42:	f7fd f935 	bl	8012eb0 <HAL_GetTick>
 8015c46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8015c48:	e008      	b.n	8015c5c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8015c4a:	f7fd f931 	bl	8012eb0 <HAL_GetTick>
 8015c4e:	4602      	mov	r2, r0
 8015c50:	693b      	ldr	r3, [r7, #16]
 8015c52:	1ad3      	subs	r3, r2, r3
 8015c54:	2b02      	cmp	r3, #2
 8015c56:	d901      	bls.n	8015c5c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8015c58:	2303      	movs	r3, #3
 8015c5a:	e081      	b.n	8015d60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8015c5c:	4b43      	ldr	r3, [pc, #268]	; (8015d6c <HAL_RCC_OscConfig+0x4e8>)
 8015c5e:	681b      	ldr	r3, [r3, #0]
 8015c60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8015c64:	2b00      	cmp	r3, #0
 8015c66:	d1f0      	bne.n	8015c4a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8015c68:	687b      	ldr	r3, [r7, #4]
 8015c6a:	69da      	ldr	r2, [r3, #28]
 8015c6c:	687b      	ldr	r3, [r7, #4]
 8015c6e:	6a1b      	ldr	r3, [r3, #32]
 8015c70:	431a      	orrs	r2, r3
 8015c72:	687b      	ldr	r3, [r7, #4]
 8015c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c76:	019b      	lsls	r3, r3, #6
 8015c78:	431a      	orrs	r2, r3
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015c7e:	085b      	lsrs	r3, r3, #1
 8015c80:	3b01      	subs	r3, #1
 8015c82:	041b      	lsls	r3, r3, #16
 8015c84:	431a      	orrs	r2, r3
 8015c86:	687b      	ldr	r3, [r7, #4]
 8015c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015c8a:	061b      	lsls	r3, r3, #24
 8015c8c:	4937      	ldr	r1, [pc, #220]	; (8015d6c <HAL_RCC_OscConfig+0x4e8>)
 8015c8e:	4313      	orrs	r3, r2
 8015c90:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8015c92:	4b37      	ldr	r3, [pc, #220]	; (8015d70 <HAL_RCC_OscConfig+0x4ec>)
 8015c94:	2201      	movs	r2, #1
 8015c96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015c98:	f7fd f90a 	bl	8012eb0 <HAL_GetTick>
 8015c9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8015c9e:	e008      	b.n	8015cb2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8015ca0:	f7fd f906 	bl	8012eb0 <HAL_GetTick>
 8015ca4:	4602      	mov	r2, r0
 8015ca6:	693b      	ldr	r3, [r7, #16]
 8015ca8:	1ad3      	subs	r3, r2, r3
 8015caa:	2b02      	cmp	r3, #2
 8015cac:	d901      	bls.n	8015cb2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8015cae:	2303      	movs	r3, #3
 8015cb0:	e056      	b.n	8015d60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8015cb2:	4b2e      	ldr	r3, [pc, #184]	; (8015d6c <HAL_RCC_OscConfig+0x4e8>)
 8015cb4:	681b      	ldr	r3, [r3, #0]
 8015cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8015cba:	2b00      	cmp	r3, #0
 8015cbc:	d0f0      	beq.n	8015ca0 <HAL_RCC_OscConfig+0x41c>
 8015cbe:	e04e      	b.n	8015d5e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8015cc0:	4b2b      	ldr	r3, [pc, #172]	; (8015d70 <HAL_RCC_OscConfig+0x4ec>)
 8015cc2:	2200      	movs	r2, #0
 8015cc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015cc6:	f7fd f8f3 	bl	8012eb0 <HAL_GetTick>
 8015cca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8015ccc:	e008      	b.n	8015ce0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8015cce:	f7fd f8ef 	bl	8012eb0 <HAL_GetTick>
 8015cd2:	4602      	mov	r2, r0
 8015cd4:	693b      	ldr	r3, [r7, #16]
 8015cd6:	1ad3      	subs	r3, r2, r3
 8015cd8:	2b02      	cmp	r3, #2
 8015cda:	d901      	bls.n	8015ce0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8015cdc:	2303      	movs	r3, #3
 8015cde:	e03f      	b.n	8015d60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8015ce0:	4b22      	ldr	r3, [pc, #136]	; (8015d6c <HAL_RCC_OscConfig+0x4e8>)
 8015ce2:	681b      	ldr	r3, [r3, #0]
 8015ce4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8015ce8:	2b00      	cmp	r3, #0
 8015cea:	d1f0      	bne.n	8015cce <HAL_RCC_OscConfig+0x44a>
 8015cec:	e037      	b.n	8015d5e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8015cee:	687b      	ldr	r3, [r7, #4]
 8015cf0:	699b      	ldr	r3, [r3, #24]
 8015cf2:	2b01      	cmp	r3, #1
 8015cf4:	d101      	bne.n	8015cfa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8015cf6:	2301      	movs	r3, #1
 8015cf8:	e032      	b.n	8015d60 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8015cfa:	4b1c      	ldr	r3, [pc, #112]	; (8015d6c <HAL_RCC_OscConfig+0x4e8>)
 8015cfc:	685b      	ldr	r3, [r3, #4]
 8015cfe:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8015d00:	687b      	ldr	r3, [r7, #4]
 8015d02:	699b      	ldr	r3, [r3, #24]
 8015d04:	2b01      	cmp	r3, #1
 8015d06:	d028      	beq.n	8015d5a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8015d08:	68fb      	ldr	r3, [r7, #12]
 8015d0a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8015d0e:	687b      	ldr	r3, [r7, #4]
 8015d10:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8015d12:	429a      	cmp	r2, r3
 8015d14:	d121      	bne.n	8015d5a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8015d16:	68fb      	ldr	r3, [r7, #12]
 8015d18:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8015d1c:	687b      	ldr	r3, [r7, #4]
 8015d1e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8015d20:	429a      	cmp	r2, r3
 8015d22:	d11a      	bne.n	8015d5a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8015d24:	68fa      	ldr	r2, [r7, #12]
 8015d26:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8015d2a:	4013      	ands	r3, r2
 8015d2c:	687a      	ldr	r2, [r7, #4]
 8015d2e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8015d30:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8015d32:	4293      	cmp	r3, r2
 8015d34:	d111      	bne.n	8015d5a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8015d36:	68fb      	ldr	r3, [r7, #12]
 8015d38:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8015d3c:	687b      	ldr	r3, [r7, #4]
 8015d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015d40:	085b      	lsrs	r3, r3, #1
 8015d42:	3b01      	subs	r3, #1
 8015d44:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8015d46:	429a      	cmp	r2, r3
 8015d48:	d107      	bne.n	8015d5a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8015d4a:	68fb      	ldr	r3, [r7, #12]
 8015d4c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8015d50:	687b      	ldr	r3, [r7, #4]
 8015d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015d54:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8015d56:	429a      	cmp	r2, r3
 8015d58:	d001      	beq.n	8015d5e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8015d5a:	2301      	movs	r3, #1
 8015d5c:	e000      	b.n	8015d60 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8015d5e:	2300      	movs	r3, #0
}
 8015d60:	4618      	mov	r0, r3
 8015d62:	3718      	adds	r7, #24
 8015d64:	46bd      	mov	sp, r7
 8015d66:	bd80      	pop	{r7, pc}
 8015d68:	40007000 	.word	0x40007000
 8015d6c:	40023800 	.word	0x40023800
 8015d70:	42470060 	.word	0x42470060

08015d74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8015d74:	b580      	push	{r7, lr}
 8015d76:	b084      	sub	sp, #16
 8015d78:	af00      	add	r7, sp, #0
 8015d7a:	6078      	str	r0, [r7, #4]
 8015d7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8015d7e:	687b      	ldr	r3, [r7, #4]
 8015d80:	2b00      	cmp	r3, #0
 8015d82:	d101      	bne.n	8015d88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8015d84:	2301      	movs	r3, #1
 8015d86:	e0cc      	b.n	8015f22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8015d88:	4b68      	ldr	r3, [pc, #416]	; (8015f2c <HAL_RCC_ClockConfig+0x1b8>)
 8015d8a:	681b      	ldr	r3, [r3, #0]
 8015d8c:	f003 0307 	and.w	r3, r3, #7
 8015d90:	683a      	ldr	r2, [r7, #0]
 8015d92:	429a      	cmp	r2, r3
 8015d94:	d90c      	bls.n	8015db0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8015d96:	4b65      	ldr	r3, [pc, #404]	; (8015f2c <HAL_RCC_ClockConfig+0x1b8>)
 8015d98:	683a      	ldr	r2, [r7, #0]
 8015d9a:	b2d2      	uxtb	r2, r2
 8015d9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8015d9e:	4b63      	ldr	r3, [pc, #396]	; (8015f2c <HAL_RCC_ClockConfig+0x1b8>)
 8015da0:	681b      	ldr	r3, [r3, #0]
 8015da2:	f003 0307 	and.w	r3, r3, #7
 8015da6:	683a      	ldr	r2, [r7, #0]
 8015da8:	429a      	cmp	r2, r3
 8015daa:	d001      	beq.n	8015db0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8015dac:	2301      	movs	r3, #1
 8015dae:	e0b8      	b.n	8015f22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8015db0:	687b      	ldr	r3, [r7, #4]
 8015db2:	681b      	ldr	r3, [r3, #0]
 8015db4:	f003 0302 	and.w	r3, r3, #2
 8015db8:	2b00      	cmp	r3, #0
 8015dba:	d020      	beq.n	8015dfe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	681b      	ldr	r3, [r3, #0]
 8015dc0:	f003 0304 	and.w	r3, r3, #4
 8015dc4:	2b00      	cmp	r3, #0
 8015dc6:	d005      	beq.n	8015dd4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8015dc8:	4b59      	ldr	r3, [pc, #356]	; (8015f30 <HAL_RCC_ClockConfig+0x1bc>)
 8015dca:	689b      	ldr	r3, [r3, #8]
 8015dcc:	4a58      	ldr	r2, [pc, #352]	; (8015f30 <HAL_RCC_ClockConfig+0x1bc>)
 8015dce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8015dd2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8015dd4:	687b      	ldr	r3, [r7, #4]
 8015dd6:	681b      	ldr	r3, [r3, #0]
 8015dd8:	f003 0308 	and.w	r3, r3, #8
 8015ddc:	2b00      	cmp	r3, #0
 8015dde:	d005      	beq.n	8015dec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8015de0:	4b53      	ldr	r3, [pc, #332]	; (8015f30 <HAL_RCC_ClockConfig+0x1bc>)
 8015de2:	689b      	ldr	r3, [r3, #8]
 8015de4:	4a52      	ldr	r2, [pc, #328]	; (8015f30 <HAL_RCC_ClockConfig+0x1bc>)
 8015de6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8015dea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8015dec:	4b50      	ldr	r3, [pc, #320]	; (8015f30 <HAL_RCC_ClockConfig+0x1bc>)
 8015dee:	689b      	ldr	r3, [r3, #8]
 8015df0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8015df4:	687b      	ldr	r3, [r7, #4]
 8015df6:	689b      	ldr	r3, [r3, #8]
 8015df8:	494d      	ldr	r1, [pc, #308]	; (8015f30 <HAL_RCC_ClockConfig+0x1bc>)
 8015dfa:	4313      	orrs	r3, r2
 8015dfc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8015dfe:	687b      	ldr	r3, [r7, #4]
 8015e00:	681b      	ldr	r3, [r3, #0]
 8015e02:	f003 0301 	and.w	r3, r3, #1
 8015e06:	2b00      	cmp	r3, #0
 8015e08:	d044      	beq.n	8015e94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8015e0a:	687b      	ldr	r3, [r7, #4]
 8015e0c:	685b      	ldr	r3, [r3, #4]
 8015e0e:	2b01      	cmp	r3, #1
 8015e10:	d107      	bne.n	8015e22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8015e12:	4b47      	ldr	r3, [pc, #284]	; (8015f30 <HAL_RCC_ClockConfig+0x1bc>)
 8015e14:	681b      	ldr	r3, [r3, #0]
 8015e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8015e1a:	2b00      	cmp	r3, #0
 8015e1c:	d119      	bne.n	8015e52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8015e1e:	2301      	movs	r3, #1
 8015e20:	e07f      	b.n	8015f22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8015e22:	687b      	ldr	r3, [r7, #4]
 8015e24:	685b      	ldr	r3, [r3, #4]
 8015e26:	2b02      	cmp	r3, #2
 8015e28:	d003      	beq.n	8015e32 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8015e2a:	687b      	ldr	r3, [r7, #4]
 8015e2c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8015e2e:	2b03      	cmp	r3, #3
 8015e30:	d107      	bne.n	8015e42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8015e32:	4b3f      	ldr	r3, [pc, #252]	; (8015f30 <HAL_RCC_ClockConfig+0x1bc>)
 8015e34:	681b      	ldr	r3, [r3, #0]
 8015e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8015e3a:	2b00      	cmp	r3, #0
 8015e3c:	d109      	bne.n	8015e52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8015e3e:	2301      	movs	r3, #1
 8015e40:	e06f      	b.n	8015f22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8015e42:	4b3b      	ldr	r3, [pc, #236]	; (8015f30 <HAL_RCC_ClockConfig+0x1bc>)
 8015e44:	681b      	ldr	r3, [r3, #0]
 8015e46:	f003 0302 	and.w	r3, r3, #2
 8015e4a:	2b00      	cmp	r3, #0
 8015e4c:	d101      	bne.n	8015e52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8015e4e:	2301      	movs	r3, #1
 8015e50:	e067      	b.n	8015f22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8015e52:	4b37      	ldr	r3, [pc, #220]	; (8015f30 <HAL_RCC_ClockConfig+0x1bc>)
 8015e54:	689b      	ldr	r3, [r3, #8]
 8015e56:	f023 0203 	bic.w	r2, r3, #3
 8015e5a:	687b      	ldr	r3, [r7, #4]
 8015e5c:	685b      	ldr	r3, [r3, #4]
 8015e5e:	4934      	ldr	r1, [pc, #208]	; (8015f30 <HAL_RCC_ClockConfig+0x1bc>)
 8015e60:	4313      	orrs	r3, r2
 8015e62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8015e64:	f7fd f824 	bl	8012eb0 <HAL_GetTick>
 8015e68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8015e6a:	e00a      	b.n	8015e82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8015e6c:	f7fd f820 	bl	8012eb0 <HAL_GetTick>
 8015e70:	4602      	mov	r2, r0
 8015e72:	68fb      	ldr	r3, [r7, #12]
 8015e74:	1ad3      	subs	r3, r2, r3
 8015e76:	f241 3288 	movw	r2, #5000	; 0x1388
 8015e7a:	4293      	cmp	r3, r2
 8015e7c:	d901      	bls.n	8015e82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8015e7e:	2303      	movs	r3, #3
 8015e80:	e04f      	b.n	8015f22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8015e82:	4b2b      	ldr	r3, [pc, #172]	; (8015f30 <HAL_RCC_ClockConfig+0x1bc>)
 8015e84:	689b      	ldr	r3, [r3, #8]
 8015e86:	f003 020c 	and.w	r2, r3, #12
 8015e8a:	687b      	ldr	r3, [r7, #4]
 8015e8c:	685b      	ldr	r3, [r3, #4]
 8015e8e:	009b      	lsls	r3, r3, #2
 8015e90:	429a      	cmp	r2, r3
 8015e92:	d1eb      	bne.n	8015e6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8015e94:	4b25      	ldr	r3, [pc, #148]	; (8015f2c <HAL_RCC_ClockConfig+0x1b8>)
 8015e96:	681b      	ldr	r3, [r3, #0]
 8015e98:	f003 0307 	and.w	r3, r3, #7
 8015e9c:	683a      	ldr	r2, [r7, #0]
 8015e9e:	429a      	cmp	r2, r3
 8015ea0:	d20c      	bcs.n	8015ebc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8015ea2:	4b22      	ldr	r3, [pc, #136]	; (8015f2c <HAL_RCC_ClockConfig+0x1b8>)
 8015ea4:	683a      	ldr	r2, [r7, #0]
 8015ea6:	b2d2      	uxtb	r2, r2
 8015ea8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8015eaa:	4b20      	ldr	r3, [pc, #128]	; (8015f2c <HAL_RCC_ClockConfig+0x1b8>)
 8015eac:	681b      	ldr	r3, [r3, #0]
 8015eae:	f003 0307 	and.w	r3, r3, #7
 8015eb2:	683a      	ldr	r2, [r7, #0]
 8015eb4:	429a      	cmp	r2, r3
 8015eb6:	d001      	beq.n	8015ebc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8015eb8:	2301      	movs	r3, #1
 8015eba:	e032      	b.n	8015f22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8015ebc:	687b      	ldr	r3, [r7, #4]
 8015ebe:	681b      	ldr	r3, [r3, #0]
 8015ec0:	f003 0304 	and.w	r3, r3, #4
 8015ec4:	2b00      	cmp	r3, #0
 8015ec6:	d008      	beq.n	8015eda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8015ec8:	4b19      	ldr	r3, [pc, #100]	; (8015f30 <HAL_RCC_ClockConfig+0x1bc>)
 8015eca:	689b      	ldr	r3, [r3, #8]
 8015ecc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8015ed0:	687b      	ldr	r3, [r7, #4]
 8015ed2:	68db      	ldr	r3, [r3, #12]
 8015ed4:	4916      	ldr	r1, [pc, #88]	; (8015f30 <HAL_RCC_ClockConfig+0x1bc>)
 8015ed6:	4313      	orrs	r3, r2
 8015ed8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8015eda:	687b      	ldr	r3, [r7, #4]
 8015edc:	681b      	ldr	r3, [r3, #0]
 8015ede:	f003 0308 	and.w	r3, r3, #8
 8015ee2:	2b00      	cmp	r3, #0
 8015ee4:	d009      	beq.n	8015efa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8015ee6:	4b12      	ldr	r3, [pc, #72]	; (8015f30 <HAL_RCC_ClockConfig+0x1bc>)
 8015ee8:	689b      	ldr	r3, [r3, #8]
 8015eea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8015eee:	687b      	ldr	r3, [r7, #4]
 8015ef0:	691b      	ldr	r3, [r3, #16]
 8015ef2:	00db      	lsls	r3, r3, #3
 8015ef4:	490e      	ldr	r1, [pc, #56]	; (8015f30 <HAL_RCC_ClockConfig+0x1bc>)
 8015ef6:	4313      	orrs	r3, r2
 8015ef8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8015efa:	f000 f821 	bl	8015f40 <HAL_RCC_GetSysClockFreq>
 8015efe:	4602      	mov	r2, r0
 8015f00:	4b0b      	ldr	r3, [pc, #44]	; (8015f30 <HAL_RCC_ClockConfig+0x1bc>)
 8015f02:	689b      	ldr	r3, [r3, #8]
 8015f04:	091b      	lsrs	r3, r3, #4
 8015f06:	f003 030f 	and.w	r3, r3, #15
 8015f0a:	490a      	ldr	r1, [pc, #40]	; (8015f34 <HAL_RCC_ClockConfig+0x1c0>)
 8015f0c:	5ccb      	ldrb	r3, [r1, r3]
 8015f0e:	fa22 f303 	lsr.w	r3, r2, r3
 8015f12:	4a09      	ldr	r2, [pc, #36]	; (8015f38 <HAL_RCC_ClockConfig+0x1c4>)
 8015f14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8015f16:	4b09      	ldr	r3, [pc, #36]	; (8015f3c <HAL_RCC_ClockConfig+0x1c8>)
 8015f18:	681b      	ldr	r3, [r3, #0]
 8015f1a:	4618      	mov	r0, r3
 8015f1c:	f7fc fe3e 	bl	8012b9c <HAL_InitTick>

  return HAL_OK;
 8015f20:	2300      	movs	r3, #0
}
 8015f22:	4618      	mov	r0, r3
 8015f24:	3710      	adds	r7, #16
 8015f26:	46bd      	mov	sp, r7
 8015f28:	bd80      	pop	{r7, pc}
 8015f2a:	bf00      	nop
 8015f2c:	40023c00 	.word	0x40023c00
 8015f30:	40023800 	.word	0x40023800
 8015f34:	0802ff4c 	.word	0x0802ff4c
 8015f38:	20000008 	.word	0x20000008
 8015f3c:	2000000c 	.word	0x2000000c

08015f40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8015f40:	b5b0      	push	{r4, r5, r7, lr}
 8015f42:	b084      	sub	sp, #16
 8015f44:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8015f46:	2100      	movs	r1, #0
 8015f48:	6079      	str	r1, [r7, #4]
 8015f4a:	2100      	movs	r1, #0
 8015f4c:	60f9      	str	r1, [r7, #12]
 8015f4e:	2100      	movs	r1, #0
 8015f50:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8015f52:	2100      	movs	r1, #0
 8015f54:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8015f56:	4952      	ldr	r1, [pc, #328]	; (80160a0 <HAL_RCC_GetSysClockFreq+0x160>)
 8015f58:	6889      	ldr	r1, [r1, #8]
 8015f5a:	f001 010c 	and.w	r1, r1, #12
 8015f5e:	2908      	cmp	r1, #8
 8015f60:	d00d      	beq.n	8015f7e <HAL_RCC_GetSysClockFreq+0x3e>
 8015f62:	2908      	cmp	r1, #8
 8015f64:	f200 8094 	bhi.w	8016090 <HAL_RCC_GetSysClockFreq+0x150>
 8015f68:	2900      	cmp	r1, #0
 8015f6a:	d002      	beq.n	8015f72 <HAL_RCC_GetSysClockFreq+0x32>
 8015f6c:	2904      	cmp	r1, #4
 8015f6e:	d003      	beq.n	8015f78 <HAL_RCC_GetSysClockFreq+0x38>
 8015f70:	e08e      	b.n	8016090 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8015f72:	4b4c      	ldr	r3, [pc, #304]	; (80160a4 <HAL_RCC_GetSysClockFreq+0x164>)
 8015f74:	60bb      	str	r3, [r7, #8]
       break;
 8015f76:	e08e      	b.n	8016096 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8015f78:	4b4b      	ldr	r3, [pc, #300]	; (80160a8 <HAL_RCC_GetSysClockFreq+0x168>)
 8015f7a:	60bb      	str	r3, [r7, #8]
      break;
 8015f7c:	e08b      	b.n	8016096 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8015f7e:	4948      	ldr	r1, [pc, #288]	; (80160a0 <HAL_RCC_GetSysClockFreq+0x160>)
 8015f80:	6849      	ldr	r1, [r1, #4]
 8015f82:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8015f86:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8015f88:	4945      	ldr	r1, [pc, #276]	; (80160a0 <HAL_RCC_GetSysClockFreq+0x160>)
 8015f8a:	6849      	ldr	r1, [r1, #4]
 8015f8c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8015f90:	2900      	cmp	r1, #0
 8015f92:	d024      	beq.n	8015fde <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8015f94:	4942      	ldr	r1, [pc, #264]	; (80160a0 <HAL_RCC_GetSysClockFreq+0x160>)
 8015f96:	6849      	ldr	r1, [r1, #4]
 8015f98:	0989      	lsrs	r1, r1, #6
 8015f9a:	4608      	mov	r0, r1
 8015f9c:	f04f 0100 	mov.w	r1, #0
 8015fa0:	f240 14ff 	movw	r4, #511	; 0x1ff
 8015fa4:	f04f 0500 	mov.w	r5, #0
 8015fa8:	ea00 0204 	and.w	r2, r0, r4
 8015fac:	ea01 0305 	and.w	r3, r1, r5
 8015fb0:	493d      	ldr	r1, [pc, #244]	; (80160a8 <HAL_RCC_GetSysClockFreq+0x168>)
 8015fb2:	fb01 f003 	mul.w	r0, r1, r3
 8015fb6:	2100      	movs	r1, #0
 8015fb8:	fb01 f102 	mul.w	r1, r1, r2
 8015fbc:	1844      	adds	r4, r0, r1
 8015fbe:	493a      	ldr	r1, [pc, #232]	; (80160a8 <HAL_RCC_GetSysClockFreq+0x168>)
 8015fc0:	fba2 0101 	umull	r0, r1, r2, r1
 8015fc4:	1863      	adds	r3, r4, r1
 8015fc6:	4619      	mov	r1, r3
 8015fc8:	687b      	ldr	r3, [r7, #4]
 8015fca:	461a      	mov	r2, r3
 8015fcc:	f04f 0300 	mov.w	r3, #0
 8015fd0:	f7fa fdc2 	bl	8010b58 <__aeabi_uldivmod>
 8015fd4:	4602      	mov	r2, r0
 8015fd6:	460b      	mov	r3, r1
 8015fd8:	4613      	mov	r3, r2
 8015fda:	60fb      	str	r3, [r7, #12]
 8015fdc:	e04a      	b.n	8016074 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8015fde:	4b30      	ldr	r3, [pc, #192]	; (80160a0 <HAL_RCC_GetSysClockFreq+0x160>)
 8015fe0:	685b      	ldr	r3, [r3, #4]
 8015fe2:	099b      	lsrs	r3, r3, #6
 8015fe4:	461a      	mov	r2, r3
 8015fe6:	f04f 0300 	mov.w	r3, #0
 8015fea:	f240 10ff 	movw	r0, #511	; 0x1ff
 8015fee:	f04f 0100 	mov.w	r1, #0
 8015ff2:	ea02 0400 	and.w	r4, r2, r0
 8015ff6:	ea03 0501 	and.w	r5, r3, r1
 8015ffa:	4620      	mov	r0, r4
 8015ffc:	4629      	mov	r1, r5
 8015ffe:	f04f 0200 	mov.w	r2, #0
 8016002:	f04f 0300 	mov.w	r3, #0
 8016006:	014b      	lsls	r3, r1, #5
 8016008:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 801600c:	0142      	lsls	r2, r0, #5
 801600e:	4610      	mov	r0, r2
 8016010:	4619      	mov	r1, r3
 8016012:	1b00      	subs	r0, r0, r4
 8016014:	eb61 0105 	sbc.w	r1, r1, r5
 8016018:	f04f 0200 	mov.w	r2, #0
 801601c:	f04f 0300 	mov.w	r3, #0
 8016020:	018b      	lsls	r3, r1, #6
 8016022:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8016026:	0182      	lsls	r2, r0, #6
 8016028:	1a12      	subs	r2, r2, r0
 801602a:	eb63 0301 	sbc.w	r3, r3, r1
 801602e:	f04f 0000 	mov.w	r0, #0
 8016032:	f04f 0100 	mov.w	r1, #0
 8016036:	00d9      	lsls	r1, r3, #3
 8016038:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801603c:	00d0      	lsls	r0, r2, #3
 801603e:	4602      	mov	r2, r0
 8016040:	460b      	mov	r3, r1
 8016042:	1912      	adds	r2, r2, r4
 8016044:	eb45 0303 	adc.w	r3, r5, r3
 8016048:	f04f 0000 	mov.w	r0, #0
 801604c:	f04f 0100 	mov.w	r1, #0
 8016050:	0299      	lsls	r1, r3, #10
 8016052:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8016056:	0290      	lsls	r0, r2, #10
 8016058:	4602      	mov	r2, r0
 801605a:	460b      	mov	r3, r1
 801605c:	4610      	mov	r0, r2
 801605e:	4619      	mov	r1, r3
 8016060:	687b      	ldr	r3, [r7, #4]
 8016062:	461a      	mov	r2, r3
 8016064:	f04f 0300 	mov.w	r3, #0
 8016068:	f7fa fd76 	bl	8010b58 <__aeabi_uldivmod>
 801606c:	4602      	mov	r2, r0
 801606e:	460b      	mov	r3, r1
 8016070:	4613      	mov	r3, r2
 8016072:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8016074:	4b0a      	ldr	r3, [pc, #40]	; (80160a0 <HAL_RCC_GetSysClockFreq+0x160>)
 8016076:	685b      	ldr	r3, [r3, #4]
 8016078:	0c1b      	lsrs	r3, r3, #16
 801607a:	f003 0303 	and.w	r3, r3, #3
 801607e:	3301      	adds	r3, #1
 8016080:	005b      	lsls	r3, r3, #1
 8016082:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8016084:	68fa      	ldr	r2, [r7, #12]
 8016086:	683b      	ldr	r3, [r7, #0]
 8016088:	fbb2 f3f3 	udiv	r3, r2, r3
 801608c:	60bb      	str	r3, [r7, #8]
      break;
 801608e:	e002      	b.n	8016096 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8016090:	4b04      	ldr	r3, [pc, #16]	; (80160a4 <HAL_RCC_GetSysClockFreq+0x164>)
 8016092:	60bb      	str	r3, [r7, #8]
      break;
 8016094:	bf00      	nop
    }
  }
  return sysclockfreq;
 8016096:	68bb      	ldr	r3, [r7, #8]
}
 8016098:	4618      	mov	r0, r3
 801609a:	3710      	adds	r7, #16
 801609c:	46bd      	mov	sp, r7
 801609e:	bdb0      	pop	{r4, r5, r7, pc}
 80160a0:	40023800 	.word	0x40023800
 80160a4:	00f42400 	.word	0x00f42400
 80160a8:	017d7840 	.word	0x017d7840

080160ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80160ac:	b480      	push	{r7}
 80160ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80160b0:	4b03      	ldr	r3, [pc, #12]	; (80160c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80160b2:	681b      	ldr	r3, [r3, #0]
}
 80160b4:	4618      	mov	r0, r3
 80160b6:	46bd      	mov	sp, r7
 80160b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160bc:	4770      	bx	lr
 80160be:	bf00      	nop
 80160c0:	20000008 	.word	0x20000008

080160c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80160c4:	b580      	push	{r7, lr}
 80160c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80160c8:	f7ff fff0 	bl	80160ac <HAL_RCC_GetHCLKFreq>
 80160cc:	4602      	mov	r2, r0
 80160ce:	4b05      	ldr	r3, [pc, #20]	; (80160e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80160d0:	689b      	ldr	r3, [r3, #8]
 80160d2:	0a9b      	lsrs	r3, r3, #10
 80160d4:	f003 0307 	and.w	r3, r3, #7
 80160d8:	4903      	ldr	r1, [pc, #12]	; (80160e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80160da:	5ccb      	ldrb	r3, [r1, r3]
 80160dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80160e0:	4618      	mov	r0, r3
 80160e2:	bd80      	pop	{r7, pc}
 80160e4:	40023800 	.word	0x40023800
 80160e8:	0802ff5c 	.word	0x0802ff5c

080160ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80160ec:	b580      	push	{r7, lr}
 80160ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80160f0:	f7ff ffdc 	bl	80160ac <HAL_RCC_GetHCLKFreq>
 80160f4:	4602      	mov	r2, r0
 80160f6:	4b05      	ldr	r3, [pc, #20]	; (801610c <HAL_RCC_GetPCLK2Freq+0x20>)
 80160f8:	689b      	ldr	r3, [r3, #8]
 80160fa:	0b5b      	lsrs	r3, r3, #13
 80160fc:	f003 0307 	and.w	r3, r3, #7
 8016100:	4903      	ldr	r1, [pc, #12]	; (8016110 <HAL_RCC_GetPCLK2Freq+0x24>)
 8016102:	5ccb      	ldrb	r3, [r1, r3]
 8016104:	fa22 f303 	lsr.w	r3, r2, r3
}
 8016108:	4618      	mov	r0, r3
 801610a:	bd80      	pop	{r7, pc}
 801610c:	40023800 	.word	0x40023800
 8016110:	0802ff5c 	.word	0x0802ff5c

08016114 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8016114:	b480      	push	{r7}
 8016116:	b083      	sub	sp, #12
 8016118:	af00      	add	r7, sp, #0
 801611a:	6078      	str	r0, [r7, #4]
 801611c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 801611e:	687b      	ldr	r3, [r7, #4]
 8016120:	220f      	movs	r2, #15
 8016122:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8016124:	4b12      	ldr	r3, [pc, #72]	; (8016170 <HAL_RCC_GetClockConfig+0x5c>)
 8016126:	689b      	ldr	r3, [r3, #8]
 8016128:	f003 0203 	and.w	r2, r3, #3
 801612c:	687b      	ldr	r3, [r7, #4]
 801612e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8016130:	4b0f      	ldr	r3, [pc, #60]	; (8016170 <HAL_RCC_GetClockConfig+0x5c>)
 8016132:	689b      	ldr	r3, [r3, #8]
 8016134:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8016138:	687b      	ldr	r3, [r7, #4]
 801613a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 801613c:	4b0c      	ldr	r3, [pc, #48]	; (8016170 <HAL_RCC_GetClockConfig+0x5c>)
 801613e:	689b      	ldr	r3, [r3, #8]
 8016140:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8016144:	687b      	ldr	r3, [r7, #4]
 8016146:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8016148:	4b09      	ldr	r3, [pc, #36]	; (8016170 <HAL_RCC_GetClockConfig+0x5c>)
 801614a:	689b      	ldr	r3, [r3, #8]
 801614c:	08db      	lsrs	r3, r3, #3
 801614e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8016152:	687b      	ldr	r3, [r7, #4]
 8016154:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8016156:	4b07      	ldr	r3, [pc, #28]	; (8016174 <HAL_RCC_GetClockConfig+0x60>)
 8016158:	681b      	ldr	r3, [r3, #0]
 801615a:	f003 0207 	and.w	r2, r3, #7
 801615e:	683b      	ldr	r3, [r7, #0]
 8016160:	601a      	str	r2, [r3, #0]
}
 8016162:	bf00      	nop
 8016164:	370c      	adds	r7, #12
 8016166:	46bd      	mov	sp, r7
 8016168:	f85d 7b04 	ldr.w	r7, [sp], #4
 801616c:	4770      	bx	lr
 801616e:	bf00      	nop
 8016170:	40023800 	.word	0x40023800
 8016174:	40023c00 	.word	0x40023c00

08016178 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8016178:	b580      	push	{r7, lr}
 801617a:	b086      	sub	sp, #24
 801617c:	af00      	add	r7, sp, #0
 801617e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8016180:	2300      	movs	r3, #0
 8016182:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8016184:	2300      	movs	r3, #0
 8016186:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8016188:	687b      	ldr	r3, [r7, #4]
 801618a:	681b      	ldr	r3, [r3, #0]
 801618c:	f003 0301 	and.w	r3, r3, #1
 8016190:	2b00      	cmp	r3, #0
 8016192:	d105      	bne.n	80161a0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8016194:	687b      	ldr	r3, [r7, #4]
 8016196:	681b      	ldr	r3, [r3, #0]
 8016198:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 801619c:	2b00      	cmp	r3, #0
 801619e:	d035      	beq.n	801620c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80161a0:	4b62      	ldr	r3, [pc, #392]	; (801632c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80161a2:	2200      	movs	r2, #0
 80161a4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80161a6:	f7fc fe83 	bl	8012eb0 <HAL_GetTick>
 80161aa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80161ac:	e008      	b.n	80161c0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80161ae:	f7fc fe7f 	bl	8012eb0 <HAL_GetTick>
 80161b2:	4602      	mov	r2, r0
 80161b4:	697b      	ldr	r3, [r7, #20]
 80161b6:	1ad3      	subs	r3, r2, r3
 80161b8:	2b02      	cmp	r3, #2
 80161ba:	d901      	bls.n	80161c0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80161bc:	2303      	movs	r3, #3
 80161be:	e0b0      	b.n	8016322 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80161c0:	4b5b      	ldr	r3, [pc, #364]	; (8016330 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80161c2:	681b      	ldr	r3, [r3, #0]
 80161c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80161c8:	2b00      	cmp	r3, #0
 80161ca:	d1f0      	bne.n	80161ae <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80161cc:	687b      	ldr	r3, [r7, #4]
 80161ce:	685b      	ldr	r3, [r3, #4]
 80161d0:	019a      	lsls	r2, r3, #6
 80161d2:	687b      	ldr	r3, [r7, #4]
 80161d4:	689b      	ldr	r3, [r3, #8]
 80161d6:	071b      	lsls	r3, r3, #28
 80161d8:	4955      	ldr	r1, [pc, #340]	; (8016330 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80161da:	4313      	orrs	r3, r2
 80161dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80161e0:	4b52      	ldr	r3, [pc, #328]	; (801632c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80161e2:	2201      	movs	r2, #1
 80161e4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80161e6:	f7fc fe63 	bl	8012eb0 <HAL_GetTick>
 80161ea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80161ec:	e008      	b.n	8016200 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80161ee:	f7fc fe5f 	bl	8012eb0 <HAL_GetTick>
 80161f2:	4602      	mov	r2, r0
 80161f4:	697b      	ldr	r3, [r7, #20]
 80161f6:	1ad3      	subs	r3, r2, r3
 80161f8:	2b02      	cmp	r3, #2
 80161fa:	d901      	bls.n	8016200 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80161fc:	2303      	movs	r3, #3
 80161fe:	e090      	b.n	8016322 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8016200:	4b4b      	ldr	r3, [pc, #300]	; (8016330 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8016202:	681b      	ldr	r3, [r3, #0]
 8016204:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8016208:	2b00      	cmp	r3, #0
 801620a:	d0f0      	beq.n	80161ee <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 801620c:	687b      	ldr	r3, [r7, #4]
 801620e:	681b      	ldr	r3, [r3, #0]
 8016210:	f003 0302 	and.w	r3, r3, #2
 8016214:	2b00      	cmp	r3, #0
 8016216:	f000 8083 	beq.w	8016320 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 801621a:	2300      	movs	r3, #0
 801621c:	60fb      	str	r3, [r7, #12]
 801621e:	4b44      	ldr	r3, [pc, #272]	; (8016330 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8016220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016222:	4a43      	ldr	r2, [pc, #268]	; (8016330 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8016224:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8016228:	6413      	str	r3, [r2, #64]	; 0x40
 801622a:	4b41      	ldr	r3, [pc, #260]	; (8016330 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 801622c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801622e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8016232:	60fb      	str	r3, [r7, #12]
 8016234:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8016236:	4b3f      	ldr	r3, [pc, #252]	; (8016334 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8016238:	681b      	ldr	r3, [r3, #0]
 801623a:	4a3e      	ldr	r2, [pc, #248]	; (8016334 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 801623c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8016240:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8016242:	f7fc fe35 	bl	8012eb0 <HAL_GetTick>
 8016246:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8016248:	e008      	b.n	801625c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 801624a:	f7fc fe31 	bl	8012eb0 <HAL_GetTick>
 801624e:	4602      	mov	r2, r0
 8016250:	697b      	ldr	r3, [r7, #20]
 8016252:	1ad3      	subs	r3, r2, r3
 8016254:	2b02      	cmp	r3, #2
 8016256:	d901      	bls.n	801625c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8016258:	2303      	movs	r3, #3
 801625a:	e062      	b.n	8016322 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 801625c:	4b35      	ldr	r3, [pc, #212]	; (8016334 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 801625e:	681b      	ldr	r3, [r3, #0]
 8016260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016264:	2b00      	cmp	r3, #0
 8016266:	d0f0      	beq.n	801624a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8016268:	4b31      	ldr	r3, [pc, #196]	; (8016330 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 801626a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801626c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8016270:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8016272:	693b      	ldr	r3, [r7, #16]
 8016274:	2b00      	cmp	r3, #0
 8016276:	d02f      	beq.n	80162d8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8016278:	687b      	ldr	r3, [r7, #4]
 801627a:	68db      	ldr	r3, [r3, #12]
 801627c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8016280:	693a      	ldr	r2, [r7, #16]
 8016282:	429a      	cmp	r2, r3
 8016284:	d028      	beq.n	80162d8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8016286:	4b2a      	ldr	r3, [pc, #168]	; (8016330 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8016288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801628a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801628e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8016290:	4b29      	ldr	r3, [pc, #164]	; (8016338 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8016292:	2201      	movs	r2, #1
 8016294:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8016296:	4b28      	ldr	r3, [pc, #160]	; (8016338 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8016298:	2200      	movs	r2, #0
 801629a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 801629c:	4a24      	ldr	r2, [pc, #144]	; (8016330 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 801629e:	693b      	ldr	r3, [r7, #16]
 80162a0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80162a2:	4b23      	ldr	r3, [pc, #140]	; (8016330 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80162a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80162a6:	f003 0301 	and.w	r3, r3, #1
 80162aa:	2b01      	cmp	r3, #1
 80162ac:	d114      	bne.n	80162d8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80162ae:	f7fc fdff 	bl	8012eb0 <HAL_GetTick>
 80162b2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80162b4:	e00a      	b.n	80162cc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80162b6:	f7fc fdfb 	bl	8012eb0 <HAL_GetTick>
 80162ba:	4602      	mov	r2, r0
 80162bc:	697b      	ldr	r3, [r7, #20]
 80162be:	1ad3      	subs	r3, r2, r3
 80162c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80162c4:	4293      	cmp	r3, r2
 80162c6:	d901      	bls.n	80162cc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80162c8:	2303      	movs	r3, #3
 80162ca:	e02a      	b.n	8016322 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80162cc:	4b18      	ldr	r3, [pc, #96]	; (8016330 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80162ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80162d0:	f003 0302 	and.w	r3, r3, #2
 80162d4:	2b00      	cmp	r3, #0
 80162d6:	d0ee      	beq.n	80162b6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80162d8:	687b      	ldr	r3, [r7, #4]
 80162da:	68db      	ldr	r3, [r3, #12]
 80162dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80162e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80162e4:	d10d      	bne.n	8016302 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80162e6:	4b12      	ldr	r3, [pc, #72]	; (8016330 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80162e8:	689b      	ldr	r3, [r3, #8]
 80162ea:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80162ee:	687b      	ldr	r3, [r7, #4]
 80162f0:	68db      	ldr	r3, [r3, #12]
 80162f2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80162f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80162fa:	490d      	ldr	r1, [pc, #52]	; (8016330 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80162fc:	4313      	orrs	r3, r2
 80162fe:	608b      	str	r3, [r1, #8]
 8016300:	e005      	b.n	801630e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8016302:	4b0b      	ldr	r3, [pc, #44]	; (8016330 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8016304:	689b      	ldr	r3, [r3, #8]
 8016306:	4a0a      	ldr	r2, [pc, #40]	; (8016330 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8016308:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 801630c:	6093      	str	r3, [r2, #8]
 801630e:	4b08      	ldr	r3, [pc, #32]	; (8016330 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8016310:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8016312:	687b      	ldr	r3, [r7, #4]
 8016314:	68db      	ldr	r3, [r3, #12]
 8016316:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801631a:	4905      	ldr	r1, [pc, #20]	; (8016330 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 801631c:	4313      	orrs	r3, r2
 801631e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8016320:	2300      	movs	r3, #0
}
 8016322:	4618      	mov	r0, r3
 8016324:	3718      	adds	r7, #24
 8016326:	46bd      	mov	sp, r7
 8016328:	bd80      	pop	{r7, pc}
 801632a:	bf00      	nop
 801632c:	42470068 	.word	0x42470068
 8016330:	40023800 	.word	0x40023800
 8016334:	40007000 	.word	0x40007000
 8016338:	42470e40 	.word	0x42470e40

0801633c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 801633c:	b580      	push	{r7, lr}
 801633e:	b084      	sub	sp, #16
 8016340:	af00      	add	r7, sp, #0
 8016342:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8016344:	2301      	movs	r3, #1
 8016346:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8016348:	687b      	ldr	r3, [r7, #4]
 801634a:	2b00      	cmp	r3, #0
 801634c:	d101      	bne.n	8016352 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 801634e:	2301      	movs	r3, #1
 8016350:	e066      	b.n	8016420 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8016352:	687b      	ldr	r3, [r7, #4]
 8016354:	7f5b      	ldrb	r3, [r3, #29]
 8016356:	b2db      	uxtb	r3, r3
 8016358:	2b00      	cmp	r3, #0
 801635a:	d105      	bne.n	8016368 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 801635c:	687b      	ldr	r3, [r7, #4]
 801635e:	2200      	movs	r2, #0
 8016360:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8016362:	6878      	ldr	r0, [r7, #4]
 8016364:	f7fc f99c 	bl	80126a0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8016368:	687b      	ldr	r3, [r7, #4]
 801636a:	2202      	movs	r2, #2
 801636c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801636e:	687b      	ldr	r3, [r7, #4]
 8016370:	681b      	ldr	r3, [r3, #0]
 8016372:	22ca      	movs	r2, #202	; 0xca
 8016374:	625a      	str	r2, [r3, #36]	; 0x24
 8016376:	687b      	ldr	r3, [r7, #4]
 8016378:	681b      	ldr	r3, [r3, #0]
 801637a:	2253      	movs	r2, #83	; 0x53
 801637c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 801637e:	6878      	ldr	r0, [r7, #4]
 8016380:	f000 fa45 	bl	801680e <RTC_EnterInitMode>
 8016384:	4603      	mov	r3, r0
 8016386:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8016388:	7bfb      	ldrb	r3, [r7, #15]
 801638a:	2b00      	cmp	r3, #0
 801638c:	d12c      	bne.n	80163e8 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 801638e:	687b      	ldr	r3, [r7, #4]
 8016390:	681b      	ldr	r3, [r3, #0]
 8016392:	689b      	ldr	r3, [r3, #8]
 8016394:	687a      	ldr	r2, [r7, #4]
 8016396:	6812      	ldr	r2, [r2, #0]
 8016398:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801639c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80163a0:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80163a2:	687b      	ldr	r3, [r7, #4]
 80163a4:	681b      	ldr	r3, [r3, #0]
 80163a6:	6899      	ldr	r1, [r3, #8]
 80163a8:	687b      	ldr	r3, [r7, #4]
 80163aa:	685a      	ldr	r2, [r3, #4]
 80163ac:	687b      	ldr	r3, [r7, #4]
 80163ae:	691b      	ldr	r3, [r3, #16]
 80163b0:	431a      	orrs	r2, r3
 80163b2:	687b      	ldr	r3, [r7, #4]
 80163b4:	695b      	ldr	r3, [r3, #20]
 80163b6:	431a      	orrs	r2, r3
 80163b8:	687b      	ldr	r3, [r7, #4]
 80163ba:	681b      	ldr	r3, [r3, #0]
 80163bc:	430a      	orrs	r2, r1
 80163be:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80163c0:	687b      	ldr	r3, [r7, #4]
 80163c2:	681b      	ldr	r3, [r3, #0]
 80163c4:	687a      	ldr	r2, [r7, #4]
 80163c6:	68d2      	ldr	r2, [r2, #12]
 80163c8:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80163ca:	687b      	ldr	r3, [r7, #4]
 80163cc:	681b      	ldr	r3, [r3, #0]
 80163ce:	6919      	ldr	r1, [r3, #16]
 80163d0:	687b      	ldr	r3, [r7, #4]
 80163d2:	689b      	ldr	r3, [r3, #8]
 80163d4:	041a      	lsls	r2, r3, #16
 80163d6:	687b      	ldr	r3, [r7, #4]
 80163d8:	681b      	ldr	r3, [r3, #0]
 80163da:	430a      	orrs	r2, r1
 80163dc:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80163de:	6878      	ldr	r0, [r7, #4]
 80163e0:	f000 fa4c 	bl	801687c <RTC_ExitInitMode>
 80163e4:	4603      	mov	r3, r0
 80163e6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80163e8:	7bfb      	ldrb	r3, [r7, #15]
 80163ea:	2b00      	cmp	r3, #0
 80163ec:	d113      	bne.n	8016416 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80163ee:	687b      	ldr	r3, [r7, #4]
 80163f0:	681b      	ldr	r3, [r3, #0]
 80163f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80163f4:	687b      	ldr	r3, [r7, #4]
 80163f6:	681b      	ldr	r3, [r3, #0]
 80163f8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80163fc:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80163fe:	687b      	ldr	r3, [r7, #4]
 8016400:	681b      	ldr	r3, [r3, #0]
 8016402:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8016404:	687b      	ldr	r3, [r7, #4]
 8016406:	699a      	ldr	r2, [r3, #24]
 8016408:	687b      	ldr	r3, [r7, #4]
 801640a:	681b      	ldr	r3, [r3, #0]
 801640c:	430a      	orrs	r2, r1
 801640e:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8016410:	687b      	ldr	r3, [r7, #4]
 8016412:	2201      	movs	r2, #1
 8016414:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8016416:	687b      	ldr	r3, [r7, #4]
 8016418:	681b      	ldr	r3, [r3, #0]
 801641a:	22ff      	movs	r2, #255	; 0xff
 801641c:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 801641e:	7bfb      	ldrb	r3, [r7, #15]
}
 8016420:	4618      	mov	r0, r3
 8016422:	3710      	adds	r7, #16
 8016424:	46bd      	mov	sp, r7
 8016426:	bd80      	pop	{r7, pc}

08016428 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8016428:	b590      	push	{r4, r7, lr}
 801642a:	b087      	sub	sp, #28
 801642c:	af00      	add	r7, sp, #0
 801642e:	60f8      	str	r0, [r7, #12]
 8016430:	60b9      	str	r1, [r7, #8]
 8016432:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8016434:	2300      	movs	r3, #0
 8016436:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8016438:	68fb      	ldr	r3, [r7, #12]
 801643a:	7f1b      	ldrb	r3, [r3, #28]
 801643c:	2b01      	cmp	r3, #1
 801643e:	d101      	bne.n	8016444 <HAL_RTC_SetTime+0x1c>
 8016440:	2302      	movs	r3, #2
 8016442:	e087      	b.n	8016554 <HAL_RTC_SetTime+0x12c>
 8016444:	68fb      	ldr	r3, [r7, #12]
 8016446:	2201      	movs	r2, #1
 8016448:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801644a:	68fb      	ldr	r3, [r7, #12]
 801644c:	2202      	movs	r2, #2
 801644e:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8016450:	687b      	ldr	r3, [r7, #4]
 8016452:	2b00      	cmp	r3, #0
 8016454:	d126      	bne.n	80164a4 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8016456:	68fb      	ldr	r3, [r7, #12]
 8016458:	681b      	ldr	r3, [r3, #0]
 801645a:	689b      	ldr	r3, [r3, #8]
 801645c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016460:	2b00      	cmp	r3, #0
 8016462:	d102      	bne.n	801646a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8016464:	68bb      	ldr	r3, [r7, #8]
 8016466:	2200      	movs	r2, #0
 8016468:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801646a:	68bb      	ldr	r3, [r7, #8]
 801646c:	781b      	ldrb	r3, [r3, #0]
 801646e:	4618      	mov	r0, r3
 8016470:	f000 fa29 	bl	80168c6 <RTC_ByteToBcd2>
 8016474:	4603      	mov	r3, r0
 8016476:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8016478:	68bb      	ldr	r3, [r7, #8]
 801647a:	785b      	ldrb	r3, [r3, #1]
 801647c:	4618      	mov	r0, r3
 801647e:	f000 fa22 	bl	80168c6 <RTC_ByteToBcd2>
 8016482:	4603      	mov	r3, r0
 8016484:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8016486:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8016488:	68bb      	ldr	r3, [r7, #8]
 801648a:	789b      	ldrb	r3, [r3, #2]
 801648c:	4618      	mov	r0, r3
 801648e:	f000 fa1a 	bl	80168c6 <RTC_ByteToBcd2>
 8016492:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8016494:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8016498:	68bb      	ldr	r3, [r7, #8]
 801649a:	78db      	ldrb	r3, [r3, #3]
 801649c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801649e:	4313      	orrs	r3, r2
 80164a0:	617b      	str	r3, [r7, #20]
 80164a2:	e018      	b.n	80164d6 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80164a4:	68fb      	ldr	r3, [r7, #12]
 80164a6:	681b      	ldr	r3, [r3, #0]
 80164a8:	689b      	ldr	r3, [r3, #8]
 80164aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80164ae:	2b00      	cmp	r3, #0
 80164b0:	d102      	bne.n	80164b8 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80164b2:	68bb      	ldr	r3, [r7, #8]
 80164b4:	2200      	movs	r2, #0
 80164b6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80164b8:	68bb      	ldr	r3, [r7, #8]
 80164ba:	781b      	ldrb	r3, [r3, #0]
 80164bc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80164be:	68bb      	ldr	r3, [r7, #8]
 80164c0:	785b      	ldrb	r3, [r3, #1]
 80164c2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80164c4:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80164c6:	68ba      	ldr	r2, [r7, #8]
 80164c8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80164ca:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80164cc:	68bb      	ldr	r3, [r7, #8]
 80164ce:	78db      	ldrb	r3, [r3, #3]
 80164d0:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80164d2:	4313      	orrs	r3, r2
 80164d4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80164d6:	68fb      	ldr	r3, [r7, #12]
 80164d8:	681b      	ldr	r3, [r3, #0]
 80164da:	22ca      	movs	r2, #202	; 0xca
 80164dc:	625a      	str	r2, [r3, #36]	; 0x24
 80164de:	68fb      	ldr	r3, [r7, #12]
 80164e0:	681b      	ldr	r3, [r3, #0]
 80164e2:	2253      	movs	r2, #83	; 0x53
 80164e4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80164e6:	68f8      	ldr	r0, [r7, #12]
 80164e8:	f000 f991 	bl	801680e <RTC_EnterInitMode>
 80164ec:	4603      	mov	r3, r0
 80164ee:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80164f0:	7cfb      	ldrb	r3, [r7, #19]
 80164f2:	2b00      	cmp	r3, #0
 80164f4:	d120      	bne.n	8016538 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80164f6:	68fb      	ldr	r3, [r7, #12]
 80164f8:	681a      	ldr	r2, [r3, #0]
 80164fa:	697b      	ldr	r3, [r7, #20]
 80164fc:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8016500:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8016504:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8016506:	68fb      	ldr	r3, [r7, #12]
 8016508:	681b      	ldr	r3, [r3, #0]
 801650a:	689a      	ldr	r2, [r3, #8]
 801650c:	68fb      	ldr	r3, [r7, #12]
 801650e:	681b      	ldr	r3, [r3, #0]
 8016510:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8016514:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8016516:	68fb      	ldr	r3, [r7, #12]
 8016518:	681b      	ldr	r3, [r3, #0]
 801651a:	6899      	ldr	r1, [r3, #8]
 801651c:	68bb      	ldr	r3, [r7, #8]
 801651e:	68da      	ldr	r2, [r3, #12]
 8016520:	68bb      	ldr	r3, [r7, #8]
 8016522:	691b      	ldr	r3, [r3, #16]
 8016524:	431a      	orrs	r2, r3
 8016526:	68fb      	ldr	r3, [r7, #12]
 8016528:	681b      	ldr	r3, [r3, #0]
 801652a:	430a      	orrs	r2, r1
 801652c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 801652e:	68f8      	ldr	r0, [r7, #12]
 8016530:	f000 f9a4 	bl	801687c <RTC_ExitInitMode>
 8016534:	4603      	mov	r3, r0
 8016536:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8016538:	7cfb      	ldrb	r3, [r7, #19]
 801653a:	2b00      	cmp	r3, #0
 801653c:	d102      	bne.n	8016544 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801653e:	68fb      	ldr	r3, [r7, #12]
 8016540:	2201      	movs	r2, #1
 8016542:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8016544:	68fb      	ldr	r3, [r7, #12]
 8016546:	681b      	ldr	r3, [r3, #0]
 8016548:	22ff      	movs	r2, #255	; 0xff
 801654a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801654c:	68fb      	ldr	r3, [r7, #12]
 801654e:	2200      	movs	r2, #0
 8016550:	771a      	strb	r2, [r3, #28]

  return status;
 8016552:	7cfb      	ldrb	r3, [r7, #19]
}
 8016554:	4618      	mov	r0, r3
 8016556:	371c      	adds	r7, #28
 8016558:	46bd      	mov	sp, r7
 801655a:	bd90      	pop	{r4, r7, pc}

0801655c <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 801655c:	b580      	push	{r7, lr}
 801655e:	b086      	sub	sp, #24
 8016560:	af00      	add	r7, sp, #0
 8016562:	60f8      	str	r0, [r7, #12]
 8016564:	60b9      	str	r1, [r7, #8]
 8016566:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8016568:	2300      	movs	r3, #0
 801656a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 801656c:	68fb      	ldr	r3, [r7, #12]
 801656e:	681b      	ldr	r3, [r3, #0]
 8016570:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8016572:	68bb      	ldr	r3, [r7, #8]
 8016574:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8016576:	68fb      	ldr	r3, [r7, #12]
 8016578:	681b      	ldr	r3, [r3, #0]
 801657a:	691b      	ldr	r3, [r3, #16]
 801657c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8016580:	68bb      	ldr	r3, [r7, #8]
 8016582:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8016584:	68fb      	ldr	r3, [r7, #12]
 8016586:	681b      	ldr	r3, [r3, #0]
 8016588:	681b      	ldr	r3, [r3, #0]
 801658a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 801658e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8016592:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8016594:	697b      	ldr	r3, [r7, #20]
 8016596:	0c1b      	lsrs	r3, r3, #16
 8016598:	b2db      	uxtb	r3, r3
 801659a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801659e:	b2da      	uxtb	r2, r3
 80165a0:	68bb      	ldr	r3, [r7, #8]
 80165a2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80165a4:	697b      	ldr	r3, [r7, #20]
 80165a6:	0a1b      	lsrs	r3, r3, #8
 80165a8:	b2db      	uxtb	r3, r3
 80165aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80165ae:	b2da      	uxtb	r2, r3
 80165b0:	68bb      	ldr	r3, [r7, #8]
 80165b2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80165b4:	697b      	ldr	r3, [r7, #20]
 80165b6:	b2db      	uxtb	r3, r3
 80165b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80165bc:	b2da      	uxtb	r2, r3
 80165be:	68bb      	ldr	r3, [r7, #8]
 80165c0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80165c2:	697b      	ldr	r3, [r7, #20]
 80165c4:	0d9b      	lsrs	r3, r3, #22
 80165c6:	b2db      	uxtb	r3, r3
 80165c8:	f003 0301 	and.w	r3, r3, #1
 80165cc:	b2da      	uxtb	r2, r3
 80165ce:	68bb      	ldr	r3, [r7, #8]
 80165d0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80165d2:	687b      	ldr	r3, [r7, #4]
 80165d4:	2b00      	cmp	r3, #0
 80165d6:	d11a      	bne.n	801660e <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80165d8:	68bb      	ldr	r3, [r7, #8]
 80165da:	781b      	ldrb	r3, [r3, #0]
 80165dc:	4618      	mov	r0, r3
 80165de:	f000 f98f 	bl	8016900 <RTC_Bcd2ToByte>
 80165e2:	4603      	mov	r3, r0
 80165e4:	461a      	mov	r2, r3
 80165e6:	68bb      	ldr	r3, [r7, #8]
 80165e8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80165ea:	68bb      	ldr	r3, [r7, #8]
 80165ec:	785b      	ldrb	r3, [r3, #1]
 80165ee:	4618      	mov	r0, r3
 80165f0:	f000 f986 	bl	8016900 <RTC_Bcd2ToByte>
 80165f4:	4603      	mov	r3, r0
 80165f6:	461a      	mov	r2, r3
 80165f8:	68bb      	ldr	r3, [r7, #8]
 80165fa:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80165fc:	68bb      	ldr	r3, [r7, #8]
 80165fe:	789b      	ldrb	r3, [r3, #2]
 8016600:	4618      	mov	r0, r3
 8016602:	f000 f97d 	bl	8016900 <RTC_Bcd2ToByte>
 8016606:	4603      	mov	r3, r0
 8016608:	461a      	mov	r2, r3
 801660a:	68bb      	ldr	r3, [r7, #8]
 801660c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 801660e:	2300      	movs	r3, #0
}
 8016610:	4618      	mov	r0, r3
 8016612:	3718      	adds	r7, #24
 8016614:	46bd      	mov	sp, r7
 8016616:	bd80      	pop	{r7, pc}

08016618 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8016618:	b590      	push	{r4, r7, lr}
 801661a:	b087      	sub	sp, #28
 801661c:	af00      	add	r7, sp, #0
 801661e:	60f8      	str	r0, [r7, #12]
 8016620:	60b9      	str	r1, [r7, #8]
 8016622:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8016624:	2300      	movs	r3, #0
 8016626:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8016628:	68fb      	ldr	r3, [r7, #12]
 801662a:	7f1b      	ldrb	r3, [r3, #28]
 801662c:	2b01      	cmp	r3, #1
 801662e:	d101      	bne.n	8016634 <HAL_RTC_SetDate+0x1c>
 8016630:	2302      	movs	r3, #2
 8016632:	e071      	b.n	8016718 <HAL_RTC_SetDate+0x100>
 8016634:	68fb      	ldr	r3, [r7, #12]
 8016636:	2201      	movs	r2, #1
 8016638:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801663a:	68fb      	ldr	r3, [r7, #12]
 801663c:	2202      	movs	r2, #2
 801663e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8016640:	687b      	ldr	r3, [r7, #4]
 8016642:	2b00      	cmp	r3, #0
 8016644:	d10e      	bne.n	8016664 <HAL_RTC_SetDate+0x4c>
 8016646:	68bb      	ldr	r3, [r7, #8]
 8016648:	785b      	ldrb	r3, [r3, #1]
 801664a:	f003 0310 	and.w	r3, r3, #16
 801664e:	2b00      	cmp	r3, #0
 8016650:	d008      	beq.n	8016664 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8016652:	68bb      	ldr	r3, [r7, #8]
 8016654:	785b      	ldrb	r3, [r3, #1]
 8016656:	f023 0310 	bic.w	r3, r3, #16
 801665a:	b2db      	uxtb	r3, r3
 801665c:	330a      	adds	r3, #10
 801665e:	b2da      	uxtb	r2, r3
 8016660:	68bb      	ldr	r3, [r7, #8]
 8016662:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8016664:	687b      	ldr	r3, [r7, #4]
 8016666:	2b00      	cmp	r3, #0
 8016668:	d11c      	bne.n	80166a4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 801666a:	68bb      	ldr	r3, [r7, #8]
 801666c:	78db      	ldrb	r3, [r3, #3]
 801666e:	4618      	mov	r0, r3
 8016670:	f000 f929 	bl	80168c6 <RTC_ByteToBcd2>
 8016674:	4603      	mov	r3, r0
 8016676:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8016678:	68bb      	ldr	r3, [r7, #8]
 801667a:	785b      	ldrb	r3, [r3, #1]
 801667c:	4618      	mov	r0, r3
 801667e:	f000 f922 	bl	80168c6 <RTC_ByteToBcd2>
 8016682:	4603      	mov	r3, r0
 8016684:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8016686:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8016688:	68bb      	ldr	r3, [r7, #8]
 801668a:	789b      	ldrb	r3, [r3, #2]
 801668c:	4618      	mov	r0, r3
 801668e:	f000 f91a 	bl	80168c6 <RTC_ByteToBcd2>
 8016692:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8016694:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8016698:	68bb      	ldr	r3, [r7, #8]
 801669a:	781b      	ldrb	r3, [r3, #0]
 801669c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 801669e:	4313      	orrs	r3, r2
 80166a0:	617b      	str	r3, [r7, #20]
 80166a2:	e00e      	b.n	80166c2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80166a4:	68bb      	ldr	r3, [r7, #8]
 80166a6:	78db      	ldrb	r3, [r3, #3]
 80166a8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80166aa:	68bb      	ldr	r3, [r7, #8]
 80166ac:	785b      	ldrb	r3, [r3, #1]
 80166ae:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80166b0:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80166b2:	68ba      	ldr	r2, [r7, #8]
 80166b4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80166b6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80166b8:	68bb      	ldr	r3, [r7, #8]
 80166ba:	781b      	ldrb	r3, [r3, #0]
 80166bc:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80166be:	4313      	orrs	r3, r2
 80166c0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80166c2:	68fb      	ldr	r3, [r7, #12]
 80166c4:	681b      	ldr	r3, [r3, #0]
 80166c6:	22ca      	movs	r2, #202	; 0xca
 80166c8:	625a      	str	r2, [r3, #36]	; 0x24
 80166ca:	68fb      	ldr	r3, [r7, #12]
 80166cc:	681b      	ldr	r3, [r3, #0]
 80166ce:	2253      	movs	r2, #83	; 0x53
 80166d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80166d2:	68f8      	ldr	r0, [r7, #12]
 80166d4:	f000 f89b 	bl	801680e <RTC_EnterInitMode>
 80166d8:	4603      	mov	r3, r0
 80166da:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80166dc:	7cfb      	ldrb	r3, [r7, #19]
 80166de:	2b00      	cmp	r3, #0
 80166e0:	d10c      	bne.n	80166fc <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80166e2:	68fb      	ldr	r3, [r7, #12]
 80166e4:	681a      	ldr	r2, [r3, #0]
 80166e6:	697b      	ldr	r3, [r7, #20]
 80166e8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80166ec:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80166f0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80166f2:	68f8      	ldr	r0, [r7, #12]
 80166f4:	f000 f8c2 	bl	801687c <RTC_ExitInitMode>
 80166f8:	4603      	mov	r3, r0
 80166fa:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80166fc:	7cfb      	ldrb	r3, [r7, #19]
 80166fe:	2b00      	cmp	r3, #0
 8016700:	d102      	bne.n	8016708 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8016702:	68fb      	ldr	r3, [r7, #12]
 8016704:	2201      	movs	r2, #1
 8016706:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8016708:	68fb      	ldr	r3, [r7, #12]
 801670a:	681b      	ldr	r3, [r3, #0]
 801670c:	22ff      	movs	r2, #255	; 0xff
 801670e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8016710:	68fb      	ldr	r3, [r7, #12]
 8016712:	2200      	movs	r2, #0
 8016714:	771a      	strb	r2, [r3, #28]

  return status;
 8016716:	7cfb      	ldrb	r3, [r7, #19]
}
 8016718:	4618      	mov	r0, r3
 801671a:	371c      	adds	r7, #28
 801671c:	46bd      	mov	sp, r7
 801671e:	bd90      	pop	{r4, r7, pc}

08016720 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8016720:	b580      	push	{r7, lr}
 8016722:	b086      	sub	sp, #24
 8016724:	af00      	add	r7, sp, #0
 8016726:	60f8      	str	r0, [r7, #12]
 8016728:	60b9      	str	r1, [r7, #8]
 801672a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 801672c:	2300      	movs	r3, #0
 801672e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8016730:	68fb      	ldr	r3, [r7, #12]
 8016732:	681b      	ldr	r3, [r3, #0]
 8016734:	685b      	ldr	r3, [r3, #4]
 8016736:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801673a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 801673e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8016740:	697b      	ldr	r3, [r7, #20]
 8016742:	0c1b      	lsrs	r3, r3, #16
 8016744:	b2da      	uxtb	r2, r3
 8016746:	68bb      	ldr	r3, [r7, #8]
 8016748:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 801674a:	697b      	ldr	r3, [r7, #20]
 801674c:	0a1b      	lsrs	r3, r3, #8
 801674e:	b2db      	uxtb	r3, r3
 8016750:	f003 031f 	and.w	r3, r3, #31
 8016754:	b2da      	uxtb	r2, r3
 8016756:	68bb      	ldr	r3, [r7, #8]
 8016758:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 801675a:	697b      	ldr	r3, [r7, #20]
 801675c:	b2db      	uxtb	r3, r3
 801675e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016762:	b2da      	uxtb	r2, r3
 8016764:	68bb      	ldr	r3, [r7, #8]
 8016766:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8016768:	697b      	ldr	r3, [r7, #20]
 801676a:	0b5b      	lsrs	r3, r3, #13
 801676c:	b2db      	uxtb	r3, r3
 801676e:	f003 0307 	and.w	r3, r3, #7
 8016772:	b2da      	uxtb	r2, r3
 8016774:	68bb      	ldr	r3, [r7, #8]
 8016776:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8016778:	687b      	ldr	r3, [r7, #4]
 801677a:	2b00      	cmp	r3, #0
 801677c:	d11a      	bne.n	80167b4 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 801677e:	68bb      	ldr	r3, [r7, #8]
 8016780:	78db      	ldrb	r3, [r3, #3]
 8016782:	4618      	mov	r0, r3
 8016784:	f000 f8bc 	bl	8016900 <RTC_Bcd2ToByte>
 8016788:	4603      	mov	r3, r0
 801678a:	461a      	mov	r2, r3
 801678c:	68bb      	ldr	r3, [r7, #8]
 801678e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8016790:	68bb      	ldr	r3, [r7, #8]
 8016792:	785b      	ldrb	r3, [r3, #1]
 8016794:	4618      	mov	r0, r3
 8016796:	f000 f8b3 	bl	8016900 <RTC_Bcd2ToByte>
 801679a:	4603      	mov	r3, r0
 801679c:	461a      	mov	r2, r3
 801679e:	68bb      	ldr	r3, [r7, #8]
 80167a0:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80167a2:	68bb      	ldr	r3, [r7, #8]
 80167a4:	789b      	ldrb	r3, [r3, #2]
 80167a6:	4618      	mov	r0, r3
 80167a8:	f000 f8aa 	bl	8016900 <RTC_Bcd2ToByte>
 80167ac:	4603      	mov	r3, r0
 80167ae:	461a      	mov	r2, r3
 80167b0:	68bb      	ldr	r3, [r7, #8]
 80167b2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80167b4:	2300      	movs	r3, #0
}
 80167b6:	4618      	mov	r0, r3
 80167b8:	3718      	adds	r7, #24
 80167ba:	46bd      	mov	sp, r7
 80167bc:	bd80      	pop	{r7, pc}

080167be <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80167be:	b580      	push	{r7, lr}
 80167c0:	b084      	sub	sp, #16
 80167c2:	af00      	add	r7, sp, #0
 80167c4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80167c6:	2300      	movs	r3, #0
 80167c8:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80167ca:	687b      	ldr	r3, [r7, #4]
 80167cc:	681b      	ldr	r3, [r3, #0]
 80167ce:	68da      	ldr	r2, [r3, #12]
 80167d0:	687b      	ldr	r3, [r7, #4]
 80167d2:	681b      	ldr	r3, [r3, #0]
 80167d4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80167d8:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80167da:	f7fc fb69 	bl	8012eb0 <HAL_GetTick>
 80167de:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80167e0:	e009      	b.n	80167f6 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80167e2:	f7fc fb65 	bl	8012eb0 <HAL_GetTick>
 80167e6:	4602      	mov	r2, r0
 80167e8:	68fb      	ldr	r3, [r7, #12]
 80167ea:	1ad3      	subs	r3, r2, r3
 80167ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80167f0:	d901      	bls.n	80167f6 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80167f2:	2303      	movs	r3, #3
 80167f4:	e007      	b.n	8016806 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80167f6:	687b      	ldr	r3, [r7, #4]
 80167f8:	681b      	ldr	r3, [r3, #0]
 80167fa:	68db      	ldr	r3, [r3, #12]
 80167fc:	f003 0320 	and.w	r3, r3, #32
 8016800:	2b00      	cmp	r3, #0
 8016802:	d0ee      	beq.n	80167e2 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8016804:	2300      	movs	r3, #0
}
 8016806:	4618      	mov	r0, r3
 8016808:	3710      	adds	r7, #16
 801680a:	46bd      	mov	sp, r7
 801680c:	bd80      	pop	{r7, pc}

0801680e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 801680e:	b580      	push	{r7, lr}
 8016810:	b084      	sub	sp, #16
 8016812:	af00      	add	r7, sp, #0
 8016814:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8016816:	2300      	movs	r3, #0
 8016818:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 801681a:	2300      	movs	r3, #0
 801681c:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 801681e:	687b      	ldr	r3, [r7, #4]
 8016820:	681b      	ldr	r3, [r3, #0]
 8016822:	68db      	ldr	r3, [r3, #12]
 8016824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016828:	2b00      	cmp	r3, #0
 801682a:	d122      	bne.n	8016872 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 801682c:	687b      	ldr	r3, [r7, #4]
 801682e:	681b      	ldr	r3, [r3, #0]
 8016830:	68da      	ldr	r2, [r3, #12]
 8016832:	687b      	ldr	r3, [r7, #4]
 8016834:	681b      	ldr	r3, [r3, #0]
 8016836:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801683a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 801683c:	f7fc fb38 	bl	8012eb0 <HAL_GetTick>
 8016840:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8016842:	e00c      	b.n	801685e <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8016844:	f7fc fb34 	bl	8012eb0 <HAL_GetTick>
 8016848:	4602      	mov	r2, r0
 801684a:	68bb      	ldr	r3, [r7, #8]
 801684c:	1ad3      	subs	r3, r2, r3
 801684e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8016852:	d904      	bls.n	801685e <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8016854:	687b      	ldr	r3, [r7, #4]
 8016856:	2204      	movs	r2, #4
 8016858:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 801685a:	2301      	movs	r3, #1
 801685c:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 801685e:	687b      	ldr	r3, [r7, #4]
 8016860:	681b      	ldr	r3, [r3, #0]
 8016862:	68db      	ldr	r3, [r3, #12]
 8016864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016868:	2b00      	cmp	r3, #0
 801686a:	d102      	bne.n	8016872 <RTC_EnterInitMode+0x64>
 801686c:	7bfb      	ldrb	r3, [r7, #15]
 801686e:	2b01      	cmp	r3, #1
 8016870:	d1e8      	bne.n	8016844 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8016872:	7bfb      	ldrb	r3, [r7, #15]
}
 8016874:	4618      	mov	r0, r3
 8016876:	3710      	adds	r7, #16
 8016878:	46bd      	mov	sp, r7
 801687a:	bd80      	pop	{r7, pc}

0801687c <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 801687c:	b580      	push	{r7, lr}
 801687e:	b084      	sub	sp, #16
 8016880:	af00      	add	r7, sp, #0
 8016882:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8016884:	2300      	movs	r3, #0
 8016886:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8016888:	687b      	ldr	r3, [r7, #4]
 801688a:	681b      	ldr	r3, [r3, #0]
 801688c:	68da      	ldr	r2, [r3, #12]
 801688e:	687b      	ldr	r3, [r7, #4]
 8016890:	681b      	ldr	r3, [r3, #0]
 8016892:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8016896:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8016898:	687b      	ldr	r3, [r7, #4]
 801689a:	681b      	ldr	r3, [r3, #0]
 801689c:	689b      	ldr	r3, [r3, #8]
 801689e:	f003 0320 	and.w	r3, r3, #32
 80168a2:	2b00      	cmp	r3, #0
 80168a4:	d10a      	bne.n	80168bc <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80168a6:	6878      	ldr	r0, [r7, #4]
 80168a8:	f7ff ff89 	bl	80167be <HAL_RTC_WaitForSynchro>
 80168ac:	4603      	mov	r3, r0
 80168ae:	2b00      	cmp	r3, #0
 80168b0:	d004      	beq.n	80168bc <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80168b2:	687b      	ldr	r3, [r7, #4]
 80168b4:	2204      	movs	r2, #4
 80168b6:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80168b8:	2301      	movs	r3, #1
 80168ba:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80168bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80168be:	4618      	mov	r0, r3
 80168c0:	3710      	adds	r7, #16
 80168c2:	46bd      	mov	sp, r7
 80168c4:	bd80      	pop	{r7, pc}

080168c6 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80168c6:	b480      	push	{r7}
 80168c8:	b085      	sub	sp, #20
 80168ca:	af00      	add	r7, sp, #0
 80168cc:	4603      	mov	r3, r0
 80168ce:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 80168d0:	2300      	movs	r3, #0
 80168d2:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 80168d4:	e005      	b.n	80168e2 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80168d6:	7bfb      	ldrb	r3, [r7, #15]
 80168d8:	3301      	adds	r3, #1
 80168da:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 80168dc:	79fb      	ldrb	r3, [r7, #7]
 80168de:	3b0a      	subs	r3, #10
 80168e0:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80168e2:	79fb      	ldrb	r3, [r7, #7]
 80168e4:	2b09      	cmp	r3, #9
 80168e6:	d8f6      	bhi.n	80168d6 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80168e8:	7bfb      	ldrb	r3, [r7, #15]
 80168ea:	011b      	lsls	r3, r3, #4
 80168ec:	b2da      	uxtb	r2, r3
 80168ee:	79fb      	ldrb	r3, [r7, #7]
 80168f0:	4313      	orrs	r3, r2
 80168f2:	b2db      	uxtb	r3, r3
}
 80168f4:	4618      	mov	r0, r3
 80168f6:	3714      	adds	r7, #20
 80168f8:	46bd      	mov	sp, r7
 80168fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168fe:	4770      	bx	lr

08016900 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8016900:	b480      	push	{r7}
 8016902:	b085      	sub	sp, #20
 8016904:	af00      	add	r7, sp, #0
 8016906:	4603      	mov	r3, r0
 8016908:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 801690a:	2300      	movs	r3, #0
 801690c:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 801690e:	79fb      	ldrb	r3, [r7, #7]
 8016910:	091b      	lsrs	r3, r3, #4
 8016912:	b2db      	uxtb	r3, r3
 8016914:	461a      	mov	r2, r3
 8016916:	0092      	lsls	r2, r2, #2
 8016918:	4413      	add	r3, r2
 801691a:	005b      	lsls	r3, r3, #1
 801691c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 801691e:	79fb      	ldrb	r3, [r7, #7]
 8016920:	f003 030f 	and.w	r3, r3, #15
 8016924:	b2da      	uxtb	r2, r3
 8016926:	7bfb      	ldrb	r3, [r7, #15]
 8016928:	4413      	add	r3, r2
 801692a:	b2db      	uxtb	r3, r3
}
 801692c:	4618      	mov	r0, r3
 801692e:	3714      	adds	r7, #20
 8016930:	46bd      	mov	sp, r7
 8016932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016936:	4770      	bx	lr

08016938 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8016938:	b580      	push	{r7, lr}
 801693a:	b082      	sub	sp, #8
 801693c:	af00      	add	r7, sp, #0
 801693e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8016940:	687b      	ldr	r3, [r7, #4]
 8016942:	2b00      	cmp	r3, #0
 8016944:	d101      	bne.n	801694a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8016946:	2301      	movs	r3, #1
 8016948:	e07b      	b.n	8016a42 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 801694a:	687b      	ldr	r3, [r7, #4]
 801694c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801694e:	2b00      	cmp	r3, #0
 8016950:	d108      	bne.n	8016964 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8016952:	687b      	ldr	r3, [r7, #4]
 8016954:	685b      	ldr	r3, [r3, #4]
 8016956:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801695a:	d009      	beq.n	8016970 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 801695c:	687b      	ldr	r3, [r7, #4]
 801695e:	2200      	movs	r2, #0
 8016960:	61da      	str	r2, [r3, #28]
 8016962:	e005      	b.n	8016970 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8016964:	687b      	ldr	r3, [r7, #4]
 8016966:	2200      	movs	r2, #0
 8016968:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 801696a:	687b      	ldr	r3, [r7, #4]
 801696c:	2200      	movs	r2, #0
 801696e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8016970:	687b      	ldr	r3, [r7, #4]
 8016972:	2200      	movs	r2, #0
 8016974:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8016976:	687b      	ldr	r3, [r7, #4]
 8016978:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801697c:	b2db      	uxtb	r3, r3
 801697e:	2b00      	cmp	r3, #0
 8016980:	d106      	bne.n	8016990 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8016982:	687b      	ldr	r3, [r7, #4]
 8016984:	2200      	movs	r2, #0
 8016986:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801698a:	6878      	ldr	r0, [r7, #4]
 801698c:	f7fb feb2 	bl	80126f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8016990:	687b      	ldr	r3, [r7, #4]
 8016992:	2202      	movs	r2, #2
 8016994:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8016998:	687b      	ldr	r3, [r7, #4]
 801699a:	681b      	ldr	r3, [r3, #0]
 801699c:	681a      	ldr	r2, [r3, #0]
 801699e:	687b      	ldr	r3, [r7, #4]
 80169a0:	681b      	ldr	r3, [r3, #0]
 80169a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80169a6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80169a8:	687b      	ldr	r3, [r7, #4]
 80169aa:	685b      	ldr	r3, [r3, #4]
 80169ac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80169b0:	687b      	ldr	r3, [r7, #4]
 80169b2:	689b      	ldr	r3, [r3, #8]
 80169b4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80169b8:	431a      	orrs	r2, r3
 80169ba:	687b      	ldr	r3, [r7, #4]
 80169bc:	68db      	ldr	r3, [r3, #12]
 80169be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80169c2:	431a      	orrs	r2, r3
 80169c4:	687b      	ldr	r3, [r7, #4]
 80169c6:	691b      	ldr	r3, [r3, #16]
 80169c8:	f003 0302 	and.w	r3, r3, #2
 80169cc:	431a      	orrs	r2, r3
 80169ce:	687b      	ldr	r3, [r7, #4]
 80169d0:	695b      	ldr	r3, [r3, #20]
 80169d2:	f003 0301 	and.w	r3, r3, #1
 80169d6:	431a      	orrs	r2, r3
 80169d8:	687b      	ldr	r3, [r7, #4]
 80169da:	699b      	ldr	r3, [r3, #24]
 80169dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80169e0:	431a      	orrs	r2, r3
 80169e2:	687b      	ldr	r3, [r7, #4]
 80169e4:	69db      	ldr	r3, [r3, #28]
 80169e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80169ea:	431a      	orrs	r2, r3
 80169ec:	687b      	ldr	r3, [r7, #4]
 80169ee:	6a1b      	ldr	r3, [r3, #32]
 80169f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80169f4:	ea42 0103 	orr.w	r1, r2, r3
 80169f8:	687b      	ldr	r3, [r7, #4]
 80169fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80169fc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8016a00:	687b      	ldr	r3, [r7, #4]
 8016a02:	681b      	ldr	r3, [r3, #0]
 8016a04:	430a      	orrs	r2, r1
 8016a06:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8016a08:	687b      	ldr	r3, [r7, #4]
 8016a0a:	699b      	ldr	r3, [r3, #24]
 8016a0c:	0c1b      	lsrs	r3, r3, #16
 8016a0e:	f003 0104 	and.w	r1, r3, #4
 8016a12:	687b      	ldr	r3, [r7, #4]
 8016a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016a16:	f003 0210 	and.w	r2, r3, #16
 8016a1a:	687b      	ldr	r3, [r7, #4]
 8016a1c:	681b      	ldr	r3, [r3, #0]
 8016a1e:	430a      	orrs	r2, r1
 8016a20:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8016a22:	687b      	ldr	r3, [r7, #4]
 8016a24:	681b      	ldr	r3, [r3, #0]
 8016a26:	69da      	ldr	r2, [r3, #28]
 8016a28:	687b      	ldr	r3, [r7, #4]
 8016a2a:	681b      	ldr	r3, [r3, #0]
 8016a2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8016a30:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8016a32:	687b      	ldr	r3, [r7, #4]
 8016a34:	2200      	movs	r2, #0
 8016a36:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8016a38:	687b      	ldr	r3, [r7, #4]
 8016a3a:	2201      	movs	r2, #1
 8016a3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8016a40:	2300      	movs	r3, #0
}
 8016a42:	4618      	mov	r0, r3
 8016a44:	3708      	adds	r7, #8
 8016a46:	46bd      	mov	sp, r7
 8016a48:	bd80      	pop	{r7, pc}

08016a4a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8016a4a:	b580      	push	{r7, lr}
 8016a4c:	b088      	sub	sp, #32
 8016a4e:	af00      	add	r7, sp, #0
 8016a50:	60f8      	str	r0, [r7, #12]
 8016a52:	60b9      	str	r1, [r7, #8]
 8016a54:	603b      	str	r3, [r7, #0]
 8016a56:	4613      	mov	r3, r2
 8016a58:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8016a5a:	2300      	movs	r3, #0
 8016a5c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8016a5e:	68fb      	ldr	r3, [r7, #12]
 8016a60:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8016a64:	2b01      	cmp	r3, #1
 8016a66:	d101      	bne.n	8016a6c <HAL_SPI_Transmit+0x22>
 8016a68:	2302      	movs	r3, #2
 8016a6a:	e126      	b.n	8016cba <HAL_SPI_Transmit+0x270>
 8016a6c:	68fb      	ldr	r3, [r7, #12]
 8016a6e:	2201      	movs	r2, #1
 8016a70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8016a74:	f7fc fa1c 	bl	8012eb0 <HAL_GetTick>
 8016a78:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8016a7a:	88fb      	ldrh	r3, [r7, #6]
 8016a7c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8016a7e:	68fb      	ldr	r3, [r7, #12]
 8016a80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8016a84:	b2db      	uxtb	r3, r3
 8016a86:	2b01      	cmp	r3, #1
 8016a88:	d002      	beq.n	8016a90 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8016a8a:	2302      	movs	r3, #2
 8016a8c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8016a8e:	e10b      	b.n	8016ca8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8016a90:	68bb      	ldr	r3, [r7, #8]
 8016a92:	2b00      	cmp	r3, #0
 8016a94:	d002      	beq.n	8016a9c <HAL_SPI_Transmit+0x52>
 8016a96:	88fb      	ldrh	r3, [r7, #6]
 8016a98:	2b00      	cmp	r3, #0
 8016a9a:	d102      	bne.n	8016aa2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8016a9c:	2301      	movs	r3, #1
 8016a9e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8016aa0:	e102      	b.n	8016ca8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8016aa2:	68fb      	ldr	r3, [r7, #12]
 8016aa4:	2203      	movs	r2, #3
 8016aa6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8016aaa:	68fb      	ldr	r3, [r7, #12]
 8016aac:	2200      	movs	r2, #0
 8016aae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8016ab0:	68fb      	ldr	r3, [r7, #12]
 8016ab2:	68ba      	ldr	r2, [r7, #8]
 8016ab4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8016ab6:	68fb      	ldr	r3, [r7, #12]
 8016ab8:	88fa      	ldrh	r2, [r7, #6]
 8016aba:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8016abc:	68fb      	ldr	r3, [r7, #12]
 8016abe:	88fa      	ldrh	r2, [r7, #6]
 8016ac0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8016ac2:	68fb      	ldr	r3, [r7, #12]
 8016ac4:	2200      	movs	r2, #0
 8016ac6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8016ac8:	68fb      	ldr	r3, [r7, #12]
 8016aca:	2200      	movs	r2, #0
 8016acc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8016ace:	68fb      	ldr	r3, [r7, #12]
 8016ad0:	2200      	movs	r2, #0
 8016ad2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8016ad4:	68fb      	ldr	r3, [r7, #12]
 8016ad6:	2200      	movs	r2, #0
 8016ad8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8016ada:	68fb      	ldr	r3, [r7, #12]
 8016adc:	2200      	movs	r2, #0
 8016ade:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8016ae0:	68fb      	ldr	r3, [r7, #12]
 8016ae2:	689b      	ldr	r3, [r3, #8]
 8016ae4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8016ae8:	d10f      	bne.n	8016b0a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8016aea:	68fb      	ldr	r3, [r7, #12]
 8016aec:	681b      	ldr	r3, [r3, #0]
 8016aee:	681a      	ldr	r2, [r3, #0]
 8016af0:	68fb      	ldr	r3, [r7, #12]
 8016af2:	681b      	ldr	r3, [r3, #0]
 8016af4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8016af8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8016afa:	68fb      	ldr	r3, [r7, #12]
 8016afc:	681b      	ldr	r3, [r3, #0]
 8016afe:	681a      	ldr	r2, [r3, #0]
 8016b00:	68fb      	ldr	r3, [r7, #12]
 8016b02:	681b      	ldr	r3, [r3, #0]
 8016b04:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8016b08:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8016b0a:	68fb      	ldr	r3, [r7, #12]
 8016b0c:	681b      	ldr	r3, [r3, #0]
 8016b0e:	681b      	ldr	r3, [r3, #0]
 8016b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016b14:	2b40      	cmp	r3, #64	; 0x40
 8016b16:	d007      	beq.n	8016b28 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8016b18:	68fb      	ldr	r3, [r7, #12]
 8016b1a:	681b      	ldr	r3, [r3, #0]
 8016b1c:	681a      	ldr	r2, [r3, #0]
 8016b1e:	68fb      	ldr	r3, [r7, #12]
 8016b20:	681b      	ldr	r3, [r3, #0]
 8016b22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8016b26:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8016b28:	68fb      	ldr	r3, [r7, #12]
 8016b2a:	68db      	ldr	r3, [r3, #12]
 8016b2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8016b30:	d14b      	bne.n	8016bca <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8016b32:	68fb      	ldr	r3, [r7, #12]
 8016b34:	685b      	ldr	r3, [r3, #4]
 8016b36:	2b00      	cmp	r3, #0
 8016b38:	d002      	beq.n	8016b40 <HAL_SPI_Transmit+0xf6>
 8016b3a:	8afb      	ldrh	r3, [r7, #22]
 8016b3c:	2b01      	cmp	r3, #1
 8016b3e:	d13e      	bne.n	8016bbe <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8016b40:	68fb      	ldr	r3, [r7, #12]
 8016b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016b44:	881a      	ldrh	r2, [r3, #0]
 8016b46:	68fb      	ldr	r3, [r7, #12]
 8016b48:	681b      	ldr	r3, [r3, #0]
 8016b4a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8016b4c:	68fb      	ldr	r3, [r7, #12]
 8016b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016b50:	1c9a      	adds	r2, r3, #2
 8016b52:	68fb      	ldr	r3, [r7, #12]
 8016b54:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8016b56:	68fb      	ldr	r3, [r7, #12]
 8016b58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8016b5a:	b29b      	uxth	r3, r3
 8016b5c:	3b01      	subs	r3, #1
 8016b5e:	b29a      	uxth	r2, r3
 8016b60:	68fb      	ldr	r3, [r7, #12]
 8016b62:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8016b64:	e02b      	b.n	8016bbe <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8016b66:	68fb      	ldr	r3, [r7, #12]
 8016b68:	681b      	ldr	r3, [r3, #0]
 8016b6a:	689b      	ldr	r3, [r3, #8]
 8016b6c:	f003 0302 	and.w	r3, r3, #2
 8016b70:	2b02      	cmp	r3, #2
 8016b72:	d112      	bne.n	8016b9a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8016b74:	68fb      	ldr	r3, [r7, #12]
 8016b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016b78:	881a      	ldrh	r2, [r3, #0]
 8016b7a:	68fb      	ldr	r3, [r7, #12]
 8016b7c:	681b      	ldr	r3, [r3, #0]
 8016b7e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8016b80:	68fb      	ldr	r3, [r7, #12]
 8016b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016b84:	1c9a      	adds	r2, r3, #2
 8016b86:	68fb      	ldr	r3, [r7, #12]
 8016b88:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8016b8a:	68fb      	ldr	r3, [r7, #12]
 8016b8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8016b8e:	b29b      	uxth	r3, r3
 8016b90:	3b01      	subs	r3, #1
 8016b92:	b29a      	uxth	r2, r3
 8016b94:	68fb      	ldr	r3, [r7, #12]
 8016b96:	86da      	strh	r2, [r3, #54]	; 0x36
 8016b98:	e011      	b.n	8016bbe <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8016b9a:	f7fc f989 	bl	8012eb0 <HAL_GetTick>
 8016b9e:	4602      	mov	r2, r0
 8016ba0:	69bb      	ldr	r3, [r7, #24]
 8016ba2:	1ad3      	subs	r3, r2, r3
 8016ba4:	683a      	ldr	r2, [r7, #0]
 8016ba6:	429a      	cmp	r2, r3
 8016ba8:	d803      	bhi.n	8016bb2 <HAL_SPI_Transmit+0x168>
 8016baa:	683b      	ldr	r3, [r7, #0]
 8016bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016bb0:	d102      	bne.n	8016bb8 <HAL_SPI_Transmit+0x16e>
 8016bb2:	683b      	ldr	r3, [r7, #0]
 8016bb4:	2b00      	cmp	r3, #0
 8016bb6:	d102      	bne.n	8016bbe <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8016bb8:	2303      	movs	r3, #3
 8016bba:	77fb      	strb	r3, [r7, #31]
          goto error;
 8016bbc:	e074      	b.n	8016ca8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8016bbe:	68fb      	ldr	r3, [r7, #12]
 8016bc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8016bc2:	b29b      	uxth	r3, r3
 8016bc4:	2b00      	cmp	r3, #0
 8016bc6:	d1ce      	bne.n	8016b66 <HAL_SPI_Transmit+0x11c>
 8016bc8:	e04c      	b.n	8016c64 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8016bca:	68fb      	ldr	r3, [r7, #12]
 8016bcc:	685b      	ldr	r3, [r3, #4]
 8016bce:	2b00      	cmp	r3, #0
 8016bd0:	d002      	beq.n	8016bd8 <HAL_SPI_Transmit+0x18e>
 8016bd2:	8afb      	ldrh	r3, [r7, #22]
 8016bd4:	2b01      	cmp	r3, #1
 8016bd6:	d140      	bne.n	8016c5a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8016bd8:	68fb      	ldr	r3, [r7, #12]
 8016bda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8016bdc:	68fb      	ldr	r3, [r7, #12]
 8016bde:	681b      	ldr	r3, [r3, #0]
 8016be0:	330c      	adds	r3, #12
 8016be2:	7812      	ldrb	r2, [r2, #0]
 8016be4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8016be6:	68fb      	ldr	r3, [r7, #12]
 8016be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016bea:	1c5a      	adds	r2, r3, #1
 8016bec:	68fb      	ldr	r3, [r7, #12]
 8016bee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8016bf0:	68fb      	ldr	r3, [r7, #12]
 8016bf2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8016bf4:	b29b      	uxth	r3, r3
 8016bf6:	3b01      	subs	r3, #1
 8016bf8:	b29a      	uxth	r2, r3
 8016bfa:	68fb      	ldr	r3, [r7, #12]
 8016bfc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8016bfe:	e02c      	b.n	8016c5a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8016c00:	68fb      	ldr	r3, [r7, #12]
 8016c02:	681b      	ldr	r3, [r3, #0]
 8016c04:	689b      	ldr	r3, [r3, #8]
 8016c06:	f003 0302 	and.w	r3, r3, #2
 8016c0a:	2b02      	cmp	r3, #2
 8016c0c:	d113      	bne.n	8016c36 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8016c0e:	68fb      	ldr	r3, [r7, #12]
 8016c10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8016c12:	68fb      	ldr	r3, [r7, #12]
 8016c14:	681b      	ldr	r3, [r3, #0]
 8016c16:	330c      	adds	r3, #12
 8016c18:	7812      	ldrb	r2, [r2, #0]
 8016c1a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8016c1c:	68fb      	ldr	r3, [r7, #12]
 8016c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016c20:	1c5a      	adds	r2, r3, #1
 8016c22:	68fb      	ldr	r3, [r7, #12]
 8016c24:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8016c26:	68fb      	ldr	r3, [r7, #12]
 8016c28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8016c2a:	b29b      	uxth	r3, r3
 8016c2c:	3b01      	subs	r3, #1
 8016c2e:	b29a      	uxth	r2, r3
 8016c30:	68fb      	ldr	r3, [r7, #12]
 8016c32:	86da      	strh	r2, [r3, #54]	; 0x36
 8016c34:	e011      	b.n	8016c5a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8016c36:	f7fc f93b 	bl	8012eb0 <HAL_GetTick>
 8016c3a:	4602      	mov	r2, r0
 8016c3c:	69bb      	ldr	r3, [r7, #24]
 8016c3e:	1ad3      	subs	r3, r2, r3
 8016c40:	683a      	ldr	r2, [r7, #0]
 8016c42:	429a      	cmp	r2, r3
 8016c44:	d803      	bhi.n	8016c4e <HAL_SPI_Transmit+0x204>
 8016c46:	683b      	ldr	r3, [r7, #0]
 8016c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016c4c:	d102      	bne.n	8016c54 <HAL_SPI_Transmit+0x20a>
 8016c4e:	683b      	ldr	r3, [r7, #0]
 8016c50:	2b00      	cmp	r3, #0
 8016c52:	d102      	bne.n	8016c5a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8016c54:	2303      	movs	r3, #3
 8016c56:	77fb      	strb	r3, [r7, #31]
          goto error;
 8016c58:	e026      	b.n	8016ca8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8016c5a:	68fb      	ldr	r3, [r7, #12]
 8016c5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8016c5e:	b29b      	uxth	r3, r3
 8016c60:	2b00      	cmp	r3, #0
 8016c62:	d1cd      	bne.n	8016c00 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8016c64:	69ba      	ldr	r2, [r7, #24]
 8016c66:	6839      	ldr	r1, [r7, #0]
 8016c68:	68f8      	ldr	r0, [r7, #12]
 8016c6a:	f000 fbcb 	bl	8017404 <SPI_EndRxTxTransaction>
 8016c6e:	4603      	mov	r3, r0
 8016c70:	2b00      	cmp	r3, #0
 8016c72:	d002      	beq.n	8016c7a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8016c74:	68fb      	ldr	r3, [r7, #12]
 8016c76:	2220      	movs	r2, #32
 8016c78:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8016c7a:	68fb      	ldr	r3, [r7, #12]
 8016c7c:	689b      	ldr	r3, [r3, #8]
 8016c7e:	2b00      	cmp	r3, #0
 8016c80:	d10a      	bne.n	8016c98 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8016c82:	2300      	movs	r3, #0
 8016c84:	613b      	str	r3, [r7, #16]
 8016c86:	68fb      	ldr	r3, [r7, #12]
 8016c88:	681b      	ldr	r3, [r3, #0]
 8016c8a:	68db      	ldr	r3, [r3, #12]
 8016c8c:	613b      	str	r3, [r7, #16]
 8016c8e:	68fb      	ldr	r3, [r7, #12]
 8016c90:	681b      	ldr	r3, [r3, #0]
 8016c92:	689b      	ldr	r3, [r3, #8]
 8016c94:	613b      	str	r3, [r7, #16]
 8016c96:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8016c98:	68fb      	ldr	r3, [r7, #12]
 8016c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016c9c:	2b00      	cmp	r3, #0
 8016c9e:	d002      	beq.n	8016ca6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8016ca0:	2301      	movs	r3, #1
 8016ca2:	77fb      	strb	r3, [r7, #31]
 8016ca4:	e000      	b.n	8016ca8 <HAL_SPI_Transmit+0x25e>
  }

error:
 8016ca6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8016ca8:	68fb      	ldr	r3, [r7, #12]
 8016caa:	2201      	movs	r2, #1
 8016cac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8016cb0:	68fb      	ldr	r3, [r7, #12]
 8016cb2:	2200      	movs	r2, #0
 8016cb4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8016cb8:	7ffb      	ldrb	r3, [r7, #31]
}
 8016cba:	4618      	mov	r0, r3
 8016cbc:	3720      	adds	r7, #32
 8016cbe:	46bd      	mov	sp, r7
 8016cc0:	bd80      	pop	{r7, pc}

08016cc2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8016cc2:	b580      	push	{r7, lr}
 8016cc4:	b088      	sub	sp, #32
 8016cc6:	af02      	add	r7, sp, #8
 8016cc8:	60f8      	str	r0, [r7, #12]
 8016cca:	60b9      	str	r1, [r7, #8]
 8016ccc:	603b      	str	r3, [r7, #0]
 8016cce:	4613      	mov	r3, r2
 8016cd0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8016cd2:	2300      	movs	r3, #0
 8016cd4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8016cd6:	68fb      	ldr	r3, [r7, #12]
 8016cd8:	685b      	ldr	r3, [r3, #4]
 8016cda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8016cde:	d112      	bne.n	8016d06 <HAL_SPI_Receive+0x44>
 8016ce0:	68fb      	ldr	r3, [r7, #12]
 8016ce2:	689b      	ldr	r3, [r3, #8]
 8016ce4:	2b00      	cmp	r3, #0
 8016ce6:	d10e      	bne.n	8016d06 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8016ce8:	68fb      	ldr	r3, [r7, #12]
 8016cea:	2204      	movs	r2, #4
 8016cec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8016cf0:	88fa      	ldrh	r2, [r7, #6]
 8016cf2:	683b      	ldr	r3, [r7, #0]
 8016cf4:	9300      	str	r3, [sp, #0]
 8016cf6:	4613      	mov	r3, r2
 8016cf8:	68ba      	ldr	r2, [r7, #8]
 8016cfa:	68b9      	ldr	r1, [r7, #8]
 8016cfc:	68f8      	ldr	r0, [r7, #12]
 8016cfe:	f000 f8f1 	bl	8016ee4 <HAL_SPI_TransmitReceive>
 8016d02:	4603      	mov	r3, r0
 8016d04:	e0ea      	b.n	8016edc <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8016d06:	68fb      	ldr	r3, [r7, #12]
 8016d08:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8016d0c:	2b01      	cmp	r3, #1
 8016d0e:	d101      	bne.n	8016d14 <HAL_SPI_Receive+0x52>
 8016d10:	2302      	movs	r3, #2
 8016d12:	e0e3      	b.n	8016edc <HAL_SPI_Receive+0x21a>
 8016d14:	68fb      	ldr	r3, [r7, #12]
 8016d16:	2201      	movs	r2, #1
 8016d18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8016d1c:	f7fc f8c8 	bl	8012eb0 <HAL_GetTick>
 8016d20:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8016d22:	68fb      	ldr	r3, [r7, #12]
 8016d24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8016d28:	b2db      	uxtb	r3, r3
 8016d2a:	2b01      	cmp	r3, #1
 8016d2c:	d002      	beq.n	8016d34 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8016d2e:	2302      	movs	r3, #2
 8016d30:	75fb      	strb	r3, [r7, #23]
    goto error;
 8016d32:	e0ca      	b.n	8016eca <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8016d34:	68bb      	ldr	r3, [r7, #8]
 8016d36:	2b00      	cmp	r3, #0
 8016d38:	d002      	beq.n	8016d40 <HAL_SPI_Receive+0x7e>
 8016d3a:	88fb      	ldrh	r3, [r7, #6]
 8016d3c:	2b00      	cmp	r3, #0
 8016d3e:	d102      	bne.n	8016d46 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8016d40:	2301      	movs	r3, #1
 8016d42:	75fb      	strb	r3, [r7, #23]
    goto error;
 8016d44:	e0c1      	b.n	8016eca <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8016d46:	68fb      	ldr	r3, [r7, #12]
 8016d48:	2204      	movs	r2, #4
 8016d4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8016d4e:	68fb      	ldr	r3, [r7, #12]
 8016d50:	2200      	movs	r2, #0
 8016d52:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8016d54:	68fb      	ldr	r3, [r7, #12]
 8016d56:	68ba      	ldr	r2, [r7, #8]
 8016d58:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8016d5a:	68fb      	ldr	r3, [r7, #12]
 8016d5c:	88fa      	ldrh	r2, [r7, #6]
 8016d5e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8016d60:	68fb      	ldr	r3, [r7, #12]
 8016d62:	88fa      	ldrh	r2, [r7, #6]
 8016d64:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8016d66:	68fb      	ldr	r3, [r7, #12]
 8016d68:	2200      	movs	r2, #0
 8016d6a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8016d6c:	68fb      	ldr	r3, [r7, #12]
 8016d6e:	2200      	movs	r2, #0
 8016d70:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8016d72:	68fb      	ldr	r3, [r7, #12]
 8016d74:	2200      	movs	r2, #0
 8016d76:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8016d78:	68fb      	ldr	r3, [r7, #12]
 8016d7a:	2200      	movs	r2, #0
 8016d7c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8016d7e:	68fb      	ldr	r3, [r7, #12]
 8016d80:	2200      	movs	r2, #0
 8016d82:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8016d84:	68fb      	ldr	r3, [r7, #12]
 8016d86:	689b      	ldr	r3, [r3, #8]
 8016d88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8016d8c:	d10f      	bne.n	8016dae <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8016d8e:	68fb      	ldr	r3, [r7, #12]
 8016d90:	681b      	ldr	r3, [r3, #0]
 8016d92:	681a      	ldr	r2, [r3, #0]
 8016d94:	68fb      	ldr	r3, [r7, #12]
 8016d96:	681b      	ldr	r3, [r3, #0]
 8016d98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8016d9c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8016d9e:	68fb      	ldr	r3, [r7, #12]
 8016da0:	681b      	ldr	r3, [r3, #0]
 8016da2:	681a      	ldr	r2, [r3, #0]
 8016da4:	68fb      	ldr	r3, [r7, #12]
 8016da6:	681b      	ldr	r3, [r3, #0]
 8016da8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8016dac:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8016dae:	68fb      	ldr	r3, [r7, #12]
 8016db0:	681b      	ldr	r3, [r3, #0]
 8016db2:	681b      	ldr	r3, [r3, #0]
 8016db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016db8:	2b40      	cmp	r3, #64	; 0x40
 8016dba:	d007      	beq.n	8016dcc <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8016dbc:	68fb      	ldr	r3, [r7, #12]
 8016dbe:	681b      	ldr	r3, [r3, #0]
 8016dc0:	681a      	ldr	r2, [r3, #0]
 8016dc2:	68fb      	ldr	r3, [r7, #12]
 8016dc4:	681b      	ldr	r3, [r3, #0]
 8016dc6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8016dca:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8016dcc:	68fb      	ldr	r3, [r7, #12]
 8016dce:	68db      	ldr	r3, [r3, #12]
 8016dd0:	2b00      	cmp	r3, #0
 8016dd2:	d162      	bne.n	8016e9a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8016dd4:	e02e      	b.n	8016e34 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8016dd6:	68fb      	ldr	r3, [r7, #12]
 8016dd8:	681b      	ldr	r3, [r3, #0]
 8016dda:	689b      	ldr	r3, [r3, #8]
 8016ddc:	f003 0301 	and.w	r3, r3, #1
 8016de0:	2b01      	cmp	r3, #1
 8016de2:	d115      	bne.n	8016e10 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8016de4:	68fb      	ldr	r3, [r7, #12]
 8016de6:	681b      	ldr	r3, [r3, #0]
 8016de8:	f103 020c 	add.w	r2, r3, #12
 8016dec:	68fb      	ldr	r3, [r7, #12]
 8016dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016df0:	7812      	ldrb	r2, [r2, #0]
 8016df2:	b2d2      	uxtb	r2, r2
 8016df4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8016df6:	68fb      	ldr	r3, [r7, #12]
 8016df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016dfa:	1c5a      	adds	r2, r3, #1
 8016dfc:	68fb      	ldr	r3, [r7, #12]
 8016dfe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8016e00:	68fb      	ldr	r3, [r7, #12]
 8016e02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8016e04:	b29b      	uxth	r3, r3
 8016e06:	3b01      	subs	r3, #1
 8016e08:	b29a      	uxth	r2, r3
 8016e0a:	68fb      	ldr	r3, [r7, #12]
 8016e0c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8016e0e:	e011      	b.n	8016e34 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8016e10:	f7fc f84e 	bl	8012eb0 <HAL_GetTick>
 8016e14:	4602      	mov	r2, r0
 8016e16:	693b      	ldr	r3, [r7, #16]
 8016e18:	1ad3      	subs	r3, r2, r3
 8016e1a:	683a      	ldr	r2, [r7, #0]
 8016e1c:	429a      	cmp	r2, r3
 8016e1e:	d803      	bhi.n	8016e28 <HAL_SPI_Receive+0x166>
 8016e20:	683b      	ldr	r3, [r7, #0]
 8016e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016e26:	d102      	bne.n	8016e2e <HAL_SPI_Receive+0x16c>
 8016e28:	683b      	ldr	r3, [r7, #0]
 8016e2a:	2b00      	cmp	r3, #0
 8016e2c:	d102      	bne.n	8016e34 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8016e2e:	2303      	movs	r3, #3
 8016e30:	75fb      	strb	r3, [r7, #23]
          goto error;
 8016e32:	e04a      	b.n	8016eca <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8016e34:	68fb      	ldr	r3, [r7, #12]
 8016e36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8016e38:	b29b      	uxth	r3, r3
 8016e3a:	2b00      	cmp	r3, #0
 8016e3c:	d1cb      	bne.n	8016dd6 <HAL_SPI_Receive+0x114>
 8016e3e:	e031      	b.n	8016ea4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8016e40:	68fb      	ldr	r3, [r7, #12]
 8016e42:	681b      	ldr	r3, [r3, #0]
 8016e44:	689b      	ldr	r3, [r3, #8]
 8016e46:	f003 0301 	and.w	r3, r3, #1
 8016e4a:	2b01      	cmp	r3, #1
 8016e4c:	d113      	bne.n	8016e76 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8016e4e:	68fb      	ldr	r3, [r7, #12]
 8016e50:	681b      	ldr	r3, [r3, #0]
 8016e52:	68da      	ldr	r2, [r3, #12]
 8016e54:	68fb      	ldr	r3, [r7, #12]
 8016e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016e58:	b292      	uxth	r2, r2
 8016e5a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8016e5c:	68fb      	ldr	r3, [r7, #12]
 8016e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016e60:	1c9a      	adds	r2, r3, #2
 8016e62:	68fb      	ldr	r3, [r7, #12]
 8016e64:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8016e66:	68fb      	ldr	r3, [r7, #12]
 8016e68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8016e6a:	b29b      	uxth	r3, r3
 8016e6c:	3b01      	subs	r3, #1
 8016e6e:	b29a      	uxth	r2, r3
 8016e70:	68fb      	ldr	r3, [r7, #12]
 8016e72:	87da      	strh	r2, [r3, #62]	; 0x3e
 8016e74:	e011      	b.n	8016e9a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8016e76:	f7fc f81b 	bl	8012eb0 <HAL_GetTick>
 8016e7a:	4602      	mov	r2, r0
 8016e7c:	693b      	ldr	r3, [r7, #16]
 8016e7e:	1ad3      	subs	r3, r2, r3
 8016e80:	683a      	ldr	r2, [r7, #0]
 8016e82:	429a      	cmp	r2, r3
 8016e84:	d803      	bhi.n	8016e8e <HAL_SPI_Receive+0x1cc>
 8016e86:	683b      	ldr	r3, [r7, #0]
 8016e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016e8c:	d102      	bne.n	8016e94 <HAL_SPI_Receive+0x1d2>
 8016e8e:	683b      	ldr	r3, [r7, #0]
 8016e90:	2b00      	cmp	r3, #0
 8016e92:	d102      	bne.n	8016e9a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8016e94:	2303      	movs	r3, #3
 8016e96:	75fb      	strb	r3, [r7, #23]
          goto error;
 8016e98:	e017      	b.n	8016eca <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8016e9a:	68fb      	ldr	r3, [r7, #12]
 8016e9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8016e9e:	b29b      	uxth	r3, r3
 8016ea0:	2b00      	cmp	r3, #0
 8016ea2:	d1cd      	bne.n	8016e40 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8016ea4:	693a      	ldr	r2, [r7, #16]
 8016ea6:	6839      	ldr	r1, [r7, #0]
 8016ea8:	68f8      	ldr	r0, [r7, #12]
 8016eaa:	f000 fa45 	bl	8017338 <SPI_EndRxTransaction>
 8016eae:	4603      	mov	r3, r0
 8016eb0:	2b00      	cmp	r3, #0
 8016eb2:	d002      	beq.n	8016eba <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8016eb4:	68fb      	ldr	r3, [r7, #12]
 8016eb6:	2220      	movs	r2, #32
 8016eb8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8016eba:	68fb      	ldr	r3, [r7, #12]
 8016ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016ebe:	2b00      	cmp	r3, #0
 8016ec0:	d002      	beq.n	8016ec8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8016ec2:	2301      	movs	r3, #1
 8016ec4:	75fb      	strb	r3, [r7, #23]
 8016ec6:	e000      	b.n	8016eca <HAL_SPI_Receive+0x208>
  }

error :
 8016ec8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8016eca:	68fb      	ldr	r3, [r7, #12]
 8016ecc:	2201      	movs	r2, #1
 8016ece:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8016ed2:	68fb      	ldr	r3, [r7, #12]
 8016ed4:	2200      	movs	r2, #0
 8016ed6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8016eda:	7dfb      	ldrb	r3, [r7, #23]
}
 8016edc:	4618      	mov	r0, r3
 8016ede:	3718      	adds	r7, #24
 8016ee0:	46bd      	mov	sp, r7
 8016ee2:	bd80      	pop	{r7, pc}

08016ee4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8016ee4:	b580      	push	{r7, lr}
 8016ee6:	b08c      	sub	sp, #48	; 0x30
 8016ee8:	af00      	add	r7, sp, #0
 8016eea:	60f8      	str	r0, [r7, #12]
 8016eec:	60b9      	str	r1, [r7, #8]
 8016eee:	607a      	str	r2, [r7, #4]
 8016ef0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8016ef2:	2301      	movs	r3, #1
 8016ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8016ef6:	2300      	movs	r3, #0
 8016ef8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8016efc:	68fb      	ldr	r3, [r7, #12]
 8016efe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8016f02:	2b01      	cmp	r3, #1
 8016f04:	d101      	bne.n	8016f0a <HAL_SPI_TransmitReceive+0x26>
 8016f06:	2302      	movs	r3, #2
 8016f08:	e18a      	b.n	8017220 <HAL_SPI_TransmitReceive+0x33c>
 8016f0a:	68fb      	ldr	r3, [r7, #12]
 8016f0c:	2201      	movs	r2, #1
 8016f0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8016f12:	f7fb ffcd 	bl	8012eb0 <HAL_GetTick>
 8016f16:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8016f18:	68fb      	ldr	r3, [r7, #12]
 8016f1a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8016f1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8016f22:	68fb      	ldr	r3, [r7, #12]
 8016f24:	685b      	ldr	r3, [r3, #4]
 8016f26:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8016f28:	887b      	ldrh	r3, [r7, #2]
 8016f2a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8016f2c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016f30:	2b01      	cmp	r3, #1
 8016f32:	d00f      	beq.n	8016f54 <HAL_SPI_TransmitReceive+0x70>
 8016f34:	69fb      	ldr	r3, [r7, #28]
 8016f36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8016f3a:	d107      	bne.n	8016f4c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8016f3c:	68fb      	ldr	r3, [r7, #12]
 8016f3e:	689b      	ldr	r3, [r3, #8]
 8016f40:	2b00      	cmp	r3, #0
 8016f42:	d103      	bne.n	8016f4c <HAL_SPI_TransmitReceive+0x68>
 8016f44:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016f48:	2b04      	cmp	r3, #4
 8016f4a:	d003      	beq.n	8016f54 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8016f4c:	2302      	movs	r3, #2
 8016f4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8016f52:	e15b      	b.n	801720c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8016f54:	68bb      	ldr	r3, [r7, #8]
 8016f56:	2b00      	cmp	r3, #0
 8016f58:	d005      	beq.n	8016f66 <HAL_SPI_TransmitReceive+0x82>
 8016f5a:	687b      	ldr	r3, [r7, #4]
 8016f5c:	2b00      	cmp	r3, #0
 8016f5e:	d002      	beq.n	8016f66 <HAL_SPI_TransmitReceive+0x82>
 8016f60:	887b      	ldrh	r3, [r7, #2]
 8016f62:	2b00      	cmp	r3, #0
 8016f64:	d103      	bne.n	8016f6e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8016f66:	2301      	movs	r3, #1
 8016f68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8016f6c:	e14e      	b.n	801720c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8016f6e:	68fb      	ldr	r3, [r7, #12]
 8016f70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8016f74:	b2db      	uxtb	r3, r3
 8016f76:	2b04      	cmp	r3, #4
 8016f78:	d003      	beq.n	8016f82 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8016f7a:	68fb      	ldr	r3, [r7, #12]
 8016f7c:	2205      	movs	r2, #5
 8016f7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8016f82:	68fb      	ldr	r3, [r7, #12]
 8016f84:	2200      	movs	r2, #0
 8016f86:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8016f88:	68fb      	ldr	r3, [r7, #12]
 8016f8a:	687a      	ldr	r2, [r7, #4]
 8016f8c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8016f8e:	68fb      	ldr	r3, [r7, #12]
 8016f90:	887a      	ldrh	r2, [r7, #2]
 8016f92:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8016f94:	68fb      	ldr	r3, [r7, #12]
 8016f96:	887a      	ldrh	r2, [r7, #2]
 8016f98:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8016f9a:	68fb      	ldr	r3, [r7, #12]
 8016f9c:	68ba      	ldr	r2, [r7, #8]
 8016f9e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8016fa0:	68fb      	ldr	r3, [r7, #12]
 8016fa2:	887a      	ldrh	r2, [r7, #2]
 8016fa4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8016fa6:	68fb      	ldr	r3, [r7, #12]
 8016fa8:	887a      	ldrh	r2, [r7, #2]
 8016faa:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8016fac:	68fb      	ldr	r3, [r7, #12]
 8016fae:	2200      	movs	r2, #0
 8016fb0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8016fb2:	68fb      	ldr	r3, [r7, #12]
 8016fb4:	2200      	movs	r2, #0
 8016fb6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8016fb8:	68fb      	ldr	r3, [r7, #12]
 8016fba:	681b      	ldr	r3, [r3, #0]
 8016fbc:	681b      	ldr	r3, [r3, #0]
 8016fbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016fc2:	2b40      	cmp	r3, #64	; 0x40
 8016fc4:	d007      	beq.n	8016fd6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8016fc6:	68fb      	ldr	r3, [r7, #12]
 8016fc8:	681b      	ldr	r3, [r3, #0]
 8016fca:	681a      	ldr	r2, [r3, #0]
 8016fcc:	68fb      	ldr	r3, [r7, #12]
 8016fce:	681b      	ldr	r3, [r3, #0]
 8016fd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8016fd4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8016fd6:	68fb      	ldr	r3, [r7, #12]
 8016fd8:	68db      	ldr	r3, [r3, #12]
 8016fda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8016fde:	d178      	bne.n	80170d2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8016fe0:	68fb      	ldr	r3, [r7, #12]
 8016fe2:	685b      	ldr	r3, [r3, #4]
 8016fe4:	2b00      	cmp	r3, #0
 8016fe6:	d002      	beq.n	8016fee <HAL_SPI_TransmitReceive+0x10a>
 8016fe8:	8b7b      	ldrh	r3, [r7, #26]
 8016fea:	2b01      	cmp	r3, #1
 8016fec:	d166      	bne.n	80170bc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8016fee:	68fb      	ldr	r3, [r7, #12]
 8016ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016ff2:	881a      	ldrh	r2, [r3, #0]
 8016ff4:	68fb      	ldr	r3, [r7, #12]
 8016ff6:	681b      	ldr	r3, [r3, #0]
 8016ff8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8016ffa:	68fb      	ldr	r3, [r7, #12]
 8016ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016ffe:	1c9a      	adds	r2, r3, #2
 8017000:	68fb      	ldr	r3, [r7, #12]
 8017002:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8017004:	68fb      	ldr	r3, [r7, #12]
 8017006:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8017008:	b29b      	uxth	r3, r3
 801700a:	3b01      	subs	r3, #1
 801700c:	b29a      	uxth	r2, r3
 801700e:	68fb      	ldr	r3, [r7, #12]
 8017010:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8017012:	e053      	b.n	80170bc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8017014:	68fb      	ldr	r3, [r7, #12]
 8017016:	681b      	ldr	r3, [r3, #0]
 8017018:	689b      	ldr	r3, [r3, #8]
 801701a:	f003 0302 	and.w	r3, r3, #2
 801701e:	2b02      	cmp	r3, #2
 8017020:	d11b      	bne.n	801705a <HAL_SPI_TransmitReceive+0x176>
 8017022:	68fb      	ldr	r3, [r7, #12]
 8017024:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8017026:	b29b      	uxth	r3, r3
 8017028:	2b00      	cmp	r3, #0
 801702a:	d016      	beq.n	801705a <HAL_SPI_TransmitReceive+0x176>
 801702c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801702e:	2b01      	cmp	r3, #1
 8017030:	d113      	bne.n	801705a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8017032:	68fb      	ldr	r3, [r7, #12]
 8017034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017036:	881a      	ldrh	r2, [r3, #0]
 8017038:	68fb      	ldr	r3, [r7, #12]
 801703a:	681b      	ldr	r3, [r3, #0]
 801703c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801703e:	68fb      	ldr	r3, [r7, #12]
 8017040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017042:	1c9a      	adds	r2, r3, #2
 8017044:	68fb      	ldr	r3, [r7, #12]
 8017046:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8017048:	68fb      	ldr	r3, [r7, #12]
 801704a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801704c:	b29b      	uxth	r3, r3
 801704e:	3b01      	subs	r3, #1
 8017050:	b29a      	uxth	r2, r3
 8017052:	68fb      	ldr	r3, [r7, #12]
 8017054:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8017056:	2300      	movs	r3, #0
 8017058:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801705a:	68fb      	ldr	r3, [r7, #12]
 801705c:	681b      	ldr	r3, [r3, #0]
 801705e:	689b      	ldr	r3, [r3, #8]
 8017060:	f003 0301 	and.w	r3, r3, #1
 8017064:	2b01      	cmp	r3, #1
 8017066:	d119      	bne.n	801709c <HAL_SPI_TransmitReceive+0x1b8>
 8017068:	68fb      	ldr	r3, [r7, #12]
 801706a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801706c:	b29b      	uxth	r3, r3
 801706e:	2b00      	cmp	r3, #0
 8017070:	d014      	beq.n	801709c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8017072:	68fb      	ldr	r3, [r7, #12]
 8017074:	681b      	ldr	r3, [r3, #0]
 8017076:	68da      	ldr	r2, [r3, #12]
 8017078:	68fb      	ldr	r3, [r7, #12]
 801707a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801707c:	b292      	uxth	r2, r2
 801707e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8017080:	68fb      	ldr	r3, [r7, #12]
 8017082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017084:	1c9a      	adds	r2, r3, #2
 8017086:	68fb      	ldr	r3, [r7, #12]
 8017088:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801708a:	68fb      	ldr	r3, [r7, #12]
 801708c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801708e:	b29b      	uxth	r3, r3
 8017090:	3b01      	subs	r3, #1
 8017092:	b29a      	uxth	r2, r3
 8017094:	68fb      	ldr	r3, [r7, #12]
 8017096:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8017098:	2301      	movs	r3, #1
 801709a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 801709c:	f7fb ff08 	bl	8012eb0 <HAL_GetTick>
 80170a0:	4602      	mov	r2, r0
 80170a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170a4:	1ad3      	subs	r3, r2, r3
 80170a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80170a8:	429a      	cmp	r2, r3
 80170aa:	d807      	bhi.n	80170bc <HAL_SPI_TransmitReceive+0x1d8>
 80170ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80170ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80170b2:	d003      	beq.n	80170bc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80170b4:	2303      	movs	r3, #3
 80170b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80170ba:	e0a7      	b.n	801720c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80170bc:	68fb      	ldr	r3, [r7, #12]
 80170be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80170c0:	b29b      	uxth	r3, r3
 80170c2:	2b00      	cmp	r3, #0
 80170c4:	d1a6      	bne.n	8017014 <HAL_SPI_TransmitReceive+0x130>
 80170c6:	68fb      	ldr	r3, [r7, #12]
 80170c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80170ca:	b29b      	uxth	r3, r3
 80170cc:	2b00      	cmp	r3, #0
 80170ce:	d1a1      	bne.n	8017014 <HAL_SPI_TransmitReceive+0x130>
 80170d0:	e07c      	b.n	80171cc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80170d2:	68fb      	ldr	r3, [r7, #12]
 80170d4:	685b      	ldr	r3, [r3, #4]
 80170d6:	2b00      	cmp	r3, #0
 80170d8:	d002      	beq.n	80170e0 <HAL_SPI_TransmitReceive+0x1fc>
 80170da:	8b7b      	ldrh	r3, [r7, #26]
 80170dc:	2b01      	cmp	r3, #1
 80170de:	d16b      	bne.n	80171b8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80170e0:	68fb      	ldr	r3, [r7, #12]
 80170e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80170e4:	68fb      	ldr	r3, [r7, #12]
 80170e6:	681b      	ldr	r3, [r3, #0]
 80170e8:	330c      	adds	r3, #12
 80170ea:	7812      	ldrb	r2, [r2, #0]
 80170ec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80170ee:	68fb      	ldr	r3, [r7, #12]
 80170f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80170f2:	1c5a      	adds	r2, r3, #1
 80170f4:	68fb      	ldr	r3, [r7, #12]
 80170f6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80170f8:	68fb      	ldr	r3, [r7, #12]
 80170fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80170fc:	b29b      	uxth	r3, r3
 80170fe:	3b01      	subs	r3, #1
 8017100:	b29a      	uxth	r2, r3
 8017102:	68fb      	ldr	r3, [r7, #12]
 8017104:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8017106:	e057      	b.n	80171b8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8017108:	68fb      	ldr	r3, [r7, #12]
 801710a:	681b      	ldr	r3, [r3, #0]
 801710c:	689b      	ldr	r3, [r3, #8]
 801710e:	f003 0302 	and.w	r3, r3, #2
 8017112:	2b02      	cmp	r3, #2
 8017114:	d11c      	bne.n	8017150 <HAL_SPI_TransmitReceive+0x26c>
 8017116:	68fb      	ldr	r3, [r7, #12]
 8017118:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801711a:	b29b      	uxth	r3, r3
 801711c:	2b00      	cmp	r3, #0
 801711e:	d017      	beq.n	8017150 <HAL_SPI_TransmitReceive+0x26c>
 8017120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017122:	2b01      	cmp	r3, #1
 8017124:	d114      	bne.n	8017150 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8017126:	68fb      	ldr	r3, [r7, #12]
 8017128:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801712a:	68fb      	ldr	r3, [r7, #12]
 801712c:	681b      	ldr	r3, [r3, #0]
 801712e:	330c      	adds	r3, #12
 8017130:	7812      	ldrb	r2, [r2, #0]
 8017132:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8017134:	68fb      	ldr	r3, [r7, #12]
 8017136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017138:	1c5a      	adds	r2, r3, #1
 801713a:	68fb      	ldr	r3, [r7, #12]
 801713c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801713e:	68fb      	ldr	r3, [r7, #12]
 8017140:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8017142:	b29b      	uxth	r3, r3
 8017144:	3b01      	subs	r3, #1
 8017146:	b29a      	uxth	r2, r3
 8017148:	68fb      	ldr	r3, [r7, #12]
 801714a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801714c:	2300      	movs	r3, #0
 801714e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8017150:	68fb      	ldr	r3, [r7, #12]
 8017152:	681b      	ldr	r3, [r3, #0]
 8017154:	689b      	ldr	r3, [r3, #8]
 8017156:	f003 0301 	and.w	r3, r3, #1
 801715a:	2b01      	cmp	r3, #1
 801715c:	d119      	bne.n	8017192 <HAL_SPI_TransmitReceive+0x2ae>
 801715e:	68fb      	ldr	r3, [r7, #12]
 8017160:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8017162:	b29b      	uxth	r3, r3
 8017164:	2b00      	cmp	r3, #0
 8017166:	d014      	beq.n	8017192 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8017168:	68fb      	ldr	r3, [r7, #12]
 801716a:	681b      	ldr	r3, [r3, #0]
 801716c:	68da      	ldr	r2, [r3, #12]
 801716e:	68fb      	ldr	r3, [r7, #12]
 8017170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017172:	b2d2      	uxtb	r2, r2
 8017174:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8017176:	68fb      	ldr	r3, [r7, #12]
 8017178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801717a:	1c5a      	adds	r2, r3, #1
 801717c:	68fb      	ldr	r3, [r7, #12]
 801717e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8017180:	68fb      	ldr	r3, [r7, #12]
 8017182:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8017184:	b29b      	uxth	r3, r3
 8017186:	3b01      	subs	r3, #1
 8017188:	b29a      	uxth	r2, r3
 801718a:	68fb      	ldr	r3, [r7, #12]
 801718c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801718e:	2301      	movs	r3, #1
 8017190:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8017192:	f7fb fe8d 	bl	8012eb0 <HAL_GetTick>
 8017196:	4602      	mov	r2, r0
 8017198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801719a:	1ad3      	subs	r3, r2, r3
 801719c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801719e:	429a      	cmp	r2, r3
 80171a0:	d803      	bhi.n	80171aa <HAL_SPI_TransmitReceive+0x2c6>
 80171a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80171a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80171a8:	d102      	bne.n	80171b0 <HAL_SPI_TransmitReceive+0x2cc>
 80171aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80171ac:	2b00      	cmp	r3, #0
 80171ae:	d103      	bne.n	80171b8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80171b0:	2303      	movs	r3, #3
 80171b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80171b6:	e029      	b.n	801720c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80171b8:	68fb      	ldr	r3, [r7, #12]
 80171ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80171bc:	b29b      	uxth	r3, r3
 80171be:	2b00      	cmp	r3, #0
 80171c0:	d1a2      	bne.n	8017108 <HAL_SPI_TransmitReceive+0x224>
 80171c2:	68fb      	ldr	r3, [r7, #12]
 80171c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80171c6:	b29b      	uxth	r3, r3
 80171c8:	2b00      	cmp	r3, #0
 80171ca:	d19d      	bne.n	8017108 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80171cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80171ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80171d0:	68f8      	ldr	r0, [r7, #12]
 80171d2:	f000 f917 	bl	8017404 <SPI_EndRxTxTransaction>
 80171d6:	4603      	mov	r3, r0
 80171d8:	2b00      	cmp	r3, #0
 80171da:	d006      	beq.n	80171ea <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80171dc:	2301      	movs	r3, #1
 80171de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80171e2:	68fb      	ldr	r3, [r7, #12]
 80171e4:	2220      	movs	r2, #32
 80171e6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80171e8:	e010      	b.n	801720c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80171ea:	68fb      	ldr	r3, [r7, #12]
 80171ec:	689b      	ldr	r3, [r3, #8]
 80171ee:	2b00      	cmp	r3, #0
 80171f0:	d10b      	bne.n	801720a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80171f2:	2300      	movs	r3, #0
 80171f4:	617b      	str	r3, [r7, #20]
 80171f6:	68fb      	ldr	r3, [r7, #12]
 80171f8:	681b      	ldr	r3, [r3, #0]
 80171fa:	68db      	ldr	r3, [r3, #12]
 80171fc:	617b      	str	r3, [r7, #20]
 80171fe:	68fb      	ldr	r3, [r7, #12]
 8017200:	681b      	ldr	r3, [r3, #0]
 8017202:	689b      	ldr	r3, [r3, #8]
 8017204:	617b      	str	r3, [r7, #20]
 8017206:	697b      	ldr	r3, [r7, #20]
 8017208:	e000      	b.n	801720c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 801720a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801720c:	68fb      	ldr	r3, [r7, #12]
 801720e:	2201      	movs	r2, #1
 8017210:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8017214:	68fb      	ldr	r3, [r7, #12]
 8017216:	2200      	movs	r2, #0
 8017218:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 801721c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8017220:	4618      	mov	r0, r3
 8017222:	3730      	adds	r7, #48	; 0x30
 8017224:	46bd      	mov	sp, r7
 8017226:	bd80      	pop	{r7, pc}

08017228 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8017228:	b580      	push	{r7, lr}
 801722a:	b088      	sub	sp, #32
 801722c:	af00      	add	r7, sp, #0
 801722e:	60f8      	str	r0, [r7, #12]
 8017230:	60b9      	str	r1, [r7, #8]
 8017232:	603b      	str	r3, [r7, #0]
 8017234:	4613      	mov	r3, r2
 8017236:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8017238:	f7fb fe3a 	bl	8012eb0 <HAL_GetTick>
 801723c:	4602      	mov	r2, r0
 801723e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017240:	1a9b      	subs	r3, r3, r2
 8017242:	683a      	ldr	r2, [r7, #0]
 8017244:	4413      	add	r3, r2
 8017246:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8017248:	f7fb fe32 	bl	8012eb0 <HAL_GetTick>
 801724c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 801724e:	4b39      	ldr	r3, [pc, #228]	; (8017334 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8017250:	681b      	ldr	r3, [r3, #0]
 8017252:	015b      	lsls	r3, r3, #5
 8017254:	0d1b      	lsrs	r3, r3, #20
 8017256:	69fa      	ldr	r2, [r7, #28]
 8017258:	fb02 f303 	mul.w	r3, r2, r3
 801725c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801725e:	e054      	b.n	801730a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8017260:	683b      	ldr	r3, [r7, #0]
 8017262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017266:	d050      	beq.n	801730a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8017268:	f7fb fe22 	bl	8012eb0 <HAL_GetTick>
 801726c:	4602      	mov	r2, r0
 801726e:	69bb      	ldr	r3, [r7, #24]
 8017270:	1ad3      	subs	r3, r2, r3
 8017272:	69fa      	ldr	r2, [r7, #28]
 8017274:	429a      	cmp	r2, r3
 8017276:	d902      	bls.n	801727e <SPI_WaitFlagStateUntilTimeout+0x56>
 8017278:	69fb      	ldr	r3, [r7, #28]
 801727a:	2b00      	cmp	r3, #0
 801727c:	d13d      	bne.n	80172fa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801727e:	68fb      	ldr	r3, [r7, #12]
 8017280:	681b      	ldr	r3, [r3, #0]
 8017282:	685a      	ldr	r2, [r3, #4]
 8017284:	68fb      	ldr	r3, [r7, #12]
 8017286:	681b      	ldr	r3, [r3, #0]
 8017288:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801728c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801728e:	68fb      	ldr	r3, [r7, #12]
 8017290:	685b      	ldr	r3, [r3, #4]
 8017292:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8017296:	d111      	bne.n	80172bc <SPI_WaitFlagStateUntilTimeout+0x94>
 8017298:	68fb      	ldr	r3, [r7, #12]
 801729a:	689b      	ldr	r3, [r3, #8]
 801729c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80172a0:	d004      	beq.n	80172ac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80172a2:	68fb      	ldr	r3, [r7, #12]
 80172a4:	689b      	ldr	r3, [r3, #8]
 80172a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80172aa:	d107      	bne.n	80172bc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80172ac:	68fb      	ldr	r3, [r7, #12]
 80172ae:	681b      	ldr	r3, [r3, #0]
 80172b0:	681a      	ldr	r2, [r3, #0]
 80172b2:	68fb      	ldr	r3, [r7, #12]
 80172b4:	681b      	ldr	r3, [r3, #0]
 80172b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80172ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80172bc:	68fb      	ldr	r3, [r7, #12]
 80172be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80172c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80172c4:	d10f      	bne.n	80172e6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80172c6:	68fb      	ldr	r3, [r7, #12]
 80172c8:	681b      	ldr	r3, [r3, #0]
 80172ca:	681a      	ldr	r2, [r3, #0]
 80172cc:	68fb      	ldr	r3, [r7, #12]
 80172ce:	681b      	ldr	r3, [r3, #0]
 80172d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80172d4:	601a      	str	r2, [r3, #0]
 80172d6:	68fb      	ldr	r3, [r7, #12]
 80172d8:	681b      	ldr	r3, [r3, #0]
 80172da:	681a      	ldr	r2, [r3, #0]
 80172dc:	68fb      	ldr	r3, [r7, #12]
 80172de:	681b      	ldr	r3, [r3, #0]
 80172e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80172e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80172e6:	68fb      	ldr	r3, [r7, #12]
 80172e8:	2201      	movs	r2, #1
 80172ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80172ee:	68fb      	ldr	r3, [r7, #12]
 80172f0:	2200      	movs	r2, #0
 80172f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80172f6:	2303      	movs	r3, #3
 80172f8:	e017      	b.n	801732a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80172fa:	697b      	ldr	r3, [r7, #20]
 80172fc:	2b00      	cmp	r3, #0
 80172fe:	d101      	bne.n	8017304 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8017300:	2300      	movs	r3, #0
 8017302:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8017304:	697b      	ldr	r3, [r7, #20]
 8017306:	3b01      	subs	r3, #1
 8017308:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801730a:	68fb      	ldr	r3, [r7, #12]
 801730c:	681b      	ldr	r3, [r3, #0]
 801730e:	689a      	ldr	r2, [r3, #8]
 8017310:	68bb      	ldr	r3, [r7, #8]
 8017312:	4013      	ands	r3, r2
 8017314:	68ba      	ldr	r2, [r7, #8]
 8017316:	429a      	cmp	r2, r3
 8017318:	bf0c      	ite	eq
 801731a:	2301      	moveq	r3, #1
 801731c:	2300      	movne	r3, #0
 801731e:	b2db      	uxtb	r3, r3
 8017320:	461a      	mov	r2, r3
 8017322:	79fb      	ldrb	r3, [r7, #7]
 8017324:	429a      	cmp	r2, r3
 8017326:	d19b      	bne.n	8017260 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8017328:	2300      	movs	r3, #0
}
 801732a:	4618      	mov	r0, r3
 801732c:	3720      	adds	r7, #32
 801732e:	46bd      	mov	sp, r7
 8017330:	bd80      	pop	{r7, pc}
 8017332:	bf00      	nop
 8017334:	20000008 	.word	0x20000008

08017338 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8017338:	b580      	push	{r7, lr}
 801733a:	b086      	sub	sp, #24
 801733c:	af02      	add	r7, sp, #8
 801733e:	60f8      	str	r0, [r7, #12]
 8017340:	60b9      	str	r1, [r7, #8]
 8017342:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8017344:	68fb      	ldr	r3, [r7, #12]
 8017346:	685b      	ldr	r3, [r3, #4]
 8017348:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801734c:	d111      	bne.n	8017372 <SPI_EndRxTransaction+0x3a>
 801734e:	68fb      	ldr	r3, [r7, #12]
 8017350:	689b      	ldr	r3, [r3, #8]
 8017352:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8017356:	d004      	beq.n	8017362 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8017358:	68fb      	ldr	r3, [r7, #12]
 801735a:	689b      	ldr	r3, [r3, #8]
 801735c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8017360:	d107      	bne.n	8017372 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8017362:	68fb      	ldr	r3, [r7, #12]
 8017364:	681b      	ldr	r3, [r3, #0]
 8017366:	681a      	ldr	r2, [r3, #0]
 8017368:	68fb      	ldr	r3, [r7, #12]
 801736a:	681b      	ldr	r3, [r3, #0]
 801736c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8017370:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8017372:	68fb      	ldr	r3, [r7, #12]
 8017374:	685b      	ldr	r3, [r3, #4]
 8017376:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801737a:	d12a      	bne.n	80173d2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 801737c:	68fb      	ldr	r3, [r7, #12]
 801737e:	689b      	ldr	r3, [r3, #8]
 8017380:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8017384:	d012      	beq.n	80173ac <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8017386:	687b      	ldr	r3, [r7, #4]
 8017388:	9300      	str	r3, [sp, #0]
 801738a:	68bb      	ldr	r3, [r7, #8]
 801738c:	2200      	movs	r2, #0
 801738e:	2180      	movs	r1, #128	; 0x80
 8017390:	68f8      	ldr	r0, [r7, #12]
 8017392:	f7ff ff49 	bl	8017228 <SPI_WaitFlagStateUntilTimeout>
 8017396:	4603      	mov	r3, r0
 8017398:	2b00      	cmp	r3, #0
 801739a:	d02d      	beq.n	80173f8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801739c:	68fb      	ldr	r3, [r7, #12]
 801739e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80173a0:	f043 0220 	orr.w	r2, r3, #32
 80173a4:	68fb      	ldr	r3, [r7, #12]
 80173a6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80173a8:	2303      	movs	r3, #3
 80173aa:	e026      	b.n	80173fa <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80173ac:	687b      	ldr	r3, [r7, #4]
 80173ae:	9300      	str	r3, [sp, #0]
 80173b0:	68bb      	ldr	r3, [r7, #8]
 80173b2:	2200      	movs	r2, #0
 80173b4:	2101      	movs	r1, #1
 80173b6:	68f8      	ldr	r0, [r7, #12]
 80173b8:	f7ff ff36 	bl	8017228 <SPI_WaitFlagStateUntilTimeout>
 80173bc:	4603      	mov	r3, r0
 80173be:	2b00      	cmp	r3, #0
 80173c0:	d01a      	beq.n	80173f8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80173c2:	68fb      	ldr	r3, [r7, #12]
 80173c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80173c6:	f043 0220 	orr.w	r2, r3, #32
 80173ca:	68fb      	ldr	r3, [r7, #12]
 80173cc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80173ce:	2303      	movs	r3, #3
 80173d0:	e013      	b.n	80173fa <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80173d2:	687b      	ldr	r3, [r7, #4]
 80173d4:	9300      	str	r3, [sp, #0]
 80173d6:	68bb      	ldr	r3, [r7, #8]
 80173d8:	2200      	movs	r2, #0
 80173da:	2101      	movs	r1, #1
 80173dc:	68f8      	ldr	r0, [r7, #12]
 80173de:	f7ff ff23 	bl	8017228 <SPI_WaitFlagStateUntilTimeout>
 80173e2:	4603      	mov	r3, r0
 80173e4:	2b00      	cmp	r3, #0
 80173e6:	d007      	beq.n	80173f8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80173e8:	68fb      	ldr	r3, [r7, #12]
 80173ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80173ec:	f043 0220 	orr.w	r2, r3, #32
 80173f0:	68fb      	ldr	r3, [r7, #12]
 80173f2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80173f4:	2303      	movs	r3, #3
 80173f6:	e000      	b.n	80173fa <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80173f8:	2300      	movs	r3, #0
}
 80173fa:	4618      	mov	r0, r3
 80173fc:	3710      	adds	r7, #16
 80173fe:	46bd      	mov	sp, r7
 8017400:	bd80      	pop	{r7, pc}
	...

08017404 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8017404:	b580      	push	{r7, lr}
 8017406:	b088      	sub	sp, #32
 8017408:	af02      	add	r7, sp, #8
 801740a:	60f8      	str	r0, [r7, #12]
 801740c:	60b9      	str	r1, [r7, #8]
 801740e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8017410:	4b1b      	ldr	r3, [pc, #108]	; (8017480 <SPI_EndRxTxTransaction+0x7c>)
 8017412:	681b      	ldr	r3, [r3, #0]
 8017414:	4a1b      	ldr	r2, [pc, #108]	; (8017484 <SPI_EndRxTxTransaction+0x80>)
 8017416:	fba2 2303 	umull	r2, r3, r2, r3
 801741a:	0d5b      	lsrs	r3, r3, #21
 801741c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8017420:	fb02 f303 	mul.w	r3, r2, r3
 8017424:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8017426:	68fb      	ldr	r3, [r7, #12]
 8017428:	685b      	ldr	r3, [r3, #4]
 801742a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801742e:	d112      	bne.n	8017456 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8017430:	687b      	ldr	r3, [r7, #4]
 8017432:	9300      	str	r3, [sp, #0]
 8017434:	68bb      	ldr	r3, [r7, #8]
 8017436:	2200      	movs	r2, #0
 8017438:	2180      	movs	r1, #128	; 0x80
 801743a:	68f8      	ldr	r0, [r7, #12]
 801743c:	f7ff fef4 	bl	8017228 <SPI_WaitFlagStateUntilTimeout>
 8017440:	4603      	mov	r3, r0
 8017442:	2b00      	cmp	r3, #0
 8017444:	d016      	beq.n	8017474 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8017446:	68fb      	ldr	r3, [r7, #12]
 8017448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801744a:	f043 0220 	orr.w	r2, r3, #32
 801744e:	68fb      	ldr	r3, [r7, #12]
 8017450:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8017452:	2303      	movs	r3, #3
 8017454:	e00f      	b.n	8017476 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8017456:	697b      	ldr	r3, [r7, #20]
 8017458:	2b00      	cmp	r3, #0
 801745a:	d00a      	beq.n	8017472 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 801745c:	697b      	ldr	r3, [r7, #20]
 801745e:	3b01      	subs	r3, #1
 8017460:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8017462:	68fb      	ldr	r3, [r7, #12]
 8017464:	681b      	ldr	r3, [r3, #0]
 8017466:	689b      	ldr	r3, [r3, #8]
 8017468:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801746c:	2b80      	cmp	r3, #128	; 0x80
 801746e:	d0f2      	beq.n	8017456 <SPI_EndRxTxTransaction+0x52>
 8017470:	e000      	b.n	8017474 <SPI_EndRxTxTransaction+0x70>
        break;
 8017472:	bf00      	nop
  }

  return HAL_OK;
 8017474:	2300      	movs	r3, #0
}
 8017476:	4618      	mov	r0, r3
 8017478:	3718      	adds	r7, #24
 801747a:	46bd      	mov	sp, r7
 801747c:	bd80      	pop	{r7, pc}
 801747e:	bf00      	nop
 8017480:	20000008 	.word	0x20000008
 8017484:	165e9f81 	.word	0x165e9f81

08017488 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8017488:	b580      	push	{r7, lr}
 801748a:	b082      	sub	sp, #8
 801748c:	af00      	add	r7, sp, #0
 801748e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8017490:	687b      	ldr	r3, [r7, #4]
 8017492:	2b00      	cmp	r3, #0
 8017494:	d101      	bne.n	801749a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8017496:	2301      	movs	r3, #1
 8017498:	e041      	b.n	801751e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801749a:	687b      	ldr	r3, [r7, #4]
 801749c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80174a0:	b2db      	uxtb	r3, r3
 80174a2:	2b00      	cmp	r3, #0
 80174a4:	d106      	bne.n	80174b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80174a6:	687b      	ldr	r3, [r7, #4]
 80174a8:	2200      	movs	r2, #0
 80174aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80174ae:	6878      	ldr	r0, [r7, #4]
 80174b0:	f7fb f9a0 	bl	80127f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80174b4:	687b      	ldr	r3, [r7, #4]
 80174b6:	2202      	movs	r2, #2
 80174b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80174bc:	687b      	ldr	r3, [r7, #4]
 80174be:	681a      	ldr	r2, [r3, #0]
 80174c0:	687b      	ldr	r3, [r7, #4]
 80174c2:	3304      	adds	r3, #4
 80174c4:	4619      	mov	r1, r3
 80174c6:	4610      	mov	r0, r2
 80174c8:	f000 fa96 	bl	80179f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80174cc:	687b      	ldr	r3, [r7, #4]
 80174ce:	2201      	movs	r2, #1
 80174d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80174d4:	687b      	ldr	r3, [r7, #4]
 80174d6:	2201      	movs	r2, #1
 80174d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80174dc:	687b      	ldr	r3, [r7, #4]
 80174de:	2201      	movs	r2, #1
 80174e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80174e4:	687b      	ldr	r3, [r7, #4]
 80174e6:	2201      	movs	r2, #1
 80174e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80174ec:	687b      	ldr	r3, [r7, #4]
 80174ee:	2201      	movs	r2, #1
 80174f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80174f4:	687b      	ldr	r3, [r7, #4]
 80174f6:	2201      	movs	r2, #1
 80174f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80174fc:	687b      	ldr	r3, [r7, #4]
 80174fe:	2201      	movs	r2, #1
 8017500:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8017504:	687b      	ldr	r3, [r7, #4]
 8017506:	2201      	movs	r2, #1
 8017508:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801750c:	687b      	ldr	r3, [r7, #4]
 801750e:	2201      	movs	r2, #1
 8017510:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8017514:	687b      	ldr	r3, [r7, #4]
 8017516:	2201      	movs	r2, #1
 8017518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801751c:	2300      	movs	r3, #0
}
 801751e:	4618      	mov	r0, r3
 8017520:	3708      	adds	r7, #8
 8017522:	46bd      	mov	sp, r7
 8017524:	bd80      	pop	{r7, pc}
	...

08017528 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8017528:	b480      	push	{r7}
 801752a:	b085      	sub	sp, #20
 801752c:	af00      	add	r7, sp, #0
 801752e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8017530:	687b      	ldr	r3, [r7, #4]
 8017532:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017536:	b2db      	uxtb	r3, r3
 8017538:	2b01      	cmp	r3, #1
 801753a:	d001      	beq.n	8017540 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801753c:	2301      	movs	r3, #1
 801753e:	e04e      	b.n	80175de <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8017540:	687b      	ldr	r3, [r7, #4]
 8017542:	2202      	movs	r2, #2
 8017544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8017548:	687b      	ldr	r3, [r7, #4]
 801754a:	681b      	ldr	r3, [r3, #0]
 801754c:	68da      	ldr	r2, [r3, #12]
 801754e:	687b      	ldr	r3, [r7, #4]
 8017550:	681b      	ldr	r3, [r3, #0]
 8017552:	f042 0201 	orr.w	r2, r2, #1
 8017556:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8017558:	687b      	ldr	r3, [r7, #4]
 801755a:	681b      	ldr	r3, [r3, #0]
 801755c:	4a23      	ldr	r2, [pc, #140]	; (80175ec <HAL_TIM_Base_Start_IT+0xc4>)
 801755e:	4293      	cmp	r3, r2
 8017560:	d022      	beq.n	80175a8 <HAL_TIM_Base_Start_IT+0x80>
 8017562:	687b      	ldr	r3, [r7, #4]
 8017564:	681b      	ldr	r3, [r3, #0]
 8017566:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801756a:	d01d      	beq.n	80175a8 <HAL_TIM_Base_Start_IT+0x80>
 801756c:	687b      	ldr	r3, [r7, #4]
 801756e:	681b      	ldr	r3, [r3, #0]
 8017570:	4a1f      	ldr	r2, [pc, #124]	; (80175f0 <HAL_TIM_Base_Start_IT+0xc8>)
 8017572:	4293      	cmp	r3, r2
 8017574:	d018      	beq.n	80175a8 <HAL_TIM_Base_Start_IT+0x80>
 8017576:	687b      	ldr	r3, [r7, #4]
 8017578:	681b      	ldr	r3, [r3, #0]
 801757a:	4a1e      	ldr	r2, [pc, #120]	; (80175f4 <HAL_TIM_Base_Start_IT+0xcc>)
 801757c:	4293      	cmp	r3, r2
 801757e:	d013      	beq.n	80175a8 <HAL_TIM_Base_Start_IT+0x80>
 8017580:	687b      	ldr	r3, [r7, #4]
 8017582:	681b      	ldr	r3, [r3, #0]
 8017584:	4a1c      	ldr	r2, [pc, #112]	; (80175f8 <HAL_TIM_Base_Start_IT+0xd0>)
 8017586:	4293      	cmp	r3, r2
 8017588:	d00e      	beq.n	80175a8 <HAL_TIM_Base_Start_IT+0x80>
 801758a:	687b      	ldr	r3, [r7, #4]
 801758c:	681b      	ldr	r3, [r3, #0]
 801758e:	4a1b      	ldr	r2, [pc, #108]	; (80175fc <HAL_TIM_Base_Start_IT+0xd4>)
 8017590:	4293      	cmp	r3, r2
 8017592:	d009      	beq.n	80175a8 <HAL_TIM_Base_Start_IT+0x80>
 8017594:	687b      	ldr	r3, [r7, #4]
 8017596:	681b      	ldr	r3, [r3, #0]
 8017598:	4a19      	ldr	r2, [pc, #100]	; (8017600 <HAL_TIM_Base_Start_IT+0xd8>)
 801759a:	4293      	cmp	r3, r2
 801759c:	d004      	beq.n	80175a8 <HAL_TIM_Base_Start_IT+0x80>
 801759e:	687b      	ldr	r3, [r7, #4]
 80175a0:	681b      	ldr	r3, [r3, #0]
 80175a2:	4a18      	ldr	r2, [pc, #96]	; (8017604 <HAL_TIM_Base_Start_IT+0xdc>)
 80175a4:	4293      	cmp	r3, r2
 80175a6:	d111      	bne.n	80175cc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80175a8:	687b      	ldr	r3, [r7, #4]
 80175aa:	681b      	ldr	r3, [r3, #0]
 80175ac:	689b      	ldr	r3, [r3, #8]
 80175ae:	f003 0307 	and.w	r3, r3, #7
 80175b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80175b4:	68fb      	ldr	r3, [r7, #12]
 80175b6:	2b06      	cmp	r3, #6
 80175b8:	d010      	beq.n	80175dc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80175ba:	687b      	ldr	r3, [r7, #4]
 80175bc:	681b      	ldr	r3, [r3, #0]
 80175be:	681a      	ldr	r2, [r3, #0]
 80175c0:	687b      	ldr	r3, [r7, #4]
 80175c2:	681b      	ldr	r3, [r3, #0]
 80175c4:	f042 0201 	orr.w	r2, r2, #1
 80175c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80175ca:	e007      	b.n	80175dc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80175cc:	687b      	ldr	r3, [r7, #4]
 80175ce:	681b      	ldr	r3, [r3, #0]
 80175d0:	681a      	ldr	r2, [r3, #0]
 80175d2:	687b      	ldr	r3, [r7, #4]
 80175d4:	681b      	ldr	r3, [r3, #0]
 80175d6:	f042 0201 	orr.w	r2, r2, #1
 80175da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80175dc:	2300      	movs	r3, #0
}
 80175de:	4618      	mov	r0, r3
 80175e0:	3714      	adds	r7, #20
 80175e2:	46bd      	mov	sp, r7
 80175e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175e8:	4770      	bx	lr
 80175ea:	bf00      	nop
 80175ec:	40010000 	.word	0x40010000
 80175f0:	40000400 	.word	0x40000400
 80175f4:	40000800 	.word	0x40000800
 80175f8:	40000c00 	.word	0x40000c00
 80175fc:	40010400 	.word	0x40010400
 8017600:	40014000 	.word	0x40014000
 8017604:	40001800 	.word	0x40001800

08017608 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8017608:	b580      	push	{r7, lr}
 801760a:	b082      	sub	sp, #8
 801760c:	af00      	add	r7, sp, #0
 801760e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8017610:	687b      	ldr	r3, [r7, #4]
 8017612:	681b      	ldr	r3, [r3, #0]
 8017614:	691b      	ldr	r3, [r3, #16]
 8017616:	f003 0302 	and.w	r3, r3, #2
 801761a:	2b02      	cmp	r3, #2
 801761c:	d122      	bne.n	8017664 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801761e:	687b      	ldr	r3, [r7, #4]
 8017620:	681b      	ldr	r3, [r3, #0]
 8017622:	68db      	ldr	r3, [r3, #12]
 8017624:	f003 0302 	and.w	r3, r3, #2
 8017628:	2b02      	cmp	r3, #2
 801762a:	d11b      	bne.n	8017664 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801762c:	687b      	ldr	r3, [r7, #4]
 801762e:	681b      	ldr	r3, [r3, #0]
 8017630:	f06f 0202 	mvn.w	r2, #2
 8017634:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8017636:	687b      	ldr	r3, [r7, #4]
 8017638:	2201      	movs	r2, #1
 801763a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801763c:	687b      	ldr	r3, [r7, #4]
 801763e:	681b      	ldr	r3, [r3, #0]
 8017640:	699b      	ldr	r3, [r3, #24]
 8017642:	f003 0303 	and.w	r3, r3, #3
 8017646:	2b00      	cmp	r3, #0
 8017648:	d003      	beq.n	8017652 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801764a:	6878      	ldr	r0, [r7, #4]
 801764c:	f000 f9b5 	bl	80179ba <HAL_TIM_IC_CaptureCallback>
 8017650:	e005      	b.n	801765e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8017652:	6878      	ldr	r0, [r7, #4]
 8017654:	f000 f9a7 	bl	80179a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8017658:	6878      	ldr	r0, [r7, #4]
 801765a:	f000 f9b8 	bl	80179ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801765e:	687b      	ldr	r3, [r7, #4]
 8017660:	2200      	movs	r2, #0
 8017662:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8017664:	687b      	ldr	r3, [r7, #4]
 8017666:	681b      	ldr	r3, [r3, #0]
 8017668:	691b      	ldr	r3, [r3, #16]
 801766a:	f003 0304 	and.w	r3, r3, #4
 801766e:	2b04      	cmp	r3, #4
 8017670:	d122      	bne.n	80176b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8017672:	687b      	ldr	r3, [r7, #4]
 8017674:	681b      	ldr	r3, [r3, #0]
 8017676:	68db      	ldr	r3, [r3, #12]
 8017678:	f003 0304 	and.w	r3, r3, #4
 801767c:	2b04      	cmp	r3, #4
 801767e:	d11b      	bne.n	80176b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8017680:	687b      	ldr	r3, [r7, #4]
 8017682:	681b      	ldr	r3, [r3, #0]
 8017684:	f06f 0204 	mvn.w	r2, #4
 8017688:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801768a:	687b      	ldr	r3, [r7, #4]
 801768c:	2202      	movs	r2, #2
 801768e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8017690:	687b      	ldr	r3, [r7, #4]
 8017692:	681b      	ldr	r3, [r3, #0]
 8017694:	699b      	ldr	r3, [r3, #24]
 8017696:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801769a:	2b00      	cmp	r3, #0
 801769c:	d003      	beq.n	80176a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801769e:	6878      	ldr	r0, [r7, #4]
 80176a0:	f000 f98b 	bl	80179ba <HAL_TIM_IC_CaptureCallback>
 80176a4:	e005      	b.n	80176b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80176a6:	6878      	ldr	r0, [r7, #4]
 80176a8:	f000 f97d 	bl	80179a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80176ac:	6878      	ldr	r0, [r7, #4]
 80176ae:	f000 f98e 	bl	80179ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80176b2:	687b      	ldr	r3, [r7, #4]
 80176b4:	2200      	movs	r2, #0
 80176b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80176b8:	687b      	ldr	r3, [r7, #4]
 80176ba:	681b      	ldr	r3, [r3, #0]
 80176bc:	691b      	ldr	r3, [r3, #16]
 80176be:	f003 0308 	and.w	r3, r3, #8
 80176c2:	2b08      	cmp	r3, #8
 80176c4:	d122      	bne.n	801770c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80176c6:	687b      	ldr	r3, [r7, #4]
 80176c8:	681b      	ldr	r3, [r3, #0]
 80176ca:	68db      	ldr	r3, [r3, #12]
 80176cc:	f003 0308 	and.w	r3, r3, #8
 80176d0:	2b08      	cmp	r3, #8
 80176d2:	d11b      	bne.n	801770c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80176d4:	687b      	ldr	r3, [r7, #4]
 80176d6:	681b      	ldr	r3, [r3, #0]
 80176d8:	f06f 0208 	mvn.w	r2, #8
 80176dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80176de:	687b      	ldr	r3, [r7, #4]
 80176e0:	2204      	movs	r2, #4
 80176e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80176e4:	687b      	ldr	r3, [r7, #4]
 80176e6:	681b      	ldr	r3, [r3, #0]
 80176e8:	69db      	ldr	r3, [r3, #28]
 80176ea:	f003 0303 	and.w	r3, r3, #3
 80176ee:	2b00      	cmp	r3, #0
 80176f0:	d003      	beq.n	80176fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80176f2:	6878      	ldr	r0, [r7, #4]
 80176f4:	f000 f961 	bl	80179ba <HAL_TIM_IC_CaptureCallback>
 80176f8:	e005      	b.n	8017706 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80176fa:	6878      	ldr	r0, [r7, #4]
 80176fc:	f000 f953 	bl	80179a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8017700:	6878      	ldr	r0, [r7, #4]
 8017702:	f000 f964 	bl	80179ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8017706:	687b      	ldr	r3, [r7, #4]
 8017708:	2200      	movs	r2, #0
 801770a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801770c:	687b      	ldr	r3, [r7, #4]
 801770e:	681b      	ldr	r3, [r3, #0]
 8017710:	691b      	ldr	r3, [r3, #16]
 8017712:	f003 0310 	and.w	r3, r3, #16
 8017716:	2b10      	cmp	r3, #16
 8017718:	d122      	bne.n	8017760 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801771a:	687b      	ldr	r3, [r7, #4]
 801771c:	681b      	ldr	r3, [r3, #0]
 801771e:	68db      	ldr	r3, [r3, #12]
 8017720:	f003 0310 	and.w	r3, r3, #16
 8017724:	2b10      	cmp	r3, #16
 8017726:	d11b      	bne.n	8017760 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8017728:	687b      	ldr	r3, [r7, #4]
 801772a:	681b      	ldr	r3, [r3, #0]
 801772c:	f06f 0210 	mvn.w	r2, #16
 8017730:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8017732:	687b      	ldr	r3, [r7, #4]
 8017734:	2208      	movs	r2, #8
 8017736:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8017738:	687b      	ldr	r3, [r7, #4]
 801773a:	681b      	ldr	r3, [r3, #0]
 801773c:	69db      	ldr	r3, [r3, #28]
 801773e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8017742:	2b00      	cmp	r3, #0
 8017744:	d003      	beq.n	801774e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8017746:	6878      	ldr	r0, [r7, #4]
 8017748:	f000 f937 	bl	80179ba <HAL_TIM_IC_CaptureCallback>
 801774c:	e005      	b.n	801775a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801774e:	6878      	ldr	r0, [r7, #4]
 8017750:	f000 f929 	bl	80179a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8017754:	6878      	ldr	r0, [r7, #4]
 8017756:	f000 f93a 	bl	80179ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801775a:	687b      	ldr	r3, [r7, #4]
 801775c:	2200      	movs	r2, #0
 801775e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8017760:	687b      	ldr	r3, [r7, #4]
 8017762:	681b      	ldr	r3, [r3, #0]
 8017764:	691b      	ldr	r3, [r3, #16]
 8017766:	f003 0301 	and.w	r3, r3, #1
 801776a:	2b01      	cmp	r3, #1
 801776c:	d10e      	bne.n	801778c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801776e:	687b      	ldr	r3, [r7, #4]
 8017770:	681b      	ldr	r3, [r3, #0]
 8017772:	68db      	ldr	r3, [r3, #12]
 8017774:	f003 0301 	and.w	r3, r3, #1
 8017778:	2b01      	cmp	r3, #1
 801777a:	d107      	bne.n	801778c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801777c:	687b      	ldr	r3, [r7, #4]
 801777e:	681b      	ldr	r3, [r3, #0]
 8017780:	f06f 0201 	mvn.w	r2, #1
 8017784:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8017786:	6878      	ldr	r0, [r7, #4]
 8017788:	f7fa fb5a 	bl	8011e40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801778c:	687b      	ldr	r3, [r7, #4]
 801778e:	681b      	ldr	r3, [r3, #0]
 8017790:	691b      	ldr	r3, [r3, #16]
 8017792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017796:	2b80      	cmp	r3, #128	; 0x80
 8017798:	d10e      	bne.n	80177b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801779a:	687b      	ldr	r3, [r7, #4]
 801779c:	681b      	ldr	r3, [r3, #0]
 801779e:	68db      	ldr	r3, [r3, #12]
 80177a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80177a4:	2b80      	cmp	r3, #128	; 0x80
 80177a6:	d107      	bne.n	80177b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80177a8:	687b      	ldr	r3, [r7, #4]
 80177aa:	681b      	ldr	r3, [r3, #0]
 80177ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80177b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80177b2:	6878      	ldr	r0, [r7, #4]
 80177b4:	f000 fae0 	bl	8017d78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80177b8:	687b      	ldr	r3, [r7, #4]
 80177ba:	681b      	ldr	r3, [r3, #0]
 80177bc:	691b      	ldr	r3, [r3, #16]
 80177be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80177c2:	2b40      	cmp	r3, #64	; 0x40
 80177c4:	d10e      	bne.n	80177e4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80177c6:	687b      	ldr	r3, [r7, #4]
 80177c8:	681b      	ldr	r3, [r3, #0]
 80177ca:	68db      	ldr	r3, [r3, #12]
 80177cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80177d0:	2b40      	cmp	r3, #64	; 0x40
 80177d2:	d107      	bne.n	80177e4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80177d4:	687b      	ldr	r3, [r7, #4]
 80177d6:	681b      	ldr	r3, [r3, #0]
 80177d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80177dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80177de:	6878      	ldr	r0, [r7, #4]
 80177e0:	f000 f8ff 	bl	80179e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80177e4:	687b      	ldr	r3, [r7, #4]
 80177e6:	681b      	ldr	r3, [r3, #0]
 80177e8:	691b      	ldr	r3, [r3, #16]
 80177ea:	f003 0320 	and.w	r3, r3, #32
 80177ee:	2b20      	cmp	r3, #32
 80177f0:	d10e      	bne.n	8017810 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80177f2:	687b      	ldr	r3, [r7, #4]
 80177f4:	681b      	ldr	r3, [r3, #0]
 80177f6:	68db      	ldr	r3, [r3, #12]
 80177f8:	f003 0320 	and.w	r3, r3, #32
 80177fc:	2b20      	cmp	r3, #32
 80177fe:	d107      	bne.n	8017810 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8017800:	687b      	ldr	r3, [r7, #4]
 8017802:	681b      	ldr	r3, [r3, #0]
 8017804:	f06f 0220 	mvn.w	r2, #32
 8017808:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801780a:	6878      	ldr	r0, [r7, #4]
 801780c:	f000 faaa 	bl	8017d64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8017810:	bf00      	nop
 8017812:	3708      	adds	r7, #8
 8017814:	46bd      	mov	sp, r7
 8017816:	bd80      	pop	{r7, pc}

08017818 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8017818:	b580      	push	{r7, lr}
 801781a:	b084      	sub	sp, #16
 801781c:	af00      	add	r7, sp, #0
 801781e:	6078      	str	r0, [r7, #4]
 8017820:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8017822:	2300      	movs	r3, #0
 8017824:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8017826:	687b      	ldr	r3, [r7, #4]
 8017828:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801782c:	2b01      	cmp	r3, #1
 801782e:	d101      	bne.n	8017834 <HAL_TIM_ConfigClockSource+0x1c>
 8017830:	2302      	movs	r3, #2
 8017832:	e0b4      	b.n	801799e <HAL_TIM_ConfigClockSource+0x186>
 8017834:	687b      	ldr	r3, [r7, #4]
 8017836:	2201      	movs	r2, #1
 8017838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801783c:	687b      	ldr	r3, [r7, #4]
 801783e:	2202      	movs	r2, #2
 8017840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8017844:	687b      	ldr	r3, [r7, #4]
 8017846:	681b      	ldr	r3, [r3, #0]
 8017848:	689b      	ldr	r3, [r3, #8]
 801784a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801784c:	68bb      	ldr	r3, [r7, #8]
 801784e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8017852:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8017854:	68bb      	ldr	r3, [r7, #8]
 8017856:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801785a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 801785c:	687b      	ldr	r3, [r7, #4]
 801785e:	681b      	ldr	r3, [r3, #0]
 8017860:	68ba      	ldr	r2, [r7, #8]
 8017862:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8017864:	683b      	ldr	r3, [r7, #0]
 8017866:	681b      	ldr	r3, [r3, #0]
 8017868:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801786c:	d03e      	beq.n	80178ec <HAL_TIM_ConfigClockSource+0xd4>
 801786e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8017872:	f200 8087 	bhi.w	8017984 <HAL_TIM_ConfigClockSource+0x16c>
 8017876:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801787a:	f000 8086 	beq.w	801798a <HAL_TIM_ConfigClockSource+0x172>
 801787e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8017882:	d87f      	bhi.n	8017984 <HAL_TIM_ConfigClockSource+0x16c>
 8017884:	2b70      	cmp	r3, #112	; 0x70
 8017886:	d01a      	beq.n	80178be <HAL_TIM_ConfigClockSource+0xa6>
 8017888:	2b70      	cmp	r3, #112	; 0x70
 801788a:	d87b      	bhi.n	8017984 <HAL_TIM_ConfigClockSource+0x16c>
 801788c:	2b60      	cmp	r3, #96	; 0x60
 801788e:	d050      	beq.n	8017932 <HAL_TIM_ConfigClockSource+0x11a>
 8017890:	2b60      	cmp	r3, #96	; 0x60
 8017892:	d877      	bhi.n	8017984 <HAL_TIM_ConfigClockSource+0x16c>
 8017894:	2b50      	cmp	r3, #80	; 0x50
 8017896:	d03c      	beq.n	8017912 <HAL_TIM_ConfigClockSource+0xfa>
 8017898:	2b50      	cmp	r3, #80	; 0x50
 801789a:	d873      	bhi.n	8017984 <HAL_TIM_ConfigClockSource+0x16c>
 801789c:	2b40      	cmp	r3, #64	; 0x40
 801789e:	d058      	beq.n	8017952 <HAL_TIM_ConfigClockSource+0x13a>
 80178a0:	2b40      	cmp	r3, #64	; 0x40
 80178a2:	d86f      	bhi.n	8017984 <HAL_TIM_ConfigClockSource+0x16c>
 80178a4:	2b30      	cmp	r3, #48	; 0x30
 80178a6:	d064      	beq.n	8017972 <HAL_TIM_ConfigClockSource+0x15a>
 80178a8:	2b30      	cmp	r3, #48	; 0x30
 80178aa:	d86b      	bhi.n	8017984 <HAL_TIM_ConfigClockSource+0x16c>
 80178ac:	2b20      	cmp	r3, #32
 80178ae:	d060      	beq.n	8017972 <HAL_TIM_ConfigClockSource+0x15a>
 80178b0:	2b20      	cmp	r3, #32
 80178b2:	d867      	bhi.n	8017984 <HAL_TIM_ConfigClockSource+0x16c>
 80178b4:	2b00      	cmp	r3, #0
 80178b6:	d05c      	beq.n	8017972 <HAL_TIM_ConfigClockSource+0x15a>
 80178b8:	2b10      	cmp	r3, #16
 80178ba:	d05a      	beq.n	8017972 <HAL_TIM_ConfigClockSource+0x15a>
 80178bc:	e062      	b.n	8017984 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80178be:	687b      	ldr	r3, [r7, #4]
 80178c0:	6818      	ldr	r0, [r3, #0]
 80178c2:	683b      	ldr	r3, [r7, #0]
 80178c4:	6899      	ldr	r1, [r3, #8]
 80178c6:	683b      	ldr	r3, [r7, #0]
 80178c8:	685a      	ldr	r2, [r3, #4]
 80178ca:	683b      	ldr	r3, [r7, #0]
 80178cc:	68db      	ldr	r3, [r3, #12]
 80178ce:	f000 f9ad 	bl	8017c2c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80178d2:	687b      	ldr	r3, [r7, #4]
 80178d4:	681b      	ldr	r3, [r3, #0]
 80178d6:	689b      	ldr	r3, [r3, #8]
 80178d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80178da:	68bb      	ldr	r3, [r7, #8]
 80178dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80178e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80178e2:	687b      	ldr	r3, [r7, #4]
 80178e4:	681b      	ldr	r3, [r3, #0]
 80178e6:	68ba      	ldr	r2, [r7, #8]
 80178e8:	609a      	str	r2, [r3, #8]
      break;
 80178ea:	e04f      	b.n	801798c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80178ec:	687b      	ldr	r3, [r7, #4]
 80178ee:	6818      	ldr	r0, [r3, #0]
 80178f0:	683b      	ldr	r3, [r7, #0]
 80178f2:	6899      	ldr	r1, [r3, #8]
 80178f4:	683b      	ldr	r3, [r7, #0]
 80178f6:	685a      	ldr	r2, [r3, #4]
 80178f8:	683b      	ldr	r3, [r7, #0]
 80178fa:	68db      	ldr	r3, [r3, #12]
 80178fc:	f000 f996 	bl	8017c2c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8017900:	687b      	ldr	r3, [r7, #4]
 8017902:	681b      	ldr	r3, [r3, #0]
 8017904:	689a      	ldr	r2, [r3, #8]
 8017906:	687b      	ldr	r3, [r7, #4]
 8017908:	681b      	ldr	r3, [r3, #0]
 801790a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801790e:	609a      	str	r2, [r3, #8]
      break;
 8017910:	e03c      	b.n	801798c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8017912:	687b      	ldr	r3, [r7, #4]
 8017914:	6818      	ldr	r0, [r3, #0]
 8017916:	683b      	ldr	r3, [r7, #0]
 8017918:	6859      	ldr	r1, [r3, #4]
 801791a:	683b      	ldr	r3, [r7, #0]
 801791c:	68db      	ldr	r3, [r3, #12]
 801791e:	461a      	mov	r2, r3
 8017920:	f000 f90a 	bl	8017b38 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8017924:	687b      	ldr	r3, [r7, #4]
 8017926:	681b      	ldr	r3, [r3, #0]
 8017928:	2150      	movs	r1, #80	; 0x50
 801792a:	4618      	mov	r0, r3
 801792c:	f000 f963 	bl	8017bf6 <TIM_ITRx_SetConfig>
      break;
 8017930:	e02c      	b.n	801798c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8017932:	687b      	ldr	r3, [r7, #4]
 8017934:	6818      	ldr	r0, [r3, #0]
 8017936:	683b      	ldr	r3, [r7, #0]
 8017938:	6859      	ldr	r1, [r3, #4]
 801793a:	683b      	ldr	r3, [r7, #0]
 801793c:	68db      	ldr	r3, [r3, #12]
 801793e:	461a      	mov	r2, r3
 8017940:	f000 f929 	bl	8017b96 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8017944:	687b      	ldr	r3, [r7, #4]
 8017946:	681b      	ldr	r3, [r3, #0]
 8017948:	2160      	movs	r1, #96	; 0x60
 801794a:	4618      	mov	r0, r3
 801794c:	f000 f953 	bl	8017bf6 <TIM_ITRx_SetConfig>
      break;
 8017950:	e01c      	b.n	801798c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8017952:	687b      	ldr	r3, [r7, #4]
 8017954:	6818      	ldr	r0, [r3, #0]
 8017956:	683b      	ldr	r3, [r7, #0]
 8017958:	6859      	ldr	r1, [r3, #4]
 801795a:	683b      	ldr	r3, [r7, #0]
 801795c:	68db      	ldr	r3, [r3, #12]
 801795e:	461a      	mov	r2, r3
 8017960:	f000 f8ea 	bl	8017b38 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8017964:	687b      	ldr	r3, [r7, #4]
 8017966:	681b      	ldr	r3, [r3, #0]
 8017968:	2140      	movs	r1, #64	; 0x40
 801796a:	4618      	mov	r0, r3
 801796c:	f000 f943 	bl	8017bf6 <TIM_ITRx_SetConfig>
      break;
 8017970:	e00c      	b.n	801798c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8017972:	687b      	ldr	r3, [r7, #4]
 8017974:	681a      	ldr	r2, [r3, #0]
 8017976:	683b      	ldr	r3, [r7, #0]
 8017978:	681b      	ldr	r3, [r3, #0]
 801797a:	4619      	mov	r1, r3
 801797c:	4610      	mov	r0, r2
 801797e:	f000 f93a 	bl	8017bf6 <TIM_ITRx_SetConfig>
      break;
 8017982:	e003      	b.n	801798c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8017984:	2301      	movs	r3, #1
 8017986:	73fb      	strb	r3, [r7, #15]
      break;
 8017988:	e000      	b.n	801798c <HAL_TIM_ConfigClockSource+0x174>
      break;
 801798a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801798c:	687b      	ldr	r3, [r7, #4]
 801798e:	2201      	movs	r2, #1
 8017990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8017994:	687b      	ldr	r3, [r7, #4]
 8017996:	2200      	movs	r2, #0
 8017998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801799c:	7bfb      	ldrb	r3, [r7, #15]
}
 801799e:	4618      	mov	r0, r3
 80179a0:	3710      	adds	r7, #16
 80179a2:	46bd      	mov	sp, r7
 80179a4:	bd80      	pop	{r7, pc}

080179a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80179a6:	b480      	push	{r7}
 80179a8:	b083      	sub	sp, #12
 80179aa:	af00      	add	r7, sp, #0
 80179ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80179ae:	bf00      	nop
 80179b0:	370c      	adds	r7, #12
 80179b2:	46bd      	mov	sp, r7
 80179b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179b8:	4770      	bx	lr

080179ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80179ba:	b480      	push	{r7}
 80179bc:	b083      	sub	sp, #12
 80179be:	af00      	add	r7, sp, #0
 80179c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80179c2:	bf00      	nop
 80179c4:	370c      	adds	r7, #12
 80179c6:	46bd      	mov	sp, r7
 80179c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179cc:	4770      	bx	lr

080179ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80179ce:	b480      	push	{r7}
 80179d0:	b083      	sub	sp, #12
 80179d2:	af00      	add	r7, sp, #0
 80179d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80179d6:	bf00      	nop
 80179d8:	370c      	adds	r7, #12
 80179da:	46bd      	mov	sp, r7
 80179dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179e0:	4770      	bx	lr

080179e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80179e2:	b480      	push	{r7}
 80179e4:	b083      	sub	sp, #12
 80179e6:	af00      	add	r7, sp, #0
 80179e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80179ea:	bf00      	nop
 80179ec:	370c      	adds	r7, #12
 80179ee:	46bd      	mov	sp, r7
 80179f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179f4:	4770      	bx	lr
	...

080179f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80179f8:	b480      	push	{r7}
 80179fa:	b085      	sub	sp, #20
 80179fc:	af00      	add	r7, sp, #0
 80179fe:	6078      	str	r0, [r7, #4]
 8017a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8017a02:	687b      	ldr	r3, [r7, #4]
 8017a04:	681b      	ldr	r3, [r3, #0]
 8017a06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8017a08:	687b      	ldr	r3, [r7, #4]
 8017a0a:	4a40      	ldr	r2, [pc, #256]	; (8017b0c <TIM_Base_SetConfig+0x114>)
 8017a0c:	4293      	cmp	r3, r2
 8017a0e:	d013      	beq.n	8017a38 <TIM_Base_SetConfig+0x40>
 8017a10:	687b      	ldr	r3, [r7, #4]
 8017a12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8017a16:	d00f      	beq.n	8017a38 <TIM_Base_SetConfig+0x40>
 8017a18:	687b      	ldr	r3, [r7, #4]
 8017a1a:	4a3d      	ldr	r2, [pc, #244]	; (8017b10 <TIM_Base_SetConfig+0x118>)
 8017a1c:	4293      	cmp	r3, r2
 8017a1e:	d00b      	beq.n	8017a38 <TIM_Base_SetConfig+0x40>
 8017a20:	687b      	ldr	r3, [r7, #4]
 8017a22:	4a3c      	ldr	r2, [pc, #240]	; (8017b14 <TIM_Base_SetConfig+0x11c>)
 8017a24:	4293      	cmp	r3, r2
 8017a26:	d007      	beq.n	8017a38 <TIM_Base_SetConfig+0x40>
 8017a28:	687b      	ldr	r3, [r7, #4]
 8017a2a:	4a3b      	ldr	r2, [pc, #236]	; (8017b18 <TIM_Base_SetConfig+0x120>)
 8017a2c:	4293      	cmp	r3, r2
 8017a2e:	d003      	beq.n	8017a38 <TIM_Base_SetConfig+0x40>
 8017a30:	687b      	ldr	r3, [r7, #4]
 8017a32:	4a3a      	ldr	r2, [pc, #232]	; (8017b1c <TIM_Base_SetConfig+0x124>)
 8017a34:	4293      	cmp	r3, r2
 8017a36:	d108      	bne.n	8017a4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8017a38:	68fb      	ldr	r3, [r7, #12]
 8017a3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8017a3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8017a40:	683b      	ldr	r3, [r7, #0]
 8017a42:	685b      	ldr	r3, [r3, #4]
 8017a44:	68fa      	ldr	r2, [r7, #12]
 8017a46:	4313      	orrs	r3, r2
 8017a48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8017a4a:	687b      	ldr	r3, [r7, #4]
 8017a4c:	4a2f      	ldr	r2, [pc, #188]	; (8017b0c <TIM_Base_SetConfig+0x114>)
 8017a4e:	4293      	cmp	r3, r2
 8017a50:	d02b      	beq.n	8017aaa <TIM_Base_SetConfig+0xb2>
 8017a52:	687b      	ldr	r3, [r7, #4]
 8017a54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8017a58:	d027      	beq.n	8017aaa <TIM_Base_SetConfig+0xb2>
 8017a5a:	687b      	ldr	r3, [r7, #4]
 8017a5c:	4a2c      	ldr	r2, [pc, #176]	; (8017b10 <TIM_Base_SetConfig+0x118>)
 8017a5e:	4293      	cmp	r3, r2
 8017a60:	d023      	beq.n	8017aaa <TIM_Base_SetConfig+0xb2>
 8017a62:	687b      	ldr	r3, [r7, #4]
 8017a64:	4a2b      	ldr	r2, [pc, #172]	; (8017b14 <TIM_Base_SetConfig+0x11c>)
 8017a66:	4293      	cmp	r3, r2
 8017a68:	d01f      	beq.n	8017aaa <TIM_Base_SetConfig+0xb2>
 8017a6a:	687b      	ldr	r3, [r7, #4]
 8017a6c:	4a2a      	ldr	r2, [pc, #168]	; (8017b18 <TIM_Base_SetConfig+0x120>)
 8017a6e:	4293      	cmp	r3, r2
 8017a70:	d01b      	beq.n	8017aaa <TIM_Base_SetConfig+0xb2>
 8017a72:	687b      	ldr	r3, [r7, #4]
 8017a74:	4a29      	ldr	r2, [pc, #164]	; (8017b1c <TIM_Base_SetConfig+0x124>)
 8017a76:	4293      	cmp	r3, r2
 8017a78:	d017      	beq.n	8017aaa <TIM_Base_SetConfig+0xb2>
 8017a7a:	687b      	ldr	r3, [r7, #4]
 8017a7c:	4a28      	ldr	r2, [pc, #160]	; (8017b20 <TIM_Base_SetConfig+0x128>)
 8017a7e:	4293      	cmp	r3, r2
 8017a80:	d013      	beq.n	8017aaa <TIM_Base_SetConfig+0xb2>
 8017a82:	687b      	ldr	r3, [r7, #4]
 8017a84:	4a27      	ldr	r2, [pc, #156]	; (8017b24 <TIM_Base_SetConfig+0x12c>)
 8017a86:	4293      	cmp	r3, r2
 8017a88:	d00f      	beq.n	8017aaa <TIM_Base_SetConfig+0xb2>
 8017a8a:	687b      	ldr	r3, [r7, #4]
 8017a8c:	4a26      	ldr	r2, [pc, #152]	; (8017b28 <TIM_Base_SetConfig+0x130>)
 8017a8e:	4293      	cmp	r3, r2
 8017a90:	d00b      	beq.n	8017aaa <TIM_Base_SetConfig+0xb2>
 8017a92:	687b      	ldr	r3, [r7, #4]
 8017a94:	4a25      	ldr	r2, [pc, #148]	; (8017b2c <TIM_Base_SetConfig+0x134>)
 8017a96:	4293      	cmp	r3, r2
 8017a98:	d007      	beq.n	8017aaa <TIM_Base_SetConfig+0xb2>
 8017a9a:	687b      	ldr	r3, [r7, #4]
 8017a9c:	4a24      	ldr	r2, [pc, #144]	; (8017b30 <TIM_Base_SetConfig+0x138>)
 8017a9e:	4293      	cmp	r3, r2
 8017aa0:	d003      	beq.n	8017aaa <TIM_Base_SetConfig+0xb2>
 8017aa2:	687b      	ldr	r3, [r7, #4]
 8017aa4:	4a23      	ldr	r2, [pc, #140]	; (8017b34 <TIM_Base_SetConfig+0x13c>)
 8017aa6:	4293      	cmp	r3, r2
 8017aa8:	d108      	bne.n	8017abc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8017aaa:	68fb      	ldr	r3, [r7, #12]
 8017aac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8017ab0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8017ab2:	683b      	ldr	r3, [r7, #0]
 8017ab4:	68db      	ldr	r3, [r3, #12]
 8017ab6:	68fa      	ldr	r2, [r7, #12]
 8017ab8:	4313      	orrs	r3, r2
 8017aba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8017abc:	68fb      	ldr	r3, [r7, #12]
 8017abe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8017ac2:	683b      	ldr	r3, [r7, #0]
 8017ac4:	695b      	ldr	r3, [r3, #20]
 8017ac6:	4313      	orrs	r3, r2
 8017ac8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8017aca:	687b      	ldr	r3, [r7, #4]
 8017acc:	68fa      	ldr	r2, [r7, #12]
 8017ace:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8017ad0:	683b      	ldr	r3, [r7, #0]
 8017ad2:	689a      	ldr	r2, [r3, #8]
 8017ad4:	687b      	ldr	r3, [r7, #4]
 8017ad6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8017ad8:	683b      	ldr	r3, [r7, #0]
 8017ada:	681a      	ldr	r2, [r3, #0]
 8017adc:	687b      	ldr	r3, [r7, #4]
 8017ade:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8017ae0:	687b      	ldr	r3, [r7, #4]
 8017ae2:	4a0a      	ldr	r2, [pc, #40]	; (8017b0c <TIM_Base_SetConfig+0x114>)
 8017ae4:	4293      	cmp	r3, r2
 8017ae6:	d003      	beq.n	8017af0 <TIM_Base_SetConfig+0xf8>
 8017ae8:	687b      	ldr	r3, [r7, #4]
 8017aea:	4a0c      	ldr	r2, [pc, #48]	; (8017b1c <TIM_Base_SetConfig+0x124>)
 8017aec:	4293      	cmp	r3, r2
 8017aee:	d103      	bne.n	8017af8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8017af0:	683b      	ldr	r3, [r7, #0]
 8017af2:	691a      	ldr	r2, [r3, #16]
 8017af4:	687b      	ldr	r3, [r7, #4]
 8017af6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8017af8:	687b      	ldr	r3, [r7, #4]
 8017afa:	2201      	movs	r2, #1
 8017afc:	615a      	str	r2, [r3, #20]
}
 8017afe:	bf00      	nop
 8017b00:	3714      	adds	r7, #20
 8017b02:	46bd      	mov	sp, r7
 8017b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b08:	4770      	bx	lr
 8017b0a:	bf00      	nop
 8017b0c:	40010000 	.word	0x40010000
 8017b10:	40000400 	.word	0x40000400
 8017b14:	40000800 	.word	0x40000800
 8017b18:	40000c00 	.word	0x40000c00
 8017b1c:	40010400 	.word	0x40010400
 8017b20:	40014000 	.word	0x40014000
 8017b24:	40014400 	.word	0x40014400
 8017b28:	40014800 	.word	0x40014800
 8017b2c:	40001800 	.word	0x40001800
 8017b30:	40001c00 	.word	0x40001c00
 8017b34:	40002000 	.word	0x40002000

08017b38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8017b38:	b480      	push	{r7}
 8017b3a:	b087      	sub	sp, #28
 8017b3c:	af00      	add	r7, sp, #0
 8017b3e:	60f8      	str	r0, [r7, #12]
 8017b40:	60b9      	str	r1, [r7, #8]
 8017b42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8017b44:	68fb      	ldr	r3, [r7, #12]
 8017b46:	6a1b      	ldr	r3, [r3, #32]
 8017b48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8017b4a:	68fb      	ldr	r3, [r7, #12]
 8017b4c:	6a1b      	ldr	r3, [r3, #32]
 8017b4e:	f023 0201 	bic.w	r2, r3, #1
 8017b52:	68fb      	ldr	r3, [r7, #12]
 8017b54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8017b56:	68fb      	ldr	r3, [r7, #12]
 8017b58:	699b      	ldr	r3, [r3, #24]
 8017b5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8017b5c:	693b      	ldr	r3, [r7, #16]
 8017b5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8017b62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8017b64:	687b      	ldr	r3, [r7, #4]
 8017b66:	011b      	lsls	r3, r3, #4
 8017b68:	693a      	ldr	r2, [r7, #16]
 8017b6a:	4313      	orrs	r3, r2
 8017b6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8017b6e:	697b      	ldr	r3, [r7, #20]
 8017b70:	f023 030a 	bic.w	r3, r3, #10
 8017b74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8017b76:	697a      	ldr	r2, [r7, #20]
 8017b78:	68bb      	ldr	r3, [r7, #8]
 8017b7a:	4313      	orrs	r3, r2
 8017b7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8017b7e:	68fb      	ldr	r3, [r7, #12]
 8017b80:	693a      	ldr	r2, [r7, #16]
 8017b82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8017b84:	68fb      	ldr	r3, [r7, #12]
 8017b86:	697a      	ldr	r2, [r7, #20]
 8017b88:	621a      	str	r2, [r3, #32]
}
 8017b8a:	bf00      	nop
 8017b8c:	371c      	adds	r7, #28
 8017b8e:	46bd      	mov	sp, r7
 8017b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b94:	4770      	bx	lr

08017b96 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8017b96:	b480      	push	{r7}
 8017b98:	b087      	sub	sp, #28
 8017b9a:	af00      	add	r7, sp, #0
 8017b9c:	60f8      	str	r0, [r7, #12]
 8017b9e:	60b9      	str	r1, [r7, #8]
 8017ba0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8017ba2:	68fb      	ldr	r3, [r7, #12]
 8017ba4:	6a1b      	ldr	r3, [r3, #32]
 8017ba6:	f023 0210 	bic.w	r2, r3, #16
 8017baa:	68fb      	ldr	r3, [r7, #12]
 8017bac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8017bae:	68fb      	ldr	r3, [r7, #12]
 8017bb0:	699b      	ldr	r3, [r3, #24]
 8017bb2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8017bb4:	68fb      	ldr	r3, [r7, #12]
 8017bb6:	6a1b      	ldr	r3, [r3, #32]
 8017bb8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8017bba:	697b      	ldr	r3, [r7, #20]
 8017bbc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8017bc0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8017bc2:	687b      	ldr	r3, [r7, #4]
 8017bc4:	031b      	lsls	r3, r3, #12
 8017bc6:	697a      	ldr	r2, [r7, #20]
 8017bc8:	4313      	orrs	r3, r2
 8017bca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8017bcc:	693b      	ldr	r3, [r7, #16]
 8017bce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8017bd2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8017bd4:	68bb      	ldr	r3, [r7, #8]
 8017bd6:	011b      	lsls	r3, r3, #4
 8017bd8:	693a      	ldr	r2, [r7, #16]
 8017bda:	4313      	orrs	r3, r2
 8017bdc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8017bde:	68fb      	ldr	r3, [r7, #12]
 8017be0:	697a      	ldr	r2, [r7, #20]
 8017be2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8017be4:	68fb      	ldr	r3, [r7, #12]
 8017be6:	693a      	ldr	r2, [r7, #16]
 8017be8:	621a      	str	r2, [r3, #32]
}
 8017bea:	bf00      	nop
 8017bec:	371c      	adds	r7, #28
 8017bee:	46bd      	mov	sp, r7
 8017bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bf4:	4770      	bx	lr

08017bf6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8017bf6:	b480      	push	{r7}
 8017bf8:	b085      	sub	sp, #20
 8017bfa:	af00      	add	r7, sp, #0
 8017bfc:	6078      	str	r0, [r7, #4]
 8017bfe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8017c00:	687b      	ldr	r3, [r7, #4]
 8017c02:	689b      	ldr	r3, [r3, #8]
 8017c04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8017c06:	68fb      	ldr	r3, [r7, #12]
 8017c08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8017c0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8017c0e:	683a      	ldr	r2, [r7, #0]
 8017c10:	68fb      	ldr	r3, [r7, #12]
 8017c12:	4313      	orrs	r3, r2
 8017c14:	f043 0307 	orr.w	r3, r3, #7
 8017c18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8017c1a:	687b      	ldr	r3, [r7, #4]
 8017c1c:	68fa      	ldr	r2, [r7, #12]
 8017c1e:	609a      	str	r2, [r3, #8]
}
 8017c20:	bf00      	nop
 8017c22:	3714      	adds	r7, #20
 8017c24:	46bd      	mov	sp, r7
 8017c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c2a:	4770      	bx	lr

08017c2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8017c2c:	b480      	push	{r7}
 8017c2e:	b087      	sub	sp, #28
 8017c30:	af00      	add	r7, sp, #0
 8017c32:	60f8      	str	r0, [r7, #12]
 8017c34:	60b9      	str	r1, [r7, #8]
 8017c36:	607a      	str	r2, [r7, #4]
 8017c38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8017c3a:	68fb      	ldr	r3, [r7, #12]
 8017c3c:	689b      	ldr	r3, [r3, #8]
 8017c3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8017c40:	697b      	ldr	r3, [r7, #20]
 8017c42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8017c46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8017c48:	683b      	ldr	r3, [r7, #0]
 8017c4a:	021a      	lsls	r2, r3, #8
 8017c4c:	687b      	ldr	r3, [r7, #4]
 8017c4e:	431a      	orrs	r2, r3
 8017c50:	68bb      	ldr	r3, [r7, #8]
 8017c52:	4313      	orrs	r3, r2
 8017c54:	697a      	ldr	r2, [r7, #20]
 8017c56:	4313      	orrs	r3, r2
 8017c58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8017c5a:	68fb      	ldr	r3, [r7, #12]
 8017c5c:	697a      	ldr	r2, [r7, #20]
 8017c5e:	609a      	str	r2, [r3, #8]
}
 8017c60:	bf00      	nop
 8017c62:	371c      	adds	r7, #28
 8017c64:	46bd      	mov	sp, r7
 8017c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c6a:	4770      	bx	lr

08017c6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8017c6c:	b480      	push	{r7}
 8017c6e:	b085      	sub	sp, #20
 8017c70:	af00      	add	r7, sp, #0
 8017c72:	6078      	str	r0, [r7, #4]
 8017c74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8017c76:	687b      	ldr	r3, [r7, #4]
 8017c78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8017c7c:	2b01      	cmp	r3, #1
 8017c7e:	d101      	bne.n	8017c84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8017c80:	2302      	movs	r3, #2
 8017c82:	e05a      	b.n	8017d3a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8017c84:	687b      	ldr	r3, [r7, #4]
 8017c86:	2201      	movs	r2, #1
 8017c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8017c8c:	687b      	ldr	r3, [r7, #4]
 8017c8e:	2202      	movs	r2, #2
 8017c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8017c94:	687b      	ldr	r3, [r7, #4]
 8017c96:	681b      	ldr	r3, [r3, #0]
 8017c98:	685b      	ldr	r3, [r3, #4]
 8017c9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8017c9c:	687b      	ldr	r3, [r7, #4]
 8017c9e:	681b      	ldr	r3, [r3, #0]
 8017ca0:	689b      	ldr	r3, [r3, #8]
 8017ca2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8017ca4:	68fb      	ldr	r3, [r7, #12]
 8017ca6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8017caa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8017cac:	683b      	ldr	r3, [r7, #0]
 8017cae:	681b      	ldr	r3, [r3, #0]
 8017cb0:	68fa      	ldr	r2, [r7, #12]
 8017cb2:	4313      	orrs	r3, r2
 8017cb4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8017cb6:	687b      	ldr	r3, [r7, #4]
 8017cb8:	681b      	ldr	r3, [r3, #0]
 8017cba:	68fa      	ldr	r2, [r7, #12]
 8017cbc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8017cbe:	687b      	ldr	r3, [r7, #4]
 8017cc0:	681b      	ldr	r3, [r3, #0]
 8017cc2:	4a21      	ldr	r2, [pc, #132]	; (8017d48 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8017cc4:	4293      	cmp	r3, r2
 8017cc6:	d022      	beq.n	8017d0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8017cc8:	687b      	ldr	r3, [r7, #4]
 8017cca:	681b      	ldr	r3, [r3, #0]
 8017ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8017cd0:	d01d      	beq.n	8017d0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8017cd2:	687b      	ldr	r3, [r7, #4]
 8017cd4:	681b      	ldr	r3, [r3, #0]
 8017cd6:	4a1d      	ldr	r2, [pc, #116]	; (8017d4c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8017cd8:	4293      	cmp	r3, r2
 8017cda:	d018      	beq.n	8017d0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8017cdc:	687b      	ldr	r3, [r7, #4]
 8017cde:	681b      	ldr	r3, [r3, #0]
 8017ce0:	4a1b      	ldr	r2, [pc, #108]	; (8017d50 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8017ce2:	4293      	cmp	r3, r2
 8017ce4:	d013      	beq.n	8017d0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8017ce6:	687b      	ldr	r3, [r7, #4]
 8017ce8:	681b      	ldr	r3, [r3, #0]
 8017cea:	4a1a      	ldr	r2, [pc, #104]	; (8017d54 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8017cec:	4293      	cmp	r3, r2
 8017cee:	d00e      	beq.n	8017d0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8017cf0:	687b      	ldr	r3, [r7, #4]
 8017cf2:	681b      	ldr	r3, [r3, #0]
 8017cf4:	4a18      	ldr	r2, [pc, #96]	; (8017d58 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8017cf6:	4293      	cmp	r3, r2
 8017cf8:	d009      	beq.n	8017d0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8017cfa:	687b      	ldr	r3, [r7, #4]
 8017cfc:	681b      	ldr	r3, [r3, #0]
 8017cfe:	4a17      	ldr	r2, [pc, #92]	; (8017d5c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8017d00:	4293      	cmp	r3, r2
 8017d02:	d004      	beq.n	8017d0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8017d04:	687b      	ldr	r3, [r7, #4]
 8017d06:	681b      	ldr	r3, [r3, #0]
 8017d08:	4a15      	ldr	r2, [pc, #84]	; (8017d60 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8017d0a:	4293      	cmp	r3, r2
 8017d0c:	d10c      	bne.n	8017d28 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8017d0e:	68bb      	ldr	r3, [r7, #8]
 8017d10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8017d14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8017d16:	683b      	ldr	r3, [r7, #0]
 8017d18:	685b      	ldr	r3, [r3, #4]
 8017d1a:	68ba      	ldr	r2, [r7, #8]
 8017d1c:	4313      	orrs	r3, r2
 8017d1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8017d20:	687b      	ldr	r3, [r7, #4]
 8017d22:	681b      	ldr	r3, [r3, #0]
 8017d24:	68ba      	ldr	r2, [r7, #8]
 8017d26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8017d28:	687b      	ldr	r3, [r7, #4]
 8017d2a:	2201      	movs	r2, #1
 8017d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8017d30:	687b      	ldr	r3, [r7, #4]
 8017d32:	2200      	movs	r2, #0
 8017d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8017d38:	2300      	movs	r3, #0
}
 8017d3a:	4618      	mov	r0, r3
 8017d3c:	3714      	adds	r7, #20
 8017d3e:	46bd      	mov	sp, r7
 8017d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d44:	4770      	bx	lr
 8017d46:	bf00      	nop
 8017d48:	40010000 	.word	0x40010000
 8017d4c:	40000400 	.word	0x40000400
 8017d50:	40000800 	.word	0x40000800
 8017d54:	40000c00 	.word	0x40000c00
 8017d58:	40010400 	.word	0x40010400
 8017d5c:	40014000 	.word	0x40014000
 8017d60:	40001800 	.word	0x40001800

08017d64 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8017d64:	b480      	push	{r7}
 8017d66:	b083      	sub	sp, #12
 8017d68:	af00      	add	r7, sp, #0
 8017d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8017d6c:	bf00      	nop
 8017d6e:	370c      	adds	r7, #12
 8017d70:	46bd      	mov	sp, r7
 8017d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d76:	4770      	bx	lr

08017d78 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8017d78:	b480      	push	{r7}
 8017d7a:	b083      	sub	sp, #12
 8017d7c:	af00      	add	r7, sp, #0
 8017d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8017d80:	bf00      	nop
 8017d82:	370c      	adds	r7, #12
 8017d84:	46bd      	mov	sp, r7
 8017d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d8a:	4770      	bx	lr

08017d8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8017d8c:	b580      	push	{r7, lr}
 8017d8e:	b082      	sub	sp, #8
 8017d90:	af00      	add	r7, sp, #0
 8017d92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8017d94:	687b      	ldr	r3, [r7, #4]
 8017d96:	2b00      	cmp	r3, #0
 8017d98:	d101      	bne.n	8017d9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8017d9a:	2301      	movs	r3, #1
 8017d9c:	e03f      	b.n	8017e1e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8017d9e:	687b      	ldr	r3, [r7, #4]
 8017da0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017da4:	b2db      	uxtb	r3, r3
 8017da6:	2b00      	cmp	r3, #0
 8017da8:	d106      	bne.n	8017db8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8017daa:	687b      	ldr	r3, [r7, #4]
 8017dac:	2200      	movs	r2, #0
 8017dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8017db2:	6878      	ldr	r0, [r7, #4]
 8017db4:	f7fa fd62 	bl	801287c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8017db8:	687b      	ldr	r3, [r7, #4]
 8017dba:	2224      	movs	r2, #36	; 0x24
 8017dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8017dc0:	687b      	ldr	r3, [r7, #4]
 8017dc2:	681b      	ldr	r3, [r3, #0]
 8017dc4:	68da      	ldr	r2, [r3, #12]
 8017dc6:	687b      	ldr	r3, [r7, #4]
 8017dc8:	681b      	ldr	r3, [r3, #0]
 8017dca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8017dce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8017dd0:	6878      	ldr	r0, [r7, #4]
 8017dd2:	f000 ff43 	bl	8018c5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8017dd6:	687b      	ldr	r3, [r7, #4]
 8017dd8:	681b      	ldr	r3, [r3, #0]
 8017dda:	691a      	ldr	r2, [r3, #16]
 8017ddc:	687b      	ldr	r3, [r7, #4]
 8017dde:	681b      	ldr	r3, [r3, #0]
 8017de0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8017de4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8017de6:	687b      	ldr	r3, [r7, #4]
 8017de8:	681b      	ldr	r3, [r3, #0]
 8017dea:	695a      	ldr	r2, [r3, #20]
 8017dec:	687b      	ldr	r3, [r7, #4]
 8017dee:	681b      	ldr	r3, [r3, #0]
 8017df0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8017df4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8017df6:	687b      	ldr	r3, [r7, #4]
 8017df8:	681b      	ldr	r3, [r3, #0]
 8017dfa:	68da      	ldr	r2, [r3, #12]
 8017dfc:	687b      	ldr	r3, [r7, #4]
 8017dfe:	681b      	ldr	r3, [r3, #0]
 8017e00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8017e04:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017e06:	687b      	ldr	r3, [r7, #4]
 8017e08:	2200      	movs	r2, #0
 8017e0a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8017e0c:	687b      	ldr	r3, [r7, #4]
 8017e0e:	2220      	movs	r2, #32
 8017e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8017e14:	687b      	ldr	r3, [r7, #4]
 8017e16:	2220      	movs	r2, #32
 8017e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8017e1c:	2300      	movs	r3, #0
}
 8017e1e:	4618      	mov	r0, r3
 8017e20:	3708      	adds	r7, #8
 8017e22:	46bd      	mov	sp, r7
 8017e24:	bd80      	pop	{r7, pc}
	...

08017e28 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8017e28:	b580      	push	{r7, lr}
 8017e2a:	b08c      	sub	sp, #48	; 0x30
 8017e2c:	af00      	add	r7, sp, #0
 8017e2e:	60f8      	str	r0, [r7, #12]
 8017e30:	60b9      	str	r1, [r7, #8]
 8017e32:	4613      	mov	r3, r2
 8017e34:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8017e36:	68fb      	ldr	r3, [r7, #12]
 8017e38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017e3c:	b2db      	uxtb	r3, r3
 8017e3e:	2b20      	cmp	r3, #32
 8017e40:	d165      	bne.n	8017f0e <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8017e42:	68bb      	ldr	r3, [r7, #8]
 8017e44:	2b00      	cmp	r3, #0
 8017e46:	d002      	beq.n	8017e4e <HAL_UART_Transmit_DMA+0x26>
 8017e48:	88fb      	ldrh	r3, [r7, #6]
 8017e4a:	2b00      	cmp	r3, #0
 8017e4c:	d101      	bne.n	8017e52 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8017e4e:	2301      	movs	r3, #1
 8017e50:	e05e      	b.n	8017f10 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8017e52:	68fb      	ldr	r3, [r7, #12]
 8017e54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8017e58:	2b01      	cmp	r3, #1
 8017e5a:	d101      	bne.n	8017e60 <HAL_UART_Transmit_DMA+0x38>
 8017e5c:	2302      	movs	r3, #2
 8017e5e:	e057      	b.n	8017f10 <HAL_UART_Transmit_DMA+0xe8>
 8017e60:	68fb      	ldr	r3, [r7, #12]
 8017e62:	2201      	movs	r2, #1
 8017e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8017e68:	68ba      	ldr	r2, [r7, #8]
 8017e6a:	68fb      	ldr	r3, [r7, #12]
 8017e6c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8017e6e:	68fb      	ldr	r3, [r7, #12]
 8017e70:	88fa      	ldrh	r2, [r7, #6]
 8017e72:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8017e74:	68fb      	ldr	r3, [r7, #12]
 8017e76:	88fa      	ldrh	r2, [r7, #6]
 8017e78:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017e7a:	68fb      	ldr	r3, [r7, #12]
 8017e7c:	2200      	movs	r2, #0
 8017e7e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8017e80:	68fb      	ldr	r3, [r7, #12]
 8017e82:	2221      	movs	r2, #33	; 0x21
 8017e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8017e88:	68fb      	ldr	r3, [r7, #12]
 8017e8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017e8c:	4a22      	ldr	r2, [pc, #136]	; (8017f18 <HAL_UART_Transmit_DMA+0xf0>)
 8017e8e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8017e90:	68fb      	ldr	r3, [r7, #12]
 8017e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017e94:	4a21      	ldr	r2, [pc, #132]	; (8017f1c <HAL_UART_Transmit_DMA+0xf4>)
 8017e96:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8017e98:	68fb      	ldr	r3, [r7, #12]
 8017e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017e9c:	4a20      	ldr	r2, [pc, #128]	; (8017f20 <HAL_UART_Transmit_DMA+0xf8>)
 8017e9e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8017ea0:	68fb      	ldr	r3, [r7, #12]
 8017ea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017ea4:	2200      	movs	r2, #0
 8017ea6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8017ea8:	f107 0308 	add.w	r3, r7, #8
 8017eac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8017eae:	68fb      	ldr	r3, [r7, #12]
 8017eb0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8017eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017eb4:	6819      	ldr	r1, [r3, #0]
 8017eb6:	68fb      	ldr	r3, [r7, #12]
 8017eb8:	681b      	ldr	r3, [r3, #0]
 8017eba:	3304      	adds	r3, #4
 8017ebc:	461a      	mov	r2, r3
 8017ebe:	88fb      	ldrh	r3, [r7, #6]
 8017ec0:	f7fb fee2 	bl	8013c88 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8017ec4:	68fb      	ldr	r3, [r7, #12]
 8017ec6:	681b      	ldr	r3, [r3, #0]
 8017ec8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8017ecc:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8017ece:	68fb      	ldr	r3, [r7, #12]
 8017ed0:	2200      	movs	r2, #0
 8017ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8017ed6:	68fb      	ldr	r3, [r7, #12]
 8017ed8:	681b      	ldr	r3, [r3, #0]
 8017eda:	3314      	adds	r3, #20
 8017edc:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017ede:	69bb      	ldr	r3, [r7, #24]
 8017ee0:	e853 3f00 	ldrex	r3, [r3]
 8017ee4:	617b      	str	r3, [r7, #20]
   return(result);
 8017ee6:	697b      	ldr	r3, [r7, #20]
 8017ee8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017eec:	62bb      	str	r3, [r7, #40]	; 0x28
 8017eee:	68fb      	ldr	r3, [r7, #12]
 8017ef0:	681b      	ldr	r3, [r3, #0]
 8017ef2:	3314      	adds	r3, #20
 8017ef4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017ef6:	627a      	str	r2, [r7, #36]	; 0x24
 8017ef8:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017efa:	6a39      	ldr	r1, [r7, #32]
 8017efc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017efe:	e841 2300 	strex	r3, r2, [r1]
 8017f02:	61fb      	str	r3, [r7, #28]
   return(result);
 8017f04:	69fb      	ldr	r3, [r7, #28]
 8017f06:	2b00      	cmp	r3, #0
 8017f08:	d1e5      	bne.n	8017ed6 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8017f0a:	2300      	movs	r3, #0
 8017f0c:	e000      	b.n	8017f10 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8017f0e:	2302      	movs	r3, #2
  }
}
 8017f10:	4618      	mov	r0, r3
 8017f12:	3730      	adds	r7, #48	; 0x30
 8017f14:	46bd      	mov	sp, r7
 8017f16:	bd80      	pop	{r7, pc}
 8017f18:	080184f5 	.word	0x080184f5
 8017f1c:	0801858f 	.word	0x0801858f
 8017f20:	08018707 	.word	0x08018707

08017f24 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8017f24:	b580      	push	{r7, lr}
 8017f26:	b084      	sub	sp, #16
 8017f28:	af00      	add	r7, sp, #0
 8017f2a:	60f8      	str	r0, [r7, #12]
 8017f2c:	60b9      	str	r1, [r7, #8]
 8017f2e:	4613      	mov	r3, r2
 8017f30:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8017f32:	68fb      	ldr	r3, [r7, #12]
 8017f34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8017f38:	b2db      	uxtb	r3, r3
 8017f3a:	2b20      	cmp	r3, #32
 8017f3c:	d11d      	bne.n	8017f7a <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8017f3e:	68bb      	ldr	r3, [r7, #8]
 8017f40:	2b00      	cmp	r3, #0
 8017f42:	d002      	beq.n	8017f4a <HAL_UART_Receive_DMA+0x26>
 8017f44:	88fb      	ldrh	r3, [r7, #6]
 8017f46:	2b00      	cmp	r3, #0
 8017f48:	d101      	bne.n	8017f4e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8017f4a:	2301      	movs	r3, #1
 8017f4c:	e016      	b.n	8017f7c <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8017f4e:	68fb      	ldr	r3, [r7, #12]
 8017f50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8017f54:	2b01      	cmp	r3, #1
 8017f56:	d101      	bne.n	8017f5c <HAL_UART_Receive_DMA+0x38>
 8017f58:	2302      	movs	r3, #2
 8017f5a:	e00f      	b.n	8017f7c <HAL_UART_Receive_DMA+0x58>
 8017f5c:	68fb      	ldr	r3, [r7, #12]
 8017f5e:	2201      	movs	r2, #1
 8017f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017f64:	68fb      	ldr	r3, [r7, #12]
 8017f66:	2200      	movs	r2, #0
 8017f68:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8017f6a:	88fb      	ldrh	r3, [r7, #6]
 8017f6c:	461a      	mov	r2, r3
 8017f6e:	68b9      	ldr	r1, [r7, #8]
 8017f70:	68f8      	ldr	r0, [r7, #12]
 8017f72:	f000 fc13 	bl	801879c <UART_Start_Receive_DMA>
 8017f76:	4603      	mov	r3, r0
 8017f78:	e000      	b.n	8017f7c <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8017f7a:	2302      	movs	r3, #2
  }
}
 8017f7c:	4618      	mov	r0, r3
 8017f7e:	3710      	adds	r7, #16
 8017f80:	46bd      	mov	sp, r7
 8017f82:	bd80      	pop	{r7, pc}

08017f84 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8017f84:	b580      	push	{r7, lr}
 8017f86:	b0ba      	sub	sp, #232	; 0xe8
 8017f88:	af00      	add	r7, sp, #0
 8017f8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8017f8c:	687b      	ldr	r3, [r7, #4]
 8017f8e:	681b      	ldr	r3, [r3, #0]
 8017f90:	681b      	ldr	r3, [r3, #0]
 8017f92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8017f96:	687b      	ldr	r3, [r7, #4]
 8017f98:	681b      	ldr	r3, [r3, #0]
 8017f9a:	68db      	ldr	r3, [r3, #12]
 8017f9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8017fa0:	687b      	ldr	r3, [r7, #4]
 8017fa2:	681b      	ldr	r3, [r3, #0]
 8017fa4:	695b      	ldr	r3, [r3, #20]
 8017fa6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8017faa:	2300      	movs	r3, #0
 8017fac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8017fb0:	2300      	movs	r3, #0
 8017fb2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8017fb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017fba:	f003 030f 	and.w	r3, r3, #15
 8017fbe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8017fc2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8017fc6:	2b00      	cmp	r3, #0
 8017fc8:	d10f      	bne.n	8017fea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8017fca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017fce:	f003 0320 	and.w	r3, r3, #32
 8017fd2:	2b00      	cmp	r3, #0
 8017fd4:	d009      	beq.n	8017fea <HAL_UART_IRQHandler+0x66>
 8017fd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8017fda:	f003 0320 	and.w	r3, r3, #32
 8017fde:	2b00      	cmp	r3, #0
 8017fe0:	d003      	beq.n	8017fea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8017fe2:	6878      	ldr	r0, [r7, #4]
 8017fe4:	f000 fd7f 	bl	8018ae6 <UART_Receive_IT>
      return;
 8017fe8:	e256      	b.n	8018498 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8017fea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8017fee:	2b00      	cmp	r3, #0
 8017ff0:	f000 80de 	beq.w	80181b0 <HAL_UART_IRQHandler+0x22c>
 8017ff4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8017ff8:	f003 0301 	and.w	r3, r3, #1
 8017ffc:	2b00      	cmp	r3, #0
 8017ffe:	d106      	bne.n	801800e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8018000:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8018004:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8018008:	2b00      	cmp	r3, #0
 801800a:	f000 80d1 	beq.w	80181b0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 801800e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8018012:	f003 0301 	and.w	r3, r3, #1
 8018016:	2b00      	cmp	r3, #0
 8018018:	d00b      	beq.n	8018032 <HAL_UART_IRQHandler+0xae>
 801801a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801801e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018022:	2b00      	cmp	r3, #0
 8018024:	d005      	beq.n	8018032 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8018026:	687b      	ldr	r3, [r7, #4]
 8018028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801802a:	f043 0201 	orr.w	r2, r3, #1
 801802e:	687b      	ldr	r3, [r7, #4]
 8018030:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8018032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8018036:	f003 0304 	and.w	r3, r3, #4
 801803a:	2b00      	cmp	r3, #0
 801803c:	d00b      	beq.n	8018056 <HAL_UART_IRQHandler+0xd2>
 801803e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8018042:	f003 0301 	and.w	r3, r3, #1
 8018046:	2b00      	cmp	r3, #0
 8018048:	d005      	beq.n	8018056 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801804a:	687b      	ldr	r3, [r7, #4]
 801804c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801804e:	f043 0202 	orr.w	r2, r3, #2
 8018052:	687b      	ldr	r3, [r7, #4]
 8018054:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8018056:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801805a:	f003 0302 	and.w	r3, r3, #2
 801805e:	2b00      	cmp	r3, #0
 8018060:	d00b      	beq.n	801807a <HAL_UART_IRQHandler+0xf6>
 8018062:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8018066:	f003 0301 	and.w	r3, r3, #1
 801806a:	2b00      	cmp	r3, #0
 801806c:	d005      	beq.n	801807a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801806e:	687b      	ldr	r3, [r7, #4]
 8018070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018072:	f043 0204 	orr.w	r2, r3, #4
 8018076:	687b      	ldr	r3, [r7, #4]
 8018078:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 801807a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801807e:	f003 0308 	and.w	r3, r3, #8
 8018082:	2b00      	cmp	r3, #0
 8018084:	d011      	beq.n	80180aa <HAL_UART_IRQHandler+0x126>
 8018086:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801808a:	f003 0320 	and.w	r3, r3, #32
 801808e:	2b00      	cmp	r3, #0
 8018090:	d105      	bne.n	801809e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8018092:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8018096:	f003 0301 	and.w	r3, r3, #1
 801809a:	2b00      	cmp	r3, #0
 801809c:	d005      	beq.n	80180aa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801809e:	687b      	ldr	r3, [r7, #4]
 80180a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80180a2:	f043 0208 	orr.w	r2, r3, #8
 80180a6:	687b      	ldr	r3, [r7, #4]
 80180a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80180aa:	687b      	ldr	r3, [r7, #4]
 80180ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80180ae:	2b00      	cmp	r3, #0
 80180b0:	f000 81ed 	beq.w	801848e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80180b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80180b8:	f003 0320 	and.w	r3, r3, #32
 80180bc:	2b00      	cmp	r3, #0
 80180be:	d008      	beq.n	80180d2 <HAL_UART_IRQHandler+0x14e>
 80180c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80180c4:	f003 0320 	and.w	r3, r3, #32
 80180c8:	2b00      	cmp	r3, #0
 80180ca:	d002      	beq.n	80180d2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80180cc:	6878      	ldr	r0, [r7, #4]
 80180ce:	f000 fd0a 	bl	8018ae6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80180d2:	687b      	ldr	r3, [r7, #4]
 80180d4:	681b      	ldr	r3, [r3, #0]
 80180d6:	695b      	ldr	r3, [r3, #20]
 80180d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80180dc:	2b40      	cmp	r3, #64	; 0x40
 80180de:	bf0c      	ite	eq
 80180e0:	2301      	moveq	r3, #1
 80180e2:	2300      	movne	r3, #0
 80180e4:	b2db      	uxtb	r3, r3
 80180e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80180ea:	687b      	ldr	r3, [r7, #4]
 80180ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80180ee:	f003 0308 	and.w	r3, r3, #8
 80180f2:	2b00      	cmp	r3, #0
 80180f4:	d103      	bne.n	80180fe <HAL_UART_IRQHandler+0x17a>
 80180f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80180fa:	2b00      	cmp	r3, #0
 80180fc:	d04f      	beq.n	801819e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80180fe:	6878      	ldr	r0, [r7, #4]
 8018100:	f000 fc12 	bl	8018928 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8018104:	687b      	ldr	r3, [r7, #4]
 8018106:	681b      	ldr	r3, [r3, #0]
 8018108:	695b      	ldr	r3, [r3, #20]
 801810a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801810e:	2b40      	cmp	r3, #64	; 0x40
 8018110:	d141      	bne.n	8018196 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8018112:	687b      	ldr	r3, [r7, #4]
 8018114:	681b      	ldr	r3, [r3, #0]
 8018116:	3314      	adds	r3, #20
 8018118:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801811c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8018120:	e853 3f00 	ldrex	r3, [r3]
 8018124:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8018128:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801812c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8018130:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8018134:	687b      	ldr	r3, [r7, #4]
 8018136:	681b      	ldr	r3, [r3, #0]
 8018138:	3314      	adds	r3, #20
 801813a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801813e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8018142:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018146:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801814a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801814e:	e841 2300 	strex	r3, r2, [r1]
 8018152:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8018156:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801815a:	2b00      	cmp	r3, #0
 801815c:	d1d9      	bne.n	8018112 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 801815e:	687b      	ldr	r3, [r7, #4]
 8018160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018162:	2b00      	cmp	r3, #0
 8018164:	d013      	beq.n	801818e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8018166:	687b      	ldr	r3, [r7, #4]
 8018168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801816a:	4a7d      	ldr	r2, [pc, #500]	; (8018360 <HAL_UART_IRQHandler+0x3dc>)
 801816c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801816e:	687b      	ldr	r3, [r7, #4]
 8018170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018172:	4618      	mov	r0, r3
 8018174:	f7fb fe50 	bl	8013e18 <HAL_DMA_Abort_IT>
 8018178:	4603      	mov	r3, r0
 801817a:	2b00      	cmp	r3, #0
 801817c:	d016      	beq.n	80181ac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801817e:	687b      	ldr	r3, [r7, #4]
 8018180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018182:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018184:	687a      	ldr	r2, [r7, #4]
 8018186:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8018188:	4610      	mov	r0, r2
 801818a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801818c:	e00e      	b.n	80181ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801818e:	6878      	ldr	r0, [r7, #4]
 8018190:	f000 f99a 	bl	80184c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8018194:	e00a      	b.n	80181ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8018196:	6878      	ldr	r0, [r7, #4]
 8018198:	f000 f996 	bl	80184c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801819c:	e006      	b.n	80181ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801819e:	6878      	ldr	r0, [r7, #4]
 80181a0:	f000 f992 	bl	80184c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80181a4:	687b      	ldr	r3, [r7, #4]
 80181a6:	2200      	movs	r2, #0
 80181a8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80181aa:	e170      	b.n	801848e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80181ac:	bf00      	nop
    return;
 80181ae:	e16e      	b.n	801848e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80181b0:	687b      	ldr	r3, [r7, #4]
 80181b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80181b4:	2b01      	cmp	r3, #1
 80181b6:	f040 814a 	bne.w	801844e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80181ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80181be:	f003 0310 	and.w	r3, r3, #16
 80181c2:	2b00      	cmp	r3, #0
 80181c4:	f000 8143 	beq.w	801844e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80181c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80181cc:	f003 0310 	and.w	r3, r3, #16
 80181d0:	2b00      	cmp	r3, #0
 80181d2:	f000 813c 	beq.w	801844e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80181d6:	2300      	movs	r3, #0
 80181d8:	60bb      	str	r3, [r7, #8]
 80181da:	687b      	ldr	r3, [r7, #4]
 80181dc:	681b      	ldr	r3, [r3, #0]
 80181de:	681b      	ldr	r3, [r3, #0]
 80181e0:	60bb      	str	r3, [r7, #8]
 80181e2:	687b      	ldr	r3, [r7, #4]
 80181e4:	681b      	ldr	r3, [r3, #0]
 80181e6:	685b      	ldr	r3, [r3, #4]
 80181e8:	60bb      	str	r3, [r7, #8]
 80181ea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80181ec:	687b      	ldr	r3, [r7, #4]
 80181ee:	681b      	ldr	r3, [r3, #0]
 80181f0:	695b      	ldr	r3, [r3, #20]
 80181f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80181f6:	2b40      	cmp	r3, #64	; 0x40
 80181f8:	f040 80b4 	bne.w	8018364 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80181fc:	687b      	ldr	r3, [r7, #4]
 80181fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018200:	681b      	ldr	r3, [r3, #0]
 8018202:	685b      	ldr	r3, [r3, #4]
 8018204:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8018208:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 801820c:	2b00      	cmp	r3, #0
 801820e:	f000 8140 	beq.w	8018492 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8018212:	687b      	ldr	r3, [r7, #4]
 8018214:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8018216:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801821a:	429a      	cmp	r2, r3
 801821c:	f080 8139 	bcs.w	8018492 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8018220:	687b      	ldr	r3, [r7, #4]
 8018222:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8018226:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8018228:	687b      	ldr	r3, [r7, #4]
 801822a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801822c:	69db      	ldr	r3, [r3, #28]
 801822e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018232:	f000 8088 	beq.w	8018346 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8018236:	687b      	ldr	r3, [r7, #4]
 8018238:	681b      	ldr	r3, [r3, #0]
 801823a:	330c      	adds	r3, #12
 801823c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018240:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8018244:	e853 3f00 	ldrex	r3, [r3]
 8018248:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 801824c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8018250:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8018254:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8018258:	687b      	ldr	r3, [r7, #4]
 801825a:	681b      	ldr	r3, [r3, #0]
 801825c:	330c      	adds	r3, #12
 801825e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8018262:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8018266:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801826a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801826e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8018272:	e841 2300 	strex	r3, r2, [r1]
 8018276:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 801827a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801827e:	2b00      	cmp	r3, #0
 8018280:	d1d9      	bne.n	8018236 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018282:	687b      	ldr	r3, [r7, #4]
 8018284:	681b      	ldr	r3, [r3, #0]
 8018286:	3314      	adds	r3, #20
 8018288:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801828a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801828c:	e853 3f00 	ldrex	r3, [r3]
 8018290:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8018292:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8018294:	f023 0301 	bic.w	r3, r3, #1
 8018298:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801829c:	687b      	ldr	r3, [r7, #4]
 801829e:	681b      	ldr	r3, [r3, #0]
 80182a0:	3314      	adds	r3, #20
 80182a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80182a6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80182aa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80182ac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80182ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80182b2:	e841 2300 	strex	r3, r2, [r1]
 80182b6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80182b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80182ba:	2b00      	cmp	r3, #0
 80182bc:	d1e1      	bne.n	8018282 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80182be:	687b      	ldr	r3, [r7, #4]
 80182c0:	681b      	ldr	r3, [r3, #0]
 80182c2:	3314      	adds	r3, #20
 80182c4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80182c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80182c8:	e853 3f00 	ldrex	r3, [r3]
 80182cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80182ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80182d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80182d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80182d8:	687b      	ldr	r3, [r7, #4]
 80182da:	681b      	ldr	r3, [r3, #0]
 80182dc:	3314      	adds	r3, #20
 80182de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80182e2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80182e4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80182e6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80182e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80182ea:	e841 2300 	strex	r3, r2, [r1]
 80182ee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80182f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80182f2:	2b00      	cmp	r3, #0
 80182f4:	d1e3      	bne.n	80182be <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80182f6:	687b      	ldr	r3, [r7, #4]
 80182f8:	2220      	movs	r2, #32
 80182fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80182fe:	687b      	ldr	r3, [r7, #4]
 8018300:	2200      	movs	r2, #0
 8018302:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018304:	687b      	ldr	r3, [r7, #4]
 8018306:	681b      	ldr	r3, [r3, #0]
 8018308:	330c      	adds	r3, #12
 801830a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801830c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801830e:	e853 3f00 	ldrex	r3, [r3]
 8018312:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8018314:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018316:	f023 0310 	bic.w	r3, r3, #16
 801831a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801831e:	687b      	ldr	r3, [r7, #4]
 8018320:	681b      	ldr	r3, [r3, #0]
 8018322:	330c      	adds	r3, #12
 8018324:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8018328:	65ba      	str	r2, [r7, #88]	; 0x58
 801832a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801832c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801832e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8018330:	e841 2300 	strex	r3, r2, [r1]
 8018334:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8018336:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018338:	2b00      	cmp	r3, #0
 801833a:	d1e3      	bne.n	8018304 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801833c:	687b      	ldr	r3, [r7, #4]
 801833e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018340:	4618      	mov	r0, r3
 8018342:	f7fb fcf9 	bl	8013d38 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8018346:	687b      	ldr	r3, [r7, #4]
 8018348:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 801834a:	687b      	ldr	r3, [r7, #4]
 801834c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801834e:	b29b      	uxth	r3, r3
 8018350:	1ad3      	subs	r3, r2, r3
 8018352:	b29b      	uxth	r3, r3
 8018354:	4619      	mov	r1, r3
 8018356:	6878      	ldr	r0, [r7, #4]
 8018358:	f000 f8c0 	bl	80184dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 801835c:	e099      	b.n	8018492 <HAL_UART_IRQHandler+0x50e>
 801835e:	bf00      	nop
 8018360:	080189ef 	.word	0x080189ef
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8018364:	687b      	ldr	r3, [r7, #4]
 8018366:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8018368:	687b      	ldr	r3, [r7, #4]
 801836a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801836c:	b29b      	uxth	r3, r3
 801836e:	1ad3      	subs	r3, r2, r3
 8018370:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8018374:	687b      	ldr	r3, [r7, #4]
 8018376:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8018378:	b29b      	uxth	r3, r3
 801837a:	2b00      	cmp	r3, #0
 801837c:	f000 808b 	beq.w	8018496 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8018380:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8018384:	2b00      	cmp	r3, #0
 8018386:	f000 8086 	beq.w	8018496 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801838a:	687b      	ldr	r3, [r7, #4]
 801838c:	681b      	ldr	r3, [r3, #0]
 801838e:	330c      	adds	r3, #12
 8018390:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018394:	e853 3f00 	ldrex	r3, [r3]
 8018398:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801839a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801839c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80183a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80183a4:	687b      	ldr	r3, [r7, #4]
 80183a6:	681b      	ldr	r3, [r3, #0]
 80183a8:	330c      	adds	r3, #12
 80183aa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80183ae:	647a      	str	r2, [r7, #68]	; 0x44
 80183b0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80183b2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80183b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80183b6:	e841 2300 	strex	r3, r2, [r1]
 80183ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80183bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80183be:	2b00      	cmp	r3, #0
 80183c0:	d1e3      	bne.n	801838a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80183c2:	687b      	ldr	r3, [r7, #4]
 80183c4:	681b      	ldr	r3, [r3, #0]
 80183c6:	3314      	adds	r3, #20
 80183c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80183ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80183cc:	e853 3f00 	ldrex	r3, [r3]
 80183d0:	623b      	str	r3, [r7, #32]
   return(result);
 80183d2:	6a3b      	ldr	r3, [r7, #32]
 80183d4:	f023 0301 	bic.w	r3, r3, #1
 80183d8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80183dc:	687b      	ldr	r3, [r7, #4]
 80183de:	681b      	ldr	r3, [r3, #0]
 80183e0:	3314      	adds	r3, #20
 80183e2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80183e6:	633a      	str	r2, [r7, #48]	; 0x30
 80183e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80183ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80183ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80183ee:	e841 2300 	strex	r3, r2, [r1]
 80183f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80183f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183f6:	2b00      	cmp	r3, #0
 80183f8:	d1e3      	bne.n	80183c2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80183fa:	687b      	ldr	r3, [r7, #4]
 80183fc:	2220      	movs	r2, #32
 80183fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018402:	687b      	ldr	r3, [r7, #4]
 8018404:	2200      	movs	r2, #0
 8018406:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018408:	687b      	ldr	r3, [r7, #4]
 801840a:	681b      	ldr	r3, [r3, #0]
 801840c:	330c      	adds	r3, #12
 801840e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018410:	693b      	ldr	r3, [r7, #16]
 8018412:	e853 3f00 	ldrex	r3, [r3]
 8018416:	60fb      	str	r3, [r7, #12]
   return(result);
 8018418:	68fb      	ldr	r3, [r7, #12]
 801841a:	f023 0310 	bic.w	r3, r3, #16
 801841e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8018422:	687b      	ldr	r3, [r7, #4]
 8018424:	681b      	ldr	r3, [r3, #0]
 8018426:	330c      	adds	r3, #12
 8018428:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 801842c:	61fa      	str	r2, [r7, #28]
 801842e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018430:	69b9      	ldr	r1, [r7, #24]
 8018432:	69fa      	ldr	r2, [r7, #28]
 8018434:	e841 2300 	strex	r3, r2, [r1]
 8018438:	617b      	str	r3, [r7, #20]
   return(result);
 801843a:	697b      	ldr	r3, [r7, #20]
 801843c:	2b00      	cmp	r3, #0
 801843e:	d1e3      	bne.n	8018408 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8018440:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8018444:	4619      	mov	r1, r3
 8018446:	6878      	ldr	r0, [r7, #4]
 8018448:	f000 f848 	bl	80184dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 801844c:	e023      	b.n	8018496 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 801844e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8018452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018456:	2b00      	cmp	r3, #0
 8018458:	d009      	beq.n	801846e <HAL_UART_IRQHandler+0x4ea>
 801845a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801845e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018462:	2b00      	cmp	r3, #0
 8018464:	d003      	beq.n	801846e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8018466:	6878      	ldr	r0, [r7, #4]
 8018468:	f000 fad5 	bl	8018a16 <UART_Transmit_IT>
    return;
 801846c:	e014      	b.n	8018498 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 801846e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8018472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018476:	2b00      	cmp	r3, #0
 8018478:	d00e      	beq.n	8018498 <HAL_UART_IRQHandler+0x514>
 801847a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801847e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018482:	2b00      	cmp	r3, #0
 8018484:	d008      	beq.n	8018498 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8018486:	6878      	ldr	r0, [r7, #4]
 8018488:	f000 fb15 	bl	8018ab6 <UART_EndTransmit_IT>
    return;
 801848c:	e004      	b.n	8018498 <HAL_UART_IRQHandler+0x514>
    return;
 801848e:	bf00      	nop
 8018490:	e002      	b.n	8018498 <HAL_UART_IRQHandler+0x514>
      return;
 8018492:	bf00      	nop
 8018494:	e000      	b.n	8018498 <HAL_UART_IRQHandler+0x514>
      return;
 8018496:	bf00      	nop
  }
}
 8018498:	37e8      	adds	r7, #232	; 0xe8
 801849a:	46bd      	mov	sp, r7
 801849c:	bd80      	pop	{r7, pc}
 801849e:	bf00      	nop

080184a0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80184a0:	b480      	push	{r7}
 80184a2:	b083      	sub	sp, #12
 80184a4:	af00      	add	r7, sp, #0
 80184a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80184a8:	bf00      	nop
 80184aa:	370c      	adds	r7, #12
 80184ac:	46bd      	mov	sp, r7
 80184ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184b2:	4770      	bx	lr

080184b4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80184b4:	b480      	push	{r7}
 80184b6:	b083      	sub	sp, #12
 80184b8:	af00      	add	r7, sp, #0
 80184ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80184bc:	bf00      	nop
 80184be:	370c      	adds	r7, #12
 80184c0:	46bd      	mov	sp, r7
 80184c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184c6:	4770      	bx	lr

080184c8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80184c8:	b480      	push	{r7}
 80184ca:	b083      	sub	sp, #12
 80184cc:	af00      	add	r7, sp, #0
 80184ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80184d0:	bf00      	nop
 80184d2:	370c      	adds	r7, #12
 80184d4:	46bd      	mov	sp, r7
 80184d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184da:	4770      	bx	lr

080184dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80184dc:	b480      	push	{r7}
 80184de:	b083      	sub	sp, #12
 80184e0:	af00      	add	r7, sp, #0
 80184e2:	6078      	str	r0, [r7, #4]
 80184e4:	460b      	mov	r3, r1
 80184e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80184e8:	bf00      	nop
 80184ea:	370c      	adds	r7, #12
 80184ec:	46bd      	mov	sp, r7
 80184ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184f2:	4770      	bx	lr

080184f4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80184f4:	b580      	push	{r7, lr}
 80184f6:	b090      	sub	sp, #64	; 0x40
 80184f8:	af00      	add	r7, sp, #0
 80184fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80184fc:	687b      	ldr	r3, [r7, #4]
 80184fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018500:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8018502:	687b      	ldr	r3, [r7, #4]
 8018504:	681b      	ldr	r3, [r3, #0]
 8018506:	681b      	ldr	r3, [r3, #0]
 8018508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801850c:	2b00      	cmp	r3, #0
 801850e:	d137      	bne.n	8018580 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8018510:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018512:	2200      	movs	r2, #0
 8018514:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8018516:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018518:	681b      	ldr	r3, [r3, #0]
 801851a:	3314      	adds	r3, #20
 801851c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801851e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018520:	e853 3f00 	ldrex	r3, [r3]
 8018524:	623b      	str	r3, [r7, #32]
   return(result);
 8018526:	6a3b      	ldr	r3, [r7, #32]
 8018528:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801852c:	63bb      	str	r3, [r7, #56]	; 0x38
 801852e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018530:	681b      	ldr	r3, [r3, #0]
 8018532:	3314      	adds	r3, #20
 8018534:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018536:	633a      	str	r2, [r7, #48]	; 0x30
 8018538:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801853a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801853c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801853e:	e841 2300 	strex	r3, r2, [r1]
 8018542:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8018544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018546:	2b00      	cmp	r3, #0
 8018548:	d1e5      	bne.n	8018516 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801854a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801854c:	681b      	ldr	r3, [r3, #0]
 801854e:	330c      	adds	r3, #12
 8018550:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018552:	693b      	ldr	r3, [r7, #16]
 8018554:	e853 3f00 	ldrex	r3, [r3]
 8018558:	60fb      	str	r3, [r7, #12]
   return(result);
 801855a:	68fb      	ldr	r3, [r7, #12]
 801855c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018560:	637b      	str	r3, [r7, #52]	; 0x34
 8018562:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018564:	681b      	ldr	r3, [r3, #0]
 8018566:	330c      	adds	r3, #12
 8018568:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801856a:	61fa      	str	r2, [r7, #28]
 801856c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801856e:	69b9      	ldr	r1, [r7, #24]
 8018570:	69fa      	ldr	r2, [r7, #28]
 8018572:	e841 2300 	strex	r3, r2, [r1]
 8018576:	617b      	str	r3, [r7, #20]
   return(result);
 8018578:	697b      	ldr	r3, [r7, #20]
 801857a:	2b00      	cmp	r3, #0
 801857c:	d1e5      	bne.n	801854a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801857e:	e002      	b.n	8018586 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8018580:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8018582:	f7f8 fcaf 	bl	8010ee4 <HAL_UART_TxCpltCallback>
}
 8018586:	bf00      	nop
 8018588:	3740      	adds	r7, #64	; 0x40
 801858a:	46bd      	mov	sp, r7
 801858c:	bd80      	pop	{r7, pc}

0801858e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801858e:	b580      	push	{r7, lr}
 8018590:	b084      	sub	sp, #16
 8018592:	af00      	add	r7, sp, #0
 8018594:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8018596:	687b      	ldr	r3, [r7, #4]
 8018598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801859a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 801859c:	68f8      	ldr	r0, [r7, #12]
 801859e:	f7ff ff7f 	bl	80184a0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80185a2:	bf00      	nop
 80185a4:	3710      	adds	r7, #16
 80185a6:	46bd      	mov	sp, r7
 80185a8:	bd80      	pop	{r7, pc}

080185aa <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80185aa:	b580      	push	{r7, lr}
 80185ac:	b09c      	sub	sp, #112	; 0x70
 80185ae:	af00      	add	r7, sp, #0
 80185b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80185b2:	687b      	ldr	r3, [r7, #4]
 80185b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80185b6:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80185b8:	687b      	ldr	r3, [r7, #4]
 80185ba:	681b      	ldr	r3, [r3, #0]
 80185bc:	681b      	ldr	r3, [r3, #0]
 80185be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80185c2:	2b00      	cmp	r3, #0
 80185c4:	d172      	bne.n	80186ac <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80185c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80185c8:	2200      	movs	r2, #0
 80185ca:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80185cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80185ce:	681b      	ldr	r3, [r3, #0]
 80185d0:	330c      	adds	r3, #12
 80185d2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80185d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80185d6:	e853 3f00 	ldrex	r3, [r3]
 80185da:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80185dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80185de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80185e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80185e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80185e6:	681b      	ldr	r3, [r3, #0]
 80185e8:	330c      	adds	r3, #12
 80185ea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80185ec:	65ba      	str	r2, [r7, #88]	; 0x58
 80185ee:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80185f0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80185f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80185f4:	e841 2300 	strex	r3, r2, [r1]
 80185f8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80185fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80185fc:	2b00      	cmp	r3, #0
 80185fe:	d1e5      	bne.n	80185cc <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018600:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018602:	681b      	ldr	r3, [r3, #0]
 8018604:	3314      	adds	r3, #20
 8018606:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801860a:	e853 3f00 	ldrex	r3, [r3]
 801860e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8018610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018612:	f023 0301 	bic.w	r3, r3, #1
 8018616:	667b      	str	r3, [r7, #100]	; 0x64
 8018618:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801861a:	681b      	ldr	r3, [r3, #0]
 801861c:	3314      	adds	r3, #20
 801861e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8018620:	647a      	str	r2, [r7, #68]	; 0x44
 8018622:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018624:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8018626:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8018628:	e841 2300 	strex	r3, r2, [r1]
 801862c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801862e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018630:	2b00      	cmp	r3, #0
 8018632:	d1e5      	bne.n	8018600 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8018634:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018636:	681b      	ldr	r3, [r3, #0]
 8018638:	3314      	adds	r3, #20
 801863a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801863c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801863e:	e853 3f00 	ldrex	r3, [r3]
 8018642:	623b      	str	r3, [r7, #32]
   return(result);
 8018644:	6a3b      	ldr	r3, [r7, #32]
 8018646:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801864a:	663b      	str	r3, [r7, #96]	; 0x60
 801864c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801864e:	681b      	ldr	r3, [r3, #0]
 8018650:	3314      	adds	r3, #20
 8018652:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8018654:	633a      	str	r2, [r7, #48]	; 0x30
 8018656:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018658:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801865a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801865c:	e841 2300 	strex	r3, r2, [r1]
 8018660:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8018662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018664:	2b00      	cmp	r3, #0
 8018666:	d1e5      	bne.n	8018634 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8018668:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801866a:	2220      	movs	r2, #32
 801866c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018670:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018674:	2b01      	cmp	r3, #1
 8018676:	d119      	bne.n	80186ac <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018678:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801867a:	681b      	ldr	r3, [r3, #0]
 801867c:	330c      	adds	r3, #12
 801867e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018680:	693b      	ldr	r3, [r7, #16]
 8018682:	e853 3f00 	ldrex	r3, [r3]
 8018686:	60fb      	str	r3, [r7, #12]
   return(result);
 8018688:	68fb      	ldr	r3, [r7, #12]
 801868a:	f023 0310 	bic.w	r3, r3, #16
 801868e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8018690:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018692:	681b      	ldr	r3, [r3, #0]
 8018694:	330c      	adds	r3, #12
 8018696:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8018698:	61fa      	str	r2, [r7, #28]
 801869a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801869c:	69b9      	ldr	r1, [r7, #24]
 801869e:	69fa      	ldr	r2, [r7, #28]
 80186a0:	e841 2300 	strex	r3, r2, [r1]
 80186a4:	617b      	str	r3, [r7, #20]
   return(result);
 80186a6:	697b      	ldr	r3, [r7, #20]
 80186a8:	2b00      	cmp	r3, #0
 80186aa:	d1e5      	bne.n	8018678 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80186ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80186ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80186b0:	2b01      	cmp	r3, #1
 80186b2:	d106      	bne.n	80186c2 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80186b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80186b6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80186b8:	4619      	mov	r1, r3
 80186ba:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80186bc:	f7ff ff0e 	bl	80184dc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80186c0:	e002      	b.n	80186c8 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80186c2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80186c4:	f7f8 fc44 	bl	8010f50 <HAL_UART_RxCpltCallback>
}
 80186c8:	bf00      	nop
 80186ca:	3770      	adds	r7, #112	; 0x70
 80186cc:	46bd      	mov	sp, r7
 80186ce:	bd80      	pop	{r7, pc}

080186d0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80186d0:	b580      	push	{r7, lr}
 80186d2:	b084      	sub	sp, #16
 80186d4:	af00      	add	r7, sp, #0
 80186d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80186d8:	687b      	ldr	r3, [r7, #4]
 80186da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80186dc:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80186de:	68fb      	ldr	r3, [r7, #12]
 80186e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80186e2:	2b01      	cmp	r3, #1
 80186e4:	d108      	bne.n	80186f8 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80186e6:	68fb      	ldr	r3, [r7, #12]
 80186e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80186ea:	085b      	lsrs	r3, r3, #1
 80186ec:	b29b      	uxth	r3, r3
 80186ee:	4619      	mov	r1, r3
 80186f0:	68f8      	ldr	r0, [r7, #12]
 80186f2:	f7ff fef3 	bl	80184dc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80186f6:	e002      	b.n	80186fe <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80186f8:	68f8      	ldr	r0, [r7, #12]
 80186fa:	f7ff fedb 	bl	80184b4 <HAL_UART_RxHalfCpltCallback>
}
 80186fe:	bf00      	nop
 8018700:	3710      	adds	r7, #16
 8018702:	46bd      	mov	sp, r7
 8018704:	bd80      	pop	{r7, pc}

08018706 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8018706:	b580      	push	{r7, lr}
 8018708:	b084      	sub	sp, #16
 801870a:	af00      	add	r7, sp, #0
 801870c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 801870e:	2300      	movs	r3, #0
 8018710:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8018712:	687b      	ldr	r3, [r7, #4]
 8018714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018716:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8018718:	68bb      	ldr	r3, [r7, #8]
 801871a:	681b      	ldr	r3, [r3, #0]
 801871c:	695b      	ldr	r3, [r3, #20]
 801871e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018722:	2b80      	cmp	r3, #128	; 0x80
 8018724:	bf0c      	ite	eq
 8018726:	2301      	moveq	r3, #1
 8018728:	2300      	movne	r3, #0
 801872a:	b2db      	uxtb	r3, r3
 801872c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 801872e:	68bb      	ldr	r3, [r7, #8]
 8018730:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018734:	b2db      	uxtb	r3, r3
 8018736:	2b21      	cmp	r3, #33	; 0x21
 8018738:	d108      	bne.n	801874c <UART_DMAError+0x46>
 801873a:	68fb      	ldr	r3, [r7, #12]
 801873c:	2b00      	cmp	r3, #0
 801873e:	d005      	beq.n	801874c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8018740:	68bb      	ldr	r3, [r7, #8]
 8018742:	2200      	movs	r2, #0
 8018744:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8018746:	68b8      	ldr	r0, [r7, #8]
 8018748:	f000 f8c6 	bl	80188d8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 801874c:	68bb      	ldr	r3, [r7, #8]
 801874e:	681b      	ldr	r3, [r3, #0]
 8018750:	695b      	ldr	r3, [r3, #20]
 8018752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018756:	2b40      	cmp	r3, #64	; 0x40
 8018758:	bf0c      	ite	eq
 801875a:	2301      	moveq	r3, #1
 801875c:	2300      	movne	r3, #0
 801875e:	b2db      	uxtb	r3, r3
 8018760:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8018762:	68bb      	ldr	r3, [r7, #8]
 8018764:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8018768:	b2db      	uxtb	r3, r3
 801876a:	2b22      	cmp	r3, #34	; 0x22
 801876c:	d108      	bne.n	8018780 <UART_DMAError+0x7a>
 801876e:	68fb      	ldr	r3, [r7, #12]
 8018770:	2b00      	cmp	r3, #0
 8018772:	d005      	beq.n	8018780 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8018774:	68bb      	ldr	r3, [r7, #8]
 8018776:	2200      	movs	r2, #0
 8018778:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 801877a:	68b8      	ldr	r0, [r7, #8]
 801877c:	f000 f8d4 	bl	8018928 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8018780:	68bb      	ldr	r3, [r7, #8]
 8018782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018784:	f043 0210 	orr.w	r2, r3, #16
 8018788:	68bb      	ldr	r3, [r7, #8]
 801878a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801878c:	68b8      	ldr	r0, [r7, #8]
 801878e:	f7ff fe9b 	bl	80184c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8018792:	bf00      	nop
 8018794:	3710      	adds	r7, #16
 8018796:	46bd      	mov	sp, r7
 8018798:	bd80      	pop	{r7, pc}
	...

0801879c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801879c:	b580      	push	{r7, lr}
 801879e:	b098      	sub	sp, #96	; 0x60
 80187a0:	af00      	add	r7, sp, #0
 80187a2:	60f8      	str	r0, [r7, #12]
 80187a4:	60b9      	str	r1, [r7, #8]
 80187a6:	4613      	mov	r3, r2
 80187a8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80187aa:	68ba      	ldr	r2, [r7, #8]
 80187ac:	68fb      	ldr	r3, [r7, #12]
 80187ae:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80187b0:	68fb      	ldr	r3, [r7, #12]
 80187b2:	88fa      	ldrh	r2, [r7, #6]
 80187b4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80187b6:	68fb      	ldr	r3, [r7, #12]
 80187b8:	2200      	movs	r2, #0
 80187ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80187bc:	68fb      	ldr	r3, [r7, #12]
 80187be:	2222      	movs	r2, #34	; 0x22
 80187c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80187c4:	68fb      	ldr	r3, [r7, #12]
 80187c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80187c8:	4a40      	ldr	r2, [pc, #256]	; (80188cc <UART_Start_Receive_DMA+0x130>)
 80187ca:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80187cc:	68fb      	ldr	r3, [r7, #12]
 80187ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80187d0:	4a3f      	ldr	r2, [pc, #252]	; (80188d0 <UART_Start_Receive_DMA+0x134>)
 80187d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80187d4:	68fb      	ldr	r3, [r7, #12]
 80187d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80187d8:	4a3e      	ldr	r2, [pc, #248]	; (80188d4 <UART_Start_Receive_DMA+0x138>)
 80187da:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80187dc:	68fb      	ldr	r3, [r7, #12]
 80187de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80187e0:	2200      	movs	r2, #0
 80187e2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80187e4:	f107 0308 	add.w	r3, r7, #8
 80187e8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80187ea:	68fb      	ldr	r3, [r7, #12]
 80187ec:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80187ee:	68fb      	ldr	r3, [r7, #12]
 80187f0:	681b      	ldr	r3, [r3, #0]
 80187f2:	3304      	adds	r3, #4
 80187f4:	4619      	mov	r1, r3
 80187f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80187f8:	681a      	ldr	r2, [r3, #0]
 80187fa:	88fb      	ldrh	r3, [r7, #6]
 80187fc:	f7fb fa44 	bl	8013c88 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8018800:	2300      	movs	r3, #0
 8018802:	613b      	str	r3, [r7, #16]
 8018804:	68fb      	ldr	r3, [r7, #12]
 8018806:	681b      	ldr	r3, [r3, #0]
 8018808:	681b      	ldr	r3, [r3, #0]
 801880a:	613b      	str	r3, [r7, #16]
 801880c:	68fb      	ldr	r3, [r7, #12]
 801880e:	681b      	ldr	r3, [r3, #0]
 8018810:	685b      	ldr	r3, [r3, #4]
 8018812:	613b      	str	r3, [r7, #16]
 8018814:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8018816:	68fb      	ldr	r3, [r7, #12]
 8018818:	2200      	movs	r2, #0
 801881a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 801881e:	68fb      	ldr	r3, [r7, #12]
 8018820:	691b      	ldr	r3, [r3, #16]
 8018822:	2b00      	cmp	r3, #0
 8018824:	d019      	beq.n	801885a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8018826:	68fb      	ldr	r3, [r7, #12]
 8018828:	681b      	ldr	r3, [r3, #0]
 801882a:	330c      	adds	r3, #12
 801882c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801882e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018830:	e853 3f00 	ldrex	r3, [r3]
 8018834:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8018836:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018838:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801883c:	65bb      	str	r3, [r7, #88]	; 0x58
 801883e:	68fb      	ldr	r3, [r7, #12]
 8018840:	681b      	ldr	r3, [r3, #0]
 8018842:	330c      	adds	r3, #12
 8018844:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8018846:	64fa      	str	r2, [r7, #76]	; 0x4c
 8018848:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801884a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801884c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801884e:	e841 2300 	strex	r3, r2, [r1]
 8018852:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8018854:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018856:	2b00      	cmp	r3, #0
 8018858:	d1e5      	bne.n	8018826 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801885a:	68fb      	ldr	r3, [r7, #12]
 801885c:	681b      	ldr	r3, [r3, #0]
 801885e:	3314      	adds	r3, #20
 8018860:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018864:	e853 3f00 	ldrex	r3, [r3]
 8018868:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801886a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801886c:	f043 0301 	orr.w	r3, r3, #1
 8018870:	657b      	str	r3, [r7, #84]	; 0x54
 8018872:	68fb      	ldr	r3, [r7, #12]
 8018874:	681b      	ldr	r3, [r3, #0]
 8018876:	3314      	adds	r3, #20
 8018878:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801887a:	63ba      	str	r2, [r7, #56]	; 0x38
 801887c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801887e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018880:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018882:	e841 2300 	strex	r3, r2, [r1]
 8018886:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8018888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801888a:	2b00      	cmp	r3, #0
 801888c:	d1e5      	bne.n	801885a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801888e:	68fb      	ldr	r3, [r7, #12]
 8018890:	681b      	ldr	r3, [r3, #0]
 8018892:	3314      	adds	r3, #20
 8018894:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018896:	69bb      	ldr	r3, [r7, #24]
 8018898:	e853 3f00 	ldrex	r3, [r3]
 801889c:	617b      	str	r3, [r7, #20]
   return(result);
 801889e:	697b      	ldr	r3, [r7, #20]
 80188a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80188a4:	653b      	str	r3, [r7, #80]	; 0x50
 80188a6:	68fb      	ldr	r3, [r7, #12]
 80188a8:	681b      	ldr	r3, [r3, #0]
 80188aa:	3314      	adds	r3, #20
 80188ac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80188ae:	627a      	str	r2, [r7, #36]	; 0x24
 80188b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80188b2:	6a39      	ldr	r1, [r7, #32]
 80188b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80188b6:	e841 2300 	strex	r3, r2, [r1]
 80188ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80188bc:	69fb      	ldr	r3, [r7, #28]
 80188be:	2b00      	cmp	r3, #0
 80188c0:	d1e5      	bne.n	801888e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80188c2:	2300      	movs	r3, #0
}
 80188c4:	4618      	mov	r0, r3
 80188c6:	3760      	adds	r7, #96	; 0x60
 80188c8:	46bd      	mov	sp, r7
 80188ca:	bd80      	pop	{r7, pc}
 80188cc:	080185ab 	.word	0x080185ab
 80188d0:	080186d1 	.word	0x080186d1
 80188d4:	08018707 	.word	0x08018707

080188d8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80188d8:	b480      	push	{r7}
 80188da:	b089      	sub	sp, #36	; 0x24
 80188dc:	af00      	add	r7, sp, #0
 80188de:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80188e0:	687b      	ldr	r3, [r7, #4]
 80188e2:	681b      	ldr	r3, [r3, #0]
 80188e4:	330c      	adds	r3, #12
 80188e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80188e8:	68fb      	ldr	r3, [r7, #12]
 80188ea:	e853 3f00 	ldrex	r3, [r3]
 80188ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80188f0:	68bb      	ldr	r3, [r7, #8]
 80188f2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80188f6:	61fb      	str	r3, [r7, #28]
 80188f8:	687b      	ldr	r3, [r7, #4]
 80188fa:	681b      	ldr	r3, [r3, #0]
 80188fc:	330c      	adds	r3, #12
 80188fe:	69fa      	ldr	r2, [r7, #28]
 8018900:	61ba      	str	r2, [r7, #24]
 8018902:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018904:	6979      	ldr	r1, [r7, #20]
 8018906:	69ba      	ldr	r2, [r7, #24]
 8018908:	e841 2300 	strex	r3, r2, [r1]
 801890c:	613b      	str	r3, [r7, #16]
   return(result);
 801890e:	693b      	ldr	r3, [r7, #16]
 8018910:	2b00      	cmp	r3, #0
 8018912:	d1e5      	bne.n	80188e0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8018914:	687b      	ldr	r3, [r7, #4]
 8018916:	2220      	movs	r2, #32
 8018918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 801891c:	bf00      	nop
 801891e:	3724      	adds	r7, #36	; 0x24
 8018920:	46bd      	mov	sp, r7
 8018922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018926:	4770      	bx	lr

08018928 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8018928:	b480      	push	{r7}
 801892a:	b095      	sub	sp, #84	; 0x54
 801892c:	af00      	add	r7, sp, #0
 801892e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8018930:	687b      	ldr	r3, [r7, #4]
 8018932:	681b      	ldr	r3, [r3, #0]
 8018934:	330c      	adds	r3, #12
 8018936:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801893a:	e853 3f00 	ldrex	r3, [r3]
 801893e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8018940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018942:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8018946:	64fb      	str	r3, [r7, #76]	; 0x4c
 8018948:	687b      	ldr	r3, [r7, #4]
 801894a:	681b      	ldr	r3, [r3, #0]
 801894c:	330c      	adds	r3, #12
 801894e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8018950:	643a      	str	r2, [r7, #64]	; 0x40
 8018952:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018954:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8018956:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8018958:	e841 2300 	strex	r3, r2, [r1]
 801895c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801895e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018960:	2b00      	cmp	r3, #0
 8018962:	d1e5      	bne.n	8018930 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018964:	687b      	ldr	r3, [r7, #4]
 8018966:	681b      	ldr	r3, [r3, #0]
 8018968:	3314      	adds	r3, #20
 801896a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801896c:	6a3b      	ldr	r3, [r7, #32]
 801896e:	e853 3f00 	ldrex	r3, [r3]
 8018972:	61fb      	str	r3, [r7, #28]
   return(result);
 8018974:	69fb      	ldr	r3, [r7, #28]
 8018976:	f023 0301 	bic.w	r3, r3, #1
 801897a:	64bb      	str	r3, [r7, #72]	; 0x48
 801897c:	687b      	ldr	r3, [r7, #4]
 801897e:	681b      	ldr	r3, [r3, #0]
 8018980:	3314      	adds	r3, #20
 8018982:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8018984:	62fa      	str	r2, [r7, #44]	; 0x2c
 8018986:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018988:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801898a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801898c:	e841 2300 	strex	r3, r2, [r1]
 8018990:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8018992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018994:	2b00      	cmp	r3, #0
 8018996:	d1e5      	bne.n	8018964 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018998:	687b      	ldr	r3, [r7, #4]
 801899a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801899c:	2b01      	cmp	r3, #1
 801899e:	d119      	bne.n	80189d4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80189a0:	687b      	ldr	r3, [r7, #4]
 80189a2:	681b      	ldr	r3, [r3, #0]
 80189a4:	330c      	adds	r3, #12
 80189a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80189a8:	68fb      	ldr	r3, [r7, #12]
 80189aa:	e853 3f00 	ldrex	r3, [r3]
 80189ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80189b0:	68bb      	ldr	r3, [r7, #8]
 80189b2:	f023 0310 	bic.w	r3, r3, #16
 80189b6:	647b      	str	r3, [r7, #68]	; 0x44
 80189b8:	687b      	ldr	r3, [r7, #4]
 80189ba:	681b      	ldr	r3, [r3, #0]
 80189bc:	330c      	adds	r3, #12
 80189be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80189c0:	61ba      	str	r2, [r7, #24]
 80189c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80189c4:	6979      	ldr	r1, [r7, #20]
 80189c6:	69ba      	ldr	r2, [r7, #24]
 80189c8:	e841 2300 	strex	r3, r2, [r1]
 80189cc:	613b      	str	r3, [r7, #16]
   return(result);
 80189ce:	693b      	ldr	r3, [r7, #16]
 80189d0:	2b00      	cmp	r3, #0
 80189d2:	d1e5      	bne.n	80189a0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80189d4:	687b      	ldr	r3, [r7, #4]
 80189d6:	2220      	movs	r2, #32
 80189d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80189dc:	687b      	ldr	r3, [r7, #4]
 80189de:	2200      	movs	r2, #0
 80189e0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80189e2:	bf00      	nop
 80189e4:	3754      	adds	r7, #84	; 0x54
 80189e6:	46bd      	mov	sp, r7
 80189e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189ec:	4770      	bx	lr

080189ee <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80189ee:	b580      	push	{r7, lr}
 80189f0:	b084      	sub	sp, #16
 80189f2:	af00      	add	r7, sp, #0
 80189f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80189f6:	687b      	ldr	r3, [r7, #4]
 80189f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80189fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80189fc:	68fb      	ldr	r3, [r7, #12]
 80189fe:	2200      	movs	r2, #0
 8018a00:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8018a02:	68fb      	ldr	r3, [r7, #12]
 8018a04:	2200      	movs	r2, #0
 8018a06:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8018a08:	68f8      	ldr	r0, [r7, #12]
 8018a0a:	f7ff fd5d 	bl	80184c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8018a0e:	bf00      	nop
 8018a10:	3710      	adds	r7, #16
 8018a12:	46bd      	mov	sp, r7
 8018a14:	bd80      	pop	{r7, pc}

08018a16 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8018a16:	b480      	push	{r7}
 8018a18:	b085      	sub	sp, #20
 8018a1a:	af00      	add	r7, sp, #0
 8018a1c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8018a1e:	687b      	ldr	r3, [r7, #4]
 8018a20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018a24:	b2db      	uxtb	r3, r3
 8018a26:	2b21      	cmp	r3, #33	; 0x21
 8018a28:	d13e      	bne.n	8018aa8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8018a2a:	687b      	ldr	r3, [r7, #4]
 8018a2c:	689b      	ldr	r3, [r3, #8]
 8018a2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8018a32:	d114      	bne.n	8018a5e <UART_Transmit_IT+0x48>
 8018a34:	687b      	ldr	r3, [r7, #4]
 8018a36:	691b      	ldr	r3, [r3, #16]
 8018a38:	2b00      	cmp	r3, #0
 8018a3a:	d110      	bne.n	8018a5e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8018a3c:	687b      	ldr	r3, [r7, #4]
 8018a3e:	6a1b      	ldr	r3, [r3, #32]
 8018a40:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8018a42:	68fb      	ldr	r3, [r7, #12]
 8018a44:	881b      	ldrh	r3, [r3, #0]
 8018a46:	461a      	mov	r2, r3
 8018a48:	687b      	ldr	r3, [r7, #4]
 8018a4a:	681b      	ldr	r3, [r3, #0]
 8018a4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8018a50:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8018a52:	687b      	ldr	r3, [r7, #4]
 8018a54:	6a1b      	ldr	r3, [r3, #32]
 8018a56:	1c9a      	adds	r2, r3, #2
 8018a58:	687b      	ldr	r3, [r7, #4]
 8018a5a:	621a      	str	r2, [r3, #32]
 8018a5c:	e008      	b.n	8018a70 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8018a5e:	687b      	ldr	r3, [r7, #4]
 8018a60:	6a1b      	ldr	r3, [r3, #32]
 8018a62:	1c59      	adds	r1, r3, #1
 8018a64:	687a      	ldr	r2, [r7, #4]
 8018a66:	6211      	str	r1, [r2, #32]
 8018a68:	781a      	ldrb	r2, [r3, #0]
 8018a6a:	687b      	ldr	r3, [r7, #4]
 8018a6c:	681b      	ldr	r3, [r3, #0]
 8018a6e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8018a70:	687b      	ldr	r3, [r7, #4]
 8018a72:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8018a74:	b29b      	uxth	r3, r3
 8018a76:	3b01      	subs	r3, #1
 8018a78:	b29b      	uxth	r3, r3
 8018a7a:	687a      	ldr	r2, [r7, #4]
 8018a7c:	4619      	mov	r1, r3
 8018a7e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8018a80:	2b00      	cmp	r3, #0
 8018a82:	d10f      	bne.n	8018aa4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8018a84:	687b      	ldr	r3, [r7, #4]
 8018a86:	681b      	ldr	r3, [r3, #0]
 8018a88:	68da      	ldr	r2, [r3, #12]
 8018a8a:	687b      	ldr	r3, [r7, #4]
 8018a8c:	681b      	ldr	r3, [r3, #0]
 8018a8e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8018a92:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8018a94:	687b      	ldr	r3, [r7, #4]
 8018a96:	681b      	ldr	r3, [r3, #0]
 8018a98:	68da      	ldr	r2, [r3, #12]
 8018a9a:	687b      	ldr	r3, [r7, #4]
 8018a9c:	681b      	ldr	r3, [r3, #0]
 8018a9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8018aa2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8018aa4:	2300      	movs	r3, #0
 8018aa6:	e000      	b.n	8018aaa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8018aa8:	2302      	movs	r3, #2
  }
}
 8018aaa:	4618      	mov	r0, r3
 8018aac:	3714      	adds	r7, #20
 8018aae:	46bd      	mov	sp, r7
 8018ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ab4:	4770      	bx	lr

08018ab6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8018ab6:	b580      	push	{r7, lr}
 8018ab8:	b082      	sub	sp, #8
 8018aba:	af00      	add	r7, sp, #0
 8018abc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8018abe:	687b      	ldr	r3, [r7, #4]
 8018ac0:	681b      	ldr	r3, [r3, #0]
 8018ac2:	68da      	ldr	r2, [r3, #12]
 8018ac4:	687b      	ldr	r3, [r7, #4]
 8018ac6:	681b      	ldr	r3, [r3, #0]
 8018ac8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8018acc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8018ace:	687b      	ldr	r3, [r7, #4]
 8018ad0:	2220      	movs	r2, #32
 8018ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8018ad6:	6878      	ldr	r0, [r7, #4]
 8018ad8:	f7f8 fa04 	bl	8010ee4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8018adc:	2300      	movs	r3, #0
}
 8018ade:	4618      	mov	r0, r3
 8018ae0:	3708      	adds	r7, #8
 8018ae2:	46bd      	mov	sp, r7
 8018ae4:	bd80      	pop	{r7, pc}

08018ae6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8018ae6:	b580      	push	{r7, lr}
 8018ae8:	b08c      	sub	sp, #48	; 0x30
 8018aea:	af00      	add	r7, sp, #0
 8018aec:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8018aee:	687b      	ldr	r3, [r7, #4]
 8018af0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8018af4:	b2db      	uxtb	r3, r3
 8018af6:	2b22      	cmp	r3, #34	; 0x22
 8018af8:	f040 80ab 	bne.w	8018c52 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8018afc:	687b      	ldr	r3, [r7, #4]
 8018afe:	689b      	ldr	r3, [r3, #8]
 8018b00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8018b04:	d117      	bne.n	8018b36 <UART_Receive_IT+0x50>
 8018b06:	687b      	ldr	r3, [r7, #4]
 8018b08:	691b      	ldr	r3, [r3, #16]
 8018b0a:	2b00      	cmp	r3, #0
 8018b0c:	d113      	bne.n	8018b36 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8018b0e:	2300      	movs	r3, #0
 8018b10:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8018b12:	687b      	ldr	r3, [r7, #4]
 8018b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018b16:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8018b18:	687b      	ldr	r3, [r7, #4]
 8018b1a:	681b      	ldr	r3, [r3, #0]
 8018b1c:	685b      	ldr	r3, [r3, #4]
 8018b1e:	b29b      	uxth	r3, r3
 8018b20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018b24:	b29a      	uxth	r2, r3
 8018b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b28:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8018b2a:	687b      	ldr	r3, [r7, #4]
 8018b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018b2e:	1c9a      	adds	r2, r3, #2
 8018b30:	687b      	ldr	r3, [r7, #4]
 8018b32:	629a      	str	r2, [r3, #40]	; 0x28
 8018b34:	e026      	b.n	8018b84 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8018b36:	687b      	ldr	r3, [r7, #4]
 8018b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8018b3c:	2300      	movs	r3, #0
 8018b3e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8018b40:	687b      	ldr	r3, [r7, #4]
 8018b42:	689b      	ldr	r3, [r3, #8]
 8018b44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8018b48:	d007      	beq.n	8018b5a <UART_Receive_IT+0x74>
 8018b4a:	687b      	ldr	r3, [r7, #4]
 8018b4c:	689b      	ldr	r3, [r3, #8]
 8018b4e:	2b00      	cmp	r3, #0
 8018b50:	d10a      	bne.n	8018b68 <UART_Receive_IT+0x82>
 8018b52:	687b      	ldr	r3, [r7, #4]
 8018b54:	691b      	ldr	r3, [r3, #16]
 8018b56:	2b00      	cmp	r3, #0
 8018b58:	d106      	bne.n	8018b68 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8018b5a:	687b      	ldr	r3, [r7, #4]
 8018b5c:	681b      	ldr	r3, [r3, #0]
 8018b5e:	685b      	ldr	r3, [r3, #4]
 8018b60:	b2da      	uxtb	r2, r3
 8018b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b64:	701a      	strb	r2, [r3, #0]
 8018b66:	e008      	b.n	8018b7a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8018b68:	687b      	ldr	r3, [r7, #4]
 8018b6a:	681b      	ldr	r3, [r3, #0]
 8018b6c:	685b      	ldr	r3, [r3, #4]
 8018b6e:	b2db      	uxtb	r3, r3
 8018b70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018b74:	b2da      	uxtb	r2, r3
 8018b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b78:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8018b7a:	687b      	ldr	r3, [r7, #4]
 8018b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018b7e:	1c5a      	adds	r2, r3, #1
 8018b80:	687b      	ldr	r3, [r7, #4]
 8018b82:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8018b84:	687b      	ldr	r3, [r7, #4]
 8018b86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8018b88:	b29b      	uxth	r3, r3
 8018b8a:	3b01      	subs	r3, #1
 8018b8c:	b29b      	uxth	r3, r3
 8018b8e:	687a      	ldr	r2, [r7, #4]
 8018b90:	4619      	mov	r1, r3
 8018b92:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8018b94:	2b00      	cmp	r3, #0
 8018b96:	d15a      	bne.n	8018c4e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8018b98:	687b      	ldr	r3, [r7, #4]
 8018b9a:	681b      	ldr	r3, [r3, #0]
 8018b9c:	68da      	ldr	r2, [r3, #12]
 8018b9e:	687b      	ldr	r3, [r7, #4]
 8018ba0:	681b      	ldr	r3, [r3, #0]
 8018ba2:	f022 0220 	bic.w	r2, r2, #32
 8018ba6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8018ba8:	687b      	ldr	r3, [r7, #4]
 8018baa:	681b      	ldr	r3, [r3, #0]
 8018bac:	68da      	ldr	r2, [r3, #12]
 8018bae:	687b      	ldr	r3, [r7, #4]
 8018bb0:	681b      	ldr	r3, [r3, #0]
 8018bb2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8018bb6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8018bb8:	687b      	ldr	r3, [r7, #4]
 8018bba:	681b      	ldr	r3, [r3, #0]
 8018bbc:	695a      	ldr	r2, [r3, #20]
 8018bbe:	687b      	ldr	r3, [r7, #4]
 8018bc0:	681b      	ldr	r3, [r3, #0]
 8018bc2:	f022 0201 	bic.w	r2, r2, #1
 8018bc6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8018bc8:	687b      	ldr	r3, [r7, #4]
 8018bca:	2220      	movs	r2, #32
 8018bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018bd0:	687b      	ldr	r3, [r7, #4]
 8018bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018bd4:	2b01      	cmp	r3, #1
 8018bd6:	d135      	bne.n	8018c44 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018bd8:	687b      	ldr	r3, [r7, #4]
 8018bda:	2200      	movs	r2, #0
 8018bdc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018bde:	687b      	ldr	r3, [r7, #4]
 8018be0:	681b      	ldr	r3, [r3, #0]
 8018be2:	330c      	adds	r3, #12
 8018be4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018be6:	697b      	ldr	r3, [r7, #20]
 8018be8:	e853 3f00 	ldrex	r3, [r3]
 8018bec:	613b      	str	r3, [r7, #16]
   return(result);
 8018bee:	693b      	ldr	r3, [r7, #16]
 8018bf0:	f023 0310 	bic.w	r3, r3, #16
 8018bf4:	627b      	str	r3, [r7, #36]	; 0x24
 8018bf6:	687b      	ldr	r3, [r7, #4]
 8018bf8:	681b      	ldr	r3, [r3, #0]
 8018bfa:	330c      	adds	r3, #12
 8018bfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018bfe:	623a      	str	r2, [r7, #32]
 8018c00:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018c02:	69f9      	ldr	r1, [r7, #28]
 8018c04:	6a3a      	ldr	r2, [r7, #32]
 8018c06:	e841 2300 	strex	r3, r2, [r1]
 8018c0a:	61bb      	str	r3, [r7, #24]
   return(result);
 8018c0c:	69bb      	ldr	r3, [r7, #24]
 8018c0e:	2b00      	cmp	r3, #0
 8018c10:	d1e5      	bne.n	8018bde <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8018c12:	687b      	ldr	r3, [r7, #4]
 8018c14:	681b      	ldr	r3, [r3, #0]
 8018c16:	681b      	ldr	r3, [r3, #0]
 8018c18:	f003 0310 	and.w	r3, r3, #16
 8018c1c:	2b10      	cmp	r3, #16
 8018c1e:	d10a      	bne.n	8018c36 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8018c20:	2300      	movs	r3, #0
 8018c22:	60fb      	str	r3, [r7, #12]
 8018c24:	687b      	ldr	r3, [r7, #4]
 8018c26:	681b      	ldr	r3, [r3, #0]
 8018c28:	681b      	ldr	r3, [r3, #0]
 8018c2a:	60fb      	str	r3, [r7, #12]
 8018c2c:	687b      	ldr	r3, [r7, #4]
 8018c2e:	681b      	ldr	r3, [r3, #0]
 8018c30:	685b      	ldr	r3, [r3, #4]
 8018c32:	60fb      	str	r3, [r7, #12]
 8018c34:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8018c36:	687b      	ldr	r3, [r7, #4]
 8018c38:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8018c3a:	4619      	mov	r1, r3
 8018c3c:	6878      	ldr	r0, [r7, #4]
 8018c3e:	f7ff fc4d 	bl	80184dc <HAL_UARTEx_RxEventCallback>
 8018c42:	e002      	b.n	8018c4a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8018c44:	6878      	ldr	r0, [r7, #4]
 8018c46:	f7f8 f983 	bl	8010f50 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8018c4a:	2300      	movs	r3, #0
 8018c4c:	e002      	b.n	8018c54 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8018c4e:	2300      	movs	r3, #0
 8018c50:	e000      	b.n	8018c54 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8018c52:	2302      	movs	r3, #2
  }
}
 8018c54:	4618      	mov	r0, r3
 8018c56:	3730      	adds	r7, #48	; 0x30
 8018c58:	46bd      	mov	sp, r7
 8018c5a:	bd80      	pop	{r7, pc}

08018c5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8018c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c60:	b09f      	sub	sp, #124	; 0x7c
 8018c62:	af00      	add	r7, sp, #0
 8018c64:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8018c66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018c68:	681b      	ldr	r3, [r3, #0]
 8018c6a:	691b      	ldr	r3, [r3, #16]
 8018c6c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8018c70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018c72:	68d9      	ldr	r1, [r3, #12]
 8018c74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018c76:	681a      	ldr	r2, [r3, #0]
 8018c78:	ea40 0301 	orr.w	r3, r0, r1
 8018c7c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8018c7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018c80:	689a      	ldr	r2, [r3, #8]
 8018c82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018c84:	691b      	ldr	r3, [r3, #16]
 8018c86:	431a      	orrs	r2, r3
 8018c88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018c8a:	695b      	ldr	r3, [r3, #20]
 8018c8c:	431a      	orrs	r2, r3
 8018c8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018c90:	69db      	ldr	r3, [r3, #28]
 8018c92:	4313      	orrs	r3, r2
 8018c94:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8018c96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018c98:	681b      	ldr	r3, [r3, #0]
 8018c9a:	68db      	ldr	r3, [r3, #12]
 8018c9c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8018ca0:	f021 010c 	bic.w	r1, r1, #12
 8018ca4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018ca6:	681a      	ldr	r2, [r3, #0]
 8018ca8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8018caa:	430b      	orrs	r3, r1
 8018cac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8018cae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018cb0:	681b      	ldr	r3, [r3, #0]
 8018cb2:	695b      	ldr	r3, [r3, #20]
 8018cb4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8018cb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018cba:	6999      	ldr	r1, [r3, #24]
 8018cbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018cbe:	681a      	ldr	r2, [r3, #0]
 8018cc0:	ea40 0301 	orr.w	r3, r0, r1
 8018cc4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8018cc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018cc8:	681a      	ldr	r2, [r3, #0]
 8018cca:	4bc5      	ldr	r3, [pc, #788]	; (8018fe0 <UART_SetConfig+0x384>)
 8018ccc:	429a      	cmp	r2, r3
 8018cce:	d004      	beq.n	8018cda <UART_SetConfig+0x7e>
 8018cd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018cd2:	681a      	ldr	r2, [r3, #0]
 8018cd4:	4bc3      	ldr	r3, [pc, #780]	; (8018fe4 <UART_SetConfig+0x388>)
 8018cd6:	429a      	cmp	r2, r3
 8018cd8:	d103      	bne.n	8018ce2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8018cda:	f7fd fa07 	bl	80160ec <HAL_RCC_GetPCLK2Freq>
 8018cde:	6778      	str	r0, [r7, #116]	; 0x74
 8018ce0:	e002      	b.n	8018ce8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8018ce2:	f7fd f9ef 	bl	80160c4 <HAL_RCC_GetPCLK1Freq>
 8018ce6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8018ce8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018cea:	69db      	ldr	r3, [r3, #28]
 8018cec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8018cf0:	f040 80b6 	bne.w	8018e60 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8018cf4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8018cf6:	461c      	mov	r4, r3
 8018cf8:	f04f 0500 	mov.w	r5, #0
 8018cfc:	4622      	mov	r2, r4
 8018cfe:	462b      	mov	r3, r5
 8018d00:	1891      	adds	r1, r2, r2
 8018d02:	6439      	str	r1, [r7, #64]	; 0x40
 8018d04:	415b      	adcs	r3, r3
 8018d06:	647b      	str	r3, [r7, #68]	; 0x44
 8018d08:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8018d0c:	1912      	adds	r2, r2, r4
 8018d0e:	eb45 0303 	adc.w	r3, r5, r3
 8018d12:	f04f 0000 	mov.w	r0, #0
 8018d16:	f04f 0100 	mov.w	r1, #0
 8018d1a:	00d9      	lsls	r1, r3, #3
 8018d1c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8018d20:	00d0      	lsls	r0, r2, #3
 8018d22:	4602      	mov	r2, r0
 8018d24:	460b      	mov	r3, r1
 8018d26:	1911      	adds	r1, r2, r4
 8018d28:	6639      	str	r1, [r7, #96]	; 0x60
 8018d2a:	416b      	adcs	r3, r5
 8018d2c:	667b      	str	r3, [r7, #100]	; 0x64
 8018d2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018d30:	685b      	ldr	r3, [r3, #4]
 8018d32:	461a      	mov	r2, r3
 8018d34:	f04f 0300 	mov.w	r3, #0
 8018d38:	1891      	adds	r1, r2, r2
 8018d3a:	63b9      	str	r1, [r7, #56]	; 0x38
 8018d3c:	415b      	adcs	r3, r3
 8018d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8018d40:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8018d44:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8018d48:	f7f7 ff06 	bl	8010b58 <__aeabi_uldivmod>
 8018d4c:	4602      	mov	r2, r0
 8018d4e:	460b      	mov	r3, r1
 8018d50:	4ba5      	ldr	r3, [pc, #660]	; (8018fe8 <UART_SetConfig+0x38c>)
 8018d52:	fba3 2302 	umull	r2, r3, r3, r2
 8018d56:	095b      	lsrs	r3, r3, #5
 8018d58:	011e      	lsls	r6, r3, #4
 8018d5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8018d5c:	461c      	mov	r4, r3
 8018d5e:	f04f 0500 	mov.w	r5, #0
 8018d62:	4622      	mov	r2, r4
 8018d64:	462b      	mov	r3, r5
 8018d66:	1891      	adds	r1, r2, r2
 8018d68:	6339      	str	r1, [r7, #48]	; 0x30
 8018d6a:	415b      	adcs	r3, r3
 8018d6c:	637b      	str	r3, [r7, #52]	; 0x34
 8018d6e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8018d72:	1912      	adds	r2, r2, r4
 8018d74:	eb45 0303 	adc.w	r3, r5, r3
 8018d78:	f04f 0000 	mov.w	r0, #0
 8018d7c:	f04f 0100 	mov.w	r1, #0
 8018d80:	00d9      	lsls	r1, r3, #3
 8018d82:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8018d86:	00d0      	lsls	r0, r2, #3
 8018d88:	4602      	mov	r2, r0
 8018d8a:	460b      	mov	r3, r1
 8018d8c:	1911      	adds	r1, r2, r4
 8018d8e:	65b9      	str	r1, [r7, #88]	; 0x58
 8018d90:	416b      	adcs	r3, r5
 8018d92:	65fb      	str	r3, [r7, #92]	; 0x5c
 8018d94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018d96:	685b      	ldr	r3, [r3, #4]
 8018d98:	461a      	mov	r2, r3
 8018d9a:	f04f 0300 	mov.w	r3, #0
 8018d9e:	1891      	adds	r1, r2, r2
 8018da0:	62b9      	str	r1, [r7, #40]	; 0x28
 8018da2:	415b      	adcs	r3, r3
 8018da4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018da6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8018daa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8018dae:	f7f7 fed3 	bl	8010b58 <__aeabi_uldivmod>
 8018db2:	4602      	mov	r2, r0
 8018db4:	460b      	mov	r3, r1
 8018db6:	4b8c      	ldr	r3, [pc, #560]	; (8018fe8 <UART_SetConfig+0x38c>)
 8018db8:	fba3 1302 	umull	r1, r3, r3, r2
 8018dbc:	095b      	lsrs	r3, r3, #5
 8018dbe:	2164      	movs	r1, #100	; 0x64
 8018dc0:	fb01 f303 	mul.w	r3, r1, r3
 8018dc4:	1ad3      	subs	r3, r2, r3
 8018dc6:	00db      	lsls	r3, r3, #3
 8018dc8:	3332      	adds	r3, #50	; 0x32
 8018dca:	4a87      	ldr	r2, [pc, #540]	; (8018fe8 <UART_SetConfig+0x38c>)
 8018dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8018dd0:	095b      	lsrs	r3, r3, #5
 8018dd2:	005b      	lsls	r3, r3, #1
 8018dd4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8018dd8:	441e      	add	r6, r3
 8018dda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8018ddc:	4618      	mov	r0, r3
 8018dde:	f04f 0100 	mov.w	r1, #0
 8018de2:	4602      	mov	r2, r0
 8018de4:	460b      	mov	r3, r1
 8018de6:	1894      	adds	r4, r2, r2
 8018de8:	623c      	str	r4, [r7, #32]
 8018dea:	415b      	adcs	r3, r3
 8018dec:	627b      	str	r3, [r7, #36]	; 0x24
 8018dee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8018df2:	1812      	adds	r2, r2, r0
 8018df4:	eb41 0303 	adc.w	r3, r1, r3
 8018df8:	f04f 0400 	mov.w	r4, #0
 8018dfc:	f04f 0500 	mov.w	r5, #0
 8018e00:	00dd      	lsls	r5, r3, #3
 8018e02:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8018e06:	00d4      	lsls	r4, r2, #3
 8018e08:	4622      	mov	r2, r4
 8018e0a:	462b      	mov	r3, r5
 8018e0c:	1814      	adds	r4, r2, r0
 8018e0e:	653c      	str	r4, [r7, #80]	; 0x50
 8018e10:	414b      	adcs	r3, r1
 8018e12:	657b      	str	r3, [r7, #84]	; 0x54
 8018e14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018e16:	685b      	ldr	r3, [r3, #4]
 8018e18:	461a      	mov	r2, r3
 8018e1a:	f04f 0300 	mov.w	r3, #0
 8018e1e:	1891      	adds	r1, r2, r2
 8018e20:	61b9      	str	r1, [r7, #24]
 8018e22:	415b      	adcs	r3, r3
 8018e24:	61fb      	str	r3, [r7, #28]
 8018e26:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8018e2a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8018e2e:	f7f7 fe93 	bl	8010b58 <__aeabi_uldivmod>
 8018e32:	4602      	mov	r2, r0
 8018e34:	460b      	mov	r3, r1
 8018e36:	4b6c      	ldr	r3, [pc, #432]	; (8018fe8 <UART_SetConfig+0x38c>)
 8018e38:	fba3 1302 	umull	r1, r3, r3, r2
 8018e3c:	095b      	lsrs	r3, r3, #5
 8018e3e:	2164      	movs	r1, #100	; 0x64
 8018e40:	fb01 f303 	mul.w	r3, r1, r3
 8018e44:	1ad3      	subs	r3, r2, r3
 8018e46:	00db      	lsls	r3, r3, #3
 8018e48:	3332      	adds	r3, #50	; 0x32
 8018e4a:	4a67      	ldr	r2, [pc, #412]	; (8018fe8 <UART_SetConfig+0x38c>)
 8018e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8018e50:	095b      	lsrs	r3, r3, #5
 8018e52:	f003 0207 	and.w	r2, r3, #7
 8018e56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018e58:	681b      	ldr	r3, [r3, #0]
 8018e5a:	4432      	add	r2, r6
 8018e5c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8018e5e:	e0b9      	b.n	8018fd4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8018e60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8018e62:	461c      	mov	r4, r3
 8018e64:	f04f 0500 	mov.w	r5, #0
 8018e68:	4622      	mov	r2, r4
 8018e6a:	462b      	mov	r3, r5
 8018e6c:	1891      	adds	r1, r2, r2
 8018e6e:	6139      	str	r1, [r7, #16]
 8018e70:	415b      	adcs	r3, r3
 8018e72:	617b      	str	r3, [r7, #20]
 8018e74:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8018e78:	1912      	adds	r2, r2, r4
 8018e7a:	eb45 0303 	adc.w	r3, r5, r3
 8018e7e:	f04f 0000 	mov.w	r0, #0
 8018e82:	f04f 0100 	mov.w	r1, #0
 8018e86:	00d9      	lsls	r1, r3, #3
 8018e88:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8018e8c:	00d0      	lsls	r0, r2, #3
 8018e8e:	4602      	mov	r2, r0
 8018e90:	460b      	mov	r3, r1
 8018e92:	eb12 0804 	adds.w	r8, r2, r4
 8018e96:	eb43 0905 	adc.w	r9, r3, r5
 8018e9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018e9c:	685b      	ldr	r3, [r3, #4]
 8018e9e:	4618      	mov	r0, r3
 8018ea0:	f04f 0100 	mov.w	r1, #0
 8018ea4:	f04f 0200 	mov.w	r2, #0
 8018ea8:	f04f 0300 	mov.w	r3, #0
 8018eac:	008b      	lsls	r3, r1, #2
 8018eae:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8018eb2:	0082      	lsls	r2, r0, #2
 8018eb4:	4640      	mov	r0, r8
 8018eb6:	4649      	mov	r1, r9
 8018eb8:	f7f7 fe4e 	bl	8010b58 <__aeabi_uldivmod>
 8018ebc:	4602      	mov	r2, r0
 8018ebe:	460b      	mov	r3, r1
 8018ec0:	4b49      	ldr	r3, [pc, #292]	; (8018fe8 <UART_SetConfig+0x38c>)
 8018ec2:	fba3 2302 	umull	r2, r3, r3, r2
 8018ec6:	095b      	lsrs	r3, r3, #5
 8018ec8:	011e      	lsls	r6, r3, #4
 8018eca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8018ecc:	4618      	mov	r0, r3
 8018ece:	f04f 0100 	mov.w	r1, #0
 8018ed2:	4602      	mov	r2, r0
 8018ed4:	460b      	mov	r3, r1
 8018ed6:	1894      	adds	r4, r2, r2
 8018ed8:	60bc      	str	r4, [r7, #8]
 8018eda:	415b      	adcs	r3, r3
 8018edc:	60fb      	str	r3, [r7, #12]
 8018ede:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8018ee2:	1812      	adds	r2, r2, r0
 8018ee4:	eb41 0303 	adc.w	r3, r1, r3
 8018ee8:	f04f 0400 	mov.w	r4, #0
 8018eec:	f04f 0500 	mov.w	r5, #0
 8018ef0:	00dd      	lsls	r5, r3, #3
 8018ef2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8018ef6:	00d4      	lsls	r4, r2, #3
 8018ef8:	4622      	mov	r2, r4
 8018efa:	462b      	mov	r3, r5
 8018efc:	1814      	adds	r4, r2, r0
 8018efe:	64bc      	str	r4, [r7, #72]	; 0x48
 8018f00:	414b      	adcs	r3, r1
 8018f02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8018f04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018f06:	685b      	ldr	r3, [r3, #4]
 8018f08:	4618      	mov	r0, r3
 8018f0a:	f04f 0100 	mov.w	r1, #0
 8018f0e:	f04f 0200 	mov.w	r2, #0
 8018f12:	f04f 0300 	mov.w	r3, #0
 8018f16:	008b      	lsls	r3, r1, #2
 8018f18:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8018f1c:	0082      	lsls	r2, r0, #2
 8018f1e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8018f22:	f7f7 fe19 	bl	8010b58 <__aeabi_uldivmod>
 8018f26:	4602      	mov	r2, r0
 8018f28:	460b      	mov	r3, r1
 8018f2a:	4b2f      	ldr	r3, [pc, #188]	; (8018fe8 <UART_SetConfig+0x38c>)
 8018f2c:	fba3 1302 	umull	r1, r3, r3, r2
 8018f30:	095b      	lsrs	r3, r3, #5
 8018f32:	2164      	movs	r1, #100	; 0x64
 8018f34:	fb01 f303 	mul.w	r3, r1, r3
 8018f38:	1ad3      	subs	r3, r2, r3
 8018f3a:	011b      	lsls	r3, r3, #4
 8018f3c:	3332      	adds	r3, #50	; 0x32
 8018f3e:	4a2a      	ldr	r2, [pc, #168]	; (8018fe8 <UART_SetConfig+0x38c>)
 8018f40:	fba2 2303 	umull	r2, r3, r2, r3
 8018f44:	095b      	lsrs	r3, r3, #5
 8018f46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018f4a:	441e      	add	r6, r3
 8018f4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8018f4e:	4618      	mov	r0, r3
 8018f50:	f04f 0100 	mov.w	r1, #0
 8018f54:	4602      	mov	r2, r0
 8018f56:	460b      	mov	r3, r1
 8018f58:	1894      	adds	r4, r2, r2
 8018f5a:	603c      	str	r4, [r7, #0]
 8018f5c:	415b      	adcs	r3, r3
 8018f5e:	607b      	str	r3, [r7, #4]
 8018f60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018f64:	1812      	adds	r2, r2, r0
 8018f66:	eb41 0303 	adc.w	r3, r1, r3
 8018f6a:	f04f 0400 	mov.w	r4, #0
 8018f6e:	f04f 0500 	mov.w	r5, #0
 8018f72:	00dd      	lsls	r5, r3, #3
 8018f74:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8018f78:	00d4      	lsls	r4, r2, #3
 8018f7a:	4622      	mov	r2, r4
 8018f7c:	462b      	mov	r3, r5
 8018f7e:	eb12 0a00 	adds.w	sl, r2, r0
 8018f82:	eb43 0b01 	adc.w	fp, r3, r1
 8018f86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018f88:	685b      	ldr	r3, [r3, #4]
 8018f8a:	4618      	mov	r0, r3
 8018f8c:	f04f 0100 	mov.w	r1, #0
 8018f90:	f04f 0200 	mov.w	r2, #0
 8018f94:	f04f 0300 	mov.w	r3, #0
 8018f98:	008b      	lsls	r3, r1, #2
 8018f9a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8018f9e:	0082      	lsls	r2, r0, #2
 8018fa0:	4650      	mov	r0, sl
 8018fa2:	4659      	mov	r1, fp
 8018fa4:	f7f7 fdd8 	bl	8010b58 <__aeabi_uldivmod>
 8018fa8:	4602      	mov	r2, r0
 8018faa:	460b      	mov	r3, r1
 8018fac:	4b0e      	ldr	r3, [pc, #56]	; (8018fe8 <UART_SetConfig+0x38c>)
 8018fae:	fba3 1302 	umull	r1, r3, r3, r2
 8018fb2:	095b      	lsrs	r3, r3, #5
 8018fb4:	2164      	movs	r1, #100	; 0x64
 8018fb6:	fb01 f303 	mul.w	r3, r1, r3
 8018fba:	1ad3      	subs	r3, r2, r3
 8018fbc:	011b      	lsls	r3, r3, #4
 8018fbe:	3332      	adds	r3, #50	; 0x32
 8018fc0:	4a09      	ldr	r2, [pc, #36]	; (8018fe8 <UART_SetConfig+0x38c>)
 8018fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8018fc6:	095b      	lsrs	r3, r3, #5
 8018fc8:	f003 020f 	and.w	r2, r3, #15
 8018fcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018fce:	681b      	ldr	r3, [r3, #0]
 8018fd0:	4432      	add	r2, r6
 8018fd2:	609a      	str	r2, [r3, #8]
}
 8018fd4:	bf00      	nop
 8018fd6:	377c      	adds	r7, #124	; 0x7c
 8018fd8:	46bd      	mov	sp, r7
 8018fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018fde:	bf00      	nop
 8018fe0:	40011000 	.word	0x40011000
 8018fe4:	40011400 	.word	0x40011400
 8018fe8:	51eb851f 	.word	0x51eb851f

08018fec <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8018fec:	b480      	push	{r7}
 8018fee:	b085      	sub	sp, #20
 8018ff0:	af00      	add	r7, sp, #0
 8018ff2:	4603      	mov	r3, r0
 8018ff4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8018ff6:	2300      	movs	r3, #0
 8018ff8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8018ffa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8018ffe:	2b84      	cmp	r3, #132	; 0x84
 8019000:	d005      	beq.n	801900e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8019002:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8019006:	68fb      	ldr	r3, [r7, #12]
 8019008:	4413      	add	r3, r2
 801900a:	3303      	adds	r3, #3
 801900c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 801900e:	68fb      	ldr	r3, [r7, #12]
}
 8019010:	4618      	mov	r0, r3
 8019012:	3714      	adds	r7, #20
 8019014:	46bd      	mov	sp, r7
 8019016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801901a:	4770      	bx	lr

0801901c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 801901c:	b480      	push	{r7}
 801901e:	b083      	sub	sp, #12
 8019020:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8019022:	f3ef 8305 	mrs	r3, IPSR
 8019026:	607b      	str	r3, [r7, #4]
  return(result);
 8019028:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 801902a:	2b00      	cmp	r3, #0
 801902c:	bf14      	ite	ne
 801902e:	2301      	movne	r3, #1
 8019030:	2300      	moveq	r3, #0
 8019032:	b2db      	uxtb	r3, r3
}
 8019034:	4618      	mov	r0, r3
 8019036:	370c      	adds	r7, #12
 8019038:	46bd      	mov	sp, r7
 801903a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801903e:	4770      	bx	lr

08019040 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8019040:	b580      	push	{r7, lr}
 8019042:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8019044:	f001 ff38 	bl	801aeb8 <vTaskStartScheduler>
  
  return osOK;
 8019048:	2300      	movs	r3, #0
}
 801904a:	4618      	mov	r0, r3
 801904c:	bd80      	pop	{r7, pc}

0801904e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 801904e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019050:	b089      	sub	sp, #36	; 0x24
 8019052:	af04      	add	r7, sp, #16
 8019054:	6078      	str	r0, [r7, #4]
 8019056:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8019058:	687b      	ldr	r3, [r7, #4]
 801905a:	695b      	ldr	r3, [r3, #20]
 801905c:	2b00      	cmp	r3, #0
 801905e:	d020      	beq.n	80190a2 <osThreadCreate+0x54>
 8019060:	687b      	ldr	r3, [r7, #4]
 8019062:	699b      	ldr	r3, [r3, #24]
 8019064:	2b00      	cmp	r3, #0
 8019066:	d01c      	beq.n	80190a2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8019068:	687b      	ldr	r3, [r7, #4]
 801906a:	685c      	ldr	r4, [r3, #4]
 801906c:	687b      	ldr	r3, [r7, #4]
 801906e:	681d      	ldr	r5, [r3, #0]
 8019070:	687b      	ldr	r3, [r7, #4]
 8019072:	691e      	ldr	r6, [r3, #16]
 8019074:	687b      	ldr	r3, [r7, #4]
 8019076:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801907a:	4618      	mov	r0, r3
 801907c:	f7ff ffb6 	bl	8018fec <makeFreeRtosPriority>
 8019080:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8019082:	687b      	ldr	r3, [r7, #4]
 8019084:	695b      	ldr	r3, [r3, #20]
 8019086:	687a      	ldr	r2, [r7, #4]
 8019088:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801908a:	9202      	str	r2, [sp, #8]
 801908c:	9301      	str	r3, [sp, #4]
 801908e:	9100      	str	r1, [sp, #0]
 8019090:	683b      	ldr	r3, [r7, #0]
 8019092:	4632      	mov	r2, r6
 8019094:	4629      	mov	r1, r5
 8019096:	4620      	mov	r0, r4
 8019098:	f001 fb9c 	bl	801a7d4 <xTaskCreateStatic>
 801909c:	4603      	mov	r3, r0
 801909e:	60fb      	str	r3, [r7, #12]
 80190a0:	e01c      	b.n	80190dc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80190a2:	687b      	ldr	r3, [r7, #4]
 80190a4:	685c      	ldr	r4, [r3, #4]
 80190a6:	687b      	ldr	r3, [r7, #4]
 80190a8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80190aa:	687b      	ldr	r3, [r7, #4]
 80190ac:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80190ae:	b29e      	uxth	r6, r3
 80190b0:	687b      	ldr	r3, [r7, #4]
 80190b2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80190b6:	4618      	mov	r0, r3
 80190b8:	f7ff ff98 	bl	8018fec <makeFreeRtosPriority>
 80190bc:	4602      	mov	r2, r0
 80190be:	f107 030c 	add.w	r3, r7, #12
 80190c2:	9301      	str	r3, [sp, #4]
 80190c4:	9200      	str	r2, [sp, #0]
 80190c6:	683b      	ldr	r3, [r7, #0]
 80190c8:	4632      	mov	r2, r6
 80190ca:	4629      	mov	r1, r5
 80190cc:	4620      	mov	r0, r4
 80190ce:	f001 fbde 	bl	801a88e <xTaskCreate>
 80190d2:	4603      	mov	r3, r0
 80190d4:	2b01      	cmp	r3, #1
 80190d6:	d001      	beq.n	80190dc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80190d8:	2300      	movs	r3, #0
 80190da:	e000      	b.n	80190de <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80190dc:	68fb      	ldr	r3, [r7, #12]
}
 80190de:	4618      	mov	r0, r3
 80190e0:	3714      	adds	r7, #20
 80190e2:	46bd      	mov	sp, r7
 80190e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080190e6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80190e6:	b580      	push	{r7, lr}
 80190e8:	b084      	sub	sp, #16
 80190ea:	af00      	add	r7, sp, #0
 80190ec:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80190ee:	687b      	ldr	r3, [r7, #4]
 80190f0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80190f2:	68fb      	ldr	r3, [r7, #12]
 80190f4:	2b00      	cmp	r3, #0
 80190f6:	d001      	beq.n	80190fc <osDelay+0x16>
 80190f8:	68fb      	ldr	r3, [r7, #12]
 80190fa:	e000      	b.n	80190fe <osDelay+0x18>
 80190fc:	2301      	movs	r3, #1
 80190fe:	4618      	mov	r0, r3
 8019100:	f001 fd12 	bl	801ab28 <vTaskDelay>
  
  return osOK;
 8019104:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8019106:	4618      	mov	r0, r3
 8019108:	3710      	adds	r7, #16
 801910a:	46bd      	mov	sp, r7
 801910c:	bd80      	pop	{r7, pc}
	...

08019110 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8019110:	b580      	push	{r7, lr}
 8019112:	b086      	sub	sp, #24
 8019114:	af02      	add	r7, sp, #8
 8019116:	60f8      	str	r0, [r7, #12]
 8019118:	460b      	mov	r3, r1
 801911a:	607a      	str	r2, [r7, #4]
 801911c:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 801911e:	68fb      	ldr	r3, [r7, #12]
 8019120:	685b      	ldr	r3, [r3, #4]
 8019122:	2b00      	cmp	r3, #0
 8019124:	d013      	beq.n	801914e <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 8019126:	7afb      	ldrb	r3, [r7, #11]
 8019128:	2b01      	cmp	r3, #1
 801912a:	d101      	bne.n	8019130 <osTimerCreate+0x20>
 801912c:	2101      	movs	r1, #1
 801912e:	e000      	b.n	8019132 <osTimerCreate+0x22>
 8019130:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 8019132:	68fb      	ldr	r3, [r7, #12]
 8019134:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 8019136:	68fa      	ldr	r2, [r7, #12]
 8019138:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 801913a:	9201      	str	r2, [sp, #4]
 801913c:	9300      	str	r3, [sp, #0]
 801913e:	687b      	ldr	r3, [r7, #4]
 8019140:	460a      	mov	r2, r1
 8019142:	2101      	movs	r1, #1
 8019144:	480b      	ldr	r0, [pc, #44]	; (8019174 <osTimerCreate+0x64>)
 8019146:	f002 fd96 	bl	801bc76 <xTimerCreateStatic>
 801914a:	4603      	mov	r3, r0
 801914c:	e00e      	b.n	801916c <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 801914e:	7afb      	ldrb	r3, [r7, #11]
 8019150:	2b01      	cmp	r3, #1
 8019152:	d101      	bne.n	8019158 <osTimerCreate+0x48>
 8019154:	2201      	movs	r2, #1
 8019156:	e000      	b.n	801915a <osTimerCreate+0x4a>
 8019158:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 801915a:	68fb      	ldr	r3, [r7, #12]
 801915c:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 801915e:	9300      	str	r3, [sp, #0]
 8019160:	687b      	ldr	r3, [r7, #4]
 8019162:	2101      	movs	r1, #1
 8019164:	4803      	ldr	r0, [pc, #12]	; (8019174 <osTimerCreate+0x64>)
 8019166:	f002 fd65 	bl	801bc34 <xTimerCreate>
 801916a:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 801916c:	4618      	mov	r0, r3
 801916e:	3710      	adds	r7, #16
 8019170:	46bd      	mov	sp, r7
 8019172:	bd80      	pop	{r7, pc}
 8019174:	0802fd24 	.word	0x0802fd24

08019178 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 8019178:	b580      	push	{r7, lr}
 801917a:	b088      	sub	sp, #32
 801917c:	af02      	add	r7, sp, #8
 801917e:	6078      	str	r0, [r7, #4]
 8019180:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 8019182:	2300      	movs	r3, #0
 8019184:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8019186:	2300      	movs	r3, #0
 8019188:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 801918a:	683b      	ldr	r3, [r7, #0]
 801918c:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 801918e:	693b      	ldr	r3, [r7, #16]
 8019190:	2b00      	cmp	r3, #0
 8019192:	d101      	bne.n	8019198 <osTimerStart+0x20>
    ticks = 1;
 8019194:	2301      	movs	r3, #1
 8019196:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 8019198:	f7ff ff40 	bl	801901c <inHandlerMode>
 801919c:	4603      	mov	r3, r0
 801919e:	2b00      	cmp	r3, #0
 80191a0:	d01a      	beq.n	80191d8 <osTimerStart+0x60>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 80191a2:	f107 030c 	add.w	r3, r7, #12
 80191a6:	2200      	movs	r2, #0
 80191a8:	9200      	str	r2, [sp, #0]
 80191aa:	693a      	ldr	r2, [r7, #16]
 80191ac:	2109      	movs	r1, #9
 80191ae:	6878      	ldr	r0, [r7, #4]
 80191b0:	f002 fdda 	bl	801bd68 <xTimerGenericCommand>
 80191b4:	4603      	mov	r3, r0
 80191b6:	2b01      	cmp	r3, #1
 80191b8:	d002      	beq.n	80191c0 <osTimerStart+0x48>
    {
      result = osErrorOS;
 80191ba:	23ff      	movs	r3, #255	; 0xff
 80191bc:	617b      	str	r3, [r7, #20]
 80191be:	e018      	b.n	80191f2 <osTimerStart+0x7a>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 80191c0:	68fb      	ldr	r3, [r7, #12]
 80191c2:	2b00      	cmp	r3, #0
 80191c4:	d015      	beq.n	80191f2 <osTimerStart+0x7a>
 80191c6:	4b0d      	ldr	r3, [pc, #52]	; (80191fc <osTimerStart+0x84>)
 80191c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80191cc:	601a      	str	r2, [r3, #0]
 80191ce:	f3bf 8f4f 	dsb	sy
 80191d2:	f3bf 8f6f 	isb	sy
 80191d6:	e00c      	b.n	80191f2 <osTimerStart+0x7a>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 80191d8:	2300      	movs	r3, #0
 80191da:	9300      	str	r3, [sp, #0]
 80191dc:	2300      	movs	r3, #0
 80191de:	693a      	ldr	r2, [r7, #16]
 80191e0:	2104      	movs	r1, #4
 80191e2:	6878      	ldr	r0, [r7, #4]
 80191e4:	f002 fdc0 	bl	801bd68 <xTimerGenericCommand>
 80191e8:	4603      	mov	r3, r0
 80191ea:	2b01      	cmp	r3, #1
 80191ec:	d001      	beq.n	80191f2 <osTimerStart+0x7a>
      result = osErrorOS;
 80191ee:	23ff      	movs	r3, #255	; 0xff
 80191f0:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 80191f2:	697b      	ldr	r3, [r7, #20]
}
 80191f4:	4618      	mov	r0, r3
 80191f6:	3718      	adds	r7, #24
 80191f8:	46bd      	mov	sp, r7
 80191fa:	bd80      	pop	{r7, pc}
 80191fc:	e000ed04 	.word	0xe000ed04

08019200 <osTimerStop>:
* @param  timer_id      timer ID obtained by \ref osTimerCreate
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osTimerStop shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStop (osTimerId timer_id)
{
 8019200:	b580      	push	{r7, lr}
 8019202:	b086      	sub	sp, #24
 8019204:	af02      	add	r7, sp, #8
 8019206:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8019208:	2300      	movs	r3, #0
 801920a:	60fb      	str	r3, [r7, #12]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 801920c:	2300      	movs	r3, #0
 801920e:	60bb      	str	r3, [r7, #8]

  if (inHandlerMode()) {
 8019210:	f7ff ff04 	bl	801901c <inHandlerMode>
 8019214:	4603      	mov	r3, r0
 8019216:	2b00      	cmp	r3, #0
 8019218:	d019      	beq.n	801924e <osTimerStop+0x4e>
    if (xTimerStopFromISR(timer_id, &taskWoken) != pdPASS) {
 801921a:	f107 0308 	add.w	r3, r7, #8
 801921e:	2200      	movs	r2, #0
 8019220:	9200      	str	r2, [sp, #0]
 8019222:	2200      	movs	r2, #0
 8019224:	2108      	movs	r1, #8
 8019226:	6878      	ldr	r0, [r7, #4]
 8019228:	f002 fd9e 	bl	801bd68 <xTimerGenericCommand>
 801922c:	4603      	mov	r3, r0
 801922e:	2b01      	cmp	r3, #1
 8019230:	d001      	beq.n	8019236 <osTimerStop+0x36>
      return osErrorOS;
 8019232:	23ff      	movs	r3, #255	; 0xff
 8019234:	e019      	b.n	801926a <osTimerStop+0x6a>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8019236:	68bb      	ldr	r3, [r7, #8]
 8019238:	2b00      	cmp	r3, #0
 801923a:	d015      	beq.n	8019268 <osTimerStop+0x68>
 801923c:	4b0d      	ldr	r3, [pc, #52]	; (8019274 <osTimerStop+0x74>)
 801923e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019242:	601a      	str	r2, [r3, #0]
 8019244:	f3bf 8f4f 	dsb	sy
 8019248:	f3bf 8f6f 	isb	sy
 801924c:	e00c      	b.n	8019268 <osTimerStop+0x68>
  }
  else {
    if (xTimerStop(timer_id, 0) != pdPASS) {
 801924e:	2300      	movs	r3, #0
 8019250:	9300      	str	r3, [sp, #0]
 8019252:	2300      	movs	r3, #0
 8019254:	2200      	movs	r2, #0
 8019256:	2103      	movs	r1, #3
 8019258:	6878      	ldr	r0, [r7, #4]
 801925a:	f002 fd85 	bl	801bd68 <xTimerGenericCommand>
 801925e:	4603      	mov	r3, r0
 8019260:	2b01      	cmp	r3, #1
 8019262:	d001      	beq.n	8019268 <osTimerStop+0x68>
      result = osErrorOS;
 8019264:	23ff      	movs	r3, #255	; 0xff
 8019266:	60fb      	str	r3, [r7, #12]
    }
  }
#else 
  result = osErrorOS;
#endif 
  return result;
 8019268:	68fb      	ldr	r3, [r7, #12]
}
 801926a:	4618      	mov	r0, r3
 801926c:	3710      	adds	r7, #16
 801926e:	46bd      	mov	sp, r7
 8019270:	bd80      	pop	{r7, pc}
 8019272:	bf00      	nop
 8019274:	e000ed04 	.word	0xe000ed04

08019278 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8019278:	b580      	push	{r7, lr}
 801927a:	b082      	sub	sp, #8
 801927c:	af00      	add	r7, sp, #0
 801927e:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8019280:	687b      	ldr	r3, [r7, #4]
 8019282:	685b      	ldr	r3, [r3, #4]
 8019284:	2b00      	cmp	r3, #0
 8019286:	d007      	beq.n	8019298 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8019288:	687b      	ldr	r3, [r7, #4]
 801928a:	685b      	ldr	r3, [r3, #4]
 801928c:	4619      	mov	r1, r3
 801928e:	2001      	movs	r0, #1
 8019290:	f000 fc6d 	bl	8019b6e <xQueueCreateMutexStatic>
 8019294:	4603      	mov	r3, r0
 8019296:	e003      	b.n	80192a0 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8019298:	2001      	movs	r0, #1
 801929a:	f000 fc50 	bl	8019b3e <xQueueCreateMutex>
 801929e:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80192a0:	4618      	mov	r0, r3
 80192a2:	3708      	adds	r7, #8
 80192a4:	46bd      	mov	sp, r7
 80192a6:	bd80      	pop	{r7, pc}

080192a8 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80192a8:	b580      	push	{r7, lr}
 80192aa:	b084      	sub	sp, #16
 80192ac:	af00      	add	r7, sp, #0
 80192ae:	6078      	str	r0, [r7, #4]
 80192b0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80192b2:	2300      	movs	r3, #0
 80192b4:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80192b6:	687b      	ldr	r3, [r7, #4]
 80192b8:	2b00      	cmp	r3, #0
 80192ba:	d101      	bne.n	80192c0 <osMutexWait+0x18>
    return osErrorParameter;
 80192bc:	2380      	movs	r3, #128	; 0x80
 80192be:	e03a      	b.n	8019336 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80192c0:	2300      	movs	r3, #0
 80192c2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80192c4:	683b      	ldr	r3, [r7, #0]
 80192c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80192ca:	d103      	bne.n	80192d4 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80192cc:	f04f 33ff 	mov.w	r3, #4294967295
 80192d0:	60fb      	str	r3, [r7, #12]
 80192d2:	e009      	b.n	80192e8 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80192d4:	683b      	ldr	r3, [r7, #0]
 80192d6:	2b00      	cmp	r3, #0
 80192d8:	d006      	beq.n	80192e8 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80192da:	683b      	ldr	r3, [r7, #0]
 80192dc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80192de:	68fb      	ldr	r3, [r7, #12]
 80192e0:	2b00      	cmp	r3, #0
 80192e2:	d101      	bne.n	80192e8 <osMutexWait+0x40>
      ticks = 1;
 80192e4:	2301      	movs	r3, #1
 80192e6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80192e8:	f7ff fe98 	bl	801901c <inHandlerMode>
 80192ec:	4603      	mov	r3, r0
 80192ee:	2b00      	cmp	r3, #0
 80192f0:	d017      	beq.n	8019322 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80192f2:	f107 0308 	add.w	r3, r7, #8
 80192f6:	461a      	mov	r2, r3
 80192f8:	2100      	movs	r1, #0
 80192fa:	6878      	ldr	r0, [r7, #4]
 80192fc:	f001 f864 	bl	801a3c8 <xQueueReceiveFromISR>
 8019300:	4603      	mov	r3, r0
 8019302:	2b01      	cmp	r3, #1
 8019304:	d001      	beq.n	801930a <osMutexWait+0x62>
      return osErrorOS;
 8019306:	23ff      	movs	r3, #255	; 0xff
 8019308:	e015      	b.n	8019336 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 801930a:	68bb      	ldr	r3, [r7, #8]
 801930c:	2b00      	cmp	r3, #0
 801930e:	d011      	beq.n	8019334 <osMutexWait+0x8c>
 8019310:	4b0b      	ldr	r3, [pc, #44]	; (8019340 <osMutexWait+0x98>)
 8019312:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019316:	601a      	str	r2, [r3, #0]
 8019318:	f3bf 8f4f 	dsb	sy
 801931c:	f3bf 8f6f 	isb	sy
 8019320:	e008      	b.n	8019334 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8019322:	68f9      	ldr	r1, [r7, #12]
 8019324:	6878      	ldr	r0, [r7, #4]
 8019326:	f000 ff43 	bl	801a1b0 <xQueueSemaphoreTake>
 801932a:	4603      	mov	r3, r0
 801932c:	2b01      	cmp	r3, #1
 801932e:	d001      	beq.n	8019334 <osMutexWait+0x8c>
    return osErrorOS;
 8019330:	23ff      	movs	r3, #255	; 0xff
 8019332:	e000      	b.n	8019336 <osMutexWait+0x8e>
  }
  
  return osOK;
 8019334:	2300      	movs	r3, #0
}
 8019336:	4618      	mov	r0, r3
 8019338:	3710      	adds	r7, #16
 801933a:	46bd      	mov	sp, r7
 801933c:	bd80      	pop	{r7, pc}
 801933e:	bf00      	nop
 8019340:	e000ed04 	.word	0xe000ed04

08019344 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8019344:	b580      	push	{r7, lr}
 8019346:	b084      	sub	sp, #16
 8019348:	af00      	add	r7, sp, #0
 801934a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 801934c:	2300      	movs	r3, #0
 801934e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8019350:	2300      	movs	r3, #0
 8019352:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8019354:	f7ff fe62 	bl	801901c <inHandlerMode>
 8019358:	4603      	mov	r3, r0
 801935a:	2b00      	cmp	r3, #0
 801935c:	d016      	beq.n	801938c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 801935e:	f107 0308 	add.w	r3, r7, #8
 8019362:	4619      	mov	r1, r3
 8019364:	6878      	ldr	r0, [r7, #4]
 8019366:	f000 fdb6 	bl	8019ed6 <xQueueGiveFromISR>
 801936a:	4603      	mov	r3, r0
 801936c:	2b01      	cmp	r3, #1
 801936e:	d001      	beq.n	8019374 <osMutexRelease+0x30>
      return osErrorOS;
 8019370:	23ff      	movs	r3, #255	; 0xff
 8019372:	e017      	b.n	80193a4 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8019374:	68bb      	ldr	r3, [r7, #8]
 8019376:	2b00      	cmp	r3, #0
 8019378:	d013      	beq.n	80193a2 <osMutexRelease+0x5e>
 801937a:	4b0c      	ldr	r3, [pc, #48]	; (80193ac <osMutexRelease+0x68>)
 801937c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019380:	601a      	str	r2, [r3, #0]
 8019382:	f3bf 8f4f 	dsb	sy
 8019386:	f3bf 8f6f 	isb	sy
 801938a:	e00a      	b.n	80193a2 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 801938c:	2300      	movs	r3, #0
 801938e:	2200      	movs	r2, #0
 8019390:	2100      	movs	r1, #0
 8019392:	6878      	ldr	r0, [r7, #4]
 8019394:	f000 fc06 	bl	8019ba4 <xQueueGenericSend>
 8019398:	4603      	mov	r3, r0
 801939a:	2b01      	cmp	r3, #1
 801939c:	d001      	beq.n	80193a2 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 801939e:	23ff      	movs	r3, #255	; 0xff
 80193a0:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80193a2:	68fb      	ldr	r3, [r7, #12]
}
 80193a4:	4618      	mov	r0, r3
 80193a6:	3710      	adds	r7, #16
 80193a8:	46bd      	mov	sp, r7
 80193aa:	bd80      	pop	{r7, pc}
 80193ac:	e000ed04 	.word	0xe000ed04

080193b0 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80193b0:	b580      	push	{r7, lr}
 80193b2:	b086      	sub	sp, #24
 80193b4:	af02      	add	r7, sp, #8
 80193b6:	6078      	str	r0, [r7, #4]
 80193b8:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80193ba:	687b      	ldr	r3, [r7, #4]
 80193bc:	685b      	ldr	r3, [r3, #4]
 80193be:	2b00      	cmp	r3, #0
 80193c0:	d00f      	beq.n	80193e2 <osSemaphoreCreate+0x32>
    if (count == 1) {
 80193c2:	683b      	ldr	r3, [r7, #0]
 80193c4:	2b01      	cmp	r3, #1
 80193c6:	d10a      	bne.n	80193de <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80193c8:	687b      	ldr	r3, [r7, #4]
 80193ca:	685b      	ldr	r3, [r3, #4]
 80193cc:	2203      	movs	r2, #3
 80193ce:	9200      	str	r2, [sp, #0]
 80193d0:	2200      	movs	r2, #0
 80193d2:	2100      	movs	r1, #0
 80193d4:	2001      	movs	r0, #1
 80193d6:	f000 fac7 	bl	8019968 <xQueueGenericCreateStatic>
 80193da:	4603      	mov	r3, r0
 80193dc:	e016      	b.n	801940c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80193de:	2300      	movs	r3, #0
 80193e0:	e014      	b.n	801940c <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80193e2:	683b      	ldr	r3, [r7, #0]
 80193e4:	2b01      	cmp	r3, #1
 80193e6:	d110      	bne.n	801940a <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80193e8:	2203      	movs	r2, #3
 80193ea:	2100      	movs	r1, #0
 80193ec:	2001      	movs	r0, #1
 80193ee:	f000 fb33 	bl	8019a58 <xQueueGenericCreate>
 80193f2:	60f8      	str	r0, [r7, #12]
 80193f4:	68fb      	ldr	r3, [r7, #12]
 80193f6:	2b00      	cmp	r3, #0
 80193f8:	d005      	beq.n	8019406 <osSemaphoreCreate+0x56>
 80193fa:	2300      	movs	r3, #0
 80193fc:	2200      	movs	r2, #0
 80193fe:	2100      	movs	r1, #0
 8019400:	68f8      	ldr	r0, [r7, #12]
 8019402:	f000 fbcf 	bl	8019ba4 <xQueueGenericSend>
      return sema;
 8019406:	68fb      	ldr	r3, [r7, #12]
 8019408:	e000      	b.n	801940c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 801940a:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 801940c:	4618      	mov	r0, r3
 801940e:	3710      	adds	r7, #16
 8019410:	46bd      	mov	sp, r7
 8019412:	bd80      	pop	{r7, pc}

08019414 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8019414:	b580      	push	{r7, lr}
 8019416:	b084      	sub	sp, #16
 8019418:	af00      	add	r7, sp, #0
 801941a:	6078      	str	r0, [r7, #4]
 801941c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 801941e:	2300      	movs	r3, #0
 8019420:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8019422:	687b      	ldr	r3, [r7, #4]
 8019424:	2b00      	cmp	r3, #0
 8019426:	d101      	bne.n	801942c <osSemaphoreWait+0x18>
    return osErrorParameter;
 8019428:	2380      	movs	r3, #128	; 0x80
 801942a:	e03a      	b.n	80194a2 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 801942c:	2300      	movs	r3, #0
 801942e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8019430:	683b      	ldr	r3, [r7, #0]
 8019432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019436:	d103      	bne.n	8019440 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8019438:	f04f 33ff 	mov.w	r3, #4294967295
 801943c:	60fb      	str	r3, [r7, #12]
 801943e:	e009      	b.n	8019454 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8019440:	683b      	ldr	r3, [r7, #0]
 8019442:	2b00      	cmp	r3, #0
 8019444:	d006      	beq.n	8019454 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8019446:	683b      	ldr	r3, [r7, #0]
 8019448:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 801944a:	68fb      	ldr	r3, [r7, #12]
 801944c:	2b00      	cmp	r3, #0
 801944e:	d101      	bne.n	8019454 <osSemaphoreWait+0x40>
      ticks = 1;
 8019450:	2301      	movs	r3, #1
 8019452:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8019454:	f7ff fde2 	bl	801901c <inHandlerMode>
 8019458:	4603      	mov	r3, r0
 801945a:	2b00      	cmp	r3, #0
 801945c:	d017      	beq.n	801948e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 801945e:	f107 0308 	add.w	r3, r7, #8
 8019462:	461a      	mov	r2, r3
 8019464:	2100      	movs	r1, #0
 8019466:	6878      	ldr	r0, [r7, #4]
 8019468:	f000 ffae 	bl	801a3c8 <xQueueReceiveFromISR>
 801946c:	4603      	mov	r3, r0
 801946e:	2b01      	cmp	r3, #1
 8019470:	d001      	beq.n	8019476 <osSemaphoreWait+0x62>
      return osErrorOS;
 8019472:	23ff      	movs	r3, #255	; 0xff
 8019474:	e015      	b.n	80194a2 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8019476:	68bb      	ldr	r3, [r7, #8]
 8019478:	2b00      	cmp	r3, #0
 801947a:	d011      	beq.n	80194a0 <osSemaphoreWait+0x8c>
 801947c:	4b0b      	ldr	r3, [pc, #44]	; (80194ac <osSemaphoreWait+0x98>)
 801947e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019482:	601a      	str	r2, [r3, #0]
 8019484:	f3bf 8f4f 	dsb	sy
 8019488:	f3bf 8f6f 	isb	sy
 801948c:	e008      	b.n	80194a0 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 801948e:	68f9      	ldr	r1, [r7, #12]
 8019490:	6878      	ldr	r0, [r7, #4]
 8019492:	f000 fe8d 	bl	801a1b0 <xQueueSemaphoreTake>
 8019496:	4603      	mov	r3, r0
 8019498:	2b01      	cmp	r3, #1
 801949a:	d001      	beq.n	80194a0 <osSemaphoreWait+0x8c>
    return osErrorOS;
 801949c:	23ff      	movs	r3, #255	; 0xff
 801949e:	e000      	b.n	80194a2 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80194a0:	2300      	movs	r3, #0
}
 80194a2:	4618      	mov	r0, r3
 80194a4:	3710      	adds	r7, #16
 80194a6:	46bd      	mov	sp, r7
 80194a8:	bd80      	pop	{r7, pc}
 80194aa:	bf00      	nop
 80194ac:	e000ed04 	.word	0xe000ed04

080194b0 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80194b0:	b580      	push	{r7, lr}
 80194b2:	b084      	sub	sp, #16
 80194b4:	af00      	add	r7, sp, #0
 80194b6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80194b8:	2300      	movs	r3, #0
 80194ba:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80194bc:	2300      	movs	r3, #0
 80194be:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80194c0:	f7ff fdac 	bl	801901c <inHandlerMode>
 80194c4:	4603      	mov	r3, r0
 80194c6:	2b00      	cmp	r3, #0
 80194c8:	d016      	beq.n	80194f8 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80194ca:	f107 0308 	add.w	r3, r7, #8
 80194ce:	4619      	mov	r1, r3
 80194d0:	6878      	ldr	r0, [r7, #4]
 80194d2:	f000 fd00 	bl	8019ed6 <xQueueGiveFromISR>
 80194d6:	4603      	mov	r3, r0
 80194d8:	2b01      	cmp	r3, #1
 80194da:	d001      	beq.n	80194e0 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80194dc:	23ff      	movs	r3, #255	; 0xff
 80194de:	e017      	b.n	8019510 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80194e0:	68bb      	ldr	r3, [r7, #8]
 80194e2:	2b00      	cmp	r3, #0
 80194e4:	d013      	beq.n	801950e <osSemaphoreRelease+0x5e>
 80194e6:	4b0c      	ldr	r3, [pc, #48]	; (8019518 <osSemaphoreRelease+0x68>)
 80194e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80194ec:	601a      	str	r2, [r3, #0]
 80194ee:	f3bf 8f4f 	dsb	sy
 80194f2:	f3bf 8f6f 	isb	sy
 80194f6:	e00a      	b.n	801950e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80194f8:	2300      	movs	r3, #0
 80194fa:	2200      	movs	r2, #0
 80194fc:	2100      	movs	r1, #0
 80194fe:	6878      	ldr	r0, [r7, #4]
 8019500:	f000 fb50 	bl	8019ba4 <xQueueGenericSend>
 8019504:	4603      	mov	r3, r0
 8019506:	2b01      	cmp	r3, #1
 8019508:	d001      	beq.n	801950e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 801950a:	23ff      	movs	r3, #255	; 0xff
 801950c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 801950e:	68fb      	ldr	r3, [r7, #12]
}
 8019510:	4618      	mov	r0, r3
 8019512:	3710      	adds	r7, #16
 8019514:	46bd      	mov	sp, r7
 8019516:	bd80      	pop	{r7, pc}
 8019518:	e000ed04 	.word	0xe000ed04

0801951c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 801951c:	b590      	push	{r4, r7, lr}
 801951e:	b085      	sub	sp, #20
 8019520:	af02      	add	r7, sp, #8
 8019522:	6078      	str	r0, [r7, #4]
 8019524:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8019526:	687b      	ldr	r3, [r7, #4]
 8019528:	689b      	ldr	r3, [r3, #8]
 801952a:	2b00      	cmp	r3, #0
 801952c:	d011      	beq.n	8019552 <osMessageCreate+0x36>
 801952e:	687b      	ldr	r3, [r7, #4]
 8019530:	68db      	ldr	r3, [r3, #12]
 8019532:	2b00      	cmp	r3, #0
 8019534:	d00d      	beq.n	8019552 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8019536:	687b      	ldr	r3, [r7, #4]
 8019538:	6818      	ldr	r0, [r3, #0]
 801953a:	687b      	ldr	r3, [r7, #4]
 801953c:	6859      	ldr	r1, [r3, #4]
 801953e:	687b      	ldr	r3, [r7, #4]
 8019540:	689a      	ldr	r2, [r3, #8]
 8019542:	687b      	ldr	r3, [r7, #4]
 8019544:	68db      	ldr	r3, [r3, #12]
 8019546:	2400      	movs	r4, #0
 8019548:	9400      	str	r4, [sp, #0]
 801954a:	f000 fa0d 	bl	8019968 <xQueueGenericCreateStatic>
 801954e:	4603      	mov	r3, r0
 8019550:	e008      	b.n	8019564 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8019552:	687b      	ldr	r3, [r7, #4]
 8019554:	6818      	ldr	r0, [r3, #0]
 8019556:	687b      	ldr	r3, [r7, #4]
 8019558:	685b      	ldr	r3, [r3, #4]
 801955a:	2200      	movs	r2, #0
 801955c:	4619      	mov	r1, r3
 801955e:	f000 fa7b 	bl	8019a58 <xQueueGenericCreate>
 8019562:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8019564:	4618      	mov	r0, r3
 8019566:	370c      	adds	r7, #12
 8019568:	46bd      	mov	sp, r7
 801956a:	bd90      	pop	{r4, r7, pc}

0801956c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 801956c:	b580      	push	{r7, lr}
 801956e:	b086      	sub	sp, #24
 8019570:	af00      	add	r7, sp, #0
 8019572:	60f8      	str	r0, [r7, #12]
 8019574:	60b9      	str	r1, [r7, #8]
 8019576:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8019578:	2300      	movs	r3, #0
 801957a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 801957c:	687b      	ldr	r3, [r7, #4]
 801957e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8019580:	697b      	ldr	r3, [r7, #20]
 8019582:	2b00      	cmp	r3, #0
 8019584:	d101      	bne.n	801958a <osMessagePut+0x1e>
    ticks = 1;
 8019586:	2301      	movs	r3, #1
 8019588:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 801958a:	f7ff fd47 	bl	801901c <inHandlerMode>
 801958e:	4603      	mov	r3, r0
 8019590:	2b00      	cmp	r3, #0
 8019592:	d018      	beq.n	80195c6 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8019594:	f107 0210 	add.w	r2, r7, #16
 8019598:	f107 0108 	add.w	r1, r7, #8
 801959c:	2300      	movs	r3, #0
 801959e:	68f8      	ldr	r0, [r7, #12]
 80195a0:	f000 fbfe 	bl	8019da0 <xQueueGenericSendFromISR>
 80195a4:	4603      	mov	r3, r0
 80195a6:	2b01      	cmp	r3, #1
 80195a8:	d001      	beq.n	80195ae <osMessagePut+0x42>
      return osErrorOS;
 80195aa:	23ff      	movs	r3, #255	; 0xff
 80195ac:	e018      	b.n	80195e0 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80195ae:	693b      	ldr	r3, [r7, #16]
 80195b0:	2b00      	cmp	r3, #0
 80195b2:	d014      	beq.n	80195de <osMessagePut+0x72>
 80195b4:	4b0c      	ldr	r3, [pc, #48]	; (80195e8 <osMessagePut+0x7c>)
 80195b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80195ba:	601a      	str	r2, [r3, #0]
 80195bc:	f3bf 8f4f 	dsb	sy
 80195c0:	f3bf 8f6f 	isb	sy
 80195c4:	e00b      	b.n	80195de <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80195c6:	f107 0108 	add.w	r1, r7, #8
 80195ca:	2300      	movs	r3, #0
 80195cc:	697a      	ldr	r2, [r7, #20]
 80195ce:	68f8      	ldr	r0, [r7, #12]
 80195d0:	f000 fae8 	bl	8019ba4 <xQueueGenericSend>
 80195d4:	4603      	mov	r3, r0
 80195d6:	2b01      	cmp	r3, #1
 80195d8:	d001      	beq.n	80195de <osMessagePut+0x72>
      return osErrorOS;
 80195da:	23ff      	movs	r3, #255	; 0xff
 80195dc:	e000      	b.n	80195e0 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80195de:	2300      	movs	r3, #0
}
 80195e0:	4618      	mov	r0, r3
 80195e2:	3718      	adds	r7, #24
 80195e4:	46bd      	mov	sp, r7
 80195e6:	bd80      	pop	{r7, pc}
 80195e8:	e000ed04 	.word	0xe000ed04

080195ec <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80195ec:	b590      	push	{r4, r7, lr}
 80195ee:	b08b      	sub	sp, #44	; 0x2c
 80195f0:	af00      	add	r7, sp, #0
 80195f2:	60f8      	str	r0, [r7, #12]
 80195f4:	60b9      	str	r1, [r7, #8]
 80195f6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80195f8:	68bb      	ldr	r3, [r7, #8]
 80195fa:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80195fc:	2300      	movs	r3, #0
 80195fe:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8019600:	68bb      	ldr	r3, [r7, #8]
 8019602:	2b00      	cmp	r3, #0
 8019604:	d10a      	bne.n	801961c <osMessageGet+0x30>
    event.status = osErrorParameter;
 8019606:	2380      	movs	r3, #128	; 0x80
 8019608:	617b      	str	r3, [r7, #20]
    return event;
 801960a:	68fb      	ldr	r3, [r7, #12]
 801960c:	461c      	mov	r4, r3
 801960e:	f107 0314 	add.w	r3, r7, #20
 8019612:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8019616:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801961a:	e054      	b.n	80196c6 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 801961c:	2300      	movs	r3, #0
 801961e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8019620:	2300      	movs	r3, #0
 8019622:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8019624:	687b      	ldr	r3, [r7, #4]
 8019626:	f1b3 3fff 	cmp.w	r3, #4294967295
 801962a:	d103      	bne.n	8019634 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 801962c:	f04f 33ff 	mov.w	r3, #4294967295
 8019630:	627b      	str	r3, [r7, #36]	; 0x24
 8019632:	e009      	b.n	8019648 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8019634:	687b      	ldr	r3, [r7, #4]
 8019636:	2b00      	cmp	r3, #0
 8019638:	d006      	beq.n	8019648 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 801963a:	687b      	ldr	r3, [r7, #4]
 801963c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 801963e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019640:	2b00      	cmp	r3, #0
 8019642:	d101      	bne.n	8019648 <osMessageGet+0x5c>
      ticks = 1;
 8019644:	2301      	movs	r3, #1
 8019646:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8019648:	f7ff fce8 	bl	801901c <inHandlerMode>
 801964c:	4603      	mov	r3, r0
 801964e:	2b00      	cmp	r3, #0
 8019650:	d01c      	beq.n	801968c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8019652:	f107 0220 	add.w	r2, r7, #32
 8019656:	f107 0314 	add.w	r3, r7, #20
 801965a:	3304      	adds	r3, #4
 801965c:	4619      	mov	r1, r3
 801965e:	68b8      	ldr	r0, [r7, #8]
 8019660:	f000 feb2 	bl	801a3c8 <xQueueReceiveFromISR>
 8019664:	4603      	mov	r3, r0
 8019666:	2b01      	cmp	r3, #1
 8019668:	d102      	bne.n	8019670 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 801966a:	2310      	movs	r3, #16
 801966c:	617b      	str	r3, [r7, #20]
 801966e:	e001      	b.n	8019674 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8019670:	2300      	movs	r3, #0
 8019672:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8019674:	6a3b      	ldr	r3, [r7, #32]
 8019676:	2b00      	cmp	r3, #0
 8019678:	d01d      	beq.n	80196b6 <osMessageGet+0xca>
 801967a:	4b15      	ldr	r3, [pc, #84]	; (80196d0 <osMessageGet+0xe4>)
 801967c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019680:	601a      	str	r2, [r3, #0]
 8019682:	f3bf 8f4f 	dsb	sy
 8019686:	f3bf 8f6f 	isb	sy
 801968a:	e014      	b.n	80196b6 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 801968c:	f107 0314 	add.w	r3, r7, #20
 8019690:	3304      	adds	r3, #4
 8019692:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019694:	4619      	mov	r1, r3
 8019696:	68b8      	ldr	r0, [r7, #8]
 8019698:	f000 fcaa 	bl	8019ff0 <xQueueReceive>
 801969c:	4603      	mov	r3, r0
 801969e:	2b01      	cmp	r3, #1
 80196a0:	d102      	bne.n	80196a8 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80196a2:	2310      	movs	r3, #16
 80196a4:	617b      	str	r3, [r7, #20]
 80196a6:	e006      	b.n	80196b6 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80196a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80196aa:	2b00      	cmp	r3, #0
 80196ac:	d101      	bne.n	80196b2 <osMessageGet+0xc6>
 80196ae:	2300      	movs	r3, #0
 80196b0:	e000      	b.n	80196b4 <osMessageGet+0xc8>
 80196b2:	2340      	movs	r3, #64	; 0x40
 80196b4:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80196b6:	68fb      	ldr	r3, [r7, #12]
 80196b8:	461c      	mov	r4, r3
 80196ba:	f107 0314 	add.w	r3, r7, #20
 80196be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80196c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80196c6:	68f8      	ldr	r0, [r7, #12]
 80196c8:	372c      	adds	r7, #44	; 0x2c
 80196ca:	46bd      	mov	sp, r7
 80196cc:	bd90      	pop	{r4, r7, pc}
 80196ce:	bf00      	nop
 80196d0:	e000ed04 	.word	0xe000ed04

080196d4 <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 80196d4:	b580      	push	{r7, lr}
 80196d6:	b082      	sub	sp, #8
 80196d8:	af00      	add	r7, sp, #0
 80196da:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 80196dc:	6878      	ldr	r0, [r7, #4]
 80196de:	f001 fa57 	bl	801ab90 <vTaskSuspend>
  
  return osOK;
 80196e2:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 80196e4:	4618      	mov	r0, r3
 80196e6:	3708      	adds	r7, #8
 80196e8:	46bd      	mov	sp, r7
 80196ea:	bd80      	pop	{r7, pc}

080196ec <osThreadResume>:
* @brief  Resume execution of a suspended thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResume (osThreadId thread_id)
{
 80196ec:	b580      	push	{r7, lr}
 80196ee:	b082      	sub	sp, #8
 80196f0:	af00      	add	r7, sp, #0
 80196f2:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)  
  if(inHandlerMode())
 80196f4:	f7ff fc92 	bl	801901c <inHandlerMode>
 80196f8:	4603      	mov	r3, r0
 80196fa:	2b00      	cmp	r3, #0
 80196fc:	d00e      	beq.n	801971c <osThreadResume+0x30>
  {
    if (xTaskResumeFromISR(thread_id) == pdTRUE)
 80196fe:	6878      	ldr	r0, [r7, #4]
 8019700:	f001 fb68 	bl	801add4 <xTaskResumeFromISR>
 8019704:	4603      	mov	r3, r0
 8019706:	2b01      	cmp	r3, #1
 8019708:	d10b      	bne.n	8019722 <osThreadResume+0x36>
    {
      portYIELD_FROM_ISR(pdTRUE);
 801970a:	4b08      	ldr	r3, [pc, #32]	; (801972c <osThreadResume+0x40>)
 801970c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019710:	601a      	str	r2, [r3, #0]
 8019712:	f3bf 8f4f 	dsb	sy
 8019716:	f3bf 8f6f 	isb	sy
 801971a:	e002      	b.n	8019722 <osThreadResume+0x36>
    }
  }
  else
  {
    vTaskResume(thread_id);
 801971c:	6878      	ldr	r0, [r7, #4]
 801971e:	f001 fafb 	bl	801ad18 <vTaskResume>
  }
  return osOK;
 8019722:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 8019724:	4618      	mov	r0, r3
 8019726:	3708      	adds	r7, #8
 8019728:	46bd      	mov	sp, r7
 801972a:	bd80      	pop	{r7, pc}
 801972c:	e000ed04 	.word	0xe000ed04

08019730 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8019730:	b480      	push	{r7}
 8019732:	b083      	sub	sp, #12
 8019734:	af00      	add	r7, sp, #0
 8019736:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8019738:	687b      	ldr	r3, [r7, #4]
 801973a:	f103 0208 	add.w	r2, r3, #8
 801973e:	687b      	ldr	r3, [r7, #4]
 8019740:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8019742:	687b      	ldr	r3, [r7, #4]
 8019744:	f04f 32ff 	mov.w	r2, #4294967295
 8019748:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801974a:	687b      	ldr	r3, [r7, #4]
 801974c:	f103 0208 	add.w	r2, r3, #8
 8019750:	687b      	ldr	r3, [r7, #4]
 8019752:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8019754:	687b      	ldr	r3, [r7, #4]
 8019756:	f103 0208 	add.w	r2, r3, #8
 801975a:	687b      	ldr	r3, [r7, #4]
 801975c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801975e:	687b      	ldr	r3, [r7, #4]
 8019760:	2200      	movs	r2, #0
 8019762:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8019764:	bf00      	nop
 8019766:	370c      	adds	r7, #12
 8019768:	46bd      	mov	sp, r7
 801976a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801976e:	4770      	bx	lr

08019770 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8019770:	b480      	push	{r7}
 8019772:	b083      	sub	sp, #12
 8019774:	af00      	add	r7, sp, #0
 8019776:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8019778:	687b      	ldr	r3, [r7, #4]
 801977a:	2200      	movs	r2, #0
 801977c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801977e:	bf00      	nop
 8019780:	370c      	adds	r7, #12
 8019782:	46bd      	mov	sp, r7
 8019784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019788:	4770      	bx	lr

0801978a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801978a:	b480      	push	{r7}
 801978c:	b085      	sub	sp, #20
 801978e:	af00      	add	r7, sp, #0
 8019790:	6078      	str	r0, [r7, #4]
 8019792:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8019794:	687b      	ldr	r3, [r7, #4]
 8019796:	685b      	ldr	r3, [r3, #4]
 8019798:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801979a:	683b      	ldr	r3, [r7, #0]
 801979c:	68fa      	ldr	r2, [r7, #12]
 801979e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80197a0:	68fb      	ldr	r3, [r7, #12]
 80197a2:	689a      	ldr	r2, [r3, #8]
 80197a4:	683b      	ldr	r3, [r7, #0]
 80197a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80197a8:	68fb      	ldr	r3, [r7, #12]
 80197aa:	689b      	ldr	r3, [r3, #8]
 80197ac:	683a      	ldr	r2, [r7, #0]
 80197ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80197b0:	68fb      	ldr	r3, [r7, #12]
 80197b2:	683a      	ldr	r2, [r7, #0]
 80197b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80197b6:	683b      	ldr	r3, [r7, #0]
 80197b8:	687a      	ldr	r2, [r7, #4]
 80197ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80197bc:	687b      	ldr	r3, [r7, #4]
 80197be:	681b      	ldr	r3, [r3, #0]
 80197c0:	1c5a      	adds	r2, r3, #1
 80197c2:	687b      	ldr	r3, [r7, #4]
 80197c4:	601a      	str	r2, [r3, #0]
}
 80197c6:	bf00      	nop
 80197c8:	3714      	adds	r7, #20
 80197ca:	46bd      	mov	sp, r7
 80197cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197d0:	4770      	bx	lr

080197d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80197d2:	b480      	push	{r7}
 80197d4:	b085      	sub	sp, #20
 80197d6:	af00      	add	r7, sp, #0
 80197d8:	6078      	str	r0, [r7, #4]
 80197da:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80197dc:	683b      	ldr	r3, [r7, #0]
 80197de:	681b      	ldr	r3, [r3, #0]
 80197e0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80197e2:	68bb      	ldr	r3, [r7, #8]
 80197e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80197e8:	d103      	bne.n	80197f2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80197ea:	687b      	ldr	r3, [r7, #4]
 80197ec:	691b      	ldr	r3, [r3, #16]
 80197ee:	60fb      	str	r3, [r7, #12]
 80197f0:	e00c      	b.n	801980c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80197f2:	687b      	ldr	r3, [r7, #4]
 80197f4:	3308      	adds	r3, #8
 80197f6:	60fb      	str	r3, [r7, #12]
 80197f8:	e002      	b.n	8019800 <vListInsert+0x2e>
 80197fa:	68fb      	ldr	r3, [r7, #12]
 80197fc:	685b      	ldr	r3, [r3, #4]
 80197fe:	60fb      	str	r3, [r7, #12]
 8019800:	68fb      	ldr	r3, [r7, #12]
 8019802:	685b      	ldr	r3, [r3, #4]
 8019804:	681b      	ldr	r3, [r3, #0]
 8019806:	68ba      	ldr	r2, [r7, #8]
 8019808:	429a      	cmp	r2, r3
 801980a:	d2f6      	bcs.n	80197fa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801980c:	68fb      	ldr	r3, [r7, #12]
 801980e:	685a      	ldr	r2, [r3, #4]
 8019810:	683b      	ldr	r3, [r7, #0]
 8019812:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8019814:	683b      	ldr	r3, [r7, #0]
 8019816:	685b      	ldr	r3, [r3, #4]
 8019818:	683a      	ldr	r2, [r7, #0]
 801981a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801981c:	683b      	ldr	r3, [r7, #0]
 801981e:	68fa      	ldr	r2, [r7, #12]
 8019820:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8019822:	68fb      	ldr	r3, [r7, #12]
 8019824:	683a      	ldr	r2, [r7, #0]
 8019826:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8019828:	683b      	ldr	r3, [r7, #0]
 801982a:	687a      	ldr	r2, [r7, #4]
 801982c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801982e:	687b      	ldr	r3, [r7, #4]
 8019830:	681b      	ldr	r3, [r3, #0]
 8019832:	1c5a      	adds	r2, r3, #1
 8019834:	687b      	ldr	r3, [r7, #4]
 8019836:	601a      	str	r2, [r3, #0]
}
 8019838:	bf00      	nop
 801983a:	3714      	adds	r7, #20
 801983c:	46bd      	mov	sp, r7
 801983e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019842:	4770      	bx	lr

08019844 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8019844:	b480      	push	{r7}
 8019846:	b085      	sub	sp, #20
 8019848:	af00      	add	r7, sp, #0
 801984a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801984c:	687b      	ldr	r3, [r7, #4]
 801984e:	691b      	ldr	r3, [r3, #16]
 8019850:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8019852:	687b      	ldr	r3, [r7, #4]
 8019854:	685b      	ldr	r3, [r3, #4]
 8019856:	687a      	ldr	r2, [r7, #4]
 8019858:	6892      	ldr	r2, [r2, #8]
 801985a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801985c:	687b      	ldr	r3, [r7, #4]
 801985e:	689b      	ldr	r3, [r3, #8]
 8019860:	687a      	ldr	r2, [r7, #4]
 8019862:	6852      	ldr	r2, [r2, #4]
 8019864:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8019866:	68fb      	ldr	r3, [r7, #12]
 8019868:	685b      	ldr	r3, [r3, #4]
 801986a:	687a      	ldr	r2, [r7, #4]
 801986c:	429a      	cmp	r2, r3
 801986e:	d103      	bne.n	8019878 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8019870:	687b      	ldr	r3, [r7, #4]
 8019872:	689a      	ldr	r2, [r3, #8]
 8019874:	68fb      	ldr	r3, [r7, #12]
 8019876:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8019878:	687b      	ldr	r3, [r7, #4]
 801987a:	2200      	movs	r2, #0
 801987c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801987e:	68fb      	ldr	r3, [r7, #12]
 8019880:	681b      	ldr	r3, [r3, #0]
 8019882:	1e5a      	subs	r2, r3, #1
 8019884:	68fb      	ldr	r3, [r7, #12]
 8019886:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8019888:	68fb      	ldr	r3, [r7, #12]
 801988a:	681b      	ldr	r3, [r3, #0]
}
 801988c:	4618      	mov	r0, r3
 801988e:	3714      	adds	r7, #20
 8019890:	46bd      	mov	sp, r7
 8019892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019896:	4770      	bx	lr

08019898 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8019898:	b580      	push	{r7, lr}
 801989a:	b084      	sub	sp, #16
 801989c:	af00      	add	r7, sp, #0
 801989e:	6078      	str	r0, [r7, #4]
 80198a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80198a2:	687b      	ldr	r3, [r7, #4]
 80198a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80198a6:	68fb      	ldr	r3, [r7, #12]
 80198a8:	2b00      	cmp	r3, #0
 80198aa:	d10a      	bne.n	80198c2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80198ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80198b0:	f383 8811 	msr	BASEPRI, r3
 80198b4:	f3bf 8f6f 	isb	sy
 80198b8:	f3bf 8f4f 	dsb	sy
 80198bc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80198be:	bf00      	nop
 80198c0:	e7fe      	b.n	80198c0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80198c2:	f002 fe67 	bl	801c594 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80198c6:	68fb      	ldr	r3, [r7, #12]
 80198c8:	681a      	ldr	r2, [r3, #0]
 80198ca:	68fb      	ldr	r3, [r7, #12]
 80198cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80198ce:	68f9      	ldr	r1, [r7, #12]
 80198d0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80198d2:	fb01 f303 	mul.w	r3, r1, r3
 80198d6:	441a      	add	r2, r3
 80198d8:	68fb      	ldr	r3, [r7, #12]
 80198da:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80198dc:	68fb      	ldr	r3, [r7, #12]
 80198de:	2200      	movs	r2, #0
 80198e0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80198e2:	68fb      	ldr	r3, [r7, #12]
 80198e4:	681a      	ldr	r2, [r3, #0]
 80198e6:	68fb      	ldr	r3, [r7, #12]
 80198e8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80198ea:	68fb      	ldr	r3, [r7, #12]
 80198ec:	681a      	ldr	r2, [r3, #0]
 80198ee:	68fb      	ldr	r3, [r7, #12]
 80198f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80198f2:	3b01      	subs	r3, #1
 80198f4:	68f9      	ldr	r1, [r7, #12]
 80198f6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80198f8:	fb01 f303 	mul.w	r3, r1, r3
 80198fc:	441a      	add	r2, r3
 80198fe:	68fb      	ldr	r3, [r7, #12]
 8019900:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8019902:	68fb      	ldr	r3, [r7, #12]
 8019904:	22ff      	movs	r2, #255	; 0xff
 8019906:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801990a:	68fb      	ldr	r3, [r7, #12]
 801990c:	22ff      	movs	r2, #255	; 0xff
 801990e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8019912:	683b      	ldr	r3, [r7, #0]
 8019914:	2b00      	cmp	r3, #0
 8019916:	d114      	bne.n	8019942 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8019918:	68fb      	ldr	r3, [r7, #12]
 801991a:	691b      	ldr	r3, [r3, #16]
 801991c:	2b00      	cmp	r3, #0
 801991e:	d01a      	beq.n	8019956 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8019920:	68fb      	ldr	r3, [r7, #12]
 8019922:	3310      	adds	r3, #16
 8019924:	4618      	mov	r0, r3
 8019926:	f001 fd5b 	bl	801b3e0 <xTaskRemoveFromEventList>
 801992a:	4603      	mov	r3, r0
 801992c:	2b00      	cmp	r3, #0
 801992e:	d012      	beq.n	8019956 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8019930:	4b0c      	ldr	r3, [pc, #48]	; (8019964 <xQueueGenericReset+0xcc>)
 8019932:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019936:	601a      	str	r2, [r3, #0]
 8019938:	f3bf 8f4f 	dsb	sy
 801993c:	f3bf 8f6f 	isb	sy
 8019940:	e009      	b.n	8019956 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8019942:	68fb      	ldr	r3, [r7, #12]
 8019944:	3310      	adds	r3, #16
 8019946:	4618      	mov	r0, r3
 8019948:	f7ff fef2 	bl	8019730 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801994c:	68fb      	ldr	r3, [r7, #12]
 801994e:	3324      	adds	r3, #36	; 0x24
 8019950:	4618      	mov	r0, r3
 8019952:	f7ff feed 	bl	8019730 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8019956:	f002 fe4d 	bl	801c5f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801995a:	2301      	movs	r3, #1
}
 801995c:	4618      	mov	r0, r3
 801995e:	3710      	adds	r7, #16
 8019960:	46bd      	mov	sp, r7
 8019962:	bd80      	pop	{r7, pc}
 8019964:	e000ed04 	.word	0xe000ed04

08019968 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8019968:	b580      	push	{r7, lr}
 801996a:	b08e      	sub	sp, #56	; 0x38
 801996c:	af02      	add	r7, sp, #8
 801996e:	60f8      	str	r0, [r7, #12]
 8019970:	60b9      	str	r1, [r7, #8]
 8019972:	607a      	str	r2, [r7, #4]
 8019974:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8019976:	68fb      	ldr	r3, [r7, #12]
 8019978:	2b00      	cmp	r3, #0
 801997a:	d10a      	bne.n	8019992 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 801997c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019980:	f383 8811 	msr	BASEPRI, r3
 8019984:	f3bf 8f6f 	isb	sy
 8019988:	f3bf 8f4f 	dsb	sy
 801998c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801998e:	bf00      	nop
 8019990:	e7fe      	b.n	8019990 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8019992:	683b      	ldr	r3, [r7, #0]
 8019994:	2b00      	cmp	r3, #0
 8019996:	d10a      	bne.n	80199ae <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8019998:	f04f 0350 	mov.w	r3, #80	; 0x50
 801999c:	f383 8811 	msr	BASEPRI, r3
 80199a0:	f3bf 8f6f 	isb	sy
 80199a4:	f3bf 8f4f 	dsb	sy
 80199a8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80199aa:	bf00      	nop
 80199ac:	e7fe      	b.n	80199ac <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80199ae:	687b      	ldr	r3, [r7, #4]
 80199b0:	2b00      	cmp	r3, #0
 80199b2:	d002      	beq.n	80199ba <xQueueGenericCreateStatic+0x52>
 80199b4:	68bb      	ldr	r3, [r7, #8]
 80199b6:	2b00      	cmp	r3, #0
 80199b8:	d001      	beq.n	80199be <xQueueGenericCreateStatic+0x56>
 80199ba:	2301      	movs	r3, #1
 80199bc:	e000      	b.n	80199c0 <xQueueGenericCreateStatic+0x58>
 80199be:	2300      	movs	r3, #0
 80199c0:	2b00      	cmp	r3, #0
 80199c2:	d10a      	bne.n	80199da <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80199c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80199c8:	f383 8811 	msr	BASEPRI, r3
 80199cc:	f3bf 8f6f 	isb	sy
 80199d0:	f3bf 8f4f 	dsb	sy
 80199d4:	623b      	str	r3, [r7, #32]
}
 80199d6:	bf00      	nop
 80199d8:	e7fe      	b.n	80199d8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80199da:	687b      	ldr	r3, [r7, #4]
 80199dc:	2b00      	cmp	r3, #0
 80199de:	d102      	bne.n	80199e6 <xQueueGenericCreateStatic+0x7e>
 80199e0:	68bb      	ldr	r3, [r7, #8]
 80199e2:	2b00      	cmp	r3, #0
 80199e4:	d101      	bne.n	80199ea <xQueueGenericCreateStatic+0x82>
 80199e6:	2301      	movs	r3, #1
 80199e8:	e000      	b.n	80199ec <xQueueGenericCreateStatic+0x84>
 80199ea:	2300      	movs	r3, #0
 80199ec:	2b00      	cmp	r3, #0
 80199ee:	d10a      	bne.n	8019a06 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80199f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80199f4:	f383 8811 	msr	BASEPRI, r3
 80199f8:	f3bf 8f6f 	isb	sy
 80199fc:	f3bf 8f4f 	dsb	sy
 8019a00:	61fb      	str	r3, [r7, #28]
}
 8019a02:	bf00      	nop
 8019a04:	e7fe      	b.n	8019a04 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8019a06:	2348      	movs	r3, #72	; 0x48
 8019a08:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8019a0a:	697b      	ldr	r3, [r7, #20]
 8019a0c:	2b48      	cmp	r3, #72	; 0x48
 8019a0e:	d00a      	beq.n	8019a26 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8019a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019a14:	f383 8811 	msr	BASEPRI, r3
 8019a18:	f3bf 8f6f 	isb	sy
 8019a1c:	f3bf 8f4f 	dsb	sy
 8019a20:	61bb      	str	r3, [r7, #24]
}
 8019a22:	bf00      	nop
 8019a24:	e7fe      	b.n	8019a24 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8019a26:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8019a28:	683b      	ldr	r3, [r7, #0]
 8019a2a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8019a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019a2e:	2b00      	cmp	r3, #0
 8019a30:	d00d      	beq.n	8019a4e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8019a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019a34:	2201      	movs	r2, #1
 8019a36:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8019a3a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8019a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019a40:	9300      	str	r3, [sp, #0]
 8019a42:	4613      	mov	r3, r2
 8019a44:	687a      	ldr	r2, [r7, #4]
 8019a46:	68b9      	ldr	r1, [r7, #8]
 8019a48:	68f8      	ldr	r0, [r7, #12]
 8019a4a:	f000 f83f 	bl	8019acc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8019a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8019a50:	4618      	mov	r0, r3
 8019a52:	3730      	adds	r7, #48	; 0x30
 8019a54:	46bd      	mov	sp, r7
 8019a56:	bd80      	pop	{r7, pc}

08019a58 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8019a58:	b580      	push	{r7, lr}
 8019a5a:	b08a      	sub	sp, #40	; 0x28
 8019a5c:	af02      	add	r7, sp, #8
 8019a5e:	60f8      	str	r0, [r7, #12]
 8019a60:	60b9      	str	r1, [r7, #8]
 8019a62:	4613      	mov	r3, r2
 8019a64:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8019a66:	68fb      	ldr	r3, [r7, #12]
 8019a68:	2b00      	cmp	r3, #0
 8019a6a:	d10a      	bne.n	8019a82 <xQueueGenericCreate+0x2a>
	__asm volatile
 8019a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019a70:	f383 8811 	msr	BASEPRI, r3
 8019a74:	f3bf 8f6f 	isb	sy
 8019a78:	f3bf 8f4f 	dsb	sy
 8019a7c:	613b      	str	r3, [r7, #16]
}
 8019a7e:	bf00      	nop
 8019a80:	e7fe      	b.n	8019a80 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019a82:	68fb      	ldr	r3, [r7, #12]
 8019a84:	68ba      	ldr	r2, [r7, #8]
 8019a86:	fb02 f303 	mul.w	r3, r2, r3
 8019a8a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8019a8c:	69fb      	ldr	r3, [r7, #28]
 8019a8e:	3348      	adds	r3, #72	; 0x48
 8019a90:	4618      	mov	r0, r3
 8019a92:	f002 fea1 	bl	801c7d8 <pvPortMalloc>
 8019a96:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8019a98:	69bb      	ldr	r3, [r7, #24]
 8019a9a:	2b00      	cmp	r3, #0
 8019a9c:	d011      	beq.n	8019ac2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8019a9e:	69bb      	ldr	r3, [r7, #24]
 8019aa0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8019aa2:	697b      	ldr	r3, [r7, #20]
 8019aa4:	3348      	adds	r3, #72	; 0x48
 8019aa6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8019aa8:	69bb      	ldr	r3, [r7, #24]
 8019aaa:	2200      	movs	r2, #0
 8019aac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8019ab0:	79fa      	ldrb	r2, [r7, #7]
 8019ab2:	69bb      	ldr	r3, [r7, #24]
 8019ab4:	9300      	str	r3, [sp, #0]
 8019ab6:	4613      	mov	r3, r2
 8019ab8:	697a      	ldr	r2, [r7, #20]
 8019aba:	68b9      	ldr	r1, [r7, #8]
 8019abc:	68f8      	ldr	r0, [r7, #12]
 8019abe:	f000 f805 	bl	8019acc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8019ac2:	69bb      	ldr	r3, [r7, #24]
	}
 8019ac4:	4618      	mov	r0, r3
 8019ac6:	3720      	adds	r7, #32
 8019ac8:	46bd      	mov	sp, r7
 8019aca:	bd80      	pop	{r7, pc}

08019acc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8019acc:	b580      	push	{r7, lr}
 8019ace:	b084      	sub	sp, #16
 8019ad0:	af00      	add	r7, sp, #0
 8019ad2:	60f8      	str	r0, [r7, #12]
 8019ad4:	60b9      	str	r1, [r7, #8]
 8019ad6:	607a      	str	r2, [r7, #4]
 8019ad8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8019ada:	68bb      	ldr	r3, [r7, #8]
 8019adc:	2b00      	cmp	r3, #0
 8019ade:	d103      	bne.n	8019ae8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8019ae0:	69bb      	ldr	r3, [r7, #24]
 8019ae2:	69ba      	ldr	r2, [r7, #24]
 8019ae4:	601a      	str	r2, [r3, #0]
 8019ae6:	e002      	b.n	8019aee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8019ae8:	69bb      	ldr	r3, [r7, #24]
 8019aea:	687a      	ldr	r2, [r7, #4]
 8019aec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8019aee:	69bb      	ldr	r3, [r7, #24]
 8019af0:	68fa      	ldr	r2, [r7, #12]
 8019af2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8019af4:	69bb      	ldr	r3, [r7, #24]
 8019af6:	68ba      	ldr	r2, [r7, #8]
 8019af8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8019afa:	2101      	movs	r1, #1
 8019afc:	69b8      	ldr	r0, [r7, #24]
 8019afe:	f7ff fecb 	bl	8019898 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8019b02:	bf00      	nop
 8019b04:	3710      	adds	r7, #16
 8019b06:	46bd      	mov	sp, r7
 8019b08:	bd80      	pop	{r7, pc}

08019b0a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8019b0a:	b580      	push	{r7, lr}
 8019b0c:	b082      	sub	sp, #8
 8019b0e:	af00      	add	r7, sp, #0
 8019b10:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8019b12:	687b      	ldr	r3, [r7, #4]
 8019b14:	2b00      	cmp	r3, #0
 8019b16:	d00e      	beq.n	8019b36 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8019b18:	687b      	ldr	r3, [r7, #4]
 8019b1a:	2200      	movs	r2, #0
 8019b1c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8019b1e:	687b      	ldr	r3, [r7, #4]
 8019b20:	2200      	movs	r2, #0
 8019b22:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8019b24:	687b      	ldr	r3, [r7, #4]
 8019b26:	2200      	movs	r2, #0
 8019b28:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8019b2a:	2300      	movs	r3, #0
 8019b2c:	2200      	movs	r2, #0
 8019b2e:	2100      	movs	r1, #0
 8019b30:	6878      	ldr	r0, [r7, #4]
 8019b32:	f000 f837 	bl	8019ba4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8019b36:	bf00      	nop
 8019b38:	3708      	adds	r7, #8
 8019b3a:	46bd      	mov	sp, r7
 8019b3c:	bd80      	pop	{r7, pc}

08019b3e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8019b3e:	b580      	push	{r7, lr}
 8019b40:	b086      	sub	sp, #24
 8019b42:	af00      	add	r7, sp, #0
 8019b44:	4603      	mov	r3, r0
 8019b46:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8019b48:	2301      	movs	r3, #1
 8019b4a:	617b      	str	r3, [r7, #20]
 8019b4c:	2300      	movs	r3, #0
 8019b4e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8019b50:	79fb      	ldrb	r3, [r7, #7]
 8019b52:	461a      	mov	r2, r3
 8019b54:	6939      	ldr	r1, [r7, #16]
 8019b56:	6978      	ldr	r0, [r7, #20]
 8019b58:	f7ff ff7e 	bl	8019a58 <xQueueGenericCreate>
 8019b5c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8019b5e:	68f8      	ldr	r0, [r7, #12]
 8019b60:	f7ff ffd3 	bl	8019b0a <prvInitialiseMutex>

		return xNewQueue;
 8019b64:	68fb      	ldr	r3, [r7, #12]
	}
 8019b66:	4618      	mov	r0, r3
 8019b68:	3718      	adds	r7, #24
 8019b6a:	46bd      	mov	sp, r7
 8019b6c:	bd80      	pop	{r7, pc}

08019b6e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8019b6e:	b580      	push	{r7, lr}
 8019b70:	b088      	sub	sp, #32
 8019b72:	af02      	add	r7, sp, #8
 8019b74:	4603      	mov	r3, r0
 8019b76:	6039      	str	r1, [r7, #0]
 8019b78:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8019b7a:	2301      	movs	r3, #1
 8019b7c:	617b      	str	r3, [r7, #20]
 8019b7e:	2300      	movs	r3, #0
 8019b80:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8019b82:	79fb      	ldrb	r3, [r7, #7]
 8019b84:	9300      	str	r3, [sp, #0]
 8019b86:	683b      	ldr	r3, [r7, #0]
 8019b88:	2200      	movs	r2, #0
 8019b8a:	6939      	ldr	r1, [r7, #16]
 8019b8c:	6978      	ldr	r0, [r7, #20]
 8019b8e:	f7ff feeb 	bl	8019968 <xQueueGenericCreateStatic>
 8019b92:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8019b94:	68f8      	ldr	r0, [r7, #12]
 8019b96:	f7ff ffb8 	bl	8019b0a <prvInitialiseMutex>

		return xNewQueue;
 8019b9a:	68fb      	ldr	r3, [r7, #12]
	}
 8019b9c:	4618      	mov	r0, r3
 8019b9e:	3718      	adds	r7, #24
 8019ba0:	46bd      	mov	sp, r7
 8019ba2:	bd80      	pop	{r7, pc}

08019ba4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8019ba4:	b580      	push	{r7, lr}
 8019ba6:	b08e      	sub	sp, #56	; 0x38
 8019ba8:	af00      	add	r7, sp, #0
 8019baa:	60f8      	str	r0, [r7, #12]
 8019bac:	60b9      	str	r1, [r7, #8]
 8019bae:	607a      	str	r2, [r7, #4]
 8019bb0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8019bb2:	2300      	movs	r3, #0
 8019bb4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8019bb6:	68fb      	ldr	r3, [r7, #12]
 8019bb8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8019bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019bbc:	2b00      	cmp	r3, #0
 8019bbe:	d10a      	bne.n	8019bd6 <xQueueGenericSend+0x32>
	__asm volatile
 8019bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019bc4:	f383 8811 	msr	BASEPRI, r3
 8019bc8:	f3bf 8f6f 	isb	sy
 8019bcc:	f3bf 8f4f 	dsb	sy
 8019bd0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8019bd2:	bf00      	nop
 8019bd4:	e7fe      	b.n	8019bd4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8019bd6:	68bb      	ldr	r3, [r7, #8]
 8019bd8:	2b00      	cmp	r3, #0
 8019bda:	d103      	bne.n	8019be4 <xQueueGenericSend+0x40>
 8019bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019be0:	2b00      	cmp	r3, #0
 8019be2:	d101      	bne.n	8019be8 <xQueueGenericSend+0x44>
 8019be4:	2301      	movs	r3, #1
 8019be6:	e000      	b.n	8019bea <xQueueGenericSend+0x46>
 8019be8:	2300      	movs	r3, #0
 8019bea:	2b00      	cmp	r3, #0
 8019bec:	d10a      	bne.n	8019c04 <xQueueGenericSend+0x60>
	__asm volatile
 8019bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019bf2:	f383 8811 	msr	BASEPRI, r3
 8019bf6:	f3bf 8f6f 	isb	sy
 8019bfa:	f3bf 8f4f 	dsb	sy
 8019bfe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8019c00:	bf00      	nop
 8019c02:	e7fe      	b.n	8019c02 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8019c04:	683b      	ldr	r3, [r7, #0]
 8019c06:	2b02      	cmp	r3, #2
 8019c08:	d103      	bne.n	8019c12 <xQueueGenericSend+0x6e>
 8019c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019c0e:	2b01      	cmp	r3, #1
 8019c10:	d101      	bne.n	8019c16 <xQueueGenericSend+0x72>
 8019c12:	2301      	movs	r3, #1
 8019c14:	e000      	b.n	8019c18 <xQueueGenericSend+0x74>
 8019c16:	2300      	movs	r3, #0
 8019c18:	2b00      	cmp	r3, #0
 8019c1a:	d10a      	bne.n	8019c32 <xQueueGenericSend+0x8e>
	__asm volatile
 8019c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019c20:	f383 8811 	msr	BASEPRI, r3
 8019c24:	f3bf 8f6f 	isb	sy
 8019c28:	f3bf 8f4f 	dsb	sy
 8019c2c:	623b      	str	r3, [r7, #32]
}
 8019c2e:	bf00      	nop
 8019c30:	e7fe      	b.n	8019c30 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8019c32:	f001 fd95 	bl	801b760 <xTaskGetSchedulerState>
 8019c36:	4603      	mov	r3, r0
 8019c38:	2b00      	cmp	r3, #0
 8019c3a:	d102      	bne.n	8019c42 <xQueueGenericSend+0x9e>
 8019c3c:	687b      	ldr	r3, [r7, #4]
 8019c3e:	2b00      	cmp	r3, #0
 8019c40:	d101      	bne.n	8019c46 <xQueueGenericSend+0xa2>
 8019c42:	2301      	movs	r3, #1
 8019c44:	e000      	b.n	8019c48 <xQueueGenericSend+0xa4>
 8019c46:	2300      	movs	r3, #0
 8019c48:	2b00      	cmp	r3, #0
 8019c4a:	d10a      	bne.n	8019c62 <xQueueGenericSend+0xbe>
	__asm volatile
 8019c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019c50:	f383 8811 	msr	BASEPRI, r3
 8019c54:	f3bf 8f6f 	isb	sy
 8019c58:	f3bf 8f4f 	dsb	sy
 8019c5c:	61fb      	str	r3, [r7, #28]
}
 8019c5e:	bf00      	nop
 8019c60:	e7fe      	b.n	8019c60 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8019c62:	f002 fc97 	bl	801c594 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8019c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019c68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8019c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019c6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019c6e:	429a      	cmp	r2, r3
 8019c70:	d302      	bcc.n	8019c78 <xQueueGenericSend+0xd4>
 8019c72:	683b      	ldr	r3, [r7, #0]
 8019c74:	2b02      	cmp	r3, #2
 8019c76:	d129      	bne.n	8019ccc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8019c78:	683a      	ldr	r2, [r7, #0]
 8019c7a:	68b9      	ldr	r1, [r7, #8]
 8019c7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019c7e:	f000 fc3b 	bl	801a4f8 <prvCopyDataToQueue>
 8019c82:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8019c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c88:	2b00      	cmp	r3, #0
 8019c8a:	d010      	beq.n	8019cae <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8019c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019c8e:	3324      	adds	r3, #36	; 0x24
 8019c90:	4618      	mov	r0, r3
 8019c92:	f001 fba5 	bl	801b3e0 <xTaskRemoveFromEventList>
 8019c96:	4603      	mov	r3, r0
 8019c98:	2b00      	cmp	r3, #0
 8019c9a:	d013      	beq.n	8019cc4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8019c9c:	4b3f      	ldr	r3, [pc, #252]	; (8019d9c <xQueueGenericSend+0x1f8>)
 8019c9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019ca2:	601a      	str	r2, [r3, #0]
 8019ca4:	f3bf 8f4f 	dsb	sy
 8019ca8:	f3bf 8f6f 	isb	sy
 8019cac:	e00a      	b.n	8019cc4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8019cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019cb0:	2b00      	cmp	r3, #0
 8019cb2:	d007      	beq.n	8019cc4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8019cb4:	4b39      	ldr	r3, [pc, #228]	; (8019d9c <xQueueGenericSend+0x1f8>)
 8019cb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019cba:	601a      	str	r2, [r3, #0]
 8019cbc:	f3bf 8f4f 	dsb	sy
 8019cc0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8019cc4:	f002 fc96 	bl	801c5f4 <vPortExitCritical>
				return pdPASS;
 8019cc8:	2301      	movs	r3, #1
 8019cca:	e063      	b.n	8019d94 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8019ccc:	687b      	ldr	r3, [r7, #4]
 8019cce:	2b00      	cmp	r3, #0
 8019cd0:	d103      	bne.n	8019cda <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8019cd2:	f002 fc8f 	bl	801c5f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8019cd6:	2300      	movs	r3, #0
 8019cd8:	e05c      	b.n	8019d94 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8019cda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019cdc:	2b00      	cmp	r3, #0
 8019cde:	d106      	bne.n	8019cee <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8019ce0:	f107 0314 	add.w	r3, r7, #20
 8019ce4:	4618      	mov	r0, r3
 8019ce6:	f001 fbdd 	bl	801b4a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8019cea:	2301      	movs	r3, #1
 8019cec:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8019cee:	f002 fc81 	bl	801c5f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8019cf2:	f001 f951 	bl	801af98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8019cf6:	f002 fc4d 	bl	801c594 <vPortEnterCritical>
 8019cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019cfc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8019d00:	b25b      	sxtb	r3, r3
 8019d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019d06:	d103      	bne.n	8019d10 <xQueueGenericSend+0x16c>
 8019d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019d0a:	2200      	movs	r2, #0
 8019d0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8019d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019d12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8019d16:	b25b      	sxtb	r3, r3
 8019d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019d1c:	d103      	bne.n	8019d26 <xQueueGenericSend+0x182>
 8019d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019d20:	2200      	movs	r2, #0
 8019d22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8019d26:	f002 fc65 	bl	801c5f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8019d2a:	1d3a      	adds	r2, r7, #4
 8019d2c:	f107 0314 	add.w	r3, r7, #20
 8019d30:	4611      	mov	r1, r2
 8019d32:	4618      	mov	r0, r3
 8019d34:	f001 fbcc 	bl	801b4d0 <xTaskCheckForTimeOut>
 8019d38:	4603      	mov	r3, r0
 8019d3a:	2b00      	cmp	r3, #0
 8019d3c:	d124      	bne.n	8019d88 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8019d3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019d40:	f000 fcd2 	bl	801a6e8 <prvIsQueueFull>
 8019d44:	4603      	mov	r3, r0
 8019d46:	2b00      	cmp	r3, #0
 8019d48:	d018      	beq.n	8019d7c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8019d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019d4c:	3310      	adds	r3, #16
 8019d4e:	687a      	ldr	r2, [r7, #4]
 8019d50:	4611      	mov	r1, r2
 8019d52:	4618      	mov	r0, r3
 8019d54:	f001 faf4 	bl	801b340 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8019d58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019d5a:	f000 fc5d 	bl	801a618 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8019d5e:	f001 f929 	bl	801afb4 <xTaskResumeAll>
 8019d62:	4603      	mov	r3, r0
 8019d64:	2b00      	cmp	r3, #0
 8019d66:	f47f af7c 	bne.w	8019c62 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8019d6a:	4b0c      	ldr	r3, [pc, #48]	; (8019d9c <xQueueGenericSend+0x1f8>)
 8019d6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019d70:	601a      	str	r2, [r3, #0]
 8019d72:	f3bf 8f4f 	dsb	sy
 8019d76:	f3bf 8f6f 	isb	sy
 8019d7a:	e772      	b.n	8019c62 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8019d7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019d7e:	f000 fc4b 	bl	801a618 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8019d82:	f001 f917 	bl	801afb4 <xTaskResumeAll>
 8019d86:	e76c      	b.n	8019c62 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8019d88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019d8a:	f000 fc45 	bl	801a618 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8019d8e:	f001 f911 	bl	801afb4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8019d92:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8019d94:	4618      	mov	r0, r3
 8019d96:	3738      	adds	r7, #56	; 0x38
 8019d98:	46bd      	mov	sp, r7
 8019d9a:	bd80      	pop	{r7, pc}
 8019d9c:	e000ed04 	.word	0xe000ed04

08019da0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8019da0:	b580      	push	{r7, lr}
 8019da2:	b090      	sub	sp, #64	; 0x40
 8019da4:	af00      	add	r7, sp, #0
 8019da6:	60f8      	str	r0, [r7, #12]
 8019da8:	60b9      	str	r1, [r7, #8]
 8019daa:	607a      	str	r2, [r7, #4]
 8019dac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8019dae:	68fb      	ldr	r3, [r7, #12]
 8019db0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8019db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019db4:	2b00      	cmp	r3, #0
 8019db6:	d10a      	bne.n	8019dce <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8019db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019dbc:	f383 8811 	msr	BASEPRI, r3
 8019dc0:	f3bf 8f6f 	isb	sy
 8019dc4:	f3bf 8f4f 	dsb	sy
 8019dc8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8019dca:	bf00      	nop
 8019dcc:	e7fe      	b.n	8019dcc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8019dce:	68bb      	ldr	r3, [r7, #8]
 8019dd0:	2b00      	cmp	r3, #0
 8019dd2:	d103      	bne.n	8019ddc <xQueueGenericSendFromISR+0x3c>
 8019dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019dd8:	2b00      	cmp	r3, #0
 8019dda:	d101      	bne.n	8019de0 <xQueueGenericSendFromISR+0x40>
 8019ddc:	2301      	movs	r3, #1
 8019dde:	e000      	b.n	8019de2 <xQueueGenericSendFromISR+0x42>
 8019de0:	2300      	movs	r3, #0
 8019de2:	2b00      	cmp	r3, #0
 8019de4:	d10a      	bne.n	8019dfc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8019de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019dea:	f383 8811 	msr	BASEPRI, r3
 8019dee:	f3bf 8f6f 	isb	sy
 8019df2:	f3bf 8f4f 	dsb	sy
 8019df6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8019df8:	bf00      	nop
 8019dfa:	e7fe      	b.n	8019dfa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8019dfc:	683b      	ldr	r3, [r7, #0]
 8019dfe:	2b02      	cmp	r3, #2
 8019e00:	d103      	bne.n	8019e0a <xQueueGenericSendFromISR+0x6a>
 8019e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019e06:	2b01      	cmp	r3, #1
 8019e08:	d101      	bne.n	8019e0e <xQueueGenericSendFromISR+0x6e>
 8019e0a:	2301      	movs	r3, #1
 8019e0c:	e000      	b.n	8019e10 <xQueueGenericSendFromISR+0x70>
 8019e0e:	2300      	movs	r3, #0
 8019e10:	2b00      	cmp	r3, #0
 8019e12:	d10a      	bne.n	8019e2a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8019e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019e18:	f383 8811 	msr	BASEPRI, r3
 8019e1c:	f3bf 8f6f 	isb	sy
 8019e20:	f3bf 8f4f 	dsb	sy
 8019e24:	623b      	str	r3, [r7, #32]
}
 8019e26:	bf00      	nop
 8019e28:	e7fe      	b.n	8019e28 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8019e2a:	f002 fc95 	bl	801c758 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8019e2e:	f3ef 8211 	mrs	r2, BASEPRI
 8019e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019e36:	f383 8811 	msr	BASEPRI, r3
 8019e3a:	f3bf 8f6f 	isb	sy
 8019e3e:	f3bf 8f4f 	dsb	sy
 8019e42:	61fa      	str	r2, [r7, #28]
 8019e44:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8019e46:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8019e48:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8019e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019e4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8019e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019e52:	429a      	cmp	r2, r3
 8019e54:	d302      	bcc.n	8019e5c <xQueueGenericSendFromISR+0xbc>
 8019e56:	683b      	ldr	r3, [r7, #0]
 8019e58:	2b02      	cmp	r3, #2
 8019e5a:	d12f      	bne.n	8019ebc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8019e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019e5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8019e62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8019e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8019e6c:	683a      	ldr	r2, [r7, #0]
 8019e6e:	68b9      	ldr	r1, [r7, #8]
 8019e70:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8019e72:	f000 fb41 	bl	801a4f8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8019e76:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8019e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019e7e:	d112      	bne.n	8019ea6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8019e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019e84:	2b00      	cmp	r3, #0
 8019e86:	d016      	beq.n	8019eb6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8019e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019e8a:	3324      	adds	r3, #36	; 0x24
 8019e8c:	4618      	mov	r0, r3
 8019e8e:	f001 faa7 	bl	801b3e0 <xTaskRemoveFromEventList>
 8019e92:	4603      	mov	r3, r0
 8019e94:	2b00      	cmp	r3, #0
 8019e96:	d00e      	beq.n	8019eb6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8019e98:	687b      	ldr	r3, [r7, #4]
 8019e9a:	2b00      	cmp	r3, #0
 8019e9c:	d00b      	beq.n	8019eb6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8019e9e:	687b      	ldr	r3, [r7, #4]
 8019ea0:	2201      	movs	r2, #1
 8019ea2:	601a      	str	r2, [r3, #0]
 8019ea4:	e007      	b.n	8019eb6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8019ea6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8019eaa:	3301      	adds	r3, #1
 8019eac:	b2db      	uxtb	r3, r3
 8019eae:	b25a      	sxtb	r2, r3
 8019eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019eb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8019eb6:	2301      	movs	r3, #1
 8019eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8019eba:	e001      	b.n	8019ec0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8019ebc:	2300      	movs	r3, #0
 8019ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8019ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019ec2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8019ec4:	697b      	ldr	r3, [r7, #20]
 8019ec6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8019eca:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8019ecc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8019ece:	4618      	mov	r0, r3
 8019ed0:	3740      	adds	r7, #64	; 0x40
 8019ed2:	46bd      	mov	sp, r7
 8019ed4:	bd80      	pop	{r7, pc}

08019ed6 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8019ed6:	b580      	push	{r7, lr}
 8019ed8:	b08e      	sub	sp, #56	; 0x38
 8019eda:	af00      	add	r7, sp, #0
 8019edc:	6078      	str	r0, [r7, #4]
 8019ede:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8019ee0:	687b      	ldr	r3, [r7, #4]
 8019ee2:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8019ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019ee6:	2b00      	cmp	r3, #0
 8019ee8:	d10a      	bne.n	8019f00 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8019eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019eee:	f383 8811 	msr	BASEPRI, r3
 8019ef2:	f3bf 8f6f 	isb	sy
 8019ef6:	f3bf 8f4f 	dsb	sy
 8019efa:	623b      	str	r3, [r7, #32]
}
 8019efc:	bf00      	nop
 8019efe:	e7fe      	b.n	8019efe <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8019f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019f04:	2b00      	cmp	r3, #0
 8019f06:	d00a      	beq.n	8019f1e <xQueueGiveFromISR+0x48>
	__asm volatile
 8019f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019f0c:	f383 8811 	msr	BASEPRI, r3
 8019f10:	f3bf 8f6f 	isb	sy
 8019f14:	f3bf 8f4f 	dsb	sy
 8019f18:	61fb      	str	r3, [r7, #28]
}
 8019f1a:	bf00      	nop
 8019f1c:	e7fe      	b.n	8019f1c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8019f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f20:	681b      	ldr	r3, [r3, #0]
 8019f22:	2b00      	cmp	r3, #0
 8019f24:	d103      	bne.n	8019f2e <xQueueGiveFromISR+0x58>
 8019f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f28:	689b      	ldr	r3, [r3, #8]
 8019f2a:	2b00      	cmp	r3, #0
 8019f2c:	d101      	bne.n	8019f32 <xQueueGiveFromISR+0x5c>
 8019f2e:	2301      	movs	r3, #1
 8019f30:	e000      	b.n	8019f34 <xQueueGiveFromISR+0x5e>
 8019f32:	2300      	movs	r3, #0
 8019f34:	2b00      	cmp	r3, #0
 8019f36:	d10a      	bne.n	8019f4e <xQueueGiveFromISR+0x78>
	__asm volatile
 8019f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019f3c:	f383 8811 	msr	BASEPRI, r3
 8019f40:	f3bf 8f6f 	isb	sy
 8019f44:	f3bf 8f4f 	dsb	sy
 8019f48:	61bb      	str	r3, [r7, #24]
}
 8019f4a:	bf00      	nop
 8019f4c:	e7fe      	b.n	8019f4c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8019f4e:	f002 fc03 	bl	801c758 <vPortValidateInterruptPriority>
	__asm volatile
 8019f52:	f3ef 8211 	mrs	r2, BASEPRI
 8019f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019f5a:	f383 8811 	msr	BASEPRI, r3
 8019f5e:	f3bf 8f6f 	isb	sy
 8019f62:	f3bf 8f4f 	dsb	sy
 8019f66:	617a      	str	r2, [r7, #20]
 8019f68:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8019f6a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8019f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8019f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019f72:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8019f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019f78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019f7a:	429a      	cmp	r2, r3
 8019f7c:	d22b      	bcs.n	8019fd6 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8019f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8019f84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8019f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f8a:	1c5a      	adds	r2, r3, #1
 8019f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f8e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8019f90:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8019f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019f98:	d112      	bne.n	8019fc0 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8019f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f9e:	2b00      	cmp	r3, #0
 8019fa0:	d016      	beq.n	8019fd0 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8019fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019fa4:	3324      	adds	r3, #36	; 0x24
 8019fa6:	4618      	mov	r0, r3
 8019fa8:	f001 fa1a 	bl	801b3e0 <xTaskRemoveFromEventList>
 8019fac:	4603      	mov	r3, r0
 8019fae:	2b00      	cmp	r3, #0
 8019fb0:	d00e      	beq.n	8019fd0 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8019fb2:	683b      	ldr	r3, [r7, #0]
 8019fb4:	2b00      	cmp	r3, #0
 8019fb6:	d00b      	beq.n	8019fd0 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8019fb8:	683b      	ldr	r3, [r7, #0]
 8019fba:	2201      	movs	r2, #1
 8019fbc:	601a      	str	r2, [r3, #0]
 8019fbe:	e007      	b.n	8019fd0 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8019fc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019fc4:	3301      	adds	r3, #1
 8019fc6:	b2db      	uxtb	r3, r3
 8019fc8:	b25a      	sxtb	r2, r3
 8019fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019fcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8019fd0:	2301      	movs	r3, #1
 8019fd2:	637b      	str	r3, [r7, #52]	; 0x34
 8019fd4:	e001      	b.n	8019fda <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8019fd6:	2300      	movs	r3, #0
 8019fd8:	637b      	str	r3, [r7, #52]	; 0x34
 8019fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019fdc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8019fde:	68fb      	ldr	r3, [r7, #12]
 8019fe0:	f383 8811 	msr	BASEPRI, r3
}
 8019fe4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8019fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8019fe8:	4618      	mov	r0, r3
 8019fea:	3738      	adds	r7, #56	; 0x38
 8019fec:	46bd      	mov	sp, r7
 8019fee:	bd80      	pop	{r7, pc}

08019ff0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8019ff0:	b580      	push	{r7, lr}
 8019ff2:	b08c      	sub	sp, #48	; 0x30
 8019ff4:	af00      	add	r7, sp, #0
 8019ff6:	60f8      	str	r0, [r7, #12]
 8019ff8:	60b9      	str	r1, [r7, #8]
 8019ffa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8019ffc:	2300      	movs	r3, #0
 8019ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801a000:	68fb      	ldr	r3, [r7, #12]
 801a002:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801a004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a006:	2b00      	cmp	r3, #0
 801a008:	d10a      	bne.n	801a020 <xQueueReceive+0x30>
	__asm volatile
 801a00a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a00e:	f383 8811 	msr	BASEPRI, r3
 801a012:	f3bf 8f6f 	isb	sy
 801a016:	f3bf 8f4f 	dsb	sy
 801a01a:	623b      	str	r3, [r7, #32]
}
 801a01c:	bf00      	nop
 801a01e:	e7fe      	b.n	801a01e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801a020:	68bb      	ldr	r3, [r7, #8]
 801a022:	2b00      	cmp	r3, #0
 801a024:	d103      	bne.n	801a02e <xQueueReceive+0x3e>
 801a026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a02a:	2b00      	cmp	r3, #0
 801a02c:	d101      	bne.n	801a032 <xQueueReceive+0x42>
 801a02e:	2301      	movs	r3, #1
 801a030:	e000      	b.n	801a034 <xQueueReceive+0x44>
 801a032:	2300      	movs	r3, #0
 801a034:	2b00      	cmp	r3, #0
 801a036:	d10a      	bne.n	801a04e <xQueueReceive+0x5e>
	__asm volatile
 801a038:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a03c:	f383 8811 	msr	BASEPRI, r3
 801a040:	f3bf 8f6f 	isb	sy
 801a044:	f3bf 8f4f 	dsb	sy
 801a048:	61fb      	str	r3, [r7, #28]
}
 801a04a:	bf00      	nop
 801a04c:	e7fe      	b.n	801a04c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801a04e:	f001 fb87 	bl	801b760 <xTaskGetSchedulerState>
 801a052:	4603      	mov	r3, r0
 801a054:	2b00      	cmp	r3, #0
 801a056:	d102      	bne.n	801a05e <xQueueReceive+0x6e>
 801a058:	687b      	ldr	r3, [r7, #4]
 801a05a:	2b00      	cmp	r3, #0
 801a05c:	d101      	bne.n	801a062 <xQueueReceive+0x72>
 801a05e:	2301      	movs	r3, #1
 801a060:	e000      	b.n	801a064 <xQueueReceive+0x74>
 801a062:	2300      	movs	r3, #0
 801a064:	2b00      	cmp	r3, #0
 801a066:	d10a      	bne.n	801a07e <xQueueReceive+0x8e>
	__asm volatile
 801a068:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a06c:	f383 8811 	msr	BASEPRI, r3
 801a070:	f3bf 8f6f 	isb	sy
 801a074:	f3bf 8f4f 	dsb	sy
 801a078:	61bb      	str	r3, [r7, #24]
}
 801a07a:	bf00      	nop
 801a07c:	e7fe      	b.n	801a07c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801a07e:	f002 fa89 	bl	801c594 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801a082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a086:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801a088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a08a:	2b00      	cmp	r3, #0
 801a08c:	d01f      	beq.n	801a0ce <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801a08e:	68b9      	ldr	r1, [r7, #8]
 801a090:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a092:	f000 fa9b 	bl	801a5cc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801a096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a098:	1e5a      	subs	r2, r3, #1
 801a09a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a09c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801a09e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a0a0:	691b      	ldr	r3, [r3, #16]
 801a0a2:	2b00      	cmp	r3, #0
 801a0a4:	d00f      	beq.n	801a0c6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801a0a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a0a8:	3310      	adds	r3, #16
 801a0aa:	4618      	mov	r0, r3
 801a0ac:	f001 f998 	bl	801b3e0 <xTaskRemoveFromEventList>
 801a0b0:	4603      	mov	r3, r0
 801a0b2:	2b00      	cmp	r3, #0
 801a0b4:	d007      	beq.n	801a0c6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801a0b6:	4b3d      	ldr	r3, [pc, #244]	; (801a1ac <xQueueReceive+0x1bc>)
 801a0b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a0bc:	601a      	str	r2, [r3, #0]
 801a0be:	f3bf 8f4f 	dsb	sy
 801a0c2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801a0c6:	f002 fa95 	bl	801c5f4 <vPortExitCritical>
				return pdPASS;
 801a0ca:	2301      	movs	r3, #1
 801a0cc:	e069      	b.n	801a1a2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801a0ce:	687b      	ldr	r3, [r7, #4]
 801a0d0:	2b00      	cmp	r3, #0
 801a0d2:	d103      	bne.n	801a0dc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801a0d4:	f002 fa8e 	bl	801c5f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801a0d8:	2300      	movs	r3, #0
 801a0da:	e062      	b.n	801a1a2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 801a0dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a0de:	2b00      	cmp	r3, #0
 801a0e0:	d106      	bne.n	801a0f0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801a0e2:	f107 0310 	add.w	r3, r7, #16
 801a0e6:	4618      	mov	r0, r3
 801a0e8:	f001 f9dc 	bl	801b4a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801a0ec:	2301      	movs	r3, #1
 801a0ee:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801a0f0:	f002 fa80 	bl	801c5f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801a0f4:	f000 ff50 	bl	801af98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801a0f8:	f002 fa4c 	bl	801c594 <vPortEnterCritical>
 801a0fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a0fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801a102:	b25b      	sxtb	r3, r3
 801a104:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a108:	d103      	bne.n	801a112 <xQueueReceive+0x122>
 801a10a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a10c:	2200      	movs	r2, #0
 801a10e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801a112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a114:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801a118:	b25b      	sxtb	r3, r3
 801a11a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a11e:	d103      	bne.n	801a128 <xQueueReceive+0x138>
 801a120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a122:	2200      	movs	r2, #0
 801a124:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801a128:	f002 fa64 	bl	801c5f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801a12c:	1d3a      	adds	r2, r7, #4
 801a12e:	f107 0310 	add.w	r3, r7, #16
 801a132:	4611      	mov	r1, r2
 801a134:	4618      	mov	r0, r3
 801a136:	f001 f9cb 	bl	801b4d0 <xTaskCheckForTimeOut>
 801a13a:	4603      	mov	r3, r0
 801a13c:	2b00      	cmp	r3, #0
 801a13e:	d123      	bne.n	801a188 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801a140:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a142:	f000 fabb 	bl	801a6bc <prvIsQueueEmpty>
 801a146:	4603      	mov	r3, r0
 801a148:	2b00      	cmp	r3, #0
 801a14a:	d017      	beq.n	801a17c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801a14c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a14e:	3324      	adds	r3, #36	; 0x24
 801a150:	687a      	ldr	r2, [r7, #4]
 801a152:	4611      	mov	r1, r2
 801a154:	4618      	mov	r0, r3
 801a156:	f001 f8f3 	bl	801b340 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801a15a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a15c:	f000 fa5c 	bl	801a618 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801a160:	f000 ff28 	bl	801afb4 <xTaskResumeAll>
 801a164:	4603      	mov	r3, r0
 801a166:	2b00      	cmp	r3, #0
 801a168:	d189      	bne.n	801a07e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801a16a:	4b10      	ldr	r3, [pc, #64]	; (801a1ac <xQueueReceive+0x1bc>)
 801a16c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a170:	601a      	str	r2, [r3, #0]
 801a172:	f3bf 8f4f 	dsb	sy
 801a176:	f3bf 8f6f 	isb	sy
 801a17a:	e780      	b.n	801a07e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801a17c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a17e:	f000 fa4b 	bl	801a618 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801a182:	f000 ff17 	bl	801afb4 <xTaskResumeAll>
 801a186:	e77a      	b.n	801a07e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801a188:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a18a:	f000 fa45 	bl	801a618 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801a18e:	f000 ff11 	bl	801afb4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801a192:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a194:	f000 fa92 	bl	801a6bc <prvIsQueueEmpty>
 801a198:	4603      	mov	r3, r0
 801a19a:	2b00      	cmp	r3, #0
 801a19c:	f43f af6f 	beq.w	801a07e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801a1a0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801a1a2:	4618      	mov	r0, r3
 801a1a4:	3730      	adds	r7, #48	; 0x30
 801a1a6:	46bd      	mov	sp, r7
 801a1a8:	bd80      	pop	{r7, pc}
 801a1aa:	bf00      	nop
 801a1ac:	e000ed04 	.word	0xe000ed04

0801a1b0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 801a1b0:	b580      	push	{r7, lr}
 801a1b2:	b08e      	sub	sp, #56	; 0x38
 801a1b4:	af00      	add	r7, sp, #0
 801a1b6:	6078      	str	r0, [r7, #4]
 801a1b8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801a1ba:	2300      	movs	r3, #0
 801a1bc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801a1be:	687b      	ldr	r3, [r7, #4]
 801a1c0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801a1c2:	2300      	movs	r3, #0
 801a1c4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801a1c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a1c8:	2b00      	cmp	r3, #0
 801a1ca:	d10a      	bne.n	801a1e2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 801a1cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a1d0:	f383 8811 	msr	BASEPRI, r3
 801a1d4:	f3bf 8f6f 	isb	sy
 801a1d8:	f3bf 8f4f 	dsb	sy
 801a1dc:	623b      	str	r3, [r7, #32]
}
 801a1de:	bf00      	nop
 801a1e0:	e7fe      	b.n	801a1e0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801a1e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a1e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a1e6:	2b00      	cmp	r3, #0
 801a1e8:	d00a      	beq.n	801a200 <xQueueSemaphoreTake+0x50>
	__asm volatile
 801a1ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a1ee:	f383 8811 	msr	BASEPRI, r3
 801a1f2:	f3bf 8f6f 	isb	sy
 801a1f6:	f3bf 8f4f 	dsb	sy
 801a1fa:	61fb      	str	r3, [r7, #28]
}
 801a1fc:	bf00      	nop
 801a1fe:	e7fe      	b.n	801a1fe <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801a200:	f001 faae 	bl	801b760 <xTaskGetSchedulerState>
 801a204:	4603      	mov	r3, r0
 801a206:	2b00      	cmp	r3, #0
 801a208:	d102      	bne.n	801a210 <xQueueSemaphoreTake+0x60>
 801a20a:	683b      	ldr	r3, [r7, #0]
 801a20c:	2b00      	cmp	r3, #0
 801a20e:	d101      	bne.n	801a214 <xQueueSemaphoreTake+0x64>
 801a210:	2301      	movs	r3, #1
 801a212:	e000      	b.n	801a216 <xQueueSemaphoreTake+0x66>
 801a214:	2300      	movs	r3, #0
 801a216:	2b00      	cmp	r3, #0
 801a218:	d10a      	bne.n	801a230 <xQueueSemaphoreTake+0x80>
	__asm volatile
 801a21a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a21e:	f383 8811 	msr	BASEPRI, r3
 801a222:	f3bf 8f6f 	isb	sy
 801a226:	f3bf 8f4f 	dsb	sy
 801a22a:	61bb      	str	r3, [r7, #24]
}
 801a22c:	bf00      	nop
 801a22e:	e7fe      	b.n	801a22e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801a230:	f002 f9b0 	bl	801c594 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801a234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a238:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801a23a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a23c:	2b00      	cmp	r3, #0
 801a23e:	d024      	beq.n	801a28a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801a240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a242:	1e5a      	subs	r2, r3, #1
 801a244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a246:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801a248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a24a:	681b      	ldr	r3, [r3, #0]
 801a24c:	2b00      	cmp	r3, #0
 801a24e:	d104      	bne.n	801a25a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801a250:	f001 fc2e 	bl	801bab0 <pvTaskIncrementMutexHeldCount>
 801a254:	4602      	mov	r2, r0
 801a256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a258:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801a25a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a25c:	691b      	ldr	r3, [r3, #16]
 801a25e:	2b00      	cmp	r3, #0
 801a260:	d00f      	beq.n	801a282 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801a262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a264:	3310      	adds	r3, #16
 801a266:	4618      	mov	r0, r3
 801a268:	f001 f8ba 	bl	801b3e0 <xTaskRemoveFromEventList>
 801a26c:	4603      	mov	r3, r0
 801a26e:	2b00      	cmp	r3, #0
 801a270:	d007      	beq.n	801a282 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801a272:	4b54      	ldr	r3, [pc, #336]	; (801a3c4 <xQueueSemaphoreTake+0x214>)
 801a274:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a278:	601a      	str	r2, [r3, #0]
 801a27a:	f3bf 8f4f 	dsb	sy
 801a27e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801a282:	f002 f9b7 	bl	801c5f4 <vPortExitCritical>
				return pdPASS;
 801a286:	2301      	movs	r3, #1
 801a288:	e097      	b.n	801a3ba <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801a28a:	683b      	ldr	r3, [r7, #0]
 801a28c:	2b00      	cmp	r3, #0
 801a28e:	d111      	bne.n	801a2b4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 801a290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a292:	2b00      	cmp	r3, #0
 801a294:	d00a      	beq.n	801a2ac <xQueueSemaphoreTake+0xfc>
	__asm volatile
 801a296:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a29a:	f383 8811 	msr	BASEPRI, r3
 801a29e:	f3bf 8f6f 	isb	sy
 801a2a2:	f3bf 8f4f 	dsb	sy
 801a2a6:	617b      	str	r3, [r7, #20]
}
 801a2a8:	bf00      	nop
 801a2aa:	e7fe      	b.n	801a2aa <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 801a2ac:	f002 f9a2 	bl	801c5f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801a2b0:	2300      	movs	r3, #0
 801a2b2:	e082      	b.n	801a3ba <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 801a2b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a2b6:	2b00      	cmp	r3, #0
 801a2b8:	d106      	bne.n	801a2c8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801a2ba:	f107 030c 	add.w	r3, r7, #12
 801a2be:	4618      	mov	r0, r3
 801a2c0:	f001 f8f0 	bl	801b4a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801a2c4:	2301      	movs	r3, #1
 801a2c6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801a2c8:	f002 f994 	bl	801c5f4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 801a2cc:	f000 fe64 	bl	801af98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801a2d0:	f002 f960 	bl	801c594 <vPortEnterCritical>
 801a2d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a2d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801a2da:	b25b      	sxtb	r3, r3
 801a2dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a2e0:	d103      	bne.n	801a2ea <xQueueSemaphoreTake+0x13a>
 801a2e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a2e4:	2200      	movs	r2, #0
 801a2e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801a2ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a2ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801a2f0:	b25b      	sxtb	r3, r3
 801a2f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a2f6:	d103      	bne.n	801a300 <xQueueSemaphoreTake+0x150>
 801a2f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a2fa:	2200      	movs	r2, #0
 801a2fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801a300:	f002 f978 	bl	801c5f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801a304:	463a      	mov	r2, r7
 801a306:	f107 030c 	add.w	r3, r7, #12
 801a30a:	4611      	mov	r1, r2
 801a30c:	4618      	mov	r0, r3
 801a30e:	f001 f8df 	bl	801b4d0 <xTaskCheckForTimeOut>
 801a312:	4603      	mov	r3, r0
 801a314:	2b00      	cmp	r3, #0
 801a316:	d132      	bne.n	801a37e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801a318:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a31a:	f000 f9cf 	bl	801a6bc <prvIsQueueEmpty>
 801a31e:	4603      	mov	r3, r0
 801a320:	2b00      	cmp	r3, #0
 801a322:	d026      	beq.n	801a372 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801a324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a326:	681b      	ldr	r3, [r3, #0]
 801a328:	2b00      	cmp	r3, #0
 801a32a:	d109      	bne.n	801a340 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 801a32c:	f002 f932 	bl	801c594 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 801a330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a332:	689b      	ldr	r3, [r3, #8]
 801a334:	4618      	mov	r0, r3
 801a336:	f001 fa31 	bl	801b79c <xTaskPriorityInherit>
 801a33a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 801a33c:	f002 f95a 	bl	801c5f4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801a340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a342:	3324      	adds	r3, #36	; 0x24
 801a344:	683a      	ldr	r2, [r7, #0]
 801a346:	4611      	mov	r1, r2
 801a348:	4618      	mov	r0, r3
 801a34a:	f000 fff9 	bl	801b340 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801a34e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a350:	f000 f962 	bl	801a618 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801a354:	f000 fe2e 	bl	801afb4 <xTaskResumeAll>
 801a358:	4603      	mov	r3, r0
 801a35a:	2b00      	cmp	r3, #0
 801a35c:	f47f af68 	bne.w	801a230 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 801a360:	4b18      	ldr	r3, [pc, #96]	; (801a3c4 <xQueueSemaphoreTake+0x214>)
 801a362:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a366:	601a      	str	r2, [r3, #0]
 801a368:	f3bf 8f4f 	dsb	sy
 801a36c:	f3bf 8f6f 	isb	sy
 801a370:	e75e      	b.n	801a230 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 801a372:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a374:	f000 f950 	bl	801a618 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801a378:	f000 fe1c 	bl	801afb4 <xTaskResumeAll>
 801a37c:	e758      	b.n	801a230 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801a37e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a380:	f000 f94a 	bl	801a618 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801a384:	f000 fe16 	bl	801afb4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801a388:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a38a:	f000 f997 	bl	801a6bc <prvIsQueueEmpty>
 801a38e:	4603      	mov	r3, r0
 801a390:	2b00      	cmp	r3, #0
 801a392:	f43f af4d 	beq.w	801a230 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801a396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a398:	2b00      	cmp	r3, #0
 801a39a:	d00d      	beq.n	801a3b8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 801a39c:	f002 f8fa 	bl	801c594 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 801a3a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a3a2:	f000 f891 	bl	801a4c8 <prvGetDisinheritPriorityAfterTimeout>
 801a3a6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 801a3a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a3aa:	689b      	ldr	r3, [r3, #8]
 801a3ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a3ae:	4618      	mov	r0, r3
 801a3b0:	f001 faf0 	bl	801b994 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 801a3b4:	f002 f91e 	bl	801c5f4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801a3b8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801a3ba:	4618      	mov	r0, r3
 801a3bc:	3738      	adds	r7, #56	; 0x38
 801a3be:	46bd      	mov	sp, r7
 801a3c0:	bd80      	pop	{r7, pc}
 801a3c2:	bf00      	nop
 801a3c4:	e000ed04 	.word	0xe000ed04

0801a3c8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801a3c8:	b580      	push	{r7, lr}
 801a3ca:	b08e      	sub	sp, #56	; 0x38
 801a3cc:	af00      	add	r7, sp, #0
 801a3ce:	60f8      	str	r0, [r7, #12]
 801a3d0:	60b9      	str	r1, [r7, #8]
 801a3d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801a3d4:	68fb      	ldr	r3, [r7, #12]
 801a3d6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801a3d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a3da:	2b00      	cmp	r3, #0
 801a3dc:	d10a      	bne.n	801a3f4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 801a3de:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a3e2:	f383 8811 	msr	BASEPRI, r3
 801a3e6:	f3bf 8f6f 	isb	sy
 801a3ea:	f3bf 8f4f 	dsb	sy
 801a3ee:	623b      	str	r3, [r7, #32]
}
 801a3f0:	bf00      	nop
 801a3f2:	e7fe      	b.n	801a3f2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801a3f4:	68bb      	ldr	r3, [r7, #8]
 801a3f6:	2b00      	cmp	r3, #0
 801a3f8:	d103      	bne.n	801a402 <xQueueReceiveFromISR+0x3a>
 801a3fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a3fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a3fe:	2b00      	cmp	r3, #0
 801a400:	d101      	bne.n	801a406 <xQueueReceiveFromISR+0x3e>
 801a402:	2301      	movs	r3, #1
 801a404:	e000      	b.n	801a408 <xQueueReceiveFromISR+0x40>
 801a406:	2300      	movs	r3, #0
 801a408:	2b00      	cmp	r3, #0
 801a40a:	d10a      	bne.n	801a422 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 801a40c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a410:	f383 8811 	msr	BASEPRI, r3
 801a414:	f3bf 8f6f 	isb	sy
 801a418:	f3bf 8f4f 	dsb	sy
 801a41c:	61fb      	str	r3, [r7, #28]
}
 801a41e:	bf00      	nop
 801a420:	e7fe      	b.n	801a420 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801a422:	f002 f999 	bl	801c758 <vPortValidateInterruptPriority>
	__asm volatile
 801a426:	f3ef 8211 	mrs	r2, BASEPRI
 801a42a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a42e:	f383 8811 	msr	BASEPRI, r3
 801a432:	f3bf 8f6f 	isb	sy
 801a436:	f3bf 8f4f 	dsb	sy
 801a43a:	61ba      	str	r2, [r7, #24]
 801a43c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801a43e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801a440:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801a442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a446:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801a448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a44a:	2b00      	cmp	r3, #0
 801a44c:	d02f      	beq.n	801a4ae <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801a44e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a450:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801a454:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 801a458:	68b9      	ldr	r1, [r7, #8]
 801a45a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a45c:	f000 f8b6 	bl	801a5cc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801a460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a462:	1e5a      	subs	r2, r3, #1
 801a464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a466:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 801a468:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801a46c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a470:	d112      	bne.n	801a498 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801a472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a474:	691b      	ldr	r3, [r3, #16]
 801a476:	2b00      	cmp	r3, #0
 801a478:	d016      	beq.n	801a4a8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801a47a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a47c:	3310      	adds	r3, #16
 801a47e:	4618      	mov	r0, r3
 801a480:	f000 ffae 	bl	801b3e0 <xTaskRemoveFromEventList>
 801a484:	4603      	mov	r3, r0
 801a486:	2b00      	cmp	r3, #0
 801a488:	d00e      	beq.n	801a4a8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801a48a:	687b      	ldr	r3, [r7, #4]
 801a48c:	2b00      	cmp	r3, #0
 801a48e:	d00b      	beq.n	801a4a8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 801a490:	687b      	ldr	r3, [r7, #4]
 801a492:	2201      	movs	r2, #1
 801a494:	601a      	str	r2, [r3, #0]
 801a496:	e007      	b.n	801a4a8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 801a498:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a49c:	3301      	adds	r3, #1
 801a49e:	b2db      	uxtb	r3, r3
 801a4a0:	b25a      	sxtb	r2, r3
 801a4a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a4a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 801a4a8:	2301      	movs	r3, #1
 801a4aa:	637b      	str	r3, [r7, #52]	; 0x34
 801a4ac:	e001      	b.n	801a4b2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 801a4ae:	2300      	movs	r3, #0
 801a4b0:	637b      	str	r3, [r7, #52]	; 0x34
 801a4b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a4b4:	613b      	str	r3, [r7, #16]
	__asm volatile
 801a4b6:	693b      	ldr	r3, [r7, #16]
 801a4b8:	f383 8811 	msr	BASEPRI, r3
}
 801a4bc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801a4be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801a4c0:	4618      	mov	r0, r3
 801a4c2:	3738      	adds	r7, #56	; 0x38
 801a4c4:	46bd      	mov	sp, r7
 801a4c6:	bd80      	pop	{r7, pc}

0801a4c8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801a4c8:	b480      	push	{r7}
 801a4ca:	b085      	sub	sp, #20
 801a4cc:	af00      	add	r7, sp, #0
 801a4ce:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801a4d0:	687b      	ldr	r3, [r7, #4]
 801a4d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a4d4:	2b00      	cmp	r3, #0
 801a4d6:	d006      	beq.n	801a4e6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801a4d8:	687b      	ldr	r3, [r7, #4]
 801a4da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a4dc:	681b      	ldr	r3, [r3, #0]
 801a4de:	f1c3 0307 	rsb	r3, r3, #7
 801a4e2:	60fb      	str	r3, [r7, #12]
 801a4e4:	e001      	b.n	801a4ea <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801a4e6:	2300      	movs	r3, #0
 801a4e8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801a4ea:	68fb      	ldr	r3, [r7, #12]
	}
 801a4ec:	4618      	mov	r0, r3
 801a4ee:	3714      	adds	r7, #20
 801a4f0:	46bd      	mov	sp, r7
 801a4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4f6:	4770      	bx	lr

0801a4f8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801a4f8:	b580      	push	{r7, lr}
 801a4fa:	b086      	sub	sp, #24
 801a4fc:	af00      	add	r7, sp, #0
 801a4fe:	60f8      	str	r0, [r7, #12]
 801a500:	60b9      	str	r1, [r7, #8]
 801a502:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801a504:	2300      	movs	r3, #0
 801a506:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801a508:	68fb      	ldr	r3, [r7, #12]
 801a50a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a50c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801a50e:	68fb      	ldr	r3, [r7, #12]
 801a510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a512:	2b00      	cmp	r3, #0
 801a514:	d10d      	bne.n	801a532 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801a516:	68fb      	ldr	r3, [r7, #12]
 801a518:	681b      	ldr	r3, [r3, #0]
 801a51a:	2b00      	cmp	r3, #0
 801a51c:	d14d      	bne.n	801a5ba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801a51e:	68fb      	ldr	r3, [r7, #12]
 801a520:	689b      	ldr	r3, [r3, #8]
 801a522:	4618      	mov	r0, r3
 801a524:	f001 f9b0 	bl	801b888 <xTaskPriorityDisinherit>
 801a528:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801a52a:	68fb      	ldr	r3, [r7, #12]
 801a52c:	2200      	movs	r2, #0
 801a52e:	609a      	str	r2, [r3, #8]
 801a530:	e043      	b.n	801a5ba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801a532:	687b      	ldr	r3, [r7, #4]
 801a534:	2b00      	cmp	r3, #0
 801a536:	d119      	bne.n	801a56c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801a538:	68fb      	ldr	r3, [r7, #12]
 801a53a:	6858      	ldr	r0, [r3, #4]
 801a53c:	68fb      	ldr	r3, [r7, #12]
 801a53e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a540:	461a      	mov	r2, r3
 801a542:	68b9      	ldr	r1, [r7, #8]
 801a544:	f013 fe84 	bl	802e250 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801a548:	68fb      	ldr	r3, [r7, #12]
 801a54a:	685a      	ldr	r2, [r3, #4]
 801a54c:	68fb      	ldr	r3, [r7, #12]
 801a54e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a550:	441a      	add	r2, r3
 801a552:	68fb      	ldr	r3, [r7, #12]
 801a554:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801a556:	68fb      	ldr	r3, [r7, #12]
 801a558:	685a      	ldr	r2, [r3, #4]
 801a55a:	68fb      	ldr	r3, [r7, #12]
 801a55c:	689b      	ldr	r3, [r3, #8]
 801a55e:	429a      	cmp	r2, r3
 801a560:	d32b      	bcc.n	801a5ba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801a562:	68fb      	ldr	r3, [r7, #12]
 801a564:	681a      	ldr	r2, [r3, #0]
 801a566:	68fb      	ldr	r3, [r7, #12]
 801a568:	605a      	str	r2, [r3, #4]
 801a56a:	e026      	b.n	801a5ba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801a56c:	68fb      	ldr	r3, [r7, #12]
 801a56e:	68d8      	ldr	r0, [r3, #12]
 801a570:	68fb      	ldr	r3, [r7, #12]
 801a572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a574:	461a      	mov	r2, r3
 801a576:	68b9      	ldr	r1, [r7, #8]
 801a578:	f013 fe6a 	bl	802e250 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801a57c:	68fb      	ldr	r3, [r7, #12]
 801a57e:	68da      	ldr	r2, [r3, #12]
 801a580:	68fb      	ldr	r3, [r7, #12]
 801a582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a584:	425b      	negs	r3, r3
 801a586:	441a      	add	r2, r3
 801a588:	68fb      	ldr	r3, [r7, #12]
 801a58a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801a58c:	68fb      	ldr	r3, [r7, #12]
 801a58e:	68da      	ldr	r2, [r3, #12]
 801a590:	68fb      	ldr	r3, [r7, #12]
 801a592:	681b      	ldr	r3, [r3, #0]
 801a594:	429a      	cmp	r2, r3
 801a596:	d207      	bcs.n	801a5a8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801a598:	68fb      	ldr	r3, [r7, #12]
 801a59a:	689a      	ldr	r2, [r3, #8]
 801a59c:	68fb      	ldr	r3, [r7, #12]
 801a59e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a5a0:	425b      	negs	r3, r3
 801a5a2:	441a      	add	r2, r3
 801a5a4:	68fb      	ldr	r3, [r7, #12]
 801a5a6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801a5a8:	687b      	ldr	r3, [r7, #4]
 801a5aa:	2b02      	cmp	r3, #2
 801a5ac:	d105      	bne.n	801a5ba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801a5ae:	693b      	ldr	r3, [r7, #16]
 801a5b0:	2b00      	cmp	r3, #0
 801a5b2:	d002      	beq.n	801a5ba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801a5b4:	693b      	ldr	r3, [r7, #16]
 801a5b6:	3b01      	subs	r3, #1
 801a5b8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801a5ba:	693b      	ldr	r3, [r7, #16]
 801a5bc:	1c5a      	adds	r2, r3, #1
 801a5be:	68fb      	ldr	r3, [r7, #12]
 801a5c0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801a5c2:	697b      	ldr	r3, [r7, #20]
}
 801a5c4:	4618      	mov	r0, r3
 801a5c6:	3718      	adds	r7, #24
 801a5c8:	46bd      	mov	sp, r7
 801a5ca:	bd80      	pop	{r7, pc}

0801a5cc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801a5cc:	b580      	push	{r7, lr}
 801a5ce:	b082      	sub	sp, #8
 801a5d0:	af00      	add	r7, sp, #0
 801a5d2:	6078      	str	r0, [r7, #4]
 801a5d4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801a5d6:	687b      	ldr	r3, [r7, #4]
 801a5d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a5da:	2b00      	cmp	r3, #0
 801a5dc:	d018      	beq.n	801a610 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801a5de:	687b      	ldr	r3, [r7, #4]
 801a5e0:	68da      	ldr	r2, [r3, #12]
 801a5e2:	687b      	ldr	r3, [r7, #4]
 801a5e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a5e6:	441a      	add	r2, r3
 801a5e8:	687b      	ldr	r3, [r7, #4]
 801a5ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801a5ec:	687b      	ldr	r3, [r7, #4]
 801a5ee:	68da      	ldr	r2, [r3, #12]
 801a5f0:	687b      	ldr	r3, [r7, #4]
 801a5f2:	689b      	ldr	r3, [r3, #8]
 801a5f4:	429a      	cmp	r2, r3
 801a5f6:	d303      	bcc.n	801a600 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801a5f8:	687b      	ldr	r3, [r7, #4]
 801a5fa:	681a      	ldr	r2, [r3, #0]
 801a5fc:	687b      	ldr	r3, [r7, #4]
 801a5fe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801a600:	687b      	ldr	r3, [r7, #4]
 801a602:	68d9      	ldr	r1, [r3, #12]
 801a604:	687b      	ldr	r3, [r7, #4]
 801a606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a608:	461a      	mov	r2, r3
 801a60a:	6838      	ldr	r0, [r7, #0]
 801a60c:	f013 fe20 	bl	802e250 <memcpy>
	}
}
 801a610:	bf00      	nop
 801a612:	3708      	adds	r7, #8
 801a614:	46bd      	mov	sp, r7
 801a616:	bd80      	pop	{r7, pc}

0801a618 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801a618:	b580      	push	{r7, lr}
 801a61a:	b084      	sub	sp, #16
 801a61c:	af00      	add	r7, sp, #0
 801a61e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801a620:	f001 ffb8 	bl	801c594 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801a624:	687b      	ldr	r3, [r7, #4]
 801a626:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801a62a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801a62c:	e011      	b.n	801a652 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801a62e:	687b      	ldr	r3, [r7, #4]
 801a630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a632:	2b00      	cmp	r3, #0
 801a634:	d012      	beq.n	801a65c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801a636:	687b      	ldr	r3, [r7, #4]
 801a638:	3324      	adds	r3, #36	; 0x24
 801a63a:	4618      	mov	r0, r3
 801a63c:	f000 fed0 	bl	801b3e0 <xTaskRemoveFromEventList>
 801a640:	4603      	mov	r3, r0
 801a642:	2b00      	cmp	r3, #0
 801a644:	d001      	beq.n	801a64a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801a646:	f000 ffa5 	bl	801b594 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801a64a:	7bfb      	ldrb	r3, [r7, #15]
 801a64c:	3b01      	subs	r3, #1
 801a64e:	b2db      	uxtb	r3, r3
 801a650:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801a652:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a656:	2b00      	cmp	r3, #0
 801a658:	dce9      	bgt.n	801a62e <prvUnlockQueue+0x16>
 801a65a:	e000      	b.n	801a65e <prvUnlockQueue+0x46>
					break;
 801a65c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801a65e:	687b      	ldr	r3, [r7, #4]
 801a660:	22ff      	movs	r2, #255	; 0xff
 801a662:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801a666:	f001 ffc5 	bl	801c5f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801a66a:	f001 ff93 	bl	801c594 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801a66e:	687b      	ldr	r3, [r7, #4]
 801a670:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801a674:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801a676:	e011      	b.n	801a69c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801a678:	687b      	ldr	r3, [r7, #4]
 801a67a:	691b      	ldr	r3, [r3, #16]
 801a67c:	2b00      	cmp	r3, #0
 801a67e:	d012      	beq.n	801a6a6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801a680:	687b      	ldr	r3, [r7, #4]
 801a682:	3310      	adds	r3, #16
 801a684:	4618      	mov	r0, r3
 801a686:	f000 feab 	bl	801b3e0 <xTaskRemoveFromEventList>
 801a68a:	4603      	mov	r3, r0
 801a68c:	2b00      	cmp	r3, #0
 801a68e:	d001      	beq.n	801a694 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801a690:	f000 ff80 	bl	801b594 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801a694:	7bbb      	ldrb	r3, [r7, #14]
 801a696:	3b01      	subs	r3, #1
 801a698:	b2db      	uxtb	r3, r3
 801a69a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801a69c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801a6a0:	2b00      	cmp	r3, #0
 801a6a2:	dce9      	bgt.n	801a678 <prvUnlockQueue+0x60>
 801a6a4:	e000      	b.n	801a6a8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801a6a6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801a6a8:	687b      	ldr	r3, [r7, #4]
 801a6aa:	22ff      	movs	r2, #255	; 0xff
 801a6ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801a6b0:	f001 ffa0 	bl	801c5f4 <vPortExitCritical>
}
 801a6b4:	bf00      	nop
 801a6b6:	3710      	adds	r7, #16
 801a6b8:	46bd      	mov	sp, r7
 801a6ba:	bd80      	pop	{r7, pc}

0801a6bc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801a6bc:	b580      	push	{r7, lr}
 801a6be:	b084      	sub	sp, #16
 801a6c0:	af00      	add	r7, sp, #0
 801a6c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801a6c4:	f001 ff66 	bl	801c594 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801a6c8:	687b      	ldr	r3, [r7, #4]
 801a6ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a6cc:	2b00      	cmp	r3, #0
 801a6ce:	d102      	bne.n	801a6d6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801a6d0:	2301      	movs	r3, #1
 801a6d2:	60fb      	str	r3, [r7, #12]
 801a6d4:	e001      	b.n	801a6da <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801a6d6:	2300      	movs	r3, #0
 801a6d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801a6da:	f001 ff8b 	bl	801c5f4 <vPortExitCritical>

	return xReturn;
 801a6de:	68fb      	ldr	r3, [r7, #12]
}
 801a6e0:	4618      	mov	r0, r3
 801a6e2:	3710      	adds	r7, #16
 801a6e4:	46bd      	mov	sp, r7
 801a6e6:	bd80      	pop	{r7, pc}

0801a6e8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801a6e8:	b580      	push	{r7, lr}
 801a6ea:	b084      	sub	sp, #16
 801a6ec:	af00      	add	r7, sp, #0
 801a6ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801a6f0:	f001 ff50 	bl	801c594 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801a6f4:	687b      	ldr	r3, [r7, #4]
 801a6f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801a6f8:	687b      	ldr	r3, [r7, #4]
 801a6fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a6fc:	429a      	cmp	r2, r3
 801a6fe:	d102      	bne.n	801a706 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801a700:	2301      	movs	r3, #1
 801a702:	60fb      	str	r3, [r7, #12]
 801a704:	e001      	b.n	801a70a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801a706:	2300      	movs	r3, #0
 801a708:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801a70a:	f001 ff73 	bl	801c5f4 <vPortExitCritical>

	return xReturn;
 801a70e:	68fb      	ldr	r3, [r7, #12]
}
 801a710:	4618      	mov	r0, r3
 801a712:	3710      	adds	r7, #16
 801a714:	46bd      	mov	sp, r7
 801a716:	bd80      	pop	{r7, pc}

0801a718 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801a718:	b480      	push	{r7}
 801a71a:	b085      	sub	sp, #20
 801a71c:	af00      	add	r7, sp, #0
 801a71e:	6078      	str	r0, [r7, #4]
 801a720:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801a722:	2300      	movs	r3, #0
 801a724:	60fb      	str	r3, [r7, #12]
 801a726:	e014      	b.n	801a752 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801a728:	4a0f      	ldr	r2, [pc, #60]	; (801a768 <vQueueAddToRegistry+0x50>)
 801a72a:	68fb      	ldr	r3, [r7, #12]
 801a72c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801a730:	2b00      	cmp	r3, #0
 801a732:	d10b      	bne.n	801a74c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801a734:	490c      	ldr	r1, [pc, #48]	; (801a768 <vQueueAddToRegistry+0x50>)
 801a736:	68fb      	ldr	r3, [r7, #12]
 801a738:	683a      	ldr	r2, [r7, #0]
 801a73a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801a73e:	4a0a      	ldr	r2, [pc, #40]	; (801a768 <vQueueAddToRegistry+0x50>)
 801a740:	68fb      	ldr	r3, [r7, #12]
 801a742:	00db      	lsls	r3, r3, #3
 801a744:	4413      	add	r3, r2
 801a746:	687a      	ldr	r2, [r7, #4]
 801a748:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801a74a:	e006      	b.n	801a75a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801a74c:	68fb      	ldr	r3, [r7, #12]
 801a74e:	3301      	adds	r3, #1
 801a750:	60fb      	str	r3, [r7, #12]
 801a752:	68fb      	ldr	r3, [r7, #12]
 801a754:	2b07      	cmp	r3, #7
 801a756:	d9e7      	bls.n	801a728 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801a758:	bf00      	nop
 801a75a:	bf00      	nop
 801a75c:	3714      	adds	r7, #20
 801a75e:	46bd      	mov	sp, r7
 801a760:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a764:	4770      	bx	lr
 801a766:	bf00      	nop
 801a768:	20009f08 	.word	0x20009f08

0801a76c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801a76c:	b580      	push	{r7, lr}
 801a76e:	b086      	sub	sp, #24
 801a770:	af00      	add	r7, sp, #0
 801a772:	60f8      	str	r0, [r7, #12]
 801a774:	60b9      	str	r1, [r7, #8]
 801a776:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 801a778:	68fb      	ldr	r3, [r7, #12]
 801a77a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801a77c:	f001 ff0a 	bl	801c594 <vPortEnterCritical>
 801a780:	697b      	ldr	r3, [r7, #20]
 801a782:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801a786:	b25b      	sxtb	r3, r3
 801a788:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a78c:	d103      	bne.n	801a796 <vQueueWaitForMessageRestricted+0x2a>
 801a78e:	697b      	ldr	r3, [r7, #20]
 801a790:	2200      	movs	r2, #0
 801a792:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801a796:	697b      	ldr	r3, [r7, #20]
 801a798:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801a79c:	b25b      	sxtb	r3, r3
 801a79e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a7a2:	d103      	bne.n	801a7ac <vQueueWaitForMessageRestricted+0x40>
 801a7a4:	697b      	ldr	r3, [r7, #20]
 801a7a6:	2200      	movs	r2, #0
 801a7a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801a7ac:	f001 ff22 	bl	801c5f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801a7b0:	697b      	ldr	r3, [r7, #20]
 801a7b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a7b4:	2b00      	cmp	r3, #0
 801a7b6:	d106      	bne.n	801a7c6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801a7b8:	697b      	ldr	r3, [r7, #20]
 801a7ba:	3324      	adds	r3, #36	; 0x24
 801a7bc:	687a      	ldr	r2, [r7, #4]
 801a7be:	68b9      	ldr	r1, [r7, #8]
 801a7c0:	4618      	mov	r0, r3
 801a7c2:	f000 fde1 	bl	801b388 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801a7c6:	6978      	ldr	r0, [r7, #20]
 801a7c8:	f7ff ff26 	bl	801a618 <prvUnlockQueue>
	}
 801a7cc:	bf00      	nop
 801a7ce:	3718      	adds	r7, #24
 801a7d0:	46bd      	mov	sp, r7
 801a7d2:	bd80      	pop	{r7, pc}

0801a7d4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801a7d4:	b580      	push	{r7, lr}
 801a7d6:	b08e      	sub	sp, #56	; 0x38
 801a7d8:	af04      	add	r7, sp, #16
 801a7da:	60f8      	str	r0, [r7, #12]
 801a7dc:	60b9      	str	r1, [r7, #8]
 801a7de:	607a      	str	r2, [r7, #4]
 801a7e0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801a7e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a7e4:	2b00      	cmp	r3, #0
 801a7e6:	d10a      	bne.n	801a7fe <xTaskCreateStatic+0x2a>
	__asm volatile
 801a7e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a7ec:	f383 8811 	msr	BASEPRI, r3
 801a7f0:	f3bf 8f6f 	isb	sy
 801a7f4:	f3bf 8f4f 	dsb	sy
 801a7f8:	623b      	str	r3, [r7, #32]
}
 801a7fa:	bf00      	nop
 801a7fc:	e7fe      	b.n	801a7fc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801a7fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a800:	2b00      	cmp	r3, #0
 801a802:	d10a      	bne.n	801a81a <xTaskCreateStatic+0x46>
	__asm volatile
 801a804:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a808:	f383 8811 	msr	BASEPRI, r3
 801a80c:	f3bf 8f6f 	isb	sy
 801a810:	f3bf 8f4f 	dsb	sy
 801a814:	61fb      	str	r3, [r7, #28]
}
 801a816:	bf00      	nop
 801a818:	e7fe      	b.n	801a818 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801a81a:	23b4      	movs	r3, #180	; 0xb4
 801a81c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801a81e:	693b      	ldr	r3, [r7, #16]
 801a820:	2bb4      	cmp	r3, #180	; 0xb4
 801a822:	d00a      	beq.n	801a83a <xTaskCreateStatic+0x66>
	__asm volatile
 801a824:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a828:	f383 8811 	msr	BASEPRI, r3
 801a82c:	f3bf 8f6f 	isb	sy
 801a830:	f3bf 8f4f 	dsb	sy
 801a834:	61bb      	str	r3, [r7, #24]
}
 801a836:	bf00      	nop
 801a838:	e7fe      	b.n	801a838 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801a83a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801a83c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a83e:	2b00      	cmp	r3, #0
 801a840:	d01e      	beq.n	801a880 <xTaskCreateStatic+0xac>
 801a842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a844:	2b00      	cmp	r3, #0
 801a846:	d01b      	beq.n	801a880 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801a848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a84a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801a84c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a84e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a850:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801a852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a854:	2202      	movs	r2, #2
 801a856:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801a85a:	2300      	movs	r3, #0
 801a85c:	9303      	str	r3, [sp, #12]
 801a85e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a860:	9302      	str	r3, [sp, #8]
 801a862:	f107 0314 	add.w	r3, r7, #20
 801a866:	9301      	str	r3, [sp, #4]
 801a868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a86a:	9300      	str	r3, [sp, #0]
 801a86c:	683b      	ldr	r3, [r7, #0]
 801a86e:	687a      	ldr	r2, [r7, #4]
 801a870:	68b9      	ldr	r1, [r7, #8]
 801a872:	68f8      	ldr	r0, [r7, #12]
 801a874:	f000 f850 	bl	801a918 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801a878:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a87a:	f000 f8eb 	bl	801aa54 <prvAddNewTaskToReadyList>
 801a87e:	e001      	b.n	801a884 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 801a880:	2300      	movs	r3, #0
 801a882:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801a884:	697b      	ldr	r3, [r7, #20]
	}
 801a886:	4618      	mov	r0, r3
 801a888:	3728      	adds	r7, #40	; 0x28
 801a88a:	46bd      	mov	sp, r7
 801a88c:	bd80      	pop	{r7, pc}

0801a88e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801a88e:	b580      	push	{r7, lr}
 801a890:	b08c      	sub	sp, #48	; 0x30
 801a892:	af04      	add	r7, sp, #16
 801a894:	60f8      	str	r0, [r7, #12]
 801a896:	60b9      	str	r1, [r7, #8]
 801a898:	603b      	str	r3, [r7, #0]
 801a89a:	4613      	mov	r3, r2
 801a89c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801a89e:	88fb      	ldrh	r3, [r7, #6]
 801a8a0:	009b      	lsls	r3, r3, #2
 801a8a2:	4618      	mov	r0, r3
 801a8a4:	f001 ff98 	bl	801c7d8 <pvPortMalloc>
 801a8a8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801a8aa:	697b      	ldr	r3, [r7, #20]
 801a8ac:	2b00      	cmp	r3, #0
 801a8ae:	d00e      	beq.n	801a8ce <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801a8b0:	20b4      	movs	r0, #180	; 0xb4
 801a8b2:	f001 ff91 	bl	801c7d8 <pvPortMalloc>
 801a8b6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801a8b8:	69fb      	ldr	r3, [r7, #28]
 801a8ba:	2b00      	cmp	r3, #0
 801a8bc:	d003      	beq.n	801a8c6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801a8be:	69fb      	ldr	r3, [r7, #28]
 801a8c0:	697a      	ldr	r2, [r7, #20]
 801a8c2:	631a      	str	r2, [r3, #48]	; 0x30
 801a8c4:	e005      	b.n	801a8d2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801a8c6:	6978      	ldr	r0, [r7, #20]
 801a8c8:	f002 f852 	bl	801c970 <vPortFree>
 801a8cc:	e001      	b.n	801a8d2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801a8ce:	2300      	movs	r3, #0
 801a8d0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801a8d2:	69fb      	ldr	r3, [r7, #28]
 801a8d4:	2b00      	cmp	r3, #0
 801a8d6:	d017      	beq.n	801a908 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801a8d8:	69fb      	ldr	r3, [r7, #28]
 801a8da:	2200      	movs	r2, #0
 801a8dc:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801a8e0:	88fa      	ldrh	r2, [r7, #6]
 801a8e2:	2300      	movs	r3, #0
 801a8e4:	9303      	str	r3, [sp, #12]
 801a8e6:	69fb      	ldr	r3, [r7, #28]
 801a8e8:	9302      	str	r3, [sp, #8]
 801a8ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a8ec:	9301      	str	r3, [sp, #4]
 801a8ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a8f0:	9300      	str	r3, [sp, #0]
 801a8f2:	683b      	ldr	r3, [r7, #0]
 801a8f4:	68b9      	ldr	r1, [r7, #8]
 801a8f6:	68f8      	ldr	r0, [r7, #12]
 801a8f8:	f000 f80e 	bl	801a918 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801a8fc:	69f8      	ldr	r0, [r7, #28]
 801a8fe:	f000 f8a9 	bl	801aa54 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801a902:	2301      	movs	r3, #1
 801a904:	61bb      	str	r3, [r7, #24]
 801a906:	e002      	b.n	801a90e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801a908:	f04f 33ff 	mov.w	r3, #4294967295
 801a90c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801a90e:	69bb      	ldr	r3, [r7, #24]
	}
 801a910:	4618      	mov	r0, r3
 801a912:	3720      	adds	r7, #32
 801a914:	46bd      	mov	sp, r7
 801a916:	bd80      	pop	{r7, pc}

0801a918 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801a918:	b580      	push	{r7, lr}
 801a91a:	b088      	sub	sp, #32
 801a91c:	af00      	add	r7, sp, #0
 801a91e:	60f8      	str	r0, [r7, #12]
 801a920:	60b9      	str	r1, [r7, #8]
 801a922:	607a      	str	r2, [r7, #4]
 801a924:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801a926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a928:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801a92a:	687b      	ldr	r3, [r7, #4]
 801a92c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801a930:	3b01      	subs	r3, #1
 801a932:	009b      	lsls	r3, r3, #2
 801a934:	4413      	add	r3, r2
 801a936:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801a938:	69bb      	ldr	r3, [r7, #24]
 801a93a:	f023 0307 	bic.w	r3, r3, #7
 801a93e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801a940:	69bb      	ldr	r3, [r7, #24]
 801a942:	f003 0307 	and.w	r3, r3, #7
 801a946:	2b00      	cmp	r3, #0
 801a948:	d00a      	beq.n	801a960 <prvInitialiseNewTask+0x48>
	__asm volatile
 801a94a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a94e:	f383 8811 	msr	BASEPRI, r3
 801a952:	f3bf 8f6f 	isb	sy
 801a956:	f3bf 8f4f 	dsb	sy
 801a95a:	617b      	str	r3, [r7, #20]
}
 801a95c:	bf00      	nop
 801a95e:	e7fe      	b.n	801a95e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801a960:	68bb      	ldr	r3, [r7, #8]
 801a962:	2b00      	cmp	r3, #0
 801a964:	d01f      	beq.n	801a9a6 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801a966:	2300      	movs	r3, #0
 801a968:	61fb      	str	r3, [r7, #28]
 801a96a:	e012      	b.n	801a992 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801a96c:	68ba      	ldr	r2, [r7, #8]
 801a96e:	69fb      	ldr	r3, [r7, #28]
 801a970:	4413      	add	r3, r2
 801a972:	7819      	ldrb	r1, [r3, #0]
 801a974:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a976:	69fb      	ldr	r3, [r7, #28]
 801a978:	4413      	add	r3, r2
 801a97a:	3334      	adds	r3, #52	; 0x34
 801a97c:	460a      	mov	r2, r1
 801a97e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801a980:	68ba      	ldr	r2, [r7, #8]
 801a982:	69fb      	ldr	r3, [r7, #28]
 801a984:	4413      	add	r3, r2
 801a986:	781b      	ldrb	r3, [r3, #0]
 801a988:	2b00      	cmp	r3, #0
 801a98a:	d006      	beq.n	801a99a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801a98c:	69fb      	ldr	r3, [r7, #28]
 801a98e:	3301      	adds	r3, #1
 801a990:	61fb      	str	r3, [r7, #28]
 801a992:	69fb      	ldr	r3, [r7, #28]
 801a994:	2b0f      	cmp	r3, #15
 801a996:	d9e9      	bls.n	801a96c <prvInitialiseNewTask+0x54>
 801a998:	e000      	b.n	801a99c <prvInitialiseNewTask+0x84>
			{
				break;
 801a99a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801a99c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a99e:	2200      	movs	r2, #0
 801a9a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801a9a4:	e003      	b.n	801a9ae <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801a9a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a9a8:	2200      	movs	r2, #0
 801a9aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801a9ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a9b0:	2b06      	cmp	r3, #6
 801a9b2:	d901      	bls.n	801a9b8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801a9b4:	2306      	movs	r3, #6
 801a9b6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801a9b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a9ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a9bc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801a9be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a9c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a9c2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 801a9c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a9c6:	2200      	movs	r2, #0
 801a9c8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801a9ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a9cc:	3304      	adds	r3, #4
 801a9ce:	4618      	mov	r0, r3
 801a9d0:	f7fe fece 	bl	8019770 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801a9d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a9d6:	3318      	adds	r3, #24
 801a9d8:	4618      	mov	r0, r3
 801a9da:	f7fe fec9 	bl	8019770 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801a9de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a9e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a9e2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a9e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a9e6:	f1c3 0207 	rsb	r2, r3, #7
 801a9ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a9ec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801a9ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a9f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a9f2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801a9f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a9f6:	2200      	movs	r2, #0
 801a9f8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801a9fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a9fe:	2200      	movs	r2, #0
 801aa00:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 801aa04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aa06:	334c      	adds	r3, #76	; 0x4c
 801aa08:	2260      	movs	r2, #96	; 0x60
 801aa0a:	2100      	movs	r1, #0
 801aa0c:	4618      	mov	r0, r3
 801aa0e:	f013 fc2d 	bl	802e26c <memset>
 801aa12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aa14:	4a0c      	ldr	r2, [pc, #48]	; (801aa48 <prvInitialiseNewTask+0x130>)
 801aa16:	651a      	str	r2, [r3, #80]	; 0x50
 801aa18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aa1a:	4a0c      	ldr	r2, [pc, #48]	; (801aa4c <prvInitialiseNewTask+0x134>)
 801aa1c:	655a      	str	r2, [r3, #84]	; 0x54
 801aa1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aa20:	4a0b      	ldr	r2, [pc, #44]	; (801aa50 <prvInitialiseNewTask+0x138>)
 801aa22:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801aa24:	683a      	ldr	r2, [r7, #0]
 801aa26:	68f9      	ldr	r1, [r7, #12]
 801aa28:	69b8      	ldr	r0, [r7, #24]
 801aa2a:	f001 fc87 	bl	801c33c <pxPortInitialiseStack>
 801aa2e:	4602      	mov	r2, r0
 801aa30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aa32:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801aa34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aa36:	2b00      	cmp	r3, #0
 801aa38:	d002      	beq.n	801aa40 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801aa3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aa3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801aa3e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801aa40:	bf00      	nop
 801aa42:	3720      	adds	r7, #32
 801aa44:	46bd      	mov	sp, r7
 801aa46:	bd80      	pop	{r7, pc}
 801aa48:	0803018c 	.word	0x0803018c
 801aa4c:	080301ac 	.word	0x080301ac
 801aa50:	0803016c 	.word	0x0803016c

0801aa54 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801aa54:	b580      	push	{r7, lr}
 801aa56:	b082      	sub	sp, #8
 801aa58:	af00      	add	r7, sp, #0
 801aa5a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801aa5c:	f001 fd9a 	bl	801c594 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801aa60:	4b2a      	ldr	r3, [pc, #168]	; (801ab0c <prvAddNewTaskToReadyList+0xb8>)
 801aa62:	681b      	ldr	r3, [r3, #0]
 801aa64:	3301      	adds	r3, #1
 801aa66:	4a29      	ldr	r2, [pc, #164]	; (801ab0c <prvAddNewTaskToReadyList+0xb8>)
 801aa68:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801aa6a:	4b29      	ldr	r3, [pc, #164]	; (801ab10 <prvAddNewTaskToReadyList+0xbc>)
 801aa6c:	681b      	ldr	r3, [r3, #0]
 801aa6e:	2b00      	cmp	r3, #0
 801aa70:	d109      	bne.n	801aa86 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801aa72:	4a27      	ldr	r2, [pc, #156]	; (801ab10 <prvAddNewTaskToReadyList+0xbc>)
 801aa74:	687b      	ldr	r3, [r7, #4]
 801aa76:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801aa78:	4b24      	ldr	r3, [pc, #144]	; (801ab0c <prvAddNewTaskToReadyList+0xb8>)
 801aa7a:	681b      	ldr	r3, [r3, #0]
 801aa7c:	2b01      	cmp	r3, #1
 801aa7e:	d110      	bne.n	801aaa2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801aa80:	f000 fdac 	bl	801b5dc <prvInitialiseTaskLists>
 801aa84:	e00d      	b.n	801aaa2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801aa86:	4b23      	ldr	r3, [pc, #140]	; (801ab14 <prvAddNewTaskToReadyList+0xc0>)
 801aa88:	681b      	ldr	r3, [r3, #0]
 801aa8a:	2b00      	cmp	r3, #0
 801aa8c:	d109      	bne.n	801aaa2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801aa8e:	4b20      	ldr	r3, [pc, #128]	; (801ab10 <prvAddNewTaskToReadyList+0xbc>)
 801aa90:	681b      	ldr	r3, [r3, #0]
 801aa92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801aa94:	687b      	ldr	r3, [r7, #4]
 801aa96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801aa98:	429a      	cmp	r2, r3
 801aa9a:	d802      	bhi.n	801aaa2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801aa9c:	4a1c      	ldr	r2, [pc, #112]	; (801ab10 <prvAddNewTaskToReadyList+0xbc>)
 801aa9e:	687b      	ldr	r3, [r7, #4]
 801aaa0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801aaa2:	4b1d      	ldr	r3, [pc, #116]	; (801ab18 <prvAddNewTaskToReadyList+0xc4>)
 801aaa4:	681b      	ldr	r3, [r3, #0]
 801aaa6:	3301      	adds	r3, #1
 801aaa8:	4a1b      	ldr	r2, [pc, #108]	; (801ab18 <prvAddNewTaskToReadyList+0xc4>)
 801aaaa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801aaac:	687b      	ldr	r3, [r7, #4]
 801aaae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801aab0:	2201      	movs	r2, #1
 801aab2:	409a      	lsls	r2, r3
 801aab4:	4b19      	ldr	r3, [pc, #100]	; (801ab1c <prvAddNewTaskToReadyList+0xc8>)
 801aab6:	681b      	ldr	r3, [r3, #0]
 801aab8:	4313      	orrs	r3, r2
 801aaba:	4a18      	ldr	r2, [pc, #96]	; (801ab1c <prvAddNewTaskToReadyList+0xc8>)
 801aabc:	6013      	str	r3, [r2, #0]
 801aabe:	687b      	ldr	r3, [r7, #4]
 801aac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801aac2:	4613      	mov	r3, r2
 801aac4:	009b      	lsls	r3, r3, #2
 801aac6:	4413      	add	r3, r2
 801aac8:	009b      	lsls	r3, r3, #2
 801aaca:	4a15      	ldr	r2, [pc, #84]	; (801ab20 <prvAddNewTaskToReadyList+0xcc>)
 801aacc:	441a      	add	r2, r3
 801aace:	687b      	ldr	r3, [r7, #4]
 801aad0:	3304      	adds	r3, #4
 801aad2:	4619      	mov	r1, r3
 801aad4:	4610      	mov	r0, r2
 801aad6:	f7fe fe58 	bl	801978a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801aada:	f001 fd8b 	bl	801c5f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801aade:	4b0d      	ldr	r3, [pc, #52]	; (801ab14 <prvAddNewTaskToReadyList+0xc0>)
 801aae0:	681b      	ldr	r3, [r3, #0]
 801aae2:	2b00      	cmp	r3, #0
 801aae4:	d00e      	beq.n	801ab04 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801aae6:	4b0a      	ldr	r3, [pc, #40]	; (801ab10 <prvAddNewTaskToReadyList+0xbc>)
 801aae8:	681b      	ldr	r3, [r3, #0]
 801aaea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801aaec:	687b      	ldr	r3, [r7, #4]
 801aaee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801aaf0:	429a      	cmp	r2, r3
 801aaf2:	d207      	bcs.n	801ab04 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801aaf4:	4b0b      	ldr	r3, [pc, #44]	; (801ab24 <prvAddNewTaskToReadyList+0xd0>)
 801aaf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801aafa:	601a      	str	r2, [r3, #0]
 801aafc:	f3bf 8f4f 	dsb	sy
 801ab00:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801ab04:	bf00      	nop
 801ab06:	3708      	adds	r7, #8
 801ab08:	46bd      	mov	sp, r7
 801ab0a:	bd80      	pop	{r7, pc}
 801ab0c:	20000990 	.word	0x20000990
 801ab10:	20000890 	.word	0x20000890
 801ab14:	2000099c 	.word	0x2000099c
 801ab18:	200009ac 	.word	0x200009ac
 801ab1c:	20000998 	.word	0x20000998
 801ab20:	20000894 	.word	0x20000894
 801ab24:	e000ed04 	.word	0xe000ed04

0801ab28 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801ab28:	b580      	push	{r7, lr}
 801ab2a:	b084      	sub	sp, #16
 801ab2c:	af00      	add	r7, sp, #0
 801ab2e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801ab30:	2300      	movs	r3, #0
 801ab32:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801ab34:	687b      	ldr	r3, [r7, #4]
 801ab36:	2b00      	cmp	r3, #0
 801ab38:	d017      	beq.n	801ab6a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801ab3a:	4b13      	ldr	r3, [pc, #76]	; (801ab88 <vTaskDelay+0x60>)
 801ab3c:	681b      	ldr	r3, [r3, #0]
 801ab3e:	2b00      	cmp	r3, #0
 801ab40:	d00a      	beq.n	801ab58 <vTaskDelay+0x30>
	__asm volatile
 801ab42:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ab46:	f383 8811 	msr	BASEPRI, r3
 801ab4a:	f3bf 8f6f 	isb	sy
 801ab4e:	f3bf 8f4f 	dsb	sy
 801ab52:	60bb      	str	r3, [r7, #8]
}
 801ab54:	bf00      	nop
 801ab56:	e7fe      	b.n	801ab56 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 801ab58:	f000 fa1e 	bl	801af98 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801ab5c:	2100      	movs	r1, #0
 801ab5e:	6878      	ldr	r0, [r7, #4]
 801ab60:	f000 ffba 	bl	801bad8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801ab64:	f000 fa26 	bl	801afb4 <xTaskResumeAll>
 801ab68:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801ab6a:	68fb      	ldr	r3, [r7, #12]
 801ab6c:	2b00      	cmp	r3, #0
 801ab6e:	d107      	bne.n	801ab80 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 801ab70:	4b06      	ldr	r3, [pc, #24]	; (801ab8c <vTaskDelay+0x64>)
 801ab72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801ab76:	601a      	str	r2, [r3, #0]
 801ab78:	f3bf 8f4f 	dsb	sy
 801ab7c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801ab80:	bf00      	nop
 801ab82:	3710      	adds	r7, #16
 801ab84:	46bd      	mov	sp, r7
 801ab86:	bd80      	pop	{r7, pc}
 801ab88:	200009b8 	.word	0x200009b8
 801ab8c:	e000ed04 	.word	0xe000ed04

0801ab90 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 801ab90:	b580      	push	{r7, lr}
 801ab92:	b084      	sub	sp, #16
 801ab94:	af00      	add	r7, sp, #0
 801ab96:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 801ab98:	f001 fcfc 	bl	801c594 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 801ab9c:	687b      	ldr	r3, [r7, #4]
 801ab9e:	2b00      	cmp	r3, #0
 801aba0:	d102      	bne.n	801aba8 <vTaskSuspend+0x18>
 801aba2:	4b3c      	ldr	r3, [pc, #240]	; (801ac94 <vTaskSuspend+0x104>)
 801aba4:	681b      	ldr	r3, [r3, #0]
 801aba6:	e000      	b.n	801abaa <vTaskSuspend+0x1a>
 801aba8:	687b      	ldr	r3, [r7, #4]
 801abaa:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801abac:	68fb      	ldr	r3, [r7, #12]
 801abae:	3304      	adds	r3, #4
 801abb0:	4618      	mov	r0, r3
 801abb2:	f7fe fe47 	bl	8019844 <uxListRemove>
 801abb6:	4603      	mov	r3, r0
 801abb8:	2b00      	cmp	r3, #0
 801abba:	d115      	bne.n	801abe8 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801abbc:	68fb      	ldr	r3, [r7, #12]
 801abbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801abc0:	4935      	ldr	r1, [pc, #212]	; (801ac98 <vTaskSuspend+0x108>)
 801abc2:	4613      	mov	r3, r2
 801abc4:	009b      	lsls	r3, r3, #2
 801abc6:	4413      	add	r3, r2
 801abc8:	009b      	lsls	r3, r3, #2
 801abca:	440b      	add	r3, r1
 801abcc:	681b      	ldr	r3, [r3, #0]
 801abce:	2b00      	cmp	r3, #0
 801abd0:	d10a      	bne.n	801abe8 <vTaskSuspend+0x58>
 801abd2:	68fb      	ldr	r3, [r7, #12]
 801abd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801abd6:	2201      	movs	r2, #1
 801abd8:	fa02 f303 	lsl.w	r3, r2, r3
 801abdc:	43da      	mvns	r2, r3
 801abde:	4b2f      	ldr	r3, [pc, #188]	; (801ac9c <vTaskSuspend+0x10c>)
 801abe0:	681b      	ldr	r3, [r3, #0]
 801abe2:	4013      	ands	r3, r2
 801abe4:	4a2d      	ldr	r2, [pc, #180]	; (801ac9c <vTaskSuspend+0x10c>)
 801abe6:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801abe8:	68fb      	ldr	r3, [r7, #12]
 801abea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801abec:	2b00      	cmp	r3, #0
 801abee:	d004      	beq.n	801abfa <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801abf0:	68fb      	ldr	r3, [r7, #12]
 801abf2:	3318      	adds	r3, #24
 801abf4:	4618      	mov	r0, r3
 801abf6:	f7fe fe25 	bl	8019844 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 801abfa:	68fb      	ldr	r3, [r7, #12]
 801abfc:	3304      	adds	r3, #4
 801abfe:	4619      	mov	r1, r3
 801ac00:	4827      	ldr	r0, [pc, #156]	; (801aca0 <vTaskSuspend+0x110>)
 801ac02:	f7fe fdc2 	bl	801978a <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 801ac06:	68fb      	ldr	r3, [r7, #12]
 801ac08:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 801ac0c:	b2db      	uxtb	r3, r3
 801ac0e:	2b01      	cmp	r3, #1
 801ac10:	d103      	bne.n	801ac1a <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801ac12:	68fb      	ldr	r3, [r7, #12]
 801ac14:	2200      	movs	r2, #0
 801ac16:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 801ac1a:	f001 fceb 	bl	801c5f4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 801ac1e:	4b21      	ldr	r3, [pc, #132]	; (801aca4 <vTaskSuspend+0x114>)
 801ac20:	681b      	ldr	r3, [r3, #0]
 801ac22:	2b00      	cmp	r3, #0
 801ac24:	d005      	beq.n	801ac32 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 801ac26:	f001 fcb5 	bl	801c594 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 801ac2a:	f000 fd79 	bl	801b720 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 801ac2e:	f001 fce1 	bl	801c5f4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 801ac32:	4b18      	ldr	r3, [pc, #96]	; (801ac94 <vTaskSuspend+0x104>)
 801ac34:	681b      	ldr	r3, [r3, #0]
 801ac36:	68fa      	ldr	r2, [r7, #12]
 801ac38:	429a      	cmp	r2, r3
 801ac3a:	d127      	bne.n	801ac8c <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 801ac3c:	4b19      	ldr	r3, [pc, #100]	; (801aca4 <vTaskSuspend+0x114>)
 801ac3e:	681b      	ldr	r3, [r3, #0]
 801ac40:	2b00      	cmp	r3, #0
 801ac42:	d017      	beq.n	801ac74 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 801ac44:	4b18      	ldr	r3, [pc, #96]	; (801aca8 <vTaskSuspend+0x118>)
 801ac46:	681b      	ldr	r3, [r3, #0]
 801ac48:	2b00      	cmp	r3, #0
 801ac4a:	d00a      	beq.n	801ac62 <vTaskSuspend+0xd2>
	__asm volatile
 801ac4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ac50:	f383 8811 	msr	BASEPRI, r3
 801ac54:	f3bf 8f6f 	isb	sy
 801ac58:	f3bf 8f4f 	dsb	sy
 801ac5c:	60bb      	str	r3, [r7, #8]
}
 801ac5e:	bf00      	nop
 801ac60:	e7fe      	b.n	801ac60 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 801ac62:	4b12      	ldr	r3, [pc, #72]	; (801acac <vTaskSuspend+0x11c>)
 801ac64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801ac68:	601a      	str	r2, [r3, #0]
 801ac6a:	f3bf 8f4f 	dsb	sy
 801ac6e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801ac72:	e00b      	b.n	801ac8c <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 801ac74:	4b0a      	ldr	r3, [pc, #40]	; (801aca0 <vTaskSuspend+0x110>)
 801ac76:	681a      	ldr	r2, [r3, #0]
 801ac78:	4b0d      	ldr	r3, [pc, #52]	; (801acb0 <vTaskSuspend+0x120>)
 801ac7a:	681b      	ldr	r3, [r3, #0]
 801ac7c:	429a      	cmp	r2, r3
 801ac7e:	d103      	bne.n	801ac88 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 801ac80:	4b04      	ldr	r3, [pc, #16]	; (801ac94 <vTaskSuspend+0x104>)
 801ac82:	2200      	movs	r2, #0
 801ac84:	601a      	str	r2, [r3, #0]
	}
 801ac86:	e001      	b.n	801ac8c <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 801ac88:	f000 faf8 	bl	801b27c <vTaskSwitchContext>
	}
 801ac8c:	bf00      	nop
 801ac8e:	3710      	adds	r7, #16
 801ac90:	46bd      	mov	sp, r7
 801ac92:	bd80      	pop	{r7, pc}
 801ac94:	20000890 	.word	0x20000890
 801ac98:	20000894 	.word	0x20000894
 801ac9c:	20000998 	.word	0x20000998
 801aca0:	2000097c 	.word	0x2000097c
 801aca4:	2000099c 	.word	0x2000099c
 801aca8:	200009b8 	.word	0x200009b8
 801acac:	e000ed04 	.word	0xe000ed04
 801acb0:	20000990 	.word	0x20000990

0801acb4 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 801acb4:	b480      	push	{r7}
 801acb6:	b087      	sub	sp, #28
 801acb8:	af00      	add	r7, sp, #0
 801acba:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 801acbc:	2300      	movs	r3, #0
 801acbe:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 801acc0:	687b      	ldr	r3, [r7, #4]
 801acc2:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 801acc4:	687b      	ldr	r3, [r7, #4]
 801acc6:	2b00      	cmp	r3, #0
 801acc8:	d10a      	bne.n	801ace0 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 801acca:	f04f 0350 	mov.w	r3, #80	; 0x50
 801acce:	f383 8811 	msr	BASEPRI, r3
 801acd2:	f3bf 8f6f 	isb	sy
 801acd6:	f3bf 8f4f 	dsb	sy
 801acda:	60fb      	str	r3, [r7, #12]
}
 801acdc:	bf00      	nop
 801acde:	e7fe      	b.n	801acde <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 801ace0:	693b      	ldr	r3, [r7, #16]
 801ace2:	695b      	ldr	r3, [r3, #20]
 801ace4:	4a0a      	ldr	r2, [pc, #40]	; (801ad10 <prvTaskIsTaskSuspended+0x5c>)
 801ace6:	4293      	cmp	r3, r2
 801ace8:	d10a      	bne.n	801ad00 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 801acea:	693b      	ldr	r3, [r7, #16]
 801acec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801acee:	4a09      	ldr	r2, [pc, #36]	; (801ad14 <prvTaskIsTaskSuspended+0x60>)
 801acf0:	4293      	cmp	r3, r2
 801acf2:	d005      	beq.n	801ad00 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 801acf4:	693b      	ldr	r3, [r7, #16]
 801acf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801acf8:	2b00      	cmp	r3, #0
 801acfa:	d101      	bne.n	801ad00 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 801acfc:	2301      	movs	r3, #1
 801acfe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801ad00:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 801ad02:	4618      	mov	r0, r3
 801ad04:	371c      	adds	r7, #28
 801ad06:	46bd      	mov	sp, r7
 801ad08:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad0c:	4770      	bx	lr
 801ad0e:	bf00      	nop
 801ad10:	2000097c 	.word	0x2000097c
 801ad14:	20000950 	.word	0x20000950

0801ad18 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 801ad18:	b580      	push	{r7, lr}
 801ad1a:	b084      	sub	sp, #16
 801ad1c:	af00      	add	r7, sp, #0
 801ad1e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 801ad20:	687b      	ldr	r3, [r7, #4]
 801ad22:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 801ad24:	687b      	ldr	r3, [r7, #4]
 801ad26:	2b00      	cmp	r3, #0
 801ad28:	d10a      	bne.n	801ad40 <vTaskResume+0x28>
	__asm volatile
 801ad2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ad2e:	f383 8811 	msr	BASEPRI, r3
 801ad32:	f3bf 8f6f 	isb	sy
 801ad36:	f3bf 8f4f 	dsb	sy
 801ad3a:	60bb      	str	r3, [r7, #8]
}
 801ad3c:	bf00      	nop
 801ad3e:	e7fe      	b.n	801ad3e <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 801ad40:	4b20      	ldr	r3, [pc, #128]	; (801adc4 <vTaskResume+0xac>)
 801ad42:	681b      	ldr	r3, [r3, #0]
 801ad44:	68fa      	ldr	r2, [r7, #12]
 801ad46:	429a      	cmp	r2, r3
 801ad48:	d037      	beq.n	801adba <vTaskResume+0xa2>
 801ad4a:	68fb      	ldr	r3, [r7, #12]
 801ad4c:	2b00      	cmp	r3, #0
 801ad4e:	d034      	beq.n	801adba <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 801ad50:	f001 fc20 	bl	801c594 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 801ad54:	68f8      	ldr	r0, [r7, #12]
 801ad56:	f7ff ffad 	bl	801acb4 <prvTaskIsTaskSuspended>
 801ad5a:	4603      	mov	r3, r0
 801ad5c:	2b00      	cmp	r3, #0
 801ad5e:	d02a      	beq.n	801adb6 <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 801ad60:	68fb      	ldr	r3, [r7, #12]
 801ad62:	3304      	adds	r3, #4
 801ad64:	4618      	mov	r0, r3
 801ad66:	f7fe fd6d 	bl	8019844 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801ad6a:	68fb      	ldr	r3, [r7, #12]
 801ad6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ad6e:	2201      	movs	r2, #1
 801ad70:	409a      	lsls	r2, r3
 801ad72:	4b15      	ldr	r3, [pc, #84]	; (801adc8 <vTaskResume+0xb0>)
 801ad74:	681b      	ldr	r3, [r3, #0]
 801ad76:	4313      	orrs	r3, r2
 801ad78:	4a13      	ldr	r2, [pc, #76]	; (801adc8 <vTaskResume+0xb0>)
 801ad7a:	6013      	str	r3, [r2, #0]
 801ad7c:	68fb      	ldr	r3, [r7, #12]
 801ad7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ad80:	4613      	mov	r3, r2
 801ad82:	009b      	lsls	r3, r3, #2
 801ad84:	4413      	add	r3, r2
 801ad86:	009b      	lsls	r3, r3, #2
 801ad88:	4a10      	ldr	r2, [pc, #64]	; (801adcc <vTaskResume+0xb4>)
 801ad8a:	441a      	add	r2, r3
 801ad8c:	68fb      	ldr	r3, [r7, #12]
 801ad8e:	3304      	adds	r3, #4
 801ad90:	4619      	mov	r1, r3
 801ad92:	4610      	mov	r0, r2
 801ad94:	f7fe fcf9 	bl	801978a <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801ad98:	68fb      	ldr	r3, [r7, #12]
 801ad9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ad9c:	4b09      	ldr	r3, [pc, #36]	; (801adc4 <vTaskResume+0xac>)
 801ad9e:	681b      	ldr	r3, [r3, #0]
 801ada0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ada2:	429a      	cmp	r2, r3
 801ada4:	d307      	bcc.n	801adb6 <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 801ada6:	4b0a      	ldr	r3, [pc, #40]	; (801add0 <vTaskResume+0xb8>)
 801ada8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801adac:	601a      	str	r2, [r3, #0]
 801adae:	f3bf 8f4f 	dsb	sy
 801adb2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 801adb6:	f001 fc1d 	bl	801c5f4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801adba:	bf00      	nop
 801adbc:	3710      	adds	r7, #16
 801adbe:	46bd      	mov	sp, r7
 801adc0:	bd80      	pop	{r7, pc}
 801adc2:	bf00      	nop
 801adc4:	20000890 	.word	0x20000890
 801adc8:	20000998 	.word	0x20000998
 801adcc:	20000894 	.word	0x20000894
 801add0:	e000ed04 	.word	0xe000ed04

0801add4 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 801add4:	b580      	push	{r7, lr}
 801add6:	b08a      	sub	sp, #40	; 0x28
 801add8:	af00      	add	r7, sp, #0
 801adda:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 801addc:	2300      	movs	r3, #0
 801adde:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 801ade0:	687b      	ldr	r3, [r7, #4]
 801ade2:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 801ade4:	687b      	ldr	r3, [r7, #4]
 801ade6:	2b00      	cmp	r3, #0
 801ade8:	d10a      	bne.n	801ae00 <xTaskResumeFromISR+0x2c>
	__asm volatile
 801adea:	f04f 0350 	mov.w	r3, #80	; 0x50
 801adee:	f383 8811 	msr	BASEPRI, r3
 801adf2:	f3bf 8f6f 	isb	sy
 801adf6:	f3bf 8f4f 	dsb	sy
 801adfa:	61bb      	str	r3, [r7, #24]
}
 801adfc:	bf00      	nop
 801adfe:	e7fe      	b.n	801adfe <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801ae00:	f001 fcaa 	bl	801c758 <vPortValidateInterruptPriority>
	__asm volatile
 801ae04:	f3ef 8211 	mrs	r2, BASEPRI
 801ae08:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ae0c:	f383 8811 	msr	BASEPRI, r3
 801ae10:	f3bf 8f6f 	isb	sy
 801ae14:	f3bf 8f4f 	dsb	sy
 801ae18:	617a      	str	r2, [r7, #20]
 801ae1a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801ae1c:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801ae1e:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 801ae20:	6a38      	ldr	r0, [r7, #32]
 801ae22:	f7ff ff47 	bl	801acb4 <prvTaskIsTaskSuspended>
 801ae26:	4603      	mov	r3, r0
 801ae28:	2b00      	cmp	r3, #0
 801ae2a:	d02f      	beq.n	801ae8c <xTaskResumeFromISR+0xb8>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801ae2c:	4b1d      	ldr	r3, [pc, #116]	; (801aea4 <xTaskResumeFromISR+0xd0>)
 801ae2e:	681b      	ldr	r3, [r3, #0]
 801ae30:	2b00      	cmp	r3, #0
 801ae32:	d125      	bne.n	801ae80 <xTaskResumeFromISR+0xac>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801ae34:	6a3b      	ldr	r3, [r7, #32]
 801ae36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ae38:	4b1b      	ldr	r3, [pc, #108]	; (801aea8 <xTaskResumeFromISR+0xd4>)
 801ae3a:	681b      	ldr	r3, [r3, #0]
 801ae3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ae3e:	429a      	cmp	r2, r3
 801ae40:	d301      	bcc.n	801ae46 <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 801ae42:	2301      	movs	r3, #1
 801ae44:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801ae46:	6a3b      	ldr	r3, [r7, #32]
 801ae48:	3304      	adds	r3, #4
 801ae4a:	4618      	mov	r0, r3
 801ae4c:	f7fe fcfa 	bl	8019844 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801ae50:	6a3b      	ldr	r3, [r7, #32]
 801ae52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ae54:	2201      	movs	r2, #1
 801ae56:	409a      	lsls	r2, r3
 801ae58:	4b14      	ldr	r3, [pc, #80]	; (801aeac <xTaskResumeFromISR+0xd8>)
 801ae5a:	681b      	ldr	r3, [r3, #0]
 801ae5c:	4313      	orrs	r3, r2
 801ae5e:	4a13      	ldr	r2, [pc, #76]	; (801aeac <xTaskResumeFromISR+0xd8>)
 801ae60:	6013      	str	r3, [r2, #0]
 801ae62:	6a3b      	ldr	r3, [r7, #32]
 801ae64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ae66:	4613      	mov	r3, r2
 801ae68:	009b      	lsls	r3, r3, #2
 801ae6a:	4413      	add	r3, r2
 801ae6c:	009b      	lsls	r3, r3, #2
 801ae6e:	4a10      	ldr	r2, [pc, #64]	; (801aeb0 <xTaskResumeFromISR+0xdc>)
 801ae70:	441a      	add	r2, r3
 801ae72:	6a3b      	ldr	r3, [r7, #32]
 801ae74:	3304      	adds	r3, #4
 801ae76:	4619      	mov	r1, r3
 801ae78:	4610      	mov	r0, r2
 801ae7a:	f7fe fc86 	bl	801978a <vListInsertEnd>
 801ae7e:	e005      	b.n	801ae8c <xTaskResumeFromISR+0xb8>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 801ae80:	6a3b      	ldr	r3, [r7, #32]
 801ae82:	3318      	adds	r3, #24
 801ae84:	4619      	mov	r1, r3
 801ae86:	480b      	ldr	r0, [pc, #44]	; (801aeb4 <xTaskResumeFromISR+0xe0>)
 801ae88:	f7fe fc7f 	bl	801978a <vListInsertEnd>
 801ae8c:	69fb      	ldr	r3, [r7, #28]
 801ae8e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 801ae90:	68fb      	ldr	r3, [r7, #12]
 801ae92:	f383 8811 	msr	BASEPRI, r3
}
 801ae96:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 801ae98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 801ae9a:	4618      	mov	r0, r3
 801ae9c:	3728      	adds	r7, #40	; 0x28
 801ae9e:	46bd      	mov	sp, r7
 801aea0:	bd80      	pop	{r7, pc}
 801aea2:	bf00      	nop
 801aea4:	200009b8 	.word	0x200009b8
 801aea8:	20000890 	.word	0x20000890
 801aeac:	20000998 	.word	0x20000998
 801aeb0:	20000894 	.word	0x20000894
 801aeb4:	20000950 	.word	0x20000950

0801aeb8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801aeb8:	b580      	push	{r7, lr}
 801aeba:	b08a      	sub	sp, #40	; 0x28
 801aebc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801aebe:	2300      	movs	r3, #0
 801aec0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801aec2:	2300      	movs	r3, #0
 801aec4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801aec6:	463a      	mov	r2, r7
 801aec8:	1d39      	adds	r1, r7, #4
 801aeca:	f107 0308 	add.w	r3, r7, #8
 801aece:	4618      	mov	r0, r3
 801aed0:	f7f5 ffbe 	bl	8010e50 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801aed4:	6839      	ldr	r1, [r7, #0]
 801aed6:	687b      	ldr	r3, [r7, #4]
 801aed8:	68ba      	ldr	r2, [r7, #8]
 801aeda:	9202      	str	r2, [sp, #8]
 801aedc:	9301      	str	r3, [sp, #4]
 801aede:	2300      	movs	r3, #0
 801aee0:	9300      	str	r3, [sp, #0]
 801aee2:	2300      	movs	r3, #0
 801aee4:	460a      	mov	r2, r1
 801aee6:	4924      	ldr	r1, [pc, #144]	; (801af78 <vTaskStartScheduler+0xc0>)
 801aee8:	4824      	ldr	r0, [pc, #144]	; (801af7c <vTaskStartScheduler+0xc4>)
 801aeea:	f7ff fc73 	bl	801a7d4 <xTaskCreateStatic>
 801aeee:	4603      	mov	r3, r0
 801aef0:	4a23      	ldr	r2, [pc, #140]	; (801af80 <vTaskStartScheduler+0xc8>)
 801aef2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801aef4:	4b22      	ldr	r3, [pc, #136]	; (801af80 <vTaskStartScheduler+0xc8>)
 801aef6:	681b      	ldr	r3, [r3, #0]
 801aef8:	2b00      	cmp	r3, #0
 801aefa:	d002      	beq.n	801af02 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801aefc:	2301      	movs	r3, #1
 801aefe:	617b      	str	r3, [r7, #20]
 801af00:	e001      	b.n	801af06 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801af02:	2300      	movs	r3, #0
 801af04:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801af06:	697b      	ldr	r3, [r7, #20]
 801af08:	2b01      	cmp	r3, #1
 801af0a:	d102      	bne.n	801af12 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801af0c:	f000 fe4a 	bl	801bba4 <xTimerCreateTimerTask>
 801af10:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801af12:	697b      	ldr	r3, [r7, #20]
 801af14:	2b01      	cmp	r3, #1
 801af16:	d11b      	bne.n	801af50 <vTaskStartScheduler+0x98>
	__asm volatile
 801af18:	f04f 0350 	mov.w	r3, #80	; 0x50
 801af1c:	f383 8811 	msr	BASEPRI, r3
 801af20:	f3bf 8f6f 	isb	sy
 801af24:	f3bf 8f4f 	dsb	sy
 801af28:	613b      	str	r3, [r7, #16]
}
 801af2a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801af2c:	4b15      	ldr	r3, [pc, #84]	; (801af84 <vTaskStartScheduler+0xcc>)
 801af2e:	681b      	ldr	r3, [r3, #0]
 801af30:	334c      	adds	r3, #76	; 0x4c
 801af32:	4a15      	ldr	r2, [pc, #84]	; (801af88 <vTaskStartScheduler+0xd0>)
 801af34:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801af36:	4b15      	ldr	r3, [pc, #84]	; (801af8c <vTaskStartScheduler+0xd4>)
 801af38:	f04f 32ff 	mov.w	r2, #4294967295
 801af3c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801af3e:	4b14      	ldr	r3, [pc, #80]	; (801af90 <vTaskStartScheduler+0xd8>)
 801af40:	2201      	movs	r2, #1
 801af42:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801af44:	4b13      	ldr	r3, [pc, #76]	; (801af94 <vTaskStartScheduler+0xdc>)
 801af46:	2200      	movs	r2, #0
 801af48:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801af4a:	f001 fa81 	bl	801c450 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801af4e:	e00e      	b.n	801af6e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801af50:	697b      	ldr	r3, [r7, #20]
 801af52:	f1b3 3fff 	cmp.w	r3, #4294967295
 801af56:	d10a      	bne.n	801af6e <vTaskStartScheduler+0xb6>
	__asm volatile
 801af58:	f04f 0350 	mov.w	r3, #80	; 0x50
 801af5c:	f383 8811 	msr	BASEPRI, r3
 801af60:	f3bf 8f6f 	isb	sy
 801af64:	f3bf 8f4f 	dsb	sy
 801af68:	60fb      	str	r3, [r7, #12]
}
 801af6a:	bf00      	nop
 801af6c:	e7fe      	b.n	801af6c <vTaskStartScheduler+0xb4>
}
 801af6e:	bf00      	nop
 801af70:	3718      	adds	r7, #24
 801af72:	46bd      	mov	sp, r7
 801af74:	bd80      	pop	{r7, pc}
 801af76:	bf00      	nop
 801af78:	0802fd28 	.word	0x0802fd28
 801af7c:	0801b5ad 	.word	0x0801b5ad
 801af80:	200009b4 	.word	0x200009b4
 801af84:	20000890 	.word	0x20000890
 801af88:	20000078 	.word	0x20000078
 801af8c:	200009b0 	.word	0x200009b0
 801af90:	2000099c 	.word	0x2000099c
 801af94:	20000994 	.word	0x20000994

0801af98 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801af98:	b480      	push	{r7}
 801af9a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 801af9c:	4b04      	ldr	r3, [pc, #16]	; (801afb0 <vTaskSuspendAll+0x18>)
 801af9e:	681b      	ldr	r3, [r3, #0]
 801afa0:	3301      	adds	r3, #1
 801afa2:	4a03      	ldr	r2, [pc, #12]	; (801afb0 <vTaskSuspendAll+0x18>)
 801afa4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801afa6:	bf00      	nop
 801afa8:	46bd      	mov	sp, r7
 801afaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801afae:	4770      	bx	lr
 801afb0:	200009b8 	.word	0x200009b8

0801afb4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801afb4:	b580      	push	{r7, lr}
 801afb6:	b084      	sub	sp, #16
 801afb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801afba:	2300      	movs	r3, #0
 801afbc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801afbe:	2300      	movs	r3, #0
 801afc0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801afc2:	4b41      	ldr	r3, [pc, #260]	; (801b0c8 <xTaskResumeAll+0x114>)
 801afc4:	681b      	ldr	r3, [r3, #0]
 801afc6:	2b00      	cmp	r3, #0
 801afc8:	d10a      	bne.n	801afe0 <xTaskResumeAll+0x2c>
	__asm volatile
 801afca:	f04f 0350 	mov.w	r3, #80	; 0x50
 801afce:	f383 8811 	msr	BASEPRI, r3
 801afd2:	f3bf 8f6f 	isb	sy
 801afd6:	f3bf 8f4f 	dsb	sy
 801afda:	603b      	str	r3, [r7, #0]
}
 801afdc:	bf00      	nop
 801afde:	e7fe      	b.n	801afde <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801afe0:	f001 fad8 	bl	801c594 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801afe4:	4b38      	ldr	r3, [pc, #224]	; (801b0c8 <xTaskResumeAll+0x114>)
 801afe6:	681b      	ldr	r3, [r3, #0]
 801afe8:	3b01      	subs	r3, #1
 801afea:	4a37      	ldr	r2, [pc, #220]	; (801b0c8 <xTaskResumeAll+0x114>)
 801afec:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801afee:	4b36      	ldr	r3, [pc, #216]	; (801b0c8 <xTaskResumeAll+0x114>)
 801aff0:	681b      	ldr	r3, [r3, #0]
 801aff2:	2b00      	cmp	r3, #0
 801aff4:	d161      	bne.n	801b0ba <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801aff6:	4b35      	ldr	r3, [pc, #212]	; (801b0cc <xTaskResumeAll+0x118>)
 801aff8:	681b      	ldr	r3, [r3, #0]
 801affa:	2b00      	cmp	r3, #0
 801affc:	d05d      	beq.n	801b0ba <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801affe:	e02e      	b.n	801b05e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b000:	4b33      	ldr	r3, [pc, #204]	; (801b0d0 <xTaskResumeAll+0x11c>)
 801b002:	68db      	ldr	r3, [r3, #12]
 801b004:	68db      	ldr	r3, [r3, #12]
 801b006:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801b008:	68fb      	ldr	r3, [r7, #12]
 801b00a:	3318      	adds	r3, #24
 801b00c:	4618      	mov	r0, r3
 801b00e:	f7fe fc19 	bl	8019844 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801b012:	68fb      	ldr	r3, [r7, #12]
 801b014:	3304      	adds	r3, #4
 801b016:	4618      	mov	r0, r3
 801b018:	f7fe fc14 	bl	8019844 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801b01c:	68fb      	ldr	r3, [r7, #12]
 801b01e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b020:	2201      	movs	r2, #1
 801b022:	409a      	lsls	r2, r3
 801b024:	4b2b      	ldr	r3, [pc, #172]	; (801b0d4 <xTaskResumeAll+0x120>)
 801b026:	681b      	ldr	r3, [r3, #0]
 801b028:	4313      	orrs	r3, r2
 801b02a:	4a2a      	ldr	r2, [pc, #168]	; (801b0d4 <xTaskResumeAll+0x120>)
 801b02c:	6013      	str	r3, [r2, #0]
 801b02e:	68fb      	ldr	r3, [r7, #12]
 801b030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b032:	4613      	mov	r3, r2
 801b034:	009b      	lsls	r3, r3, #2
 801b036:	4413      	add	r3, r2
 801b038:	009b      	lsls	r3, r3, #2
 801b03a:	4a27      	ldr	r2, [pc, #156]	; (801b0d8 <xTaskResumeAll+0x124>)
 801b03c:	441a      	add	r2, r3
 801b03e:	68fb      	ldr	r3, [r7, #12]
 801b040:	3304      	adds	r3, #4
 801b042:	4619      	mov	r1, r3
 801b044:	4610      	mov	r0, r2
 801b046:	f7fe fba0 	bl	801978a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801b04a:	68fb      	ldr	r3, [r7, #12]
 801b04c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b04e:	4b23      	ldr	r3, [pc, #140]	; (801b0dc <xTaskResumeAll+0x128>)
 801b050:	681b      	ldr	r3, [r3, #0]
 801b052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b054:	429a      	cmp	r2, r3
 801b056:	d302      	bcc.n	801b05e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 801b058:	4b21      	ldr	r3, [pc, #132]	; (801b0e0 <xTaskResumeAll+0x12c>)
 801b05a:	2201      	movs	r2, #1
 801b05c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801b05e:	4b1c      	ldr	r3, [pc, #112]	; (801b0d0 <xTaskResumeAll+0x11c>)
 801b060:	681b      	ldr	r3, [r3, #0]
 801b062:	2b00      	cmp	r3, #0
 801b064:	d1cc      	bne.n	801b000 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801b066:	68fb      	ldr	r3, [r7, #12]
 801b068:	2b00      	cmp	r3, #0
 801b06a:	d001      	beq.n	801b070 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801b06c:	f000 fb58 	bl	801b720 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801b070:	4b1c      	ldr	r3, [pc, #112]	; (801b0e4 <xTaskResumeAll+0x130>)
 801b072:	681b      	ldr	r3, [r3, #0]
 801b074:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801b076:	687b      	ldr	r3, [r7, #4]
 801b078:	2b00      	cmp	r3, #0
 801b07a:	d010      	beq.n	801b09e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801b07c:	f000 f846 	bl	801b10c <xTaskIncrementTick>
 801b080:	4603      	mov	r3, r0
 801b082:	2b00      	cmp	r3, #0
 801b084:	d002      	beq.n	801b08c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 801b086:	4b16      	ldr	r3, [pc, #88]	; (801b0e0 <xTaskResumeAll+0x12c>)
 801b088:	2201      	movs	r2, #1
 801b08a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801b08c:	687b      	ldr	r3, [r7, #4]
 801b08e:	3b01      	subs	r3, #1
 801b090:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801b092:	687b      	ldr	r3, [r7, #4]
 801b094:	2b00      	cmp	r3, #0
 801b096:	d1f1      	bne.n	801b07c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 801b098:	4b12      	ldr	r3, [pc, #72]	; (801b0e4 <xTaskResumeAll+0x130>)
 801b09a:	2200      	movs	r2, #0
 801b09c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801b09e:	4b10      	ldr	r3, [pc, #64]	; (801b0e0 <xTaskResumeAll+0x12c>)
 801b0a0:	681b      	ldr	r3, [r3, #0]
 801b0a2:	2b00      	cmp	r3, #0
 801b0a4:	d009      	beq.n	801b0ba <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801b0a6:	2301      	movs	r3, #1
 801b0a8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801b0aa:	4b0f      	ldr	r3, [pc, #60]	; (801b0e8 <xTaskResumeAll+0x134>)
 801b0ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801b0b0:	601a      	str	r2, [r3, #0]
 801b0b2:	f3bf 8f4f 	dsb	sy
 801b0b6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801b0ba:	f001 fa9b 	bl	801c5f4 <vPortExitCritical>

	return xAlreadyYielded;
 801b0be:	68bb      	ldr	r3, [r7, #8]
}
 801b0c0:	4618      	mov	r0, r3
 801b0c2:	3710      	adds	r7, #16
 801b0c4:	46bd      	mov	sp, r7
 801b0c6:	bd80      	pop	{r7, pc}
 801b0c8:	200009b8 	.word	0x200009b8
 801b0cc:	20000990 	.word	0x20000990
 801b0d0:	20000950 	.word	0x20000950
 801b0d4:	20000998 	.word	0x20000998
 801b0d8:	20000894 	.word	0x20000894
 801b0dc:	20000890 	.word	0x20000890
 801b0e0:	200009a4 	.word	0x200009a4
 801b0e4:	200009a0 	.word	0x200009a0
 801b0e8:	e000ed04 	.word	0xe000ed04

0801b0ec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801b0ec:	b480      	push	{r7}
 801b0ee:	b083      	sub	sp, #12
 801b0f0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801b0f2:	4b05      	ldr	r3, [pc, #20]	; (801b108 <xTaskGetTickCount+0x1c>)
 801b0f4:	681b      	ldr	r3, [r3, #0]
 801b0f6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801b0f8:	687b      	ldr	r3, [r7, #4]
}
 801b0fa:	4618      	mov	r0, r3
 801b0fc:	370c      	adds	r7, #12
 801b0fe:	46bd      	mov	sp, r7
 801b100:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b104:	4770      	bx	lr
 801b106:	bf00      	nop
 801b108:	20000994 	.word	0x20000994

0801b10c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801b10c:	b580      	push	{r7, lr}
 801b10e:	b086      	sub	sp, #24
 801b110:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801b112:	2300      	movs	r3, #0
 801b114:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801b116:	4b4e      	ldr	r3, [pc, #312]	; (801b250 <xTaskIncrementTick+0x144>)
 801b118:	681b      	ldr	r3, [r3, #0]
 801b11a:	2b00      	cmp	r3, #0
 801b11c:	f040 808e 	bne.w	801b23c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801b120:	4b4c      	ldr	r3, [pc, #304]	; (801b254 <xTaskIncrementTick+0x148>)
 801b122:	681b      	ldr	r3, [r3, #0]
 801b124:	3301      	adds	r3, #1
 801b126:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801b128:	4a4a      	ldr	r2, [pc, #296]	; (801b254 <xTaskIncrementTick+0x148>)
 801b12a:	693b      	ldr	r3, [r7, #16]
 801b12c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801b12e:	693b      	ldr	r3, [r7, #16]
 801b130:	2b00      	cmp	r3, #0
 801b132:	d120      	bne.n	801b176 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 801b134:	4b48      	ldr	r3, [pc, #288]	; (801b258 <xTaskIncrementTick+0x14c>)
 801b136:	681b      	ldr	r3, [r3, #0]
 801b138:	681b      	ldr	r3, [r3, #0]
 801b13a:	2b00      	cmp	r3, #0
 801b13c:	d00a      	beq.n	801b154 <xTaskIncrementTick+0x48>
	__asm volatile
 801b13e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b142:	f383 8811 	msr	BASEPRI, r3
 801b146:	f3bf 8f6f 	isb	sy
 801b14a:	f3bf 8f4f 	dsb	sy
 801b14e:	603b      	str	r3, [r7, #0]
}
 801b150:	bf00      	nop
 801b152:	e7fe      	b.n	801b152 <xTaskIncrementTick+0x46>
 801b154:	4b40      	ldr	r3, [pc, #256]	; (801b258 <xTaskIncrementTick+0x14c>)
 801b156:	681b      	ldr	r3, [r3, #0]
 801b158:	60fb      	str	r3, [r7, #12]
 801b15a:	4b40      	ldr	r3, [pc, #256]	; (801b25c <xTaskIncrementTick+0x150>)
 801b15c:	681b      	ldr	r3, [r3, #0]
 801b15e:	4a3e      	ldr	r2, [pc, #248]	; (801b258 <xTaskIncrementTick+0x14c>)
 801b160:	6013      	str	r3, [r2, #0]
 801b162:	4a3e      	ldr	r2, [pc, #248]	; (801b25c <xTaskIncrementTick+0x150>)
 801b164:	68fb      	ldr	r3, [r7, #12]
 801b166:	6013      	str	r3, [r2, #0]
 801b168:	4b3d      	ldr	r3, [pc, #244]	; (801b260 <xTaskIncrementTick+0x154>)
 801b16a:	681b      	ldr	r3, [r3, #0]
 801b16c:	3301      	adds	r3, #1
 801b16e:	4a3c      	ldr	r2, [pc, #240]	; (801b260 <xTaskIncrementTick+0x154>)
 801b170:	6013      	str	r3, [r2, #0]
 801b172:	f000 fad5 	bl	801b720 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801b176:	4b3b      	ldr	r3, [pc, #236]	; (801b264 <xTaskIncrementTick+0x158>)
 801b178:	681b      	ldr	r3, [r3, #0]
 801b17a:	693a      	ldr	r2, [r7, #16]
 801b17c:	429a      	cmp	r2, r3
 801b17e:	d348      	bcc.n	801b212 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801b180:	4b35      	ldr	r3, [pc, #212]	; (801b258 <xTaskIncrementTick+0x14c>)
 801b182:	681b      	ldr	r3, [r3, #0]
 801b184:	681b      	ldr	r3, [r3, #0]
 801b186:	2b00      	cmp	r3, #0
 801b188:	d104      	bne.n	801b194 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801b18a:	4b36      	ldr	r3, [pc, #216]	; (801b264 <xTaskIncrementTick+0x158>)
 801b18c:	f04f 32ff 	mov.w	r2, #4294967295
 801b190:	601a      	str	r2, [r3, #0]
					break;
 801b192:	e03e      	b.n	801b212 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b194:	4b30      	ldr	r3, [pc, #192]	; (801b258 <xTaskIncrementTick+0x14c>)
 801b196:	681b      	ldr	r3, [r3, #0]
 801b198:	68db      	ldr	r3, [r3, #12]
 801b19a:	68db      	ldr	r3, [r3, #12]
 801b19c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801b19e:	68bb      	ldr	r3, [r7, #8]
 801b1a0:	685b      	ldr	r3, [r3, #4]
 801b1a2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801b1a4:	693a      	ldr	r2, [r7, #16]
 801b1a6:	687b      	ldr	r3, [r7, #4]
 801b1a8:	429a      	cmp	r2, r3
 801b1aa:	d203      	bcs.n	801b1b4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801b1ac:	4a2d      	ldr	r2, [pc, #180]	; (801b264 <xTaskIncrementTick+0x158>)
 801b1ae:	687b      	ldr	r3, [r7, #4]
 801b1b0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801b1b2:	e02e      	b.n	801b212 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801b1b4:	68bb      	ldr	r3, [r7, #8]
 801b1b6:	3304      	adds	r3, #4
 801b1b8:	4618      	mov	r0, r3
 801b1ba:	f7fe fb43 	bl	8019844 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801b1be:	68bb      	ldr	r3, [r7, #8]
 801b1c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b1c2:	2b00      	cmp	r3, #0
 801b1c4:	d004      	beq.n	801b1d0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801b1c6:	68bb      	ldr	r3, [r7, #8]
 801b1c8:	3318      	adds	r3, #24
 801b1ca:	4618      	mov	r0, r3
 801b1cc:	f7fe fb3a 	bl	8019844 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801b1d0:	68bb      	ldr	r3, [r7, #8]
 801b1d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b1d4:	2201      	movs	r2, #1
 801b1d6:	409a      	lsls	r2, r3
 801b1d8:	4b23      	ldr	r3, [pc, #140]	; (801b268 <xTaskIncrementTick+0x15c>)
 801b1da:	681b      	ldr	r3, [r3, #0]
 801b1dc:	4313      	orrs	r3, r2
 801b1de:	4a22      	ldr	r2, [pc, #136]	; (801b268 <xTaskIncrementTick+0x15c>)
 801b1e0:	6013      	str	r3, [r2, #0]
 801b1e2:	68bb      	ldr	r3, [r7, #8]
 801b1e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b1e6:	4613      	mov	r3, r2
 801b1e8:	009b      	lsls	r3, r3, #2
 801b1ea:	4413      	add	r3, r2
 801b1ec:	009b      	lsls	r3, r3, #2
 801b1ee:	4a1f      	ldr	r2, [pc, #124]	; (801b26c <xTaskIncrementTick+0x160>)
 801b1f0:	441a      	add	r2, r3
 801b1f2:	68bb      	ldr	r3, [r7, #8]
 801b1f4:	3304      	adds	r3, #4
 801b1f6:	4619      	mov	r1, r3
 801b1f8:	4610      	mov	r0, r2
 801b1fa:	f7fe fac6 	bl	801978a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801b1fe:	68bb      	ldr	r3, [r7, #8]
 801b200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b202:	4b1b      	ldr	r3, [pc, #108]	; (801b270 <xTaskIncrementTick+0x164>)
 801b204:	681b      	ldr	r3, [r3, #0]
 801b206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b208:	429a      	cmp	r2, r3
 801b20a:	d3b9      	bcc.n	801b180 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 801b20c:	2301      	movs	r3, #1
 801b20e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801b210:	e7b6      	b.n	801b180 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801b212:	4b17      	ldr	r3, [pc, #92]	; (801b270 <xTaskIncrementTick+0x164>)
 801b214:	681b      	ldr	r3, [r3, #0]
 801b216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b218:	4914      	ldr	r1, [pc, #80]	; (801b26c <xTaskIncrementTick+0x160>)
 801b21a:	4613      	mov	r3, r2
 801b21c:	009b      	lsls	r3, r3, #2
 801b21e:	4413      	add	r3, r2
 801b220:	009b      	lsls	r3, r3, #2
 801b222:	440b      	add	r3, r1
 801b224:	681b      	ldr	r3, [r3, #0]
 801b226:	2b01      	cmp	r3, #1
 801b228:	d901      	bls.n	801b22e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 801b22a:	2301      	movs	r3, #1
 801b22c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 801b22e:	4b11      	ldr	r3, [pc, #68]	; (801b274 <xTaskIncrementTick+0x168>)
 801b230:	681b      	ldr	r3, [r3, #0]
 801b232:	2b00      	cmp	r3, #0
 801b234:	d007      	beq.n	801b246 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 801b236:	2301      	movs	r3, #1
 801b238:	617b      	str	r3, [r7, #20]
 801b23a:	e004      	b.n	801b246 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801b23c:	4b0e      	ldr	r3, [pc, #56]	; (801b278 <xTaskIncrementTick+0x16c>)
 801b23e:	681b      	ldr	r3, [r3, #0]
 801b240:	3301      	adds	r3, #1
 801b242:	4a0d      	ldr	r2, [pc, #52]	; (801b278 <xTaskIncrementTick+0x16c>)
 801b244:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 801b246:	697b      	ldr	r3, [r7, #20]
}
 801b248:	4618      	mov	r0, r3
 801b24a:	3718      	adds	r7, #24
 801b24c:	46bd      	mov	sp, r7
 801b24e:	bd80      	pop	{r7, pc}
 801b250:	200009b8 	.word	0x200009b8
 801b254:	20000994 	.word	0x20000994
 801b258:	20000948 	.word	0x20000948
 801b25c:	2000094c 	.word	0x2000094c
 801b260:	200009a8 	.word	0x200009a8
 801b264:	200009b0 	.word	0x200009b0
 801b268:	20000998 	.word	0x20000998
 801b26c:	20000894 	.word	0x20000894
 801b270:	20000890 	.word	0x20000890
 801b274:	200009a4 	.word	0x200009a4
 801b278:	200009a0 	.word	0x200009a0

0801b27c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801b27c:	b480      	push	{r7}
 801b27e:	b087      	sub	sp, #28
 801b280:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801b282:	4b29      	ldr	r3, [pc, #164]	; (801b328 <vTaskSwitchContext+0xac>)
 801b284:	681b      	ldr	r3, [r3, #0]
 801b286:	2b00      	cmp	r3, #0
 801b288:	d003      	beq.n	801b292 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801b28a:	4b28      	ldr	r3, [pc, #160]	; (801b32c <vTaskSwitchContext+0xb0>)
 801b28c:	2201      	movs	r2, #1
 801b28e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801b290:	e044      	b.n	801b31c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 801b292:	4b26      	ldr	r3, [pc, #152]	; (801b32c <vTaskSwitchContext+0xb0>)
 801b294:	2200      	movs	r2, #0
 801b296:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b298:	4b25      	ldr	r3, [pc, #148]	; (801b330 <vTaskSwitchContext+0xb4>)
 801b29a:	681b      	ldr	r3, [r3, #0]
 801b29c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 801b29e:	68fb      	ldr	r3, [r7, #12]
 801b2a0:	fab3 f383 	clz	r3, r3
 801b2a4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 801b2a6:	7afb      	ldrb	r3, [r7, #11]
 801b2a8:	f1c3 031f 	rsb	r3, r3, #31
 801b2ac:	617b      	str	r3, [r7, #20]
 801b2ae:	4921      	ldr	r1, [pc, #132]	; (801b334 <vTaskSwitchContext+0xb8>)
 801b2b0:	697a      	ldr	r2, [r7, #20]
 801b2b2:	4613      	mov	r3, r2
 801b2b4:	009b      	lsls	r3, r3, #2
 801b2b6:	4413      	add	r3, r2
 801b2b8:	009b      	lsls	r3, r3, #2
 801b2ba:	440b      	add	r3, r1
 801b2bc:	681b      	ldr	r3, [r3, #0]
 801b2be:	2b00      	cmp	r3, #0
 801b2c0:	d10a      	bne.n	801b2d8 <vTaskSwitchContext+0x5c>
	__asm volatile
 801b2c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b2c6:	f383 8811 	msr	BASEPRI, r3
 801b2ca:	f3bf 8f6f 	isb	sy
 801b2ce:	f3bf 8f4f 	dsb	sy
 801b2d2:	607b      	str	r3, [r7, #4]
}
 801b2d4:	bf00      	nop
 801b2d6:	e7fe      	b.n	801b2d6 <vTaskSwitchContext+0x5a>
 801b2d8:	697a      	ldr	r2, [r7, #20]
 801b2da:	4613      	mov	r3, r2
 801b2dc:	009b      	lsls	r3, r3, #2
 801b2de:	4413      	add	r3, r2
 801b2e0:	009b      	lsls	r3, r3, #2
 801b2e2:	4a14      	ldr	r2, [pc, #80]	; (801b334 <vTaskSwitchContext+0xb8>)
 801b2e4:	4413      	add	r3, r2
 801b2e6:	613b      	str	r3, [r7, #16]
 801b2e8:	693b      	ldr	r3, [r7, #16]
 801b2ea:	685b      	ldr	r3, [r3, #4]
 801b2ec:	685a      	ldr	r2, [r3, #4]
 801b2ee:	693b      	ldr	r3, [r7, #16]
 801b2f0:	605a      	str	r2, [r3, #4]
 801b2f2:	693b      	ldr	r3, [r7, #16]
 801b2f4:	685a      	ldr	r2, [r3, #4]
 801b2f6:	693b      	ldr	r3, [r7, #16]
 801b2f8:	3308      	adds	r3, #8
 801b2fa:	429a      	cmp	r2, r3
 801b2fc:	d104      	bne.n	801b308 <vTaskSwitchContext+0x8c>
 801b2fe:	693b      	ldr	r3, [r7, #16]
 801b300:	685b      	ldr	r3, [r3, #4]
 801b302:	685a      	ldr	r2, [r3, #4]
 801b304:	693b      	ldr	r3, [r7, #16]
 801b306:	605a      	str	r2, [r3, #4]
 801b308:	693b      	ldr	r3, [r7, #16]
 801b30a:	685b      	ldr	r3, [r3, #4]
 801b30c:	68db      	ldr	r3, [r3, #12]
 801b30e:	4a0a      	ldr	r2, [pc, #40]	; (801b338 <vTaskSwitchContext+0xbc>)
 801b310:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801b312:	4b09      	ldr	r3, [pc, #36]	; (801b338 <vTaskSwitchContext+0xbc>)
 801b314:	681b      	ldr	r3, [r3, #0]
 801b316:	334c      	adds	r3, #76	; 0x4c
 801b318:	4a08      	ldr	r2, [pc, #32]	; (801b33c <vTaskSwitchContext+0xc0>)
 801b31a:	6013      	str	r3, [r2, #0]
}
 801b31c:	bf00      	nop
 801b31e:	371c      	adds	r7, #28
 801b320:	46bd      	mov	sp, r7
 801b322:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b326:	4770      	bx	lr
 801b328:	200009b8 	.word	0x200009b8
 801b32c:	200009a4 	.word	0x200009a4
 801b330:	20000998 	.word	0x20000998
 801b334:	20000894 	.word	0x20000894
 801b338:	20000890 	.word	0x20000890
 801b33c:	20000078 	.word	0x20000078

0801b340 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801b340:	b580      	push	{r7, lr}
 801b342:	b084      	sub	sp, #16
 801b344:	af00      	add	r7, sp, #0
 801b346:	6078      	str	r0, [r7, #4]
 801b348:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801b34a:	687b      	ldr	r3, [r7, #4]
 801b34c:	2b00      	cmp	r3, #0
 801b34e:	d10a      	bne.n	801b366 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 801b350:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b354:	f383 8811 	msr	BASEPRI, r3
 801b358:	f3bf 8f6f 	isb	sy
 801b35c:	f3bf 8f4f 	dsb	sy
 801b360:	60fb      	str	r3, [r7, #12]
}
 801b362:	bf00      	nop
 801b364:	e7fe      	b.n	801b364 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801b366:	4b07      	ldr	r3, [pc, #28]	; (801b384 <vTaskPlaceOnEventList+0x44>)
 801b368:	681b      	ldr	r3, [r3, #0]
 801b36a:	3318      	adds	r3, #24
 801b36c:	4619      	mov	r1, r3
 801b36e:	6878      	ldr	r0, [r7, #4]
 801b370:	f7fe fa2f 	bl	80197d2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801b374:	2101      	movs	r1, #1
 801b376:	6838      	ldr	r0, [r7, #0]
 801b378:	f000 fbae 	bl	801bad8 <prvAddCurrentTaskToDelayedList>
}
 801b37c:	bf00      	nop
 801b37e:	3710      	adds	r7, #16
 801b380:	46bd      	mov	sp, r7
 801b382:	bd80      	pop	{r7, pc}
 801b384:	20000890 	.word	0x20000890

0801b388 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801b388:	b580      	push	{r7, lr}
 801b38a:	b086      	sub	sp, #24
 801b38c:	af00      	add	r7, sp, #0
 801b38e:	60f8      	str	r0, [r7, #12]
 801b390:	60b9      	str	r1, [r7, #8]
 801b392:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801b394:	68fb      	ldr	r3, [r7, #12]
 801b396:	2b00      	cmp	r3, #0
 801b398:	d10a      	bne.n	801b3b0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 801b39a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b39e:	f383 8811 	msr	BASEPRI, r3
 801b3a2:	f3bf 8f6f 	isb	sy
 801b3a6:	f3bf 8f4f 	dsb	sy
 801b3aa:	617b      	str	r3, [r7, #20]
}
 801b3ac:	bf00      	nop
 801b3ae:	e7fe      	b.n	801b3ae <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801b3b0:	4b0a      	ldr	r3, [pc, #40]	; (801b3dc <vTaskPlaceOnEventListRestricted+0x54>)
 801b3b2:	681b      	ldr	r3, [r3, #0]
 801b3b4:	3318      	adds	r3, #24
 801b3b6:	4619      	mov	r1, r3
 801b3b8:	68f8      	ldr	r0, [r7, #12]
 801b3ba:	f7fe f9e6 	bl	801978a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801b3be:	687b      	ldr	r3, [r7, #4]
 801b3c0:	2b00      	cmp	r3, #0
 801b3c2:	d002      	beq.n	801b3ca <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 801b3c4:	f04f 33ff 	mov.w	r3, #4294967295
 801b3c8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801b3ca:	6879      	ldr	r1, [r7, #4]
 801b3cc:	68b8      	ldr	r0, [r7, #8]
 801b3ce:	f000 fb83 	bl	801bad8 <prvAddCurrentTaskToDelayedList>
	}
 801b3d2:	bf00      	nop
 801b3d4:	3718      	adds	r7, #24
 801b3d6:	46bd      	mov	sp, r7
 801b3d8:	bd80      	pop	{r7, pc}
 801b3da:	bf00      	nop
 801b3dc:	20000890 	.word	0x20000890

0801b3e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801b3e0:	b580      	push	{r7, lr}
 801b3e2:	b086      	sub	sp, #24
 801b3e4:	af00      	add	r7, sp, #0
 801b3e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b3e8:	687b      	ldr	r3, [r7, #4]
 801b3ea:	68db      	ldr	r3, [r3, #12]
 801b3ec:	68db      	ldr	r3, [r3, #12]
 801b3ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801b3f0:	693b      	ldr	r3, [r7, #16]
 801b3f2:	2b00      	cmp	r3, #0
 801b3f4:	d10a      	bne.n	801b40c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801b3f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b3fa:	f383 8811 	msr	BASEPRI, r3
 801b3fe:	f3bf 8f6f 	isb	sy
 801b402:	f3bf 8f4f 	dsb	sy
 801b406:	60fb      	str	r3, [r7, #12]
}
 801b408:	bf00      	nop
 801b40a:	e7fe      	b.n	801b40a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801b40c:	693b      	ldr	r3, [r7, #16]
 801b40e:	3318      	adds	r3, #24
 801b410:	4618      	mov	r0, r3
 801b412:	f7fe fa17 	bl	8019844 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801b416:	4b1d      	ldr	r3, [pc, #116]	; (801b48c <xTaskRemoveFromEventList+0xac>)
 801b418:	681b      	ldr	r3, [r3, #0]
 801b41a:	2b00      	cmp	r3, #0
 801b41c:	d11c      	bne.n	801b458 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801b41e:	693b      	ldr	r3, [r7, #16]
 801b420:	3304      	adds	r3, #4
 801b422:	4618      	mov	r0, r3
 801b424:	f7fe fa0e 	bl	8019844 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801b428:	693b      	ldr	r3, [r7, #16]
 801b42a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b42c:	2201      	movs	r2, #1
 801b42e:	409a      	lsls	r2, r3
 801b430:	4b17      	ldr	r3, [pc, #92]	; (801b490 <xTaskRemoveFromEventList+0xb0>)
 801b432:	681b      	ldr	r3, [r3, #0]
 801b434:	4313      	orrs	r3, r2
 801b436:	4a16      	ldr	r2, [pc, #88]	; (801b490 <xTaskRemoveFromEventList+0xb0>)
 801b438:	6013      	str	r3, [r2, #0]
 801b43a:	693b      	ldr	r3, [r7, #16]
 801b43c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b43e:	4613      	mov	r3, r2
 801b440:	009b      	lsls	r3, r3, #2
 801b442:	4413      	add	r3, r2
 801b444:	009b      	lsls	r3, r3, #2
 801b446:	4a13      	ldr	r2, [pc, #76]	; (801b494 <xTaskRemoveFromEventList+0xb4>)
 801b448:	441a      	add	r2, r3
 801b44a:	693b      	ldr	r3, [r7, #16]
 801b44c:	3304      	adds	r3, #4
 801b44e:	4619      	mov	r1, r3
 801b450:	4610      	mov	r0, r2
 801b452:	f7fe f99a 	bl	801978a <vListInsertEnd>
 801b456:	e005      	b.n	801b464 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801b458:	693b      	ldr	r3, [r7, #16]
 801b45a:	3318      	adds	r3, #24
 801b45c:	4619      	mov	r1, r3
 801b45e:	480e      	ldr	r0, [pc, #56]	; (801b498 <xTaskRemoveFromEventList+0xb8>)
 801b460:	f7fe f993 	bl	801978a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801b464:	693b      	ldr	r3, [r7, #16]
 801b466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b468:	4b0c      	ldr	r3, [pc, #48]	; (801b49c <xTaskRemoveFromEventList+0xbc>)
 801b46a:	681b      	ldr	r3, [r3, #0]
 801b46c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b46e:	429a      	cmp	r2, r3
 801b470:	d905      	bls.n	801b47e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801b472:	2301      	movs	r3, #1
 801b474:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801b476:	4b0a      	ldr	r3, [pc, #40]	; (801b4a0 <xTaskRemoveFromEventList+0xc0>)
 801b478:	2201      	movs	r2, #1
 801b47a:	601a      	str	r2, [r3, #0]
 801b47c:	e001      	b.n	801b482 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 801b47e:	2300      	movs	r3, #0
 801b480:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801b482:	697b      	ldr	r3, [r7, #20]
}
 801b484:	4618      	mov	r0, r3
 801b486:	3718      	adds	r7, #24
 801b488:	46bd      	mov	sp, r7
 801b48a:	bd80      	pop	{r7, pc}
 801b48c:	200009b8 	.word	0x200009b8
 801b490:	20000998 	.word	0x20000998
 801b494:	20000894 	.word	0x20000894
 801b498:	20000950 	.word	0x20000950
 801b49c:	20000890 	.word	0x20000890
 801b4a0:	200009a4 	.word	0x200009a4

0801b4a4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801b4a4:	b480      	push	{r7}
 801b4a6:	b083      	sub	sp, #12
 801b4a8:	af00      	add	r7, sp, #0
 801b4aa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801b4ac:	4b06      	ldr	r3, [pc, #24]	; (801b4c8 <vTaskInternalSetTimeOutState+0x24>)
 801b4ae:	681a      	ldr	r2, [r3, #0]
 801b4b0:	687b      	ldr	r3, [r7, #4]
 801b4b2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801b4b4:	4b05      	ldr	r3, [pc, #20]	; (801b4cc <vTaskInternalSetTimeOutState+0x28>)
 801b4b6:	681a      	ldr	r2, [r3, #0]
 801b4b8:	687b      	ldr	r3, [r7, #4]
 801b4ba:	605a      	str	r2, [r3, #4]
}
 801b4bc:	bf00      	nop
 801b4be:	370c      	adds	r7, #12
 801b4c0:	46bd      	mov	sp, r7
 801b4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4c6:	4770      	bx	lr
 801b4c8:	200009a8 	.word	0x200009a8
 801b4cc:	20000994 	.word	0x20000994

0801b4d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801b4d0:	b580      	push	{r7, lr}
 801b4d2:	b088      	sub	sp, #32
 801b4d4:	af00      	add	r7, sp, #0
 801b4d6:	6078      	str	r0, [r7, #4]
 801b4d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801b4da:	687b      	ldr	r3, [r7, #4]
 801b4dc:	2b00      	cmp	r3, #0
 801b4de:	d10a      	bne.n	801b4f6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 801b4e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b4e4:	f383 8811 	msr	BASEPRI, r3
 801b4e8:	f3bf 8f6f 	isb	sy
 801b4ec:	f3bf 8f4f 	dsb	sy
 801b4f0:	613b      	str	r3, [r7, #16]
}
 801b4f2:	bf00      	nop
 801b4f4:	e7fe      	b.n	801b4f4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801b4f6:	683b      	ldr	r3, [r7, #0]
 801b4f8:	2b00      	cmp	r3, #0
 801b4fa:	d10a      	bne.n	801b512 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 801b4fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b500:	f383 8811 	msr	BASEPRI, r3
 801b504:	f3bf 8f6f 	isb	sy
 801b508:	f3bf 8f4f 	dsb	sy
 801b50c:	60fb      	str	r3, [r7, #12]
}
 801b50e:	bf00      	nop
 801b510:	e7fe      	b.n	801b510 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801b512:	f001 f83f 	bl	801c594 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801b516:	4b1d      	ldr	r3, [pc, #116]	; (801b58c <xTaskCheckForTimeOut+0xbc>)
 801b518:	681b      	ldr	r3, [r3, #0]
 801b51a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801b51c:	687b      	ldr	r3, [r7, #4]
 801b51e:	685b      	ldr	r3, [r3, #4]
 801b520:	69ba      	ldr	r2, [r7, #24]
 801b522:	1ad3      	subs	r3, r2, r3
 801b524:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801b526:	683b      	ldr	r3, [r7, #0]
 801b528:	681b      	ldr	r3, [r3, #0]
 801b52a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b52e:	d102      	bne.n	801b536 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801b530:	2300      	movs	r3, #0
 801b532:	61fb      	str	r3, [r7, #28]
 801b534:	e023      	b.n	801b57e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801b536:	687b      	ldr	r3, [r7, #4]
 801b538:	681a      	ldr	r2, [r3, #0]
 801b53a:	4b15      	ldr	r3, [pc, #84]	; (801b590 <xTaskCheckForTimeOut+0xc0>)
 801b53c:	681b      	ldr	r3, [r3, #0]
 801b53e:	429a      	cmp	r2, r3
 801b540:	d007      	beq.n	801b552 <xTaskCheckForTimeOut+0x82>
 801b542:	687b      	ldr	r3, [r7, #4]
 801b544:	685b      	ldr	r3, [r3, #4]
 801b546:	69ba      	ldr	r2, [r7, #24]
 801b548:	429a      	cmp	r2, r3
 801b54a:	d302      	bcc.n	801b552 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801b54c:	2301      	movs	r3, #1
 801b54e:	61fb      	str	r3, [r7, #28]
 801b550:	e015      	b.n	801b57e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801b552:	683b      	ldr	r3, [r7, #0]
 801b554:	681b      	ldr	r3, [r3, #0]
 801b556:	697a      	ldr	r2, [r7, #20]
 801b558:	429a      	cmp	r2, r3
 801b55a:	d20b      	bcs.n	801b574 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801b55c:	683b      	ldr	r3, [r7, #0]
 801b55e:	681a      	ldr	r2, [r3, #0]
 801b560:	697b      	ldr	r3, [r7, #20]
 801b562:	1ad2      	subs	r2, r2, r3
 801b564:	683b      	ldr	r3, [r7, #0]
 801b566:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801b568:	6878      	ldr	r0, [r7, #4]
 801b56a:	f7ff ff9b 	bl	801b4a4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801b56e:	2300      	movs	r3, #0
 801b570:	61fb      	str	r3, [r7, #28]
 801b572:	e004      	b.n	801b57e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 801b574:	683b      	ldr	r3, [r7, #0]
 801b576:	2200      	movs	r2, #0
 801b578:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801b57a:	2301      	movs	r3, #1
 801b57c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801b57e:	f001 f839 	bl	801c5f4 <vPortExitCritical>

	return xReturn;
 801b582:	69fb      	ldr	r3, [r7, #28]
}
 801b584:	4618      	mov	r0, r3
 801b586:	3720      	adds	r7, #32
 801b588:	46bd      	mov	sp, r7
 801b58a:	bd80      	pop	{r7, pc}
 801b58c:	20000994 	.word	0x20000994
 801b590:	200009a8 	.word	0x200009a8

0801b594 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801b594:	b480      	push	{r7}
 801b596:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801b598:	4b03      	ldr	r3, [pc, #12]	; (801b5a8 <vTaskMissedYield+0x14>)
 801b59a:	2201      	movs	r2, #1
 801b59c:	601a      	str	r2, [r3, #0]
}
 801b59e:	bf00      	nop
 801b5a0:	46bd      	mov	sp, r7
 801b5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5a6:	4770      	bx	lr
 801b5a8:	200009a4 	.word	0x200009a4

0801b5ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801b5ac:	b580      	push	{r7, lr}
 801b5ae:	b082      	sub	sp, #8
 801b5b0:	af00      	add	r7, sp, #0
 801b5b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801b5b4:	f000 f852 	bl	801b65c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801b5b8:	4b06      	ldr	r3, [pc, #24]	; (801b5d4 <prvIdleTask+0x28>)
 801b5ba:	681b      	ldr	r3, [r3, #0]
 801b5bc:	2b01      	cmp	r3, #1
 801b5be:	d9f9      	bls.n	801b5b4 <prvIdleTask+0x8>
			{
				taskYIELD();
 801b5c0:	4b05      	ldr	r3, [pc, #20]	; (801b5d8 <prvIdleTask+0x2c>)
 801b5c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801b5c6:	601a      	str	r2, [r3, #0]
 801b5c8:	f3bf 8f4f 	dsb	sy
 801b5cc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801b5d0:	e7f0      	b.n	801b5b4 <prvIdleTask+0x8>
 801b5d2:	bf00      	nop
 801b5d4:	20000894 	.word	0x20000894
 801b5d8:	e000ed04 	.word	0xe000ed04

0801b5dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801b5dc:	b580      	push	{r7, lr}
 801b5de:	b082      	sub	sp, #8
 801b5e0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801b5e2:	2300      	movs	r3, #0
 801b5e4:	607b      	str	r3, [r7, #4]
 801b5e6:	e00c      	b.n	801b602 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801b5e8:	687a      	ldr	r2, [r7, #4]
 801b5ea:	4613      	mov	r3, r2
 801b5ec:	009b      	lsls	r3, r3, #2
 801b5ee:	4413      	add	r3, r2
 801b5f0:	009b      	lsls	r3, r3, #2
 801b5f2:	4a12      	ldr	r2, [pc, #72]	; (801b63c <prvInitialiseTaskLists+0x60>)
 801b5f4:	4413      	add	r3, r2
 801b5f6:	4618      	mov	r0, r3
 801b5f8:	f7fe f89a 	bl	8019730 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801b5fc:	687b      	ldr	r3, [r7, #4]
 801b5fe:	3301      	adds	r3, #1
 801b600:	607b      	str	r3, [r7, #4]
 801b602:	687b      	ldr	r3, [r7, #4]
 801b604:	2b06      	cmp	r3, #6
 801b606:	d9ef      	bls.n	801b5e8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801b608:	480d      	ldr	r0, [pc, #52]	; (801b640 <prvInitialiseTaskLists+0x64>)
 801b60a:	f7fe f891 	bl	8019730 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801b60e:	480d      	ldr	r0, [pc, #52]	; (801b644 <prvInitialiseTaskLists+0x68>)
 801b610:	f7fe f88e 	bl	8019730 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801b614:	480c      	ldr	r0, [pc, #48]	; (801b648 <prvInitialiseTaskLists+0x6c>)
 801b616:	f7fe f88b 	bl	8019730 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801b61a:	480c      	ldr	r0, [pc, #48]	; (801b64c <prvInitialiseTaskLists+0x70>)
 801b61c:	f7fe f888 	bl	8019730 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801b620:	480b      	ldr	r0, [pc, #44]	; (801b650 <prvInitialiseTaskLists+0x74>)
 801b622:	f7fe f885 	bl	8019730 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801b626:	4b0b      	ldr	r3, [pc, #44]	; (801b654 <prvInitialiseTaskLists+0x78>)
 801b628:	4a05      	ldr	r2, [pc, #20]	; (801b640 <prvInitialiseTaskLists+0x64>)
 801b62a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801b62c:	4b0a      	ldr	r3, [pc, #40]	; (801b658 <prvInitialiseTaskLists+0x7c>)
 801b62e:	4a05      	ldr	r2, [pc, #20]	; (801b644 <prvInitialiseTaskLists+0x68>)
 801b630:	601a      	str	r2, [r3, #0]
}
 801b632:	bf00      	nop
 801b634:	3708      	adds	r7, #8
 801b636:	46bd      	mov	sp, r7
 801b638:	bd80      	pop	{r7, pc}
 801b63a:	bf00      	nop
 801b63c:	20000894 	.word	0x20000894
 801b640:	20000920 	.word	0x20000920
 801b644:	20000934 	.word	0x20000934
 801b648:	20000950 	.word	0x20000950
 801b64c:	20000964 	.word	0x20000964
 801b650:	2000097c 	.word	0x2000097c
 801b654:	20000948 	.word	0x20000948
 801b658:	2000094c 	.word	0x2000094c

0801b65c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801b65c:	b580      	push	{r7, lr}
 801b65e:	b082      	sub	sp, #8
 801b660:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801b662:	e019      	b.n	801b698 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801b664:	f000 ff96 	bl	801c594 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b668:	4b10      	ldr	r3, [pc, #64]	; (801b6ac <prvCheckTasksWaitingTermination+0x50>)
 801b66a:	68db      	ldr	r3, [r3, #12]
 801b66c:	68db      	ldr	r3, [r3, #12]
 801b66e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801b670:	687b      	ldr	r3, [r7, #4]
 801b672:	3304      	adds	r3, #4
 801b674:	4618      	mov	r0, r3
 801b676:	f7fe f8e5 	bl	8019844 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801b67a:	4b0d      	ldr	r3, [pc, #52]	; (801b6b0 <prvCheckTasksWaitingTermination+0x54>)
 801b67c:	681b      	ldr	r3, [r3, #0]
 801b67e:	3b01      	subs	r3, #1
 801b680:	4a0b      	ldr	r2, [pc, #44]	; (801b6b0 <prvCheckTasksWaitingTermination+0x54>)
 801b682:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801b684:	4b0b      	ldr	r3, [pc, #44]	; (801b6b4 <prvCheckTasksWaitingTermination+0x58>)
 801b686:	681b      	ldr	r3, [r3, #0]
 801b688:	3b01      	subs	r3, #1
 801b68a:	4a0a      	ldr	r2, [pc, #40]	; (801b6b4 <prvCheckTasksWaitingTermination+0x58>)
 801b68c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801b68e:	f000 ffb1 	bl	801c5f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801b692:	6878      	ldr	r0, [r7, #4]
 801b694:	f000 f810 	bl	801b6b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801b698:	4b06      	ldr	r3, [pc, #24]	; (801b6b4 <prvCheckTasksWaitingTermination+0x58>)
 801b69a:	681b      	ldr	r3, [r3, #0]
 801b69c:	2b00      	cmp	r3, #0
 801b69e:	d1e1      	bne.n	801b664 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801b6a0:	bf00      	nop
 801b6a2:	bf00      	nop
 801b6a4:	3708      	adds	r7, #8
 801b6a6:	46bd      	mov	sp, r7
 801b6a8:	bd80      	pop	{r7, pc}
 801b6aa:	bf00      	nop
 801b6ac:	20000964 	.word	0x20000964
 801b6b0:	20000990 	.word	0x20000990
 801b6b4:	20000978 	.word	0x20000978

0801b6b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801b6b8:	b580      	push	{r7, lr}
 801b6ba:	b084      	sub	sp, #16
 801b6bc:	af00      	add	r7, sp, #0
 801b6be:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 801b6c0:	687b      	ldr	r3, [r7, #4]
 801b6c2:	334c      	adds	r3, #76	; 0x4c
 801b6c4:	4618      	mov	r0, r3
 801b6c6:	f012 fe41 	bl	802e34c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801b6ca:	687b      	ldr	r3, [r7, #4]
 801b6cc:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 801b6d0:	2b00      	cmp	r3, #0
 801b6d2:	d108      	bne.n	801b6e6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801b6d4:	687b      	ldr	r3, [r7, #4]
 801b6d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b6d8:	4618      	mov	r0, r3
 801b6da:	f001 f949 	bl	801c970 <vPortFree>
				vPortFree( pxTCB );
 801b6de:	6878      	ldr	r0, [r7, #4]
 801b6e0:	f001 f946 	bl	801c970 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801b6e4:	e018      	b.n	801b718 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801b6e6:	687b      	ldr	r3, [r7, #4]
 801b6e8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 801b6ec:	2b01      	cmp	r3, #1
 801b6ee:	d103      	bne.n	801b6f8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 801b6f0:	6878      	ldr	r0, [r7, #4]
 801b6f2:	f001 f93d 	bl	801c970 <vPortFree>
	}
 801b6f6:	e00f      	b.n	801b718 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801b6f8:	687b      	ldr	r3, [r7, #4]
 801b6fa:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 801b6fe:	2b02      	cmp	r3, #2
 801b700:	d00a      	beq.n	801b718 <prvDeleteTCB+0x60>
	__asm volatile
 801b702:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b706:	f383 8811 	msr	BASEPRI, r3
 801b70a:	f3bf 8f6f 	isb	sy
 801b70e:	f3bf 8f4f 	dsb	sy
 801b712:	60fb      	str	r3, [r7, #12]
}
 801b714:	bf00      	nop
 801b716:	e7fe      	b.n	801b716 <prvDeleteTCB+0x5e>
	}
 801b718:	bf00      	nop
 801b71a:	3710      	adds	r7, #16
 801b71c:	46bd      	mov	sp, r7
 801b71e:	bd80      	pop	{r7, pc}

0801b720 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801b720:	b480      	push	{r7}
 801b722:	b083      	sub	sp, #12
 801b724:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801b726:	4b0c      	ldr	r3, [pc, #48]	; (801b758 <prvResetNextTaskUnblockTime+0x38>)
 801b728:	681b      	ldr	r3, [r3, #0]
 801b72a:	681b      	ldr	r3, [r3, #0]
 801b72c:	2b00      	cmp	r3, #0
 801b72e:	d104      	bne.n	801b73a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801b730:	4b0a      	ldr	r3, [pc, #40]	; (801b75c <prvResetNextTaskUnblockTime+0x3c>)
 801b732:	f04f 32ff 	mov.w	r2, #4294967295
 801b736:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801b738:	e008      	b.n	801b74c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b73a:	4b07      	ldr	r3, [pc, #28]	; (801b758 <prvResetNextTaskUnblockTime+0x38>)
 801b73c:	681b      	ldr	r3, [r3, #0]
 801b73e:	68db      	ldr	r3, [r3, #12]
 801b740:	68db      	ldr	r3, [r3, #12]
 801b742:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801b744:	687b      	ldr	r3, [r7, #4]
 801b746:	685b      	ldr	r3, [r3, #4]
 801b748:	4a04      	ldr	r2, [pc, #16]	; (801b75c <prvResetNextTaskUnblockTime+0x3c>)
 801b74a:	6013      	str	r3, [r2, #0]
}
 801b74c:	bf00      	nop
 801b74e:	370c      	adds	r7, #12
 801b750:	46bd      	mov	sp, r7
 801b752:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b756:	4770      	bx	lr
 801b758:	20000948 	.word	0x20000948
 801b75c:	200009b0 	.word	0x200009b0

0801b760 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801b760:	b480      	push	{r7}
 801b762:	b083      	sub	sp, #12
 801b764:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801b766:	4b0b      	ldr	r3, [pc, #44]	; (801b794 <xTaskGetSchedulerState+0x34>)
 801b768:	681b      	ldr	r3, [r3, #0]
 801b76a:	2b00      	cmp	r3, #0
 801b76c:	d102      	bne.n	801b774 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801b76e:	2301      	movs	r3, #1
 801b770:	607b      	str	r3, [r7, #4]
 801b772:	e008      	b.n	801b786 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801b774:	4b08      	ldr	r3, [pc, #32]	; (801b798 <xTaskGetSchedulerState+0x38>)
 801b776:	681b      	ldr	r3, [r3, #0]
 801b778:	2b00      	cmp	r3, #0
 801b77a:	d102      	bne.n	801b782 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801b77c:	2302      	movs	r3, #2
 801b77e:	607b      	str	r3, [r7, #4]
 801b780:	e001      	b.n	801b786 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801b782:	2300      	movs	r3, #0
 801b784:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801b786:	687b      	ldr	r3, [r7, #4]
	}
 801b788:	4618      	mov	r0, r3
 801b78a:	370c      	adds	r7, #12
 801b78c:	46bd      	mov	sp, r7
 801b78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b792:	4770      	bx	lr
 801b794:	2000099c 	.word	0x2000099c
 801b798:	200009b8 	.word	0x200009b8

0801b79c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801b79c:	b580      	push	{r7, lr}
 801b79e:	b084      	sub	sp, #16
 801b7a0:	af00      	add	r7, sp, #0
 801b7a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 801b7a4:	687b      	ldr	r3, [r7, #4]
 801b7a6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801b7a8:	2300      	movs	r3, #0
 801b7aa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801b7ac:	687b      	ldr	r3, [r7, #4]
 801b7ae:	2b00      	cmp	r3, #0
 801b7b0:	d05e      	beq.n	801b870 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801b7b2:	68bb      	ldr	r3, [r7, #8]
 801b7b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b7b6:	4b31      	ldr	r3, [pc, #196]	; (801b87c <xTaskPriorityInherit+0xe0>)
 801b7b8:	681b      	ldr	r3, [r3, #0]
 801b7ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b7bc:	429a      	cmp	r2, r3
 801b7be:	d24e      	bcs.n	801b85e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801b7c0:	68bb      	ldr	r3, [r7, #8]
 801b7c2:	699b      	ldr	r3, [r3, #24]
 801b7c4:	2b00      	cmp	r3, #0
 801b7c6:	db06      	blt.n	801b7d6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801b7c8:	4b2c      	ldr	r3, [pc, #176]	; (801b87c <xTaskPriorityInherit+0xe0>)
 801b7ca:	681b      	ldr	r3, [r3, #0]
 801b7cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b7ce:	f1c3 0207 	rsb	r2, r3, #7
 801b7d2:	68bb      	ldr	r3, [r7, #8]
 801b7d4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801b7d6:	68bb      	ldr	r3, [r7, #8]
 801b7d8:	6959      	ldr	r1, [r3, #20]
 801b7da:	68bb      	ldr	r3, [r7, #8]
 801b7dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b7de:	4613      	mov	r3, r2
 801b7e0:	009b      	lsls	r3, r3, #2
 801b7e2:	4413      	add	r3, r2
 801b7e4:	009b      	lsls	r3, r3, #2
 801b7e6:	4a26      	ldr	r2, [pc, #152]	; (801b880 <xTaskPriorityInherit+0xe4>)
 801b7e8:	4413      	add	r3, r2
 801b7ea:	4299      	cmp	r1, r3
 801b7ec:	d12f      	bne.n	801b84e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801b7ee:	68bb      	ldr	r3, [r7, #8]
 801b7f0:	3304      	adds	r3, #4
 801b7f2:	4618      	mov	r0, r3
 801b7f4:	f7fe f826 	bl	8019844 <uxListRemove>
 801b7f8:	4603      	mov	r3, r0
 801b7fa:	2b00      	cmp	r3, #0
 801b7fc:	d10a      	bne.n	801b814 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 801b7fe:	68bb      	ldr	r3, [r7, #8]
 801b800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b802:	2201      	movs	r2, #1
 801b804:	fa02 f303 	lsl.w	r3, r2, r3
 801b808:	43da      	mvns	r2, r3
 801b80a:	4b1e      	ldr	r3, [pc, #120]	; (801b884 <xTaskPriorityInherit+0xe8>)
 801b80c:	681b      	ldr	r3, [r3, #0]
 801b80e:	4013      	ands	r3, r2
 801b810:	4a1c      	ldr	r2, [pc, #112]	; (801b884 <xTaskPriorityInherit+0xe8>)
 801b812:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801b814:	4b19      	ldr	r3, [pc, #100]	; (801b87c <xTaskPriorityInherit+0xe0>)
 801b816:	681b      	ldr	r3, [r3, #0]
 801b818:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b81a:	68bb      	ldr	r3, [r7, #8]
 801b81c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801b81e:	68bb      	ldr	r3, [r7, #8]
 801b820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b822:	2201      	movs	r2, #1
 801b824:	409a      	lsls	r2, r3
 801b826:	4b17      	ldr	r3, [pc, #92]	; (801b884 <xTaskPriorityInherit+0xe8>)
 801b828:	681b      	ldr	r3, [r3, #0]
 801b82a:	4313      	orrs	r3, r2
 801b82c:	4a15      	ldr	r2, [pc, #84]	; (801b884 <xTaskPriorityInherit+0xe8>)
 801b82e:	6013      	str	r3, [r2, #0]
 801b830:	68bb      	ldr	r3, [r7, #8]
 801b832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b834:	4613      	mov	r3, r2
 801b836:	009b      	lsls	r3, r3, #2
 801b838:	4413      	add	r3, r2
 801b83a:	009b      	lsls	r3, r3, #2
 801b83c:	4a10      	ldr	r2, [pc, #64]	; (801b880 <xTaskPriorityInherit+0xe4>)
 801b83e:	441a      	add	r2, r3
 801b840:	68bb      	ldr	r3, [r7, #8]
 801b842:	3304      	adds	r3, #4
 801b844:	4619      	mov	r1, r3
 801b846:	4610      	mov	r0, r2
 801b848:	f7fd ff9f 	bl	801978a <vListInsertEnd>
 801b84c:	e004      	b.n	801b858 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801b84e:	4b0b      	ldr	r3, [pc, #44]	; (801b87c <xTaskPriorityInherit+0xe0>)
 801b850:	681b      	ldr	r3, [r3, #0]
 801b852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b854:	68bb      	ldr	r3, [r7, #8]
 801b856:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801b858:	2301      	movs	r3, #1
 801b85a:	60fb      	str	r3, [r7, #12]
 801b85c:	e008      	b.n	801b870 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801b85e:	68bb      	ldr	r3, [r7, #8]
 801b860:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801b862:	4b06      	ldr	r3, [pc, #24]	; (801b87c <xTaskPriorityInherit+0xe0>)
 801b864:	681b      	ldr	r3, [r3, #0]
 801b866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b868:	429a      	cmp	r2, r3
 801b86a:	d201      	bcs.n	801b870 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801b86c:	2301      	movs	r3, #1
 801b86e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801b870:	68fb      	ldr	r3, [r7, #12]
	}
 801b872:	4618      	mov	r0, r3
 801b874:	3710      	adds	r7, #16
 801b876:	46bd      	mov	sp, r7
 801b878:	bd80      	pop	{r7, pc}
 801b87a:	bf00      	nop
 801b87c:	20000890 	.word	0x20000890
 801b880:	20000894 	.word	0x20000894
 801b884:	20000998 	.word	0x20000998

0801b888 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801b888:	b580      	push	{r7, lr}
 801b88a:	b086      	sub	sp, #24
 801b88c:	af00      	add	r7, sp, #0
 801b88e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801b890:	687b      	ldr	r3, [r7, #4]
 801b892:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801b894:	2300      	movs	r3, #0
 801b896:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801b898:	687b      	ldr	r3, [r7, #4]
 801b89a:	2b00      	cmp	r3, #0
 801b89c:	d06e      	beq.n	801b97c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801b89e:	4b3a      	ldr	r3, [pc, #232]	; (801b988 <xTaskPriorityDisinherit+0x100>)
 801b8a0:	681b      	ldr	r3, [r3, #0]
 801b8a2:	693a      	ldr	r2, [r7, #16]
 801b8a4:	429a      	cmp	r2, r3
 801b8a6:	d00a      	beq.n	801b8be <xTaskPriorityDisinherit+0x36>
	__asm volatile
 801b8a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b8ac:	f383 8811 	msr	BASEPRI, r3
 801b8b0:	f3bf 8f6f 	isb	sy
 801b8b4:	f3bf 8f4f 	dsb	sy
 801b8b8:	60fb      	str	r3, [r7, #12]
}
 801b8ba:	bf00      	nop
 801b8bc:	e7fe      	b.n	801b8bc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801b8be:	693b      	ldr	r3, [r7, #16]
 801b8c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b8c2:	2b00      	cmp	r3, #0
 801b8c4:	d10a      	bne.n	801b8dc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801b8c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b8ca:	f383 8811 	msr	BASEPRI, r3
 801b8ce:	f3bf 8f6f 	isb	sy
 801b8d2:	f3bf 8f4f 	dsb	sy
 801b8d6:	60bb      	str	r3, [r7, #8]
}
 801b8d8:	bf00      	nop
 801b8da:	e7fe      	b.n	801b8da <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 801b8dc:	693b      	ldr	r3, [r7, #16]
 801b8de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b8e0:	1e5a      	subs	r2, r3, #1
 801b8e2:	693b      	ldr	r3, [r7, #16]
 801b8e4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801b8e6:	693b      	ldr	r3, [r7, #16]
 801b8e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b8ea:	693b      	ldr	r3, [r7, #16]
 801b8ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b8ee:	429a      	cmp	r2, r3
 801b8f0:	d044      	beq.n	801b97c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801b8f2:	693b      	ldr	r3, [r7, #16]
 801b8f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b8f6:	2b00      	cmp	r3, #0
 801b8f8:	d140      	bne.n	801b97c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801b8fa:	693b      	ldr	r3, [r7, #16]
 801b8fc:	3304      	adds	r3, #4
 801b8fe:	4618      	mov	r0, r3
 801b900:	f7fd ffa0 	bl	8019844 <uxListRemove>
 801b904:	4603      	mov	r3, r0
 801b906:	2b00      	cmp	r3, #0
 801b908:	d115      	bne.n	801b936 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801b90a:	693b      	ldr	r3, [r7, #16]
 801b90c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b90e:	491f      	ldr	r1, [pc, #124]	; (801b98c <xTaskPriorityDisinherit+0x104>)
 801b910:	4613      	mov	r3, r2
 801b912:	009b      	lsls	r3, r3, #2
 801b914:	4413      	add	r3, r2
 801b916:	009b      	lsls	r3, r3, #2
 801b918:	440b      	add	r3, r1
 801b91a:	681b      	ldr	r3, [r3, #0]
 801b91c:	2b00      	cmp	r3, #0
 801b91e:	d10a      	bne.n	801b936 <xTaskPriorityDisinherit+0xae>
 801b920:	693b      	ldr	r3, [r7, #16]
 801b922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b924:	2201      	movs	r2, #1
 801b926:	fa02 f303 	lsl.w	r3, r2, r3
 801b92a:	43da      	mvns	r2, r3
 801b92c:	4b18      	ldr	r3, [pc, #96]	; (801b990 <xTaskPriorityDisinherit+0x108>)
 801b92e:	681b      	ldr	r3, [r3, #0]
 801b930:	4013      	ands	r3, r2
 801b932:	4a17      	ldr	r2, [pc, #92]	; (801b990 <xTaskPriorityDisinherit+0x108>)
 801b934:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801b936:	693b      	ldr	r3, [r7, #16]
 801b938:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801b93a:	693b      	ldr	r3, [r7, #16]
 801b93c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801b93e:	693b      	ldr	r3, [r7, #16]
 801b940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b942:	f1c3 0207 	rsb	r2, r3, #7
 801b946:	693b      	ldr	r3, [r7, #16]
 801b948:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801b94a:	693b      	ldr	r3, [r7, #16]
 801b94c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b94e:	2201      	movs	r2, #1
 801b950:	409a      	lsls	r2, r3
 801b952:	4b0f      	ldr	r3, [pc, #60]	; (801b990 <xTaskPriorityDisinherit+0x108>)
 801b954:	681b      	ldr	r3, [r3, #0]
 801b956:	4313      	orrs	r3, r2
 801b958:	4a0d      	ldr	r2, [pc, #52]	; (801b990 <xTaskPriorityDisinherit+0x108>)
 801b95a:	6013      	str	r3, [r2, #0]
 801b95c:	693b      	ldr	r3, [r7, #16]
 801b95e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b960:	4613      	mov	r3, r2
 801b962:	009b      	lsls	r3, r3, #2
 801b964:	4413      	add	r3, r2
 801b966:	009b      	lsls	r3, r3, #2
 801b968:	4a08      	ldr	r2, [pc, #32]	; (801b98c <xTaskPriorityDisinherit+0x104>)
 801b96a:	441a      	add	r2, r3
 801b96c:	693b      	ldr	r3, [r7, #16]
 801b96e:	3304      	adds	r3, #4
 801b970:	4619      	mov	r1, r3
 801b972:	4610      	mov	r0, r2
 801b974:	f7fd ff09 	bl	801978a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801b978:	2301      	movs	r3, #1
 801b97a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801b97c:	697b      	ldr	r3, [r7, #20]
	}
 801b97e:	4618      	mov	r0, r3
 801b980:	3718      	adds	r7, #24
 801b982:	46bd      	mov	sp, r7
 801b984:	bd80      	pop	{r7, pc}
 801b986:	bf00      	nop
 801b988:	20000890 	.word	0x20000890
 801b98c:	20000894 	.word	0x20000894
 801b990:	20000998 	.word	0x20000998

0801b994 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801b994:	b580      	push	{r7, lr}
 801b996:	b088      	sub	sp, #32
 801b998:	af00      	add	r7, sp, #0
 801b99a:	6078      	str	r0, [r7, #4]
 801b99c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801b99e:	687b      	ldr	r3, [r7, #4]
 801b9a0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801b9a2:	2301      	movs	r3, #1
 801b9a4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801b9a6:	687b      	ldr	r3, [r7, #4]
 801b9a8:	2b00      	cmp	r3, #0
 801b9aa:	d077      	beq.n	801ba9c <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801b9ac:	69bb      	ldr	r3, [r7, #24]
 801b9ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b9b0:	2b00      	cmp	r3, #0
 801b9b2:	d10a      	bne.n	801b9ca <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 801b9b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b9b8:	f383 8811 	msr	BASEPRI, r3
 801b9bc:	f3bf 8f6f 	isb	sy
 801b9c0:	f3bf 8f4f 	dsb	sy
 801b9c4:	60fb      	str	r3, [r7, #12]
}
 801b9c6:	bf00      	nop
 801b9c8:	e7fe      	b.n	801b9c8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801b9ca:	69bb      	ldr	r3, [r7, #24]
 801b9cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b9ce:	683a      	ldr	r2, [r7, #0]
 801b9d0:	429a      	cmp	r2, r3
 801b9d2:	d902      	bls.n	801b9da <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801b9d4:	683b      	ldr	r3, [r7, #0]
 801b9d6:	61fb      	str	r3, [r7, #28]
 801b9d8:	e002      	b.n	801b9e0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801b9da:	69bb      	ldr	r3, [r7, #24]
 801b9dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b9de:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801b9e0:	69bb      	ldr	r3, [r7, #24]
 801b9e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b9e4:	69fa      	ldr	r2, [r7, #28]
 801b9e6:	429a      	cmp	r2, r3
 801b9e8:	d058      	beq.n	801ba9c <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801b9ea:	69bb      	ldr	r3, [r7, #24]
 801b9ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b9ee:	697a      	ldr	r2, [r7, #20]
 801b9f0:	429a      	cmp	r2, r3
 801b9f2:	d153      	bne.n	801ba9c <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801b9f4:	4b2b      	ldr	r3, [pc, #172]	; (801baa4 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 801b9f6:	681b      	ldr	r3, [r3, #0]
 801b9f8:	69ba      	ldr	r2, [r7, #24]
 801b9fa:	429a      	cmp	r2, r3
 801b9fc:	d10a      	bne.n	801ba14 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 801b9fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ba02:	f383 8811 	msr	BASEPRI, r3
 801ba06:	f3bf 8f6f 	isb	sy
 801ba0a:	f3bf 8f4f 	dsb	sy
 801ba0e:	60bb      	str	r3, [r7, #8]
}
 801ba10:	bf00      	nop
 801ba12:	e7fe      	b.n	801ba12 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801ba14:	69bb      	ldr	r3, [r7, #24]
 801ba16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ba18:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801ba1a:	69bb      	ldr	r3, [r7, #24]
 801ba1c:	69fa      	ldr	r2, [r7, #28]
 801ba1e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801ba20:	69bb      	ldr	r3, [r7, #24]
 801ba22:	699b      	ldr	r3, [r3, #24]
 801ba24:	2b00      	cmp	r3, #0
 801ba26:	db04      	blt.n	801ba32 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801ba28:	69fb      	ldr	r3, [r7, #28]
 801ba2a:	f1c3 0207 	rsb	r2, r3, #7
 801ba2e:	69bb      	ldr	r3, [r7, #24]
 801ba30:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801ba32:	69bb      	ldr	r3, [r7, #24]
 801ba34:	6959      	ldr	r1, [r3, #20]
 801ba36:	693a      	ldr	r2, [r7, #16]
 801ba38:	4613      	mov	r3, r2
 801ba3a:	009b      	lsls	r3, r3, #2
 801ba3c:	4413      	add	r3, r2
 801ba3e:	009b      	lsls	r3, r3, #2
 801ba40:	4a19      	ldr	r2, [pc, #100]	; (801baa8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 801ba42:	4413      	add	r3, r2
 801ba44:	4299      	cmp	r1, r3
 801ba46:	d129      	bne.n	801ba9c <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801ba48:	69bb      	ldr	r3, [r7, #24]
 801ba4a:	3304      	adds	r3, #4
 801ba4c:	4618      	mov	r0, r3
 801ba4e:	f7fd fef9 	bl	8019844 <uxListRemove>
 801ba52:	4603      	mov	r3, r0
 801ba54:	2b00      	cmp	r3, #0
 801ba56:	d10a      	bne.n	801ba6e <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 801ba58:	69bb      	ldr	r3, [r7, #24]
 801ba5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ba5c:	2201      	movs	r2, #1
 801ba5e:	fa02 f303 	lsl.w	r3, r2, r3
 801ba62:	43da      	mvns	r2, r3
 801ba64:	4b11      	ldr	r3, [pc, #68]	; (801baac <vTaskPriorityDisinheritAfterTimeout+0x118>)
 801ba66:	681b      	ldr	r3, [r3, #0]
 801ba68:	4013      	ands	r3, r2
 801ba6a:	4a10      	ldr	r2, [pc, #64]	; (801baac <vTaskPriorityDisinheritAfterTimeout+0x118>)
 801ba6c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801ba6e:	69bb      	ldr	r3, [r7, #24]
 801ba70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ba72:	2201      	movs	r2, #1
 801ba74:	409a      	lsls	r2, r3
 801ba76:	4b0d      	ldr	r3, [pc, #52]	; (801baac <vTaskPriorityDisinheritAfterTimeout+0x118>)
 801ba78:	681b      	ldr	r3, [r3, #0]
 801ba7a:	4313      	orrs	r3, r2
 801ba7c:	4a0b      	ldr	r2, [pc, #44]	; (801baac <vTaskPriorityDisinheritAfterTimeout+0x118>)
 801ba7e:	6013      	str	r3, [r2, #0]
 801ba80:	69bb      	ldr	r3, [r7, #24]
 801ba82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ba84:	4613      	mov	r3, r2
 801ba86:	009b      	lsls	r3, r3, #2
 801ba88:	4413      	add	r3, r2
 801ba8a:	009b      	lsls	r3, r3, #2
 801ba8c:	4a06      	ldr	r2, [pc, #24]	; (801baa8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 801ba8e:	441a      	add	r2, r3
 801ba90:	69bb      	ldr	r3, [r7, #24]
 801ba92:	3304      	adds	r3, #4
 801ba94:	4619      	mov	r1, r3
 801ba96:	4610      	mov	r0, r2
 801ba98:	f7fd fe77 	bl	801978a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801ba9c:	bf00      	nop
 801ba9e:	3720      	adds	r7, #32
 801baa0:	46bd      	mov	sp, r7
 801baa2:	bd80      	pop	{r7, pc}
 801baa4:	20000890 	.word	0x20000890
 801baa8:	20000894 	.word	0x20000894
 801baac:	20000998 	.word	0x20000998

0801bab0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801bab0:	b480      	push	{r7}
 801bab2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801bab4:	4b07      	ldr	r3, [pc, #28]	; (801bad4 <pvTaskIncrementMutexHeldCount+0x24>)
 801bab6:	681b      	ldr	r3, [r3, #0]
 801bab8:	2b00      	cmp	r3, #0
 801baba:	d004      	beq.n	801bac6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801babc:	4b05      	ldr	r3, [pc, #20]	; (801bad4 <pvTaskIncrementMutexHeldCount+0x24>)
 801babe:	681b      	ldr	r3, [r3, #0]
 801bac0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801bac2:	3201      	adds	r2, #1
 801bac4:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 801bac6:	4b03      	ldr	r3, [pc, #12]	; (801bad4 <pvTaskIncrementMutexHeldCount+0x24>)
 801bac8:	681b      	ldr	r3, [r3, #0]
	}
 801baca:	4618      	mov	r0, r3
 801bacc:	46bd      	mov	sp, r7
 801bace:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bad2:	4770      	bx	lr
 801bad4:	20000890 	.word	0x20000890

0801bad8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801bad8:	b580      	push	{r7, lr}
 801bada:	b084      	sub	sp, #16
 801badc:	af00      	add	r7, sp, #0
 801bade:	6078      	str	r0, [r7, #4]
 801bae0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801bae2:	4b29      	ldr	r3, [pc, #164]	; (801bb88 <prvAddCurrentTaskToDelayedList+0xb0>)
 801bae4:	681b      	ldr	r3, [r3, #0]
 801bae6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801bae8:	4b28      	ldr	r3, [pc, #160]	; (801bb8c <prvAddCurrentTaskToDelayedList+0xb4>)
 801baea:	681b      	ldr	r3, [r3, #0]
 801baec:	3304      	adds	r3, #4
 801baee:	4618      	mov	r0, r3
 801baf0:	f7fd fea8 	bl	8019844 <uxListRemove>
 801baf4:	4603      	mov	r3, r0
 801baf6:	2b00      	cmp	r3, #0
 801baf8:	d10b      	bne.n	801bb12 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 801bafa:	4b24      	ldr	r3, [pc, #144]	; (801bb8c <prvAddCurrentTaskToDelayedList+0xb4>)
 801bafc:	681b      	ldr	r3, [r3, #0]
 801bafe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bb00:	2201      	movs	r2, #1
 801bb02:	fa02 f303 	lsl.w	r3, r2, r3
 801bb06:	43da      	mvns	r2, r3
 801bb08:	4b21      	ldr	r3, [pc, #132]	; (801bb90 <prvAddCurrentTaskToDelayedList+0xb8>)
 801bb0a:	681b      	ldr	r3, [r3, #0]
 801bb0c:	4013      	ands	r3, r2
 801bb0e:	4a20      	ldr	r2, [pc, #128]	; (801bb90 <prvAddCurrentTaskToDelayedList+0xb8>)
 801bb10:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801bb12:	687b      	ldr	r3, [r7, #4]
 801bb14:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bb18:	d10a      	bne.n	801bb30 <prvAddCurrentTaskToDelayedList+0x58>
 801bb1a:	683b      	ldr	r3, [r7, #0]
 801bb1c:	2b00      	cmp	r3, #0
 801bb1e:	d007      	beq.n	801bb30 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801bb20:	4b1a      	ldr	r3, [pc, #104]	; (801bb8c <prvAddCurrentTaskToDelayedList+0xb4>)
 801bb22:	681b      	ldr	r3, [r3, #0]
 801bb24:	3304      	adds	r3, #4
 801bb26:	4619      	mov	r1, r3
 801bb28:	481a      	ldr	r0, [pc, #104]	; (801bb94 <prvAddCurrentTaskToDelayedList+0xbc>)
 801bb2a:	f7fd fe2e 	bl	801978a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801bb2e:	e026      	b.n	801bb7e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801bb30:	68fa      	ldr	r2, [r7, #12]
 801bb32:	687b      	ldr	r3, [r7, #4]
 801bb34:	4413      	add	r3, r2
 801bb36:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801bb38:	4b14      	ldr	r3, [pc, #80]	; (801bb8c <prvAddCurrentTaskToDelayedList+0xb4>)
 801bb3a:	681b      	ldr	r3, [r3, #0]
 801bb3c:	68ba      	ldr	r2, [r7, #8]
 801bb3e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801bb40:	68ba      	ldr	r2, [r7, #8]
 801bb42:	68fb      	ldr	r3, [r7, #12]
 801bb44:	429a      	cmp	r2, r3
 801bb46:	d209      	bcs.n	801bb5c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801bb48:	4b13      	ldr	r3, [pc, #76]	; (801bb98 <prvAddCurrentTaskToDelayedList+0xc0>)
 801bb4a:	681a      	ldr	r2, [r3, #0]
 801bb4c:	4b0f      	ldr	r3, [pc, #60]	; (801bb8c <prvAddCurrentTaskToDelayedList+0xb4>)
 801bb4e:	681b      	ldr	r3, [r3, #0]
 801bb50:	3304      	adds	r3, #4
 801bb52:	4619      	mov	r1, r3
 801bb54:	4610      	mov	r0, r2
 801bb56:	f7fd fe3c 	bl	80197d2 <vListInsert>
}
 801bb5a:	e010      	b.n	801bb7e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801bb5c:	4b0f      	ldr	r3, [pc, #60]	; (801bb9c <prvAddCurrentTaskToDelayedList+0xc4>)
 801bb5e:	681a      	ldr	r2, [r3, #0]
 801bb60:	4b0a      	ldr	r3, [pc, #40]	; (801bb8c <prvAddCurrentTaskToDelayedList+0xb4>)
 801bb62:	681b      	ldr	r3, [r3, #0]
 801bb64:	3304      	adds	r3, #4
 801bb66:	4619      	mov	r1, r3
 801bb68:	4610      	mov	r0, r2
 801bb6a:	f7fd fe32 	bl	80197d2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801bb6e:	4b0c      	ldr	r3, [pc, #48]	; (801bba0 <prvAddCurrentTaskToDelayedList+0xc8>)
 801bb70:	681b      	ldr	r3, [r3, #0]
 801bb72:	68ba      	ldr	r2, [r7, #8]
 801bb74:	429a      	cmp	r2, r3
 801bb76:	d202      	bcs.n	801bb7e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 801bb78:	4a09      	ldr	r2, [pc, #36]	; (801bba0 <prvAddCurrentTaskToDelayedList+0xc8>)
 801bb7a:	68bb      	ldr	r3, [r7, #8]
 801bb7c:	6013      	str	r3, [r2, #0]
}
 801bb7e:	bf00      	nop
 801bb80:	3710      	adds	r7, #16
 801bb82:	46bd      	mov	sp, r7
 801bb84:	bd80      	pop	{r7, pc}
 801bb86:	bf00      	nop
 801bb88:	20000994 	.word	0x20000994
 801bb8c:	20000890 	.word	0x20000890
 801bb90:	20000998 	.word	0x20000998
 801bb94:	2000097c 	.word	0x2000097c
 801bb98:	2000094c 	.word	0x2000094c
 801bb9c:	20000948 	.word	0x20000948
 801bba0:	200009b0 	.word	0x200009b0

0801bba4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801bba4:	b580      	push	{r7, lr}
 801bba6:	b08a      	sub	sp, #40	; 0x28
 801bba8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801bbaa:	2300      	movs	r3, #0
 801bbac:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801bbae:	f000 fb85 	bl	801c2bc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801bbb2:	4b1c      	ldr	r3, [pc, #112]	; (801bc24 <xTimerCreateTimerTask+0x80>)
 801bbb4:	681b      	ldr	r3, [r3, #0]
 801bbb6:	2b00      	cmp	r3, #0
 801bbb8:	d021      	beq.n	801bbfe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801bbba:	2300      	movs	r3, #0
 801bbbc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801bbbe:	2300      	movs	r3, #0
 801bbc0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801bbc2:	1d3a      	adds	r2, r7, #4
 801bbc4:	f107 0108 	add.w	r1, r7, #8
 801bbc8:	f107 030c 	add.w	r3, r7, #12
 801bbcc:	4618      	mov	r0, r3
 801bbce:	f7f5 f959 	bl	8010e84 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801bbd2:	6879      	ldr	r1, [r7, #4]
 801bbd4:	68bb      	ldr	r3, [r7, #8]
 801bbd6:	68fa      	ldr	r2, [r7, #12]
 801bbd8:	9202      	str	r2, [sp, #8]
 801bbda:	9301      	str	r3, [sp, #4]
 801bbdc:	2305      	movs	r3, #5
 801bbde:	9300      	str	r3, [sp, #0]
 801bbe0:	2300      	movs	r3, #0
 801bbe2:	460a      	mov	r2, r1
 801bbe4:	4910      	ldr	r1, [pc, #64]	; (801bc28 <xTimerCreateTimerTask+0x84>)
 801bbe6:	4811      	ldr	r0, [pc, #68]	; (801bc2c <xTimerCreateTimerTask+0x88>)
 801bbe8:	f7fe fdf4 	bl	801a7d4 <xTaskCreateStatic>
 801bbec:	4603      	mov	r3, r0
 801bbee:	4a10      	ldr	r2, [pc, #64]	; (801bc30 <xTimerCreateTimerTask+0x8c>)
 801bbf0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801bbf2:	4b0f      	ldr	r3, [pc, #60]	; (801bc30 <xTimerCreateTimerTask+0x8c>)
 801bbf4:	681b      	ldr	r3, [r3, #0]
 801bbf6:	2b00      	cmp	r3, #0
 801bbf8:	d001      	beq.n	801bbfe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801bbfa:	2301      	movs	r3, #1
 801bbfc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801bbfe:	697b      	ldr	r3, [r7, #20]
 801bc00:	2b00      	cmp	r3, #0
 801bc02:	d10a      	bne.n	801bc1a <xTimerCreateTimerTask+0x76>
	__asm volatile
 801bc04:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bc08:	f383 8811 	msr	BASEPRI, r3
 801bc0c:	f3bf 8f6f 	isb	sy
 801bc10:	f3bf 8f4f 	dsb	sy
 801bc14:	613b      	str	r3, [r7, #16]
}
 801bc16:	bf00      	nop
 801bc18:	e7fe      	b.n	801bc18 <xTimerCreateTimerTask+0x74>
	return xReturn;
 801bc1a:	697b      	ldr	r3, [r7, #20]
}
 801bc1c:	4618      	mov	r0, r3
 801bc1e:	3718      	adds	r7, #24
 801bc20:	46bd      	mov	sp, r7
 801bc22:	bd80      	pop	{r7, pc}
 801bc24:	200009ec 	.word	0x200009ec
 801bc28:	0802fd30 	.word	0x0802fd30
 801bc2c:	0801be9d 	.word	0x0801be9d
 801bc30:	200009f0 	.word	0x200009f0

0801bc34 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 801bc34:	b580      	push	{r7, lr}
 801bc36:	b088      	sub	sp, #32
 801bc38:	af02      	add	r7, sp, #8
 801bc3a:	60f8      	str	r0, [r7, #12]
 801bc3c:	60b9      	str	r1, [r7, #8]
 801bc3e:	607a      	str	r2, [r7, #4]
 801bc40:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 801bc42:	2028      	movs	r0, #40	; 0x28
 801bc44:	f000 fdc8 	bl	801c7d8 <pvPortMalloc>
 801bc48:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 801bc4a:	697b      	ldr	r3, [r7, #20]
 801bc4c:	2b00      	cmp	r3, #0
 801bc4e:	d00d      	beq.n	801bc6c <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 801bc50:	697b      	ldr	r3, [r7, #20]
 801bc52:	2200      	movs	r2, #0
 801bc54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 801bc58:	697b      	ldr	r3, [r7, #20]
 801bc5a:	9301      	str	r3, [sp, #4]
 801bc5c:	6a3b      	ldr	r3, [r7, #32]
 801bc5e:	9300      	str	r3, [sp, #0]
 801bc60:	683b      	ldr	r3, [r7, #0]
 801bc62:	687a      	ldr	r2, [r7, #4]
 801bc64:	68b9      	ldr	r1, [r7, #8]
 801bc66:	68f8      	ldr	r0, [r7, #12]
 801bc68:	f000 f843 	bl	801bcf2 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 801bc6c:	697b      	ldr	r3, [r7, #20]
	}
 801bc6e:	4618      	mov	r0, r3
 801bc70:	3718      	adds	r7, #24
 801bc72:	46bd      	mov	sp, r7
 801bc74:	bd80      	pop	{r7, pc}

0801bc76 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 801bc76:	b580      	push	{r7, lr}
 801bc78:	b08a      	sub	sp, #40	; 0x28
 801bc7a:	af02      	add	r7, sp, #8
 801bc7c:	60f8      	str	r0, [r7, #12]
 801bc7e:	60b9      	str	r1, [r7, #8]
 801bc80:	607a      	str	r2, [r7, #4]
 801bc82:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 801bc84:	2328      	movs	r3, #40	; 0x28
 801bc86:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 801bc88:	693b      	ldr	r3, [r7, #16]
 801bc8a:	2b28      	cmp	r3, #40	; 0x28
 801bc8c:	d00a      	beq.n	801bca4 <xTimerCreateStatic+0x2e>
	__asm volatile
 801bc8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bc92:	f383 8811 	msr	BASEPRI, r3
 801bc96:	f3bf 8f6f 	isb	sy
 801bc9a:	f3bf 8f4f 	dsb	sy
 801bc9e:	61bb      	str	r3, [r7, #24]
}
 801bca0:	bf00      	nop
 801bca2:	e7fe      	b.n	801bca2 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801bca4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 801bca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bca8:	2b00      	cmp	r3, #0
 801bcaa:	d10a      	bne.n	801bcc2 <xTimerCreateStatic+0x4c>
	__asm volatile
 801bcac:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bcb0:	f383 8811 	msr	BASEPRI, r3
 801bcb4:	f3bf 8f6f 	isb	sy
 801bcb8:	f3bf 8f4f 	dsb	sy
 801bcbc:	617b      	str	r3, [r7, #20]
}
 801bcbe:	bf00      	nop
 801bcc0:	e7fe      	b.n	801bcc0 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 801bcc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bcc4:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 801bcc6:	69fb      	ldr	r3, [r7, #28]
 801bcc8:	2b00      	cmp	r3, #0
 801bcca:	d00d      	beq.n	801bce8 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 801bccc:	69fb      	ldr	r3, [r7, #28]
 801bcce:	2202      	movs	r2, #2
 801bcd0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 801bcd4:	69fb      	ldr	r3, [r7, #28]
 801bcd6:	9301      	str	r3, [sp, #4]
 801bcd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bcda:	9300      	str	r3, [sp, #0]
 801bcdc:	683b      	ldr	r3, [r7, #0]
 801bcde:	687a      	ldr	r2, [r7, #4]
 801bce0:	68b9      	ldr	r1, [r7, #8]
 801bce2:	68f8      	ldr	r0, [r7, #12]
 801bce4:	f000 f805 	bl	801bcf2 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 801bce8:	69fb      	ldr	r3, [r7, #28]
	}
 801bcea:	4618      	mov	r0, r3
 801bcec:	3720      	adds	r7, #32
 801bcee:	46bd      	mov	sp, r7
 801bcf0:	bd80      	pop	{r7, pc}

0801bcf2 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 801bcf2:	b580      	push	{r7, lr}
 801bcf4:	b086      	sub	sp, #24
 801bcf6:	af00      	add	r7, sp, #0
 801bcf8:	60f8      	str	r0, [r7, #12]
 801bcfa:	60b9      	str	r1, [r7, #8]
 801bcfc:	607a      	str	r2, [r7, #4]
 801bcfe:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 801bd00:	68bb      	ldr	r3, [r7, #8]
 801bd02:	2b00      	cmp	r3, #0
 801bd04:	d10a      	bne.n	801bd1c <prvInitialiseNewTimer+0x2a>
	__asm volatile
 801bd06:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bd0a:	f383 8811 	msr	BASEPRI, r3
 801bd0e:	f3bf 8f6f 	isb	sy
 801bd12:	f3bf 8f4f 	dsb	sy
 801bd16:	617b      	str	r3, [r7, #20]
}
 801bd18:	bf00      	nop
 801bd1a:	e7fe      	b.n	801bd1a <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 801bd1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bd1e:	2b00      	cmp	r3, #0
 801bd20:	d01e      	beq.n	801bd60 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 801bd22:	f000 facb 	bl	801c2bc <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 801bd26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bd28:	68fa      	ldr	r2, [r7, #12]
 801bd2a:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 801bd2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bd2e:	68ba      	ldr	r2, [r7, #8]
 801bd30:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 801bd32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bd34:	683a      	ldr	r2, [r7, #0]
 801bd36:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 801bd38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bd3a:	6a3a      	ldr	r2, [r7, #32]
 801bd3c:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 801bd3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bd40:	3304      	adds	r3, #4
 801bd42:	4618      	mov	r0, r3
 801bd44:	f7fd fd14 	bl	8019770 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 801bd48:	687b      	ldr	r3, [r7, #4]
 801bd4a:	2b00      	cmp	r3, #0
 801bd4c:	d008      	beq.n	801bd60 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 801bd4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bd50:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801bd54:	f043 0304 	orr.w	r3, r3, #4
 801bd58:	b2da      	uxtb	r2, r3
 801bd5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bd5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 801bd60:	bf00      	nop
 801bd62:	3718      	adds	r7, #24
 801bd64:	46bd      	mov	sp, r7
 801bd66:	bd80      	pop	{r7, pc}

0801bd68 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801bd68:	b580      	push	{r7, lr}
 801bd6a:	b08a      	sub	sp, #40	; 0x28
 801bd6c:	af00      	add	r7, sp, #0
 801bd6e:	60f8      	str	r0, [r7, #12]
 801bd70:	60b9      	str	r1, [r7, #8]
 801bd72:	607a      	str	r2, [r7, #4]
 801bd74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801bd76:	2300      	movs	r3, #0
 801bd78:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801bd7a:	68fb      	ldr	r3, [r7, #12]
 801bd7c:	2b00      	cmp	r3, #0
 801bd7e:	d10a      	bne.n	801bd96 <xTimerGenericCommand+0x2e>
	__asm volatile
 801bd80:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bd84:	f383 8811 	msr	BASEPRI, r3
 801bd88:	f3bf 8f6f 	isb	sy
 801bd8c:	f3bf 8f4f 	dsb	sy
 801bd90:	623b      	str	r3, [r7, #32]
}
 801bd92:	bf00      	nop
 801bd94:	e7fe      	b.n	801bd94 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801bd96:	4b1a      	ldr	r3, [pc, #104]	; (801be00 <xTimerGenericCommand+0x98>)
 801bd98:	681b      	ldr	r3, [r3, #0]
 801bd9a:	2b00      	cmp	r3, #0
 801bd9c:	d02a      	beq.n	801bdf4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801bd9e:	68bb      	ldr	r3, [r7, #8]
 801bda0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801bda2:	687b      	ldr	r3, [r7, #4]
 801bda4:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801bda6:	68fb      	ldr	r3, [r7, #12]
 801bda8:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801bdaa:	68bb      	ldr	r3, [r7, #8]
 801bdac:	2b05      	cmp	r3, #5
 801bdae:	dc18      	bgt.n	801bde2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801bdb0:	f7ff fcd6 	bl	801b760 <xTaskGetSchedulerState>
 801bdb4:	4603      	mov	r3, r0
 801bdb6:	2b02      	cmp	r3, #2
 801bdb8:	d109      	bne.n	801bdce <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801bdba:	4b11      	ldr	r3, [pc, #68]	; (801be00 <xTimerGenericCommand+0x98>)
 801bdbc:	6818      	ldr	r0, [r3, #0]
 801bdbe:	f107 0114 	add.w	r1, r7, #20
 801bdc2:	2300      	movs	r3, #0
 801bdc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801bdc6:	f7fd feed 	bl	8019ba4 <xQueueGenericSend>
 801bdca:	6278      	str	r0, [r7, #36]	; 0x24
 801bdcc:	e012      	b.n	801bdf4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801bdce:	4b0c      	ldr	r3, [pc, #48]	; (801be00 <xTimerGenericCommand+0x98>)
 801bdd0:	6818      	ldr	r0, [r3, #0]
 801bdd2:	f107 0114 	add.w	r1, r7, #20
 801bdd6:	2300      	movs	r3, #0
 801bdd8:	2200      	movs	r2, #0
 801bdda:	f7fd fee3 	bl	8019ba4 <xQueueGenericSend>
 801bdde:	6278      	str	r0, [r7, #36]	; 0x24
 801bde0:	e008      	b.n	801bdf4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801bde2:	4b07      	ldr	r3, [pc, #28]	; (801be00 <xTimerGenericCommand+0x98>)
 801bde4:	6818      	ldr	r0, [r3, #0]
 801bde6:	f107 0114 	add.w	r1, r7, #20
 801bdea:	2300      	movs	r3, #0
 801bdec:	683a      	ldr	r2, [r7, #0]
 801bdee:	f7fd ffd7 	bl	8019da0 <xQueueGenericSendFromISR>
 801bdf2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801bdf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801bdf6:	4618      	mov	r0, r3
 801bdf8:	3728      	adds	r7, #40	; 0x28
 801bdfa:	46bd      	mov	sp, r7
 801bdfc:	bd80      	pop	{r7, pc}
 801bdfe:	bf00      	nop
 801be00:	200009ec 	.word	0x200009ec

0801be04 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801be04:	b580      	push	{r7, lr}
 801be06:	b088      	sub	sp, #32
 801be08:	af02      	add	r7, sp, #8
 801be0a:	6078      	str	r0, [r7, #4]
 801be0c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801be0e:	4b22      	ldr	r3, [pc, #136]	; (801be98 <prvProcessExpiredTimer+0x94>)
 801be10:	681b      	ldr	r3, [r3, #0]
 801be12:	68db      	ldr	r3, [r3, #12]
 801be14:	68db      	ldr	r3, [r3, #12]
 801be16:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801be18:	697b      	ldr	r3, [r7, #20]
 801be1a:	3304      	adds	r3, #4
 801be1c:	4618      	mov	r0, r3
 801be1e:	f7fd fd11 	bl	8019844 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801be22:	697b      	ldr	r3, [r7, #20]
 801be24:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801be28:	f003 0304 	and.w	r3, r3, #4
 801be2c:	2b00      	cmp	r3, #0
 801be2e:	d022      	beq.n	801be76 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801be30:	697b      	ldr	r3, [r7, #20]
 801be32:	699a      	ldr	r2, [r3, #24]
 801be34:	687b      	ldr	r3, [r7, #4]
 801be36:	18d1      	adds	r1, r2, r3
 801be38:	687b      	ldr	r3, [r7, #4]
 801be3a:	683a      	ldr	r2, [r7, #0]
 801be3c:	6978      	ldr	r0, [r7, #20]
 801be3e:	f000 f8d1 	bl	801bfe4 <prvInsertTimerInActiveList>
 801be42:	4603      	mov	r3, r0
 801be44:	2b00      	cmp	r3, #0
 801be46:	d01f      	beq.n	801be88 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801be48:	2300      	movs	r3, #0
 801be4a:	9300      	str	r3, [sp, #0]
 801be4c:	2300      	movs	r3, #0
 801be4e:	687a      	ldr	r2, [r7, #4]
 801be50:	2100      	movs	r1, #0
 801be52:	6978      	ldr	r0, [r7, #20]
 801be54:	f7ff ff88 	bl	801bd68 <xTimerGenericCommand>
 801be58:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801be5a:	693b      	ldr	r3, [r7, #16]
 801be5c:	2b00      	cmp	r3, #0
 801be5e:	d113      	bne.n	801be88 <prvProcessExpiredTimer+0x84>
	__asm volatile
 801be60:	f04f 0350 	mov.w	r3, #80	; 0x50
 801be64:	f383 8811 	msr	BASEPRI, r3
 801be68:	f3bf 8f6f 	isb	sy
 801be6c:	f3bf 8f4f 	dsb	sy
 801be70:	60fb      	str	r3, [r7, #12]
}
 801be72:	bf00      	nop
 801be74:	e7fe      	b.n	801be74 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801be76:	697b      	ldr	r3, [r7, #20]
 801be78:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801be7c:	f023 0301 	bic.w	r3, r3, #1
 801be80:	b2da      	uxtb	r2, r3
 801be82:	697b      	ldr	r3, [r7, #20]
 801be84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801be88:	697b      	ldr	r3, [r7, #20]
 801be8a:	6a1b      	ldr	r3, [r3, #32]
 801be8c:	6978      	ldr	r0, [r7, #20]
 801be8e:	4798      	blx	r3
}
 801be90:	bf00      	nop
 801be92:	3718      	adds	r7, #24
 801be94:	46bd      	mov	sp, r7
 801be96:	bd80      	pop	{r7, pc}
 801be98:	200009e4 	.word	0x200009e4

0801be9c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801be9c:	b580      	push	{r7, lr}
 801be9e:	b084      	sub	sp, #16
 801bea0:	af00      	add	r7, sp, #0
 801bea2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801bea4:	f107 0308 	add.w	r3, r7, #8
 801bea8:	4618      	mov	r0, r3
 801beaa:	f000 f857 	bl	801bf5c <prvGetNextExpireTime>
 801beae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801beb0:	68bb      	ldr	r3, [r7, #8]
 801beb2:	4619      	mov	r1, r3
 801beb4:	68f8      	ldr	r0, [r7, #12]
 801beb6:	f000 f803 	bl	801bec0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801beba:	f000 f8d5 	bl	801c068 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801bebe:	e7f1      	b.n	801bea4 <prvTimerTask+0x8>

0801bec0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801bec0:	b580      	push	{r7, lr}
 801bec2:	b084      	sub	sp, #16
 801bec4:	af00      	add	r7, sp, #0
 801bec6:	6078      	str	r0, [r7, #4]
 801bec8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801beca:	f7ff f865 	bl	801af98 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801bece:	f107 0308 	add.w	r3, r7, #8
 801bed2:	4618      	mov	r0, r3
 801bed4:	f000 f866 	bl	801bfa4 <prvSampleTimeNow>
 801bed8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801beda:	68bb      	ldr	r3, [r7, #8]
 801bedc:	2b00      	cmp	r3, #0
 801bede:	d130      	bne.n	801bf42 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801bee0:	683b      	ldr	r3, [r7, #0]
 801bee2:	2b00      	cmp	r3, #0
 801bee4:	d10a      	bne.n	801befc <prvProcessTimerOrBlockTask+0x3c>
 801bee6:	687a      	ldr	r2, [r7, #4]
 801bee8:	68fb      	ldr	r3, [r7, #12]
 801beea:	429a      	cmp	r2, r3
 801beec:	d806      	bhi.n	801befc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801beee:	f7ff f861 	bl	801afb4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801bef2:	68f9      	ldr	r1, [r7, #12]
 801bef4:	6878      	ldr	r0, [r7, #4]
 801bef6:	f7ff ff85 	bl	801be04 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801befa:	e024      	b.n	801bf46 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801befc:	683b      	ldr	r3, [r7, #0]
 801befe:	2b00      	cmp	r3, #0
 801bf00:	d008      	beq.n	801bf14 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801bf02:	4b13      	ldr	r3, [pc, #76]	; (801bf50 <prvProcessTimerOrBlockTask+0x90>)
 801bf04:	681b      	ldr	r3, [r3, #0]
 801bf06:	681b      	ldr	r3, [r3, #0]
 801bf08:	2b00      	cmp	r3, #0
 801bf0a:	d101      	bne.n	801bf10 <prvProcessTimerOrBlockTask+0x50>
 801bf0c:	2301      	movs	r3, #1
 801bf0e:	e000      	b.n	801bf12 <prvProcessTimerOrBlockTask+0x52>
 801bf10:	2300      	movs	r3, #0
 801bf12:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801bf14:	4b0f      	ldr	r3, [pc, #60]	; (801bf54 <prvProcessTimerOrBlockTask+0x94>)
 801bf16:	6818      	ldr	r0, [r3, #0]
 801bf18:	687a      	ldr	r2, [r7, #4]
 801bf1a:	68fb      	ldr	r3, [r7, #12]
 801bf1c:	1ad3      	subs	r3, r2, r3
 801bf1e:	683a      	ldr	r2, [r7, #0]
 801bf20:	4619      	mov	r1, r3
 801bf22:	f7fe fc23 	bl	801a76c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801bf26:	f7ff f845 	bl	801afb4 <xTaskResumeAll>
 801bf2a:	4603      	mov	r3, r0
 801bf2c:	2b00      	cmp	r3, #0
 801bf2e:	d10a      	bne.n	801bf46 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801bf30:	4b09      	ldr	r3, [pc, #36]	; (801bf58 <prvProcessTimerOrBlockTask+0x98>)
 801bf32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801bf36:	601a      	str	r2, [r3, #0]
 801bf38:	f3bf 8f4f 	dsb	sy
 801bf3c:	f3bf 8f6f 	isb	sy
}
 801bf40:	e001      	b.n	801bf46 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801bf42:	f7ff f837 	bl	801afb4 <xTaskResumeAll>
}
 801bf46:	bf00      	nop
 801bf48:	3710      	adds	r7, #16
 801bf4a:	46bd      	mov	sp, r7
 801bf4c:	bd80      	pop	{r7, pc}
 801bf4e:	bf00      	nop
 801bf50:	200009e8 	.word	0x200009e8
 801bf54:	200009ec 	.word	0x200009ec
 801bf58:	e000ed04 	.word	0xe000ed04

0801bf5c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801bf5c:	b480      	push	{r7}
 801bf5e:	b085      	sub	sp, #20
 801bf60:	af00      	add	r7, sp, #0
 801bf62:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801bf64:	4b0e      	ldr	r3, [pc, #56]	; (801bfa0 <prvGetNextExpireTime+0x44>)
 801bf66:	681b      	ldr	r3, [r3, #0]
 801bf68:	681b      	ldr	r3, [r3, #0]
 801bf6a:	2b00      	cmp	r3, #0
 801bf6c:	d101      	bne.n	801bf72 <prvGetNextExpireTime+0x16>
 801bf6e:	2201      	movs	r2, #1
 801bf70:	e000      	b.n	801bf74 <prvGetNextExpireTime+0x18>
 801bf72:	2200      	movs	r2, #0
 801bf74:	687b      	ldr	r3, [r7, #4]
 801bf76:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801bf78:	687b      	ldr	r3, [r7, #4]
 801bf7a:	681b      	ldr	r3, [r3, #0]
 801bf7c:	2b00      	cmp	r3, #0
 801bf7e:	d105      	bne.n	801bf8c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801bf80:	4b07      	ldr	r3, [pc, #28]	; (801bfa0 <prvGetNextExpireTime+0x44>)
 801bf82:	681b      	ldr	r3, [r3, #0]
 801bf84:	68db      	ldr	r3, [r3, #12]
 801bf86:	681b      	ldr	r3, [r3, #0]
 801bf88:	60fb      	str	r3, [r7, #12]
 801bf8a:	e001      	b.n	801bf90 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801bf8c:	2300      	movs	r3, #0
 801bf8e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801bf90:	68fb      	ldr	r3, [r7, #12]
}
 801bf92:	4618      	mov	r0, r3
 801bf94:	3714      	adds	r7, #20
 801bf96:	46bd      	mov	sp, r7
 801bf98:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf9c:	4770      	bx	lr
 801bf9e:	bf00      	nop
 801bfa0:	200009e4 	.word	0x200009e4

0801bfa4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801bfa4:	b580      	push	{r7, lr}
 801bfa6:	b084      	sub	sp, #16
 801bfa8:	af00      	add	r7, sp, #0
 801bfaa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801bfac:	f7ff f89e 	bl	801b0ec <xTaskGetTickCount>
 801bfb0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801bfb2:	4b0b      	ldr	r3, [pc, #44]	; (801bfe0 <prvSampleTimeNow+0x3c>)
 801bfb4:	681b      	ldr	r3, [r3, #0]
 801bfb6:	68fa      	ldr	r2, [r7, #12]
 801bfb8:	429a      	cmp	r2, r3
 801bfba:	d205      	bcs.n	801bfc8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801bfbc:	f000 f91a 	bl	801c1f4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801bfc0:	687b      	ldr	r3, [r7, #4]
 801bfc2:	2201      	movs	r2, #1
 801bfc4:	601a      	str	r2, [r3, #0]
 801bfc6:	e002      	b.n	801bfce <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801bfc8:	687b      	ldr	r3, [r7, #4]
 801bfca:	2200      	movs	r2, #0
 801bfcc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801bfce:	4a04      	ldr	r2, [pc, #16]	; (801bfe0 <prvSampleTimeNow+0x3c>)
 801bfd0:	68fb      	ldr	r3, [r7, #12]
 801bfd2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801bfd4:	68fb      	ldr	r3, [r7, #12]
}
 801bfd6:	4618      	mov	r0, r3
 801bfd8:	3710      	adds	r7, #16
 801bfda:	46bd      	mov	sp, r7
 801bfdc:	bd80      	pop	{r7, pc}
 801bfde:	bf00      	nop
 801bfe0:	200009f4 	.word	0x200009f4

0801bfe4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801bfe4:	b580      	push	{r7, lr}
 801bfe6:	b086      	sub	sp, #24
 801bfe8:	af00      	add	r7, sp, #0
 801bfea:	60f8      	str	r0, [r7, #12]
 801bfec:	60b9      	str	r1, [r7, #8]
 801bfee:	607a      	str	r2, [r7, #4]
 801bff0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801bff2:	2300      	movs	r3, #0
 801bff4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801bff6:	68fb      	ldr	r3, [r7, #12]
 801bff8:	68ba      	ldr	r2, [r7, #8]
 801bffa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801bffc:	68fb      	ldr	r3, [r7, #12]
 801bffe:	68fa      	ldr	r2, [r7, #12]
 801c000:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801c002:	68ba      	ldr	r2, [r7, #8]
 801c004:	687b      	ldr	r3, [r7, #4]
 801c006:	429a      	cmp	r2, r3
 801c008:	d812      	bhi.n	801c030 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801c00a:	687a      	ldr	r2, [r7, #4]
 801c00c:	683b      	ldr	r3, [r7, #0]
 801c00e:	1ad2      	subs	r2, r2, r3
 801c010:	68fb      	ldr	r3, [r7, #12]
 801c012:	699b      	ldr	r3, [r3, #24]
 801c014:	429a      	cmp	r2, r3
 801c016:	d302      	bcc.n	801c01e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801c018:	2301      	movs	r3, #1
 801c01a:	617b      	str	r3, [r7, #20]
 801c01c:	e01b      	b.n	801c056 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801c01e:	4b10      	ldr	r3, [pc, #64]	; (801c060 <prvInsertTimerInActiveList+0x7c>)
 801c020:	681a      	ldr	r2, [r3, #0]
 801c022:	68fb      	ldr	r3, [r7, #12]
 801c024:	3304      	adds	r3, #4
 801c026:	4619      	mov	r1, r3
 801c028:	4610      	mov	r0, r2
 801c02a:	f7fd fbd2 	bl	80197d2 <vListInsert>
 801c02e:	e012      	b.n	801c056 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801c030:	687a      	ldr	r2, [r7, #4]
 801c032:	683b      	ldr	r3, [r7, #0]
 801c034:	429a      	cmp	r2, r3
 801c036:	d206      	bcs.n	801c046 <prvInsertTimerInActiveList+0x62>
 801c038:	68ba      	ldr	r2, [r7, #8]
 801c03a:	683b      	ldr	r3, [r7, #0]
 801c03c:	429a      	cmp	r2, r3
 801c03e:	d302      	bcc.n	801c046 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801c040:	2301      	movs	r3, #1
 801c042:	617b      	str	r3, [r7, #20]
 801c044:	e007      	b.n	801c056 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801c046:	4b07      	ldr	r3, [pc, #28]	; (801c064 <prvInsertTimerInActiveList+0x80>)
 801c048:	681a      	ldr	r2, [r3, #0]
 801c04a:	68fb      	ldr	r3, [r7, #12]
 801c04c:	3304      	adds	r3, #4
 801c04e:	4619      	mov	r1, r3
 801c050:	4610      	mov	r0, r2
 801c052:	f7fd fbbe 	bl	80197d2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 801c056:	697b      	ldr	r3, [r7, #20]
}
 801c058:	4618      	mov	r0, r3
 801c05a:	3718      	adds	r7, #24
 801c05c:	46bd      	mov	sp, r7
 801c05e:	bd80      	pop	{r7, pc}
 801c060:	200009e8 	.word	0x200009e8
 801c064:	200009e4 	.word	0x200009e4

0801c068 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801c068:	b580      	push	{r7, lr}
 801c06a:	b08c      	sub	sp, #48	; 0x30
 801c06c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801c06e:	e0ae      	b.n	801c1ce <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801c070:	68bb      	ldr	r3, [r7, #8]
 801c072:	2b00      	cmp	r3, #0
 801c074:	f2c0 80aa 	blt.w	801c1cc <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801c078:	693b      	ldr	r3, [r7, #16]
 801c07a:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801c07c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c07e:	695b      	ldr	r3, [r3, #20]
 801c080:	2b00      	cmp	r3, #0
 801c082:	d004      	beq.n	801c08e <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801c084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c086:	3304      	adds	r3, #4
 801c088:	4618      	mov	r0, r3
 801c08a:	f7fd fbdb 	bl	8019844 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801c08e:	1d3b      	adds	r3, r7, #4
 801c090:	4618      	mov	r0, r3
 801c092:	f7ff ff87 	bl	801bfa4 <prvSampleTimeNow>
 801c096:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 801c098:	68bb      	ldr	r3, [r7, #8]
 801c09a:	2b09      	cmp	r3, #9
 801c09c:	f200 8097 	bhi.w	801c1ce <prvProcessReceivedCommands+0x166>
 801c0a0:	a201      	add	r2, pc, #4	; (adr r2, 801c0a8 <prvProcessReceivedCommands+0x40>)
 801c0a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c0a6:	bf00      	nop
 801c0a8:	0801c0d1 	.word	0x0801c0d1
 801c0ac:	0801c0d1 	.word	0x0801c0d1
 801c0b0:	0801c0d1 	.word	0x0801c0d1
 801c0b4:	0801c145 	.word	0x0801c145
 801c0b8:	0801c159 	.word	0x0801c159
 801c0bc:	0801c1a3 	.word	0x0801c1a3
 801c0c0:	0801c0d1 	.word	0x0801c0d1
 801c0c4:	0801c0d1 	.word	0x0801c0d1
 801c0c8:	0801c145 	.word	0x0801c145
 801c0cc:	0801c159 	.word	0x0801c159
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801c0d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c0d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801c0d6:	f043 0301 	orr.w	r3, r3, #1
 801c0da:	b2da      	uxtb	r2, r3
 801c0dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c0de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801c0e2:	68fa      	ldr	r2, [r7, #12]
 801c0e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c0e6:	699b      	ldr	r3, [r3, #24]
 801c0e8:	18d1      	adds	r1, r2, r3
 801c0ea:	68fb      	ldr	r3, [r7, #12]
 801c0ec:	6a3a      	ldr	r2, [r7, #32]
 801c0ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c0f0:	f7ff ff78 	bl	801bfe4 <prvInsertTimerInActiveList>
 801c0f4:	4603      	mov	r3, r0
 801c0f6:	2b00      	cmp	r3, #0
 801c0f8:	d069      	beq.n	801c1ce <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801c0fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c0fc:	6a1b      	ldr	r3, [r3, #32]
 801c0fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c100:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801c102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c104:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801c108:	f003 0304 	and.w	r3, r3, #4
 801c10c:	2b00      	cmp	r3, #0
 801c10e:	d05e      	beq.n	801c1ce <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801c110:	68fa      	ldr	r2, [r7, #12]
 801c112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c114:	699b      	ldr	r3, [r3, #24]
 801c116:	441a      	add	r2, r3
 801c118:	2300      	movs	r3, #0
 801c11a:	9300      	str	r3, [sp, #0]
 801c11c:	2300      	movs	r3, #0
 801c11e:	2100      	movs	r1, #0
 801c120:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c122:	f7ff fe21 	bl	801bd68 <xTimerGenericCommand>
 801c126:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 801c128:	69fb      	ldr	r3, [r7, #28]
 801c12a:	2b00      	cmp	r3, #0
 801c12c:	d14f      	bne.n	801c1ce <prvProcessReceivedCommands+0x166>
	__asm volatile
 801c12e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c132:	f383 8811 	msr	BASEPRI, r3
 801c136:	f3bf 8f6f 	isb	sy
 801c13a:	f3bf 8f4f 	dsb	sy
 801c13e:	61bb      	str	r3, [r7, #24]
}
 801c140:	bf00      	nop
 801c142:	e7fe      	b.n	801c142 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801c144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c146:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801c14a:	f023 0301 	bic.w	r3, r3, #1
 801c14e:	b2da      	uxtb	r2, r3
 801c150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c152:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 801c156:	e03a      	b.n	801c1ce <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801c158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c15a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801c15e:	f043 0301 	orr.w	r3, r3, #1
 801c162:	b2da      	uxtb	r2, r3
 801c164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c166:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801c16a:	68fa      	ldr	r2, [r7, #12]
 801c16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c16e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801c170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c172:	699b      	ldr	r3, [r3, #24]
 801c174:	2b00      	cmp	r3, #0
 801c176:	d10a      	bne.n	801c18e <prvProcessReceivedCommands+0x126>
	__asm volatile
 801c178:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c17c:	f383 8811 	msr	BASEPRI, r3
 801c180:	f3bf 8f6f 	isb	sy
 801c184:	f3bf 8f4f 	dsb	sy
 801c188:	617b      	str	r3, [r7, #20]
}
 801c18a:	bf00      	nop
 801c18c:	e7fe      	b.n	801c18c <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801c18e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c190:	699a      	ldr	r2, [r3, #24]
 801c192:	6a3b      	ldr	r3, [r7, #32]
 801c194:	18d1      	adds	r1, r2, r3
 801c196:	6a3b      	ldr	r3, [r7, #32]
 801c198:	6a3a      	ldr	r2, [r7, #32]
 801c19a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c19c:	f7ff ff22 	bl	801bfe4 <prvInsertTimerInActiveList>
					break;
 801c1a0:	e015      	b.n	801c1ce <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801c1a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c1a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801c1a8:	f003 0302 	and.w	r3, r3, #2
 801c1ac:	2b00      	cmp	r3, #0
 801c1ae:	d103      	bne.n	801c1b8 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 801c1b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c1b2:	f000 fbdd 	bl	801c970 <vPortFree>
 801c1b6:	e00a      	b.n	801c1ce <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801c1b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c1ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801c1be:	f023 0301 	bic.w	r3, r3, #1
 801c1c2:	b2da      	uxtb	r2, r3
 801c1c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c1c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801c1ca:	e000      	b.n	801c1ce <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 801c1cc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801c1ce:	4b08      	ldr	r3, [pc, #32]	; (801c1f0 <prvProcessReceivedCommands+0x188>)
 801c1d0:	681b      	ldr	r3, [r3, #0]
 801c1d2:	f107 0108 	add.w	r1, r7, #8
 801c1d6:	2200      	movs	r2, #0
 801c1d8:	4618      	mov	r0, r3
 801c1da:	f7fd ff09 	bl	8019ff0 <xQueueReceive>
 801c1de:	4603      	mov	r3, r0
 801c1e0:	2b00      	cmp	r3, #0
 801c1e2:	f47f af45 	bne.w	801c070 <prvProcessReceivedCommands+0x8>
	}
}
 801c1e6:	bf00      	nop
 801c1e8:	bf00      	nop
 801c1ea:	3728      	adds	r7, #40	; 0x28
 801c1ec:	46bd      	mov	sp, r7
 801c1ee:	bd80      	pop	{r7, pc}
 801c1f0:	200009ec 	.word	0x200009ec

0801c1f4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801c1f4:	b580      	push	{r7, lr}
 801c1f6:	b088      	sub	sp, #32
 801c1f8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801c1fa:	e048      	b.n	801c28e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801c1fc:	4b2d      	ldr	r3, [pc, #180]	; (801c2b4 <prvSwitchTimerLists+0xc0>)
 801c1fe:	681b      	ldr	r3, [r3, #0]
 801c200:	68db      	ldr	r3, [r3, #12]
 801c202:	681b      	ldr	r3, [r3, #0]
 801c204:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801c206:	4b2b      	ldr	r3, [pc, #172]	; (801c2b4 <prvSwitchTimerLists+0xc0>)
 801c208:	681b      	ldr	r3, [r3, #0]
 801c20a:	68db      	ldr	r3, [r3, #12]
 801c20c:	68db      	ldr	r3, [r3, #12]
 801c20e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801c210:	68fb      	ldr	r3, [r7, #12]
 801c212:	3304      	adds	r3, #4
 801c214:	4618      	mov	r0, r3
 801c216:	f7fd fb15 	bl	8019844 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801c21a:	68fb      	ldr	r3, [r7, #12]
 801c21c:	6a1b      	ldr	r3, [r3, #32]
 801c21e:	68f8      	ldr	r0, [r7, #12]
 801c220:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801c222:	68fb      	ldr	r3, [r7, #12]
 801c224:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801c228:	f003 0304 	and.w	r3, r3, #4
 801c22c:	2b00      	cmp	r3, #0
 801c22e:	d02e      	beq.n	801c28e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801c230:	68fb      	ldr	r3, [r7, #12]
 801c232:	699b      	ldr	r3, [r3, #24]
 801c234:	693a      	ldr	r2, [r7, #16]
 801c236:	4413      	add	r3, r2
 801c238:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801c23a:	68ba      	ldr	r2, [r7, #8]
 801c23c:	693b      	ldr	r3, [r7, #16]
 801c23e:	429a      	cmp	r2, r3
 801c240:	d90e      	bls.n	801c260 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801c242:	68fb      	ldr	r3, [r7, #12]
 801c244:	68ba      	ldr	r2, [r7, #8]
 801c246:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801c248:	68fb      	ldr	r3, [r7, #12]
 801c24a:	68fa      	ldr	r2, [r7, #12]
 801c24c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801c24e:	4b19      	ldr	r3, [pc, #100]	; (801c2b4 <prvSwitchTimerLists+0xc0>)
 801c250:	681a      	ldr	r2, [r3, #0]
 801c252:	68fb      	ldr	r3, [r7, #12]
 801c254:	3304      	adds	r3, #4
 801c256:	4619      	mov	r1, r3
 801c258:	4610      	mov	r0, r2
 801c25a:	f7fd faba 	bl	80197d2 <vListInsert>
 801c25e:	e016      	b.n	801c28e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801c260:	2300      	movs	r3, #0
 801c262:	9300      	str	r3, [sp, #0]
 801c264:	2300      	movs	r3, #0
 801c266:	693a      	ldr	r2, [r7, #16]
 801c268:	2100      	movs	r1, #0
 801c26a:	68f8      	ldr	r0, [r7, #12]
 801c26c:	f7ff fd7c 	bl	801bd68 <xTimerGenericCommand>
 801c270:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801c272:	687b      	ldr	r3, [r7, #4]
 801c274:	2b00      	cmp	r3, #0
 801c276:	d10a      	bne.n	801c28e <prvSwitchTimerLists+0x9a>
	__asm volatile
 801c278:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c27c:	f383 8811 	msr	BASEPRI, r3
 801c280:	f3bf 8f6f 	isb	sy
 801c284:	f3bf 8f4f 	dsb	sy
 801c288:	603b      	str	r3, [r7, #0]
}
 801c28a:	bf00      	nop
 801c28c:	e7fe      	b.n	801c28c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801c28e:	4b09      	ldr	r3, [pc, #36]	; (801c2b4 <prvSwitchTimerLists+0xc0>)
 801c290:	681b      	ldr	r3, [r3, #0]
 801c292:	681b      	ldr	r3, [r3, #0]
 801c294:	2b00      	cmp	r3, #0
 801c296:	d1b1      	bne.n	801c1fc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801c298:	4b06      	ldr	r3, [pc, #24]	; (801c2b4 <prvSwitchTimerLists+0xc0>)
 801c29a:	681b      	ldr	r3, [r3, #0]
 801c29c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801c29e:	4b06      	ldr	r3, [pc, #24]	; (801c2b8 <prvSwitchTimerLists+0xc4>)
 801c2a0:	681b      	ldr	r3, [r3, #0]
 801c2a2:	4a04      	ldr	r2, [pc, #16]	; (801c2b4 <prvSwitchTimerLists+0xc0>)
 801c2a4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801c2a6:	4a04      	ldr	r2, [pc, #16]	; (801c2b8 <prvSwitchTimerLists+0xc4>)
 801c2a8:	697b      	ldr	r3, [r7, #20]
 801c2aa:	6013      	str	r3, [r2, #0]
}
 801c2ac:	bf00      	nop
 801c2ae:	3718      	adds	r7, #24
 801c2b0:	46bd      	mov	sp, r7
 801c2b2:	bd80      	pop	{r7, pc}
 801c2b4:	200009e4 	.word	0x200009e4
 801c2b8:	200009e8 	.word	0x200009e8

0801c2bc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801c2bc:	b580      	push	{r7, lr}
 801c2be:	b082      	sub	sp, #8
 801c2c0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801c2c2:	f000 f967 	bl	801c594 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801c2c6:	4b15      	ldr	r3, [pc, #84]	; (801c31c <prvCheckForValidListAndQueue+0x60>)
 801c2c8:	681b      	ldr	r3, [r3, #0]
 801c2ca:	2b00      	cmp	r3, #0
 801c2cc:	d120      	bne.n	801c310 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801c2ce:	4814      	ldr	r0, [pc, #80]	; (801c320 <prvCheckForValidListAndQueue+0x64>)
 801c2d0:	f7fd fa2e 	bl	8019730 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801c2d4:	4813      	ldr	r0, [pc, #76]	; (801c324 <prvCheckForValidListAndQueue+0x68>)
 801c2d6:	f7fd fa2b 	bl	8019730 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801c2da:	4b13      	ldr	r3, [pc, #76]	; (801c328 <prvCheckForValidListAndQueue+0x6c>)
 801c2dc:	4a10      	ldr	r2, [pc, #64]	; (801c320 <prvCheckForValidListAndQueue+0x64>)
 801c2de:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801c2e0:	4b12      	ldr	r3, [pc, #72]	; (801c32c <prvCheckForValidListAndQueue+0x70>)
 801c2e2:	4a10      	ldr	r2, [pc, #64]	; (801c324 <prvCheckForValidListAndQueue+0x68>)
 801c2e4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801c2e6:	2300      	movs	r3, #0
 801c2e8:	9300      	str	r3, [sp, #0]
 801c2ea:	4b11      	ldr	r3, [pc, #68]	; (801c330 <prvCheckForValidListAndQueue+0x74>)
 801c2ec:	4a11      	ldr	r2, [pc, #68]	; (801c334 <prvCheckForValidListAndQueue+0x78>)
 801c2ee:	210c      	movs	r1, #12
 801c2f0:	200a      	movs	r0, #10
 801c2f2:	f7fd fb39 	bl	8019968 <xQueueGenericCreateStatic>
 801c2f6:	4603      	mov	r3, r0
 801c2f8:	4a08      	ldr	r2, [pc, #32]	; (801c31c <prvCheckForValidListAndQueue+0x60>)
 801c2fa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801c2fc:	4b07      	ldr	r3, [pc, #28]	; (801c31c <prvCheckForValidListAndQueue+0x60>)
 801c2fe:	681b      	ldr	r3, [r3, #0]
 801c300:	2b00      	cmp	r3, #0
 801c302:	d005      	beq.n	801c310 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801c304:	4b05      	ldr	r3, [pc, #20]	; (801c31c <prvCheckForValidListAndQueue+0x60>)
 801c306:	681b      	ldr	r3, [r3, #0]
 801c308:	490b      	ldr	r1, [pc, #44]	; (801c338 <prvCheckForValidListAndQueue+0x7c>)
 801c30a:	4618      	mov	r0, r3
 801c30c:	f7fe fa04 	bl	801a718 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801c310:	f000 f970 	bl	801c5f4 <vPortExitCritical>
}
 801c314:	bf00      	nop
 801c316:	46bd      	mov	sp, r7
 801c318:	bd80      	pop	{r7, pc}
 801c31a:	bf00      	nop
 801c31c:	200009ec 	.word	0x200009ec
 801c320:	200009bc 	.word	0x200009bc
 801c324:	200009d0 	.word	0x200009d0
 801c328:	200009e4 	.word	0x200009e4
 801c32c:	200009e8 	.word	0x200009e8
 801c330:	20000a70 	.word	0x20000a70
 801c334:	200009f8 	.word	0x200009f8
 801c338:	0802fd38 	.word	0x0802fd38

0801c33c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801c33c:	b480      	push	{r7}
 801c33e:	b085      	sub	sp, #20
 801c340:	af00      	add	r7, sp, #0
 801c342:	60f8      	str	r0, [r7, #12]
 801c344:	60b9      	str	r1, [r7, #8]
 801c346:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801c348:	68fb      	ldr	r3, [r7, #12]
 801c34a:	3b04      	subs	r3, #4
 801c34c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801c34e:	68fb      	ldr	r3, [r7, #12]
 801c350:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801c354:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801c356:	68fb      	ldr	r3, [r7, #12]
 801c358:	3b04      	subs	r3, #4
 801c35a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801c35c:	68bb      	ldr	r3, [r7, #8]
 801c35e:	f023 0201 	bic.w	r2, r3, #1
 801c362:	68fb      	ldr	r3, [r7, #12]
 801c364:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801c366:	68fb      	ldr	r3, [r7, #12]
 801c368:	3b04      	subs	r3, #4
 801c36a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801c36c:	4a0c      	ldr	r2, [pc, #48]	; (801c3a0 <pxPortInitialiseStack+0x64>)
 801c36e:	68fb      	ldr	r3, [r7, #12]
 801c370:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801c372:	68fb      	ldr	r3, [r7, #12]
 801c374:	3b14      	subs	r3, #20
 801c376:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801c378:	687a      	ldr	r2, [r7, #4]
 801c37a:	68fb      	ldr	r3, [r7, #12]
 801c37c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801c37e:	68fb      	ldr	r3, [r7, #12]
 801c380:	3b04      	subs	r3, #4
 801c382:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801c384:	68fb      	ldr	r3, [r7, #12]
 801c386:	f06f 0202 	mvn.w	r2, #2
 801c38a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801c38c:	68fb      	ldr	r3, [r7, #12]
 801c38e:	3b20      	subs	r3, #32
 801c390:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801c392:	68fb      	ldr	r3, [r7, #12]
}
 801c394:	4618      	mov	r0, r3
 801c396:	3714      	adds	r7, #20
 801c398:	46bd      	mov	sp, r7
 801c39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c39e:	4770      	bx	lr
 801c3a0:	0801c3a5 	.word	0x0801c3a5

0801c3a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801c3a4:	b480      	push	{r7}
 801c3a6:	b085      	sub	sp, #20
 801c3a8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801c3aa:	2300      	movs	r3, #0
 801c3ac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801c3ae:	4b12      	ldr	r3, [pc, #72]	; (801c3f8 <prvTaskExitError+0x54>)
 801c3b0:	681b      	ldr	r3, [r3, #0]
 801c3b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c3b6:	d00a      	beq.n	801c3ce <prvTaskExitError+0x2a>
	__asm volatile
 801c3b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c3bc:	f383 8811 	msr	BASEPRI, r3
 801c3c0:	f3bf 8f6f 	isb	sy
 801c3c4:	f3bf 8f4f 	dsb	sy
 801c3c8:	60fb      	str	r3, [r7, #12]
}
 801c3ca:	bf00      	nop
 801c3cc:	e7fe      	b.n	801c3cc <prvTaskExitError+0x28>
	__asm volatile
 801c3ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c3d2:	f383 8811 	msr	BASEPRI, r3
 801c3d6:	f3bf 8f6f 	isb	sy
 801c3da:	f3bf 8f4f 	dsb	sy
 801c3de:	60bb      	str	r3, [r7, #8]
}
 801c3e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801c3e2:	bf00      	nop
 801c3e4:	687b      	ldr	r3, [r7, #4]
 801c3e6:	2b00      	cmp	r3, #0
 801c3e8:	d0fc      	beq.n	801c3e4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801c3ea:	bf00      	nop
 801c3ec:	bf00      	nop
 801c3ee:	3714      	adds	r7, #20
 801c3f0:	46bd      	mov	sp, r7
 801c3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c3f6:	4770      	bx	lr
 801c3f8:	20000014 	.word	0x20000014
 801c3fc:	00000000 	.word	0x00000000

0801c400 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 801c400:	4b07      	ldr	r3, [pc, #28]	; (801c420 <pxCurrentTCBConst2>)
 801c402:	6819      	ldr	r1, [r3, #0]
 801c404:	6808      	ldr	r0, [r1, #0]
 801c406:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c40a:	f380 8809 	msr	PSP, r0
 801c40e:	f3bf 8f6f 	isb	sy
 801c412:	f04f 0000 	mov.w	r0, #0
 801c416:	f380 8811 	msr	BASEPRI, r0
 801c41a:	4770      	bx	lr
 801c41c:	f3af 8000 	nop.w

0801c420 <pxCurrentTCBConst2>:
 801c420:	20000890 	.word	0x20000890
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 801c424:	bf00      	nop
 801c426:	bf00      	nop

0801c428 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 801c428:	4808      	ldr	r0, [pc, #32]	; (801c44c <prvPortStartFirstTask+0x24>)
 801c42a:	6800      	ldr	r0, [r0, #0]
 801c42c:	6800      	ldr	r0, [r0, #0]
 801c42e:	f380 8808 	msr	MSP, r0
 801c432:	f04f 0000 	mov.w	r0, #0
 801c436:	f380 8814 	msr	CONTROL, r0
 801c43a:	b662      	cpsie	i
 801c43c:	b661      	cpsie	f
 801c43e:	f3bf 8f4f 	dsb	sy
 801c442:	f3bf 8f6f 	isb	sy
 801c446:	df00      	svc	0
 801c448:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801c44a:	bf00      	nop
 801c44c:	e000ed08 	.word	0xe000ed08

0801c450 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 801c450:	b580      	push	{r7, lr}
 801c452:	b086      	sub	sp, #24
 801c454:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 801c456:	4b46      	ldr	r3, [pc, #280]	; (801c570 <xPortStartScheduler+0x120>)
 801c458:	681b      	ldr	r3, [r3, #0]
 801c45a:	4a46      	ldr	r2, [pc, #280]	; (801c574 <xPortStartScheduler+0x124>)
 801c45c:	4293      	cmp	r3, r2
 801c45e:	d10a      	bne.n	801c476 <xPortStartScheduler+0x26>
	__asm volatile
 801c460:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c464:	f383 8811 	msr	BASEPRI, r3
 801c468:	f3bf 8f6f 	isb	sy
 801c46c:	f3bf 8f4f 	dsb	sy
 801c470:	613b      	str	r3, [r7, #16]
}
 801c472:	bf00      	nop
 801c474:	e7fe      	b.n	801c474 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 801c476:	4b3e      	ldr	r3, [pc, #248]	; (801c570 <xPortStartScheduler+0x120>)
 801c478:	681b      	ldr	r3, [r3, #0]
 801c47a:	4a3f      	ldr	r2, [pc, #252]	; (801c578 <xPortStartScheduler+0x128>)
 801c47c:	4293      	cmp	r3, r2
 801c47e:	d10a      	bne.n	801c496 <xPortStartScheduler+0x46>
	__asm volatile
 801c480:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c484:	f383 8811 	msr	BASEPRI, r3
 801c488:	f3bf 8f6f 	isb	sy
 801c48c:	f3bf 8f4f 	dsb	sy
 801c490:	60fb      	str	r3, [r7, #12]
}
 801c492:	bf00      	nop
 801c494:	e7fe      	b.n	801c494 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801c496:	4b39      	ldr	r3, [pc, #228]	; (801c57c <xPortStartScheduler+0x12c>)
 801c498:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801c49a:	697b      	ldr	r3, [r7, #20]
 801c49c:	781b      	ldrb	r3, [r3, #0]
 801c49e:	b2db      	uxtb	r3, r3
 801c4a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801c4a2:	697b      	ldr	r3, [r7, #20]
 801c4a4:	22ff      	movs	r2, #255	; 0xff
 801c4a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801c4a8:	697b      	ldr	r3, [r7, #20]
 801c4aa:	781b      	ldrb	r3, [r3, #0]
 801c4ac:	b2db      	uxtb	r3, r3
 801c4ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801c4b0:	78fb      	ldrb	r3, [r7, #3]
 801c4b2:	b2db      	uxtb	r3, r3
 801c4b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 801c4b8:	b2da      	uxtb	r2, r3
 801c4ba:	4b31      	ldr	r3, [pc, #196]	; (801c580 <xPortStartScheduler+0x130>)
 801c4bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801c4be:	4b31      	ldr	r3, [pc, #196]	; (801c584 <xPortStartScheduler+0x134>)
 801c4c0:	2207      	movs	r2, #7
 801c4c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801c4c4:	e009      	b.n	801c4da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 801c4c6:	4b2f      	ldr	r3, [pc, #188]	; (801c584 <xPortStartScheduler+0x134>)
 801c4c8:	681b      	ldr	r3, [r3, #0]
 801c4ca:	3b01      	subs	r3, #1
 801c4cc:	4a2d      	ldr	r2, [pc, #180]	; (801c584 <xPortStartScheduler+0x134>)
 801c4ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801c4d0:	78fb      	ldrb	r3, [r7, #3]
 801c4d2:	b2db      	uxtb	r3, r3
 801c4d4:	005b      	lsls	r3, r3, #1
 801c4d6:	b2db      	uxtb	r3, r3
 801c4d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801c4da:	78fb      	ldrb	r3, [r7, #3]
 801c4dc:	b2db      	uxtb	r3, r3
 801c4de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801c4e2:	2b80      	cmp	r3, #128	; 0x80
 801c4e4:	d0ef      	beq.n	801c4c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801c4e6:	4b27      	ldr	r3, [pc, #156]	; (801c584 <xPortStartScheduler+0x134>)
 801c4e8:	681b      	ldr	r3, [r3, #0]
 801c4ea:	f1c3 0307 	rsb	r3, r3, #7
 801c4ee:	2b04      	cmp	r3, #4
 801c4f0:	d00a      	beq.n	801c508 <xPortStartScheduler+0xb8>
	__asm volatile
 801c4f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c4f6:	f383 8811 	msr	BASEPRI, r3
 801c4fa:	f3bf 8f6f 	isb	sy
 801c4fe:	f3bf 8f4f 	dsb	sy
 801c502:	60bb      	str	r3, [r7, #8]
}
 801c504:	bf00      	nop
 801c506:	e7fe      	b.n	801c506 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801c508:	4b1e      	ldr	r3, [pc, #120]	; (801c584 <xPortStartScheduler+0x134>)
 801c50a:	681b      	ldr	r3, [r3, #0]
 801c50c:	021b      	lsls	r3, r3, #8
 801c50e:	4a1d      	ldr	r2, [pc, #116]	; (801c584 <xPortStartScheduler+0x134>)
 801c510:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801c512:	4b1c      	ldr	r3, [pc, #112]	; (801c584 <xPortStartScheduler+0x134>)
 801c514:	681b      	ldr	r3, [r3, #0]
 801c516:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801c51a:	4a1a      	ldr	r2, [pc, #104]	; (801c584 <xPortStartScheduler+0x134>)
 801c51c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801c51e:	687b      	ldr	r3, [r7, #4]
 801c520:	b2da      	uxtb	r2, r3
 801c522:	697b      	ldr	r3, [r7, #20]
 801c524:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801c526:	4b18      	ldr	r3, [pc, #96]	; (801c588 <xPortStartScheduler+0x138>)
 801c528:	681b      	ldr	r3, [r3, #0]
 801c52a:	4a17      	ldr	r2, [pc, #92]	; (801c588 <xPortStartScheduler+0x138>)
 801c52c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801c530:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801c532:	4b15      	ldr	r3, [pc, #84]	; (801c588 <xPortStartScheduler+0x138>)
 801c534:	681b      	ldr	r3, [r3, #0]
 801c536:	4a14      	ldr	r2, [pc, #80]	; (801c588 <xPortStartScheduler+0x138>)
 801c538:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801c53c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801c53e:	f000 f8dd 	bl	801c6fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801c542:	4b12      	ldr	r3, [pc, #72]	; (801c58c <xPortStartScheduler+0x13c>)
 801c544:	2200      	movs	r2, #0
 801c546:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801c548:	f000 f8fc 	bl	801c744 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801c54c:	4b10      	ldr	r3, [pc, #64]	; (801c590 <xPortStartScheduler+0x140>)
 801c54e:	681b      	ldr	r3, [r3, #0]
 801c550:	4a0f      	ldr	r2, [pc, #60]	; (801c590 <xPortStartScheduler+0x140>)
 801c552:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801c556:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801c558:	f7ff ff66 	bl	801c428 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801c55c:	f7fe fe8e 	bl	801b27c <vTaskSwitchContext>
	prvTaskExitError();
 801c560:	f7ff ff20 	bl	801c3a4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801c564:	2300      	movs	r3, #0
}
 801c566:	4618      	mov	r0, r3
 801c568:	3718      	adds	r7, #24
 801c56a:	46bd      	mov	sp, r7
 801c56c:	bd80      	pop	{r7, pc}
 801c56e:	bf00      	nop
 801c570:	e000ed00 	.word	0xe000ed00
 801c574:	410fc271 	.word	0x410fc271
 801c578:	410fc270 	.word	0x410fc270
 801c57c:	e000e400 	.word	0xe000e400
 801c580:	20000ab8 	.word	0x20000ab8
 801c584:	20000abc 	.word	0x20000abc
 801c588:	e000ed20 	.word	0xe000ed20
 801c58c:	20000014 	.word	0x20000014
 801c590:	e000ef34 	.word	0xe000ef34

0801c594 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801c594:	b480      	push	{r7}
 801c596:	b083      	sub	sp, #12
 801c598:	af00      	add	r7, sp, #0
	__asm volatile
 801c59a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c59e:	f383 8811 	msr	BASEPRI, r3
 801c5a2:	f3bf 8f6f 	isb	sy
 801c5a6:	f3bf 8f4f 	dsb	sy
 801c5aa:	607b      	str	r3, [r7, #4]
}
 801c5ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801c5ae:	4b0f      	ldr	r3, [pc, #60]	; (801c5ec <vPortEnterCritical+0x58>)
 801c5b0:	681b      	ldr	r3, [r3, #0]
 801c5b2:	3301      	adds	r3, #1
 801c5b4:	4a0d      	ldr	r2, [pc, #52]	; (801c5ec <vPortEnterCritical+0x58>)
 801c5b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801c5b8:	4b0c      	ldr	r3, [pc, #48]	; (801c5ec <vPortEnterCritical+0x58>)
 801c5ba:	681b      	ldr	r3, [r3, #0]
 801c5bc:	2b01      	cmp	r3, #1
 801c5be:	d10f      	bne.n	801c5e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801c5c0:	4b0b      	ldr	r3, [pc, #44]	; (801c5f0 <vPortEnterCritical+0x5c>)
 801c5c2:	681b      	ldr	r3, [r3, #0]
 801c5c4:	b2db      	uxtb	r3, r3
 801c5c6:	2b00      	cmp	r3, #0
 801c5c8:	d00a      	beq.n	801c5e0 <vPortEnterCritical+0x4c>
	__asm volatile
 801c5ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c5ce:	f383 8811 	msr	BASEPRI, r3
 801c5d2:	f3bf 8f6f 	isb	sy
 801c5d6:	f3bf 8f4f 	dsb	sy
 801c5da:	603b      	str	r3, [r7, #0]
}
 801c5dc:	bf00      	nop
 801c5de:	e7fe      	b.n	801c5de <vPortEnterCritical+0x4a>
	}
}
 801c5e0:	bf00      	nop
 801c5e2:	370c      	adds	r7, #12
 801c5e4:	46bd      	mov	sp, r7
 801c5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c5ea:	4770      	bx	lr
 801c5ec:	20000014 	.word	0x20000014
 801c5f0:	e000ed04 	.word	0xe000ed04

0801c5f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801c5f4:	b480      	push	{r7}
 801c5f6:	b083      	sub	sp, #12
 801c5f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801c5fa:	4b12      	ldr	r3, [pc, #72]	; (801c644 <vPortExitCritical+0x50>)
 801c5fc:	681b      	ldr	r3, [r3, #0]
 801c5fe:	2b00      	cmp	r3, #0
 801c600:	d10a      	bne.n	801c618 <vPortExitCritical+0x24>
	__asm volatile
 801c602:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c606:	f383 8811 	msr	BASEPRI, r3
 801c60a:	f3bf 8f6f 	isb	sy
 801c60e:	f3bf 8f4f 	dsb	sy
 801c612:	607b      	str	r3, [r7, #4]
}
 801c614:	bf00      	nop
 801c616:	e7fe      	b.n	801c616 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 801c618:	4b0a      	ldr	r3, [pc, #40]	; (801c644 <vPortExitCritical+0x50>)
 801c61a:	681b      	ldr	r3, [r3, #0]
 801c61c:	3b01      	subs	r3, #1
 801c61e:	4a09      	ldr	r2, [pc, #36]	; (801c644 <vPortExitCritical+0x50>)
 801c620:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801c622:	4b08      	ldr	r3, [pc, #32]	; (801c644 <vPortExitCritical+0x50>)
 801c624:	681b      	ldr	r3, [r3, #0]
 801c626:	2b00      	cmp	r3, #0
 801c628:	d105      	bne.n	801c636 <vPortExitCritical+0x42>
 801c62a:	2300      	movs	r3, #0
 801c62c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801c62e:	683b      	ldr	r3, [r7, #0]
 801c630:	f383 8811 	msr	BASEPRI, r3
}
 801c634:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801c636:	bf00      	nop
 801c638:	370c      	adds	r7, #12
 801c63a:	46bd      	mov	sp, r7
 801c63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c640:	4770      	bx	lr
 801c642:	bf00      	nop
 801c644:	20000014 	.word	0x20000014
	...

0801c650 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 801c650:	f3ef 8009 	mrs	r0, PSP
 801c654:	f3bf 8f6f 	isb	sy
 801c658:	4b15      	ldr	r3, [pc, #84]	; (801c6b0 <pxCurrentTCBConst>)
 801c65a:	681a      	ldr	r2, [r3, #0]
 801c65c:	f01e 0f10 	tst.w	lr, #16
 801c660:	bf08      	it	eq
 801c662:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 801c666:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c66a:	6010      	str	r0, [r2, #0]
 801c66c:	e92d 0009 	stmdb	sp!, {r0, r3}
 801c670:	f04f 0050 	mov.w	r0, #80	; 0x50
 801c674:	f380 8811 	msr	BASEPRI, r0
 801c678:	f3bf 8f4f 	dsb	sy
 801c67c:	f3bf 8f6f 	isb	sy
 801c680:	f7fe fdfc 	bl	801b27c <vTaskSwitchContext>
 801c684:	f04f 0000 	mov.w	r0, #0
 801c688:	f380 8811 	msr	BASEPRI, r0
 801c68c:	bc09      	pop	{r0, r3}
 801c68e:	6819      	ldr	r1, [r3, #0]
 801c690:	6808      	ldr	r0, [r1, #0]
 801c692:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c696:	f01e 0f10 	tst.w	lr, #16
 801c69a:	bf08      	it	eq
 801c69c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 801c6a0:	f380 8809 	msr	PSP, r0
 801c6a4:	f3bf 8f6f 	isb	sy
 801c6a8:	4770      	bx	lr
 801c6aa:	bf00      	nop
 801c6ac:	f3af 8000 	nop.w

0801c6b0 <pxCurrentTCBConst>:
 801c6b0:	20000890 	.word	0x20000890
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 801c6b4:	bf00      	nop
 801c6b6:	bf00      	nop

0801c6b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 801c6b8:	b580      	push	{r7, lr}
 801c6ba:	b082      	sub	sp, #8
 801c6bc:	af00      	add	r7, sp, #0
	__asm volatile
 801c6be:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c6c2:	f383 8811 	msr	BASEPRI, r3
 801c6c6:	f3bf 8f6f 	isb	sy
 801c6ca:	f3bf 8f4f 	dsb	sy
 801c6ce:	607b      	str	r3, [r7, #4]
}
 801c6d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 801c6d2:	f7fe fd1b 	bl	801b10c <xTaskIncrementTick>
 801c6d6:	4603      	mov	r3, r0
 801c6d8:	2b00      	cmp	r3, #0
 801c6da:	d003      	beq.n	801c6e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801c6dc:	4b06      	ldr	r3, [pc, #24]	; (801c6f8 <SysTick_Handler+0x40>)
 801c6de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801c6e2:	601a      	str	r2, [r3, #0]
 801c6e4:	2300      	movs	r3, #0
 801c6e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 801c6e8:	683b      	ldr	r3, [r7, #0]
 801c6ea:	f383 8811 	msr	BASEPRI, r3
}
 801c6ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 801c6f0:	bf00      	nop
 801c6f2:	3708      	adds	r7, #8
 801c6f4:	46bd      	mov	sp, r7
 801c6f6:	bd80      	pop	{r7, pc}
 801c6f8:	e000ed04 	.word	0xe000ed04

0801c6fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801c6fc:	b480      	push	{r7}
 801c6fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801c700:	4b0b      	ldr	r3, [pc, #44]	; (801c730 <vPortSetupTimerInterrupt+0x34>)
 801c702:	2200      	movs	r2, #0
 801c704:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801c706:	4b0b      	ldr	r3, [pc, #44]	; (801c734 <vPortSetupTimerInterrupt+0x38>)
 801c708:	2200      	movs	r2, #0
 801c70a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801c70c:	4b0a      	ldr	r3, [pc, #40]	; (801c738 <vPortSetupTimerInterrupt+0x3c>)
 801c70e:	681b      	ldr	r3, [r3, #0]
 801c710:	4a0a      	ldr	r2, [pc, #40]	; (801c73c <vPortSetupTimerInterrupt+0x40>)
 801c712:	fba2 2303 	umull	r2, r3, r2, r3
 801c716:	099b      	lsrs	r3, r3, #6
 801c718:	4a09      	ldr	r2, [pc, #36]	; (801c740 <vPortSetupTimerInterrupt+0x44>)
 801c71a:	3b01      	subs	r3, #1
 801c71c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801c71e:	4b04      	ldr	r3, [pc, #16]	; (801c730 <vPortSetupTimerInterrupt+0x34>)
 801c720:	2207      	movs	r2, #7
 801c722:	601a      	str	r2, [r3, #0]
}
 801c724:	bf00      	nop
 801c726:	46bd      	mov	sp, r7
 801c728:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c72c:	4770      	bx	lr
 801c72e:	bf00      	nop
 801c730:	e000e010 	.word	0xe000e010
 801c734:	e000e018 	.word	0xe000e018
 801c738:	20000008 	.word	0x20000008
 801c73c:	10624dd3 	.word	0x10624dd3
 801c740:	e000e014 	.word	0xe000e014

0801c744 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 801c744:	f8df 000c 	ldr.w	r0, [pc, #12]	; 801c754 <vPortEnableVFP+0x10>
 801c748:	6801      	ldr	r1, [r0, #0]
 801c74a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801c74e:	6001      	str	r1, [r0, #0]
 801c750:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801c752:	bf00      	nop
 801c754:	e000ed88 	.word	0xe000ed88

0801c758 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801c758:	b480      	push	{r7}
 801c75a:	b085      	sub	sp, #20
 801c75c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801c75e:	f3ef 8305 	mrs	r3, IPSR
 801c762:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801c764:	68fb      	ldr	r3, [r7, #12]
 801c766:	2b0f      	cmp	r3, #15
 801c768:	d914      	bls.n	801c794 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801c76a:	4a17      	ldr	r2, [pc, #92]	; (801c7c8 <vPortValidateInterruptPriority+0x70>)
 801c76c:	68fb      	ldr	r3, [r7, #12]
 801c76e:	4413      	add	r3, r2
 801c770:	781b      	ldrb	r3, [r3, #0]
 801c772:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801c774:	4b15      	ldr	r3, [pc, #84]	; (801c7cc <vPortValidateInterruptPriority+0x74>)
 801c776:	781b      	ldrb	r3, [r3, #0]
 801c778:	7afa      	ldrb	r2, [r7, #11]
 801c77a:	429a      	cmp	r2, r3
 801c77c:	d20a      	bcs.n	801c794 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801c77e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c782:	f383 8811 	msr	BASEPRI, r3
 801c786:	f3bf 8f6f 	isb	sy
 801c78a:	f3bf 8f4f 	dsb	sy
 801c78e:	607b      	str	r3, [r7, #4]
}
 801c790:	bf00      	nop
 801c792:	e7fe      	b.n	801c792 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801c794:	4b0e      	ldr	r3, [pc, #56]	; (801c7d0 <vPortValidateInterruptPriority+0x78>)
 801c796:	681b      	ldr	r3, [r3, #0]
 801c798:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801c79c:	4b0d      	ldr	r3, [pc, #52]	; (801c7d4 <vPortValidateInterruptPriority+0x7c>)
 801c79e:	681b      	ldr	r3, [r3, #0]
 801c7a0:	429a      	cmp	r2, r3
 801c7a2:	d90a      	bls.n	801c7ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 801c7a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c7a8:	f383 8811 	msr	BASEPRI, r3
 801c7ac:	f3bf 8f6f 	isb	sy
 801c7b0:	f3bf 8f4f 	dsb	sy
 801c7b4:	603b      	str	r3, [r7, #0]
}
 801c7b6:	bf00      	nop
 801c7b8:	e7fe      	b.n	801c7b8 <vPortValidateInterruptPriority+0x60>
	}
 801c7ba:	bf00      	nop
 801c7bc:	3714      	adds	r7, #20
 801c7be:	46bd      	mov	sp, r7
 801c7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c7c4:	4770      	bx	lr
 801c7c6:	bf00      	nop
 801c7c8:	e000e3f0 	.word	0xe000e3f0
 801c7cc:	20000ab8 	.word	0x20000ab8
 801c7d0:	e000ed0c 	.word	0xe000ed0c
 801c7d4:	20000abc 	.word	0x20000abc

0801c7d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801c7d8:	b580      	push	{r7, lr}
 801c7da:	b08a      	sub	sp, #40	; 0x28
 801c7dc:	af00      	add	r7, sp, #0
 801c7de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801c7e0:	2300      	movs	r3, #0
 801c7e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801c7e4:	f7fe fbd8 	bl	801af98 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801c7e8:	4b5b      	ldr	r3, [pc, #364]	; (801c958 <pvPortMalloc+0x180>)
 801c7ea:	681b      	ldr	r3, [r3, #0]
 801c7ec:	2b00      	cmp	r3, #0
 801c7ee:	d101      	bne.n	801c7f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801c7f0:	f000 f920 	bl	801ca34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801c7f4:	4b59      	ldr	r3, [pc, #356]	; (801c95c <pvPortMalloc+0x184>)
 801c7f6:	681a      	ldr	r2, [r3, #0]
 801c7f8:	687b      	ldr	r3, [r7, #4]
 801c7fa:	4013      	ands	r3, r2
 801c7fc:	2b00      	cmp	r3, #0
 801c7fe:	f040 8093 	bne.w	801c928 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801c802:	687b      	ldr	r3, [r7, #4]
 801c804:	2b00      	cmp	r3, #0
 801c806:	d01d      	beq.n	801c844 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 801c808:	2208      	movs	r2, #8
 801c80a:	687b      	ldr	r3, [r7, #4]
 801c80c:	4413      	add	r3, r2
 801c80e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801c810:	687b      	ldr	r3, [r7, #4]
 801c812:	f003 0307 	and.w	r3, r3, #7
 801c816:	2b00      	cmp	r3, #0
 801c818:	d014      	beq.n	801c844 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801c81a:	687b      	ldr	r3, [r7, #4]
 801c81c:	f023 0307 	bic.w	r3, r3, #7
 801c820:	3308      	adds	r3, #8
 801c822:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801c824:	687b      	ldr	r3, [r7, #4]
 801c826:	f003 0307 	and.w	r3, r3, #7
 801c82a:	2b00      	cmp	r3, #0
 801c82c:	d00a      	beq.n	801c844 <pvPortMalloc+0x6c>
	__asm volatile
 801c82e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c832:	f383 8811 	msr	BASEPRI, r3
 801c836:	f3bf 8f6f 	isb	sy
 801c83a:	f3bf 8f4f 	dsb	sy
 801c83e:	617b      	str	r3, [r7, #20]
}
 801c840:	bf00      	nop
 801c842:	e7fe      	b.n	801c842 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801c844:	687b      	ldr	r3, [r7, #4]
 801c846:	2b00      	cmp	r3, #0
 801c848:	d06e      	beq.n	801c928 <pvPortMalloc+0x150>
 801c84a:	4b45      	ldr	r3, [pc, #276]	; (801c960 <pvPortMalloc+0x188>)
 801c84c:	681b      	ldr	r3, [r3, #0]
 801c84e:	687a      	ldr	r2, [r7, #4]
 801c850:	429a      	cmp	r2, r3
 801c852:	d869      	bhi.n	801c928 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801c854:	4b43      	ldr	r3, [pc, #268]	; (801c964 <pvPortMalloc+0x18c>)
 801c856:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801c858:	4b42      	ldr	r3, [pc, #264]	; (801c964 <pvPortMalloc+0x18c>)
 801c85a:	681b      	ldr	r3, [r3, #0]
 801c85c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801c85e:	e004      	b.n	801c86a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 801c860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c862:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801c864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c866:	681b      	ldr	r3, [r3, #0]
 801c868:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801c86a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c86c:	685b      	ldr	r3, [r3, #4]
 801c86e:	687a      	ldr	r2, [r7, #4]
 801c870:	429a      	cmp	r2, r3
 801c872:	d903      	bls.n	801c87c <pvPortMalloc+0xa4>
 801c874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c876:	681b      	ldr	r3, [r3, #0]
 801c878:	2b00      	cmp	r3, #0
 801c87a:	d1f1      	bne.n	801c860 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801c87c:	4b36      	ldr	r3, [pc, #216]	; (801c958 <pvPortMalloc+0x180>)
 801c87e:	681b      	ldr	r3, [r3, #0]
 801c880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c882:	429a      	cmp	r2, r3
 801c884:	d050      	beq.n	801c928 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801c886:	6a3b      	ldr	r3, [r7, #32]
 801c888:	681b      	ldr	r3, [r3, #0]
 801c88a:	2208      	movs	r2, #8
 801c88c:	4413      	add	r3, r2
 801c88e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801c890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c892:	681a      	ldr	r2, [r3, #0]
 801c894:	6a3b      	ldr	r3, [r7, #32]
 801c896:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801c898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c89a:	685a      	ldr	r2, [r3, #4]
 801c89c:	687b      	ldr	r3, [r7, #4]
 801c89e:	1ad2      	subs	r2, r2, r3
 801c8a0:	2308      	movs	r3, #8
 801c8a2:	005b      	lsls	r3, r3, #1
 801c8a4:	429a      	cmp	r2, r3
 801c8a6:	d91f      	bls.n	801c8e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801c8a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c8aa:	687b      	ldr	r3, [r7, #4]
 801c8ac:	4413      	add	r3, r2
 801c8ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801c8b0:	69bb      	ldr	r3, [r7, #24]
 801c8b2:	f003 0307 	and.w	r3, r3, #7
 801c8b6:	2b00      	cmp	r3, #0
 801c8b8:	d00a      	beq.n	801c8d0 <pvPortMalloc+0xf8>
	__asm volatile
 801c8ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c8be:	f383 8811 	msr	BASEPRI, r3
 801c8c2:	f3bf 8f6f 	isb	sy
 801c8c6:	f3bf 8f4f 	dsb	sy
 801c8ca:	613b      	str	r3, [r7, #16]
}
 801c8cc:	bf00      	nop
 801c8ce:	e7fe      	b.n	801c8ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801c8d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c8d2:	685a      	ldr	r2, [r3, #4]
 801c8d4:	687b      	ldr	r3, [r7, #4]
 801c8d6:	1ad2      	subs	r2, r2, r3
 801c8d8:	69bb      	ldr	r3, [r7, #24]
 801c8da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801c8dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c8de:	687a      	ldr	r2, [r7, #4]
 801c8e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801c8e2:	69b8      	ldr	r0, [r7, #24]
 801c8e4:	f000 f908 	bl	801caf8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801c8e8:	4b1d      	ldr	r3, [pc, #116]	; (801c960 <pvPortMalloc+0x188>)
 801c8ea:	681a      	ldr	r2, [r3, #0]
 801c8ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c8ee:	685b      	ldr	r3, [r3, #4]
 801c8f0:	1ad3      	subs	r3, r2, r3
 801c8f2:	4a1b      	ldr	r2, [pc, #108]	; (801c960 <pvPortMalloc+0x188>)
 801c8f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801c8f6:	4b1a      	ldr	r3, [pc, #104]	; (801c960 <pvPortMalloc+0x188>)
 801c8f8:	681a      	ldr	r2, [r3, #0]
 801c8fa:	4b1b      	ldr	r3, [pc, #108]	; (801c968 <pvPortMalloc+0x190>)
 801c8fc:	681b      	ldr	r3, [r3, #0]
 801c8fe:	429a      	cmp	r2, r3
 801c900:	d203      	bcs.n	801c90a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801c902:	4b17      	ldr	r3, [pc, #92]	; (801c960 <pvPortMalloc+0x188>)
 801c904:	681b      	ldr	r3, [r3, #0]
 801c906:	4a18      	ldr	r2, [pc, #96]	; (801c968 <pvPortMalloc+0x190>)
 801c908:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801c90a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c90c:	685a      	ldr	r2, [r3, #4]
 801c90e:	4b13      	ldr	r3, [pc, #76]	; (801c95c <pvPortMalloc+0x184>)
 801c910:	681b      	ldr	r3, [r3, #0]
 801c912:	431a      	orrs	r2, r3
 801c914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c916:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801c918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c91a:	2200      	movs	r2, #0
 801c91c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801c91e:	4b13      	ldr	r3, [pc, #76]	; (801c96c <pvPortMalloc+0x194>)
 801c920:	681b      	ldr	r3, [r3, #0]
 801c922:	3301      	adds	r3, #1
 801c924:	4a11      	ldr	r2, [pc, #68]	; (801c96c <pvPortMalloc+0x194>)
 801c926:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801c928:	f7fe fb44 	bl	801afb4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801c92c:	69fb      	ldr	r3, [r7, #28]
 801c92e:	f003 0307 	and.w	r3, r3, #7
 801c932:	2b00      	cmp	r3, #0
 801c934:	d00a      	beq.n	801c94c <pvPortMalloc+0x174>
	__asm volatile
 801c936:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c93a:	f383 8811 	msr	BASEPRI, r3
 801c93e:	f3bf 8f6f 	isb	sy
 801c942:	f3bf 8f4f 	dsb	sy
 801c946:	60fb      	str	r3, [r7, #12]
}
 801c948:	bf00      	nop
 801c94a:	e7fe      	b.n	801c94a <pvPortMalloc+0x172>
	return pvReturn;
 801c94c:	69fb      	ldr	r3, [r7, #28]
}
 801c94e:	4618      	mov	r0, r3
 801c950:	3728      	adds	r7, #40	; 0x28
 801c952:	46bd      	mov	sp, r7
 801c954:	bd80      	pop	{r7, pc}
 801c956:	bf00      	nop
 801c958:	20007ff8 	.word	0x20007ff8
 801c95c:	2000800c 	.word	0x2000800c
 801c960:	20007ffc 	.word	0x20007ffc
 801c964:	20007ff0 	.word	0x20007ff0
 801c968:	20008000 	.word	0x20008000
 801c96c:	20008004 	.word	0x20008004

0801c970 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801c970:	b580      	push	{r7, lr}
 801c972:	b086      	sub	sp, #24
 801c974:	af00      	add	r7, sp, #0
 801c976:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801c978:	687b      	ldr	r3, [r7, #4]
 801c97a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801c97c:	687b      	ldr	r3, [r7, #4]
 801c97e:	2b00      	cmp	r3, #0
 801c980:	d04d      	beq.n	801ca1e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801c982:	2308      	movs	r3, #8
 801c984:	425b      	negs	r3, r3
 801c986:	697a      	ldr	r2, [r7, #20]
 801c988:	4413      	add	r3, r2
 801c98a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801c98c:	697b      	ldr	r3, [r7, #20]
 801c98e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801c990:	693b      	ldr	r3, [r7, #16]
 801c992:	685a      	ldr	r2, [r3, #4]
 801c994:	4b24      	ldr	r3, [pc, #144]	; (801ca28 <vPortFree+0xb8>)
 801c996:	681b      	ldr	r3, [r3, #0]
 801c998:	4013      	ands	r3, r2
 801c99a:	2b00      	cmp	r3, #0
 801c99c:	d10a      	bne.n	801c9b4 <vPortFree+0x44>
	__asm volatile
 801c99e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c9a2:	f383 8811 	msr	BASEPRI, r3
 801c9a6:	f3bf 8f6f 	isb	sy
 801c9aa:	f3bf 8f4f 	dsb	sy
 801c9ae:	60fb      	str	r3, [r7, #12]
}
 801c9b0:	bf00      	nop
 801c9b2:	e7fe      	b.n	801c9b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801c9b4:	693b      	ldr	r3, [r7, #16]
 801c9b6:	681b      	ldr	r3, [r3, #0]
 801c9b8:	2b00      	cmp	r3, #0
 801c9ba:	d00a      	beq.n	801c9d2 <vPortFree+0x62>
	__asm volatile
 801c9bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c9c0:	f383 8811 	msr	BASEPRI, r3
 801c9c4:	f3bf 8f6f 	isb	sy
 801c9c8:	f3bf 8f4f 	dsb	sy
 801c9cc:	60bb      	str	r3, [r7, #8]
}
 801c9ce:	bf00      	nop
 801c9d0:	e7fe      	b.n	801c9d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801c9d2:	693b      	ldr	r3, [r7, #16]
 801c9d4:	685a      	ldr	r2, [r3, #4]
 801c9d6:	4b14      	ldr	r3, [pc, #80]	; (801ca28 <vPortFree+0xb8>)
 801c9d8:	681b      	ldr	r3, [r3, #0]
 801c9da:	4013      	ands	r3, r2
 801c9dc:	2b00      	cmp	r3, #0
 801c9de:	d01e      	beq.n	801ca1e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801c9e0:	693b      	ldr	r3, [r7, #16]
 801c9e2:	681b      	ldr	r3, [r3, #0]
 801c9e4:	2b00      	cmp	r3, #0
 801c9e6:	d11a      	bne.n	801ca1e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801c9e8:	693b      	ldr	r3, [r7, #16]
 801c9ea:	685a      	ldr	r2, [r3, #4]
 801c9ec:	4b0e      	ldr	r3, [pc, #56]	; (801ca28 <vPortFree+0xb8>)
 801c9ee:	681b      	ldr	r3, [r3, #0]
 801c9f0:	43db      	mvns	r3, r3
 801c9f2:	401a      	ands	r2, r3
 801c9f4:	693b      	ldr	r3, [r7, #16]
 801c9f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801c9f8:	f7fe face 	bl	801af98 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801c9fc:	693b      	ldr	r3, [r7, #16]
 801c9fe:	685a      	ldr	r2, [r3, #4]
 801ca00:	4b0a      	ldr	r3, [pc, #40]	; (801ca2c <vPortFree+0xbc>)
 801ca02:	681b      	ldr	r3, [r3, #0]
 801ca04:	4413      	add	r3, r2
 801ca06:	4a09      	ldr	r2, [pc, #36]	; (801ca2c <vPortFree+0xbc>)
 801ca08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801ca0a:	6938      	ldr	r0, [r7, #16]
 801ca0c:	f000 f874 	bl	801caf8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801ca10:	4b07      	ldr	r3, [pc, #28]	; (801ca30 <vPortFree+0xc0>)
 801ca12:	681b      	ldr	r3, [r3, #0]
 801ca14:	3301      	adds	r3, #1
 801ca16:	4a06      	ldr	r2, [pc, #24]	; (801ca30 <vPortFree+0xc0>)
 801ca18:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801ca1a:	f7fe facb 	bl	801afb4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801ca1e:	bf00      	nop
 801ca20:	3718      	adds	r7, #24
 801ca22:	46bd      	mov	sp, r7
 801ca24:	bd80      	pop	{r7, pc}
 801ca26:	bf00      	nop
 801ca28:	2000800c 	.word	0x2000800c
 801ca2c:	20007ffc 	.word	0x20007ffc
 801ca30:	20008008 	.word	0x20008008

0801ca34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801ca34:	b480      	push	{r7}
 801ca36:	b085      	sub	sp, #20
 801ca38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801ca3a:	f247 5330 	movw	r3, #30000	; 0x7530
 801ca3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801ca40:	4b27      	ldr	r3, [pc, #156]	; (801cae0 <prvHeapInit+0xac>)
 801ca42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801ca44:	68fb      	ldr	r3, [r7, #12]
 801ca46:	f003 0307 	and.w	r3, r3, #7
 801ca4a:	2b00      	cmp	r3, #0
 801ca4c:	d00c      	beq.n	801ca68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801ca4e:	68fb      	ldr	r3, [r7, #12]
 801ca50:	3307      	adds	r3, #7
 801ca52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801ca54:	68fb      	ldr	r3, [r7, #12]
 801ca56:	f023 0307 	bic.w	r3, r3, #7
 801ca5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801ca5c:	68ba      	ldr	r2, [r7, #8]
 801ca5e:	68fb      	ldr	r3, [r7, #12]
 801ca60:	1ad3      	subs	r3, r2, r3
 801ca62:	4a1f      	ldr	r2, [pc, #124]	; (801cae0 <prvHeapInit+0xac>)
 801ca64:	4413      	add	r3, r2
 801ca66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801ca68:	68fb      	ldr	r3, [r7, #12]
 801ca6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801ca6c:	4a1d      	ldr	r2, [pc, #116]	; (801cae4 <prvHeapInit+0xb0>)
 801ca6e:	687b      	ldr	r3, [r7, #4]
 801ca70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801ca72:	4b1c      	ldr	r3, [pc, #112]	; (801cae4 <prvHeapInit+0xb0>)
 801ca74:	2200      	movs	r2, #0
 801ca76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801ca78:	687b      	ldr	r3, [r7, #4]
 801ca7a:	68ba      	ldr	r2, [r7, #8]
 801ca7c:	4413      	add	r3, r2
 801ca7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801ca80:	2208      	movs	r2, #8
 801ca82:	68fb      	ldr	r3, [r7, #12]
 801ca84:	1a9b      	subs	r3, r3, r2
 801ca86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801ca88:	68fb      	ldr	r3, [r7, #12]
 801ca8a:	f023 0307 	bic.w	r3, r3, #7
 801ca8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801ca90:	68fb      	ldr	r3, [r7, #12]
 801ca92:	4a15      	ldr	r2, [pc, #84]	; (801cae8 <prvHeapInit+0xb4>)
 801ca94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801ca96:	4b14      	ldr	r3, [pc, #80]	; (801cae8 <prvHeapInit+0xb4>)
 801ca98:	681b      	ldr	r3, [r3, #0]
 801ca9a:	2200      	movs	r2, #0
 801ca9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801ca9e:	4b12      	ldr	r3, [pc, #72]	; (801cae8 <prvHeapInit+0xb4>)
 801caa0:	681b      	ldr	r3, [r3, #0]
 801caa2:	2200      	movs	r2, #0
 801caa4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801caa6:	687b      	ldr	r3, [r7, #4]
 801caa8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801caaa:	683b      	ldr	r3, [r7, #0]
 801caac:	68fa      	ldr	r2, [r7, #12]
 801caae:	1ad2      	subs	r2, r2, r3
 801cab0:	683b      	ldr	r3, [r7, #0]
 801cab2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801cab4:	4b0c      	ldr	r3, [pc, #48]	; (801cae8 <prvHeapInit+0xb4>)
 801cab6:	681a      	ldr	r2, [r3, #0]
 801cab8:	683b      	ldr	r3, [r7, #0]
 801caba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801cabc:	683b      	ldr	r3, [r7, #0]
 801cabe:	685b      	ldr	r3, [r3, #4]
 801cac0:	4a0a      	ldr	r2, [pc, #40]	; (801caec <prvHeapInit+0xb8>)
 801cac2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801cac4:	683b      	ldr	r3, [r7, #0]
 801cac6:	685b      	ldr	r3, [r3, #4]
 801cac8:	4a09      	ldr	r2, [pc, #36]	; (801caf0 <prvHeapInit+0xbc>)
 801caca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801cacc:	4b09      	ldr	r3, [pc, #36]	; (801caf4 <prvHeapInit+0xc0>)
 801cace:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801cad2:	601a      	str	r2, [r3, #0]
}
 801cad4:	bf00      	nop
 801cad6:	3714      	adds	r7, #20
 801cad8:	46bd      	mov	sp, r7
 801cada:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cade:	4770      	bx	lr
 801cae0:	20000ac0 	.word	0x20000ac0
 801cae4:	20007ff0 	.word	0x20007ff0
 801cae8:	20007ff8 	.word	0x20007ff8
 801caec:	20008000 	.word	0x20008000
 801caf0:	20007ffc 	.word	0x20007ffc
 801caf4:	2000800c 	.word	0x2000800c

0801caf8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801caf8:	b480      	push	{r7}
 801cafa:	b085      	sub	sp, #20
 801cafc:	af00      	add	r7, sp, #0
 801cafe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801cb00:	4b28      	ldr	r3, [pc, #160]	; (801cba4 <prvInsertBlockIntoFreeList+0xac>)
 801cb02:	60fb      	str	r3, [r7, #12]
 801cb04:	e002      	b.n	801cb0c <prvInsertBlockIntoFreeList+0x14>
 801cb06:	68fb      	ldr	r3, [r7, #12]
 801cb08:	681b      	ldr	r3, [r3, #0]
 801cb0a:	60fb      	str	r3, [r7, #12]
 801cb0c:	68fb      	ldr	r3, [r7, #12]
 801cb0e:	681b      	ldr	r3, [r3, #0]
 801cb10:	687a      	ldr	r2, [r7, #4]
 801cb12:	429a      	cmp	r2, r3
 801cb14:	d8f7      	bhi.n	801cb06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801cb16:	68fb      	ldr	r3, [r7, #12]
 801cb18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801cb1a:	68fb      	ldr	r3, [r7, #12]
 801cb1c:	685b      	ldr	r3, [r3, #4]
 801cb1e:	68ba      	ldr	r2, [r7, #8]
 801cb20:	4413      	add	r3, r2
 801cb22:	687a      	ldr	r2, [r7, #4]
 801cb24:	429a      	cmp	r2, r3
 801cb26:	d108      	bne.n	801cb3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801cb28:	68fb      	ldr	r3, [r7, #12]
 801cb2a:	685a      	ldr	r2, [r3, #4]
 801cb2c:	687b      	ldr	r3, [r7, #4]
 801cb2e:	685b      	ldr	r3, [r3, #4]
 801cb30:	441a      	add	r2, r3
 801cb32:	68fb      	ldr	r3, [r7, #12]
 801cb34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801cb36:	68fb      	ldr	r3, [r7, #12]
 801cb38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801cb3a:	687b      	ldr	r3, [r7, #4]
 801cb3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801cb3e:	687b      	ldr	r3, [r7, #4]
 801cb40:	685b      	ldr	r3, [r3, #4]
 801cb42:	68ba      	ldr	r2, [r7, #8]
 801cb44:	441a      	add	r2, r3
 801cb46:	68fb      	ldr	r3, [r7, #12]
 801cb48:	681b      	ldr	r3, [r3, #0]
 801cb4a:	429a      	cmp	r2, r3
 801cb4c:	d118      	bne.n	801cb80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801cb4e:	68fb      	ldr	r3, [r7, #12]
 801cb50:	681a      	ldr	r2, [r3, #0]
 801cb52:	4b15      	ldr	r3, [pc, #84]	; (801cba8 <prvInsertBlockIntoFreeList+0xb0>)
 801cb54:	681b      	ldr	r3, [r3, #0]
 801cb56:	429a      	cmp	r2, r3
 801cb58:	d00d      	beq.n	801cb76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801cb5a:	687b      	ldr	r3, [r7, #4]
 801cb5c:	685a      	ldr	r2, [r3, #4]
 801cb5e:	68fb      	ldr	r3, [r7, #12]
 801cb60:	681b      	ldr	r3, [r3, #0]
 801cb62:	685b      	ldr	r3, [r3, #4]
 801cb64:	441a      	add	r2, r3
 801cb66:	687b      	ldr	r3, [r7, #4]
 801cb68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801cb6a:	68fb      	ldr	r3, [r7, #12]
 801cb6c:	681b      	ldr	r3, [r3, #0]
 801cb6e:	681a      	ldr	r2, [r3, #0]
 801cb70:	687b      	ldr	r3, [r7, #4]
 801cb72:	601a      	str	r2, [r3, #0]
 801cb74:	e008      	b.n	801cb88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801cb76:	4b0c      	ldr	r3, [pc, #48]	; (801cba8 <prvInsertBlockIntoFreeList+0xb0>)
 801cb78:	681a      	ldr	r2, [r3, #0]
 801cb7a:	687b      	ldr	r3, [r7, #4]
 801cb7c:	601a      	str	r2, [r3, #0]
 801cb7e:	e003      	b.n	801cb88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801cb80:	68fb      	ldr	r3, [r7, #12]
 801cb82:	681a      	ldr	r2, [r3, #0]
 801cb84:	687b      	ldr	r3, [r7, #4]
 801cb86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801cb88:	68fa      	ldr	r2, [r7, #12]
 801cb8a:	687b      	ldr	r3, [r7, #4]
 801cb8c:	429a      	cmp	r2, r3
 801cb8e:	d002      	beq.n	801cb96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801cb90:	68fb      	ldr	r3, [r7, #12]
 801cb92:	687a      	ldr	r2, [r7, #4]
 801cb94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801cb96:	bf00      	nop
 801cb98:	3714      	adds	r7, #20
 801cb9a:	46bd      	mov	sp, r7
 801cb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cba0:	4770      	bx	lr
 801cba2:	bf00      	nop
 801cba4:	20007ff0 	.word	0x20007ff0
 801cba8:	20007ff8 	.word	0x20007ff8

0801cbac <ThreadCallRingCenterTask>:
extern osMutexId UartMutexHandle;
extern control_register_struct control_registers;


void ThreadCallRingCenterTask(void const * argument)
{
 801cbac:	b580      	push	{r7, lr}
 801cbae:	b082      	sub	sp, #8
 801cbb0:	af00      	add	r7, sp, #0
 801cbb2:	6078      	str	r0, [r7, #4]



	for(;;)
	{
		osThreadSuspend(CallRingCenterTaskHandle); // переходим в спящий режим и ждем
 801cbb4:	4b0e      	ldr	r3, [pc, #56]	; (801cbf0 <ThreadCallRingCenterTask+0x44>)
 801cbb6:	681b      	ldr	r3, [r3, #0]
 801cbb8:	4618      	mov	r0, r3
 801cbba:	f7fc fd8b 	bl	80196d4 <osThreadSuspend>

		while(control_registers.gprs_call_reg != CALL_ON) // пока регистр флага дозвона в центр не включен, ничего не делаем
 801cbbe:	bf00      	nop
 801cbc0:	4b0c      	ldr	r3, [pc, #48]	; (801cbf4 <ThreadCallRingCenterTask+0x48>)
 801cbc2:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 801cbc6:	2b01      	cmp	r3, #1
 801cbc8:	d1fa      	bne.n	801cbc0 <ThreadCallRingCenterTask+0x14>
		{

		}

			osMutexWait(UartMutexHandle, osWaitForever);
 801cbca:	4b0b      	ldr	r3, [pc, #44]	; (801cbf8 <ThreadCallRingCenterTask+0x4c>)
 801cbcc:	681b      	ldr	r3, [r3, #0]
 801cbce:	f04f 31ff 	mov.w	r1, #4294967295
 801cbd2:	4618      	mov	r0, r3
 801cbd4:	f7fc fb68 	bl	80192a8 <osMutexWait>
			request_to_server(); // делаем запрос на сервер
 801cbd8:	f00e fa78 	bl	802b0cc <request_to_server>
			//while(request_to_server() != AT_OK){}; // делаем запрос на сервер
			osMutexRelease(UartMutexHandle);
 801cbdc:	4b06      	ldr	r3, [pc, #24]	; (801cbf8 <ThreadCallRingCenterTask+0x4c>)
 801cbde:	681b      	ldr	r3, [r3, #0]
 801cbe0:	4618      	mov	r0, r3
 801cbe2:	f7fc fbaf 	bl	8019344 <osMutexRelease>

		osDelay(5000); // ждем, если флаг не сброшен запрос повторяется
 801cbe6:	f241 3088 	movw	r0, #5000	; 0x1388
 801cbea:	f7fc fa7c 	bl	80190e6 <osDelay>
		osThreadSuspend(CallRingCenterTaskHandle); // переходим в спящий режим и ждем
 801cbee:	e7e1      	b.n	801cbb4 <ThreadCallRingCenterTask+0x8>
 801cbf0:	200082a0 	.word	0x200082a0
 801cbf4:	2000b000 	.word	0x2000b000
 801cbf8:	2000971c 	.word	0x2000971c

0801cbfc <ThreadDisplayTask>:
};

uint8_t spi_buf[4];

void ThreadDisplayTask(void const * argument)
{
 801cbfc:	b580      	push	{r7, lr}
 801cbfe:	b084      	sub	sp, #16
 801cc00:	af00      	add	r7, sp, #0
 801cc02:	6078      	str	r0, [r7, #4]


	uint8_t ibutton_temp_reg_h;
	uint8_t ibutton_temp_reg_l;

	HAL_TIM_Base_Start_IT(&htim2);
 801cc04:	4858      	ldr	r0, [pc, #352]	; (801cd68 <ThreadDisplayTask+0x16c>)
 801cc06:	f7fa fc8f 	bl	8017528 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 801cc0a:	4858      	ldr	r0, [pc, #352]	; (801cd6c <ThreadDisplayTask+0x170>)
 801cc0c:	f7fa fc8c 	bl	8017528 <HAL_TIM_Base_Start_IT>

	addr_test = IBUTTON1_BYTE_0_REG + ((B1-A1)/8)*16 + (B1-A1)%8 ;
 801cc10:	4b57      	ldr	r3, [pc, #348]	; (801cd70 <ThreadDisplayTask+0x174>)
 801cc12:	f641 22d7 	movw	r2, #6871	; 0x1ad7
 801cc16:	601a      	str	r2, [r3, #0]

	spi_buf[0] = 0xFF;
 801cc18:	4b56      	ldr	r3, [pc, #344]	; (801cd74 <ThreadDisplayTask+0x178>)
 801cc1a:	22ff      	movs	r2, #255	; 0xff
 801cc1c:	701a      	strb	r2, [r3, #0]
	spi_buf[1] = 0xFF;
 801cc1e:	4b55      	ldr	r3, [pc, #340]	; (801cd74 <ThreadDisplayTask+0x178>)
 801cc20:	22ff      	movs	r2, #255	; 0xff
 801cc22:	705a      	strb	r2, [r3, #1]
	spi_buf[2] = 0xFF;
 801cc24:	4b53      	ldr	r3, [pc, #332]	; (801cd74 <ThreadDisplayTask+0x178>)
 801cc26:	22ff      	movs	r2, #255	; 0xff
 801cc28:	709a      	strb	r2, [r3, #2]
	spi_buf[3] = 0xFF;
 801cc2a:	4b52      	ldr	r3, [pc, #328]	; (801cd74 <ThreadDisplayTask+0x178>)
 801cc2c:	22ff      	movs	r2, #255	; 0xff
 801cc2e:	70da      	strb	r2, [r3, #3]


	for(;;)
	{

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 801cc30:	2200      	movs	r2, #0
 801cc32:	f44f 6100 	mov.w	r1, #2048	; 0x800
 801cc36:	4850      	ldr	r0, [pc, #320]	; (801cd78 <ThreadDisplayTask+0x17c>)
 801cc38:	f7f7 fe2a 	bl	8014890 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 801cc3c:	2064      	movs	r0, #100	; 0x64
 801cc3e:	f7f6 f943 	bl	8012ec8 <HAL_Delay>
		while( HAL_SPI_Transmit(&hspi3, &spi_buf[0], 4, 100) != HAL_OK ){}
 801cc42:	bf00      	nop
 801cc44:	2364      	movs	r3, #100	; 0x64
 801cc46:	2204      	movs	r2, #4
 801cc48:	494a      	ldr	r1, [pc, #296]	; (801cd74 <ThreadDisplayTask+0x178>)
 801cc4a:	484c      	ldr	r0, [pc, #304]	; (801cd7c <ThreadDisplayTask+0x180>)
 801cc4c:	f7f9 fefd 	bl	8016a4a <HAL_SPI_Transmit>
 801cc50:	4603      	mov	r3, r0
 801cc52:	2b00      	cmp	r3, #0
 801cc54:	d1f6      	bne.n	801cc44 <ThreadDisplayTask+0x48>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);
 801cc56:	2201      	movs	r2, #1
 801cc58:	f44f 6100 	mov.w	r1, #2048	; 0x800
 801cc5c:	4846      	ldr	r0, [pc, #280]	; (801cd78 <ThreadDisplayTask+0x17c>)
 801cc5e:	f7f7 fe17 	bl	8014890 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 801cc62:	2200      	movs	r2, #0
 801cc64:	f44f 6100 	mov.w	r1, #2048	; 0x800
 801cc68:	4843      	ldr	r0, [pc, #268]	; (801cd78 <ThreadDisplayTask+0x17c>)
 801cc6a:	f7f7 fe11 	bl	8014890 <HAL_GPIO_WritePin>


		a = (status_registers.security_status_reg)%10;
 801cc6e:	4b44      	ldr	r3, [pc, #272]	; (801cd80 <ThreadDisplayTask+0x184>)
 801cc70:	885a      	ldrh	r2, [r3, #2]
 801cc72:	4b44      	ldr	r3, [pc, #272]	; (801cd84 <ThreadDisplayTask+0x188>)
 801cc74:	fba3 1302 	umull	r1, r3, r3, r2
 801cc78:	08d9      	lsrs	r1, r3, #3
 801cc7a:	460b      	mov	r3, r1
 801cc7c:	009b      	lsls	r3, r3, #2
 801cc7e:	440b      	add	r3, r1
 801cc80:	005b      	lsls	r3, r3, #1
 801cc82:	1ad3      	subs	r3, r2, r3
 801cc84:	b29a      	uxth	r2, r3
 801cc86:	4b40      	ldr	r3, [pc, #256]	; (801cd88 <ThreadDisplayTask+0x18c>)
 801cc88:	801a      	strh	r2, [r3, #0]

		if( register_content_menu_state == 0 )
 801cc8a:	4b40      	ldr	r3, [pc, #256]	; (801cd8c <ThreadDisplayTask+0x190>)
 801cc8c:	881b      	ldrh	r3, [r3, #0]
 801cc8e:	b29b      	uxth	r3, r3
 801cc90:	2b00      	cmp	r3, #0
 801cc92:	d17f      	bne.n	801cd94 <ThreadDisplayTask+0x198>
		{

			if( register_menu_state == TIME )
 801cc94:	4b3e      	ldr	r3, [pc, #248]	; (801cd90 <ThreadDisplayTask+0x194>)
 801cc96:	881b      	ldrh	r3, [r3, #0]
 801cc98:	b29b      	uxth	r3, r3
 801cc9a:	2b00      	cmp	r3, #0
 801cc9c:	d10d      	bne.n	801ccba <ThreadDisplayTask+0xbe>
			{
				hour_display((uint8_t)status_registers.time_current_hour_reg);
 801cc9e:	4b38      	ldr	r3, [pc, #224]	; (801cd80 <ThreadDisplayTask+0x184>)
 801cca0:	8a1b      	ldrh	r3, [r3, #16]
 801cca2:	b2db      	uxtb	r3, r3
 801cca4:	4618      	mov	r0, r3
 801cca6:	f00d f955 	bl	8029f54 <hour_display>
				minute_display((uint8_t)status_registers.time_current_minute_reg);
 801ccaa:	4b35      	ldr	r3, [pc, #212]	; (801cd80 <ThreadDisplayTask+0x184>)
 801ccac:	8a5b      	ldrh	r3, [r3, #18]
 801ccae:	b2db      	uxtb	r3, r3
 801ccb0:	4618      	mov	r0, r3
 801ccb2:	f00d f92d 	bl	8029f10 <minute_display>
 801ccb6:	f001 bb39 	b.w	801e32c <ThreadDisplayTask+0x1730>
			}

			else
			{
				if( (register_menu_state <= MAX_P_NUMBER) && (register_menu_state > 0) )
 801ccba:	4b35      	ldr	r3, [pc, #212]	; (801cd90 <ThreadDisplayTask+0x194>)
 801ccbc:	881b      	ldrh	r3, [r3, #0]
 801ccbe:	b29b      	uxth	r3, r3
 801ccc0:	2b44      	cmp	r3, #68	; 0x44
 801ccc2:	d80c      	bhi.n	801ccde <ThreadDisplayTask+0xe2>
 801ccc4:	4b32      	ldr	r3, [pc, #200]	; (801cd90 <ThreadDisplayTask+0x194>)
 801ccc6:	881b      	ldrh	r3, [r3, #0]
 801ccc8:	b29b      	uxth	r3, r3
 801ccca:	2b00      	cmp	r3, #0
 801cccc:	d007      	beq.n	801ccde <ThreadDisplayTask+0xe2>
				{
					status_register_display(register_menu_state);
 801ccce:	4b30      	ldr	r3, [pc, #192]	; (801cd90 <ThreadDisplayTask+0x194>)
 801ccd0:	881b      	ldrh	r3, [r3, #0]
 801ccd2:	b29b      	uxth	r3, r3
 801ccd4:	4618      	mov	r0, r3
 801ccd6:	f00d f95f 	bl	8029f98 <status_register_display>
 801ccda:	f001 bb27 	b.w	801e32c <ThreadDisplayTask+0x1730>
				}
				else if( (register_menu_state > MAX_P_NUMBER) && (register_menu_state <= MAX_Y_NUMBER) )
 801ccde:	4b2c      	ldr	r3, [pc, #176]	; (801cd90 <ThreadDisplayTask+0x194>)
 801cce0:	881b      	ldrh	r3, [r3, #0]
 801cce2:	b29b      	uxth	r3, r3
 801cce4:	2b44      	cmp	r3, #68	; 0x44
 801cce6:	d90e      	bls.n	801cd06 <ThreadDisplayTask+0x10a>
 801cce8:	4b29      	ldr	r3, [pc, #164]	; (801cd90 <ThreadDisplayTask+0x194>)
 801ccea:	881b      	ldrh	r3, [r3, #0]
 801ccec:	b29b      	uxth	r3, r3
 801ccee:	2b63      	cmp	r3, #99	; 0x63
 801ccf0:	d809      	bhi.n	801cd06 <ThreadDisplayTask+0x10a>
				{
					control_register_display( (register_menu_state- MAX_P_NUMBER) );
 801ccf2:	4b27      	ldr	r3, [pc, #156]	; (801cd90 <ThreadDisplayTask+0x194>)
 801ccf4:	881b      	ldrh	r3, [r3, #0]
 801ccf6:	b29b      	uxth	r3, r3
 801ccf8:	3b44      	subs	r3, #68	; 0x44
 801ccfa:	b29b      	uxth	r3, r3
 801ccfc:	4618      	mov	r0, r3
 801ccfe:	f00d fa2b 	bl	802a158 <control_register_display>
 801cd02:	f001 bb13 	b.w	801e32c <ThreadDisplayTask+0x1730>
				}
				else if( (register_menu_state > MAX_Y_NUMBER) && (register_menu_state <= MAX_A_NUMBER) )
 801cd06:	4b22      	ldr	r3, [pc, #136]	; (801cd90 <ThreadDisplayTask+0x194>)
 801cd08:	881b      	ldrh	r3, [r3, #0]
 801cd0a:	b29b      	uxth	r3, r3
 801cd0c:	2b63      	cmp	r3, #99	; 0x63
 801cd0e:	d910      	bls.n	801cd32 <ThreadDisplayTask+0x136>
 801cd10:	4b1f      	ldr	r3, [pc, #124]	; (801cd90 <ThreadDisplayTask+0x194>)
 801cd12:	881b      	ldrh	r3, [r3, #0]
 801cd14:	b29b      	uxth	r3, r3
 801cd16:	f240 424a 	movw	r2, #1098	; 0x44a
 801cd1a:	4293      	cmp	r3, r2
 801cd1c:	d809      	bhi.n	801cd32 <ThreadDisplayTask+0x136>
				{
					ibutton_a_register_display( (register_menu_state- MAX_Y_NUMBER) );
 801cd1e:	4b1c      	ldr	r3, [pc, #112]	; (801cd90 <ThreadDisplayTask+0x194>)
 801cd20:	881b      	ldrh	r3, [r3, #0]
 801cd22:	b29b      	uxth	r3, r3
 801cd24:	3b63      	subs	r3, #99	; 0x63
 801cd26:	b29b      	uxth	r3, r3
 801cd28:	4618      	mov	r0, r3
 801cd2a:	f00d fcb5 	bl	802a698 <ibutton_a_register_display>
 801cd2e:	f001 bafd 	b.w	801e32c <ThreadDisplayTask+0x1730>
				}
				else if( (register_menu_state > MAX_A_NUMBER) && (register_menu_state <= MAX_B_NUMBER) )
 801cd32:	4b17      	ldr	r3, [pc, #92]	; (801cd90 <ThreadDisplayTask+0x194>)
 801cd34:	881b      	ldrh	r3, [r3, #0]
 801cd36:	b29b      	uxth	r3, r3
 801cd38:	f240 424a 	movw	r2, #1098	; 0x44a
 801cd3c:	4293      	cmp	r3, r2
 801cd3e:	f241 82f5 	bls.w	801e32c <ThreadDisplayTask+0x1730>
 801cd42:	4b13      	ldr	r3, [pc, #76]	; (801cd90 <ThreadDisplayTask+0x194>)
 801cd44:	881b      	ldrh	r3, [r3, #0]
 801cd46:	b29b      	uxth	r3, r3
 801cd48:	f240 629b 	movw	r2, #1691	; 0x69b
 801cd4c:	4293      	cmp	r3, r2
 801cd4e:	f201 82ed 	bhi.w	801e32c <ThreadDisplayTask+0x1730>
				{
					ibutton_b_register_display( (register_menu_state- MAX_A_NUMBER) );
 801cd52:	4b0f      	ldr	r3, [pc, #60]	; (801cd90 <ThreadDisplayTask+0x194>)
 801cd54:	881b      	ldrh	r3, [r3, #0]
 801cd56:	b29b      	uxth	r3, r3
 801cd58:	f2a3 434a 	subw	r3, r3, #1098	; 0x44a
 801cd5c:	b29b      	uxth	r3, r3
 801cd5e:	4618      	mov	r0, r3
 801cd60:	f00d fd7a 	bl	802a858 <ibutton_b_register_display>
 801cd64:	f001 bae2 	b.w	801e32c <ThreadDisplayTask+0x1730>
 801cd68:	20009e08 	.word	0x20009e08
 801cd6c:	20009794 	.word	0x20009794
 801cd70:	20009f4c 	.word	0x20009f4c
 801cd74:	20009f48 	.word	0x20009f48
 801cd78:	40020800 	.word	0x40020800
 801cd7c:	200097dc 	.word	0x200097dc
 801cd80:	2000af40 	.word	0x2000af40
 801cd84:	cccccccd 	.word	0xcccccccd
 801cd88:	20008018 	.word	0x20008018
 801cd8c:	20008012 	.word	0x20008012
 801cd90:	20008010 	.word	0x20008010
				}
			}

		}
		else if( register_content_menu_state == 1)
 801cd94:	4ba7      	ldr	r3, [pc, #668]	; (801d034 <ThreadDisplayTask+0x438>)
 801cd96:	881b      	ldrh	r3, [r3, #0]
 801cd98:	b29b      	uxth	r3, r3
 801cd9a:	2b01      	cmp	r3, #1
 801cd9c:	f040 8550 	bne.w	801d840 <ThreadDisplayTask+0xc44>
		{
			if(register_menu_state == TIME)
 801cda0:	4ba5      	ldr	r3, [pc, #660]	; (801d038 <ThreadDisplayTask+0x43c>)
 801cda2:	881b      	ldrh	r3, [r3, #0]
 801cda4:	b29b      	uxth	r3, r3
 801cda6:	2b00      	cmp	r3, #0
 801cda8:	d102      	bne.n	801cdb0 <ThreadDisplayTask+0x1b4>
			{
				register_content_menu_state = 0;
 801cdaa:	4ba2      	ldr	r3, [pc, #648]	; (801d034 <ThreadDisplayTask+0x438>)
 801cdac:	2200      	movs	r2, #0
 801cdae:	801a      	strh	r2, [r3, #0]
				number_display( ibutton_registers.ibutton2_byte_7_reg );
				control_register_temp_number = ibutton_registers.ibutton2_byte_7_reg;
			}
			*/

			if( (register_menu_state >= P1) && (register_menu_state <= P68) )
 801cdb0:	4ba1      	ldr	r3, [pc, #644]	; (801d038 <ThreadDisplayTask+0x43c>)
 801cdb2:	881b      	ldrh	r3, [r3, #0]
 801cdb4:	b29b      	uxth	r3, r3
 801cdb6:	2b00      	cmp	r3, #0
 801cdb8:	f000 8206 	beq.w	801d1c8 <ThreadDisplayTask+0x5cc>
 801cdbc:	4b9e      	ldr	r3, [pc, #632]	; (801d038 <ThreadDisplayTask+0x43c>)
 801cdbe:	881b      	ldrh	r3, [r3, #0]
 801cdc0:	b29b      	uxth	r3, r3
 801cdc2:	2b44      	cmp	r3, #68	; 0x44
 801cdc4:	f200 8200 	bhi.w	801d1c8 <ThreadDisplayTask+0x5cc>
			{

				if(register_menu_state == P1)
 801cdc8:	4b9b      	ldr	r3, [pc, #620]	; (801d038 <ThreadDisplayTask+0x43c>)
 801cdca:	881b      	ldrh	r3, [r3, #0]
 801cdcc:	b29b      	uxth	r3, r3
 801cdce:	2b01      	cmp	r3, #1
 801cdd0:	d124      	bne.n	801ce1c <ThreadDisplayTask+0x220>
				{
					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801cdd2:	4b9a      	ldr	r3, [pc, #616]	; (801d03c <ThreadDisplayTask+0x440>)
 801cdd4:	681b      	ldr	r3, [r3, #0]
 801cdd6:	f04f 31ff 	mov.w	r1, #4294967295
 801cdda:	4618      	mov	r0, r3
 801cddc:	f7fc fa64 	bl	80192a8 <osMutexWait>

					fm25v02_read(2*(VERSION_REG + (register_menu_state - P1) ), &ibutton_temp_reg_h);
 801cde0:	4b95      	ldr	r3, [pc, #596]	; (801d038 <ThreadDisplayTask+0x43c>)
 801cde2:	881b      	ldrh	r3, [r3, #0]
 801cde4:	b29b      	uxth	r3, r3
 801cde6:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 801cdea:	b29b      	uxth	r3, r3
 801cdec:	005b      	lsls	r3, r3, #1
 801cdee:	b29b      	uxth	r3, r3
 801cdf0:	f107 020f 	add.w	r2, r7, #15
 801cdf4:	4611      	mov	r1, r2
 801cdf6:	4618      	mov	r0, r3
 801cdf8:	f00d fe0e 	bl	802aa18 <fm25v02_read>
					//fm25v02_read(2*(ICCID_NUMBER_REG1 + (register_menu_state - P61) )+1, &ibutton_temp_reg_l);
					ibutton_temp_register = ibutton_temp_reg_h;
 801cdfc:	7bfb      	ldrb	r3, [r7, #15]
 801cdfe:	b29a      	uxth	r2, r3
 801ce00:	4b8f      	ldr	r3, [pc, #572]	; (801d040 <ThreadDisplayTask+0x444>)
 801ce02:	801a      	strh	r2, [r3, #0]

					osMutexRelease(Fm25v02MutexHandle);
 801ce04:	4b8d      	ldr	r3, [pc, #564]	; (801d03c <ThreadDisplayTask+0x440>)
 801ce06:	681b      	ldr	r3, [r3, #0]
 801ce08:	4618      	mov	r0, r3
 801ce0a:	f7fc fa9b 	bl	8019344 <osMutexRelease>

					number_display( ibutton_temp_register );
 801ce0e:	4b8c      	ldr	r3, [pc, #560]	; (801d040 <ThreadDisplayTask+0x444>)
 801ce10:	881b      	ldrh	r3, [r3, #0]
 801ce12:	b29b      	uxth	r3, r3
 801ce14:	b2db      	uxtb	r3, r3
 801ce16:	4618      	mov	r0, r3
 801ce18:	f00d fa7e 	bl	802a318 <number_display>
				}

				if(register_menu_state == P2)
 801ce1c:	4b86      	ldr	r3, [pc, #536]	; (801d038 <ThreadDisplayTask+0x43c>)
 801ce1e:	881b      	ldrh	r3, [r3, #0]
 801ce20:	b29b      	uxth	r3, r3
 801ce22:	2b02      	cmp	r3, #2
 801ce24:	d126      	bne.n	801ce74 <ThreadDisplayTask+0x278>
				{
					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801ce26:	4b85      	ldr	r3, [pc, #532]	; (801d03c <ThreadDisplayTask+0x440>)
 801ce28:	681b      	ldr	r3, [r3, #0]
 801ce2a:	f04f 31ff 	mov.w	r1, #4294967295
 801ce2e:	4618      	mov	r0, r3
 801ce30:	f7fc fa3a 	bl	80192a8 <osMutexWait>

					//fm25v02_read(2*(VERSION_REG + (register_menu_state - P2) ), &ibutton_temp_reg_h);
					fm25v02_read(2*(VERSION_REG + (register_menu_state - P2) )+1, &ibutton_temp_reg_l);
 801ce34:	4b80      	ldr	r3, [pc, #512]	; (801d038 <ThreadDisplayTask+0x43c>)
 801ce36:	881b      	ldrh	r3, [r3, #0]
 801ce38:	b29b      	uxth	r3, r3
 801ce3a:	f603 73fe 	addw	r3, r3, #4094	; 0xffe
 801ce3e:	b29b      	uxth	r3, r3
 801ce40:	005b      	lsls	r3, r3, #1
 801ce42:	b29b      	uxth	r3, r3
 801ce44:	3301      	adds	r3, #1
 801ce46:	b29b      	uxth	r3, r3
 801ce48:	f107 020e 	add.w	r2, r7, #14
 801ce4c:	4611      	mov	r1, r2
 801ce4e:	4618      	mov	r0, r3
 801ce50:	f00d fde2 	bl	802aa18 <fm25v02_read>
					ibutton_temp_register = ibutton_temp_reg_l;
 801ce54:	7bbb      	ldrb	r3, [r7, #14]
 801ce56:	b29a      	uxth	r2, r3
 801ce58:	4b79      	ldr	r3, [pc, #484]	; (801d040 <ThreadDisplayTask+0x444>)
 801ce5a:	801a      	strh	r2, [r3, #0]

					osMutexRelease(Fm25v02MutexHandle);
 801ce5c:	4b77      	ldr	r3, [pc, #476]	; (801d03c <ThreadDisplayTask+0x440>)
 801ce5e:	681b      	ldr	r3, [r3, #0]
 801ce60:	4618      	mov	r0, r3
 801ce62:	f7fc fa6f 	bl	8019344 <osMutexRelease>

					number_display( ibutton_temp_register );
 801ce66:	4b76      	ldr	r3, [pc, #472]	; (801d040 <ThreadDisplayTask+0x444>)
 801ce68:	881b      	ldrh	r3, [r3, #0]
 801ce6a:	b29b      	uxth	r3, r3
 801ce6c:	b2db      	uxtb	r3, r3
 801ce6e:	4618      	mov	r0, r3
 801ce70:	f00d fa52 	bl	802a318 <number_display>
				}

				if( (register_menu_state >= P3) && (register_menu_state <= P20) )
 801ce74:	4b70      	ldr	r3, [pc, #448]	; (801d038 <ThreadDisplayTask+0x43c>)
 801ce76:	881b      	ldrh	r3, [r3, #0]
 801ce78:	b29b      	uxth	r3, r3
 801ce7a:	2b02      	cmp	r3, #2
 801ce7c:	d93f      	bls.n	801cefe <ThreadDisplayTask+0x302>
 801ce7e:	4b6e      	ldr	r3, [pc, #440]	; (801d038 <ThreadDisplayTask+0x43c>)
 801ce80:	881b      	ldrh	r3, [r3, #0]
 801ce82:	b29b      	uxth	r3, r3
 801ce84:	2b14      	cmp	r3, #20
 801ce86:	d83a      	bhi.n	801cefe <ThreadDisplayTask+0x302>
				{
					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801ce88:	4b6c      	ldr	r3, [pc, #432]	; (801d03c <ThreadDisplayTask+0x440>)
 801ce8a:	681b      	ldr	r3, [r3, #0]
 801ce8c:	f04f 31ff 	mov.w	r1, #4294967295
 801ce90:	4618      	mov	r0, r3
 801ce92:	f7fc fa09 	bl	80192a8 <osMutexWait>

					fm25v02_read(2*(SECURITY_STATUS_REG + (register_menu_state - P3) ), &ibutton_temp_reg_h);
 801ce96:	4b68      	ldr	r3, [pc, #416]	; (801d038 <ThreadDisplayTask+0x43c>)
 801ce98:	881b      	ldrh	r3, [r3, #0]
 801ce9a:	b29b      	uxth	r3, r3
 801ce9c:	f603 73fe 	addw	r3, r3, #4094	; 0xffe
 801cea0:	b29b      	uxth	r3, r3
 801cea2:	005b      	lsls	r3, r3, #1
 801cea4:	b29b      	uxth	r3, r3
 801cea6:	f107 020f 	add.w	r2, r7, #15
 801ceaa:	4611      	mov	r1, r2
 801ceac:	4618      	mov	r0, r3
 801ceae:	f00d fdb3 	bl	802aa18 <fm25v02_read>
					fm25v02_read(2*(SECURITY_STATUS_REG + (register_menu_state - P3) )+1, &ibutton_temp_reg_l);
 801ceb2:	4b61      	ldr	r3, [pc, #388]	; (801d038 <ThreadDisplayTask+0x43c>)
 801ceb4:	881b      	ldrh	r3, [r3, #0]
 801ceb6:	b29b      	uxth	r3, r3
 801ceb8:	f603 73fe 	addw	r3, r3, #4094	; 0xffe
 801cebc:	b29b      	uxth	r3, r3
 801cebe:	005b      	lsls	r3, r3, #1
 801cec0:	b29b      	uxth	r3, r3
 801cec2:	3301      	adds	r3, #1
 801cec4:	b29b      	uxth	r3, r3
 801cec6:	f107 020e 	add.w	r2, r7, #14
 801ceca:	4611      	mov	r1, r2
 801cecc:	4618      	mov	r0, r3
 801cece:	f00d fda3 	bl	802aa18 <fm25v02_read>
					ibutton_temp_register = (((uint16_t)ibutton_temp_reg_h)<<8)|ibutton_temp_reg_l;
 801ced2:	7bfb      	ldrb	r3, [r7, #15]
 801ced4:	021b      	lsls	r3, r3, #8
 801ced6:	b21a      	sxth	r2, r3
 801ced8:	7bbb      	ldrb	r3, [r7, #14]
 801ceda:	b21b      	sxth	r3, r3
 801cedc:	4313      	orrs	r3, r2
 801cede:	b21b      	sxth	r3, r3
 801cee0:	b29a      	uxth	r2, r3
 801cee2:	4b57      	ldr	r3, [pc, #348]	; (801d040 <ThreadDisplayTask+0x444>)
 801cee4:	801a      	strh	r2, [r3, #0]

					osMutexRelease(Fm25v02MutexHandle);
 801cee6:	4b55      	ldr	r3, [pc, #340]	; (801d03c <ThreadDisplayTask+0x440>)
 801cee8:	681b      	ldr	r3, [r3, #0]
 801ceea:	4618      	mov	r0, r3
 801ceec:	f7fc fa2a 	bl	8019344 <osMutexRelease>

					number_display( ibutton_temp_register );
 801cef0:	4b53      	ldr	r3, [pc, #332]	; (801d040 <ThreadDisplayTask+0x444>)
 801cef2:	881b      	ldrh	r3, [r3, #0]
 801cef4:	b29b      	uxth	r3, r3
 801cef6:	b2db      	uxtb	r3, r3
 801cef8:	4618      	mov	r0, r3
 801cefa:	f00d fa0d 	bl	802a318 <number_display>

				}

				if( (register_menu_state >= P21) && (register_menu_state <= P28) )
 801cefe:	4b4e      	ldr	r3, [pc, #312]	; (801d038 <ThreadDisplayTask+0x43c>)
 801cf00:	881b      	ldrh	r3, [r3, #0]
 801cf02:	b29b      	uxth	r3, r3
 801cf04:	2b14      	cmp	r3, #20
 801cf06:	d93f      	bls.n	801cf88 <ThreadDisplayTask+0x38c>
 801cf08:	4b4b      	ldr	r3, [pc, #300]	; (801d038 <ThreadDisplayTask+0x43c>)
 801cf0a:	881b      	ldrh	r3, [r3, #0]
 801cf0c:	b29b      	uxth	r3, r3
 801cf0e:	2b1c      	cmp	r3, #28
 801cf10:	d83a      	bhi.n	801cf88 <ThreadDisplayTask+0x38c>
				{
					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801cf12:	4b4a      	ldr	r3, [pc, #296]	; (801d03c <ThreadDisplayTask+0x440>)
 801cf14:	681b      	ldr	r3, [r3, #0]
 801cf16:	f04f 31ff 	mov.w	r1, #4294967295
 801cf1a:	4618      	mov	r0, r3
 801cf1c:	f7fc f9c4 	bl	80192a8 <osMutexWait>

					fm25v02_read(2*(IBUTTON_COMPLETE_0_REG + (register_menu_state - P21) ), &ibutton_temp_reg_h);
 801cf20:	4b45      	ldr	r3, [pc, #276]	; (801d038 <ThreadDisplayTask+0x43c>)
 801cf22:	881b      	ldrh	r3, [r3, #0]
 801cf24:	b29b      	uxth	r3, r3
 801cf26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801cf2a:	b29b      	uxth	r3, r3
 801cf2c:	005b      	lsls	r3, r3, #1
 801cf2e:	b29b      	uxth	r3, r3
 801cf30:	f107 020f 	add.w	r2, r7, #15
 801cf34:	4611      	mov	r1, r2
 801cf36:	4618      	mov	r0, r3
 801cf38:	f00d fd6e 	bl	802aa18 <fm25v02_read>
					fm25v02_read(2*(IBUTTON_COMPLETE_0_REG + (register_menu_state - P21) )+1, &ibutton_temp_reg_l);
 801cf3c:	4b3e      	ldr	r3, [pc, #248]	; (801d038 <ThreadDisplayTask+0x43c>)
 801cf3e:	881b      	ldrh	r3, [r3, #0]
 801cf40:	b29b      	uxth	r3, r3
 801cf42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801cf46:	b29b      	uxth	r3, r3
 801cf48:	005b      	lsls	r3, r3, #1
 801cf4a:	b29b      	uxth	r3, r3
 801cf4c:	3301      	adds	r3, #1
 801cf4e:	b29b      	uxth	r3, r3
 801cf50:	f107 020e 	add.w	r2, r7, #14
 801cf54:	4611      	mov	r1, r2
 801cf56:	4618      	mov	r0, r3
 801cf58:	f00d fd5e 	bl	802aa18 <fm25v02_read>
					ibutton_temp_register = (((uint16_t)ibutton_temp_reg_h)<<8)|ibutton_temp_reg_l;
 801cf5c:	7bfb      	ldrb	r3, [r7, #15]
 801cf5e:	021b      	lsls	r3, r3, #8
 801cf60:	b21a      	sxth	r2, r3
 801cf62:	7bbb      	ldrb	r3, [r7, #14]
 801cf64:	b21b      	sxth	r3, r3
 801cf66:	4313      	orrs	r3, r2
 801cf68:	b21b      	sxth	r3, r3
 801cf6a:	b29a      	uxth	r2, r3
 801cf6c:	4b34      	ldr	r3, [pc, #208]	; (801d040 <ThreadDisplayTask+0x444>)
 801cf6e:	801a      	strh	r2, [r3, #0]

					osMutexRelease(Fm25v02MutexHandle);
 801cf70:	4b32      	ldr	r3, [pc, #200]	; (801d03c <ThreadDisplayTask+0x440>)
 801cf72:	681b      	ldr	r3, [r3, #0]
 801cf74:	4618      	mov	r0, r3
 801cf76:	f7fc f9e5 	bl	8019344 <osMutexRelease>

					number_display( ibutton_temp_register );
 801cf7a:	4b31      	ldr	r3, [pc, #196]	; (801d040 <ThreadDisplayTask+0x444>)
 801cf7c:	881b      	ldrh	r3, [r3, #0]
 801cf7e:	b29b      	uxth	r3, r3
 801cf80:	b2db      	uxtb	r3, r3
 801cf82:	4618      	mov	r0, r3
 801cf84:	f00d f9c8 	bl	802a318 <number_display>

				}

				if( (register_menu_state >= P29) && (register_menu_state <= P47) )
 801cf88:	4b2b      	ldr	r3, [pc, #172]	; (801d038 <ThreadDisplayTask+0x43c>)
 801cf8a:	881b      	ldrh	r3, [r3, #0]
 801cf8c:	b29b      	uxth	r3, r3
 801cf8e:	2b1c      	cmp	r3, #28
 801cf90:	d941      	bls.n	801d016 <ThreadDisplayTask+0x41a>
 801cf92:	4b29      	ldr	r3, [pc, #164]	; (801d038 <ThreadDisplayTask+0x43c>)
 801cf94:	881b      	ldrh	r3, [r3, #0]
 801cf96:	b29b      	uxth	r3, r3
 801cf98:	2b2f      	cmp	r3, #47	; 0x2f
 801cf9a:	d83c      	bhi.n	801d016 <ThreadDisplayTask+0x41a>
				{
					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801cf9c:	4b27      	ldr	r3, [pc, #156]	; (801d03c <ThreadDisplayTask+0x440>)
 801cf9e:	681b      	ldr	r3, [r3, #0]
 801cfa0:	f04f 31ff 	mov.w	r1, #4294967295
 801cfa4:	4618      	mov	r0, r3
 801cfa6:	f7fc f97f 	bl	80192a8 <osMutexWait>

					fm25v02_read(2*(CE_303_ERROR_REG + (register_menu_state - P29) ), &ibutton_temp_reg_h);
 801cfaa:	4b23      	ldr	r3, [pc, #140]	; (801d038 <ThreadDisplayTask+0x43c>)
 801cfac:	881b      	ldrh	r3, [r3, #0]
 801cfae:	b29b      	uxth	r3, r3
 801cfb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801cfb4:	3301      	adds	r3, #1
 801cfb6:	b29b      	uxth	r3, r3
 801cfb8:	005b      	lsls	r3, r3, #1
 801cfba:	b29b      	uxth	r3, r3
 801cfbc:	f107 020f 	add.w	r2, r7, #15
 801cfc0:	4611      	mov	r1, r2
 801cfc2:	4618      	mov	r0, r3
 801cfc4:	f00d fd28 	bl	802aa18 <fm25v02_read>
					fm25v02_read(2*(CE_303_ERROR_REG + (register_menu_state - P29) )+1, &ibutton_temp_reg_l);
 801cfc8:	4b1b      	ldr	r3, [pc, #108]	; (801d038 <ThreadDisplayTask+0x43c>)
 801cfca:	881b      	ldrh	r3, [r3, #0]
 801cfcc:	b29b      	uxth	r3, r3
 801cfce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801cfd2:	3301      	adds	r3, #1
 801cfd4:	b29b      	uxth	r3, r3
 801cfd6:	005b      	lsls	r3, r3, #1
 801cfd8:	b29b      	uxth	r3, r3
 801cfda:	3301      	adds	r3, #1
 801cfdc:	b29b      	uxth	r3, r3
 801cfde:	f107 020e 	add.w	r2, r7, #14
 801cfe2:	4611      	mov	r1, r2
 801cfe4:	4618      	mov	r0, r3
 801cfe6:	f00d fd17 	bl	802aa18 <fm25v02_read>
					ibutton_temp_register = (((uint16_t)ibutton_temp_reg_h)<<8)|ibutton_temp_reg_l;
 801cfea:	7bfb      	ldrb	r3, [r7, #15]
 801cfec:	021b      	lsls	r3, r3, #8
 801cfee:	b21a      	sxth	r2, r3
 801cff0:	7bbb      	ldrb	r3, [r7, #14]
 801cff2:	b21b      	sxth	r3, r3
 801cff4:	4313      	orrs	r3, r2
 801cff6:	b21b      	sxth	r3, r3
 801cff8:	b29a      	uxth	r2, r3
 801cffa:	4b11      	ldr	r3, [pc, #68]	; (801d040 <ThreadDisplayTask+0x444>)
 801cffc:	801a      	strh	r2, [r3, #0]

					osMutexRelease(Fm25v02MutexHandle);
 801cffe:	4b0f      	ldr	r3, [pc, #60]	; (801d03c <ThreadDisplayTask+0x440>)
 801d000:	681b      	ldr	r3, [r3, #0]
 801d002:	4618      	mov	r0, r3
 801d004:	f7fc f99e 	bl	8019344 <osMutexRelease>

					number_display( ibutton_temp_register );
 801d008:	4b0d      	ldr	r3, [pc, #52]	; (801d040 <ThreadDisplayTask+0x444>)
 801d00a:	881b      	ldrh	r3, [r3, #0]
 801d00c:	b29b      	uxth	r3, r3
 801d00e:	b2db      	uxtb	r3, r3
 801d010:	4618      	mov	r0, r3
 801d012:	f00d f981 	bl	802a318 <number_display>

				}

				if( (register_menu_state >= P48) && (register_menu_state <= P59) )
 801d016:	4b08      	ldr	r3, [pc, #32]	; (801d038 <ThreadDisplayTask+0x43c>)
 801d018:	881b      	ldrh	r3, [r3, #0]
 801d01a:	b29b      	uxth	r3, r3
 801d01c:	2b2f      	cmp	r3, #47	; 0x2f
 801d01e:	d94a      	bls.n	801d0b6 <ThreadDisplayTask+0x4ba>
 801d020:	4b05      	ldr	r3, [pc, #20]	; (801d038 <ThreadDisplayTask+0x43c>)
 801d022:	881b      	ldrh	r3, [r3, #0]
 801d024:	b29b      	uxth	r3, r3
 801d026:	2b3b      	cmp	r3, #59	; 0x3b
 801d028:	d845      	bhi.n	801d0b6 <ThreadDisplayTask+0x4ba>
				{
					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801d02a:	4b04      	ldr	r3, [pc, #16]	; (801d03c <ThreadDisplayTask+0x440>)
 801d02c:	681b      	ldr	r3, [r3, #0]
 801d02e:	f04f 31ff 	mov.w	r1, #4294967295
 801d032:	e007      	b.n	801d044 <ThreadDisplayTask+0x448>
 801d034:	20008012 	.word	0x20008012
 801d038:	20008010 	.word	0x20008010
 801d03c:	20009bb8 	.word	0x20009bb8
 801d040:	20009f50 	.word	0x20009f50
 801d044:	4618      	mov	r0, r3
 801d046:	f7fc f92f 	bl	80192a8 <osMutexWait>

					fm25v02_read(2*(CE_303_TOTAL_POWER_H_REG + (register_menu_state - P48) ), &ibutton_temp_reg_h);
 801d04a:	4baa      	ldr	r3, [pc, #680]	; (801d2f4 <ThreadDisplayTask+0x6f8>)
 801d04c:	881b      	ldrh	r3, [r3, #0]
 801d04e:	b29b      	uxth	r3, r3
 801d050:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801d054:	3311      	adds	r3, #17
 801d056:	b29b      	uxth	r3, r3
 801d058:	005b      	lsls	r3, r3, #1
 801d05a:	b29b      	uxth	r3, r3
 801d05c:	f107 020f 	add.w	r2, r7, #15
 801d060:	4611      	mov	r1, r2
 801d062:	4618      	mov	r0, r3
 801d064:	f00d fcd8 	bl	802aa18 <fm25v02_read>
					fm25v02_read(2*(CE_303_TOTAL_POWER_H_REG + (register_menu_state - P48) )+1, &ibutton_temp_reg_l);
 801d068:	4ba2      	ldr	r3, [pc, #648]	; (801d2f4 <ThreadDisplayTask+0x6f8>)
 801d06a:	881b      	ldrh	r3, [r3, #0]
 801d06c:	b29b      	uxth	r3, r3
 801d06e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801d072:	3311      	adds	r3, #17
 801d074:	b29b      	uxth	r3, r3
 801d076:	005b      	lsls	r3, r3, #1
 801d078:	b29b      	uxth	r3, r3
 801d07a:	3301      	adds	r3, #1
 801d07c:	b29b      	uxth	r3, r3
 801d07e:	f107 020e 	add.w	r2, r7, #14
 801d082:	4611      	mov	r1, r2
 801d084:	4618      	mov	r0, r3
 801d086:	f00d fcc7 	bl	802aa18 <fm25v02_read>
					ibutton_temp_register = (((uint16_t)ibutton_temp_reg_h)<<8)|ibutton_temp_reg_l;
 801d08a:	7bfb      	ldrb	r3, [r7, #15]
 801d08c:	021b      	lsls	r3, r3, #8
 801d08e:	b21a      	sxth	r2, r3
 801d090:	7bbb      	ldrb	r3, [r7, #14]
 801d092:	b21b      	sxth	r3, r3
 801d094:	4313      	orrs	r3, r2
 801d096:	b21b      	sxth	r3, r3
 801d098:	b29a      	uxth	r2, r3
 801d09a:	4b97      	ldr	r3, [pc, #604]	; (801d2f8 <ThreadDisplayTask+0x6fc>)
 801d09c:	801a      	strh	r2, [r3, #0]

					osMutexRelease(Fm25v02MutexHandle);
 801d09e:	4b97      	ldr	r3, [pc, #604]	; (801d2fc <ThreadDisplayTask+0x700>)
 801d0a0:	681b      	ldr	r3, [r3, #0]
 801d0a2:	4618      	mov	r0, r3
 801d0a4:	f7fc f94e 	bl	8019344 <osMutexRelease>

					number_display( ibutton_temp_register );
 801d0a8:	4b93      	ldr	r3, [pc, #588]	; (801d2f8 <ThreadDisplayTask+0x6fc>)
 801d0aa:	881b      	ldrh	r3, [r3, #0]
 801d0ac:	b29b      	uxth	r3, r3
 801d0ae:	b2db      	uxtb	r3, r3
 801d0b0:	4618      	mov	r0, r3
 801d0b2:	f00d f931 	bl	802a318 <number_display>

				}

				if(register_menu_state == P60)
 801d0b6:	4b8f      	ldr	r3, [pc, #572]	; (801d2f4 <ThreadDisplayTask+0x6f8>)
 801d0b8:	881b      	ldrh	r3, [r3, #0]
 801d0ba:	b29b      	uxth	r3, r3
 801d0bc:	2b3c      	cmp	r3, #60	; 0x3c
 801d0be:	d13c      	bne.n	801d13a <ThreadDisplayTask+0x53e>
				{
					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801d0c0:	4b8e      	ldr	r3, [pc, #568]	; (801d2fc <ThreadDisplayTask+0x700>)
 801d0c2:	681b      	ldr	r3, [r3, #0]
 801d0c4:	f04f 31ff 	mov.w	r1, #4294967295
 801d0c8:	4618      	mov	r0, r3
 801d0ca:	f7fc f8ed 	bl	80192a8 <osMutexWait>

					fm25v02_read(2*(SIGNAL_LEVEL_REG + (register_menu_state - P60) ), &ibutton_temp_reg_h);
 801d0ce:	4b89      	ldr	r3, [pc, #548]	; (801d2f4 <ThreadDisplayTask+0x6f8>)
 801d0d0:	881b      	ldrh	r3, [r3, #0]
 801d0d2:	b29b      	uxth	r3, r3
 801d0d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801d0d8:	3317      	adds	r3, #23
 801d0da:	b29b      	uxth	r3, r3
 801d0dc:	005b      	lsls	r3, r3, #1
 801d0de:	b29b      	uxth	r3, r3
 801d0e0:	f107 020f 	add.w	r2, r7, #15
 801d0e4:	4611      	mov	r1, r2
 801d0e6:	4618      	mov	r0, r3
 801d0e8:	f00d fc96 	bl	802aa18 <fm25v02_read>
					fm25v02_read(2*(SIGNAL_LEVEL_REG + (register_menu_state - P60) )+1, &ibutton_temp_reg_l);
 801d0ec:	4b81      	ldr	r3, [pc, #516]	; (801d2f4 <ThreadDisplayTask+0x6f8>)
 801d0ee:	881b      	ldrh	r3, [r3, #0]
 801d0f0:	b29b      	uxth	r3, r3
 801d0f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801d0f6:	3317      	adds	r3, #23
 801d0f8:	b29b      	uxth	r3, r3
 801d0fa:	005b      	lsls	r3, r3, #1
 801d0fc:	b29b      	uxth	r3, r3
 801d0fe:	3301      	adds	r3, #1
 801d100:	b29b      	uxth	r3, r3
 801d102:	f107 020e 	add.w	r2, r7, #14
 801d106:	4611      	mov	r1, r2
 801d108:	4618      	mov	r0, r3
 801d10a:	f00d fc85 	bl	802aa18 <fm25v02_read>
					ibutton_temp_register = (((uint16_t)ibutton_temp_reg_h)<<8)|ibutton_temp_reg_l;
 801d10e:	7bfb      	ldrb	r3, [r7, #15]
 801d110:	021b      	lsls	r3, r3, #8
 801d112:	b21a      	sxth	r2, r3
 801d114:	7bbb      	ldrb	r3, [r7, #14]
 801d116:	b21b      	sxth	r3, r3
 801d118:	4313      	orrs	r3, r2
 801d11a:	b21b      	sxth	r3, r3
 801d11c:	b29a      	uxth	r2, r3
 801d11e:	4b76      	ldr	r3, [pc, #472]	; (801d2f8 <ThreadDisplayTask+0x6fc>)
 801d120:	801a      	strh	r2, [r3, #0]

					osMutexRelease(Fm25v02MutexHandle);
 801d122:	4b76      	ldr	r3, [pc, #472]	; (801d2fc <ThreadDisplayTask+0x700>)
 801d124:	681b      	ldr	r3, [r3, #0]
 801d126:	4618      	mov	r0, r3
 801d128:	f7fc f90c 	bl	8019344 <osMutexRelease>

					number_display( ibutton_temp_register );
 801d12c:	4b72      	ldr	r3, [pc, #456]	; (801d2f8 <ThreadDisplayTask+0x6fc>)
 801d12e:	881b      	ldrh	r3, [r3, #0]
 801d130:	b29b      	uxth	r3, r3
 801d132:	b2db      	uxtb	r3, r3
 801d134:	4618      	mov	r0, r3
 801d136:	f00d f8ef 	bl	802a318 <number_display>
				}

				if( (register_menu_state >= P61) && (register_menu_state <= P68) )
 801d13a:	4b6e      	ldr	r3, [pc, #440]	; (801d2f4 <ThreadDisplayTask+0x6f8>)
 801d13c:	881b      	ldrh	r3, [r3, #0]
 801d13e:	b29b      	uxth	r3, r3
 801d140:	2b3c      	cmp	r3, #60	; 0x3c
 801d142:	d941      	bls.n	801d1c8 <ThreadDisplayTask+0x5cc>
 801d144:	4b6b      	ldr	r3, [pc, #428]	; (801d2f4 <ThreadDisplayTask+0x6f8>)
 801d146:	881b      	ldrh	r3, [r3, #0]
 801d148:	b29b      	uxth	r3, r3
 801d14a:	2b44      	cmp	r3, #68	; 0x44
 801d14c:	d83c      	bhi.n	801d1c8 <ThreadDisplayTask+0x5cc>
				{
					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801d14e:	4b6b      	ldr	r3, [pc, #428]	; (801d2fc <ThreadDisplayTask+0x700>)
 801d150:	681b      	ldr	r3, [r3, #0]
 801d152:	f04f 31ff 	mov.w	r1, #4294967295
 801d156:	4618      	mov	r0, r3
 801d158:	f7fc f8a6 	bl	80192a8 <osMutexWait>

					fm25v02_read(2*(ICCID_NUMBER_REG1 + (register_menu_state - P61) ), &ibutton_temp_reg_h);
 801d15c:	4b65      	ldr	r3, [pc, #404]	; (801d2f4 <ThreadDisplayTask+0x6f8>)
 801d15e:	881b      	ldrh	r3, [r3, #0]
 801d160:	b29b      	uxth	r3, r3
 801d162:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801d166:	331b      	adds	r3, #27
 801d168:	b29b      	uxth	r3, r3
 801d16a:	005b      	lsls	r3, r3, #1
 801d16c:	b29b      	uxth	r3, r3
 801d16e:	f107 020f 	add.w	r2, r7, #15
 801d172:	4611      	mov	r1, r2
 801d174:	4618      	mov	r0, r3
 801d176:	f00d fc4f 	bl	802aa18 <fm25v02_read>
					fm25v02_read(2*(ICCID_NUMBER_REG1 + (register_menu_state - P61) )+1, &ibutton_temp_reg_l);
 801d17a:	4b5e      	ldr	r3, [pc, #376]	; (801d2f4 <ThreadDisplayTask+0x6f8>)
 801d17c:	881b      	ldrh	r3, [r3, #0]
 801d17e:	b29b      	uxth	r3, r3
 801d180:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801d184:	331b      	adds	r3, #27
 801d186:	b29b      	uxth	r3, r3
 801d188:	005b      	lsls	r3, r3, #1
 801d18a:	b29b      	uxth	r3, r3
 801d18c:	3301      	adds	r3, #1
 801d18e:	b29b      	uxth	r3, r3
 801d190:	f107 020e 	add.w	r2, r7, #14
 801d194:	4611      	mov	r1, r2
 801d196:	4618      	mov	r0, r3
 801d198:	f00d fc3e 	bl	802aa18 <fm25v02_read>
					ibutton_temp_register = (((uint16_t)ibutton_temp_reg_h)<<8)|ibutton_temp_reg_l;
 801d19c:	7bfb      	ldrb	r3, [r7, #15]
 801d19e:	021b      	lsls	r3, r3, #8
 801d1a0:	b21a      	sxth	r2, r3
 801d1a2:	7bbb      	ldrb	r3, [r7, #14]
 801d1a4:	b21b      	sxth	r3, r3
 801d1a6:	4313      	orrs	r3, r2
 801d1a8:	b21b      	sxth	r3, r3
 801d1aa:	b29a      	uxth	r2, r3
 801d1ac:	4b52      	ldr	r3, [pc, #328]	; (801d2f8 <ThreadDisplayTask+0x6fc>)
 801d1ae:	801a      	strh	r2, [r3, #0]

					osMutexRelease(Fm25v02MutexHandle);
 801d1b0:	4b52      	ldr	r3, [pc, #328]	; (801d2fc <ThreadDisplayTask+0x700>)
 801d1b2:	681b      	ldr	r3, [r3, #0]
 801d1b4:	4618      	mov	r0, r3
 801d1b6:	f7fc f8c5 	bl	8019344 <osMutexRelease>

					number_display( ibutton_temp_register );
 801d1ba:	4b4f      	ldr	r3, [pc, #316]	; (801d2f8 <ThreadDisplayTask+0x6fc>)
 801d1bc:	881b      	ldrh	r3, [r3, #0]
 801d1be:	b29b      	uxth	r3, r3
 801d1c0:	b2db      	uxtb	r3, r3
 801d1c2:	4618      	mov	r0, r3
 801d1c4:	f00d f8a8 	bl	802a318 <number_display>
				}

			}


			if( (register_menu_state >= Y1) && (register_menu_state <= Y31) )
 801d1c8:	4b4a      	ldr	r3, [pc, #296]	; (801d2f4 <ThreadDisplayTask+0x6f8>)
 801d1ca:	881b      	ldrh	r3, [r3, #0]
 801d1cc:	b29b      	uxth	r3, r3
 801d1ce:	2b44      	cmp	r3, #68	; 0x44
 801d1d0:	f240 8246 	bls.w	801d660 <ThreadDisplayTask+0xa64>
 801d1d4:	4b47      	ldr	r3, [pc, #284]	; (801d2f4 <ThreadDisplayTask+0x6f8>)
 801d1d6:	881b      	ldrh	r3, [r3, #0]
 801d1d8:	b29b      	uxth	r3, r3
 801d1da:	2b63      	cmp	r3, #99	; 0x63
 801d1dc:	f200 8240 	bhi.w	801d660 <ThreadDisplayTask+0xa64>
			{

				if( (register_menu_state >= Y1) && (register_menu_state <= Y2) )
 801d1e0:	4b44      	ldr	r3, [pc, #272]	; (801d2f4 <ThreadDisplayTask+0x6f8>)
 801d1e2:	881b      	ldrh	r3, [r3, #0]
 801d1e4:	b29b      	uxth	r3, r3
 801d1e6:	2b44      	cmp	r3, #68	; 0x44
 801d1e8:	d947      	bls.n	801d27a <ThreadDisplayTask+0x67e>
 801d1ea:	4b42      	ldr	r3, [pc, #264]	; (801d2f4 <ThreadDisplayTask+0x6f8>)
 801d1ec:	881b      	ldrh	r3, [r3, #0]
 801d1ee:	b29b      	uxth	r3, r3
 801d1f0:	2b46      	cmp	r3, #70	; 0x46
 801d1f2:	d842      	bhi.n	801d27a <ThreadDisplayTask+0x67e>
				{

					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801d1f4:	4b41      	ldr	r3, [pc, #260]	; (801d2fc <ThreadDisplayTask+0x700>)
 801d1f6:	681b      	ldr	r3, [r3, #0]
 801d1f8:	f04f 31ff 	mov.w	r1, #4294967295
 801d1fc:	4618      	mov	r0, r3
 801d1fe:	f7fc f853 	bl	80192a8 <osMutexWait>

					fm25v02_read(2*(SECURITY_CONTROL_REG + (register_menu_state - Y1) ), &ibutton_temp_reg_h);
 801d202:	4b3c      	ldr	r3, [pc, #240]	; (801d2f4 <ThreadDisplayTask+0x6f8>)
 801d204:	881b      	ldrh	r3, [r3, #0]
 801d206:	b29b      	uxth	r3, r3
 801d208:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 801d20c:	330b      	adds	r3, #11
 801d20e:	b29b      	uxth	r3, r3
 801d210:	005b      	lsls	r3, r3, #1
 801d212:	b29b      	uxth	r3, r3
 801d214:	f107 020f 	add.w	r2, r7, #15
 801d218:	4611      	mov	r1, r2
 801d21a:	4618      	mov	r0, r3
 801d21c:	f00d fbfc 	bl	802aa18 <fm25v02_read>
					fm25v02_read(2*(SECURITY_CONTROL_REG + (register_menu_state - Y1) )+1, &ibutton_temp_reg_l);
 801d220:	4b34      	ldr	r3, [pc, #208]	; (801d2f4 <ThreadDisplayTask+0x6f8>)
 801d222:	881b      	ldrh	r3, [r3, #0]
 801d224:	b29b      	uxth	r3, r3
 801d226:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 801d22a:	330b      	adds	r3, #11
 801d22c:	b29b      	uxth	r3, r3
 801d22e:	005b      	lsls	r3, r3, #1
 801d230:	b29b      	uxth	r3, r3
 801d232:	3301      	adds	r3, #1
 801d234:	b29b      	uxth	r3, r3
 801d236:	f107 020e 	add.w	r2, r7, #14
 801d23a:	4611      	mov	r1, r2
 801d23c:	4618      	mov	r0, r3
 801d23e:	f00d fbeb 	bl	802aa18 <fm25v02_read>
					ibutton_temp_register = (((uint16_t)ibutton_temp_reg_h)<<8)|ibutton_temp_reg_l;
 801d242:	7bfb      	ldrb	r3, [r7, #15]
 801d244:	021b      	lsls	r3, r3, #8
 801d246:	b21a      	sxth	r2, r3
 801d248:	7bbb      	ldrb	r3, [r7, #14]
 801d24a:	b21b      	sxth	r3, r3
 801d24c:	4313      	orrs	r3, r2
 801d24e:	b21b      	sxth	r3, r3
 801d250:	b29a      	uxth	r2, r3
 801d252:	4b29      	ldr	r3, [pc, #164]	; (801d2f8 <ThreadDisplayTask+0x6fc>)
 801d254:	801a      	strh	r2, [r3, #0]

					osMutexRelease(Fm25v02MutexHandle);
 801d256:	4b29      	ldr	r3, [pc, #164]	; (801d2fc <ThreadDisplayTask+0x700>)
 801d258:	681b      	ldr	r3, [r3, #0]
 801d25a:	4618      	mov	r0, r3
 801d25c:	f7fc f872 	bl	8019344 <osMutexRelease>

					number_display( ibutton_temp_register );
 801d260:	4b25      	ldr	r3, [pc, #148]	; (801d2f8 <ThreadDisplayTask+0x6fc>)
 801d262:	881b      	ldrh	r3, [r3, #0]
 801d264:	b29b      	uxth	r3, r3
 801d266:	b2db      	uxtb	r3, r3
 801d268:	4618      	mov	r0, r3
 801d26a:	f00d f855 	bl	802a318 <number_display>

					control_register_temp_number = ibutton_temp_register;
 801d26e:	4b22      	ldr	r3, [pc, #136]	; (801d2f8 <ThreadDisplayTask+0x6fc>)
 801d270:	881b      	ldrh	r3, [r3, #0]
 801d272:	b29b      	uxth	r3, r3
 801d274:	b2da      	uxtb	r2, r3
 801d276:	4b22      	ldr	r3, [pc, #136]	; (801d300 <ThreadDisplayTask+0x704>)
 801d278:	701a      	strb	r2, [r3, #0]

				}

				if( (register_menu_state >= Y3) && (register_menu_state <= Y4) )
 801d27a:	4b1e      	ldr	r3, [pc, #120]	; (801d2f4 <ThreadDisplayTask+0x6f8>)
 801d27c:	881b      	ldrh	r3, [r3, #0]
 801d27e:	b29b      	uxth	r3, r3
 801d280:	2b46      	cmp	r3, #70	; 0x46
 801d282:	d951      	bls.n	801d328 <ThreadDisplayTask+0x72c>
 801d284:	4b1b      	ldr	r3, [pc, #108]	; (801d2f4 <ThreadDisplayTask+0x6f8>)
 801d286:	881b      	ldrh	r3, [r3, #0]
 801d288:	b29b      	uxth	r3, r3
 801d28a:	2b48      	cmp	r3, #72	; 0x48
 801d28c:	d84c      	bhi.n	801d328 <ThreadDisplayTask+0x72c>
				{

					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801d28e:	4b1b      	ldr	r3, [pc, #108]	; (801d2fc <ThreadDisplayTask+0x700>)
 801d290:	681b      	ldr	r3, [r3, #0]
 801d292:	f04f 31ff 	mov.w	r1, #4294967295
 801d296:	4618      	mov	r0, r3
 801d298:	f7fc f806 	bl	80192a8 <osMutexWait>

					fm25v02_read(2*(ALARM_LOOP_CLEAR_REG + (register_menu_state - Y3) ), &ibutton_temp_reg_h);
 801d29c:	4b15      	ldr	r3, [pc, #84]	; (801d2f4 <ThreadDisplayTask+0x6f8>)
 801d29e:	881b      	ldrh	r3, [r3, #0]
 801d2a0:	b29b      	uxth	r3, r3
 801d2a2:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 801d2a6:	330e      	adds	r3, #14
 801d2a8:	b29b      	uxth	r3, r3
 801d2aa:	005b      	lsls	r3, r3, #1
 801d2ac:	b29b      	uxth	r3, r3
 801d2ae:	f107 020f 	add.w	r2, r7, #15
 801d2b2:	4611      	mov	r1, r2
 801d2b4:	4618      	mov	r0, r3
 801d2b6:	f00d fbaf 	bl	802aa18 <fm25v02_read>
					fm25v02_read(2*(ALARM_LOOP_CLEAR_REG + (register_menu_state - Y3) )+1, &ibutton_temp_reg_l);
 801d2ba:	4b0e      	ldr	r3, [pc, #56]	; (801d2f4 <ThreadDisplayTask+0x6f8>)
 801d2bc:	881b      	ldrh	r3, [r3, #0]
 801d2be:	b29b      	uxth	r3, r3
 801d2c0:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 801d2c4:	330e      	adds	r3, #14
 801d2c6:	b29b      	uxth	r3, r3
 801d2c8:	005b      	lsls	r3, r3, #1
 801d2ca:	b29b      	uxth	r3, r3
 801d2cc:	3301      	adds	r3, #1
 801d2ce:	b29b      	uxth	r3, r3
 801d2d0:	f107 020e 	add.w	r2, r7, #14
 801d2d4:	4611      	mov	r1, r2
 801d2d6:	4618      	mov	r0, r3
 801d2d8:	f00d fb9e 	bl	802aa18 <fm25v02_read>
					ibutton_temp_register = (((uint16_t)ibutton_temp_reg_h)<<8)|ibutton_temp_reg_l;
 801d2dc:	7bfb      	ldrb	r3, [r7, #15]
 801d2de:	021b      	lsls	r3, r3, #8
 801d2e0:	b21a      	sxth	r2, r3
 801d2e2:	7bbb      	ldrb	r3, [r7, #14]
 801d2e4:	b21b      	sxth	r3, r3
 801d2e6:	4313      	orrs	r3, r2
 801d2e8:	b21b      	sxth	r3, r3
 801d2ea:	b29a      	uxth	r2, r3
 801d2ec:	4b02      	ldr	r3, [pc, #8]	; (801d2f8 <ThreadDisplayTask+0x6fc>)
 801d2ee:	801a      	strh	r2, [r3, #0]
 801d2f0:	e008      	b.n	801d304 <ThreadDisplayTask+0x708>
 801d2f2:	bf00      	nop
 801d2f4:	20008010 	.word	0x20008010
 801d2f8:	20009f50 	.word	0x20009f50
 801d2fc:	20009bb8 	.word	0x20009bb8
 801d300:	20008017 	.word	0x20008017

					osMutexRelease(Fm25v02MutexHandle);
 801d304:	4ba6      	ldr	r3, [pc, #664]	; (801d5a0 <ThreadDisplayTask+0x9a4>)
 801d306:	681b      	ldr	r3, [r3, #0]
 801d308:	4618      	mov	r0, r3
 801d30a:	f7fc f81b 	bl	8019344 <osMutexRelease>

					number_display( ibutton_temp_register );
 801d30e:	4ba5      	ldr	r3, [pc, #660]	; (801d5a4 <ThreadDisplayTask+0x9a8>)
 801d310:	881b      	ldrh	r3, [r3, #0]
 801d312:	b29b      	uxth	r3, r3
 801d314:	b2db      	uxtb	r3, r3
 801d316:	4618      	mov	r0, r3
 801d318:	f00c fffe 	bl	802a318 <number_display>

					control_register_temp_number = ibutton_temp_register;
 801d31c:	4ba1      	ldr	r3, [pc, #644]	; (801d5a4 <ThreadDisplayTask+0x9a8>)
 801d31e:	881b      	ldrh	r3, [r3, #0]
 801d320:	b29b      	uxth	r3, r3
 801d322:	b2da      	uxtb	r2, r3
 801d324:	4ba0      	ldr	r3, [pc, #640]	; (801d5a8 <ThreadDisplayTask+0x9ac>)
 801d326:	701a      	strb	r2, [r3, #0]

				}

				if( (register_menu_state >= Y5) && (register_menu_state <= Y12) )
 801d328:	4ba0      	ldr	r3, [pc, #640]	; (801d5ac <ThreadDisplayTask+0x9b0>)
 801d32a:	881b      	ldrh	r3, [r3, #0]
 801d32c:	b29b      	uxth	r3, r3
 801d32e:	2b48      	cmp	r3, #72	; 0x48
 801d330:	d947      	bls.n	801d3c2 <ThreadDisplayTask+0x7c6>
 801d332:	4b9e      	ldr	r3, [pc, #632]	; (801d5ac <ThreadDisplayTask+0x9b0>)
 801d334:	881b      	ldrh	r3, [r3, #0]
 801d336:	b29b      	uxth	r3, r3
 801d338:	2b50      	cmp	r3, #80	; 0x50
 801d33a:	d842      	bhi.n	801d3c2 <ThreadDisplayTask+0x7c6>
				{

					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801d33c:	4b98      	ldr	r3, [pc, #608]	; (801d5a0 <ThreadDisplayTask+0x9a4>)
 801d33e:	681b      	ldr	r3, [r3, #0]
 801d340:	f04f 31ff 	mov.w	r1, #4294967295
 801d344:	4618      	mov	r0, r3
 801d346:	f7fb ffaf 	bl	80192a8 <osMutexWait>

					fm25v02_read(2*(TIME_UPDATE_REG + (register_menu_state - Y5) ), &ibutton_temp_reg_h);
 801d34a:	4b98      	ldr	r3, [pc, #608]	; (801d5ac <ThreadDisplayTask+0x9b0>)
 801d34c:	881b      	ldrh	r3, [r3, #0]
 801d34e:	b29b      	uxth	r3, r3
 801d350:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 801d354:	330f      	adds	r3, #15
 801d356:	b29b      	uxth	r3, r3
 801d358:	005b      	lsls	r3, r3, #1
 801d35a:	b29b      	uxth	r3, r3
 801d35c:	f107 020f 	add.w	r2, r7, #15
 801d360:	4611      	mov	r1, r2
 801d362:	4618      	mov	r0, r3
 801d364:	f00d fb58 	bl	802aa18 <fm25v02_read>
					fm25v02_read(2*(TIME_UPDATE_REG + (register_menu_state - Y5) )+1, &ibutton_temp_reg_l);
 801d368:	4b90      	ldr	r3, [pc, #576]	; (801d5ac <ThreadDisplayTask+0x9b0>)
 801d36a:	881b      	ldrh	r3, [r3, #0]
 801d36c:	b29b      	uxth	r3, r3
 801d36e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 801d372:	330f      	adds	r3, #15
 801d374:	b29b      	uxth	r3, r3
 801d376:	005b      	lsls	r3, r3, #1
 801d378:	b29b      	uxth	r3, r3
 801d37a:	3301      	adds	r3, #1
 801d37c:	b29b      	uxth	r3, r3
 801d37e:	f107 020e 	add.w	r2, r7, #14
 801d382:	4611      	mov	r1, r2
 801d384:	4618      	mov	r0, r3
 801d386:	f00d fb47 	bl	802aa18 <fm25v02_read>
					ibutton_temp_register = (((uint16_t)ibutton_temp_reg_h)<<8)|ibutton_temp_reg_l;
 801d38a:	7bfb      	ldrb	r3, [r7, #15]
 801d38c:	021b      	lsls	r3, r3, #8
 801d38e:	b21a      	sxth	r2, r3
 801d390:	7bbb      	ldrb	r3, [r7, #14]
 801d392:	b21b      	sxth	r3, r3
 801d394:	4313      	orrs	r3, r2
 801d396:	b21b      	sxth	r3, r3
 801d398:	b29a      	uxth	r2, r3
 801d39a:	4b82      	ldr	r3, [pc, #520]	; (801d5a4 <ThreadDisplayTask+0x9a8>)
 801d39c:	801a      	strh	r2, [r3, #0]

					osMutexRelease(Fm25v02MutexHandle);
 801d39e:	4b80      	ldr	r3, [pc, #512]	; (801d5a0 <ThreadDisplayTask+0x9a4>)
 801d3a0:	681b      	ldr	r3, [r3, #0]
 801d3a2:	4618      	mov	r0, r3
 801d3a4:	f7fb ffce 	bl	8019344 <osMutexRelease>

					number_display( ibutton_temp_register );
 801d3a8:	4b7e      	ldr	r3, [pc, #504]	; (801d5a4 <ThreadDisplayTask+0x9a8>)
 801d3aa:	881b      	ldrh	r3, [r3, #0]
 801d3ac:	b29b      	uxth	r3, r3
 801d3ae:	b2db      	uxtb	r3, r3
 801d3b0:	4618      	mov	r0, r3
 801d3b2:	f00c ffb1 	bl	802a318 <number_display>

					control_register_temp_number = ibutton_temp_register;
 801d3b6:	4b7b      	ldr	r3, [pc, #492]	; (801d5a4 <ThreadDisplayTask+0x9a8>)
 801d3b8:	881b      	ldrh	r3, [r3, #0]
 801d3ba:	b29b      	uxth	r3, r3
 801d3bc:	b2da      	uxtb	r2, r3
 801d3be:	4b7a      	ldr	r3, [pc, #488]	; (801d5a8 <ThreadDisplayTask+0x9ac>)
 801d3c0:	701a      	strb	r2, [r3, #0]

				}

				if( (register_menu_state >= Y13) && (register_menu_state <= Y15) )
 801d3c2:	4b7a      	ldr	r3, [pc, #488]	; (801d5ac <ThreadDisplayTask+0x9b0>)
 801d3c4:	881b      	ldrh	r3, [r3, #0]
 801d3c6:	b29b      	uxth	r3, r3
 801d3c8:	2b50      	cmp	r3, #80	; 0x50
 801d3ca:	d947      	bls.n	801d45c <ThreadDisplayTask+0x860>
 801d3cc:	4b77      	ldr	r3, [pc, #476]	; (801d5ac <ThreadDisplayTask+0x9b0>)
 801d3ce:	881b      	ldrh	r3, [r3, #0]
 801d3d0:	b29b      	uxth	r3, r3
 801d3d2:	2b53      	cmp	r3, #83	; 0x53
 801d3d4:	d842      	bhi.n	801d45c <ThreadDisplayTask+0x860>
				{

					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801d3d6:	4b72      	ldr	r3, [pc, #456]	; (801d5a0 <ThreadDisplayTask+0x9a4>)
 801d3d8:	681b      	ldr	r3, [r3, #0]
 801d3da:	f04f 31ff 	mov.w	r1, #4294967295
 801d3de:	4618      	mov	r0, r3
 801d3e0:	f7fb ff62 	bl	80192a8 <osMutexWait>

					fm25v02_read(2*(EVENT_READ_REG + (register_menu_state - Y13) ), &ibutton_temp_reg_h);
 801d3e4:	4b71      	ldr	r3, [pc, #452]	; (801d5ac <ThreadDisplayTask+0x9b0>)
 801d3e6:	881b      	ldrh	r3, [r3, #0]
 801d3e8:	b29b      	uxth	r3, r3
 801d3ea:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 801d3ee:	3311      	adds	r3, #17
 801d3f0:	b29b      	uxth	r3, r3
 801d3f2:	005b      	lsls	r3, r3, #1
 801d3f4:	b29b      	uxth	r3, r3
 801d3f6:	f107 020f 	add.w	r2, r7, #15
 801d3fa:	4611      	mov	r1, r2
 801d3fc:	4618      	mov	r0, r3
 801d3fe:	f00d fb0b 	bl	802aa18 <fm25v02_read>
					fm25v02_read(2*(EVENT_READ_REG + (register_menu_state - Y13) )+1, &ibutton_temp_reg_l);
 801d402:	4b6a      	ldr	r3, [pc, #424]	; (801d5ac <ThreadDisplayTask+0x9b0>)
 801d404:	881b      	ldrh	r3, [r3, #0]
 801d406:	b29b      	uxth	r3, r3
 801d408:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 801d40c:	3311      	adds	r3, #17
 801d40e:	b29b      	uxth	r3, r3
 801d410:	005b      	lsls	r3, r3, #1
 801d412:	b29b      	uxth	r3, r3
 801d414:	3301      	adds	r3, #1
 801d416:	b29b      	uxth	r3, r3
 801d418:	f107 020e 	add.w	r2, r7, #14
 801d41c:	4611      	mov	r1, r2
 801d41e:	4618      	mov	r0, r3
 801d420:	f00d fafa 	bl	802aa18 <fm25v02_read>
					ibutton_temp_register = (((uint16_t)ibutton_temp_reg_h)<<8)|ibutton_temp_reg_l;
 801d424:	7bfb      	ldrb	r3, [r7, #15]
 801d426:	021b      	lsls	r3, r3, #8
 801d428:	b21a      	sxth	r2, r3
 801d42a:	7bbb      	ldrb	r3, [r7, #14]
 801d42c:	b21b      	sxth	r3, r3
 801d42e:	4313      	orrs	r3, r2
 801d430:	b21b      	sxth	r3, r3
 801d432:	b29a      	uxth	r2, r3
 801d434:	4b5b      	ldr	r3, [pc, #364]	; (801d5a4 <ThreadDisplayTask+0x9a8>)
 801d436:	801a      	strh	r2, [r3, #0]

					osMutexRelease(Fm25v02MutexHandle);
 801d438:	4b59      	ldr	r3, [pc, #356]	; (801d5a0 <ThreadDisplayTask+0x9a4>)
 801d43a:	681b      	ldr	r3, [r3, #0]
 801d43c:	4618      	mov	r0, r3
 801d43e:	f7fb ff81 	bl	8019344 <osMutexRelease>

					number_display( ibutton_temp_register );
 801d442:	4b58      	ldr	r3, [pc, #352]	; (801d5a4 <ThreadDisplayTask+0x9a8>)
 801d444:	881b      	ldrh	r3, [r3, #0]
 801d446:	b29b      	uxth	r3, r3
 801d448:	b2db      	uxtb	r3, r3
 801d44a:	4618      	mov	r0, r3
 801d44c:	f00c ff64 	bl	802a318 <number_display>

					control_register_temp_number = ibutton_temp_register;
 801d450:	4b54      	ldr	r3, [pc, #336]	; (801d5a4 <ThreadDisplayTask+0x9a8>)
 801d452:	881b      	ldrh	r3, [r3, #0]
 801d454:	b29b      	uxth	r3, r3
 801d456:	b2da      	uxtb	r2, r3
 801d458:	4b53      	ldr	r3, [pc, #332]	; (801d5a8 <ThreadDisplayTask+0x9ac>)
 801d45a:	701a      	strb	r2, [r3, #0]

				}

				if( (register_menu_state >= Y16) && (register_menu_state <= Y28) )
 801d45c:	4b53      	ldr	r3, [pc, #332]	; (801d5ac <ThreadDisplayTask+0x9b0>)
 801d45e:	881b      	ldrh	r3, [r3, #0]
 801d460:	b29b      	uxth	r3, r3
 801d462:	2b53      	cmp	r3, #83	; 0x53
 801d464:	d947      	bls.n	801d4f6 <ThreadDisplayTask+0x8fa>
 801d466:	4b51      	ldr	r3, [pc, #324]	; (801d5ac <ThreadDisplayTask+0x9b0>)
 801d468:	881b      	ldrh	r3, [r3, #0]
 801d46a:	b29b      	uxth	r3, r3
 801d46c:	2b60      	cmp	r3, #96	; 0x60
 801d46e:	d842      	bhi.n	801d4f6 <ThreadDisplayTask+0x8fa>
				{

					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801d470:	4b4b      	ldr	r3, [pc, #300]	; (801d5a0 <ThreadDisplayTask+0x9a4>)
 801d472:	681b      	ldr	r3, [r3, #0]
 801d474:	f04f 31ff 	mov.w	r1, #4294967295
 801d478:	4618      	mov	r0, r3
 801d47a:	f7fb ff15 	bl	80192a8 <osMutexWait>

					fm25v02_read(2*(ID_HIGH_REG + (register_menu_state - Y16) ), &ibutton_temp_reg_h);
 801d47e:	4b4b      	ldr	r3, [pc, #300]	; (801d5ac <ThreadDisplayTask+0x9b0>)
 801d480:	881b      	ldrh	r3, [r3, #0]
 801d482:	b29b      	uxth	r3, r3
 801d484:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 801d488:	3317      	adds	r3, #23
 801d48a:	b29b      	uxth	r3, r3
 801d48c:	005b      	lsls	r3, r3, #1
 801d48e:	b29b      	uxth	r3, r3
 801d490:	f107 020f 	add.w	r2, r7, #15
 801d494:	4611      	mov	r1, r2
 801d496:	4618      	mov	r0, r3
 801d498:	f00d fabe 	bl	802aa18 <fm25v02_read>
					fm25v02_read(2*(ID_HIGH_REG + (register_menu_state - Y16) )+1, &ibutton_temp_reg_l);
 801d49c:	4b43      	ldr	r3, [pc, #268]	; (801d5ac <ThreadDisplayTask+0x9b0>)
 801d49e:	881b      	ldrh	r3, [r3, #0]
 801d4a0:	b29b      	uxth	r3, r3
 801d4a2:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 801d4a6:	3317      	adds	r3, #23
 801d4a8:	b29b      	uxth	r3, r3
 801d4aa:	005b      	lsls	r3, r3, #1
 801d4ac:	b29b      	uxth	r3, r3
 801d4ae:	3301      	adds	r3, #1
 801d4b0:	b29b      	uxth	r3, r3
 801d4b2:	f107 020e 	add.w	r2, r7, #14
 801d4b6:	4611      	mov	r1, r2
 801d4b8:	4618      	mov	r0, r3
 801d4ba:	f00d faad 	bl	802aa18 <fm25v02_read>
					ibutton_temp_register = (((uint16_t)ibutton_temp_reg_h)<<8)|ibutton_temp_reg_l;
 801d4be:	7bfb      	ldrb	r3, [r7, #15]
 801d4c0:	021b      	lsls	r3, r3, #8
 801d4c2:	b21a      	sxth	r2, r3
 801d4c4:	7bbb      	ldrb	r3, [r7, #14]
 801d4c6:	b21b      	sxth	r3, r3
 801d4c8:	4313      	orrs	r3, r2
 801d4ca:	b21b      	sxth	r3, r3
 801d4cc:	b29a      	uxth	r2, r3
 801d4ce:	4b35      	ldr	r3, [pc, #212]	; (801d5a4 <ThreadDisplayTask+0x9a8>)
 801d4d0:	801a      	strh	r2, [r3, #0]

					osMutexRelease(Fm25v02MutexHandle);
 801d4d2:	4b33      	ldr	r3, [pc, #204]	; (801d5a0 <ThreadDisplayTask+0x9a4>)
 801d4d4:	681b      	ldr	r3, [r3, #0]
 801d4d6:	4618      	mov	r0, r3
 801d4d8:	f7fb ff34 	bl	8019344 <osMutexRelease>

					number_display( ibutton_temp_register );
 801d4dc:	4b31      	ldr	r3, [pc, #196]	; (801d5a4 <ThreadDisplayTask+0x9a8>)
 801d4de:	881b      	ldrh	r3, [r3, #0]
 801d4e0:	b29b      	uxth	r3, r3
 801d4e2:	b2db      	uxtb	r3, r3
 801d4e4:	4618      	mov	r0, r3
 801d4e6:	f00c ff17 	bl	802a318 <number_display>

					control_register_temp_number = ibutton_temp_register;
 801d4ea:	4b2e      	ldr	r3, [pc, #184]	; (801d5a4 <ThreadDisplayTask+0x9a8>)
 801d4ec:	881b      	ldrh	r3, [r3, #0]
 801d4ee:	b29b      	uxth	r3, r3
 801d4f0:	b2da      	uxtb	r2, r3
 801d4f2:	4b2d      	ldr	r3, [pc, #180]	; (801d5a8 <ThreadDisplayTask+0x9ac>)
 801d4f4:	701a      	strb	r2, [r3, #0]

				}

				if( register_menu_state == Y29 )
 801d4f6:	4b2d      	ldr	r3, [pc, #180]	; (801d5ac <ThreadDisplayTask+0x9b0>)
 801d4f8:	881b      	ldrh	r3, [r3, #0]
 801d4fa:	b29b      	uxth	r3, r3
 801d4fc:	2b61      	cmp	r3, #97	; 0x61
 801d4fe:	d142      	bne.n	801d586 <ThreadDisplayTask+0x98a>
				{

					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801d500:	4b27      	ldr	r3, [pc, #156]	; (801d5a0 <ThreadDisplayTask+0x9a4>)
 801d502:	681b      	ldr	r3, [r3, #0]
 801d504:	f04f 31ff 	mov.w	r1, #4294967295
 801d508:	4618      	mov	r0, r3
 801d50a:	f7fb fecd 	bl	80192a8 <osMutexWait>

					fm25v02_read(2*(MUTE_REG + (register_menu_state - Y29) ), &ibutton_temp_reg_h);
 801d50e:	4b27      	ldr	r3, [pc, #156]	; (801d5ac <ThreadDisplayTask+0x9b0>)
 801d510:	881b      	ldrh	r3, [r3, #0]
 801d512:	b29b      	uxth	r3, r3
 801d514:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 801d518:	3318      	adds	r3, #24
 801d51a:	b29b      	uxth	r3, r3
 801d51c:	005b      	lsls	r3, r3, #1
 801d51e:	b29b      	uxth	r3, r3
 801d520:	f107 020f 	add.w	r2, r7, #15
 801d524:	4611      	mov	r1, r2
 801d526:	4618      	mov	r0, r3
 801d528:	f00d fa76 	bl	802aa18 <fm25v02_read>
					fm25v02_read(2*(MUTE_REG + (register_menu_state - Y29) )+1, &ibutton_temp_reg_l);
 801d52c:	4b1f      	ldr	r3, [pc, #124]	; (801d5ac <ThreadDisplayTask+0x9b0>)
 801d52e:	881b      	ldrh	r3, [r3, #0]
 801d530:	b29b      	uxth	r3, r3
 801d532:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 801d536:	3318      	adds	r3, #24
 801d538:	b29b      	uxth	r3, r3
 801d53a:	005b      	lsls	r3, r3, #1
 801d53c:	b29b      	uxth	r3, r3
 801d53e:	3301      	adds	r3, #1
 801d540:	b29b      	uxth	r3, r3
 801d542:	f107 020e 	add.w	r2, r7, #14
 801d546:	4611      	mov	r1, r2
 801d548:	4618      	mov	r0, r3
 801d54a:	f00d fa65 	bl	802aa18 <fm25v02_read>
					ibutton_temp_register = (((uint16_t)ibutton_temp_reg_h)<<8)|ibutton_temp_reg_l;
 801d54e:	7bfb      	ldrb	r3, [r7, #15]
 801d550:	021b      	lsls	r3, r3, #8
 801d552:	b21a      	sxth	r2, r3
 801d554:	7bbb      	ldrb	r3, [r7, #14]
 801d556:	b21b      	sxth	r3, r3
 801d558:	4313      	orrs	r3, r2
 801d55a:	b21b      	sxth	r3, r3
 801d55c:	b29a      	uxth	r2, r3
 801d55e:	4b11      	ldr	r3, [pc, #68]	; (801d5a4 <ThreadDisplayTask+0x9a8>)
 801d560:	801a      	strh	r2, [r3, #0]

					osMutexRelease(Fm25v02MutexHandle);
 801d562:	4b0f      	ldr	r3, [pc, #60]	; (801d5a0 <ThreadDisplayTask+0x9a4>)
 801d564:	681b      	ldr	r3, [r3, #0]
 801d566:	4618      	mov	r0, r3
 801d568:	f7fb feec 	bl	8019344 <osMutexRelease>

					number_display( ibutton_temp_register );
 801d56c:	4b0d      	ldr	r3, [pc, #52]	; (801d5a4 <ThreadDisplayTask+0x9a8>)
 801d56e:	881b      	ldrh	r3, [r3, #0]
 801d570:	b29b      	uxth	r3, r3
 801d572:	b2db      	uxtb	r3, r3
 801d574:	4618      	mov	r0, r3
 801d576:	f00c fecf 	bl	802a318 <number_display>

					control_register_temp_number = ibutton_temp_register;
 801d57a:	4b0a      	ldr	r3, [pc, #40]	; (801d5a4 <ThreadDisplayTask+0x9a8>)
 801d57c:	881b      	ldrh	r3, [r3, #0]
 801d57e:	b29b      	uxth	r3, r3
 801d580:	b2da      	uxtb	r2, r3
 801d582:	4b09      	ldr	r3, [pc, #36]	; (801d5a8 <ThreadDisplayTask+0x9ac>)
 801d584:	701a      	strb	r2, [r3, #0]

				}

				if( register_menu_state == Y30 )
 801d586:	4b09      	ldr	r3, [pc, #36]	; (801d5ac <ThreadDisplayTask+0x9b0>)
 801d588:	881b      	ldrh	r3, [r3, #0]
 801d58a:	b29b      	uxth	r3, r3
 801d58c:	2b62      	cmp	r3, #98	; 0x62
 801d58e:	d134      	bne.n	801d5fa <ThreadDisplayTask+0x9fe>
				{

					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801d590:	4b03      	ldr	r3, [pc, #12]	; (801d5a0 <ThreadDisplayTask+0x9a4>)
 801d592:	681b      	ldr	r3, [r3, #0]
 801d594:	f04f 31ff 	mov.w	r1, #4294967295
 801d598:	4618      	mov	r0, r3
 801d59a:	f7fb fe85 	bl	80192a8 <osMutexWait>
 801d59e:	e007      	b.n	801d5b0 <ThreadDisplayTask+0x9b4>
 801d5a0:	20009bb8 	.word	0x20009bb8
 801d5a4:	20009f50 	.word	0x20009f50
 801d5a8:	20008017 	.word	0x20008017
 801d5ac:	20008010 	.word	0x20008010

					fm25v02_read(2*(ARMING_TIMELEFT + (register_menu_state - Y30) ), &ibutton_temp_reg_h);
 801d5b0:	4b9f      	ldr	r3, [pc, #636]	; (801d830 <ThreadDisplayTask+0xc34>)
 801d5b2:	881b      	ldrh	r3, [r3, #0]
 801d5b4:	b29b      	uxth	r3, r3
 801d5b6:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 801d5ba:	3307      	adds	r3, #7
 801d5bc:	b29b      	uxth	r3, r3
 801d5be:	005b      	lsls	r3, r3, #1
 801d5c0:	b29b      	uxth	r3, r3
 801d5c2:	f107 020f 	add.w	r2, r7, #15
 801d5c6:	4611      	mov	r1, r2
 801d5c8:	4618      	mov	r0, r3
 801d5ca:	f00d fa25 	bl	802aa18 <fm25v02_read>
					//fm25v02_read(2*(ARMING_TIMELEFT + (register_menu_state - Y30) )+1, &ibutton_temp_reg_l);
					//ibutton_temp_register = (((uint16_t)ibutton_temp_reg_h)<<8)|ibutton_temp_reg_l;
					ibutton_temp_register = ibutton_temp_reg_h;
 801d5ce:	7bfb      	ldrb	r3, [r7, #15]
 801d5d0:	b29a      	uxth	r2, r3
 801d5d2:	4b98      	ldr	r3, [pc, #608]	; (801d834 <ThreadDisplayTask+0xc38>)
 801d5d4:	801a      	strh	r2, [r3, #0]

					osMutexRelease(Fm25v02MutexHandle);
 801d5d6:	4b98      	ldr	r3, [pc, #608]	; (801d838 <ThreadDisplayTask+0xc3c>)
 801d5d8:	681b      	ldr	r3, [r3, #0]
 801d5da:	4618      	mov	r0, r3
 801d5dc:	f7fb feb2 	bl	8019344 <osMutexRelease>

					number_display( ibutton_temp_register );
 801d5e0:	4b94      	ldr	r3, [pc, #592]	; (801d834 <ThreadDisplayTask+0xc38>)
 801d5e2:	881b      	ldrh	r3, [r3, #0]
 801d5e4:	b29b      	uxth	r3, r3
 801d5e6:	b2db      	uxtb	r3, r3
 801d5e8:	4618      	mov	r0, r3
 801d5ea:	f00c fe95 	bl	802a318 <number_display>

					control_register_temp_number = ibutton_temp_register;
 801d5ee:	4b91      	ldr	r3, [pc, #580]	; (801d834 <ThreadDisplayTask+0xc38>)
 801d5f0:	881b      	ldrh	r3, [r3, #0]
 801d5f2:	b29b      	uxth	r3, r3
 801d5f4:	b2da      	uxtb	r2, r3
 801d5f6:	4b91      	ldr	r3, [pc, #580]	; (801d83c <ThreadDisplayTask+0xc40>)
 801d5f8:	701a      	strb	r2, [r3, #0]

				}

				if( register_menu_state == Y31 )
 801d5fa:	4b8d      	ldr	r3, [pc, #564]	; (801d830 <ThreadDisplayTask+0xc34>)
 801d5fc:	881b      	ldrh	r3, [r3, #0]
 801d5fe:	b29b      	uxth	r3, r3
 801d600:	2b63      	cmp	r3, #99	; 0x63
 801d602:	d12d      	bne.n	801d660 <ThreadDisplayTask+0xa64>
				{

					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801d604:	4b8c      	ldr	r3, [pc, #560]	; (801d838 <ThreadDisplayTask+0xc3c>)
 801d606:	681b      	ldr	r3, [r3, #0]
 801d608:	f04f 31ff 	mov.w	r1, #4294967295
 801d60c:	4618      	mov	r0, r3
 801d60e:	f7fb fe4b 	bl	80192a8 <osMutexWait>

					//fm25v02_read(2*(ARMING_TIMELEFT + (register_menu_state - Y30) ), &ibutton_temp_reg_h);
					fm25v02_read(2*(ARMING_TIMELEFT + (register_menu_state - Y31) )+1, &ibutton_temp_reg_l);
 801d612:	4b87      	ldr	r3, [pc, #540]	; (801d830 <ThreadDisplayTask+0xc34>)
 801d614:	881b      	ldrh	r3, [r3, #0]
 801d616:	b29b      	uxth	r3, r3
 801d618:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 801d61c:	3306      	adds	r3, #6
 801d61e:	b29b      	uxth	r3, r3
 801d620:	005b      	lsls	r3, r3, #1
 801d622:	b29b      	uxth	r3, r3
 801d624:	3301      	adds	r3, #1
 801d626:	b29b      	uxth	r3, r3
 801d628:	f107 020e 	add.w	r2, r7, #14
 801d62c:	4611      	mov	r1, r2
 801d62e:	4618      	mov	r0, r3
 801d630:	f00d f9f2 	bl	802aa18 <fm25v02_read>
					//ibutton_temp_register = (((uint16_t)ibutton_temp_reg_h)<<8)|ibutton_temp_reg_l;
					ibutton_temp_register = ibutton_temp_reg_l;
 801d634:	7bbb      	ldrb	r3, [r7, #14]
 801d636:	b29a      	uxth	r2, r3
 801d638:	4b7e      	ldr	r3, [pc, #504]	; (801d834 <ThreadDisplayTask+0xc38>)
 801d63a:	801a      	strh	r2, [r3, #0]

					osMutexRelease(Fm25v02MutexHandle);
 801d63c:	4b7e      	ldr	r3, [pc, #504]	; (801d838 <ThreadDisplayTask+0xc3c>)
 801d63e:	681b      	ldr	r3, [r3, #0]
 801d640:	4618      	mov	r0, r3
 801d642:	f7fb fe7f 	bl	8019344 <osMutexRelease>

					number_display( ibutton_temp_register );
 801d646:	4b7b      	ldr	r3, [pc, #492]	; (801d834 <ThreadDisplayTask+0xc38>)
 801d648:	881b      	ldrh	r3, [r3, #0]
 801d64a:	b29b      	uxth	r3, r3
 801d64c:	b2db      	uxtb	r3, r3
 801d64e:	4618      	mov	r0, r3
 801d650:	f00c fe62 	bl	802a318 <number_display>

					control_register_temp_number = ibutton_temp_register;
 801d654:	4b77      	ldr	r3, [pc, #476]	; (801d834 <ThreadDisplayTask+0xc38>)
 801d656:	881b      	ldrh	r3, [r3, #0]
 801d658:	b29b      	uxth	r3, r3
 801d65a:	b2da      	uxtb	r2, r3
 801d65c:	4b77      	ldr	r3, [pc, #476]	; (801d83c <ThreadDisplayTask+0xc40>)
 801d65e:	701a      	strb	r2, [r3, #0]


			}


			if( (register_menu_state >= A1) && (register_menu_state <= A999) )
 801d660:	4b73      	ldr	r3, [pc, #460]	; (801d830 <ThreadDisplayTask+0xc34>)
 801d662:	881b      	ldrh	r3, [r3, #0]
 801d664:	b29b      	uxth	r3, r3
 801d666:	2b63      	cmp	r3, #99	; 0x63
 801d668:	d96b      	bls.n	801d742 <ThreadDisplayTask+0xb46>
 801d66a:	4b71      	ldr	r3, [pc, #452]	; (801d830 <ThreadDisplayTask+0xc34>)
 801d66c:	881b      	ldrh	r3, [r3, #0]
 801d66e:	b29b      	uxth	r3, r3
 801d670:	f240 424a 	movw	r2, #1098	; 0x44a
 801d674:	4293      	cmp	r3, r2
 801d676:	d864      	bhi.n	801d742 <ThreadDisplayTask+0xb46>
			{
				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801d678:	4b6f      	ldr	r3, [pc, #444]	; (801d838 <ThreadDisplayTask+0xc3c>)
 801d67a:	681b      	ldr	r3, [r3, #0]
 801d67c:	f04f 31ff 	mov.w	r1, #4294967295
 801d680:	4618      	mov	r0, r3
 801d682:	f7fb fe11 	bl	80192a8 <osMutexWait>

				fm25v02_read(2*(IBUTTON1_BYTE_0_REG + (((register_menu_state - A1)/8)*16) + ((register_menu_state - A1)%8) ), &ibutton_temp_reg_h);
 801d686:	4b6a      	ldr	r3, [pc, #424]	; (801d830 <ThreadDisplayTask+0xc34>)
 801d688:	881b      	ldrh	r3, [r3, #0]
 801d68a:	b29b      	uxth	r3, r3
 801d68c:	3b64      	subs	r3, #100	; 0x64
 801d68e:	2b00      	cmp	r3, #0
 801d690:	da00      	bge.n	801d694 <ThreadDisplayTask+0xa98>
 801d692:	3307      	adds	r3, #7
 801d694:	10db      	asrs	r3, r3, #3
 801d696:	f203 1331 	addw	r3, r3, #305	; 0x131
 801d69a:	011a      	lsls	r2, r3, #4
 801d69c:	4b64      	ldr	r3, [pc, #400]	; (801d830 <ThreadDisplayTask+0xc34>)
 801d69e:	881b      	ldrh	r3, [r3, #0]
 801d6a0:	b29b      	uxth	r3, r3
 801d6a2:	3b64      	subs	r3, #100	; 0x64
 801d6a4:	4259      	negs	r1, r3
 801d6a6:	f003 0307 	and.w	r3, r3, #7
 801d6aa:	f001 0107 	and.w	r1, r1, #7
 801d6ae:	bf58      	it	pl
 801d6b0:	424b      	negpl	r3, r1
 801d6b2:	4413      	add	r3, r2
 801d6b4:	b29b      	uxth	r3, r3
 801d6b6:	005b      	lsls	r3, r3, #1
 801d6b8:	b29b      	uxth	r3, r3
 801d6ba:	f107 020f 	add.w	r2, r7, #15
 801d6be:	4611      	mov	r1, r2
 801d6c0:	4618      	mov	r0, r3
 801d6c2:	f00d f9a9 	bl	802aa18 <fm25v02_read>
				fm25v02_read(2*(IBUTTON1_BYTE_0_REG + (((register_menu_state - A1)/8)*16) + ((register_menu_state - A1)%8) )+1, &ibutton_temp_reg_l);
 801d6c6:	4b5a      	ldr	r3, [pc, #360]	; (801d830 <ThreadDisplayTask+0xc34>)
 801d6c8:	881b      	ldrh	r3, [r3, #0]
 801d6ca:	b29b      	uxth	r3, r3
 801d6cc:	3b64      	subs	r3, #100	; 0x64
 801d6ce:	2b00      	cmp	r3, #0
 801d6d0:	da00      	bge.n	801d6d4 <ThreadDisplayTask+0xad8>
 801d6d2:	3307      	adds	r3, #7
 801d6d4:	10db      	asrs	r3, r3, #3
 801d6d6:	f203 1331 	addw	r3, r3, #305	; 0x131
 801d6da:	011a      	lsls	r2, r3, #4
 801d6dc:	4b54      	ldr	r3, [pc, #336]	; (801d830 <ThreadDisplayTask+0xc34>)
 801d6de:	881b      	ldrh	r3, [r3, #0]
 801d6e0:	b29b      	uxth	r3, r3
 801d6e2:	3b64      	subs	r3, #100	; 0x64
 801d6e4:	4259      	negs	r1, r3
 801d6e6:	f003 0307 	and.w	r3, r3, #7
 801d6ea:	f001 0107 	and.w	r1, r1, #7
 801d6ee:	bf58      	it	pl
 801d6f0:	424b      	negpl	r3, r1
 801d6f2:	4413      	add	r3, r2
 801d6f4:	b29b      	uxth	r3, r3
 801d6f6:	005b      	lsls	r3, r3, #1
 801d6f8:	b29b      	uxth	r3, r3
 801d6fa:	3301      	adds	r3, #1
 801d6fc:	b29b      	uxth	r3, r3
 801d6fe:	f107 020e 	add.w	r2, r7, #14
 801d702:	4611      	mov	r1, r2
 801d704:	4618      	mov	r0, r3
 801d706:	f00d f987 	bl	802aa18 <fm25v02_read>
				ibutton_temp_register = (((uint16_t)ibutton_temp_reg_h)<<8)|ibutton_temp_reg_l;
 801d70a:	7bfb      	ldrb	r3, [r7, #15]
 801d70c:	021b      	lsls	r3, r3, #8
 801d70e:	b21a      	sxth	r2, r3
 801d710:	7bbb      	ldrb	r3, [r7, #14]
 801d712:	b21b      	sxth	r3, r3
 801d714:	4313      	orrs	r3, r2
 801d716:	b21b      	sxth	r3, r3
 801d718:	b29a      	uxth	r2, r3
 801d71a:	4b46      	ldr	r3, [pc, #280]	; (801d834 <ThreadDisplayTask+0xc38>)
 801d71c:	801a      	strh	r2, [r3, #0]

				osMutexRelease(Fm25v02MutexHandle);
 801d71e:	4b46      	ldr	r3, [pc, #280]	; (801d838 <ThreadDisplayTask+0xc3c>)
 801d720:	681b      	ldr	r3, [r3, #0]
 801d722:	4618      	mov	r0, r3
 801d724:	f7fb fe0e 	bl	8019344 <osMutexRelease>

				number_display( ibutton_temp_register );
 801d728:	4b42      	ldr	r3, [pc, #264]	; (801d834 <ThreadDisplayTask+0xc38>)
 801d72a:	881b      	ldrh	r3, [r3, #0]
 801d72c:	b29b      	uxth	r3, r3
 801d72e:	b2db      	uxtb	r3, r3
 801d730:	4618      	mov	r0, r3
 801d732:	f00c fdf1 	bl	802a318 <number_display>

				control_register_temp_number = ibutton_temp_register;
 801d736:	4b3f      	ldr	r3, [pc, #252]	; (801d834 <ThreadDisplayTask+0xc38>)
 801d738:	881b      	ldrh	r3, [r3, #0]
 801d73a:	b29b      	uxth	r3, r3
 801d73c:	b2da      	uxtb	r2, r3
 801d73e:	4b3f      	ldr	r3, [pc, #252]	; (801d83c <ThreadDisplayTask+0xc40>)
 801d740:	701a      	strb	r2, [r3, #0]

			}


			if( (register_menu_state >= B1) && (register_menu_state <= B593) )
 801d742:	4b3b      	ldr	r3, [pc, #236]	; (801d830 <ThreadDisplayTask+0xc34>)
 801d744:	881b      	ldrh	r3, [r3, #0]
 801d746:	b29b      	uxth	r3, r3
 801d748:	f240 424a 	movw	r2, #1098	; 0x44a
 801d74c:	4293      	cmp	r3, r2
 801d74e:	f240 85ed 	bls.w	801e32c <ThreadDisplayTask+0x1730>
 801d752:	4b37      	ldr	r3, [pc, #220]	; (801d830 <ThreadDisplayTask+0xc34>)
 801d754:	881b      	ldrh	r3, [r3, #0]
 801d756:	b29b      	uxth	r3, r3
 801d758:	f240 629b 	movw	r2, #1691	; 0x69b
 801d75c:	4293      	cmp	r3, r2
 801d75e:	f200 85e5 	bhi.w	801e32c <ThreadDisplayTask+0x1730>
			{
				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801d762:	4b35      	ldr	r3, [pc, #212]	; (801d838 <ThreadDisplayTask+0xc3c>)
 801d764:	681b      	ldr	r3, [r3, #0]
 801d766:	f04f 31ff 	mov.w	r1, #4294967295
 801d76a:	4618      	mov	r0, r3
 801d76c:	f7fb fd9c 	bl	80192a8 <osMutexWait>

				fm25v02_read(2*(IBUTTON1_BYTE_0_REG + (((register_menu_state - A1)/8)*16) + ((register_menu_state - A1)%8) ), &ibutton_temp_reg_h);
 801d770:	4b2f      	ldr	r3, [pc, #188]	; (801d830 <ThreadDisplayTask+0xc34>)
 801d772:	881b      	ldrh	r3, [r3, #0]
 801d774:	b29b      	uxth	r3, r3
 801d776:	3b64      	subs	r3, #100	; 0x64
 801d778:	2b00      	cmp	r3, #0
 801d77a:	da00      	bge.n	801d77e <ThreadDisplayTask+0xb82>
 801d77c:	3307      	adds	r3, #7
 801d77e:	10db      	asrs	r3, r3, #3
 801d780:	f203 1331 	addw	r3, r3, #305	; 0x131
 801d784:	011a      	lsls	r2, r3, #4
 801d786:	4b2a      	ldr	r3, [pc, #168]	; (801d830 <ThreadDisplayTask+0xc34>)
 801d788:	881b      	ldrh	r3, [r3, #0]
 801d78a:	b29b      	uxth	r3, r3
 801d78c:	3b64      	subs	r3, #100	; 0x64
 801d78e:	4259      	negs	r1, r3
 801d790:	f003 0307 	and.w	r3, r3, #7
 801d794:	f001 0107 	and.w	r1, r1, #7
 801d798:	bf58      	it	pl
 801d79a:	424b      	negpl	r3, r1
 801d79c:	4413      	add	r3, r2
 801d79e:	b29b      	uxth	r3, r3
 801d7a0:	005b      	lsls	r3, r3, #1
 801d7a2:	b29b      	uxth	r3, r3
 801d7a4:	f107 020f 	add.w	r2, r7, #15
 801d7a8:	4611      	mov	r1, r2
 801d7aa:	4618      	mov	r0, r3
 801d7ac:	f00d f934 	bl	802aa18 <fm25v02_read>
				fm25v02_read(2*(IBUTTON1_BYTE_0_REG + (((register_menu_state - A1)/8)*16) + ((register_menu_state - A1)%8) )+1, &ibutton_temp_reg_l);
 801d7b0:	4b1f      	ldr	r3, [pc, #124]	; (801d830 <ThreadDisplayTask+0xc34>)
 801d7b2:	881b      	ldrh	r3, [r3, #0]
 801d7b4:	b29b      	uxth	r3, r3
 801d7b6:	3b64      	subs	r3, #100	; 0x64
 801d7b8:	2b00      	cmp	r3, #0
 801d7ba:	da00      	bge.n	801d7be <ThreadDisplayTask+0xbc2>
 801d7bc:	3307      	adds	r3, #7
 801d7be:	10db      	asrs	r3, r3, #3
 801d7c0:	f203 1331 	addw	r3, r3, #305	; 0x131
 801d7c4:	011a      	lsls	r2, r3, #4
 801d7c6:	4b1a      	ldr	r3, [pc, #104]	; (801d830 <ThreadDisplayTask+0xc34>)
 801d7c8:	881b      	ldrh	r3, [r3, #0]
 801d7ca:	b29b      	uxth	r3, r3
 801d7cc:	3b64      	subs	r3, #100	; 0x64
 801d7ce:	4259      	negs	r1, r3
 801d7d0:	f003 0307 	and.w	r3, r3, #7
 801d7d4:	f001 0107 	and.w	r1, r1, #7
 801d7d8:	bf58      	it	pl
 801d7da:	424b      	negpl	r3, r1
 801d7dc:	4413      	add	r3, r2
 801d7de:	b29b      	uxth	r3, r3
 801d7e0:	005b      	lsls	r3, r3, #1
 801d7e2:	b29b      	uxth	r3, r3
 801d7e4:	3301      	adds	r3, #1
 801d7e6:	b29b      	uxth	r3, r3
 801d7e8:	f107 020e 	add.w	r2, r7, #14
 801d7ec:	4611      	mov	r1, r2
 801d7ee:	4618      	mov	r0, r3
 801d7f0:	f00d f912 	bl	802aa18 <fm25v02_read>
				ibutton_temp_register = (((uint16_t)ibutton_temp_reg_h)<<8)|ibutton_temp_reg_l;
 801d7f4:	7bfb      	ldrb	r3, [r7, #15]
 801d7f6:	021b      	lsls	r3, r3, #8
 801d7f8:	b21a      	sxth	r2, r3
 801d7fa:	7bbb      	ldrb	r3, [r7, #14]
 801d7fc:	b21b      	sxth	r3, r3
 801d7fe:	4313      	orrs	r3, r2
 801d800:	b21b      	sxth	r3, r3
 801d802:	b29a      	uxth	r2, r3
 801d804:	4b0b      	ldr	r3, [pc, #44]	; (801d834 <ThreadDisplayTask+0xc38>)
 801d806:	801a      	strh	r2, [r3, #0]

				osMutexRelease(Fm25v02MutexHandle);
 801d808:	4b0b      	ldr	r3, [pc, #44]	; (801d838 <ThreadDisplayTask+0xc3c>)
 801d80a:	681b      	ldr	r3, [r3, #0]
 801d80c:	4618      	mov	r0, r3
 801d80e:	f7fb fd99 	bl	8019344 <osMutexRelease>

				number_display( ibutton_temp_register );
 801d812:	4b08      	ldr	r3, [pc, #32]	; (801d834 <ThreadDisplayTask+0xc38>)
 801d814:	881b      	ldrh	r3, [r3, #0]
 801d816:	b29b      	uxth	r3, r3
 801d818:	b2db      	uxtb	r3, r3
 801d81a:	4618      	mov	r0, r3
 801d81c:	f00c fd7c 	bl	802a318 <number_display>

				control_register_temp_number = ibutton_temp_register;
 801d820:	4b04      	ldr	r3, [pc, #16]	; (801d834 <ThreadDisplayTask+0xc38>)
 801d822:	881b      	ldrh	r3, [r3, #0]
 801d824:	b29b      	uxth	r3, r3
 801d826:	b2da      	uxtb	r2, r3
 801d828:	4b04      	ldr	r3, [pc, #16]	; (801d83c <ThreadDisplayTask+0xc40>)
 801d82a:	701a      	strb	r2, [r3, #0]
 801d82c:	f000 bd7e 	b.w	801e32c <ThreadDisplayTask+0x1730>
 801d830:	20008010 	.word	0x20008010
 801d834:	20009f50 	.word	0x20009f50
 801d838:	20009bb8 	.word	0x20009bb8
 801d83c:	20008017 	.word	0x20008017



		}

		else if( register_content_menu_state == 2)
 801d840:	4b9d      	ldr	r3, [pc, #628]	; (801dab8 <ThreadDisplayTask+0xebc>)
 801d842:	881b      	ldrh	r3, [r3, #0]
 801d844:	b29b      	uxth	r3, r3
 801d846:	2b02      	cmp	r3, #2
 801d848:	f040 8570 	bne.w	801e32c <ThreadDisplayTask+0x1730>
			}
			//---------------------------------------------------------------------------

			*/

			if( (register_menu_state >= Y1) && (register_menu_state <= Y31) )
 801d84c:	4b9b      	ldr	r3, [pc, #620]	; (801dabc <ThreadDisplayTask+0xec0>)
 801d84e:	881b      	ldrh	r3, [r3, #0]
 801d850:	b29b      	uxth	r3, r3
 801d852:	2b44      	cmp	r3, #68	; 0x44
 801d854:	f240 840c 	bls.w	801e070 <ThreadDisplayTask+0x1474>
 801d858:	4b98      	ldr	r3, [pc, #608]	; (801dabc <ThreadDisplayTask+0xec0>)
 801d85a:	881b      	ldrh	r3, [r3, #0]
 801d85c:	b29b      	uxth	r3, r3
 801d85e:	2b63      	cmp	r3, #99	; 0x63
 801d860:	f200 8406 	bhi.w	801e070 <ThreadDisplayTask+0x1474>
			{


				if( (register_menu_state >= Y1) && (register_menu_state <= Y2) )
 801d864:	4b95      	ldr	r3, [pc, #596]	; (801dabc <ThreadDisplayTask+0xec0>)
 801d866:	881b      	ldrh	r3, [r3, #0]
 801d868:	b29b      	uxth	r3, r3
 801d86a:	2b44      	cmp	r3, #68	; 0x44
 801d86c:	d97a      	bls.n	801d964 <ThreadDisplayTask+0xd68>
 801d86e:	4b93      	ldr	r3, [pc, #588]	; (801dabc <ThreadDisplayTask+0xec0>)
 801d870:	881b      	ldrh	r3, [r3, #0]
 801d872:	b29b      	uxth	r3, r3
 801d874:	2b46      	cmp	r3, #70	; 0x46
 801d876:	d875      	bhi.n	801d964 <ThreadDisplayTask+0xd68>
				{

					if( (control_register_increment_state == 1) && (control_register_decrement_state == 0) )
 801d878:	4b91      	ldr	r3, [pc, #580]	; (801dac0 <ThreadDisplayTask+0xec4>)
 801d87a:	781b      	ldrb	r3, [r3, #0]
 801d87c:	b2db      	uxtb	r3, r3
 801d87e:	2b01      	cmp	r3, #1
 801d880:	d117      	bne.n	801d8b2 <ThreadDisplayTask+0xcb6>
 801d882:	4b90      	ldr	r3, [pc, #576]	; (801dac4 <ThreadDisplayTask+0xec8>)
 801d884:	781b      	ldrb	r3, [r3, #0]
 801d886:	b2db      	uxtb	r3, r3
 801d888:	2b00      	cmp	r3, #0
 801d88a:	d112      	bne.n	801d8b2 <ThreadDisplayTask+0xcb6>
					{
						control_register_increment_state = 0;
 801d88c:	4b8c      	ldr	r3, [pc, #560]	; (801dac0 <ThreadDisplayTask+0xec4>)
 801d88e:	2200      	movs	r2, #0
 801d890:	701a      	strb	r2, [r3, #0]
						control_register_decrement_state = 0;
 801d892:	4b8c      	ldr	r3, [pc, #560]	; (801dac4 <ThreadDisplayTask+0xec8>)
 801d894:	2200      	movs	r2, #0
 801d896:	701a      	strb	r2, [r3, #0]

						if(control_register_temp_number < 255)
 801d898:	4b8b      	ldr	r3, [pc, #556]	; (801dac8 <ThreadDisplayTask+0xecc>)
 801d89a:	781b      	ldrb	r3, [r3, #0]
 801d89c:	b2db      	uxtb	r3, r3
 801d89e:	2bff      	cmp	r3, #255	; 0xff
 801d8a0:	d05a      	beq.n	801d958 <ThreadDisplayTask+0xd5c>
						{
							control_register_temp_number++;
 801d8a2:	4b89      	ldr	r3, [pc, #548]	; (801dac8 <ThreadDisplayTask+0xecc>)
 801d8a4:	781b      	ldrb	r3, [r3, #0]
 801d8a6:	b2db      	uxtb	r3, r3
 801d8a8:	3301      	adds	r3, #1
 801d8aa:	b2da      	uxtb	r2, r3
 801d8ac:	4b86      	ldr	r3, [pc, #536]	; (801dac8 <ThreadDisplayTask+0xecc>)
 801d8ae:	701a      	strb	r2, [r3, #0]
						if(control_register_temp_number < 255)
 801d8b0:	e052      	b.n	801d958 <ThreadDisplayTask+0xd5c>
						}

					}
					else if( (control_register_increment_state == 0) && (control_register_decrement_state == 1) )
 801d8b2:	4b83      	ldr	r3, [pc, #524]	; (801dac0 <ThreadDisplayTask+0xec4>)
 801d8b4:	781b      	ldrb	r3, [r3, #0]
 801d8b6:	b2db      	uxtb	r3, r3
 801d8b8:	2b00      	cmp	r3, #0
 801d8ba:	d117      	bne.n	801d8ec <ThreadDisplayTask+0xcf0>
 801d8bc:	4b81      	ldr	r3, [pc, #516]	; (801dac4 <ThreadDisplayTask+0xec8>)
 801d8be:	781b      	ldrb	r3, [r3, #0]
 801d8c0:	b2db      	uxtb	r3, r3
 801d8c2:	2b01      	cmp	r3, #1
 801d8c4:	d112      	bne.n	801d8ec <ThreadDisplayTask+0xcf0>
					{
						control_register_increment_state = 0;
 801d8c6:	4b7e      	ldr	r3, [pc, #504]	; (801dac0 <ThreadDisplayTask+0xec4>)
 801d8c8:	2200      	movs	r2, #0
 801d8ca:	701a      	strb	r2, [r3, #0]
						control_register_decrement_state = 0;
 801d8cc:	4b7d      	ldr	r3, [pc, #500]	; (801dac4 <ThreadDisplayTask+0xec8>)
 801d8ce:	2200      	movs	r2, #0
 801d8d0:	701a      	strb	r2, [r3, #0]

						if(control_register_temp_number > 0)
 801d8d2:	4b7d      	ldr	r3, [pc, #500]	; (801dac8 <ThreadDisplayTask+0xecc>)
 801d8d4:	781b      	ldrb	r3, [r3, #0]
 801d8d6:	b2db      	uxtb	r3, r3
 801d8d8:	2b00      	cmp	r3, #0
 801d8da:	d03d      	beq.n	801d958 <ThreadDisplayTask+0xd5c>
						{
							control_register_temp_number--;
 801d8dc:	4b7a      	ldr	r3, [pc, #488]	; (801dac8 <ThreadDisplayTask+0xecc>)
 801d8de:	781b      	ldrb	r3, [r3, #0]
 801d8e0:	b2db      	uxtb	r3, r3
 801d8e2:	3b01      	subs	r3, #1
 801d8e4:	b2da      	uxtb	r2, r3
 801d8e6:	4b78      	ldr	r3, [pc, #480]	; (801dac8 <ThreadDisplayTask+0xecc>)
 801d8e8:	701a      	strb	r2, [r3, #0]
						if(control_register_temp_number > 0)
 801d8ea:	e035      	b.n	801d958 <ThreadDisplayTask+0xd5c>
						}

					}
					else if(control_register_save_state == 1)
 801d8ec:	4b77      	ldr	r3, [pc, #476]	; (801dacc <ThreadDisplayTask+0xed0>)
 801d8ee:	781b      	ldrb	r3, [r3, #0]
 801d8f0:	b2db      	uxtb	r3, r3
 801d8f2:	2b01      	cmp	r3, #1
 801d8f4:	d130      	bne.n	801d958 <ThreadDisplayTask+0xd5c>
					{
						control_register_save_state = 0;
 801d8f6:	4b75      	ldr	r3, [pc, #468]	; (801dacc <ThreadDisplayTask+0xed0>)
 801d8f8:	2200      	movs	r2, #0
 801d8fa:	701a      	strb	r2, [r3, #0]
						register_content_menu_state = 1;
 801d8fc:	4b6e      	ldr	r3, [pc, #440]	; (801dab8 <ThreadDisplayTask+0xebc>)
 801d8fe:	2201      	movs	r2, #1
 801d900:	801a      	strh	r2, [r3, #0]

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801d902:	4b73      	ldr	r3, [pc, #460]	; (801dad0 <ThreadDisplayTask+0xed4>)
 801d904:	681b      	ldr	r3, [r3, #0]
 801d906:	f04f 31ff 	mov.w	r1, #4294967295
 801d90a:	4618      	mov	r0, r3
 801d90c:	f7fb fccc 	bl	80192a8 <osMutexWait>
						fm25v02_write( 2*(SECURITY_CONTROL_REG + (register_menu_state - Y1) ), 0x00);
 801d910:	4b6a      	ldr	r3, [pc, #424]	; (801dabc <ThreadDisplayTask+0xec0>)
 801d912:	881b      	ldrh	r3, [r3, #0]
 801d914:	b29b      	uxth	r3, r3
 801d916:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 801d91a:	330b      	adds	r3, #11
 801d91c:	b29b      	uxth	r3, r3
 801d91e:	005b      	lsls	r3, r3, #1
 801d920:	b29b      	uxth	r3, r3
 801d922:	2100      	movs	r1, #0
 801d924:	4618      	mov	r0, r3
 801d926:	f00d f8b1 	bl	802aa8c <fm25v02_write>
						fm25v02_write( 2*(SECURITY_CONTROL_REG + (register_menu_state - Y1) )+1, control_register_temp_number );
 801d92a:	4b64      	ldr	r3, [pc, #400]	; (801dabc <ThreadDisplayTask+0xec0>)
 801d92c:	881b      	ldrh	r3, [r3, #0]
 801d92e:	b29b      	uxth	r3, r3
 801d930:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 801d934:	330b      	adds	r3, #11
 801d936:	b29b      	uxth	r3, r3
 801d938:	005b      	lsls	r3, r3, #1
 801d93a:	b29b      	uxth	r3, r3
 801d93c:	3301      	adds	r3, #1
 801d93e:	b29b      	uxth	r3, r3
 801d940:	4a61      	ldr	r2, [pc, #388]	; (801dac8 <ThreadDisplayTask+0xecc>)
 801d942:	7812      	ldrb	r2, [r2, #0]
 801d944:	b2d2      	uxtb	r2, r2
 801d946:	4611      	mov	r1, r2
 801d948:	4618      	mov	r0, r3
 801d94a:	f00d f89f 	bl	802aa8c <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 801d94e:	4b60      	ldr	r3, [pc, #384]	; (801dad0 <ThreadDisplayTask+0xed4>)
 801d950:	681b      	ldr	r3, [r3, #0]
 801d952:	4618      	mov	r0, r3
 801d954:	f7fb fcf6 	bl	8019344 <osMutexRelease>
						//control_registers.arming_timeleft_reg = control_register_temp_number;


					}

					number_change_display( control_register_temp_number );
 801d958:	4b5b      	ldr	r3, [pc, #364]	; (801dac8 <ThreadDisplayTask+0xecc>)
 801d95a:	781b      	ldrb	r3, [r3, #0]
 801d95c:	b2db      	uxtb	r3, r3
 801d95e:	4618      	mov	r0, r3
 801d960:	f00c fdba 	bl	802a4d8 <number_change_display>

				}


				if( (register_menu_state >= Y3) && (register_menu_state <= Y4) )
 801d964:	4b55      	ldr	r3, [pc, #340]	; (801dabc <ThreadDisplayTask+0xec0>)
 801d966:	881b      	ldrh	r3, [r3, #0]
 801d968:	b29b      	uxth	r3, r3
 801d96a:	2b46      	cmp	r3, #70	; 0x46
 801d96c:	d97a      	bls.n	801da64 <ThreadDisplayTask+0xe68>
 801d96e:	4b53      	ldr	r3, [pc, #332]	; (801dabc <ThreadDisplayTask+0xec0>)
 801d970:	881b      	ldrh	r3, [r3, #0]
 801d972:	b29b      	uxth	r3, r3
 801d974:	2b48      	cmp	r3, #72	; 0x48
 801d976:	d875      	bhi.n	801da64 <ThreadDisplayTask+0xe68>
				{

					if( (control_register_increment_state == 1) && (control_register_decrement_state == 0) )
 801d978:	4b51      	ldr	r3, [pc, #324]	; (801dac0 <ThreadDisplayTask+0xec4>)
 801d97a:	781b      	ldrb	r3, [r3, #0]
 801d97c:	b2db      	uxtb	r3, r3
 801d97e:	2b01      	cmp	r3, #1
 801d980:	d117      	bne.n	801d9b2 <ThreadDisplayTask+0xdb6>
 801d982:	4b50      	ldr	r3, [pc, #320]	; (801dac4 <ThreadDisplayTask+0xec8>)
 801d984:	781b      	ldrb	r3, [r3, #0]
 801d986:	b2db      	uxtb	r3, r3
 801d988:	2b00      	cmp	r3, #0
 801d98a:	d112      	bne.n	801d9b2 <ThreadDisplayTask+0xdb6>
					{
						control_register_increment_state = 0;
 801d98c:	4b4c      	ldr	r3, [pc, #304]	; (801dac0 <ThreadDisplayTask+0xec4>)
 801d98e:	2200      	movs	r2, #0
 801d990:	701a      	strb	r2, [r3, #0]
						control_register_decrement_state = 0;
 801d992:	4b4c      	ldr	r3, [pc, #304]	; (801dac4 <ThreadDisplayTask+0xec8>)
 801d994:	2200      	movs	r2, #0
 801d996:	701a      	strb	r2, [r3, #0]

						if(control_register_temp_number < 255)
 801d998:	4b4b      	ldr	r3, [pc, #300]	; (801dac8 <ThreadDisplayTask+0xecc>)
 801d99a:	781b      	ldrb	r3, [r3, #0]
 801d99c:	b2db      	uxtb	r3, r3
 801d99e:	2bff      	cmp	r3, #255	; 0xff
 801d9a0:	d05a      	beq.n	801da58 <ThreadDisplayTask+0xe5c>
						{
							control_register_temp_number++;
 801d9a2:	4b49      	ldr	r3, [pc, #292]	; (801dac8 <ThreadDisplayTask+0xecc>)
 801d9a4:	781b      	ldrb	r3, [r3, #0]
 801d9a6:	b2db      	uxtb	r3, r3
 801d9a8:	3301      	adds	r3, #1
 801d9aa:	b2da      	uxtb	r2, r3
 801d9ac:	4b46      	ldr	r3, [pc, #280]	; (801dac8 <ThreadDisplayTask+0xecc>)
 801d9ae:	701a      	strb	r2, [r3, #0]
						if(control_register_temp_number < 255)
 801d9b0:	e052      	b.n	801da58 <ThreadDisplayTask+0xe5c>
						}

					}
					else if( (control_register_increment_state == 0) && (control_register_decrement_state == 1) )
 801d9b2:	4b43      	ldr	r3, [pc, #268]	; (801dac0 <ThreadDisplayTask+0xec4>)
 801d9b4:	781b      	ldrb	r3, [r3, #0]
 801d9b6:	b2db      	uxtb	r3, r3
 801d9b8:	2b00      	cmp	r3, #0
 801d9ba:	d117      	bne.n	801d9ec <ThreadDisplayTask+0xdf0>
 801d9bc:	4b41      	ldr	r3, [pc, #260]	; (801dac4 <ThreadDisplayTask+0xec8>)
 801d9be:	781b      	ldrb	r3, [r3, #0]
 801d9c0:	b2db      	uxtb	r3, r3
 801d9c2:	2b01      	cmp	r3, #1
 801d9c4:	d112      	bne.n	801d9ec <ThreadDisplayTask+0xdf0>
					{
						control_register_increment_state = 0;
 801d9c6:	4b3e      	ldr	r3, [pc, #248]	; (801dac0 <ThreadDisplayTask+0xec4>)
 801d9c8:	2200      	movs	r2, #0
 801d9ca:	701a      	strb	r2, [r3, #0]
						control_register_decrement_state = 0;
 801d9cc:	4b3d      	ldr	r3, [pc, #244]	; (801dac4 <ThreadDisplayTask+0xec8>)
 801d9ce:	2200      	movs	r2, #0
 801d9d0:	701a      	strb	r2, [r3, #0]

						if(control_register_temp_number > 0)
 801d9d2:	4b3d      	ldr	r3, [pc, #244]	; (801dac8 <ThreadDisplayTask+0xecc>)
 801d9d4:	781b      	ldrb	r3, [r3, #0]
 801d9d6:	b2db      	uxtb	r3, r3
 801d9d8:	2b00      	cmp	r3, #0
 801d9da:	d03d      	beq.n	801da58 <ThreadDisplayTask+0xe5c>
						{
							control_register_temp_number--;
 801d9dc:	4b3a      	ldr	r3, [pc, #232]	; (801dac8 <ThreadDisplayTask+0xecc>)
 801d9de:	781b      	ldrb	r3, [r3, #0]
 801d9e0:	b2db      	uxtb	r3, r3
 801d9e2:	3b01      	subs	r3, #1
 801d9e4:	b2da      	uxtb	r2, r3
 801d9e6:	4b38      	ldr	r3, [pc, #224]	; (801dac8 <ThreadDisplayTask+0xecc>)
 801d9e8:	701a      	strb	r2, [r3, #0]
						if(control_register_temp_number > 0)
 801d9ea:	e035      	b.n	801da58 <ThreadDisplayTask+0xe5c>
						}

					}
					else if(control_register_save_state == 1)
 801d9ec:	4b37      	ldr	r3, [pc, #220]	; (801dacc <ThreadDisplayTask+0xed0>)
 801d9ee:	781b      	ldrb	r3, [r3, #0]
 801d9f0:	b2db      	uxtb	r3, r3
 801d9f2:	2b01      	cmp	r3, #1
 801d9f4:	d130      	bne.n	801da58 <ThreadDisplayTask+0xe5c>
					{
						control_register_save_state = 0;
 801d9f6:	4b35      	ldr	r3, [pc, #212]	; (801dacc <ThreadDisplayTask+0xed0>)
 801d9f8:	2200      	movs	r2, #0
 801d9fa:	701a      	strb	r2, [r3, #0]
						register_content_menu_state = 1;
 801d9fc:	4b2e      	ldr	r3, [pc, #184]	; (801dab8 <ThreadDisplayTask+0xebc>)
 801d9fe:	2201      	movs	r2, #1
 801da00:	801a      	strh	r2, [r3, #0]

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801da02:	4b33      	ldr	r3, [pc, #204]	; (801dad0 <ThreadDisplayTask+0xed4>)
 801da04:	681b      	ldr	r3, [r3, #0]
 801da06:	f04f 31ff 	mov.w	r1, #4294967295
 801da0a:	4618      	mov	r0, r3
 801da0c:	f7fb fc4c 	bl	80192a8 <osMutexWait>
						fm25v02_write( 2*(ALARM_LOOP_CLEAR_REG + (register_menu_state - Y3) ), 0x00);
 801da10:	4b2a      	ldr	r3, [pc, #168]	; (801dabc <ThreadDisplayTask+0xec0>)
 801da12:	881b      	ldrh	r3, [r3, #0]
 801da14:	b29b      	uxth	r3, r3
 801da16:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 801da1a:	330e      	adds	r3, #14
 801da1c:	b29b      	uxth	r3, r3
 801da1e:	005b      	lsls	r3, r3, #1
 801da20:	b29b      	uxth	r3, r3
 801da22:	2100      	movs	r1, #0
 801da24:	4618      	mov	r0, r3
 801da26:	f00d f831 	bl	802aa8c <fm25v02_write>
						fm25v02_write( 2*(ALARM_LOOP_CLEAR_REG + (register_menu_state - Y3) )+1, control_register_temp_number );
 801da2a:	4b24      	ldr	r3, [pc, #144]	; (801dabc <ThreadDisplayTask+0xec0>)
 801da2c:	881b      	ldrh	r3, [r3, #0]
 801da2e:	b29b      	uxth	r3, r3
 801da30:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 801da34:	330e      	adds	r3, #14
 801da36:	b29b      	uxth	r3, r3
 801da38:	005b      	lsls	r3, r3, #1
 801da3a:	b29b      	uxth	r3, r3
 801da3c:	3301      	adds	r3, #1
 801da3e:	b29b      	uxth	r3, r3
 801da40:	4a21      	ldr	r2, [pc, #132]	; (801dac8 <ThreadDisplayTask+0xecc>)
 801da42:	7812      	ldrb	r2, [r2, #0]
 801da44:	b2d2      	uxtb	r2, r2
 801da46:	4611      	mov	r1, r2
 801da48:	4618      	mov	r0, r3
 801da4a:	f00d f81f 	bl	802aa8c <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 801da4e:	4b20      	ldr	r3, [pc, #128]	; (801dad0 <ThreadDisplayTask+0xed4>)
 801da50:	681b      	ldr	r3, [r3, #0]
 801da52:	4618      	mov	r0, r3
 801da54:	f7fb fc76 	bl	8019344 <osMutexRelease>
						//control_registers.arming_timeleft_reg = control_register_temp_number;


					}

					number_change_display( control_register_temp_number );
 801da58:	4b1b      	ldr	r3, [pc, #108]	; (801dac8 <ThreadDisplayTask+0xecc>)
 801da5a:	781b      	ldrb	r3, [r3, #0]
 801da5c:	b2db      	uxtb	r3, r3
 801da5e:	4618      	mov	r0, r3
 801da60:	f00c fd3a 	bl	802a4d8 <number_change_display>

				}


				if( (register_menu_state >= Y5) && (register_menu_state <= Y12) )
 801da64:	4b15      	ldr	r3, [pc, #84]	; (801dabc <ThreadDisplayTask+0xec0>)
 801da66:	881b      	ldrh	r3, [r3, #0]
 801da68:	b29b      	uxth	r3, r3
 801da6a:	2b48      	cmp	r3, #72	; 0x48
 801da6c:	f240 808b 	bls.w	801db86 <ThreadDisplayTask+0xf8a>
 801da70:	4b12      	ldr	r3, [pc, #72]	; (801dabc <ThreadDisplayTask+0xec0>)
 801da72:	881b      	ldrh	r3, [r3, #0]
 801da74:	b29b      	uxth	r3, r3
 801da76:	2b50      	cmp	r3, #80	; 0x50
 801da78:	f200 8085 	bhi.w	801db86 <ThreadDisplayTask+0xf8a>
				{

					if( (control_register_increment_state == 1) && (control_register_decrement_state == 0) )
 801da7c:	4b10      	ldr	r3, [pc, #64]	; (801dac0 <ThreadDisplayTask+0xec4>)
 801da7e:	781b      	ldrb	r3, [r3, #0]
 801da80:	b2db      	uxtb	r3, r3
 801da82:	2b01      	cmp	r3, #1
 801da84:	d126      	bne.n	801dad4 <ThreadDisplayTask+0xed8>
 801da86:	4b0f      	ldr	r3, [pc, #60]	; (801dac4 <ThreadDisplayTask+0xec8>)
 801da88:	781b      	ldrb	r3, [r3, #0]
 801da8a:	b2db      	uxtb	r3, r3
 801da8c:	2b00      	cmp	r3, #0
 801da8e:	d121      	bne.n	801dad4 <ThreadDisplayTask+0xed8>
					{
						control_register_increment_state = 0;
 801da90:	4b0b      	ldr	r3, [pc, #44]	; (801dac0 <ThreadDisplayTask+0xec4>)
 801da92:	2200      	movs	r2, #0
 801da94:	701a      	strb	r2, [r3, #0]
						control_register_decrement_state = 0;
 801da96:	4b0b      	ldr	r3, [pc, #44]	; (801dac4 <ThreadDisplayTask+0xec8>)
 801da98:	2200      	movs	r2, #0
 801da9a:	701a      	strb	r2, [r3, #0]

						if(control_register_temp_number < 255)
 801da9c:	4b0a      	ldr	r3, [pc, #40]	; (801dac8 <ThreadDisplayTask+0xecc>)
 801da9e:	781b      	ldrb	r3, [r3, #0]
 801daa0:	b2db      	uxtb	r3, r3
 801daa2:	2bff      	cmp	r3, #255	; 0xff
 801daa4:	d069      	beq.n	801db7a <ThreadDisplayTask+0xf7e>
						{
							control_register_temp_number++;
 801daa6:	4b08      	ldr	r3, [pc, #32]	; (801dac8 <ThreadDisplayTask+0xecc>)
 801daa8:	781b      	ldrb	r3, [r3, #0]
 801daaa:	b2db      	uxtb	r3, r3
 801daac:	3301      	adds	r3, #1
 801daae:	b2da      	uxtb	r2, r3
 801dab0:	4b05      	ldr	r3, [pc, #20]	; (801dac8 <ThreadDisplayTask+0xecc>)
 801dab2:	701a      	strb	r2, [r3, #0]
						if(control_register_temp_number < 255)
 801dab4:	e061      	b.n	801db7a <ThreadDisplayTask+0xf7e>
 801dab6:	bf00      	nop
 801dab8:	20008012 	.word	0x20008012
 801dabc:	20008010 	.word	0x20008010
 801dac0:	20008014 	.word	0x20008014
 801dac4:	20008015 	.word	0x20008015
 801dac8:	20008017 	.word	0x20008017
 801dacc:	20008016 	.word	0x20008016
 801dad0:	20009bb8 	.word	0x20009bb8
						}

					}
					else if( (control_register_increment_state == 0) && (control_register_decrement_state == 1) )
 801dad4:	4b8f      	ldr	r3, [pc, #572]	; (801dd14 <ThreadDisplayTask+0x1118>)
 801dad6:	781b      	ldrb	r3, [r3, #0]
 801dad8:	b2db      	uxtb	r3, r3
 801dada:	2b00      	cmp	r3, #0
 801dadc:	d117      	bne.n	801db0e <ThreadDisplayTask+0xf12>
 801dade:	4b8e      	ldr	r3, [pc, #568]	; (801dd18 <ThreadDisplayTask+0x111c>)
 801dae0:	781b      	ldrb	r3, [r3, #0]
 801dae2:	b2db      	uxtb	r3, r3
 801dae4:	2b01      	cmp	r3, #1
 801dae6:	d112      	bne.n	801db0e <ThreadDisplayTask+0xf12>
					{
						control_register_increment_state = 0;
 801dae8:	4b8a      	ldr	r3, [pc, #552]	; (801dd14 <ThreadDisplayTask+0x1118>)
 801daea:	2200      	movs	r2, #0
 801daec:	701a      	strb	r2, [r3, #0]
						control_register_decrement_state = 0;
 801daee:	4b8a      	ldr	r3, [pc, #552]	; (801dd18 <ThreadDisplayTask+0x111c>)
 801daf0:	2200      	movs	r2, #0
 801daf2:	701a      	strb	r2, [r3, #0]

						if(control_register_temp_number > 0)
 801daf4:	4b89      	ldr	r3, [pc, #548]	; (801dd1c <ThreadDisplayTask+0x1120>)
 801daf6:	781b      	ldrb	r3, [r3, #0]
 801daf8:	b2db      	uxtb	r3, r3
 801dafa:	2b00      	cmp	r3, #0
 801dafc:	d03d      	beq.n	801db7a <ThreadDisplayTask+0xf7e>
						{
							control_register_temp_number--;
 801dafe:	4b87      	ldr	r3, [pc, #540]	; (801dd1c <ThreadDisplayTask+0x1120>)
 801db00:	781b      	ldrb	r3, [r3, #0]
 801db02:	b2db      	uxtb	r3, r3
 801db04:	3b01      	subs	r3, #1
 801db06:	b2da      	uxtb	r2, r3
 801db08:	4b84      	ldr	r3, [pc, #528]	; (801dd1c <ThreadDisplayTask+0x1120>)
 801db0a:	701a      	strb	r2, [r3, #0]
						if(control_register_temp_number > 0)
 801db0c:	e035      	b.n	801db7a <ThreadDisplayTask+0xf7e>
						}

					}
					else if(control_register_save_state == 1)
 801db0e:	4b84      	ldr	r3, [pc, #528]	; (801dd20 <ThreadDisplayTask+0x1124>)
 801db10:	781b      	ldrb	r3, [r3, #0]
 801db12:	b2db      	uxtb	r3, r3
 801db14:	2b01      	cmp	r3, #1
 801db16:	d130      	bne.n	801db7a <ThreadDisplayTask+0xf7e>
					{
						control_register_save_state = 0;
 801db18:	4b81      	ldr	r3, [pc, #516]	; (801dd20 <ThreadDisplayTask+0x1124>)
 801db1a:	2200      	movs	r2, #0
 801db1c:	701a      	strb	r2, [r3, #0]
						register_content_menu_state = 1;
 801db1e:	4b81      	ldr	r3, [pc, #516]	; (801dd24 <ThreadDisplayTask+0x1128>)
 801db20:	2201      	movs	r2, #1
 801db22:	801a      	strh	r2, [r3, #0]

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801db24:	4b80      	ldr	r3, [pc, #512]	; (801dd28 <ThreadDisplayTask+0x112c>)
 801db26:	681b      	ldr	r3, [r3, #0]
 801db28:	f04f 31ff 	mov.w	r1, #4294967295
 801db2c:	4618      	mov	r0, r3
 801db2e:	f7fb fbbb 	bl	80192a8 <osMutexWait>
						fm25v02_write( 2*(TIME_UPDATE_REG + (register_menu_state - Y5) ), 0x00);
 801db32:	4b7e      	ldr	r3, [pc, #504]	; (801dd2c <ThreadDisplayTask+0x1130>)
 801db34:	881b      	ldrh	r3, [r3, #0]
 801db36:	b29b      	uxth	r3, r3
 801db38:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 801db3c:	330f      	adds	r3, #15
 801db3e:	b29b      	uxth	r3, r3
 801db40:	005b      	lsls	r3, r3, #1
 801db42:	b29b      	uxth	r3, r3
 801db44:	2100      	movs	r1, #0
 801db46:	4618      	mov	r0, r3
 801db48:	f00c ffa0 	bl	802aa8c <fm25v02_write>
						fm25v02_write( 2*(TIME_UPDATE_REG + (register_menu_state - Y5) )+1, control_register_temp_number );
 801db4c:	4b77      	ldr	r3, [pc, #476]	; (801dd2c <ThreadDisplayTask+0x1130>)
 801db4e:	881b      	ldrh	r3, [r3, #0]
 801db50:	b29b      	uxth	r3, r3
 801db52:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 801db56:	330f      	adds	r3, #15
 801db58:	b29b      	uxth	r3, r3
 801db5a:	005b      	lsls	r3, r3, #1
 801db5c:	b29b      	uxth	r3, r3
 801db5e:	3301      	adds	r3, #1
 801db60:	b29b      	uxth	r3, r3
 801db62:	4a6e      	ldr	r2, [pc, #440]	; (801dd1c <ThreadDisplayTask+0x1120>)
 801db64:	7812      	ldrb	r2, [r2, #0]
 801db66:	b2d2      	uxtb	r2, r2
 801db68:	4611      	mov	r1, r2
 801db6a:	4618      	mov	r0, r3
 801db6c:	f00c ff8e 	bl	802aa8c <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 801db70:	4b6d      	ldr	r3, [pc, #436]	; (801dd28 <ThreadDisplayTask+0x112c>)
 801db72:	681b      	ldr	r3, [r3, #0]
 801db74:	4618      	mov	r0, r3
 801db76:	f7fb fbe5 	bl	8019344 <osMutexRelease>
						//control_registers.arming_timeleft_reg = control_register_temp_number;


					}

					number_change_display( control_register_temp_number );
 801db7a:	4b68      	ldr	r3, [pc, #416]	; (801dd1c <ThreadDisplayTask+0x1120>)
 801db7c:	781b      	ldrb	r3, [r3, #0]
 801db7e:	b2db      	uxtb	r3, r3
 801db80:	4618      	mov	r0, r3
 801db82:	f00c fca9 	bl	802a4d8 <number_change_display>

				}


				if( (register_menu_state >= Y13) && (register_menu_state <= Y15) )
 801db86:	4b69      	ldr	r3, [pc, #420]	; (801dd2c <ThreadDisplayTask+0x1130>)
 801db88:	881b      	ldrh	r3, [r3, #0]
 801db8a:	b29b      	uxth	r3, r3
 801db8c:	2b50      	cmp	r3, #80	; 0x50
 801db8e:	d97a      	bls.n	801dc86 <ThreadDisplayTask+0x108a>
 801db90:	4b66      	ldr	r3, [pc, #408]	; (801dd2c <ThreadDisplayTask+0x1130>)
 801db92:	881b      	ldrh	r3, [r3, #0]
 801db94:	b29b      	uxth	r3, r3
 801db96:	2b53      	cmp	r3, #83	; 0x53
 801db98:	d875      	bhi.n	801dc86 <ThreadDisplayTask+0x108a>
				{

					if( (control_register_increment_state == 1) && (control_register_decrement_state == 0) )
 801db9a:	4b5e      	ldr	r3, [pc, #376]	; (801dd14 <ThreadDisplayTask+0x1118>)
 801db9c:	781b      	ldrb	r3, [r3, #0]
 801db9e:	b2db      	uxtb	r3, r3
 801dba0:	2b01      	cmp	r3, #1
 801dba2:	d117      	bne.n	801dbd4 <ThreadDisplayTask+0xfd8>
 801dba4:	4b5c      	ldr	r3, [pc, #368]	; (801dd18 <ThreadDisplayTask+0x111c>)
 801dba6:	781b      	ldrb	r3, [r3, #0]
 801dba8:	b2db      	uxtb	r3, r3
 801dbaa:	2b00      	cmp	r3, #0
 801dbac:	d112      	bne.n	801dbd4 <ThreadDisplayTask+0xfd8>
					{
						control_register_increment_state = 0;
 801dbae:	4b59      	ldr	r3, [pc, #356]	; (801dd14 <ThreadDisplayTask+0x1118>)
 801dbb0:	2200      	movs	r2, #0
 801dbb2:	701a      	strb	r2, [r3, #0]
						control_register_decrement_state = 0;
 801dbb4:	4b58      	ldr	r3, [pc, #352]	; (801dd18 <ThreadDisplayTask+0x111c>)
 801dbb6:	2200      	movs	r2, #0
 801dbb8:	701a      	strb	r2, [r3, #0]

						if(control_register_temp_number < 255)
 801dbba:	4b58      	ldr	r3, [pc, #352]	; (801dd1c <ThreadDisplayTask+0x1120>)
 801dbbc:	781b      	ldrb	r3, [r3, #0]
 801dbbe:	b2db      	uxtb	r3, r3
 801dbc0:	2bff      	cmp	r3, #255	; 0xff
 801dbc2:	d05a      	beq.n	801dc7a <ThreadDisplayTask+0x107e>
						{
							control_register_temp_number++;
 801dbc4:	4b55      	ldr	r3, [pc, #340]	; (801dd1c <ThreadDisplayTask+0x1120>)
 801dbc6:	781b      	ldrb	r3, [r3, #0]
 801dbc8:	b2db      	uxtb	r3, r3
 801dbca:	3301      	adds	r3, #1
 801dbcc:	b2da      	uxtb	r2, r3
 801dbce:	4b53      	ldr	r3, [pc, #332]	; (801dd1c <ThreadDisplayTask+0x1120>)
 801dbd0:	701a      	strb	r2, [r3, #0]
						if(control_register_temp_number < 255)
 801dbd2:	e052      	b.n	801dc7a <ThreadDisplayTask+0x107e>
						}

					}
					else if( (control_register_increment_state == 0) && (control_register_decrement_state == 1) )
 801dbd4:	4b4f      	ldr	r3, [pc, #316]	; (801dd14 <ThreadDisplayTask+0x1118>)
 801dbd6:	781b      	ldrb	r3, [r3, #0]
 801dbd8:	b2db      	uxtb	r3, r3
 801dbda:	2b00      	cmp	r3, #0
 801dbdc:	d117      	bne.n	801dc0e <ThreadDisplayTask+0x1012>
 801dbde:	4b4e      	ldr	r3, [pc, #312]	; (801dd18 <ThreadDisplayTask+0x111c>)
 801dbe0:	781b      	ldrb	r3, [r3, #0]
 801dbe2:	b2db      	uxtb	r3, r3
 801dbe4:	2b01      	cmp	r3, #1
 801dbe6:	d112      	bne.n	801dc0e <ThreadDisplayTask+0x1012>
					{
						control_register_increment_state = 0;
 801dbe8:	4b4a      	ldr	r3, [pc, #296]	; (801dd14 <ThreadDisplayTask+0x1118>)
 801dbea:	2200      	movs	r2, #0
 801dbec:	701a      	strb	r2, [r3, #0]
						control_register_decrement_state = 0;
 801dbee:	4b4a      	ldr	r3, [pc, #296]	; (801dd18 <ThreadDisplayTask+0x111c>)
 801dbf0:	2200      	movs	r2, #0
 801dbf2:	701a      	strb	r2, [r3, #0]

						if(control_register_temp_number > 0)
 801dbf4:	4b49      	ldr	r3, [pc, #292]	; (801dd1c <ThreadDisplayTask+0x1120>)
 801dbf6:	781b      	ldrb	r3, [r3, #0]
 801dbf8:	b2db      	uxtb	r3, r3
 801dbfa:	2b00      	cmp	r3, #0
 801dbfc:	d03d      	beq.n	801dc7a <ThreadDisplayTask+0x107e>
						{
							control_register_temp_number--;
 801dbfe:	4b47      	ldr	r3, [pc, #284]	; (801dd1c <ThreadDisplayTask+0x1120>)
 801dc00:	781b      	ldrb	r3, [r3, #0]
 801dc02:	b2db      	uxtb	r3, r3
 801dc04:	3b01      	subs	r3, #1
 801dc06:	b2da      	uxtb	r2, r3
 801dc08:	4b44      	ldr	r3, [pc, #272]	; (801dd1c <ThreadDisplayTask+0x1120>)
 801dc0a:	701a      	strb	r2, [r3, #0]
						if(control_register_temp_number > 0)
 801dc0c:	e035      	b.n	801dc7a <ThreadDisplayTask+0x107e>
						}

					}
					else if(control_register_save_state == 1)
 801dc0e:	4b44      	ldr	r3, [pc, #272]	; (801dd20 <ThreadDisplayTask+0x1124>)
 801dc10:	781b      	ldrb	r3, [r3, #0]
 801dc12:	b2db      	uxtb	r3, r3
 801dc14:	2b01      	cmp	r3, #1
 801dc16:	d130      	bne.n	801dc7a <ThreadDisplayTask+0x107e>
					{
						control_register_save_state = 0;
 801dc18:	4b41      	ldr	r3, [pc, #260]	; (801dd20 <ThreadDisplayTask+0x1124>)
 801dc1a:	2200      	movs	r2, #0
 801dc1c:	701a      	strb	r2, [r3, #0]
						register_content_menu_state = 1;
 801dc1e:	4b41      	ldr	r3, [pc, #260]	; (801dd24 <ThreadDisplayTask+0x1128>)
 801dc20:	2201      	movs	r2, #1
 801dc22:	801a      	strh	r2, [r3, #0]

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801dc24:	4b40      	ldr	r3, [pc, #256]	; (801dd28 <ThreadDisplayTask+0x112c>)
 801dc26:	681b      	ldr	r3, [r3, #0]
 801dc28:	f04f 31ff 	mov.w	r1, #4294967295
 801dc2c:	4618      	mov	r0, r3
 801dc2e:	f7fb fb3b 	bl	80192a8 <osMutexWait>
						fm25v02_write( 2*(EVENT_READ_REG + (register_menu_state - Y13) ), 0x00);
 801dc32:	4b3e      	ldr	r3, [pc, #248]	; (801dd2c <ThreadDisplayTask+0x1130>)
 801dc34:	881b      	ldrh	r3, [r3, #0]
 801dc36:	b29b      	uxth	r3, r3
 801dc38:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 801dc3c:	3311      	adds	r3, #17
 801dc3e:	b29b      	uxth	r3, r3
 801dc40:	005b      	lsls	r3, r3, #1
 801dc42:	b29b      	uxth	r3, r3
 801dc44:	2100      	movs	r1, #0
 801dc46:	4618      	mov	r0, r3
 801dc48:	f00c ff20 	bl	802aa8c <fm25v02_write>
						fm25v02_write( 2*(EVENT_READ_REG + (register_menu_state - Y13) )+1, control_register_temp_number );
 801dc4c:	4b37      	ldr	r3, [pc, #220]	; (801dd2c <ThreadDisplayTask+0x1130>)
 801dc4e:	881b      	ldrh	r3, [r3, #0]
 801dc50:	b29b      	uxth	r3, r3
 801dc52:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 801dc56:	3311      	adds	r3, #17
 801dc58:	b29b      	uxth	r3, r3
 801dc5a:	005b      	lsls	r3, r3, #1
 801dc5c:	b29b      	uxth	r3, r3
 801dc5e:	3301      	adds	r3, #1
 801dc60:	b29b      	uxth	r3, r3
 801dc62:	4a2e      	ldr	r2, [pc, #184]	; (801dd1c <ThreadDisplayTask+0x1120>)
 801dc64:	7812      	ldrb	r2, [r2, #0]
 801dc66:	b2d2      	uxtb	r2, r2
 801dc68:	4611      	mov	r1, r2
 801dc6a:	4618      	mov	r0, r3
 801dc6c:	f00c ff0e 	bl	802aa8c <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 801dc70:	4b2d      	ldr	r3, [pc, #180]	; (801dd28 <ThreadDisplayTask+0x112c>)
 801dc72:	681b      	ldr	r3, [r3, #0]
 801dc74:	4618      	mov	r0, r3
 801dc76:	f7fb fb65 	bl	8019344 <osMutexRelease>
						//control_registers.arming_timeleft_reg = control_register_temp_number;


					}

					number_change_display( control_register_temp_number );
 801dc7a:	4b28      	ldr	r3, [pc, #160]	; (801dd1c <ThreadDisplayTask+0x1120>)
 801dc7c:	781b      	ldrb	r3, [r3, #0]
 801dc7e:	b2db      	uxtb	r3, r3
 801dc80:	4618      	mov	r0, r3
 801dc82:	f00c fc29 	bl	802a4d8 <number_change_display>

				}


				if( (register_menu_state >= Y16) && (register_menu_state <= Y28) )
 801dc86:	4b29      	ldr	r3, [pc, #164]	; (801dd2c <ThreadDisplayTask+0x1130>)
 801dc88:	881b      	ldrh	r3, [r3, #0]
 801dc8a:	b29b      	uxth	r3, r3
 801dc8c:	2b53      	cmp	r3, #83	; 0x53
 801dc8e:	f240 808b 	bls.w	801dda8 <ThreadDisplayTask+0x11ac>
 801dc92:	4b26      	ldr	r3, [pc, #152]	; (801dd2c <ThreadDisplayTask+0x1130>)
 801dc94:	881b      	ldrh	r3, [r3, #0]
 801dc96:	b29b      	uxth	r3, r3
 801dc98:	2b60      	cmp	r3, #96	; 0x60
 801dc9a:	f200 8085 	bhi.w	801dda8 <ThreadDisplayTask+0x11ac>
				{

					if( (control_register_increment_state == 1) && (control_register_decrement_state == 0) )
 801dc9e:	4b1d      	ldr	r3, [pc, #116]	; (801dd14 <ThreadDisplayTask+0x1118>)
 801dca0:	781b      	ldrb	r3, [r3, #0]
 801dca2:	b2db      	uxtb	r3, r3
 801dca4:	2b01      	cmp	r3, #1
 801dca6:	d117      	bne.n	801dcd8 <ThreadDisplayTask+0x10dc>
 801dca8:	4b1b      	ldr	r3, [pc, #108]	; (801dd18 <ThreadDisplayTask+0x111c>)
 801dcaa:	781b      	ldrb	r3, [r3, #0]
 801dcac:	b2db      	uxtb	r3, r3
 801dcae:	2b00      	cmp	r3, #0
 801dcb0:	d112      	bne.n	801dcd8 <ThreadDisplayTask+0x10dc>
					{
						control_register_increment_state = 0;
 801dcb2:	4b18      	ldr	r3, [pc, #96]	; (801dd14 <ThreadDisplayTask+0x1118>)
 801dcb4:	2200      	movs	r2, #0
 801dcb6:	701a      	strb	r2, [r3, #0]
						control_register_decrement_state = 0;
 801dcb8:	4b17      	ldr	r3, [pc, #92]	; (801dd18 <ThreadDisplayTask+0x111c>)
 801dcba:	2200      	movs	r2, #0
 801dcbc:	701a      	strb	r2, [r3, #0]

						if(control_register_temp_number < 255)
 801dcbe:	4b17      	ldr	r3, [pc, #92]	; (801dd1c <ThreadDisplayTask+0x1120>)
 801dcc0:	781b      	ldrb	r3, [r3, #0]
 801dcc2:	b2db      	uxtb	r3, r3
 801dcc4:	2bff      	cmp	r3, #255	; 0xff
 801dcc6:	d069      	beq.n	801dd9c <ThreadDisplayTask+0x11a0>
						{
							control_register_temp_number++;
 801dcc8:	4b14      	ldr	r3, [pc, #80]	; (801dd1c <ThreadDisplayTask+0x1120>)
 801dcca:	781b      	ldrb	r3, [r3, #0]
 801dccc:	b2db      	uxtb	r3, r3
 801dcce:	3301      	adds	r3, #1
 801dcd0:	b2da      	uxtb	r2, r3
 801dcd2:	4b12      	ldr	r3, [pc, #72]	; (801dd1c <ThreadDisplayTask+0x1120>)
 801dcd4:	701a      	strb	r2, [r3, #0]
						if(control_register_temp_number < 255)
 801dcd6:	e061      	b.n	801dd9c <ThreadDisplayTask+0x11a0>
						}

					}
					else if( (control_register_increment_state == 0) && (control_register_decrement_state == 1) )
 801dcd8:	4b0e      	ldr	r3, [pc, #56]	; (801dd14 <ThreadDisplayTask+0x1118>)
 801dcda:	781b      	ldrb	r3, [r3, #0]
 801dcdc:	b2db      	uxtb	r3, r3
 801dcde:	2b00      	cmp	r3, #0
 801dce0:	d126      	bne.n	801dd30 <ThreadDisplayTask+0x1134>
 801dce2:	4b0d      	ldr	r3, [pc, #52]	; (801dd18 <ThreadDisplayTask+0x111c>)
 801dce4:	781b      	ldrb	r3, [r3, #0]
 801dce6:	b2db      	uxtb	r3, r3
 801dce8:	2b01      	cmp	r3, #1
 801dcea:	d121      	bne.n	801dd30 <ThreadDisplayTask+0x1134>
					{
						control_register_increment_state = 0;
 801dcec:	4b09      	ldr	r3, [pc, #36]	; (801dd14 <ThreadDisplayTask+0x1118>)
 801dcee:	2200      	movs	r2, #0
 801dcf0:	701a      	strb	r2, [r3, #0]
						control_register_decrement_state = 0;
 801dcf2:	4b09      	ldr	r3, [pc, #36]	; (801dd18 <ThreadDisplayTask+0x111c>)
 801dcf4:	2200      	movs	r2, #0
 801dcf6:	701a      	strb	r2, [r3, #0]

						if(control_register_temp_number > 0)
 801dcf8:	4b08      	ldr	r3, [pc, #32]	; (801dd1c <ThreadDisplayTask+0x1120>)
 801dcfa:	781b      	ldrb	r3, [r3, #0]
 801dcfc:	b2db      	uxtb	r3, r3
 801dcfe:	2b00      	cmp	r3, #0
 801dd00:	d04c      	beq.n	801dd9c <ThreadDisplayTask+0x11a0>
						{
							control_register_temp_number--;
 801dd02:	4b06      	ldr	r3, [pc, #24]	; (801dd1c <ThreadDisplayTask+0x1120>)
 801dd04:	781b      	ldrb	r3, [r3, #0]
 801dd06:	b2db      	uxtb	r3, r3
 801dd08:	3b01      	subs	r3, #1
 801dd0a:	b2da      	uxtb	r2, r3
 801dd0c:	4b03      	ldr	r3, [pc, #12]	; (801dd1c <ThreadDisplayTask+0x1120>)
 801dd0e:	701a      	strb	r2, [r3, #0]
						if(control_register_temp_number > 0)
 801dd10:	e044      	b.n	801dd9c <ThreadDisplayTask+0x11a0>
 801dd12:	bf00      	nop
 801dd14:	20008014 	.word	0x20008014
 801dd18:	20008015 	.word	0x20008015
 801dd1c:	20008017 	.word	0x20008017
 801dd20:	20008016 	.word	0x20008016
 801dd24:	20008012 	.word	0x20008012
 801dd28:	20009bb8 	.word	0x20009bb8
 801dd2c:	20008010 	.word	0x20008010
						}

					}
					else if(control_register_save_state == 1)
 801dd30:	4ba2      	ldr	r3, [pc, #648]	; (801dfbc <ThreadDisplayTask+0x13c0>)
 801dd32:	781b      	ldrb	r3, [r3, #0]
 801dd34:	b2db      	uxtb	r3, r3
 801dd36:	2b01      	cmp	r3, #1
 801dd38:	d130      	bne.n	801dd9c <ThreadDisplayTask+0x11a0>
					{
						control_register_save_state = 0;
 801dd3a:	4ba0      	ldr	r3, [pc, #640]	; (801dfbc <ThreadDisplayTask+0x13c0>)
 801dd3c:	2200      	movs	r2, #0
 801dd3e:	701a      	strb	r2, [r3, #0]
						register_content_menu_state = 1;
 801dd40:	4b9f      	ldr	r3, [pc, #636]	; (801dfc0 <ThreadDisplayTask+0x13c4>)
 801dd42:	2201      	movs	r2, #1
 801dd44:	801a      	strh	r2, [r3, #0]

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801dd46:	4b9f      	ldr	r3, [pc, #636]	; (801dfc4 <ThreadDisplayTask+0x13c8>)
 801dd48:	681b      	ldr	r3, [r3, #0]
 801dd4a:	f04f 31ff 	mov.w	r1, #4294967295
 801dd4e:	4618      	mov	r0, r3
 801dd50:	f7fb faaa 	bl	80192a8 <osMutexWait>
						fm25v02_write( 2*(ID_HIGH_REG + (register_menu_state - Y16) ), 0x00);
 801dd54:	4b9c      	ldr	r3, [pc, #624]	; (801dfc8 <ThreadDisplayTask+0x13cc>)
 801dd56:	881b      	ldrh	r3, [r3, #0]
 801dd58:	b29b      	uxth	r3, r3
 801dd5a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 801dd5e:	3317      	adds	r3, #23
 801dd60:	b29b      	uxth	r3, r3
 801dd62:	005b      	lsls	r3, r3, #1
 801dd64:	b29b      	uxth	r3, r3
 801dd66:	2100      	movs	r1, #0
 801dd68:	4618      	mov	r0, r3
 801dd6a:	f00c fe8f 	bl	802aa8c <fm25v02_write>
						fm25v02_write( 2*(ID_HIGH_REG + (register_menu_state - Y16) )+1, control_register_temp_number );
 801dd6e:	4b96      	ldr	r3, [pc, #600]	; (801dfc8 <ThreadDisplayTask+0x13cc>)
 801dd70:	881b      	ldrh	r3, [r3, #0]
 801dd72:	b29b      	uxth	r3, r3
 801dd74:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 801dd78:	3317      	adds	r3, #23
 801dd7a:	b29b      	uxth	r3, r3
 801dd7c:	005b      	lsls	r3, r3, #1
 801dd7e:	b29b      	uxth	r3, r3
 801dd80:	3301      	adds	r3, #1
 801dd82:	b29b      	uxth	r3, r3
 801dd84:	4a91      	ldr	r2, [pc, #580]	; (801dfcc <ThreadDisplayTask+0x13d0>)
 801dd86:	7812      	ldrb	r2, [r2, #0]
 801dd88:	b2d2      	uxtb	r2, r2
 801dd8a:	4611      	mov	r1, r2
 801dd8c:	4618      	mov	r0, r3
 801dd8e:	f00c fe7d 	bl	802aa8c <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 801dd92:	4b8c      	ldr	r3, [pc, #560]	; (801dfc4 <ThreadDisplayTask+0x13c8>)
 801dd94:	681b      	ldr	r3, [r3, #0]
 801dd96:	4618      	mov	r0, r3
 801dd98:	f7fb fad4 	bl	8019344 <osMutexRelease>
						//control_registers.arming_timeleft_reg = control_register_temp_number;


					}

					number_change_display( control_register_temp_number );
 801dd9c:	4b8b      	ldr	r3, [pc, #556]	; (801dfcc <ThreadDisplayTask+0x13d0>)
 801dd9e:	781b      	ldrb	r3, [r3, #0]
 801dda0:	b2db      	uxtb	r3, r3
 801dda2:	4618      	mov	r0, r3
 801dda4:	f00c fb98 	bl	802a4d8 <number_change_display>

				}


				if( register_menu_state == Y29 )
 801dda8:	4b87      	ldr	r3, [pc, #540]	; (801dfc8 <ThreadDisplayTask+0x13cc>)
 801ddaa:	881b      	ldrh	r3, [r3, #0]
 801ddac:	b29b      	uxth	r3, r3
 801ddae:	2b61      	cmp	r3, #97	; 0x61
 801ddb0:	d175      	bne.n	801de9e <ThreadDisplayTask+0x12a2>
				{

					if( (control_register_increment_state == 1) && (control_register_decrement_state == 0) )
 801ddb2:	4b87      	ldr	r3, [pc, #540]	; (801dfd0 <ThreadDisplayTask+0x13d4>)
 801ddb4:	781b      	ldrb	r3, [r3, #0]
 801ddb6:	b2db      	uxtb	r3, r3
 801ddb8:	2b01      	cmp	r3, #1
 801ddba:	d117      	bne.n	801ddec <ThreadDisplayTask+0x11f0>
 801ddbc:	4b85      	ldr	r3, [pc, #532]	; (801dfd4 <ThreadDisplayTask+0x13d8>)
 801ddbe:	781b      	ldrb	r3, [r3, #0]
 801ddc0:	b2db      	uxtb	r3, r3
 801ddc2:	2b00      	cmp	r3, #0
 801ddc4:	d112      	bne.n	801ddec <ThreadDisplayTask+0x11f0>
					{
						control_register_increment_state = 0;
 801ddc6:	4b82      	ldr	r3, [pc, #520]	; (801dfd0 <ThreadDisplayTask+0x13d4>)
 801ddc8:	2200      	movs	r2, #0
 801ddca:	701a      	strb	r2, [r3, #0]
						control_register_decrement_state = 0;
 801ddcc:	4b81      	ldr	r3, [pc, #516]	; (801dfd4 <ThreadDisplayTask+0x13d8>)
 801ddce:	2200      	movs	r2, #0
 801ddd0:	701a      	strb	r2, [r3, #0]

						if(control_register_temp_number < 255)
 801ddd2:	4b7e      	ldr	r3, [pc, #504]	; (801dfcc <ThreadDisplayTask+0x13d0>)
 801ddd4:	781b      	ldrb	r3, [r3, #0]
 801ddd6:	b2db      	uxtb	r3, r3
 801ddd8:	2bff      	cmp	r3, #255	; 0xff
 801ddda:	d05a      	beq.n	801de92 <ThreadDisplayTask+0x1296>
						{
							control_register_temp_number++;
 801dddc:	4b7b      	ldr	r3, [pc, #492]	; (801dfcc <ThreadDisplayTask+0x13d0>)
 801ddde:	781b      	ldrb	r3, [r3, #0]
 801dde0:	b2db      	uxtb	r3, r3
 801dde2:	3301      	adds	r3, #1
 801dde4:	b2da      	uxtb	r2, r3
 801dde6:	4b79      	ldr	r3, [pc, #484]	; (801dfcc <ThreadDisplayTask+0x13d0>)
 801dde8:	701a      	strb	r2, [r3, #0]
						if(control_register_temp_number < 255)
 801ddea:	e052      	b.n	801de92 <ThreadDisplayTask+0x1296>
						}

					}
					else if( (control_register_increment_state == 0) && (control_register_decrement_state == 1) )
 801ddec:	4b78      	ldr	r3, [pc, #480]	; (801dfd0 <ThreadDisplayTask+0x13d4>)
 801ddee:	781b      	ldrb	r3, [r3, #0]
 801ddf0:	b2db      	uxtb	r3, r3
 801ddf2:	2b00      	cmp	r3, #0
 801ddf4:	d117      	bne.n	801de26 <ThreadDisplayTask+0x122a>
 801ddf6:	4b77      	ldr	r3, [pc, #476]	; (801dfd4 <ThreadDisplayTask+0x13d8>)
 801ddf8:	781b      	ldrb	r3, [r3, #0]
 801ddfa:	b2db      	uxtb	r3, r3
 801ddfc:	2b01      	cmp	r3, #1
 801ddfe:	d112      	bne.n	801de26 <ThreadDisplayTask+0x122a>
					{
						control_register_increment_state = 0;
 801de00:	4b73      	ldr	r3, [pc, #460]	; (801dfd0 <ThreadDisplayTask+0x13d4>)
 801de02:	2200      	movs	r2, #0
 801de04:	701a      	strb	r2, [r3, #0]
						control_register_decrement_state = 0;
 801de06:	4b73      	ldr	r3, [pc, #460]	; (801dfd4 <ThreadDisplayTask+0x13d8>)
 801de08:	2200      	movs	r2, #0
 801de0a:	701a      	strb	r2, [r3, #0]

						if(control_register_temp_number > 0)
 801de0c:	4b6f      	ldr	r3, [pc, #444]	; (801dfcc <ThreadDisplayTask+0x13d0>)
 801de0e:	781b      	ldrb	r3, [r3, #0]
 801de10:	b2db      	uxtb	r3, r3
 801de12:	2b00      	cmp	r3, #0
 801de14:	d03d      	beq.n	801de92 <ThreadDisplayTask+0x1296>
						{
							control_register_temp_number--;
 801de16:	4b6d      	ldr	r3, [pc, #436]	; (801dfcc <ThreadDisplayTask+0x13d0>)
 801de18:	781b      	ldrb	r3, [r3, #0]
 801de1a:	b2db      	uxtb	r3, r3
 801de1c:	3b01      	subs	r3, #1
 801de1e:	b2da      	uxtb	r2, r3
 801de20:	4b6a      	ldr	r3, [pc, #424]	; (801dfcc <ThreadDisplayTask+0x13d0>)
 801de22:	701a      	strb	r2, [r3, #0]
						if(control_register_temp_number > 0)
 801de24:	e035      	b.n	801de92 <ThreadDisplayTask+0x1296>
						}

					}
					else if(control_register_save_state == 1)
 801de26:	4b65      	ldr	r3, [pc, #404]	; (801dfbc <ThreadDisplayTask+0x13c0>)
 801de28:	781b      	ldrb	r3, [r3, #0]
 801de2a:	b2db      	uxtb	r3, r3
 801de2c:	2b01      	cmp	r3, #1
 801de2e:	d130      	bne.n	801de92 <ThreadDisplayTask+0x1296>
					{
						control_register_save_state = 0;
 801de30:	4b62      	ldr	r3, [pc, #392]	; (801dfbc <ThreadDisplayTask+0x13c0>)
 801de32:	2200      	movs	r2, #0
 801de34:	701a      	strb	r2, [r3, #0]
						register_content_menu_state = 1;
 801de36:	4b62      	ldr	r3, [pc, #392]	; (801dfc0 <ThreadDisplayTask+0x13c4>)
 801de38:	2201      	movs	r2, #1
 801de3a:	801a      	strh	r2, [r3, #0]

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801de3c:	4b61      	ldr	r3, [pc, #388]	; (801dfc4 <ThreadDisplayTask+0x13c8>)
 801de3e:	681b      	ldr	r3, [r3, #0]
 801de40:	f04f 31ff 	mov.w	r1, #4294967295
 801de44:	4618      	mov	r0, r3
 801de46:	f7fb fa2f 	bl	80192a8 <osMutexWait>
						fm25v02_write( 2*(MUTE_REG + (register_menu_state - Y29) ), 0x00);
 801de4a:	4b5f      	ldr	r3, [pc, #380]	; (801dfc8 <ThreadDisplayTask+0x13cc>)
 801de4c:	881b      	ldrh	r3, [r3, #0]
 801de4e:	b29b      	uxth	r3, r3
 801de50:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 801de54:	3318      	adds	r3, #24
 801de56:	b29b      	uxth	r3, r3
 801de58:	005b      	lsls	r3, r3, #1
 801de5a:	b29b      	uxth	r3, r3
 801de5c:	2100      	movs	r1, #0
 801de5e:	4618      	mov	r0, r3
 801de60:	f00c fe14 	bl	802aa8c <fm25v02_write>
						fm25v02_write( 2*(MUTE_REG + (register_menu_state - Y29) )+1, control_register_temp_number );
 801de64:	4b58      	ldr	r3, [pc, #352]	; (801dfc8 <ThreadDisplayTask+0x13cc>)
 801de66:	881b      	ldrh	r3, [r3, #0]
 801de68:	b29b      	uxth	r3, r3
 801de6a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 801de6e:	3318      	adds	r3, #24
 801de70:	b29b      	uxth	r3, r3
 801de72:	005b      	lsls	r3, r3, #1
 801de74:	b29b      	uxth	r3, r3
 801de76:	3301      	adds	r3, #1
 801de78:	b29b      	uxth	r3, r3
 801de7a:	4a54      	ldr	r2, [pc, #336]	; (801dfcc <ThreadDisplayTask+0x13d0>)
 801de7c:	7812      	ldrb	r2, [r2, #0]
 801de7e:	b2d2      	uxtb	r2, r2
 801de80:	4611      	mov	r1, r2
 801de82:	4618      	mov	r0, r3
 801de84:	f00c fe02 	bl	802aa8c <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 801de88:	4b4e      	ldr	r3, [pc, #312]	; (801dfc4 <ThreadDisplayTask+0x13c8>)
 801de8a:	681b      	ldr	r3, [r3, #0]
 801de8c:	4618      	mov	r0, r3
 801de8e:	f7fb fa59 	bl	8019344 <osMutexRelease>
						//control_registers.arming_timeleft_reg = control_register_temp_number;


					}

					number_change_display( control_register_temp_number );
 801de92:	4b4e      	ldr	r3, [pc, #312]	; (801dfcc <ThreadDisplayTask+0x13d0>)
 801de94:	781b      	ldrb	r3, [r3, #0]
 801de96:	b2db      	uxtb	r3, r3
 801de98:	4618      	mov	r0, r3
 801de9a:	f00c fb1d 	bl	802a4d8 <number_change_display>

				}


				if( register_menu_state == Y30 )
 801de9e:	4b4a      	ldr	r3, [pc, #296]	; (801dfc8 <ThreadDisplayTask+0x13cc>)
 801dea0:	881b      	ldrh	r3, [r3, #0]
 801dea2:	b29b      	uxth	r3, r3
 801dea4:	2b62      	cmp	r3, #98	; 0x62
 801dea6:	d166      	bne.n	801df76 <ThreadDisplayTask+0x137a>
				{

					if( (control_register_increment_state == 1) && (control_register_decrement_state == 0) )
 801dea8:	4b49      	ldr	r3, [pc, #292]	; (801dfd0 <ThreadDisplayTask+0x13d4>)
 801deaa:	781b      	ldrb	r3, [r3, #0]
 801deac:	b2db      	uxtb	r3, r3
 801deae:	2b01      	cmp	r3, #1
 801deb0:	d117      	bne.n	801dee2 <ThreadDisplayTask+0x12e6>
 801deb2:	4b48      	ldr	r3, [pc, #288]	; (801dfd4 <ThreadDisplayTask+0x13d8>)
 801deb4:	781b      	ldrb	r3, [r3, #0]
 801deb6:	b2db      	uxtb	r3, r3
 801deb8:	2b00      	cmp	r3, #0
 801deba:	d112      	bne.n	801dee2 <ThreadDisplayTask+0x12e6>
					{
						control_register_increment_state = 0;
 801debc:	4b44      	ldr	r3, [pc, #272]	; (801dfd0 <ThreadDisplayTask+0x13d4>)
 801debe:	2200      	movs	r2, #0
 801dec0:	701a      	strb	r2, [r3, #0]
						control_register_decrement_state = 0;
 801dec2:	4b44      	ldr	r3, [pc, #272]	; (801dfd4 <ThreadDisplayTask+0x13d8>)
 801dec4:	2200      	movs	r2, #0
 801dec6:	701a      	strb	r2, [r3, #0]

						if(control_register_temp_number < 255)
 801dec8:	4b40      	ldr	r3, [pc, #256]	; (801dfcc <ThreadDisplayTask+0x13d0>)
 801deca:	781b      	ldrb	r3, [r3, #0]
 801decc:	b2db      	uxtb	r3, r3
 801dece:	2bff      	cmp	r3, #255	; 0xff
 801ded0:	d04b      	beq.n	801df6a <ThreadDisplayTask+0x136e>
						{
							control_register_temp_number++;
 801ded2:	4b3e      	ldr	r3, [pc, #248]	; (801dfcc <ThreadDisplayTask+0x13d0>)
 801ded4:	781b      	ldrb	r3, [r3, #0]
 801ded6:	b2db      	uxtb	r3, r3
 801ded8:	3301      	adds	r3, #1
 801deda:	b2da      	uxtb	r2, r3
 801dedc:	4b3b      	ldr	r3, [pc, #236]	; (801dfcc <ThreadDisplayTask+0x13d0>)
 801dede:	701a      	strb	r2, [r3, #0]
						if(control_register_temp_number < 255)
 801dee0:	e043      	b.n	801df6a <ThreadDisplayTask+0x136e>
						}

					}
					else if( (control_register_increment_state == 0) && (control_register_decrement_state == 1) )
 801dee2:	4b3b      	ldr	r3, [pc, #236]	; (801dfd0 <ThreadDisplayTask+0x13d4>)
 801dee4:	781b      	ldrb	r3, [r3, #0]
 801dee6:	b2db      	uxtb	r3, r3
 801dee8:	2b00      	cmp	r3, #0
 801deea:	d117      	bne.n	801df1c <ThreadDisplayTask+0x1320>
 801deec:	4b39      	ldr	r3, [pc, #228]	; (801dfd4 <ThreadDisplayTask+0x13d8>)
 801deee:	781b      	ldrb	r3, [r3, #0]
 801def0:	b2db      	uxtb	r3, r3
 801def2:	2b01      	cmp	r3, #1
 801def4:	d112      	bne.n	801df1c <ThreadDisplayTask+0x1320>
					{
						control_register_increment_state = 0;
 801def6:	4b36      	ldr	r3, [pc, #216]	; (801dfd0 <ThreadDisplayTask+0x13d4>)
 801def8:	2200      	movs	r2, #0
 801defa:	701a      	strb	r2, [r3, #0]
						control_register_decrement_state = 0;
 801defc:	4b35      	ldr	r3, [pc, #212]	; (801dfd4 <ThreadDisplayTask+0x13d8>)
 801defe:	2200      	movs	r2, #0
 801df00:	701a      	strb	r2, [r3, #0]

						if(control_register_temp_number > 0)
 801df02:	4b32      	ldr	r3, [pc, #200]	; (801dfcc <ThreadDisplayTask+0x13d0>)
 801df04:	781b      	ldrb	r3, [r3, #0]
 801df06:	b2db      	uxtb	r3, r3
 801df08:	2b00      	cmp	r3, #0
 801df0a:	d02e      	beq.n	801df6a <ThreadDisplayTask+0x136e>
						{
							control_register_temp_number--;
 801df0c:	4b2f      	ldr	r3, [pc, #188]	; (801dfcc <ThreadDisplayTask+0x13d0>)
 801df0e:	781b      	ldrb	r3, [r3, #0]
 801df10:	b2db      	uxtb	r3, r3
 801df12:	3b01      	subs	r3, #1
 801df14:	b2da      	uxtb	r2, r3
 801df16:	4b2d      	ldr	r3, [pc, #180]	; (801dfcc <ThreadDisplayTask+0x13d0>)
 801df18:	701a      	strb	r2, [r3, #0]
						if(control_register_temp_number > 0)
 801df1a:	e026      	b.n	801df6a <ThreadDisplayTask+0x136e>
						}

					}
					else if(control_register_save_state == 1)
 801df1c:	4b27      	ldr	r3, [pc, #156]	; (801dfbc <ThreadDisplayTask+0x13c0>)
 801df1e:	781b      	ldrb	r3, [r3, #0]
 801df20:	b2db      	uxtb	r3, r3
 801df22:	2b01      	cmp	r3, #1
 801df24:	d121      	bne.n	801df6a <ThreadDisplayTask+0x136e>
					{
						control_register_save_state = 0;
 801df26:	4b25      	ldr	r3, [pc, #148]	; (801dfbc <ThreadDisplayTask+0x13c0>)
 801df28:	2200      	movs	r2, #0
 801df2a:	701a      	strb	r2, [r3, #0]
						register_content_menu_state = 1;
 801df2c:	4b24      	ldr	r3, [pc, #144]	; (801dfc0 <ThreadDisplayTask+0x13c4>)
 801df2e:	2201      	movs	r2, #1
 801df30:	801a      	strh	r2, [r3, #0]

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801df32:	4b24      	ldr	r3, [pc, #144]	; (801dfc4 <ThreadDisplayTask+0x13c8>)
 801df34:	681b      	ldr	r3, [r3, #0]
 801df36:	f04f 31ff 	mov.w	r1, #4294967295
 801df3a:	4618      	mov	r0, r3
 801df3c:	f7fb f9b4 	bl	80192a8 <osMutexWait>
						fm25v02_write( 2*(ARMING_TIMELEFT + (register_menu_state - Y30) ), control_register_temp_number );
 801df40:	4b21      	ldr	r3, [pc, #132]	; (801dfc8 <ThreadDisplayTask+0x13cc>)
 801df42:	881b      	ldrh	r3, [r3, #0]
 801df44:	b29b      	uxth	r3, r3
 801df46:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 801df4a:	3307      	adds	r3, #7
 801df4c:	b29b      	uxth	r3, r3
 801df4e:	005b      	lsls	r3, r3, #1
 801df50:	b29b      	uxth	r3, r3
 801df52:	4a1e      	ldr	r2, [pc, #120]	; (801dfcc <ThreadDisplayTask+0x13d0>)
 801df54:	7812      	ldrb	r2, [r2, #0]
 801df56:	b2d2      	uxtb	r2, r2
 801df58:	4611      	mov	r1, r2
 801df5a:	4618      	mov	r0, r3
 801df5c:	f00c fd96 	bl	802aa8c <fm25v02_write>
						//fm25v02_write( 2*(ARMING_TIMELEFT + (register_menu_state - Y30) )+1, control_register_temp_number );
						osMutexRelease(Fm25v02MutexHandle);
 801df60:	4b18      	ldr	r3, [pc, #96]	; (801dfc4 <ThreadDisplayTask+0x13c8>)
 801df62:	681b      	ldr	r3, [r3, #0]
 801df64:	4618      	mov	r0, r3
 801df66:	f7fb f9ed 	bl	8019344 <osMutexRelease>
						//control_registers.arming_timeleft_reg = control_register_temp_number;


					}

					number_change_display( control_register_temp_number );
 801df6a:	4b18      	ldr	r3, [pc, #96]	; (801dfcc <ThreadDisplayTask+0x13d0>)
 801df6c:	781b      	ldrb	r3, [r3, #0]
 801df6e:	b2db      	uxtb	r3, r3
 801df70:	4618      	mov	r0, r3
 801df72:	f00c fab1 	bl	802a4d8 <number_change_display>

				}


				if( register_menu_state == Y31 )
 801df76:	4b14      	ldr	r3, [pc, #80]	; (801dfc8 <ThreadDisplayTask+0x13cc>)
 801df78:	881b      	ldrh	r3, [r3, #0]
 801df7a:	b29b      	uxth	r3, r3
 801df7c:	2b63      	cmp	r3, #99	; 0x63
 801df7e:	d177      	bne.n	801e070 <ThreadDisplayTask+0x1474>
				{

					if( (control_register_increment_state == 1) && (control_register_decrement_state == 0) )
 801df80:	4b13      	ldr	r3, [pc, #76]	; (801dfd0 <ThreadDisplayTask+0x13d4>)
 801df82:	781b      	ldrb	r3, [r3, #0]
 801df84:	b2db      	uxtb	r3, r3
 801df86:	2b01      	cmp	r3, #1
 801df88:	d126      	bne.n	801dfd8 <ThreadDisplayTask+0x13dc>
 801df8a:	4b12      	ldr	r3, [pc, #72]	; (801dfd4 <ThreadDisplayTask+0x13d8>)
 801df8c:	781b      	ldrb	r3, [r3, #0]
 801df8e:	b2db      	uxtb	r3, r3
 801df90:	2b00      	cmp	r3, #0
 801df92:	d121      	bne.n	801dfd8 <ThreadDisplayTask+0x13dc>
					{
						control_register_increment_state = 0;
 801df94:	4b0e      	ldr	r3, [pc, #56]	; (801dfd0 <ThreadDisplayTask+0x13d4>)
 801df96:	2200      	movs	r2, #0
 801df98:	701a      	strb	r2, [r3, #0]
						control_register_decrement_state = 0;
 801df9a:	4b0e      	ldr	r3, [pc, #56]	; (801dfd4 <ThreadDisplayTask+0x13d8>)
 801df9c:	2200      	movs	r2, #0
 801df9e:	701a      	strb	r2, [r3, #0]

						if(control_register_temp_number < 255)
 801dfa0:	4b0a      	ldr	r3, [pc, #40]	; (801dfcc <ThreadDisplayTask+0x13d0>)
 801dfa2:	781b      	ldrb	r3, [r3, #0]
 801dfa4:	b2db      	uxtb	r3, r3
 801dfa6:	2bff      	cmp	r3, #255	; 0xff
 801dfa8:	d05c      	beq.n	801e064 <ThreadDisplayTask+0x1468>
						{
							control_register_temp_number++;
 801dfaa:	4b08      	ldr	r3, [pc, #32]	; (801dfcc <ThreadDisplayTask+0x13d0>)
 801dfac:	781b      	ldrb	r3, [r3, #0]
 801dfae:	b2db      	uxtb	r3, r3
 801dfb0:	3301      	adds	r3, #1
 801dfb2:	b2da      	uxtb	r2, r3
 801dfb4:	4b05      	ldr	r3, [pc, #20]	; (801dfcc <ThreadDisplayTask+0x13d0>)
 801dfb6:	701a      	strb	r2, [r3, #0]
						if(control_register_temp_number < 255)
 801dfb8:	e054      	b.n	801e064 <ThreadDisplayTask+0x1468>
 801dfba:	bf00      	nop
 801dfbc:	20008016 	.word	0x20008016
 801dfc0:	20008012 	.word	0x20008012
 801dfc4:	20009bb8 	.word	0x20009bb8
 801dfc8:	20008010 	.word	0x20008010
 801dfcc:	20008017 	.word	0x20008017
 801dfd0:	20008014 	.word	0x20008014
 801dfd4:	20008015 	.word	0x20008015
						}

					}
					else if( (control_register_increment_state == 0) && (control_register_decrement_state == 1) )
 801dfd8:	4b9e      	ldr	r3, [pc, #632]	; (801e254 <ThreadDisplayTask+0x1658>)
 801dfda:	781b      	ldrb	r3, [r3, #0]
 801dfdc:	b2db      	uxtb	r3, r3
 801dfde:	2b00      	cmp	r3, #0
 801dfe0:	d117      	bne.n	801e012 <ThreadDisplayTask+0x1416>
 801dfe2:	4b9d      	ldr	r3, [pc, #628]	; (801e258 <ThreadDisplayTask+0x165c>)
 801dfe4:	781b      	ldrb	r3, [r3, #0]
 801dfe6:	b2db      	uxtb	r3, r3
 801dfe8:	2b01      	cmp	r3, #1
 801dfea:	d112      	bne.n	801e012 <ThreadDisplayTask+0x1416>
					{
						control_register_increment_state = 0;
 801dfec:	4b99      	ldr	r3, [pc, #612]	; (801e254 <ThreadDisplayTask+0x1658>)
 801dfee:	2200      	movs	r2, #0
 801dff0:	701a      	strb	r2, [r3, #0]
						control_register_decrement_state = 0;
 801dff2:	4b99      	ldr	r3, [pc, #612]	; (801e258 <ThreadDisplayTask+0x165c>)
 801dff4:	2200      	movs	r2, #0
 801dff6:	701a      	strb	r2, [r3, #0]

						if(control_register_temp_number > 0)
 801dff8:	4b98      	ldr	r3, [pc, #608]	; (801e25c <ThreadDisplayTask+0x1660>)
 801dffa:	781b      	ldrb	r3, [r3, #0]
 801dffc:	b2db      	uxtb	r3, r3
 801dffe:	2b00      	cmp	r3, #0
 801e000:	d030      	beq.n	801e064 <ThreadDisplayTask+0x1468>
						{
							control_register_temp_number--;
 801e002:	4b96      	ldr	r3, [pc, #600]	; (801e25c <ThreadDisplayTask+0x1660>)
 801e004:	781b      	ldrb	r3, [r3, #0]
 801e006:	b2db      	uxtb	r3, r3
 801e008:	3b01      	subs	r3, #1
 801e00a:	b2da      	uxtb	r2, r3
 801e00c:	4b93      	ldr	r3, [pc, #588]	; (801e25c <ThreadDisplayTask+0x1660>)
 801e00e:	701a      	strb	r2, [r3, #0]
						if(control_register_temp_number > 0)
 801e010:	e028      	b.n	801e064 <ThreadDisplayTask+0x1468>
						}

					}
					else if(control_register_save_state == 1)
 801e012:	4b93      	ldr	r3, [pc, #588]	; (801e260 <ThreadDisplayTask+0x1664>)
 801e014:	781b      	ldrb	r3, [r3, #0]
 801e016:	b2db      	uxtb	r3, r3
 801e018:	2b01      	cmp	r3, #1
 801e01a:	d123      	bne.n	801e064 <ThreadDisplayTask+0x1468>
					{
						control_register_save_state = 0;
 801e01c:	4b90      	ldr	r3, [pc, #576]	; (801e260 <ThreadDisplayTask+0x1664>)
 801e01e:	2200      	movs	r2, #0
 801e020:	701a      	strb	r2, [r3, #0]
						register_content_menu_state = 1;
 801e022:	4b90      	ldr	r3, [pc, #576]	; (801e264 <ThreadDisplayTask+0x1668>)
 801e024:	2201      	movs	r2, #1
 801e026:	801a      	strh	r2, [r3, #0]

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801e028:	4b8f      	ldr	r3, [pc, #572]	; (801e268 <ThreadDisplayTask+0x166c>)
 801e02a:	681b      	ldr	r3, [r3, #0]
 801e02c:	f04f 31ff 	mov.w	r1, #4294967295
 801e030:	4618      	mov	r0, r3
 801e032:	f7fb f939 	bl	80192a8 <osMutexWait>
						//fm25v02_write( 2*(ARMING_TIMELEFT + (register_menu_state - Y30) ), 0x00);
						fm25v02_write( 2*(ARMING_TIMELEFT + (register_menu_state - Y31) )+1, control_register_temp_number );
 801e036:	4b8d      	ldr	r3, [pc, #564]	; (801e26c <ThreadDisplayTask+0x1670>)
 801e038:	881b      	ldrh	r3, [r3, #0]
 801e03a:	b29b      	uxth	r3, r3
 801e03c:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 801e040:	3306      	adds	r3, #6
 801e042:	b29b      	uxth	r3, r3
 801e044:	005b      	lsls	r3, r3, #1
 801e046:	b29b      	uxth	r3, r3
 801e048:	3301      	adds	r3, #1
 801e04a:	b29b      	uxth	r3, r3
 801e04c:	4a83      	ldr	r2, [pc, #524]	; (801e25c <ThreadDisplayTask+0x1660>)
 801e04e:	7812      	ldrb	r2, [r2, #0]
 801e050:	b2d2      	uxtb	r2, r2
 801e052:	4611      	mov	r1, r2
 801e054:	4618      	mov	r0, r3
 801e056:	f00c fd19 	bl	802aa8c <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 801e05a:	4b83      	ldr	r3, [pc, #524]	; (801e268 <ThreadDisplayTask+0x166c>)
 801e05c:	681b      	ldr	r3, [r3, #0]
 801e05e:	4618      	mov	r0, r3
 801e060:	f7fb f970 	bl	8019344 <osMutexRelease>
						//control_registers.arming_timeleft_reg = control_register_temp_number;


					}

					number_change_display( control_register_temp_number );
 801e064:	4b7d      	ldr	r3, [pc, #500]	; (801e25c <ThreadDisplayTask+0x1660>)
 801e066:	781b      	ldrb	r3, [r3, #0]
 801e068:	b2db      	uxtb	r3, r3
 801e06a:	4618      	mov	r0, r3
 801e06c:	f00c fa34 	bl	802a4d8 <number_change_display>
				}

			}


			if( (register_menu_state >= A1) && (register_menu_state <= A999) )
 801e070:	4b7e      	ldr	r3, [pc, #504]	; (801e26c <ThreadDisplayTask+0x1670>)
 801e072:	881b      	ldrh	r3, [r3, #0]
 801e074:	b29b      	uxth	r3, r3
 801e076:	2b63      	cmp	r3, #99	; 0x63
 801e078:	f240 80a0 	bls.w	801e1bc <ThreadDisplayTask+0x15c0>
 801e07c:	4b7b      	ldr	r3, [pc, #492]	; (801e26c <ThreadDisplayTask+0x1670>)
 801e07e:	881b      	ldrh	r3, [r3, #0]
 801e080:	b29b      	uxth	r3, r3
 801e082:	f240 424a 	movw	r2, #1098	; 0x44a
 801e086:	4293      	cmp	r3, r2
 801e088:	f200 8098 	bhi.w	801e1bc <ThreadDisplayTask+0x15c0>
			{

				if( (control_register_increment_state == 1) && (control_register_decrement_state == 0) )
 801e08c:	4b71      	ldr	r3, [pc, #452]	; (801e254 <ThreadDisplayTask+0x1658>)
 801e08e:	781b      	ldrb	r3, [r3, #0]
 801e090:	b2db      	uxtb	r3, r3
 801e092:	2b01      	cmp	r3, #1
 801e094:	d117      	bne.n	801e0c6 <ThreadDisplayTask+0x14ca>
 801e096:	4b70      	ldr	r3, [pc, #448]	; (801e258 <ThreadDisplayTask+0x165c>)
 801e098:	781b      	ldrb	r3, [r3, #0]
 801e09a:	b2db      	uxtb	r3, r3
 801e09c:	2b00      	cmp	r3, #0
 801e09e:	d112      	bne.n	801e0c6 <ThreadDisplayTask+0x14ca>
				{
					control_register_increment_state = 0;
 801e0a0:	4b6c      	ldr	r3, [pc, #432]	; (801e254 <ThreadDisplayTask+0x1658>)
 801e0a2:	2200      	movs	r2, #0
 801e0a4:	701a      	strb	r2, [r3, #0]
					control_register_decrement_state = 0;
 801e0a6:	4b6c      	ldr	r3, [pc, #432]	; (801e258 <ThreadDisplayTask+0x165c>)
 801e0a8:	2200      	movs	r2, #0
 801e0aa:	701a      	strb	r2, [r3, #0]

					if(control_register_temp_number < 255)
 801e0ac:	4b6b      	ldr	r3, [pc, #428]	; (801e25c <ThreadDisplayTask+0x1660>)
 801e0ae:	781b      	ldrb	r3, [r3, #0]
 801e0b0:	b2db      	uxtb	r3, r3
 801e0b2:	2bff      	cmp	r3, #255	; 0xff
 801e0b4:	d07c      	beq.n	801e1b0 <ThreadDisplayTask+0x15b4>
					{
						control_register_temp_number++;
 801e0b6:	4b69      	ldr	r3, [pc, #420]	; (801e25c <ThreadDisplayTask+0x1660>)
 801e0b8:	781b      	ldrb	r3, [r3, #0]
 801e0ba:	b2db      	uxtb	r3, r3
 801e0bc:	3301      	adds	r3, #1
 801e0be:	b2da      	uxtb	r2, r3
 801e0c0:	4b66      	ldr	r3, [pc, #408]	; (801e25c <ThreadDisplayTask+0x1660>)
 801e0c2:	701a      	strb	r2, [r3, #0]
					if(control_register_temp_number < 255)
 801e0c4:	e074      	b.n	801e1b0 <ThreadDisplayTask+0x15b4>
					}

				}
				else if( (control_register_increment_state == 0) && (control_register_decrement_state == 1) )
 801e0c6:	4b63      	ldr	r3, [pc, #396]	; (801e254 <ThreadDisplayTask+0x1658>)
 801e0c8:	781b      	ldrb	r3, [r3, #0]
 801e0ca:	b2db      	uxtb	r3, r3
 801e0cc:	2b00      	cmp	r3, #0
 801e0ce:	d117      	bne.n	801e100 <ThreadDisplayTask+0x1504>
 801e0d0:	4b61      	ldr	r3, [pc, #388]	; (801e258 <ThreadDisplayTask+0x165c>)
 801e0d2:	781b      	ldrb	r3, [r3, #0]
 801e0d4:	b2db      	uxtb	r3, r3
 801e0d6:	2b01      	cmp	r3, #1
 801e0d8:	d112      	bne.n	801e100 <ThreadDisplayTask+0x1504>
				{
					control_register_increment_state = 0;
 801e0da:	4b5e      	ldr	r3, [pc, #376]	; (801e254 <ThreadDisplayTask+0x1658>)
 801e0dc:	2200      	movs	r2, #0
 801e0de:	701a      	strb	r2, [r3, #0]
					control_register_decrement_state = 0;
 801e0e0:	4b5d      	ldr	r3, [pc, #372]	; (801e258 <ThreadDisplayTask+0x165c>)
 801e0e2:	2200      	movs	r2, #0
 801e0e4:	701a      	strb	r2, [r3, #0]

					if(control_register_temp_number > 0)
 801e0e6:	4b5d      	ldr	r3, [pc, #372]	; (801e25c <ThreadDisplayTask+0x1660>)
 801e0e8:	781b      	ldrb	r3, [r3, #0]
 801e0ea:	b2db      	uxtb	r3, r3
 801e0ec:	2b00      	cmp	r3, #0
 801e0ee:	d05f      	beq.n	801e1b0 <ThreadDisplayTask+0x15b4>
					{
						control_register_temp_number--;
 801e0f0:	4b5a      	ldr	r3, [pc, #360]	; (801e25c <ThreadDisplayTask+0x1660>)
 801e0f2:	781b      	ldrb	r3, [r3, #0]
 801e0f4:	b2db      	uxtb	r3, r3
 801e0f6:	3b01      	subs	r3, #1
 801e0f8:	b2da      	uxtb	r2, r3
 801e0fa:	4b58      	ldr	r3, [pc, #352]	; (801e25c <ThreadDisplayTask+0x1660>)
 801e0fc:	701a      	strb	r2, [r3, #0]
					if(control_register_temp_number > 0)
 801e0fe:	e057      	b.n	801e1b0 <ThreadDisplayTask+0x15b4>
					}

				}
				else if(control_register_save_state == 1)
 801e100:	4b57      	ldr	r3, [pc, #348]	; (801e260 <ThreadDisplayTask+0x1664>)
 801e102:	781b      	ldrb	r3, [r3, #0]
 801e104:	b2db      	uxtb	r3, r3
 801e106:	2b01      	cmp	r3, #1
 801e108:	d152      	bne.n	801e1b0 <ThreadDisplayTask+0x15b4>
				{
					control_register_save_state = 0;
 801e10a:	4b55      	ldr	r3, [pc, #340]	; (801e260 <ThreadDisplayTask+0x1664>)
 801e10c:	2200      	movs	r2, #0
 801e10e:	701a      	strb	r2, [r3, #0]
					register_content_menu_state = 1;
 801e110:	4b54      	ldr	r3, [pc, #336]	; (801e264 <ThreadDisplayTask+0x1668>)
 801e112:	2201      	movs	r2, #1
 801e114:	801a      	strh	r2, [r3, #0]

					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801e116:	4b54      	ldr	r3, [pc, #336]	; (801e268 <ThreadDisplayTask+0x166c>)
 801e118:	681b      	ldr	r3, [r3, #0]
 801e11a:	f04f 31ff 	mov.w	r1, #4294967295
 801e11e:	4618      	mov	r0, r3
 801e120:	f7fb f8c2 	bl	80192a8 <osMutexWait>
					fm25v02_write( 2*(IBUTTON1_BYTE_0_REG + (((register_menu_state - A1)/8)*16) + ((register_menu_state - A1)%8) ), 0x00);
 801e124:	4b51      	ldr	r3, [pc, #324]	; (801e26c <ThreadDisplayTask+0x1670>)
 801e126:	881b      	ldrh	r3, [r3, #0]
 801e128:	b29b      	uxth	r3, r3
 801e12a:	3b64      	subs	r3, #100	; 0x64
 801e12c:	2b00      	cmp	r3, #0
 801e12e:	da00      	bge.n	801e132 <ThreadDisplayTask+0x1536>
 801e130:	3307      	adds	r3, #7
 801e132:	10db      	asrs	r3, r3, #3
 801e134:	f203 1331 	addw	r3, r3, #305	; 0x131
 801e138:	011a      	lsls	r2, r3, #4
 801e13a:	4b4c      	ldr	r3, [pc, #304]	; (801e26c <ThreadDisplayTask+0x1670>)
 801e13c:	881b      	ldrh	r3, [r3, #0]
 801e13e:	b29b      	uxth	r3, r3
 801e140:	3b64      	subs	r3, #100	; 0x64
 801e142:	4259      	negs	r1, r3
 801e144:	f003 0307 	and.w	r3, r3, #7
 801e148:	f001 0107 	and.w	r1, r1, #7
 801e14c:	bf58      	it	pl
 801e14e:	424b      	negpl	r3, r1
 801e150:	4413      	add	r3, r2
 801e152:	b29b      	uxth	r3, r3
 801e154:	005b      	lsls	r3, r3, #1
 801e156:	b29b      	uxth	r3, r3
 801e158:	2100      	movs	r1, #0
 801e15a:	4618      	mov	r0, r3
 801e15c:	f00c fc96 	bl	802aa8c <fm25v02_write>
					fm25v02_write( 2*(IBUTTON1_BYTE_0_REG + (((register_menu_state - A1)/8)*16) + ((register_menu_state - A1)%8) )+1, control_register_temp_number );
 801e160:	4b42      	ldr	r3, [pc, #264]	; (801e26c <ThreadDisplayTask+0x1670>)
 801e162:	881b      	ldrh	r3, [r3, #0]
 801e164:	b29b      	uxth	r3, r3
 801e166:	3b64      	subs	r3, #100	; 0x64
 801e168:	2b00      	cmp	r3, #0
 801e16a:	da00      	bge.n	801e16e <ThreadDisplayTask+0x1572>
 801e16c:	3307      	adds	r3, #7
 801e16e:	10db      	asrs	r3, r3, #3
 801e170:	f203 1331 	addw	r3, r3, #305	; 0x131
 801e174:	011a      	lsls	r2, r3, #4
 801e176:	4b3d      	ldr	r3, [pc, #244]	; (801e26c <ThreadDisplayTask+0x1670>)
 801e178:	881b      	ldrh	r3, [r3, #0]
 801e17a:	b29b      	uxth	r3, r3
 801e17c:	3b64      	subs	r3, #100	; 0x64
 801e17e:	4259      	negs	r1, r3
 801e180:	f003 0307 	and.w	r3, r3, #7
 801e184:	f001 0107 	and.w	r1, r1, #7
 801e188:	bf58      	it	pl
 801e18a:	424b      	negpl	r3, r1
 801e18c:	4413      	add	r3, r2
 801e18e:	b29b      	uxth	r3, r3
 801e190:	005b      	lsls	r3, r3, #1
 801e192:	b29b      	uxth	r3, r3
 801e194:	3301      	adds	r3, #1
 801e196:	b29b      	uxth	r3, r3
 801e198:	4a30      	ldr	r2, [pc, #192]	; (801e25c <ThreadDisplayTask+0x1660>)
 801e19a:	7812      	ldrb	r2, [r2, #0]
 801e19c:	b2d2      	uxtb	r2, r2
 801e19e:	4611      	mov	r1, r2
 801e1a0:	4618      	mov	r0, r3
 801e1a2:	f00c fc73 	bl	802aa8c <fm25v02_write>
					osMutexRelease(Fm25v02MutexHandle);
 801e1a6:	4b30      	ldr	r3, [pc, #192]	; (801e268 <ThreadDisplayTask+0x166c>)
 801e1a8:	681b      	ldr	r3, [r3, #0]
 801e1aa:	4618      	mov	r0, r3
 801e1ac:	f7fb f8ca 	bl	8019344 <osMutexRelease>
					//control_registers.arming_timeleft_reg = control_register_temp_number;


				}

				number_change_display( control_register_temp_number );
 801e1b0:	4b2a      	ldr	r3, [pc, #168]	; (801e25c <ThreadDisplayTask+0x1660>)
 801e1b2:	781b      	ldrb	r3, [r3, #0]
 801e1b4:	b2db      	uxtb	r3, r3
 801e1b6:	4618      	mov	r0, r3
 801e1b8:	f00c f98e 	bl	802a4d8 <number_change_display>

			}

			if( (register_menu_state >= B1) && (register_menu_state <= B593) )
 801e1bc:	4b2b      	ldr	r3, [pc, #172]	; (801e26c <ThreadDisplayTask+0x1670>)
 801e1be:	881b      	ldrh	r3, [r3, #0]
 801e1c0:	b29b      	uxth	r3, r3
 801e1c2:	f240 424a 	movw	r2, #1098	; 0x44a
 801e1c6:	4293      	cmp	r3, r2
 801e1c8:	f240 80b0 	bls.w	801e32c <ThreadDisplayTask+0x1730>
 801e1cc:	4b27      	ldr	r3, [pc, #156]	; (801e26c <ThreadDisplayTask+0x1670>)
 801e1ce:	881b      	ldrh	r3, [r3, #0]
 801e1d0:	b29b      	uxth	r3, r3
 801e1d2:	f240 629b 	movw	r2, #1691	; 0x69b
 801e1d6:	4293      	cmp	r3, r2
 801e1d8:	f200 80a8 	bhi.w	801e32c <ThreadDisplayTask+0x1730>
			{

				if( (control_register_increment_state == 1) && (control_register_decrement_state == 0) )
 801e1dc:	4b1d      	ldr	r3, [pc, #116]	; (801e254 <ThreadDisplayTask+0x1658>)
 801e1de:	781b      	ldrb	r3, [r3, #0]
 801e1e0:	b2db      	uxtb	r3, r3
 801e1e2:	2b01      	cmp	r3, #1
 801e1e4:	d118      	bne.n	801e218 <ThreadDisplayTask+0x161c>
 801e1e6:	4b1c      	ldr	r3, [pc, #112]	; (801e258 <ThreadDisplayTask+0x165c>)
 801e1e8:	781b      	ldrb	r3, [r3, #0]
 801e1ea:	b2db      	uxtb	r3, r3
 801e1ec:	2b00      	cmp	r3, #0
 801e1ee:	d113      	bne.n	801e218 <ThreadDisplayTask+0x161c>
				{
					control_register_increment_state = 0;
 801e1f0:	4b18      	ldr	r3, [pc, #96]	; (801e254 <ThreadDisplayTask+0x1658>)
 801e1f2:	2200      	movs	r2, #0
 801e1f4:	701a      	strb	r2, [r3, #0]
					control_register_decrement_state = 0;
 801e1f6:	4b18      	ldr	r3, [pc, #96]	; (801e258 <ThreadDisplayTask+0x165c>)
 801e1f8:	2200      	movs	r2, #0
 801e1fa:	701a      	strb	r2, [r3, #0]

					if(control_register_temp_number < 255)
 801e1fc:	4b17      	ldr	r3, [pc, #92]	; (801e25c <ThreadDisplayTask+0x1660>)
 801e1fe:	781b      	ldrb	r3, [r3, #0]
 801e200:	b2db      	uxtb	r3, r3
 801e202:	2bff      	cmp	r3, #255	; 0xff
 801e204:	f000 808c 	beq.w	801e320 <ThreadDisplayTask+0x1724>
					{
						control_register_temp_number++;
 801e208:	4b14      	ldr	r3, [pc, #80]	; (801e25c <ThreadDisplayTask+0x1660>)
 801e20a:	781b      	ldrb	r3, [r3, #0]
 801e20c:	b2db      	uxtb	r3, r3
 801e20e:	3301      	adds	r3, #1
 801e210:	b2da      	uxtb	r2, r3
 801e212:	4b12      	ldr	r3, [pc, #72]	; (801e25c <ThreadDisplayTask+0x1660>)
 801e214:	701a      	strb	r2, [r3, #0]
					if(control_register_temp_number < 255)
 801e216:	e083      	b.n	801e320 <ThreadDisplayTask+0x1724>
					}

				}
				else if( (control_register_increment_state == 0) && (control_register_decrement_state == 1) )
 801e218:	4b0e      	ldr	r3, [pc, #56]	; (801e254 <ThreadDisplayTask+0x1658>)
 801e21a:	781b      	ldrb	r3, [r3, #0]
 801e21c:	b2db      	uxtb	r3, r3
 801e21e:	2b00      	cmp	r3, #0
 801e220:	d126      	bne.n	801e270 <ThreadDisplayTask+0x1674>
 801e222:	4b0d      	ldr	r3, [pc, #52]	; (801e258 <ThreadDisplayTask+0x165c>)
 801e224:	781b      	ldrb	r3, [r3, #0]
 801e226:	b2db      	uxtb	r3, r3
 801e228:	2b01      	cmp	r3, #1
 801e22a:	d121      	bne.n	801e270 <ThreadDisplayTask+0x1674>
				{
					control_register_increment_state = 0;
 801e22c:	4b09      	ldr	r3, [pc, #36]	; (801e254 <ThreadDisplayTask+0x1658>)
 801e22e:	2200      	movs	r2, #0
 801e230:	701a      	strb	r2, [r3, #0]
					control_register_decrement_state = 0;
 801e232:	4b09      	ldr	r3, [pc, #36]	; (801e258 <ThreadDisplayTask+0x165c>)
 801e234:	2200      	movs	r2, #0
 801e236:	701a      	strb	r2, [r3, #0]

					if(control_register_temp_number > 0)
 801e238:	4b08      	ldr	r3, [pc, #32]	; (801e25c <ThreadDisplayTask+0x1660>)
 801e23a:	781b      	ldrb	r3, [r3, #0]
 801e23c:	b2db      	uxtb	r3, r3
 801e23e:	2b00      	cmp	r3, #0
 801e240:	d06e      	beq.n	801e320 <ThreadDisplayTask+0x1724>
					{
						control_register_temp_number--;
 801e242:	4b06      	ldr	r3, [pc, #24]	; (801e25c <ThreadDisplayTask+0x1660>)
 801e244:	781b      	ldrb	r3, [r3, #0]
 801e246:	b2db      	uxtb	r3, r3
 801e248:	3b01      	subs	r3, #1
 801e24a:	b2da      	uxtb	r2, r3
 801e24c:	4b03      	ldr	r3, [pc, #12]	; (801e25c <ThreadDisplayTask+0x1660>)
 801e24e:	701a      	strb	r2, [r3, #0]
					if(control_register_temp_number > 0)
 801e250:	e066      	b.n	801e320 <ThreadDisplayTask+0x1724>
 801e252:	bf00      	nop
 801e254:	20008014 	.word	0x20008014
 801e258:	20008015 	.word	0x20008015
 801e25c:	20008017 	.word	0x20008017
 801e260:	20008016 	.word	0x20008016
 801e264:	20008012 	.word	0x20008012
 801e268:	20009bb8 	.word	0x20009bb8
 801e26c:	20008010 	.word	0x20008010
					}

				}
				else if(control_register_save_state == 1)
 801e270:	4b31      	ldr	r3, [pc, #196]	; (801e338 <ThreadDisplayTask+0x173c>)
 801e272:	781b      	ldrb	r3, [r3, #0]
 801e274:	b2db      	uxtb	r3, r3
 801e276:	2b01      	cmp	r3, #1
 801e278:	d152      	bne.n	801e320 <ThreadDisplayTask+0x1724>
				{
					control_register_save_state = 0;
 801e27a:	4b2f      	ldr	r3, [pc, #188]	; (801e338 <ThreadDisplayTask+0x173c>)
 801e27c:	2200      	movs	r2, #0
 801e27e:	701a      	strb	r2, [r3, #0]
					register_content_menu_state = 1;
 801e280:	4b2e      	ldr	r3, [pc, #184]	; (801e33c <ThreadDisplayTask+0x1740>)
 801e282:	2201      	movs	r2, #1
 801e284:	801a      	strh	r2, [r3, #0]

					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801e286:	4b2e      	ldr	r3, [pc, #184]	; (801e340 <ThreadDisplayTask+0x1744>)
 801e288:	681b      	ldr	r3, [r3, #0]
 801e28a:	f04f 31ff 	mov.w	r1, #4294967295
 801e28e:	4618      	mov	r0, r3
 801e290:	f7fb f80a 	bl	80192a8 <osMutexWait>
					fm25v02_write( 2*(IBUTTON1_BYTE_0_REG + (((register_menu_state - A1)/8)*16) + ((register_menu_state - A1)%8) ), 0x00);
 801e294:	4b2b      	ldr	r3, [pc, #172]	; (801e344 <ThreadDisplayTask+0x1748>)
 801e296:	881b      	ldrh	r3, [r3, #0]
 801e298:	b29b      	uxth	r3, r3
 801e29a:	3b64      	subs	r3, #100	; 0x64
 801e29c:	2b00      	cmp	r3, #0
 801e29e:	da00      	bge.n	801e2a2 <ThreadDisplayTask+0x16a6>
 801e2a0:	3307      	adds	r3, #7
 801e2a2:	10db      	asrs	r3, r3, #3
 801e2a4:	f203 1331 	addw	r3, r3, #305	; 0x131
 801e2a8:	011a      	lsls	r2, r3, #4
 801e2aa:	4b26      	ldr	r3, [pc, #152]	; (801e344 <ThreadDisplayTask+0x1748>)
 801e2ac:	881b      	ldrh	r3, [r3, #0]
 801e2ae:	b29b      	uxth	r3, r3
 801e2b0:	3b64      	subs	r3, #100	; 0x64
 801e2b2:	4259      	negs	r1, r3
 801e2b4:	f003 0307 	and.w	r3, r3, #7
 801e2b8:	f001 0107 	and.w	r1, r1, #7
 801e2bc:	bf58      	it	pl
 801e2be:	424b      	negpl	r3, r1
 801e2c0:	4413      	add	r3, r2
 801e2c2:	b29b      	uxth	r3, r3
 801e2c4:	005b      	lsls	r3, r3, #1
 801e2c6:	b29b      	uxth	r3, r3
 801e2c8:	2100      	movs	r1, #0
 801e2ca:	4618      	mov	r0, r3
 801e2cc:	f00c fbde 	bl	802aa8c <fm25v02_write>
					fm25v02_write( 2*(IBUTTON1_BYTE_0_REG + (((register_menu_state - A1)/8)*16) + ((register_menu_state - A1)%8) )+1, control_register_temp_number );
 801e2d0:	4b1c      	ldr	r3, [pc, #112]	; (801e344 <ThreadDisplayTask+0x1748>)
 801e2d2:	881b      	ldrh	r3, [r3, #0]
 801e2d4:	b29b      	uxth	r3, r3
 801e2d6:	3b64      	subs	r3, #100	; 0x64
 801e2d8:	2b00      	cmp	r3, #0
 801e2da:	da00      	bge.n	801e2de <ThreadDisplayTask+0x16e2>
 801e2dc:	3307      	adds	r3, #7
 801e2de:	10db      	asrs	r3, r3, #3
 801e2e0:	f203 1331 	addw	r3, r3, #305	; 0x131
 801e2e4:	011a      	lsls	r2, r3, #4
 801e2e6:	4b17      	ldr	r3, [pc, #92]	; (801e344 <ThreadDisplayTask+0x1748>)
 801e2e8:	881b      	ldrh	r3, [r3, #0]
 801e2ea:	b29b      	uxth	r3, r3
 801e2ec:	3b64      	subs	r3, #100	; 0x64
 801e2ee:	4259      	negs	r1, r3
 801e2f0:	f003 0307 	and.w	r3, r3, #7
 801e2f4:	f001 0107 	and.w	r1, r1, #7
 801e2f8:	bf58      	it	pl
 801e2fa:	424b      	negpl	r3, r1
 801e2fc:	4413      	add	r3, r2
 801e2fe:	b29b      	uxth	r3, r3
 801e300:	005b      	lsls	r3, r3, #1
 801e302:	b29b      	uxth	r3, r3
 801e304:	3301      	adds	r3, #1
 801e306:	b29b      	uxth	r3, r3
 801e308:	4a0f      	ldr	r2, [pc, #60]	; (801e348 <ThreadDisplayTask+0x174c>)
 801e30a:	7812      	ldrb	r2, [r2, #0]
 801e30c:	b2d2      	uxtb	r2, r2
 801e30e:	4611      	mov	r1, r2
 801e310:	4618      	mov	r0, r3
 801e312:	f00c fbbb 	bl	802aa8c <fm25v02_write>
					osMutexRelease(Fm25v02MutexHandle);
 801e316:	4b0a      	ldr	r3, [pc, #40]	; (801e340 <ThreadDisplayTask+0x1744>)
 801e318:	681b      	ldr	r3, [r3, #0]
 801e31a:	4618      	mov	r0, r3
 801e31c:	f7fb f812 	bl	8019344 <osMutexRelease>
					//control_registers.arming_timeleft_reg = control_register_temp_number;


				}

				number_change_display( control_register_temp_number );
 801e320:	4b09      	ldr	r3, [pc, #36]	; (801e348 <ThreadDisplayTask+0x174c>)
 801e322:	781b      	ldrb	r3, [r3, #0]
 801e324:	b2db      	uxtb	r3, r3
 801e326:	4618      	mov	r0, r3
 801e328:	f00c f8d6 	bl	802a4d8 <number_change_display>
		}




		osDelay(100); // ждем 100 милисекунд
 801e32c:	2064      	movs	r0, #100	; 0x64
 801e32e:	f7fa feda 	bl	80190e6 <osDelay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 801e332:	f7fe bc7d 	b.w	801cc30 <ThreadDisplayTask+0x34>
 801e336:	bf00      	nop
 801e338:	20008016 	.word	0x20008016
 801e33c:	20008012 	.word	0x20008012
 801e340:	20009bb8 	.word	0x20009bb8
 801e344:	20008010 	.word	0x20008010
 801e348:	20008017 	.word	0x20008017

0801e34c <ThreadEventWriteTask>:
extern status_register_struct status_registers;
extern control_register_struct control_registers;


void ThreadEventWriteTask(void const * argument)
{
 801e34c:	b580      	push	{r7, lr}
 801e34e:	b08c      	sub	sp, #48	; 0x30
 801e350:	af00      	add	r7, sp, #0
 801e352:	6078      	str	r0, [r7, #4]
	uint8_t temp_data[30]; // буфер для записи событий
	uint16_t address_event_temp; // переменная для записи адреса последнего записанного события
	uint8_t read_temp; // временная переменная для чтения из памяти

	osMutexWait(Fm25v02MutexHandle, osWaitForever); // выставляем адрес начала записи событий по умолчанию
 801e354:	4bb4      	ldr	r3, [pc, #720]	; (801e628 <ThreadEventWriteTask+0x2dc>)
 801e356:	681b      	ldr	r3, [r3, #0]
 801e358:	f04f 31ff 	mov.w	r1, #4294967295
 801e35c:	4618      	mov	r0, r3
 801e35e:	f7fa ffa3 	bl	80192a8 <osMutexWait>
	fm25v02_write(2*ADDRESS_PROCESSED_EVENT_H_REG, 0x00);
 801e362:	2100      	movs	r1, #0
 801e364:	f242 0018 	movw	r0, #8216	; 0x2018
 801e368:	f00c fb90 	bl	802aa8c <fm25v02_write>
	fm25v02_write(2*ADDRESS_PROCESSED_EVENT_H_REG+1, 0x20);
 801e36c:	2120      	movs	r1, #32
 801e36e:	f242 0019 	movw	r0, #8217	; 0x2019
 801e372:	f00c fb8b 	bl	802aa8c <fm25v02_write>
	fm25v02_write(2*ADDRESS_PROCESSED_EVENT_L_REG, 0x00);
 801e376:	2100      	movs	r1, #0
 801e378:	f242 001a 	movw	r0, #8218	; 0x201a
 801e37c:	f00c fb86 	bl	802aa8c <fm25v02_write>
	fm25v02_write(2*ADDRESS_PROCESSED_EVENT_L_REG+1, 0x00);
 801e380:	2100      	movs	r1, #0
 801e382:	f242 001b 	movw	r0, #8219	; 0x201b
 801e386:	f00c fb81 	bl	802aa8c <fm25v02_write>
	osMutexRelease(Fm25v02MutexHandle);
 801e38a:	4ba7      	ldr	r3, [pc, #668]	; (801e628 <ThreadEventWriteTask+0x2dc>)
 801e38c:	681b      	ldr	r3, [r3, #0]
 801e38e:	4618      	mov	r0, r3
 801e390:	f7fa ffd8 	bl	8019344 <osMutexRelease>

	osMutexWait(Fm25v02MutexHandle, osWaitForever); // вычитывавем из памяти значение адреса последнего события
 801e394:	4ba4      	ldr	r3, [pc, #656]	; (801e628 <ThreadEventWriteTask+0x2dc>)
 801e396:	681b      	ldr	r3, [r3, #0]
 801e398:	f04f 31ff 	mov.w	r1, #4294967295
 801e39c:	4618      	mov	r0, r3
 801e39e:	f7fa ff83 	bl	80192a8 <osMutexWait>
	fm25v02_read(2*ADDRESS_LAST_EVENT_H_REG+1, &read_temp);
 801e3a2:	f107 030b 	add.w	r3, r7, #11
 801e3a6:	4619      	mov	r1, r3
 801e3a8:	f242 001d 	movw	r0, #8221	; 0x201d
 801e3ac:	f00c fb34 	bl	802aa18 <fm25v02_read>
	status_registers.address_last_event_h_reg = read_temp;
 801e3b0:	7afb      	ldrb	r3, [r7, #11]
 801e3b2:	b29a      	uxth	r2, r3
 801e3b4:	4b9d      	ldr	r3, [pc, #628]	; (801e62c <ThreadEventWriteTask+0x2e0>)
 801e3b6:	839a      	strh	r2, [r3, #28]
	fm25v02_read(2*ADDRESS_LAST_EVENT_L_REG+1, &read_temp);
 801e3b8:	f107 030b 	add.w	r3, r7, #11
 801e3bc:	4619      	mov	r1, r3
 801e3be:	f242 001f 	movw	r0, #8223	; 0x201f
 801e3c2:	f00c fb29 	bl	802aa18 <fm25v02_read>
	status_registers.address_last_event_l_reg = read_temp;
 801e3c6:	7afb      	ldrb	r3, [r7, #11]
 801e3c8:	b29a      	uxth	r2, r3
 801e3ca:	4b98      	ldr	r3, [pc, #608]	; (801e62c <ThreadEventWriteTask+0x2e0>)
 801e3cc:	83da      	strh	r2, [r3, #30]
	osMutexRelease(Fm25v02MutexHandle);
 801e3ce:	4b96      	ldr	r3, [pc, #600]	; (801e628 <ThreadEventWriteTask+0x2dc>)
 801e3d0:	681b      	ldr	r3, [r3, #0]
 801e3d2:	4618      	mov	r0, r3
 801e3d4:	f7fa ffb6 	bl	8019344 <osMutexRelease>

	address_event_temp = (((status_registers.address_last_event_h_reg)<<8)|(status_registers.address_last_event_l_reg&0x00FF)); // высчитываем адрес последнего события
 801e3d8:	4b94      	ldr	r3, [pc, #592]	; (801e62c <ThreadEventWriteTask+0x2e0>)
 801e3da:	8b9b      	ldrh	r3, [r3, #28]
 801e3dc:	021b      	lsls	r3, r3, #8
 801e3de:	b21a      	sxth	r2, r3
 801e3e0:	4b92      	ldr	r3, [pc, #584]	; (801e62c <ThreadEventWriteTask+0x2e0>)
 801e3e2:	8bdb      	ldrh	r3, [r3, #30]
 801e3e4:	b21b      	sxth	r3, r3
 801e3e6:	b2db      	uxtb	r3, r3
 801e3e8:	b21b      	sxth	r3, r3
 801e3ea:	4313      	orrs	r3, r2
 801e3ec:	b21b      	sxth	r3, r3
 801e3ee:	85bb      	strh	r3, [r7, #44]	; 0x2c

	if( (address_event_temp < 0x2000) || (address_event_temp > 0x7FFF) ) // проверяем, входит ли значение последнего события в диапазон памяти событий, если нет, то выставляем по умолчанию
 801e3f0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801e3f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801e3f6:	d303      	bcc.n	801e400 <ThreadEventWriteTask+0xb4>
 801e3f8:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 801e3fc:	2b00      	cmp	r3, #0
 801e3fe:	da1f      	bge.n	801e440 <ThreadEventWriteTask+0xf4>
	{
		osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801e400:	4b89      	ldr	r3, [pc, #548]	; (801e628 <ThreadEventWriteTask+0x2dc>)
 801e402:	681b      	ldr	r3, [r3, #0]
 801e404:	f04f 31ff 	mov.w	r1, #4294967295
 801e408:	4618      	mov	r0, r3
 801e40a:	f7fa ff4d 	bl	80192a8 <osMutexWait>
		fm25v02_write(2*ADDRESS_LAST_EVENT_H_REG, 0x00);
 801e40e:	2100      	movs	r1, #0
 801e410:	f242 001c 	movw	r0, #8220	; 0x201c
 801e414:	f00c fb3a 	bl	802aa8c <fm25v02_write>
		fm25v02_write(2*ADDRESS_LAST_EVENT_H_REG+1, 0x20);
 801e418:	2120      	movs	r1, #32
 801e41a:	f242 001d 	movw	r0, #8221	; 0x201d
 801e41e:	f00c fb35 	bl	802aa8c <fm25v02_write>
		fm25v02_write(2*ADDRESS_LAST_EVENT_L_REG, 0x00);
 801e422:	2100      	movs	r1, #0
 801e424:	f242 001e 	movw	r0, #8222	; 0x201e
 801e428:	f00c fb30 	bl	802aa8c <fm25v02_write>
		fm25v02_write(2*ADDRESS_LAST_EVENT_L_REG+1, 0x00);
 801e42c:	2100      	movs	r1, #0
 801e42e:	f242 001f 	movw	r0, #8223	; 0x201f
 801e432:	f00c fb2b 	bl	802aa8c <fm25v02_write>
		osMutexRelease(Fm25v02MutexHandle);
 801e436:	4b7c      	ldr	r3, [pc, #496]	; (801e628 <ThreadEventWriteTask+0x2dc>)
 801e438:	681b      	ldr	r3, [r3, #0]
 801e43a:	4618      	mov	r0, r3
 801e43c:	f7fa ff82 	bl	8019344 <osMutexRelease>



	for(;;)
	{
		osThreadSuspend(EventWriteTaskHandle);
 801e440:	4b7b      	ldr	r3, [pc, #492]	; (801e630 <ThreadEventWriteTask+0x2e4>)
 801e442:	681b      	ldr	r3, [r3, #0]
 801e444:	4618      	mov	r0, r3
 801e446:	f7fb f945 	bl	80196d4 <osThreadSuspend>

		osMutexWait(Fm25v02MutexHandle, osWaitForever); // вычитывавем из памяти значение последнего события
 801e44a:	4b77      	ldr	r3, [pc, #476]	; (801e628 <ThreadEventWriteTask+0x2dc>)
 801e44c:	681b      	ldr	r3, [r3, #0]
 801e44e:	f04f 31ff 	mov.w	r1, #4294967295
 801e452:	4618      	mov	r0, r3
 801e454:	f7fa ff28 	bl	80192a8 <osMutexWait>
		fm25v02_read(2*ADDRESS_LAST_EVENT_H_REG+1, &read_temp);
 801e458:	f107 030b 	add.w	r3, r7, #11
 801e45c:	4619      	mov	r1, r3
 801e45e:	f242 001d 	movw	r0, #8221	; 0x201d
 801e462:	f00c fad9 	bl	802aa18 <fm25v02_read>
		status_registers.address_last_event_h_reg = read_temp;
 801e466:	7afb      	ldrb	r3, [r7, #11]
 801e468:	b29a      	uxth	r2, r3
 801e46a:	4b70      	ldr	r3, [pc, #448]	; (801e62c <ThreadEventWriteTask+0x2e0>)
 801e46c:	839a      	strh	r2, [r3, #28]
		fm25v02_read(2*ADDRESS_LAST_EVENT_L_REG+1, &read_temp);
 801e46e:	f107 030b 	add.w	r3, r7, #11
 801e472:	4619      	mov	r1, r3
 801e474:	f242 001f 	movw	r0, #8223	; 0x201f
 801e478:	f00c face 	bl	802aa18 <fm25v02_read>
		status_registers.address_last_event_l_reg = read_temp;
 801e47c:	7afb      	ldrb	r3, [r7, #11]
 801e47e:	b29a      	uxth	r2, r3
 801e480:	4b6a      	ldr	r3, [pc, #424]	; (801e62c <ThreadEventWriteTask+0x2e0>)
 801e482:	83da      	strh	r2, [r3, #30]
		osMutexRelease(Fm25v02MutexHandle);
 801e484:	4b68      	ldr	r3, [pc, #416]	; (801e628 <ThreadEventWriteTask+0x2dc>)
 801e486:	681b      	ldr	r3, [r3, #0]
 801e488:	4618      	mov	r0, r3
 801e48a:	f7fa ff5b 	bl	8019344 <osMutexRelease>

		address_event_temp = (((status_registers.address_last_event_h_reg)<<8)|(status_registers.address_last_event_l_reg&0x00FF)); // считаем значение адреса последнего события
 801e48e:	4b67      	ldr	r3, [pc, #412]	; (801e62c <ThreadEventWriteTask+0x2e0>)
 801e490:	8b9b      	ldrh	r3, [r3, #28]
 801e492:	021b      	lsls	r3, r3, #8
 801e494:	b21a      	sxth	r2, r3
 801e496:	4b65      	ldr	r3, [pc, #404]	; (801e62c <ThreadEventWriteTask+0x2e0>)
 801e498:	8bdb      	ldrh	r3, [r3, #30]
 801e49a:	b21b      	sxth	r3, r3
 801e49c:	b2db      	uxtb	r3, r3
 801e49e:	b21b      	sxth	r3, r3
 801e4a0:	4313      	orrs	r3, r2
 801e4a2:	b21b      	sxth	r3, r3
 801e4a4:	85bb      	strh	r3, [r7, #44]	; 0x2c

		if( (address_event_temp >= 0x2000) && (address_event_temp <= 0x7FFF) ) // проверяем, чтобы значение адреса события лежало в области памяти ведения протокола событий
 801e4a6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801e4a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801e4ac:	f0c0 8142 	bcc.w	801e734 <ThreadEventWriteTask+0x3e8>
 801e4b0:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 801e4b4:	2b00      	cmp	r3, #0
 801e4b6:	f2c0 813d 	blt.w	801e734 <ThreadEventWriteTask+0x3e8>
		{

			osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801e4ba:	4b5b      	ldr	r3, [pc, #364]	; (801e628 <ThreadEventWriteTask+0x2dc>)
 801e4bc:	681b      	ldr	r3, [r3, #0]
 801e4be:	f04f 31ff 	mov.w	r1, #4294967295
 801e4c2:	4618      	mov	r0, r3
 801e4c4:	f7fa fef0 	bl	80192a8 <osMutexWait>

			fm25v02_read(2*TIME_CURRENT_YEAR_REG+1, &temp_data[0]);
 801e4c8:	f107 030c 	add.w	r3, r7, #12
 801e4cc:	4619      	mov	r1, r3
 801e4ce:	f242 000b 	movw	r0, #8203	; 0x200b
 801e4d2:	f00c faa1 	bl	802aa18 <fm25v02_read>
			fm25v02_read(2*TIME_CURRENT_MONTH_REG+1, &temp_data[1]);
 801e4d6:	f107 030c 	add.w	r3, r7, #12
 801e4da:	3301      	adds	r3, #1
 801e4dc:	4619      	mov	r1, r3
 801e4de:	f242 000d 	movw	r0, #8205	; 0x200d
 801e4e2:	f00c fa99 	bl	802aa18 <fm25v02_read>
			fm25v02_read(2*TIME_CURRENT_DAY_REG+1, &temp_data[2]);
 801e4e6:	f107 030c 	add.w	r3, r7, #12
 801e4ea:	3302      	adds	r3, #2
 801e4ec:	4619      	mov	r1, r3
 801e4ee:	f242 000f 	movw	r0, #8207	; 0x200f
 801e4f2:	f00c fa91 	bl	802aa18 <fm25v02_read>
			fm25v02_read(2*TIME_CURRENT_HOUR_REG+1, &temp_data[3]);
 801e4f6:	f107 030c 	add.w	r3, r7, #12
 801e4fa:	3303      	adds	r3, #3
 801e4fc:	4619      	mov	r1, r3
 801e4fe:	f242 0011 	movw	r0, #8209	; 0x2011
 801e502:	f00c fa89 	bl	802aa18 <fm25v02_read>
			fm25v02_read(2*TIME_CURRENT_MINUTE_REG+1, &temp_data[4]);
 801e506:	f107 030c 	add.w	r3, r7, #12
 801e50a:	3304      	adds	r3, #4
 801e50c:	4619      	mov	r1, r3
 801e50e:	f242 0013 	movw	r0, #8211	; 0x2013
 801e512:	f00c fa81 	bl	802aa18 <fm25v02_read>
			fm25v02_read(2*TIME_CURRENT_SECOND_REG+1, &temp_data[5]);
 801e516:	f107 030c 	add.w	r3, r7, #12
 801e51a:	3305      	adds	r3, #5
 801e51c:	4619      	mov	r1, r3
 801e51e:	f242 0015 	movw	r0, #8213	; 0x2015
 801e522:	f00c fa79 	bl	802aa18 <fm25v02_read>
			fm25v02_read(2*SYSTEM_STATUS_REG+1, &temp_data[6]);
 801e526:	f107 030c 	add.w	r3, r7, #12
 801e52a:	3306      	adds	r3, #6
 801e52c:	4619      	mov	r1, r3
 801e52e:	f242 0021 	movw	r0, #8225	; 0x2021
 801e532:	f00c fa71 	bl	802aa18 <fm25v02_read>
			fm25v02_read(2*SECURITY_STATUS_REG+1, &temp_data[7]);
 801e536:	f107 030c 	add.w	r3, r7, #12
 801e53a:	3307      	adds	r3, #7
 801e53c:	4619      	mov	r1, r3
 801e53e:	f242 0003 	movw	r0, #8195	; 0x2003
 801e542:	f00c fa69 	bl	802aa18 <fm25v02_read>
			fm25v02_read(2*STATUS_LOOP_REG+1, &temp_data[8]);
 801e546:	f107 030c 	add.w	r3, r7, #12
 801e54a:	3308      	adds	r3, #8
 801e54c:	4619      	mov	r1, r3
 801e54e:	f242 0005 	movw	r0, #8197	; 0x2005
 801e552:	f00c fa61 	bl	802aa18 <fm25v02_read>
			fm25v02_read(2*ALARM_LOOP_REG+1, &temp_data[9]);
 801e556:	f107 030c 	add.w	r3, r7, #12
 801e55a:	3309      	adds	r3, #9
 801e55c:	4619      	mov	r1, r3
 801e55e:	f242 0009 	movw	r0, #8201	; 0x2009
 801e562:	f00c fa59 	bl	802aa18 <fm25v02_read>
			fm25v02_read(2*ERROR_LOOP_REG+1, &temp_data[10]);
 801e566:	f107 030c 	add.w	r3, r7, #12
 801e56a:	330a      	adds	r3, #10
 801e56c:	4619      	mov	r1, r3
 801e56e:	f242 0007 	movw	r0, #8199	; 0x2007
 801e572:	f00c fa51 	bl	802aa18 <fm25v02_read>
			fm25v02_read(2*IBUTTON_COMPLETE_0_REG+1, &temp_data[11]);
 801e576:	f107 030c 	add.w	r3, r7, #12
 801e57a:	330b      	adds	r3, #11
 801e57c:	4619      	mov	r1, r3
 801e57e:	f242 002b 	movw	r0, #8235	; 0x202b
 801e582:	f00c fa49 	bl	802aa18 <fm25v02_read>
			fm25v02_read(2*IBUTTON_COMPLETE_1_REG+1, &temp_data[12]);
 801e586:	f107 030c 	add.w	r3, r7, #12
 801e58a:	330c      	adds	r3, #12
 801e58c:	4619      	mov	r1, r3
 801e58e:	f242 002d 	movw	r0, #8237	; 0x202d
 801e592:	f00c fa41 	bl	802aa18 <fm25v02_read>
			fm25v02_read(2*IBUTTON_COMPLETE_2_REG+1, &temp_data[13]);
 801e596:	f107 030c 	add.w	r3, r7, #12
 801e59a:	330d      	adds	r3, #13
 801e59c:	4619      	mov	r1, r3
 801e59e:	f242 002f 	movw	r0, #8239	; 0x202f
 801e5a2:	f00c fa39 	bl	802aa18 <fm25v02_read>
			fm25v02_read(2*IBUTTON_COMPLETE_3_REG+1, &temp_data[14]);
 801e5a6:	f107 030c 	add.w	r3, r7, #12
 801e5aa:	330e      	adds	r3, #14
 801e5ac:	4619      	mov	r1, r3
 801e5ae:	f242 0031 	movw	r0, #8241	; 0x2031
 801e5b2:	f00c fa31 	bl	802aa18 <fm25v02_read>
			fm25v02_read(2*IBUTTON_COMPLETE_4_REG+1, &temp_data[15]);
 801e5b6:	f107 030c 	add.w	r3, r7, #12
 801e5ba:	330f      	adds	r3, #15
 801e5bc:	4619      	mov	r1, r3
 801e5be:	f242 0033 	movw	r0, #8243	; 0x2033
 801e5c2:	f00c fa29 	bl	802aa18 <fm25v02_read>
			fm25v02_read(2*IBUTTON_COMPLETE_5_REG+1, &temp_data[16]);
 801e5c6:	f107 030c 	add.w	r3, r7, #12
 801e5ca:	3310      	adds	r3, #16
 801e5cc:	4619      	mov	r1, r3
 801e5ce:	f242 0035 	movw	r0, #8245	; 0x2035
 801e5d2:	f00c fa21 	bl	802aa18 <fm25v02_read>
			fm25v02_read(2*IBUTTON_COMPLETE_6_REG+1, &temp_data[17]);
 801e5d6:	f107 030c 	add.w	r3, r7, #12
 801e5da:	3311      	adds	r3, #17
 801e5dc:	4619      	mov	r1, r3
 801e5de:	f242 0037 	movw	r0, #8247	; 0x2037
 801e5e2:	f00c fa19 	bl	802aa18 <fm25v02_read>
			fm25v02_read(2*IBUTTON_COMPLETE_7_REG+1, &temp_data[18]);
 801e5e6:	f107 030c 	add.w	r3, r7, #12
 801e5ea:	3312      	adds	r3, #18
 801e5ec:	4619      	mov	r1, r3
 801e5ee:	f242 0039 	movw	r0, #8249	; 0x2039
 801e5f2:	f00c fa11 	bl	802aa18 <fm25v02_read>
			fm25v02_read(2*POWER_ON_REG+1, &temp_data[19]);
 801e5f6:	f107 030c 	add.w	r3, r7, #12
 801e5fa:	3313      	adds	r3, #19
 801e5fc:	4619      	mov	r1, r3
 801e5fe:	f242 0023 	movw	r0, #8227	; 0x2023
 801e602:	f00c fa09 	bl	802aa18 <fm25v02_read>

			osMutexRelease(Fm25v02MutexHandle);
 801e606:	4b08      	ldr	r3, [pc, #32]	; (801e628 <ThreadEventWriteTask+0x2dc>)
 801e608:	681b      	ldr	r3, [r3, #0]
 801e60a:	4618      	mov	r0, r3
 801e60c:	f7fa fe9a 	bl	8019344 <osMutexRelease>

			osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801e610:	4b05      	ldr	r3, [pc, #20]	; (801e628 <ThreadEventWriteTask+0x2dc>)
 801e612:	681b      	ldr	r3, [r3, #0]
 801e614:	f04f 31ff 	mov.w	r1, #4294967295
 801e618:	4618      	mov	r0, r3
 801e61a:	f7fa fe45 	bl	80192a8 <osMutexWait>
			//fm25v02_fast_write(address_event_temp, &temp_data[0], 30); // переписываем текущие значения переменных для события в память

			for(uint8_t i=0; i<30; i++) // переписываем текущие значения переменных для события в память
 801e61e:	2300      	movs	r3, #0
 801e620:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801e624:	e02a      	b.n	801e67c <ThreadEventWriteTask+0x330>
 801e626:	bf00      	nop
 801e628:	20009bb8 	.word	0x20009bb8
 801e62c:	2000af40 	.word	0x2000af40
 801e630:	20009718 	.word	0x20009718
			{
				fm25v02_write(2*(address_event_temp+i), 0x00);
 801e634:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 801e636:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801e63a:	4413      	add	r3, r2
 801e63c:	b29b      	uxth	r3, r3
 801e63e:	005b      	lsls	r3, r3, #1
 801e640:	b29b      	uxth	r3, r3
 801e642:	2100      	movs	r1, #0
 801e644:	4618      	mov	r0, r3
 801e646:	f00c fa21 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*(address_event_temp+i)+1, temp_data[i]);
 801e64a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 801e64c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801e650:	4413      	add	r3, r2
 801e652:	b29b      	uxth	r3, r3
 801e654:	005b      	lsls	r3, r3, #1
 801e656:	b29b      	uxth	r3, r3
 801e658:	3301      	adds	r3, #1
 801e65a:	b29a      	uxth	r2, r3
 801e65c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801e660:	f107 0130 	add.w	r1, r7, #48	; 0x30
 801e664:	440b      	add	r3, r1
 801e666:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 801e66a:	4619      	mov	r1, r3
 801e66c:	4610      	mov	r0, r2
 801e66e:	f00c fa0d 	bl	802aa8c <fm25v02_write>
			for(uint8_t i=0; i<30; i++) // переписываем текущие значения переменных для события в память
 801e672:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801e676:	3301      	adds	r3, #1
 801e678:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801e67c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801e680:	2b1d      	cmp	r3, #29
 801e682:	d9d7      	bls.n	801e634 <ThreadEventWriteTask+0x2e8>
			}

			osMutexRelease(Fm25v02MutexHandle);
 801e684:	4b2d      	ldr	r3, [pc, #180]	; (801e73c <ThreadEventWriteTask+0x3f0>)
 801e686:	681b      	ldr	r3, [r3, #0]
 801e688:	4618      	mov	r0, r3
 801e68a:	f7fa fe5b 	bl	8019344 <osMutexRelease>

			address_event_temp = address_event_temp + 30;
 801e68e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801e690:	331e      	adds	r3, #30
 801e692:	85bb      	strh	r3, [r7, #44]	; 0x2c

			if( address_event_temp > 0x7FFF )
 801e694:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 801e698:	2b00      	cmp	r3, #0
 801e69a:	da23      	bge.n	801e6e4 <ThreadEventWriteTask+0x398>
			{
				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801e69c:	4b27      	ldr	r3, [pc, #156]	; (801e73c <ThreadEventWriteTask+0x3f0>)
 801e69e:	681b      	ldr	r3, [r3, #0]
 801e6a0:	f04f 31ff 	mov.w	r1, #4294967295
 801e6a4:	4618      	mov	r0, r3
 801e6a6:	f7fa fdff 	bl	80192a8 <osMutexWait>

				address_event_temp = 0x2000;
 801e6aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801e6ae:	85bb      	strh	r3, [r7, #44]	; 0x2c

				read_temp = (uint8_t)((address_event_temp>>8)&0x00FF);
 801e6b0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801e6b2:	0a1b      	lsrs	r3, r3, #8
 801e6b4:	b29b      	uxth	r3, r3
 801e6b6:	b2db      	uxtb	r3, r3
 801e6b8:	72fb      	strb	r3, [r7, #11]
				fm25v02_write(2*ADDRESS_LAST_EVENT_H_REG+1, read_temp);
 801e6ba:	7afb      	ldrb	r3, [r7, #11]
 801e6bc:	4619      	mov	r1, r3
 801e6be:	f242 001d 	movw	r0, #8221	; 0x201d
 801e6c2:	f00c f9e3 	bl	802aa8c <fm25v02_write>
				read_temp = (uint8_t)(address_event_temp&0x00FF);
 801e6c6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801e6c8:	b2db      	uxtb	r3, r3
 801e6ca:	72fb      	strb	r3, [r7, #11]
				fm25v02_write(2*ADDRESS_LAST_EVENT_L_REG+1, read_temp);
 801e6cc:	7afb      	ldrb	r3, [r7, #11]
 801e6ce:	4619      	mov	r1, r3
 801e6d0:	f242 001f 	movw	r0, #8223	; 0x201f
 801e6d4:	f00c f9da 	bl	802aa8c <fm25v02_write>

				osMutexRelease(Fm25v02MutexHandle);
 801e6d8:	4b18      	ldr	r3, [pc, #96]	; (801e73c <ThreadEventWriteTask+0x3f0>)
 801e6da:	681b      	ldr	r3, [r3, #0]
 801e6dc:	4618      	mov	r0, r3
 801e6de:	f7fa fe31 	bl	8019344 <osMutexRelease>
 801e6e2:	e027      	b.n	801e734 <ThreadEventWriteTask+0x3e8>

			}
			else if( (address_event_temp >= 0x2000) && (address_event_temp <= 0x7FFF) )
 801e6e4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801e6e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801e6ea:	d323      	bcc.n	801e734 <ThreadEventWriteTask+0x3e8>
 801e6ec:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 801e6f0:	2b00      	cmp	r3, #0
 801e6f2:	db1f      	blt.n	801e734 <ThreadEventWriteTask+0x3e8>
			{
				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801e6f4:	4b11      	ldr	r3, [pc, #68]	; (801e73c <ThreadEventWriteTask+0x3f0>)
 801e6f6:	681b      	ldr	r3, [r3, #0]
 801e6f8:	f04f 31ff 	mov.w	r1, #4294967295
 801e6fc:	4618      	mov	r0, r3
 801e6fe:	f7fa fdd3 	bl	80192a8 <osMutexWait>

				read_temp = (uint8_t)((address_event_temp>>8)&0x00FF);
 801e702:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801e704:	0a1b      	lsrs	r3, r3, #8
 801e706:	b29b      	uxth	r3, r3
 801e708:	b2db      	uxtb	r3, r3
 801e70a:	72fb      	strb	r3, [r7, #11]
				fm25v02_write(2*ADDRESS_LAST_EVENT_H_REG+1, read_temp);
 801e70c:	7afb      	ldrb	r3, [r7, #11]
 801e70e:	4619      	mov	r1, r3
 801e710:	f242 001d 	movw	r0, #8221	; 0x201d
 801e714:	f00c f9ba 	bl	802aa8c <fm25v02_write>
				read_temp = (uint8_t)(address_event_temp&0x00FF);
 801e718:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801e71a:	b2db      	uxtb	r3, r3
 801e71c:	72fb      	strb	r3, [r7, #11]
				fm25v02_write(2*ADDRESS_LAST_EVENT_L_REG+1, read_temp);
 801e71e:	7afb      	ldrb	r3, [r7, #11]
 801e720:	4619      	mov	r1, r3
 801e722:	f242 001f 	movw	r0, #8223	; 0x201f
 801e726:	f00c f9b1 	bl	802aa8c <fm25v02_write>

				osMutexRelease(Fm25v02MutexHandle);
 801e72a:	4b04      	ldr	r3, [pc, #16]	; (801e73c <ThreadEventWriteTask+0x3f0>)
 801e72c:	681b      	ldr	r3, [r3, #0]
 801e72e:	4618      	mov	r0, r3
 801e730:	f7fa fe08 	bl	8019344 <osMutexRelease>
		else // здесь должно быть то, что нужно сделать если значение адреса не вошло в область памяти ведения протокола событий, например можно выставить соответствующий флаг и сделать запрос на сервер
		{

		}

		osDelay(1);
 801e734:	2001      	movs	r0, #1
 801e736:	f7fa fcd6 	bl	80190e6 <osDelay>
		osThreadSuspend(EventWriteTaskHandle);
 801e73a:	e681      	b.n	801e440 <ThreadEventWriteTask+0xf4>
 801e73c:	20009bb8 	.word	0x20009bb8

0801e740 <ThreadGetCurrentTask>:
volatile uint8_t phase_b_on_state = 0;
volatile uint8_t phase_c_on_state = 0;


void ThreadGetCurrentTask(void const * argument)
{
 801e740:	b580      	push	{r7, lr}
 801e742:	b090      	sub	sp, #64	; 0x40
 801e744:	af00      	add	r7, sp, #0
 801e746:	6078      	str	r0, [r7, #4]
	volatile uint16_t overcurrent_phase_a_state = 0;
 801e748:	2300      	movs	r3, #0
 801e74a:	867b      	strh	r3, [r7, #50]	; 0x32
	volatile uint16_t overcurrent_phase_b_state = 0;
 801e74c:	2300      	movs	r3, #0
 801e74e:	863b      	strh	r3, [r7, #48]	; 0x30
	volatile uint16_t overcurrent_phase_c_state = 0;
 801e750:	2300      	movs	r3, #0
 801e752:	85fb      	strh	r3, [r7, #46]	; 0x2e
	volatile uint8_t temp_h;
	volatile uint8_t temp_l;

	volatile uint8_t phase_temp;

	volatile uint8_t phase_a1_off_state=0;
 801e754:	2300      	movs	r3, #0
 801e756:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	volatile uint8_t phase_a2_off_state=0;
 801e75a:	2300      	movs	r3, #0
 801e75c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	volatile uint8_t phase_b1_off_state=0;
 801e760:	2300      	movs	r3, #0
 801e762:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	volatile uint8_t phase_b2_off_state=0;
 801e766:	2300      	movs	r3, #0
 801e768:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	volatile uint8_t phase_c1_off_state=0;
 801e76c:	2300      	movs	r3, #0
 801e76e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	volatile uint8_t phase_c2_off_state=0;
 801e772:	2300      	movs	r3, #0
 801e774:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	volatile uint8_t cascade_off_state=0;
 801e778:	2300      	movs	r3, #0
 801e77a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	volatile uint8_t door_off_state=0;
 801e77e:	2300      	movs	r3, #0
 801e780:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	volatile uint8_t phase_a1_on_state=0;
 801e784:	2300      	movs	r3, #0
 801e786:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	volatile uint8_t phase_a2_on_state=0;
 801e78a:	2300      	movs	r3, #0
 801e78c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	volatile uint8_t phase_b1_on_state=0;
 801e790:	2300      	movs	r3, #0
 801e792:	f887 3020 	strb.w	r3, [r7, #32]
	volatile uint8_t phase_b2_on_state=0;
 801e796:	2300      	movs	r3, #0
 801e798:	77fb      	strb	r3, [r7, #31]
	volatile uint8_t phase_c1_on_state=0;
 801e79a:	2300      	movs	r3, #0
 801e79c:	77bb      	strb	r3, [r7, #30]
	volatile uint8_t phase_c2_on_state=0;
 801e79e:	2300      	movs	r3, #0
 801e7a0:	777b      	strb	r3, [r7, #29]
	volatile uint8_t cascade_on_state=0;
 801e7a2:	2300      	movs	r3, #0
 801e7a4:	773b      	strb	r3, [r7, #28]
	volatile uint8_t door_on_state=0;
 801e7a6:	2300      	movs	r3, #0
 801e7a8:	76fb      	strb	r3, [r7, #27]

	volatile uint16_t phase_a1_alarm_state=0;
 801e7aa:	2300      	movs	r3, #0
 801e7ac:	833b      	strh	r3, [r7, #24]
	volatile uint16_t phase_a2_alarm_state=0;
 801e7ae:	2300      	movs	r3, #0
 801e7b0:	82fb      	strh	r3, [r7, #22]
	volatile uint16_t phase_b1_alarm_state=0;
 801e7b2:	2300      	movs	r3, #0
 801e7b4:	82bb      	strh	r3, [r7, #20]
	volatile uint16_t phase_b2_alarm_state=0;
 801e7b6:	2300      	movs	r3, #0
 801e7b8:	827b      	strh	r3, [r7, #18]
	volatile uint16_t phase_c1_alarm_state=0;
 801e7ba:	2300      	movs	r3, #0
 801e7bc:	823b      	strh	r3, [r7, #16]
	volatile uint16_t phase_c2_alarm_state=0;
 801e7be:	2300      	movs	r3, #0
 801e7c0:	81fb      	strh	r3, [r7, #14]

	volatile uint8_t current_counter = 0;
 801e7c2:	2300      	movs	r3, #0
 801e7c4:	737b      	strb	r3, [r7, #13]

	uint16_t current_a_temp;
	uint16_t current_b_temp;
	uint16_t current_c_temp;

	uint16_t current_a_sum = 0;
 801e7c6:	2300      	movs	r3, #0
 801e7c8:	87fb      	strh	r3, [r7, #62]	; 0x3e
	uint16_t current_b_sum = 0;
 801e7ca:	2300      	movs	r3, #0
 801e7cc:	87bb      	strh	r3, [r7, #60]	; 0x3c
	uint16_t current_c_sum = 0;
 801e7ce:	2300      	movs	r3, #0
 801e7d0:	877b      	strh	r3, [r7, #58]	; 0x3a

	uint16_t current_a = 0;
 801e7d2:	2300      	movs	r3, #0
 801e7d4:	873b      	strh	r3, [r7, #56]	; 0x38
	uint16_t current_b = 0;
 801e7d6:	2300      	movs	r3, #0
 801e7d8:	86fb      	strh	r3, [r7, #54]	; 0x36
	uint16_t current_c = 0;
 801e7da:	2300      	movs	r3, #0
 801e7dc:	86bb      	strh	r3, [r7, #52]	; 0x34


	//HAL_Delay(10000);
	osThreadSuspend(GetCurrentTaskHandle);
 801e7de:	4bc8      	ldr	r3, [pc, #800]	; (801eb00 <ThreadGetCurrentTask+0x3c0>)
 801e7e0:	681b      	ldr	r3, [r3, #0]
 801e7e2:	4618      	mov	r0, r3
 801e7e4:	f7fa ff76 	bl	80196d4 <osThreadSuspend>

	HAL_TIM_Base_Start_IT(&htim2);
 801e7e8:	48c6      	ldr	r0, [pc, #792]	; (801eb04 <ThreadGetCurrentTask+0x3c4>)
 801e7ea:	f7f8 fe9d 	bl	8017528 <HAL_TIM_Base_Start_IT>
				//if( ((control_registers.light_control_reg)&0x0001) == 0x0001 ) // если в управляющем регистре освещения выставлен бит включения фазы А
				//{

					//osThreadSuspend(MainTaskHandle); // останавливаем на всякий случай основной поток для того чтобы фазы не включились, если будут выключены

					if(cur_a > (control_registers.max_current_phase_a)*10 ) // проверяем если значение тока превысило максимальное значение тока фазы А
 801e7ee:	4bc6      	ldr	r3, [pc, #792]	; (801eb08 <ThreadGetCurrentTask+0x3c8>)
 801e7f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801e7f4:	461a      	mov	r2, r3
 801e7f6:	4613      	mov	r3, r2
 801e7f8:	009b      	lsls	r3, r3, #2
 801e7fa:	4413      	add	r3, r2
 801e7fc:	005b      	lsls	r3, r3, #1
 801e7fe:	461a      	mov	r2, r3
 801e800:	4bc2      	ldr	r3, [pc, #776]	; (801eb0c <ThreadGetCurrentTask+0x3cc>)
 801e802:	681b      	ldr	r3, [r3, #0]
 801e804:	429a      	cmp	r2, r3
 801e806:	f080 80dd 	bcs.w	801e9c4 <ThreadGetCurrentTask+0x284>
					{
						overcurrent_phase_a_state++;
 801e80a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801e80c:	b29b      	uxth	r3, r3
 801e80e:	3301      	adds	r3, #1
 801e810:	b29b      	uxth	r3, r3
 801e812:	867b      	strh	r3, [r7, #50]	; 0x32

						if(overcurrent_phase_a_state >= control_registers.overcurrent_timeleft_reg)
 801e814:	4bbc      	ldr	r3, [pc, #752]	; (801eb08 <ThreadGetCurrentTask+0x3c8>)
 801e816:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801e81a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801e81c:	b29b      	uxth	r3, r3
 801e81e:	429a      	cmp	r2, r3
 801e820:	f200 80d2 	bhi.w	801e9c8 <ThreadGetCurrentTask+0x288>
						{
							overcurrent_phase_a_state = 0;
 801e824:	2300      	movs	r3, #0
 801e826:	867b      	strh	r3, [r7, #50]	; 0x32

							if( ((status_registers.lighting_alarm_reg)&0x0080) == 0x0000 ) // проверяем установлен ли бит превышения тока фазы А
 801e828:	4bb9      	ldr	r3, [pc, #740]	; (801eb10 <ThreadGetCurrentTask+0x3d0>)
 801e82a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801e82e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801e832:	2b00      	cmp	r3, #0
 801e834:	d176      	bne.n	801e924 <ThreadGetCurrentTask+0x1e4>
							{
								//osThreadSuspend(MainTaskHandle); // останавливаем на всякий случай основной поток для того чтобы фазы не включились, если будут выключены

								//PHASE_A_OFF(); // отключаем фазу А

								osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801e836:	4bb7      	ldr	r3, [pc, #732]	; (801eb14 <ThreadGetCurrentTask+0x3d4>)
 801e838:	681b      	ldr	r3, [r3, #0]
 801e83a:	f04f 31ff 	mov.w	r1, #4294967295
 801e83e:	4618      	mov	r0, r3
 801e840:	f7fa fd32 	bl	80192a8 <osMutexWait>
								fm25v02_read(2*LIGHTING_ALARM_REG, &temp_h);
 801e844:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 801e848:	4619      	mov	r1, r3
 801e84a:	f242 0064 	movw	r0, #8292	; 0x2064
 801e84e:	f00c f8e3 	bl	802aa18 <fm25v02_read>
								fm25v02_read(2*LIGHTING_ALARM_REG+1, &temp_l);
 801e852:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801e856:	4619      	mov	r1, r3
 801e858:	f242 0065 	movw	r0, #8293	; 0x2065
 801e85c:	f00c f8dc 	bl	802aa18 <fm25v02_read>
								temp_l = temp_l|0x80;
 801e860:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801e864:	b2db      	uxtb	r3, r3
 801e866:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801e86a:	b2db      	uxtb	r3, r3
 801e86c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
								fm25v02_write(2*LIGHTING_ALARM_REG, temp_h);
 801e870:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801e874:	b2db      	uxtb	r3, r3
 801e876:	4619      	mov	r1, r3
 801e878:	f242 0064 	movw	r0, #8292	; 0x2064
 801e87c:	f00c f906 	bl	802aa8c <fm25v02_write>
								fm25v02_write(2*LIGHTING_ALARM_REG+1, temp_l);
 801e880:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801e884:	b2db      	uxtb	r3, r3
 801e886:	4619      	mov	r1, r3
 801e888:	f242 0065 	movw	r0, #8293	; 0x2065
 801e88c:	f00c f8fe 	bl	802aa8c <fm25v02_write>
								status_registers.lighting_alarm_reg = (((uint16_t)temp_h)<<8)|temp_l; // если превышение тока длилось 10 циклов, то выставляем бит превышения тока фазы А в регистр аварий
 801e890:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801e894:	b2db      	uxtb	r3, r3
 801e896:	021b      	lsls	r3, r3, #8
 801e898:	b21a      	sxth	r2, r3
 801e89a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801e89e:	b2db      	uxtb	r3, r3
 801e8a0:	b21b      	sxth	r3, r3
 801e8a2:	4313      	orrs	r3, r2
 801e8a4:	b21b      	sxth	r3, r3
 801e8a6:	b29a      	uxth	r2, r3
 801e8a8:	4b99      	ldr	r3, [pc, #612]	; (801eb10 <ThreadGetCurrentTask+0x3d0>)
 801e8aa:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

								fm25v02_read(2*LIGHT_CONTROL_REG, &temp_h);
 801e8ae:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 801e8b2:	4619      	mov	r1, r3
 801e8b4:	f242 1082 	movw	r0, #8578	; 0x2182
 801e8b8:	f00c f8ae 	bl	802aa18 <fm25v02_read>
								fm25v02_read(2*LIGHT_CONTROL_REG+1, &temp_l);
 801e8bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801e8c0:	4619      	mov	r1, r3
 801e8c2:	f242 1083 	movw	r0, #8579	; 0x2183
 801e8c6:	f00c f8a7 	bl	802aa18 <fm25v02_read>
								temp_l = temp_l&0xFE;
 801e8ca:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801e8ce:	b2db      	uxtb	r3, r3
 801e8d0:	f023 0301 	bic.w	r3, r3, #1
 801e8d4:	b2db      	uxtb	r3, r3
 801e8d6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
								fm25v02_write(2*LIGHT_CONTROL_REG, temp_h);
 801e8da:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801e8de:	b2db      	uxtb	r3, r3
 801e8e0:	4619      	mov	r1, r3
 801e8e2:	f242 1082 	movw	r0, #8578	; 0x2182
 801e8e6:	f00c f8d1 	bl	802aa8c <fm25v02_write>
								fm25v02_write(2*LIGHT_CONTROL_REG+1, temp_l);
 801e8ea:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801e8ee:	b2db      	uxtb	r3, r3
 801e8f0:	4619      	mov	r1, r3
 801e8f2:	f242 1083 	movw	r0, #8579	; 0x2183
 801e8f6:	f00c f8c9 	bl	802aa8c <fm25v02_write>
								control_registers.light_control_reg = (((uint16_t)temp_h)<<8)|temp_l;
 801e8fa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801e8fe:	b2db      	uxtb	r3, r3
 801e900:	021b      	lsls	r3, r3, #8
 801e902:	b21a      	sxth	r2, r3
 801e904:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801e908:	b2db      	uxtb	r3, r3
 801e90a:	b21b      	sxth	r3, r3
 801e90c:	4313      	orrs	r3, r2
 801e90e:	b21b      	sxth	r3, r3
 801e910:	b29a      	uxth	r2, r3
 801e912:	4b7d      	ldr	r3, [pc, #500]	; (801eb08 <ThreadGetCurrentTask+0x3c8>)
 801e914:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

								osMutexRelease(Fm25v02MutexHandle);
 801e918:	4b7e      	ldr	r3, [pc, #504]	; (801eb14 <ThreadGetCurrentTask+0x3d4>)
 801e91a:	681b      	ldr	r3, [r3, #0]
 801e91c:	4618      	mov	r0, r3
 801e91e:	f7fa fd11 	bl	8019344 <osMutexRelease>
 801e922:	e051      	b.n	801e9c8 <ThreadGetCurrentTask+0x288>

								//osThreadResume(MainTaskHandle); // запускаем основной поток после проверки превышения значений токов

							}
							else if( ((status_registers.lighting_alarm_reg)&0x0080) == 0x0080 ) // проверяем установлен ли бит превышения тока фазы А
 801e924:	4b7a      	ldr	r3, [pc, #488]	; (801eb10 <ThreadGetCurrentTask+0x3d0>)
 801e926:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801e92a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801e92e:	2b00      	cmp	r3, #0
 801e930:	d04a      	beq.n	801e9c8 <ThreadGetCurrentTask+0x288>
							{
								if( (control_registers.light_control_reg)&0x01 )
 801e932:	4b75      	ldr	r3, [pc, #468]	; (801eb08 <ThreadGetCurrentTask+0x3c8>)
 801e934:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 801e938:	f003 0301 	and.w	r3, r3, #1
 801e93c:	2b00      	cmp	r3, #0
 801e93e:	d043      	beq.n	801e9c8 <ThreadGetCurrentTask+0x288>
								{
									//osThreadSuspend(MainTaskHandle); // останавливаем на всякий случай основной поток для того чтобы фазы не включились, если будут выключены

									//PHASE_A_OFF(); // отключаем фазу А

									osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801e940:	4b74      	ldr	r3, [pc, #464]	; (801eb14 <ThreadGetCurrentTask+0x3d4>)
 801e942:	681b      	ldr	r3, [r3, #0]
 801e944:	f04f 31ff 	mov.w	r1, #4294967295
 801e948:	4618      	mov	r0, r3
 801e94a:	f7fa fcad 	bl	80192a8 <osMutexWait>

									fm25v02_read(2*LIGHT_CONTROL_REG, &temp_h);
 801e94e:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 801e952:	4619      	mov	r1, r3
 801e954:	f242 1082 	movw	r0, #8578	; 0x2182
 801e958:	f00c f85e 	bl	802aa18 <fm25v02_read>
									fm25v02_read(2*LIGHT_CONTROL_REG+1, &temp_l);
 801e95c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801e960:	4619      	mov	r1, r3
 801e962:	f242 1083 	movw	r0, #8579	; 0x2183
 801e966:	f00c f857 	bl	802aa18 <fm25v02_read>
									temp_l = temp_l&0xFE;
 801e96a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801e96e:	b2db      	uxtb	r3, r3
 801e970:	f023 0301 	bic.w	r3, r3, #1
 801e974:	b2db      	uxtb	r3, r3
 801e976:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
									fm25v02_write(2*LIGHT_CONTROL_REG, temp_h);
 801e97a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801e97e:	b2db      	uxtb	r3, r3
 801e980:	4619      	mov	r1, r3
 801e982:	f242 1082 	movw	r0, #8578	; 0x2182
 801e986:	f00c f881 	bl	802aa8c <fm25v02_write>
									fm25v02_write(2*LIGHT_CONTROL_REG+1, temp_l);
 801e98a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801e98e:	b2db      	uxtb	r3, r3
 801e990:	4619      	mov	r1, r3
 801e992:	f242 1083 	movw	r0, #8579	; 0x2183
 801e996:	f00c f879 	bl	802aa8c <fm25v02_write>
									control_registers.light_control_reg = (((uint16_t)temp_h)<<8)|temp_l;
 801e99a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801e99e:	b2db      	uxtb	r3, r3
 801e9a0:	021b      	lsls	r3, r3, #8
 801e9a2:	b21a      	sxth	r2, r3
 801e9a4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801e9a8:	b2db      	uxtb	r3, r3
 801e9aa:	b21b      	sxth	r3, r3
 801e9ac:	4313      	orrs	r3, r2
 801e9ae:	b21b      	sxth	r3, r3
 801e9b0:	b29a      	uxth	r2, r3
 801e9b2:	4b55      	ldr	r3, [pc, #340]	; (801eb08 <ThreadGetCurrentTask+0x3c8>)
 801e9b4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

									osMutexRelease(Fm25v02MutexHandle);
 801e9b8:	4b56      	ldr	r3, [pc, #344]	; (801eb14 <ThreadGetCurrentTask+0x3d4>)
 801e9ba:	681b      	ldr	r3, [r3, #0]
 801e9bc:	4618      	mov	r0, r3
 801e9be:	f7fa fcc1 	bl	8019344 <osMutexRelease>
 801e9c2:	e001      	b.n	801e9c8 <ThreadGetCurrentTask+0x288>

					}

					else
					{
						overcurrent_phase_a_state = 0;
 801e9c4:	2300      	movs	r3, #0
 801e9c6:	867b      	strh	r3, [r7, #50]	; 0x32
				//}

				//if( ((control_registers.light_control_reg)&0x0002) == 0x0002 ) // если в управляющем регистре освещения выставлен бит включения фазы В
				//{

					if(cur_b > (control_registers.max_current_phase_b)*10 ) // проверяем если значение тока превысило максимальное значение тока фазы В
 801e9c8:	4b4f      	ldr	r3, [pc, #316]	; (801eb08 <ThreadGetCurrentTask+0x3c8>)
 801e9ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801e9ce:	461a      	mov	r2, r3
 801e9d0:	4613      	mov	r3, r2
 801e9d2:	009b      	lsls	r3, r3, #2
 801e9d4:	4413      	add	r3, r2
 801e9d6:	005b      	lsls	r3, r3, #1
 801e9d8:	461a      	mov	r2, r3
 801e9da:	4b4f      	ldr	r3, [pc, #316]	; (801eb18 <ThreadGetCurrentTask+0x3d8>)
 801e9dc:	681b      	ldr	r3, [r3, #0]
 801e9de:	429a      	cmp	r2, r3
 801e9e0:	f080 80ec 	bcs.w	801ebbc <ThreadGetCurrentTask+0x47c>
					{

						overcurrent_phase_b_state++;
 801e9e4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801e9e6:	b29b      	uxth	r3, r3
 801e9e8:	3301      	adds	r3, #1
 801e9ea:	b29b      	uxth	r3, r3
 801e9ec:	863b      	strh	r3, [r7, #48]	; 0x30

						if(overcurrent_phase_b_state >= control_registers.overcurrent_timeleft_reg)
 801e9ee:	4b46      	ldr	r3, [pc, #280]	; (801eb08 <ThreadGetCurrentTask+0x3c8>)
 801e9f0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801e9f4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801e9f6:	b29b      	uxth	r3, r3
 801e9f8:	429a      	cmp	r2, r3
 801e9fa:	f200 80e1 	bhi.w	801ebc0 <ThreadGetCurrentTask+0x480>
						{
							overcurrent_phase_b_state = 0;
 801e9fe:	2300      	movs	r3, #0
 801ea00:	863b      	strh	r3, [r7, #48]	; 0x30

							if( ((status_registers.lighting_alarm_reg)&0x0100) == 0x0000 ) // проверяем установлен ли бит превышения тока фазы В
 801ea02:	4b43      	ldr	r3, [pc, #268]	; (801eb10 <ThreadGetCurrentTask+0x3d0>)
 801ea04:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801ea08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801ea0c:	2b00      	cmp	r3, #0
 801ea0e:	f040 8085 	bne.w	801eb1c <ThreadGetCurrentTask+0x3dc>
							{
								//osThreadSuspend(MainTaskHandle); // останавливаем на всякий случай основной поток для того чтобы фазы не включились, если будут выключены

								//PHASE_B_OFF(); // отключаем фазу В

								osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801ea12:	4b40      	ldr	r3, [pc, #256]	; (801eb14 <ThreadGetCurrentTask+0x3d4>)
 801ea14:	681b      	ldr	r3, [r3, #0]
 801ea16:	f04f 31ff 	mov.w	r1, #4294967295
 801ea1a:	4618      	mov	r0, r3
 801ea1c:	f7fa fc44 	bl	80192a8 <osMutexWait>
								fm25v02_read(2*LIGHTING_ALARM_REG, &temp_h);
 801ea20:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 801ea24:	4619      	mov	r1, r3
 801ea26:	f242 0064 	movw	r0, #8292	; 0x2064
 801ea2a:	f00b fff5 	bl	802aa18 <fm25v02_read>
								fm25v02_read(2*LIGHTING_ALARM_REG+1, &temp_l);
 801ea2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801ea32:	4619      	mov	r1, r3
 801ea34:	f242 0065 	movw	r0, #8293	; 0x2065
 801ea38:	f00b ffee 	bl	802aa18 <fm25v02_read>
								temp_h = temp_h|0x01;
 801ea3c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801ea40:	b2db      	uxtb	r3, r3
 801ea42:	f043 0301 	orr.w	r3, r3, #1
 801ea46:	b2db      	uxtb	r3, r3
 801ea48:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
								fm25v02_write(2*LIGHTING_ALARM_REG, temp_h);
 801ea4c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801ea50:	b2db      	uxtb	r3, r3
 801ea52:	4619      	mov	r1, r3
 801ea54:	f242 0064 	movw	r0, #8292	; 0x2064
 801ea58:	f00c f818 	bl	802aa8c <fm25v02_write>
								fm25v02_write(2*LIGHTING_ALARM_REG+1, temp_l);
 801ea5c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801ea60:	b2db      	uxtb	r3, r3
 801ea62:	4619      	mov	r1, r3
 801ea64:	f242 0065 	movw	r0, #8293	; 0x2065
 801ea68:	f00c f810 	bl	802aa8c <fm25v02_write>
								status_registers.lighting_alarm_reg = (((uint16_t)temp_h)<<8)|temp_l; // если превышение тока длилось 10 циклов, то выставляем бит превышения тока фазы В в регистр аварий
 801ea6c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801ea70:	b2db      	uxtb	r3, r3
 801ea72:	021b      	lsls	r3, r3, #8
 801ea74:	b21a      	sxth	r2, r3
 801ea76:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801ea7a:	b2db      	uxtb	r3, r3
 801ea7c:	b21b      	sxth	r3, r3
 801ea7e:	4313      	orrs	r3, r2
 801ea80:	b21b      	sxth	r3, r3
 801ea82:	b29a      	uxth	r2, r3
 801ea84:	4b22      	ldr	r3, [pc, #136]	; (801eb10 <ThreadGetCurrentTask+0x3d0>)
 801ea86:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

								fm25v02_read(2*LIGHT_CONTROL_REG, &temp_h);
 801ea8a:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 801ea8e:	4619      	mov	r1, r3
 801ea90:	f242 1082 	movw	r0, #8578	; 0x2182
 801ea94:	f00b ffc0 	bl	802aa18 <fm25v02_read>
								fm25v02_read(2*LIGHT_CONTROL_REG+1, &temp_l);
 801ea98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801ea9c:	4619      	mov	r1, r3
 801ea9e:	f242 1083 	movw	r0, #8579	; 0x2183
 801eaa2:	f00b ffb9 	bl	802aa18 <fm25v02_read>
								temp_l = temp_l&0xFD;
 801eaa6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801eaaa:	b2db      	uxtb	r3, r3
 801eaac:	f023 0302 	bic.w	r3, r3, #2
 801eab0:	b2db      	uxtb	r3, r3
 801eab2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
								fm25v02_write(2*LIGHT_CONTROL_REG, temp_h);
 801eab6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801eaba:	b2db      	uxtb	r3, r3
 801eabc:	4619      	mov	r1, r3
 801eabe:	f242 1082 	movw	r0, #8578	; 0x2182
 801eac2:	f00b ffe3 	bl	802aa8c <fm25v02_write>
								fm25v02_write(2*LIGHT_CONTROL_REG+1, temp_l);
 801eac6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801eaca:	b2db      	uxtb	r3, r3
 801eacc:	4619      	mov	r1, r3
 801eace:	f242 1083 	movw	r0, #8579	; 0x2183
 801ead2:	f00b ffdb 	bl	802aa8c <fm25v02_write>
								control_registers.light_control_reg = (((uint16_t)temp_h)<<8)|temp_l;
 801ead6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801eada:	b2db      	uxtb	r3, r3
 801eadc:	021b      	lsls	r3, r3, #8
 801eade:	b21a      	sxth	r2, r3
 801eae0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801eae4:	b2db      	uxtb	r3, r3
 801eae6:	b21b      	sxth	r3, r3
 801eae8:	4313      	orrs	r3, r2
 801eaea:	b21b      	sxth	r3, r3
 801eaec:	b29a      	uxth	r2, r3
 801eaee:	4b06      	ldr	r3, [pc, #24]	; (801eb08 <ThreadGetCurrentTask+0x3c8>)
 801eaf0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

								osMutexRelease(Fm25v02MutexHandle);
 801eaf4:	4b07      	ldr	r3, [pc, #28]	; (801eb14 <ThreadGetCurrentTask+0x3d4>)
 801eaf6:	681b      	ldr	r3, [r3, #0]
 801eaf8:	4618      	mov	r0, r3
 801eafa:	f7fa fc23 	bl	8019344 <osMutexRelease>
 801eafe:	e05f      	b.n	801ebc0 <ThreadGetCurrentTask+0x480>
 801eb00:	20009788 	.word	0x20009788
 801eb04:	20009e08 	.word	0x20009e08
 801eb08:	2000b000 	.word	0x2000b000
 801eb0c:	20009710 	.word	0x20009710
 801eb10:	2000af40 	.word	0x2000af40
 801eb14:	20009bb8 	.word	0x20009bb8
 801eb18:	20009cc0 	.word	0x20009cc0

								//osThreadResume(MainTaskHandle); // запускаем основной поток после проверки превышения значений токов
							}

							else if( ((status_registers.lighting_alarm_reg)&0x0100) == 0x0100 ) // проверяем установлен ли бит превышения тока фазы А
 801eb1c:	4b9e      	ldr	r3, [pc, #632]	; (801ed98 <ThreadGetCurrentTask+0x658>)
 801eb1e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801eb22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801eb26:	2b00      	cmp	r3, #0
 801eb28:	d04a      	beq.n	801ebc0 <ThreadGetCurrentTask+0x480>
							{
								if( (control_registers.light_control_reg)&0x02 )
 801eb2a:	4b9c      	ldr	r3, [pc, #624]	; (801ed9c <ThreadGetCurrentTask+0x65c>)
 801eb2c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 801eb30:	f003 0302 	and.w	r3, r3, #2
 801eb34:	2b00      	cmp	r3, #0
 801eb36:	d043      	beq.n	801ebc0 <ThreadGetCurrentTask+0x480>
								{
									//osThreadSuspend(MainTaskHandle); // останавливаем на всякий случай основной поток для того чтобы фазы не включились, если будут выключены

									//PHASE_B_OFF(); // отключаем фазу В

									osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801eb38:	4b99      	ldr	r3, [pc, #612]	; (801eda0 <ThreadGetCurrentTask+0x660>)
 801eb3a:	681b      	ldr	r3, [r3, #0]
 801eb3c:	f04f 31ff 	mov.w	r1, #4294967295
 801eb40:	4618      	mov	r0, r3
 801eb42:	f7fa fbb1 	bl	80192a8 <osMutexWait>

									fm25v02_read(2*LIGHT_CONTROL_REG, &temp_h);
 801eb46:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 801eb4a:	4619      	mov	r1, r3
 801eb4c:	f242 1082 	movw	r0, #8578	; 0x2182
 801eb50:	f00b ff62 	bl	802aa18 <fm25v02_read>
									fm25v02_read(2*LIGHT_CONTROL_REG+1, &temp_l);
 801eb54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801eb58:	4619      	mov	r1, r3
 801eb5a:	f242 1083 	movw	r0, #8579	; 0x2183
 801eb5e:	f00b ff5b 	bl	802aa18 <fm25v02_read>
									temp_l = temp_l&0xFD;
 801eb62:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801eb66:	b2db      	uxtb	r3, r3
 801eb68:	f023 0302 	bic.w	r3, r3, #2
 801eb6c:	b2db      	uxtb	r3, r3
 801eb6e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
									fm25v02_write(2*LIGHT_CONTROL_REG, temp_h);
 801eb72:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801eb76:	b2db      	uxtb	r3, r3
 801eb78:	4619      	mov	r1, r3
 801eb7a:	f242 1082 	movw	r0, #8578	; 0x2182
 801eb7e:	f00b ff85 	bl	802aa8c <fm25v02_write>
									fm25v02_write(2*LIGHT_CONTROL_REG+1, temp_l);
 801eb82:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801eb86:	b2db      	uxtb	r3, r3
 801eb88:	4619      	mov	r1, r3
 801eb8a:	f242 1083 	movw	r0, #8579	; 0x2183
 801eb8e:	f00b ff7d 	bl	802aa8c <fm25v02_write>
									control_registers.light_control_reg = (((uint16_t)temp_h)<<8)|temp_l;
 801eb92:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801eb96:	b2db      	uxtb	r3, r3
 801eb98:	021b      	lsls	r3, r3, #8
 801eb9a:	b21a      	sxth	r2, r3
 801eb9c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801eba0:	b2db      	uxtb	r3, r3
 801eba2:	b21b      	sxth	r3, r3
 801eba4:	4313      	orrs	r3, r2
 801eba6:	b21b      	sxth	r3, r3
 801eba8:	b29a      	uxth	r2, r3
 801ebaa:	4b7c      	ldr	r3, [pc, #496]	; (801ed9c <ThreadGetCurrentTask+0x65c>)
 801ebac:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

									osMutexRelease(Fm25v02MutexHandle);
 801ebb0:	4b7b      	ldr	r3, [pc, #492]	; (801eda0 <ThreadGetCurrentTask+0x660>)
 801ebb2:	681b      	ldr	r3, [r3, #0]
 801ebb4:	4618      	mov	r0, r3
 801ebb6:	f7fa fbc5 	bl	8019344 <osMutexRelease>
 801ebba:	e001      	b.n	801ebc0 <ThreadGetCurrentTask+0x480>

					}

					else
					{
						overcurrent_phase_b_state = 0;
 801ebbc:	2300      	movs	r3, #0
 801ebbe:	863b      	strh	r3, [r7, #48]	; 0x30
				//}

				//if( ((control_registers.light_control_reg)&0x0004) == 0x0004 ) // если в управляющем регистре освещения выставлен бит включения фазы С
				//{

					if(cur_c > (control_registers.max_current_phase_c)*10 ) // проверяем если значение тока превысило максимальное значение тока фазы С
 801ebc0:	4b76      	ldr	r3, [pc, #472]	; (801ed9c <ThreadGetCurrentTask+0x65c>)
 801ebc2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801ebc6:	461a      	mov	r2, r3
 801ebc8:	4613      	mov	r3, r2
 801ebca:	009b      	lsls	r3, r3, #2
 801ebcc:	4413      	add	r3, r2
 801ebce:	005b      	lsls	r3, r3, #1
 801ebd0:	461a      	mov	r2, r3
 801ebd2:	4b74      	ldr	r3, [pc, #464]	; (801eda4 <ThreadGetCurrentTask+0x664>)
 801ebd4:	681b      	ldr	r3, [r3, #0]
 801ebd6:	429a      	cmp	r2, r3
 801ebd8:	f080 80e6 	bcs.w	801eda8 <ThreadGetCurrentTask+0x668>
					{

						overcurrent_phase_c_state++;
 801ebdc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801ebde:	b29b      	uxth	r3, r3
 801ebe0:	3301      	adds	r3, #1
 801ebe2:	b29b      	uxth	r3, r3
 801ebe4:	85fb      	strh	r3, [r7, #46]	; 0x2e

						if(overcurrent_phase_c_state >= control_registers.overcurrent_timeleft_reg)
 801ebe6:	4b6d      	ldr	r3, [pc, #436]	; (801ed9c <ThreadGetCurrentTask+0x65c>)
 801ebe8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801ebec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801ebee:	b29b      	uxth	r3, r3
 801ebf0:	429a      	cmp	r2, r3
 801ebf2:	f200 80db 	bhi.w	801edac <ThreadGetCurrentTask+0x66c>
						{
							overcurrent_phase_c_state = 0;
 801ebf6:	2300      	movs	r3, #0
 801ebf8:	85fb      	strh	r3, [r7, #46]	; 0x2e

							if( ((status_registers.lighting_alarm_reg)&0x0200) == 0x0000 ) // проверяем установлен ли бит превышения тока фазы С
 801ebfa:	4b67      	ldr	r3, [pc, #412]	; (801ed98 <ThreadGetCurrentTask+0x658>)
 801ebfc:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801ec00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801ec04:	2b00      	cmp	r3, #0
 801ec06:	d176      	bne.n	801ecf6 <ThreadGetCurrentTask+0x5b6>
							{
								//osThreadSuspend(MainTaskHandle); // останавливаем на всякий случай основной поток для того чтобы фазы не включились, если будут выключены

								//PHASE_C_OFF(); // отключаем фазу С

								osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801ec08:	4b65      	ldr	r3, [pc, #404]	; (801eda0 <ThreadGetCurrentTask+0x660>)
 801ec0a:	681b      	ldr	r3, [r3, #0]
 801ec0c:	f04f 31ff 	mov.w	r1, #4294967295
 801ec10:	4618      	mov	r0, r3
 801ec12:	f7fa fb49 	bl	80192a8 <osMutexWait>
								fm25v02_read(2*LIGHTING_ALARM_REG, &temp_h);
 801ec16:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 801ec1a:	4619      	mov	r1, r3
 801ec1c:	f242 0064 	movw	r0, #8292	; 0x2064
 801ec20:	f00b fefa 	bl	802aa18 <fm25v02_read>
								fm25v02_read(2*LIGHTING_ALARM_REG+1, &temp_l);
 801ec24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801ec28:	4619      	mov	r1, r3
 801ec2a:	f242 0065 	movw	r0, #8293	; 0x2065
 801ec2e:	f00b fef3 	bl	802aa18 <fm25v02_read>
								temp_h = temp_h|0x02;
 801ec32:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801ec36:	b2db      	uxtb	r3, r3
 801ec38:	f043 0302 	orr.w	r3, r3, #2
 801ec3c:	b2db      	uxtb	r3, r3
 801ec3e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
								fm25v02_write(2*LIGHTING_ALARM_REG, temp_h);
 801ec42:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801ec46:	b2db      	uxtb	r3, r3
 801ec48:	4619      	mov	r1, r3
 801ec4a:	f242 0064 	movw	r0, #8292	; 0x2064
 801ec4e:	f00b ff1d 	bl	802aa8c <fm25v02_write>
								fm25v02_write(2*LIGHTING_ALARM_REG+1, temp_l);
 801ec52:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801ec56:	b2db      	uxtb	r3, r3
 801ec58:	4619      	mov	r1, r3
 801ec5a:	f242 0065 	movw	r0, #8293	; 0x2065
 801ec5e:	f00b ff15 	bl	802aa8c <fm25v02_write>
								status_registers.lighting_alarm_reg = (((uint16_t)temp_h)<<8)|temp_l; // если превышение тока длилось 10 циклов, то выставляем бит превышения тока фазы А в регистр аварий
 801ec62:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801ec66:	b2db      	uxtb	r3, r3
 801ec68:	021b      	lsls	r3, r3, #8
 801ec6a:	b21a      	sxth	r2, r3
 801ec6c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801ec70:	b2db      	uxtb	r3, r3
 801ec72:	b21b      	sxth	r3, r3
 801ec74:	4313      	orrs	r3, r2
 801ec76:	b21b      	sxth	r3, r3
 801ec78:	b29a      	uxth	r2, r3
 801ec7a:	4b47      	ldr	r3, [pc, #284]	; (801ed98 <ThreadGetCurrentTask+0x658>)
 801ec7c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

								fm25v02_read(2*LIGHT_CONTROL_REG, &temp_h);
 801ec80:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 801ec84:	4619      	mov	r1, r3
 801ec86:	f242 1082 	movw	r0, #8578	; 0x2182
 801ec8a:	f00b fec5 	bl	802aa18 <fm25v02_read>
								fm25v02_read(2*LIGHT_CONTROL_REG+1, &temp_l);
 801ec8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801ec92:	4619      	mov	r1, r3
 801ec94:	f242 1083 	movw	r0, #8579	; 0x2183
 801ec98:	f00b febe 	bl	802aa18 <fm25v02_read>
								temp_l = temp_l&0xFB;
 801ec9c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801eca0:	b2db      	uxtb	r3, r3
 801eca2:	f023 0304 	bic.w	r3, r3, #4
 801eca6:	b2db      	uxtb	r3, r3
 801eca8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
								fm25v02_write(2*LIGHT_CONTROL_REG, temp_h);
 801ecac:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801ecb0:	b2db      	uxtb	r3, r3
 801ecb2:	4619      	mov	r1, r3
 801ecb4:	f242 1082 	movw	r0, #8578	; 0x2182
 801ecb8:	f00b fee8 	bl	802aa8c <fm25v02_write>
								fm25v02_write(2*LIGHT_CONTROL_REG+1, temp_l);
 801ecbc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801ecc0:	b2db      	uxtb	r3, r3
 801ecc2:	4619      	mov	r1, r3
 801ecc4:	f242 1083 	movw	r0, #8579	; 0x2183
 801ecc8:	f00b fee0 	bl	802aa8c <fm25v02_write>
								control_registers.light_control_reg = (((uint16_t)temp_h)<<8)|temp_l;
 801eccc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801ecd0:	b2db      	uxtb	r3, r3
 801ecd2:	021b      	lsls	r3, r3, #8
 801ecd4:	b21a      	sxth	r2, r3
 801ecd6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801ecda:	b2db      	uxtb	r3, r3
 801ecdc:	b21b      	sxth	r3, r3
 801ecde:	4313      	orrs	r3, r2
 801ece0:	b21b      	sxth	r3, r3
 801ece2:	b29a      	uxth	r2, r3
 801ece4:	4b2d      	ldr	r3, [pc, #180]	; (801ed9c <ThreadGetCurrentTask+0x65c>)
 801ece6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

								osMutexRelease(Fm25v02MutexHandle);
 801ecea:	4b2d      	ldr	r3, [pc, #180]	; (801eda0 <ThreadGetCurrentTask+0x660>)
 801ecec:	681b      	ldr	r3, [r3, #0]
 801ecee:	4618      	mov	r0, r3
 801ecf0:	f7fa fb28 	bl	8019344 <osMutexRelease>
 801ecf4:	e05a      	b.n	801edac <ThreadGetCurrentTask+0x66c>

								//osThreadResume(MainTaskHandle); // запускаем основной поток после проверки превышения значений токов
							}

							else if( ((status_registers.lighting_alarm_reg)&0x0200) == 0x0200 ) // проверяем установлен ли бит превышения тока фазы А
 801ecf6:	4b28      	ldr	r3, [pc, #160]	; (801ed98 <ThreadGetCurrentTask+0x658>)
 801ecf8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801ecfc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801ed00:	2b00      	cmp	r3, #0
 801ed02:	d053      	beq.n	801edac <ThreadGetCurrentTask+0x66c>
							{
								if( (control_registers.light_control_reg)&0x04 )
 801ed04:	4b25      	ldr	r3, [pc, #148]	; (801ed9c <ThreadGetCurrentTask+0x65c>)
 801ed06:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 801ed0a:	f003 0304 	and.w	r3, r3, #4
 801ed0e:	2b00      	cmp	r3, #0
 801ed10:	d04c      	beq.n	801edac <ThreadGetCurrentTask+0x66c>
								{
									//osThreadSuspend(MainTaskHandle); // останавливаем на всякий случай основной поток для того чтобы фазы не включились, если будут выключены

									//PHASE_C_OFF(); // отключаем фазу С

									osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801ed12:	4b23      	ldr	r3, [pc, #140]	; (801eda0 <ThreadGetCurrentTask+0x660>)
 801ed14:	681b      	ldr	r3, [r3, #0]
 801ed16:	f04f 31ff 	mov.w	r1, #4294967295
 801ed1a:	4618      	mov	r0, r3
 801ed1c:	f7fa fac4 	bl	80192a8 <osMutexWait>

									fm25v02_read(2*LIGHT_CONTROL_REG, &temp_h);
 801ed20:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 801ed24:	4619      	mov	r1, r3
 801ed26:	f242 1082 	movw	r0, #8578	; 0x2182
 801ed2a:	f00b fe75 	bl	802aa18 <fm25v02_read>
									fm25v02_read(2*LIGHT_CONTROL_REG+1, &temp_l);
 801ed2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801ed32:	4619      	mov	r1, r3
 801ed34:	f242 1083 	movw	r0, #8579	; 0x2183
 801ed38:	f00b fe6e 	bl	802aa18 <fm25v02_read>
									temp_l = temp_l&0xFB;
 801ed3c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801ed40:	b2db      	uxtb	r3, r3
 801ed42:	f023 0304 	bic.w	r3, r3, #4
 801ed46:	b2db      	uxtb	r3, r3
 801ed48:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
									fm25v02_write(2*LIGHT_CONTROL_REG, temp_h);
 801ed4c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801ed50:	b2db      	uxtb	r3, r3
 801ed52:	4619      	mov	r1, r3
 801ed54:	f242 1082 	movw	r0, #8578	; 0x2182
 801ed58:	f00b fe98 	bl	802aa8c <fm25v02_write>
									fm25v02_write(2*LIGHT_CONTROL_REG+1, temp_l);
 801ed5c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801ed60:	b2db      	uxtb	r3, r3
 801ed62:	4619      	mov	r1, r3
 801ed64:	f242 1083 	movw	r0, #8579	; 0x2183
 801ed68:	f00b fe90 	bl	802aa8c <fm25v02_write>
									control_registers.light_control_reg = (((uint16_t)temp_h)<<8)|temp_l;
 801ed6c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801ed70:	b2db      	uxtb	r3, r3
 801ed72:	021b      	lsls	r3, r3, #8
 801ed74:	b21a      	sxth	r2, r3
 801ed76:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801ed7a:	b2db      	uxtb	r3, r3
 801ed7c:	b21b      	sxth	r3, r3
 801ed7e:	4313      	orrs	r3, r2
 801ed80:	b21b      	sxth	r3, r3
 801ed82:	b29a      	uxth	r2, r3
 801ed84:	4b05      	ldr	r3, [pc, #20]	; (801ed9c <ThreadGetCurrentTask+0x65c>)
 801ed86:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

									osMutexRelease(Fm25v02MutexHandle);
 801ed8a:	4b05      	ldr	r3, [pc, #20]	; (801eda0 <ThreadGetCurrentTask+0x660>)
 801ed8c:	681b      	ldr	r3, [r3, #0]
 801ed8e:	4618      	mov	r0, r3
 801ed90:	f7fa fad8 	bl	8019344 <osMutexRelease>
 801ed94:	e00a      	b.n	801edac <ThreadGetCurrentTask+0x66c>
 801ed96:	bf00      	nop
 801ed98:	2000af40 	.word	0x2000af40
 801ed9c:	2000b000 	.word	0x2000b000
 801eda0:	20009bb8 	.word	0x20009bb8
 801eda4:	20009a00 	.word	0x20009a00

					}

					else
					{
						overcurrent_phase_c_state = 0;
 801eda8:	2300      	movs	r3, #0
 801edaa:	85fb      	strh	r3, [r7, #46]	; 0x2e

				//}

//----контроль фаз, двери и каскада---------------------------------------------------------------------------------------------------------------------

				if( HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == GPIO_PIN_RESET ) // если нет наличия фазы А1
 801edac:	2110      	movs	r1, #16
 801edae:	4852      	ldr	r0, [pc, #328]	; (801eef8 <ThreadGetCurrentTask+0x7b8>)
 801edb0:	f7f5 fd56 	bl	8014860 <HAL_GPIO_ReadPin>
 801edb4:	4603      	mov	r3, r0
 801edb6:	2b00      	cmp	r3, #0
 801edb8:	f040 80a6 	bne.w	801ef08 <ThreadGetCurrentTask+0x7c8>
				{
					if( ((control_registers.light_control_reg)&0x0001) == 0x0001 ) // если в управляющем регистре освещения выставлен бит включения фазы А
 801edbc:	4b4f      	ldr	r3, [pc, #316]	; (801eefc <ThreadGetCurrentTask+0x7bc>)
 801edbe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 801edc2:	f003 0301 	and.w	r3, r3, #1
 801edc6:	2b00      	cmp	r3, #0
 801edc8:	d045      	beq.n	801ee56 <ThreadGetCurrentTask+0x716>
					{
						if(phase_a1_alarm_state<3000)
 801edca:	8b3b      	ldrh	r3, [r7, #24]
 801edcc:	b29b      	uxth	r3, r3
 801edce:	f640 32b7 	movw	r2, #2999	; 0xbb7
 801edd2:	4293      	cmp	r3, r2
 801edd4:	d83f      	bhi.n	801ee56 <ThreadGetCurrentTask+0x716>
						{
							phase_a1_alarm_state++;
 801edd6:	8b3b      	ldrh	r3, [r7, #24]
 801edd8:	b29b      	uxth	r3, r3
 801edda:	3301      	adds	r3, #1
 801eddc:	b29b      	uxth	r3, r3
 801edde:	833b      	strh	r3, [r7, #24]

							if(phase_a1_alarm_state==3000)
 801ede0:	8b3b      	ldrh	r3, [r7, #24]
 801ede2:	b29b      	uxth	r3, r3
 801ede4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 801ede8:	4293      	cmp	r3, r2
 801edea:	d134      	bne.n	801ee56 <ThreadGetCurrentTask+0x716>
							{
								phase_a1_alarm_state = 0;
 801edec:	2300      	movs	r3, #0
 801edee:	833b      	strh	r3, [r7, #24]

								if( ((status_registers.lighting_alarm_reg)&0x0001) == 0x0000 ) // проверяем наличие бита аварии фазы А1, если бит не выставлен, устанавливаем бит
 801edf0:	4b43      	ldr	r3, [pc, #268]	; (801ef00 <ThreadGetCurrentTask+0x7c0>)
 801edf2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801edf6:	f003 0301 	and.w	r3, r3, #1
 801edfa:	2b00      	cmp	r3, #0
 801edfc:	d12b      	bne.n	801ee56 <ThreadGetCurrentTask+0x716>
								{
									osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801edfe:	4b41      	ldr	r3, [pc, #260]	; (801ef04 <ThreadGetCurrentTask+0x7c4>)
 801ee00:	681b      	ldr	r3, [r3, #0]
 801ee02:	f04f 31ff 	mov.w	r1, #4294967295
 801ee06:	4618      	mov	r0, r3
 801ee08:	f7fa fa4e 	bl	80192a8 <osMutexWait>
									fm25v02_read(2*LIGHTING_ALARM_REG+1, &phase_temp); // читаем значение из старшего байта регистра аварий освещения
 801ee0c:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 801ee10:	4619      	mov	r1, r3
 801ee12:	f242 0065 	movw	r0, #8293	; 0x2065
 801ee16:	f00b fdff 	bl	802aa18 <fm25v02_read>
									phase_temp = phase_temp|0x01; // устанавливаем 0-й бит статуса фазы А1
 801ee1a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801ee1e:	b2db      	uxtb	r3, r3
 801ee20:	f043 0301 	orr.w	r3, r3, #1
 801ee24:	b2db      	uxtb	r3, r3
 801ee26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
									fm25v02_write(2*LIGHTING_ALARM_REG+1, phase_temp); // записываем младший байт регистра аварий освещения
 801ee2a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801ee2e:	b2db      	uxtb	r3, r3
 801ee30:	4619      	mov	r1, r3
 801ee32:	f242 0065 	movw	r0, #8293	; 0x2065
 801ee36:	f00b fe29 	bl	802aa8c <fm25v02_write>
									status_registers.lighting_alarm_reg = status_registers.lighting_alarm_reg|0x0001; // выставляем бит аварии фазы А1 в переменной регистра аварий освещения
 801ee3a:	4b31      	ldr	r3, [pc, #196]	; (801ef00 <ThreadGetCurrentTask+0x7c0>)
 801ee3c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801ee40:	f043 0301 	orr.w	r3, r3, #1
 801ee44:	b29a      	uxth	r2, r3
 801ee46:	4b2e      	ldr	r3, [pc, #184]	; (801ef00 <ThreadGetCurrentTask+0x7c0>)
 801ee48:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
									osMutexRelease(Fm25v02MutexHandle);
 801ee4c:	4b2d      	ldr	r3, [pc, #180]	; (801ef04 <ThreadGetCurrentTask+0x7c4>)
 801ee4e:	681b      	ldr	r3, [r3, #0]
 801ee50:	4618      	mov	r0, r3
 801ee52:	f7fa fa77 	bl	8019344 <osMutexRelease>

							}
						}
					}

					phase_a1_on_state = 0;
 801ee56:	2300      	movs	r3, #0
 801ee58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

					if(phase_a1_off_state<200)
 801ee5c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 801ee60:	b2db      	uxtb	r3, r3
 801ee62:	2bc7      	cmp	r3, #199	; 0xc7
 801ee64:	f200 80a5 	bhi.w	801efb2 <ThreadGetCurrentTask+0x872>
					{
						phase_a1_off_state++;
 801ee68:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 801ee6c:	b2db      	uxtb	r3, r3
 801ee6e:	3301      	adds	r3, #1
 801ee70:	b2db      	uxtb	r3, r3
 801ee72:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

						if(phase_a1_off_state >= 200)
 801ee76:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 801ee7a:	b2db      	uxtb	r3, r3
 801ee7c:	2bc7      	cmp	r3, #199	; 0xc7
 801ee7e:	f240 8098 	bls.w	801efb2 <ThreadGetCurrentTask+0x872>
						{
							phase_a1_off_state = 0;
 801ee82:	2300      	movs	r3, #0
 801ee84:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
							if( ((status_registers.lighting_status_reg)&0x0001) == 0x0001 )
 801ee88:	4b1d      	ldr	r3, [pc, #116]	; (801ef00 <ThreadGetCurrentTask+0x7c0>)
 801ee8a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801ee8e:	f003 0301 	and.w	r3, r3, #1
 801ee92:	2b00      	cmp	r3, #0
 801ee94:	f000 808d 	beq.w	801efb2 <ThreadGetCurrentTask+0x872>
							{
								osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801ee98:	4b1a      	ldr	r3, [pc, #104]	; (801ef04 <ThreadGetCurrentTask+0x7c4>)
 801ee9a:	681b      	ldr	r3, [r3, #0]
 801ee9c:	f04f 31ff 	mov.w	r1, #4294967295
 801eea0:	4618      	mov	r0, r3
 801eea2:	f7fa fa01 	bl	80192a8 <osMutexWait>
								fm25v02_read(2*LIGHTING_STATUS_REG+1, &phase_temp);
 801eea6:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 801eeaa:	4619      	mov	r1, r3
 801eeac:	f242 0063 	movw	r0, #8291	; 0x2063
 801eeb0:	f00b fdb2 	bl	802aa18 <fm25v02_read>
								phase_temp = phase_temp&0xFE;
 801eeb4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801eeb8:	b2db      	uxtb	r3, r3
 801eeba:	f023 0301 	bic.w	r3, r3, #1
 801eebe:	b2db      	uxtb	r3, r3
 801eec0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
								fm25v02_write(2*LIGHTING_STATUS_REG+1, phase_temp);
 801eec4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801eec8:	b2db      	uxtb	r3, r3
 801eeca:	4619      	mov	r1, r3
 801eecc:	f242 0063 	movw	r0, #8291	; 0x2063
 801eed0:	f00b fddc 	bl	802aa8c <fm25v02_write>
								status_registers.lighting_status_reg = status_registers.lighting_status_reg&0xFFFE;
 801eed4:	4b0a      	ldr	r3, [pc, #40]	; (801ef00 <ThreadGetCurrentTask+0x7c0>)
 801eed6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801eeda:	f023 0301 	bic.w	r3, r3, #1
 801eede:	b29a      	uxth	r2, r3
 801eee0:	4b07      	ldr	r3, [pc, #28]	; (801ef00 <ThreadGetCurrentTask+0x7c0>)
 801eee2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
								osMutexRelease(Fm25v02MutexHandle);
 801eee6:	4b07      	ldr	r3, [pc, #28]	; (801ef04 <ThreadGetCurrentTask+0x7c4>)
 801eee8:	681b      	ldr	r3, [r3, #0]
 801eeea:	4618      	mov	r0, r3
 801eeec:	f7fa fa2a 	bl	8019344 <osMutexRelease>
								LED3_OFF();
 801eef0:	f00b fed0 	bl	802ac94 <LED3_OFF>
 801eef4:	e05d      	b.n	801efb2 <ThreadGetCurrentTask+0x872>
 801eef6:	bf00      	nop
 801eef8:	40020000 	.word	0x40020000
 801eefc:	2000b000 	.word	0x2000b000
 801ef00:	2000af40 	.word	0x2000af40
 801ef04:	20009bb8 	.word	0x20009bb8
						}
					}

				}

				else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == GPIO_PIN_SET) // если есть наличие фазы А1
 801ef08:	2110      	movs	r1, #16
 801ef0a:	4880      	ldr	r0, [pc, #512]	; (801f10c <ThreadGetCurrentTask+0x9cc>)
 801ef0c:	f7f5 fca8 	bl	8014860 <HAL_GPIO_ReadPin>
 801ef10:	4603      	mov	r3, r0
 801ef12:	2b01      	cmp	r3, #1
 801ef14:	d14d      	bne.n	801efb2 <ThreadGetCurrentTask+0x872>
				{
					phase_a1_alarm_state = 0;
 801ef16:	2300      	movs	r3, #0
 801ef18:	833b      	strh	r3, [r7, #24]
					phase_a1_off_state = 0;
 801ef1a:	2300      	movs	r3, #0
 801ef1c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

					if(phase_a1_on_state<2)
 801ef20:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801ef24:	b2db      	uxtb	r3, r3
 801ef26:	2b01      	cmp	r3, #1
 801ef28:	d843      	bhi.n	801efb2 <ThreadGetCurrentTask+0x872>
					{
						phase_a1_on_state++;
 801ef2a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801ef2e:	b2db      	uxtb	r3, r3
 801ef30:	3301      	adds	r3, #1
 801ef32:	b2db      	uxtb	r3, r3
 801ef34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
						if(phase_a1_on_state>=2)
 801ef38:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801ef3c:	b2db      	uxtb	r3, r3
 801ef3e:	2b01      	cmp	r3, #1
 801ef40:	d937      	bls.n	801efb2 <ThreadGetCurrentTask+0x872>
						{

							phase_a1_on_state = 0; // выставляем среднее значение между 0 и 10
 801ef42:	2300      	movs	r3, #0
 801ef44:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

							if( ((status_registers.lighting_status_reg)&0x0001) == 0x0000 )
 801ef48:	4b71      	ldr	r3, [pc, #452]	; (801f110 <ThreadGetCurrentTask+0x9d0>)
 801ef4a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801ef4e:	f003 0301 	and.w	r3, r3, #1
 801ef52:	2b00      	cmp	r3, #0
 801ef54:	d12d      	bne.n	801efb2 <ThreadGetCurrentTask+0x872>
							{
								osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801ef56:	4b6f      	ldr	r3, [pc, #444]	; (801f114 <ThreadGetCurrentTask+0x9d4>)
 801ef58:	681b      	ldr	r3, [r3, #0]
 801ef5a:	f04f 31ff 	mov.w	r1, #4294967295
 801ef5e:	4618      	mov	r0, r3
 801ef60:	f7fa f9a2 	bl	80192a8 <osMutexWait>
								fm25v02_read(2*LIGHTING_STATUS_REG+1, &phase_temp); // читаем значение регистра статуса освещения
 801ef64:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 801ef68:	4619      	mov	r1, r3
 801ef6a:	f242 0063 	movw	r0, #8291	; 0x2063
 801ef6e:	f00b fd53 	bl	802aa18 <fm25v02_read>
								phase_temp = phase_temp|0x01; // устанавливаем 0-й бит статуса фазы А1
 801ef72:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801ef76:	b2db      	uxtb	r3, r3
 801ef78:	f043 0301 	orr.w	r3, r3, #1
 801ef7c:	b2db      	uxtb	r3, r3
 801ef7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
								fm25v02_write(2*LIGHTING_STATUS_REG+1, phase_temp); // записываем младший байт регистра статуса освещения
 801ef82:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801ef86:	b2db      	uxtb	r3, r3
 801ef88:	4619      	mov	r1, r3
 801ef8a:	f242 0063 	movw	r0, #8291	; 0x2063
 801ef8e:	f00b fd7d 	bl	802aa8c <fm25v02_write>
								status_registers.lighting_status_reg = status_registers.lighting_status_reg|0x0001; // выставляем бит фазы А1 в переменной регистра статуса освещения
 801ef92:	4b5f      	ldr	r3, [pc, #380]	; (801f110 <ThreadGetCurrentTask+0x9d0>)
 801ef94:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801ef98:	f043 0301 	orr.w	r3, r3, #1
 801ef9c:	b29a      	uxth	r2, r3
 801ef9e:	4b5c      	ldr	r3, [pc, #368]	; (801f110 <ThreadGetCurrentTask+0x9d0>)
 801efa0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
								osMutexRelease(Fm25v02MutexHandle);
 801efa4:	4b5b      	ldr	r3, [pc, #364]	; (801f114 <ThreadGetCurrentTask+0x9d4>)
 801efa6:	681b      	ldr	r3, [r3, #0]
 801efa8:	4618      	mov	r0, r3
 801efaa:	f7fa f9cb 	bl	8019344 <osMutexRelease>
								LED3_ON();
 801efae:	f00b fe7d 	bl	802acac <LED3_ON>

					}

				}

				if( HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == GPIO_PIN_RESET ) // если нет наличия фазы А2
 801efb2:	2120      	movs	r1, #32
 801efb4:	4855      	ldr	r0, [pc, #340]	; (801f10c <ThreadGetCurrentTask+0x9cc>)
 801efb6:	f7f5 fc53 	bl	8014860 <HAL_GPIO_ReadPin>
 801efba:	4603      	mov	r3, r0
 801efbc:	2b00      	cmp	r3, #0
 801efbe:	f040 80ad 	bne.w	801f11c <ThreadGetCurrentTask+0x9dc>
				{
					if( (((control_registers.light_control_reg)&0x0010) == 0x0010) && (((control_registers.light_control_reg)&0x0001) == 0x0001) ) // если контроль второй линии включен и если в управляющем регистре освещения выставлен бит включения фазы А
 801efc2:	4b55      	ldr	r3, [pc, #340]	; (801f118 <ThreadGetCurrentTask+0x9d8>)
 801efc4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 801efc8:	f003 0310 	and.w	r3, r3, #16
 801efcc:	2b00      	cmp	r3, #0
 801efce:	d04c      	beq.n	801f06a <ThreadGetCurrentTask+0x92a>
 801efd0:	4b51      	ldr	r3, [pc, #324]	; (801f118 <ThreadGetCurrentTask+0x9d8>)
 801efd2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 801efd6:	f003 0301 	and.w	r3, r3, #1
 801efda:	2b00      	cmp	r3, #0
 801efdc:	d045      	beq.n	801f06a <ThreadGetCurrentTask+0x92a>
					{
						if(phase_a2_alarm_state<3000)
 801efde:	8afb      	ldrh	r3, [r7, #22]
 801efe0:	b29b      	uxth	r3, r3
 801efe2:	f640 32b7 	movw	r2, #2999	; 0xbb7
 801efe6:	4293      	cmp	r3, r2
 801efe8:	d83f      	bhi.n	801f06a <ThreadGetCurrentTask+0x92a>
						{
							phase_a2_alarm_state++;
 801efea:	8afb      	ldrh	r3, [r7, #22]
 801efec:	b29b      	uxth	r3, r3
 801efee:	3301      	adds	r3, #1
 801eff0:	b29b      	uxth	r3, r3
 801eff2:	82fb      	strh	r3, [r7, #22]
							if(phase_a2_alarm_state==3000)
 801eff4:	8afb      	ldrh	r3, [r7, #22]
 801eff6:	b29b      	uxth	r3, r3
 801eff8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 801effc:	4293      	cmp	r3, r2
 801effe:	d134      	bne.n	801f06a <ThreadGetCurrentTask+0x92a>
							{
								phase_a2_alarm_state = 0; // выставляем среднее значение между 0 и 10
 801f000:	2300      	movs	r3, #0
 801f002:	82fb      	strh	r3, [r7, #22]

								if( ((status_registers.lighting_alarm_reg)&0x0008) == 0x0000 ) // проверяем наличие бита аварии фазы А1, если бит не выставлен, устанавливаем бит
 801f004:	4b42      	ldr	r3, [pc, #264]	; (801f110 <ThreadGetCurrentTask+0x9d0>)
 801f006:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801f00a:	f003 0308 	and.w	r3, r3, #8
 801f00e:	2b00      	cmp	r3, #0
 801f010:	d12b      	bne.n	801f06a <ThreadGetCurrentTask+0x92a>
								{
									osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801f012:	4b40      	ldr	r3, [pc, #256]	; (801f114 <ThreadGetCurrentTask+0x9d4>)
 801f014:	681b      	ldr	r3, [r3, #0]
 801f016:	f04f 31ff 	mov.w	r1, #4294967295
 801f01a:	4618      	mov	r0, r3
 801f01c:	f7fa f944 	bl	80192a8 <osMutexWait>
									fm25v02_read(2*LIGHTING_ALARM_REG+1, &phase_temp); // читаем значение из старшего байта регистра аварий освещения
 801f020:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 801f024:	4619      	mov	r1, r3
 801f026:	f242 0065 	movw	r0, #8293	; 0x2065
 801f02a:	f00b fcf5 	bl	802aa18 <fm25v02_read>
									phase_temp = phase_temp|0x08; // устанавливаем 0-й бит статуса фазы А1
 801f02e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801f032:	b2db      	uxtb	r3, r3
 801f034:	f043 0308 	orr.w	r3, r3, #8
 801f038:	b2db      	uxtb	r3, r3
 801f03a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
									fm25v02_write(2*LIGHTING_ALARM_REG+1, phase_temp); // записываем младший байт регистра аварий освещения
 801f03e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801f042:	b2db      	uxtb	r3, r3
 801f044:	4619      	mov	r1, r3
 801f046:	f242 0065 	movw	r0, #8293	; 0x2065
 801f04a:	f00b fd1f 	bl	802aa8c <fm25v02_write>
									status_registers.lighting_alarm_reg = status_registers.lighting_alarm_reg|0x0008; // выставляем бит аварии фазы А1 в переменной регистра аварий освещения
 801f04e:	4b30      	ldr	r3, [pc, #192]	; (801f110 <ThreadGetCurrentTask+0x9d0>)
 801f050:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801f054:	f043 0308 	orr.w	r3, r3, #8
 801f058:	b29a      	uxth	r2, r3
 801f05a:	4b2d      	ldr	r3, [pc, #180]	; (801f110 <ThreadGetCurrentTask+0x9d0>)
 801f05c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
									osMutexRelease(Fm25v02MutexHandle);
 801f060:	4b2c      	ldr	r3, [pc, #176]	; (801f114 <ThreadGetCurrentTask+0x9d4>)
 801f062:	681b      	ldr	r3, [r3, #0]
 801f064:	4618      	mov	r0, r3
 801f066:	f7fa f96d 	bl	8019344 <osMutexRelease>

							}
						}
					}

					phase_a2_on_state = 0;
 801f06a:	2300      	movs	r3, #0
 801f06c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

					if(phase_a2_off_state<200)
 801f070:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 801f074:	b2db      	uxtb	r3, r3
 801f076:	2bc7      	cmp	r3, #199	; 0xc7
 801f078:	f200 80a5 	bhi.w	801f1c6 <ThreadGetCurrentTask+0xa86>
					{
						phase_a2_off_state++;
 801f07c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 801f080:	b2db      	uxtb	r3, r3
 801f082:	3301      	adds	r3, #1
 801f084:	b2db      	uxtb	r3, r3
 801f086:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
						if(phase_a2_off_state >= 200)
 801f08a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 801f08e:	b2db      	uxtb	r3, r3
 801f090:	2bc7      	cmp	r3, #199	; 0xc7
 801f092:	f240 8098 	bls.w	801f1c6 <ThreadGetCurrentTask+0xa86>
						{
							phase_a2_off_state = 0;
 801f096:	2300      	movs	r3, #0
 801f098:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
							if( ((status_registers.lighting_status_reg)&0x0008) == 0x0008 )
 801f09c:	4b1c      	ldr	r3, [pc, #112]	; (801f110 <ThreadGetCurrentTask+0x9d0>)
 801f09e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801f0a2:	f003 0308 	and.w	r3, r3, #8
 801f0a6:	2b00      	cmp	r3, #0
 801f0a8:	f000 808d 	beq.w	801f1c6 <ThreadGetCurrentTask+0xa86>
							{
								osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801f0ac:	4b19      	ldr	r3, [pc, #100]	; (801f114 <ThreadGetCurrentTask+0x9d4>)
 801f0ae:	681b      	ldr	r3, [r3, #0]
 801f0b0:	f04f 31ff 	mov.w	r1, #4294967295
 801f0b4:	4618      	mov	r0, r3
 801f0b6:	f7fa f8f7 	bl	80192a8 <osMutexWait>
								fm25v02_read(2*LIGHTING_STATUS_REG+1, &phase_temp);
 801f0ba:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 801f0be:	4619      	mov	r1, r3
 801f0c0:	f242 0063 	movw	r0, #8291	; 0x2063
 801f0c4:	f00b fca8 	bl	802aa18 <fm25v02_read>
								phase_temp = phase_temp&0xF7;
 801f0c8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801f0cc:	b2db      	uxtb	r3, r3
 801f0ce:	f023 0308 	bic.w	r3, r3, #8
 801f0d2:	b2db      	uxtb	r3, r3
 801f0d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
								fm25v02_write(2*LIGHTING_STATUS_REG+1, phase_temp);
 801f0d8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801f0dc:	b2db      	uxtb	r3, r3
 801f0de:	4619      	mov	r1, r3
 801f0e0:	f242 0063 	movw	r0, #8291	; 0x2063
 801f0e4:	f00b fcd2 	bl	802aa8c <fm25v02_write>
								status_registers.lighting_status_reg = status_registers.lighting_status_reg&0xFFF7;
 801f0e8:	4b09      	ldr	r3, [pc, #36]	; (801f110 <ThreadGetCurrentTask+0x9d0>)
 801f0ea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801f0ee:	f023 0308 	bic.w	r3, r3, #8
 801f0f2:	b29a      	uxth	r2, r3
 801f0f4:	4b06      	ldr	r3, [pc, #24]	; (801f110 <ThreadGetCurrentTask+0x9d0>)
 801f0f6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
								osMutexRelease(Fm25v02MutexHandle);
 801f0fa:	4b06      	ldr	r3, [pc, #24]	; (801f114 <ThreadGetCurrentTask+0x9d4>)
 801f0fc:	681b      	ldr	r3, [r3, #0]
 801f0fe:	4618      	mov	r0, r3
 801f100:	f7fa f920 	bl	8019344 <osMutexRelease>
								LED6_OFF();
 801f104:	f00b fe0e 	bl	802ad24 <LED6_OFF>
 801f108:	e05d      	b.n	801f1c6 <ThreadGetCurrentTask+0xa86>
 801f10a:	bf00      	nop
 801f10c:	40020000 	.word	0x40020000
 801f110:	2000af40 	.word	0x2000af40
 801f114:	20009bb8 	.word	0x20009bb8
 801f118:	2000b000 	.word	0x2000b000
							}
						}
					}

				}
				else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == GPIO_PIN_SET) // если есть наличие фазы А2
 801f11c:	2120      	movs	r1, #32
 801f11e:	487c      	ldr	r0, [pc, #496]	; (801f310 <ThreadGetCurrentTask+0xbd0>)
 801f120:	f7f5 fb9e 	bl	8014860 <HAL_GPIO_ReadPin>
 801f124:	4603      	mov	r3, r0
 801f126:	2b01      	cmp	r3, #1
 801f128:	d14d      	bne.n	801f1c6 <ThreadGetCurrentTask+0xa86>
				{

					phase_a2_alarm_state = 0;
 801f12a:	2300      	movs	r3, #0
 801f12c:	82fb      	strh	r3, [r7, #22]
					phase_a2_off_state = 0;
 801f12e:	2300      	movs	r3, #0
 801f130:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

					if(phase_a2_on_state<2)
 801f134:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801f138:	b2db      	uxtb	r3, r3
 801f13a:	2b01      	cmp	r3, #1
 801f13c:	d843      	bhi.n	801f1c6 <ThreadGetCurrentTask+0xa86>
					{
						phase_a2_on_state++;
 801f13e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801f142:	b2db      	uxtb	r3, r3
 801f144:	3301      	adds	r3, #1
 801f146:	b2db      	uxtb	r3, r3
 801f148:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
						if(phase_a2_on_state>=2)
 801f14c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801f150:	b2db      	uxtb	r3, r3
 801f152:	2b01      	cmp	r3, #1
 801f154:	d937      	bls.n	801f1c6 <ThreadGetCurrentTask+0xa86>
						{

							phase_a2_on_state = 0; // выставляем среднее значение между 0 и 10
 801f156:	2300      	movs	r3, #0
 801f158:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

							if( ((status_registers.lighting_status_reg)&0x0008) == 0x0000 )
 801f15c:	4b6d      	ldr	r3, [pc, #436]	; (801f314 <ThreadGetCurrentTask+0xbd4>)
 801f15e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801f162:	f003 0308 	and.w	r3, r3, #8
 801f166:	2b00      	cmp	r3, #0
 801f168:	d12d      	bne.n	801f1c6 <ThreadGetCurrentTask+0xa86>
							{
								osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801f16a:	4b6b      	ldr	r3, [pc, #428]	; (801f318 <ThreadGetCurrentTask+0xbd8>)
 801f16c:	681b      	ldr	r3, [r3, #0]
 801f16e:	f04f 31ff 	mov.w	r1, #4294967295
 801f172:	4618      	mov	r0, r3
 801f174:	f7fa f898 	bl	80192a8 <osMutexWait>
								fm25v02_read(2*LIGHTING_STATUS_REG+1, &phase_temp); // читаем значение регистра статуса освещения
 801f178:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 801f17c:	4619      	mov	r1, r3
 801f17e:	f242 0063 	movw	r0, #8291	; 0x2063
 801f182:	f00b fc49 	bl	802aa18 <fm25v02_read>
								phase_temp = phase_temp|0x08; // устанавливаем 0-й бит статуса фазы А1
 801f186:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801f18a:	b2db      	uxtb	r3, r3
 801f18c:	f043 0308 	orr.w	r3, r3, #8
 801f190:	b2db      	uxtb	r3, r3
 801f192:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
								fm25v02_write(2*LIGHTING_STATUS_REG+1, phase_temp); // записываем младший байт регистра статуса освещения
 801f196:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801f19a:	b2db      	uxtb	r3, r3
 801f19c:	4619      	mov	r1, r3
 801f19e:	f242 0063 	movw	r0, #8291	; 0x2063
 801f1a2:	f00b fc73 	bl	802aa8c <fm25v02_write>
								status_registers.lighting_status_reg = status_registers.lighting_status_reg|0x0008; // выставляем бит фазы А1 в переменной регистра статуса освещения
 801f1a6:	4b5b      	ldr	r3, [pc, #364]	; (801f314 <ThreadGetCurrentTask+0xbd4>)
 801f1a8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801f1ac:	f043 0308 	orr.w	r3, r3, #8
 801f1b0:	b29a      	uxth	r2, r3
 801f1b2:	4b58      	ldr	r3, [pc, #352]	; (801f314 <ThreadGetCurrentTask+0xbd4>)
 801f1b4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
								osMutexRelease(Fm25v02MutexHandle);
 801f1b8:	4b57      	ldr	r3, [pc, #348]	; (801f318 <ThreadGetCurrentTask+0xbd8>)
 801f1ba:	681b      	ldr	r3, [r3, #0]
 801f1bc:	4618      	mov	r0, r3
 801f1be:	f7fa f8c1 	bl	8019344 <osMutexRelease>
								LED6_ON();
 801f1c2:	f00b fdbb 	bl	802ad3c <LED6_ON>
					}

				}


				if( HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_RESET ) // если нет наличия фазы В1
 801f1c6:	2140      	movs	r1, #64	; 0x40
 801f1c8:	4851      	ldr	r0, [pc, #324]	; (801f310 <ThreadGetCurrentTask+0xbd0>)
 801f1ca:	f7f5 fb49 	bl	8014860 <HAL_GPIO_ReadPin>
 801f1ce:	4603      	mov	r3, r0
 801f1d0:	2b00      	cmp	r3, #0
 801f1d2:	f040 80a5 	bne.w	801f320 <ThreadGetCurrentTask+0xbe0>
				{
					if( ((control_registers.light_control_reg)&0x0002) == 0x0002 ) // если в управляющем регистре освещения выставлен бит включения фазы В
 801f1d6:	4b51      	ldr	r3, [pc, #324]	; (801f31c <ThreadGetCurrentTask+0xbdc>)
 801f1d8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 801f1dc:	f003 0302 	and.w	r3, r3, #2
 801f1e0:	2b00      	cmp	r3, #0
 801f1e2:	d045      	beq.n	801f270 <ThreadGetCurrentTask+0xb30>
					{
						if(phase_b1_alarm_state<3000)
 801f1e4:	8abb      	ldrh	r3, [r7, #20]
 801f1e6:	b29b      	uxth	r3, r3
 801f1e8:	f640 32b7 	movw	r2, #2999	; 0xbb7
 801f1ec:	4293      	cmp	r3, r2
 801f1ee:	d83f      	bhi.n	801f270 <ThreadGetCurrentTask+0xb30>
						{
							phase_b1_alarm_state++;
 801f1f0:	8abb      	ldrh	r3, [r7, #20]
 801f1f2:	b29b      	uxth	r3, r3
 801f1f4:	3301      	adds	r3, #1
 801f1f6:	b29b      	uxth	r3, r3
 801f1f8:	82bb      	strh	r3, [r7, #20]
							if(phase_b1_alarm_state==3000)
 801f1fa:	8abb      	ldrh	r3, [r7, #20]
 801f1fc:	b29b      	uxth	r3, r3
 801f1fe:	f640 32b8 	movw	r2, #3000	; 0xbb8
 801f202:	4293      	cmp	r3, r2
 801f204:	d134      	bne.n	801f270 <ThreadGetCurrentTask+0xb30>
							{
								phase_b1_alarm_state = 0; // выставляем среднее значение между 0 и 10
 801f206:	2300      	movs	r3, #0
 801f208:	82bb      	strh	r3, [r7, #20]

								if( ((status_registers.lighting_alarm_reg)&0x0002) == 0x0000 ) // проверяем наличие бита аварии фазы А1, если бит не выставлен, устанавливаем бит
 801f20a:	4b42      	ldr	r3, [pc, #264]	; (801f314 <ThreadGetCurrentTask+0xbd4>)
 801f20c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801f210:	f003 0302 	and.w	r3, r3, #2
 801f214:	2b00      	cmp	r3, #0
 801f216:	d12b      	bne.n	801f270 <ThreadGetCurrentTask+0xb30>
								{
									osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801f218:	4b3f      	ldr	r3, [pc, #252]	; (801f318 <ThreadGetCurrentTask+0xbd8>)
 801f21a:	681b      	ldr	r3, [r3, #0]
 801f21c:	f04f 31ff 	mov.w	r1, #4294967295
 801f220:	4618      	mov	r0, r3
 801f222:	f7fa f841 	bl	80192a8 <osMutexWait>
									fm25v02_read(2*LIGHTING_ALARM_REG+1, &phase_temp); // читаем значение из старшего байта регистра аварий освещения
 801f226:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 801f22a:	4619      	mov	r1, r3
 801f22c:	f242 0065 	movw	r0, #8293	; 0x2065
 801f230:	f00b fbf2 	bl	802aa18 <fm25v02_read>
									phase_temp = phase_temp|0x02; // устанавливаем 0-й бит статуса фазы А1
 801f234:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801f238:	b2db      	uxtb	r3, r3
 801f23a:	f043 0302 	orr.w	r3, r3, #2
 801f23e:	b2db      	uxtb	r3, r3
 801f240:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
									fm25v02_write(2*LIGHTING_ALARM_REG+1, phase_temp); // записываем младший байт регистра аварий освещения
 801f244:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801f248:	b2db      	uxtb	r3, r3
 801f24a:	4619      	mov	r1, r3
 801f24c:	f242 0065 	movw	r0, #8293	; 0x2065
 801f250:	f00b fc1c 	bl	802aa8c <fm25v02_write>
									status_registers.lighting_alarm_reg = status_registers.lighting_alarm_reg|0x0002; // выставляем бит аварии фазы А1 в переменной регистра аварий освещения
 801f254:	4b2f      	ldr	r3, [pc, #188]	; (801f314 <ThreadGetCurrentTask+0xbd4>)
 801f256:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801f25a:	f043 0302 	orr.w	r3, r3, #2
 801f25e:	b29a      	uxth	r2, r3
 801f260:	4b2c      	ldr	r3, [pc, #176]	; (801f314 <ThreadGetCurrentTask+0xbd4>)
 801f262:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
									osMutexRelease(Fm25v02MutexHandle);
 801f266:	4b2c      	ldr	r3, [pc, #176]	; (801f318 <ThreadGetCurrentTask+0xbd8>)
 801f268:	681b      	ldr	r3, [r3, #0]
 801f26a:	4618      	mov	r0, r3
 801f26c:	f7fa f86a 	bl	8019344 <osMutexRelease>

							}
						}
					}

					phase_b1_on_state = 0;
 801f270:	2300      	movs	r3, #0
 801f272:	f887 3020 	strb.w	r3, [r7, #32]

					if(phase_b1_off_state<200)
 801f276:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801f27a:	b2db      	uxtb	r3, r3
 801f27c:	2bc7      	cmp	r3, #199	; 0xc7
 801f27e:	f200 80a4 	bhi.w	801f3ca <ThreadGetCurrentTask+0xc8a>
					{
						phase_b1_off_state++;
 801f282:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801f286:	b2db      	uxtb	r3, r3
 801f288:	3301      	adds	r3, #1
 801f28a:	b2db      	uxtb	r3, r3
 801f28c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
						if(phase_b1_off_state >= 200)
 801f290:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801f294:	b2db      	uxtb	r3, r3
 801f296:	2bc7      	cmp	r3, #199	; 0xc7
 801f298:	f240 8097 	bls.w	801f3ca <ThreadGetCurrentTask+0xc8a>
						{
							phase_b1_off_state = 0;
 801f29c:	2300      	movs	r3, #0
 801f29e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
							if( ((status_registers.lighting_status_reg)&0x0002) == 0x0002 )
 801f2a2:	4b1c      	ldr	r3, [pc, #112]	; (801f314 <ThreadGetCurrentTask+0xbd4>)
 801f2a4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801f2a8:	f003 0302 	and.w	r3, r3, #2
 801f2ac:	2b00      	cmp	r3, #0
 801f2ae:	f000 808c 	beq.w	801f3ca <ThreadGetCurrentTask+0xc8a>
							{
								osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801f2b2:	4b19      	ldr	r3, [pc, #100]	; (801f318 <ThreadGetCurrentTask+0xbd8>)
 801f2b4:	681b      	ldr	r3, [r3, #0]
 801f2b6:	f04f 31ff 	mov.w	r1, #4294967295
 801f2ba:	4618      	mov	r0, r3
 801f2bc:	f7f9 fff4 	bl	80192a8 <osMutexWait>
								fm25v02_read(2*LIGHTING_STATUS_REG+1, &phase_temp);
 801f2c0:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 801f2c4:	4619      	mov	r1, r3
 801f2c6:	f242 0063 	movw	r0, #8291	; 0x2063
 801f2ca:	f00b fba5 	bl	802aa18 <fm25v02_read>
								phase_temp = phase_temp&0xFD;
 801f2ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801f2d2:	b2db      	uxtb	r3, r3
 801f2d4:	f023 0302 	bic.w	r3, r3, #2
 801f2d8:	b2db      	uxtb	r3, r3
 801f2da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
								fm25v02_write(2*LIGHTING_STATUS_REG+1, phase_temp);
 801f2de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801f2e2:	b2db      	uxtb	r3, r3
 801f2e4:	4619      	mov	r1, r3
 801f2e6:	f242 0063 	movw	r0, #8291	; 0x2063
 801f2ea:	f00b fbcf 	bl	802aa8c <fm25v02_write>
								status_registers.lighting_status_reg = status_registers.lighting_status_reg&0xFFFD;
 801f2ee:	4b09      	ldr	r3, [pc, #36]	; (801f314 <ThreadGetCurrentTask+0xbd4>)
 801f2f0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801f2f4:	f023 0302 	bic.w	r3, r3, #2
 801f2f8:	b29a      	uxth	r2, r3
 801f2fa:	4b06      	ldr	r3, [pc, #24]	; (801f314 <ThreadGetCurrentTask+0xbd4>)
 801f2fc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
								osMutexRelease(Fm25v02MutexHandle);
 801f300:	4b05      	ldr	r3, [pc, #20]	; (801f318 <ThreadGetCurrentTask+0xbd8>)
 801f302:	681b      	ldr	r3, [r3, #0]
 801f304:	4618      	mov	r0, r3
 801f306:	f7fa f81d 	bl	8019344 <osMutexRelease>
								LED4_OFF();
 801f30a:	f00b fcdb 	bl	802acc4 <LED4_OFF>
 801f30e:	e05c      	b.n	801f3ca <ThreadGetCurrentTask+0xc8a>
 801f310:	40020000 	.word	0x40020000
 801f314:	2000af40 	.word	0x2000af40
 801f318:	20009bb8 	.word	0x20009bb8
 801f31c:	2000b000 	.word	0x2000b000
							}
						}
					}
				}
				else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_SET) // если есть наличие фазы В1
 801f320:	2140      	movs	r1, #64	; 0x40
 801f322:	487f      	ldr	r0, [pc, #508]	; (801f520 <ThreadGetCurrentTask+0xde0>)
 801f324:	f7f5 fa9c 	bl	8014860 <HAL_GPIO_ReadPin>
 801f328:	4603      	mov	r3, r0
 801f32a:	2b01      	cmp	r3, #1
 801f32c:	d14d      	bne.n	801f3ca <ThreadGetCurrentTask+0xc8a>
				{
					phase_b1_alarm_state = 0;
 801f32e:	2300      	movs	r3, #0
 801f330:	82bb      	strh	r3, [r7, #20]
					phase_b1_off_state = 0;
 801f332:	2300      	movs	r3, #0
 801f334:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

					if(phase_b1_on_state<2)
 801f338:	f897 3020 	ldrb.w	r3, [r7, #32]
 801f33c:	b2db      	uxtb	r3, r3
 801f33e:	2b01      	cmp	r3, #1
 801f340:	d843      	bhi.n	801f3ca <ThreadGetCurrentTask+0xc8a>
					{
						phase_b1_on_state++;
 801f342:	f897 3020 	ldrb.w	r3, [r7, #32]
 801f346:	b2db      	uxtb	r3, r3
 801f348:	3301      	adds	r3, #1
 801f34a:	b2db      	uxtb	r3, r3
 801f34c:	f887 3020 	strb.w	r3, [r7, #32]
						if(phase_b1_on_state>=2)
 801f350:	f897 3020 	ldrb.w	r3, [r7, #32]
 801f354:	b2db      	uxtb	r3, r3
 801f356:	2b01      	cmp	r3, #1
 801f358:	d937      	bls.n	801f3ca <ThreadGetCurrentTask+0xc8a>
						{

							phase_b1_on_state = 0; // выставляем среднее значение между 0 и 10
 801f35a:	2300      	movs	r3, #0
 801f35c:	f887 3020 	strb.w	r3, [r7, #32]

							if( ((status_registers.lighting_status_reg)&0x0002) == 0x0000 )
 801f360:	4b70      	ldr	r3, [pc, #448]	; (801f524 <ThreadGetCurrentTask+0xde4>)
 801f362:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801f366:	f003 0302 	and.w	r3, r3, #2
 801f36a:	2b00      	cmp	r3, #0
 801f36c:	d12d      	bne.n	801f3ca <ThreadGetCurrentTask+0xc8a>
							{
								osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801f36e:	4b6e      	ldr	r3, [pc, #440]	; (801f528 <ThreadGetCurrentTask+0xde8>)
 801f370:	681b      	ldr	r3, [r3, #0]
 801f372:	f04f 31ff 	mov.w	r1, #4294967295
 801f376:	4618      	mov	r0, r3
 801f378:	f7f9 ff96 	bl	80192a8 <osMutexWait>
								fm25v02_read(2*LIGHTING_STATUS_REG+1, &phase_temp); // читаем значение регистра статуса освещения
 801f37c:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 801f380:	4619      	mov	r1, r3
 801f382:	f242 0063 	movw	r0, #8291	; 0x2063
 801f386:	f00b fb47 	bl	802aa18 <fm25v02_read>
								phase_temp = phase_temp|0x02; // устанавливаем 0-й бит статуса фазы А1
 801f38a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801f38e:	b2db      	uxtb	r3, r3
 801f390:	f043 0302 	orr.w	r3, r3, #2
 801f394:	b2db      	uxtb	r3, r3
 801f396:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
								fm25v02_write(2*LIGHTING_STATUS_REG+1, phase_temp); // записываем младший байт регистра статуса освещения
 801f39a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801f39e:	b2db      	uxtb	r3, r3
 801f3a0:	4619      	mov	r1, r3
 801f3a2:	f242 0063 	movw	r0, #8291	; 0x2063
 801f3a6:	f00b fb71 	bl	802aa8c <fm25v02_write>
								status_registers.lighting_status_reg = status_registers.lighting_status_reg|0x0002; // выставляем бит фазы А1 в переменной регистра статуса освещения
 801f3aa:	4b5e      	ldr	r3, [pc, #376]	; (801f524 <ThreadGetCurrentTask+0xde4>)
 801f3ac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801f3b0:	f043 0302 	orr.w	r3, r3, #2
 801f3b4:	b29a      	uxth	r2, r3
 801f3b6:	4b5b      	ldr	r3, [pc, #364]	; (801f524 <ThreadGetCurrentTask+0xde4>)
 801f3b8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
								osMutexRelease(Fm25v02MutexHandle);
 801f3bc:	4b5a      	ldr	r3, [pc, #360]	; (801f528 <ThreadGetCurrentTask+0xde8>)
 801f3be:	681b      	ldr	r3, [r3, #0]
 801f3c0:	4618      	mov	r0, r3
 801f3c2:	f7f9 ffbf 	bl	8019344 <osMutexRelease>
								LED4_ON();
 801f3c6:	f00b fc89 	bl	802acdc <LED4_ON>

						}
					}
				}

				if( HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == GPIO_PIN_RESET ) // если нет наличия фазы В2
 801f3ca:	2180      	movs	r1, #128	; 0x80
 801f3cc:	4854      	ldr	r0, [pc, #336]	; (801f520 <ThreadGetCurrentTask+0xde0>)
 801f3ce:	f7f5 fa47 	bl	8014860 <HAL_GPIO_ReadPin>
 801f3d2:	4603      	mov	r3, r0
 801f3d4:	2b00      	cmp	r3, #0
 801f3d6:	f040 80ab 	bne.w	801f530 <ThreadGetCurrentTask+0xdf0>
				{
					if( (((control_registers.light_control_reg)&0x0010) == 0x0010) && (((control_registers.light_control_reg)&0x0002) == 0x0002) ) // если контроль второй линии включен и если в управляющем регистре освещения выставлен бит включения фазы В
 801f3da:	4b54      	ldr	r3, [pc, #336]	; (801f52c <ThreadGetCurrentTask+0xdec>)
 801f3dc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 801f3e0:	f003 0310 	and.w	r3, r3, #16
 801f3e4:	2b00      	cmp	r3, #0
 801f3e6:	d04c      	beq.n	801f482 <ThreadGetCurrentTask+0xd42>
 801f3e8:	4b50      	ldr	r3, [pc, #320]	; (801f52c <ThreadGetCurrentTask+0xdec>)
 801f3ea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 801f3ee:	f003 0302 	and.w	r3, r3, #2
 801f3f2:	2b00      	cmp	r3, #0
 801f3f4:	d045      	beq.n	801f482 <ThreadGetCurrentTask+0xd42>
					{
						if(phase_b2_alarm_state<3000)
 801f3f6:	8a7b      	ldrh	r3, [r7, #18]
 801f3f8:	b29b      	uxth	r3, r3
 801f3fa:	f640 32b7 	movw	r2, #2999	; 0xbb7
 801f3fe:	4293      	cmp	r3, r2
 801f400:	d83f      	bhi.n	801f482 <ThreadGetCurrentTask+0xd42>
						{
							phase_b2_alarm_state++;
 801f402:	8a7b      	ldrh	r3, [r7, #18]
 801f404:	b29b      	uxth	r3, r3
 801f406:	3301      	adds	r3, #1
 801f408:	b29b      	uxth	r3, r3
 801f40a:	827b      	strh	r3, [r7, #18]
							if(phase_b2_alarm_state==3000)
 801f40c:	8a7b      	ldrh	r3, [r7, #18]
 801f40e:	b29b      	uxth	r3, r3
 801f410:	f640 32b8 	movw	r2, #3000	; 0xbb8
 801f414:	4293      	cmp	r3, r2
 801f416:	d134      	bne.n	801f482 <ThreadGetCurrentTask+0xd42>
							{
								phase_b2_alarm_state = 0; // выставляем среднее значение между 0 и 10
 801f418:	2300      	movs	r3, #0
 801f41a:	827b      	strh	r3, [r7, #18]

								if( ((status_registers.lighting_alarm_reg)&0x0010) == 0x0000 ) // проверяем наличие бита аварии фазы А1, если бит не выставлен, устанавливаем бит
 801f41c:	4b41      	ldr	r3, [pc, #260]	; (801f524 <ThreadGetCurrentTask+0xde4>)
 801f41e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801f422:	f003 0310 	and.w	r3, r3, #16
 801f426:	2b00      	cmp	r3, #0
 801f428:	d12b      	bne.n	801f482 <ThreadGetCurrentTask+0xd42>
								{
									osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801f42a:	4b3f      	ldr	r3, [pc, #252]	; (801f528 <ThreadGetCurrentTask+0xde8>)
 801f42c:	681b      	ldr	r3, [r3, #0]
 801f42e:	f04f 31ff 	mov.w	r1, #4294967295
 801f432:	4618      	mov	r0, r3
 801f434:	f7f9 ff38 	bl	80192a8 <osMutexWait>
									fm25v02_read(2*LIGHTING_ALARM_REG+1, &phase_temp); // читаем значение из старшего байта регистра аварий освещения
 801f438:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 801f43c:	4619      	mov	r1, r3
 801f43e:	f242 0065 	movw	r0, #8293	; 0x2065
 801f442:	f00b fae9 	bl	802aa18 <fm25v02_read>
									phase_temp = phase_temp|0x10; // устанавливаем 0-й бит статуса фазы А1
 801f446:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801f44a:	b2db      	uxtb	r3, r3
 801f44c:	f043 0310 	orr.w	r3, r3, #16
 801f450:	b2db      	uxtb	r3, r3
 801f452:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
									fm25v02_write(2*LIGHTING_ALARM_REG+1, phase_temp); // записываем младший байт регистра аварий освещения
 801f456:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801f45a:	b2db      	uxtb	r3, r3
 801f45c:	4619      	mov	r1, r3
 801f45e:	f242 0065 	movw	r0, #8293	; 0x2065
 801f462:	f00b fb13 	bl	802aa8c <fm25v02_write>
									status_registers.lighting_alarm_reg = status_registers.lighting_alarm_reg|0x0010; // выставляем бит аварии фазы А1 в переменной регистра аварий освещения
 801f466:	4b2f      	ldr	r3, [pc, #188]	; (801f524 <ThreadGetCurrentTask+0xde4>)
 801f468:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801f46c:	f043 0310 	orr.w	r3, r3, #16
 801f470:	b29a      	uxth	r2, r3
 801f472:	4b2c      	ldr	r3, [pc, #176]	; (801f524 <ThreadGetCurrentTask+0xde4>)
 801f474:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
									osMutexRelease(Fm25v02MutexHandle);
 801f478:	4b2b      	ldr	r3, [pc, #172]	; (801f528 <ThreadGetCurrentTask+0xde8>)
 801f47a:	681b      	ldr	r3, [r3, #0]
 801f47c:	4618      	mov	r0, r3
 801f47e:	f7f9 ff61 	bl	8019344 <osMutexRelease>

							}
						}
					}

					phase_b2_on_state = 0;
 801f482:	2300      	movs	r3, #0
 801f484:	77fb      	strb	r3, [r7, #31]

					if(phase_b2_off_state<200)
 801f486:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801f48a:	b2db      	uxtb	r3, r3
 801f48c:	2bc7      	cmp	r3, #199	; 0xc7
 801f48e:	f200 809f 	bhi.w	801f5d0 <ThreadGetCurrentTask+0xe90>
					{
						phase_b2_off_state++;
 801f492:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801f496:	b2db      	uxtb	r3, r3
 801f498:	3301      	adds	r3, #1
 801f49a:	b2db      	uxtb	r3, r3
 801f49c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						if(phase_b2_off_state >= 200)
 801f4a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801f4a4:	b2db      	uxtb	r3, r3
 801f4a6:	2bc7      	cmp	r3, #199	; 0xc7
 801f4a8:	f240 8092 	bls.w	801f5d0 <ThreadGetCurrentTask+0xe90>
						{
							phase_b2_off_state = 0;
 801f4ac:	2300      	movs	r3, #0
 801f4ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
							if( ((status_registers.lighting_status_reg)&0x0010) == 0x0010 )
 801f4b2:	4b1c      	ldr	r3, [pc, #112]	; (801f524 <ThreadGetCurrentTask+0xde4>)
 801f4b4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801f4b8:	f003 0310 	and.w	r3, r3, #16
 801f4bc:	2b00      	cmp	r3, #0
 801f4be:	f000 8087 	beq.w	801f5d0 <ThreadGetCurrentTask+0xe90>
							{
								osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801f4c2:	4b19      	ldr	r3, [pc, #100]	; (801f528 <ThreadGetCurrentTask+0xde8>)
 801f4c4:	681b      	ldr	r3, [r3, #0]
 801f4c6:	f04f 31ff 	mov.w	r1, #4294967295
 801f4ca:	4618      	mov	r0, r3
 801f4cc:	f7f9 feec 	bl	80192a8 <osMutexWait>
								fm25v02_read(2*LIGHTING_STATUS_REG+1, &phase_temp);
 801f4d0:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 801f4d4:	4619      	mov	r1, r3
 801f4d6:	f242 0063 	movw	r0, #8291	; 0x2063
 801f4da:	f00b fa9d 	bl	802aa18 <fm25v02_read>
								phase_temp = phase_temp&0xEF;
 801f4de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801f4e2:	b2db      	uxtb	r3, r3
 801f4e4:	f023 0310 	bic.w	r3, r3, #16
 801f4e8:	b2db      	uxtb	r3, r3
 801f4ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
								fm25v02_write(2*LIGHTING_STATUS_REG+1, phase_temp);
 801f4ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801f4f2:	b2db      	uxtb	r3, r3
 801f4f4:	4619      	mov	r1, r3
 801f4f6:	f242 0063 	movw	r0, #8291	; 0x2063
 801f4fa:	f00b fac7 	bl	802aa8c <fm25v02_write>
								status_registers.lighting_status_reg = status_registers.lighting_status_reg&0xFFEF;
 801f4fe:	4b09      	ldr	r3, [pc, #36]	; (801f524 <ThreadGetCurrentTask+0xde4>)
 801f500:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801f504:	f023 0310 	bic.w	r3, r3, #16
 801f508:	b29a      	uxth	r2, r3
 801f50a:	4b06      	ldr	r3, [pc, #24]	; (801f524 <ThreadGetCurrentTask+0xde4>)
 801f50c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
								osMutexRelease(Fm25v02MutexHandle);
 801f510:	4b05      	ldr	r3, [pc, #20]	; (801f528 <ThreadGetCurrentTask+0xde8>)
 801f512:	681b      	ldr	r3, [r3, #0]
 801f514:	4618      	mov	r0, r3
 801f516:	f7f9 ff15 	bl	8019344 <osMutexRelease>
								LED7_OFF();
 801f51a:	f00b fc1b 	bl	802ad54 <LED7_OFF>
 801f51e:	e057      	b.n	801f5d0 <ThreadGetCurrentTask+0xe90>
 801f520:	40020000 	.word	0x40020000
 801f524:	2000af40 	.word	0x2000af40
 801f528:	20009bb8 	.word	0x20009bb8
 801f52c:	2000b000 	.word	0x2000b000
							}
						}
					}
				}
				else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == GPIO_PIN_SET) // если есть наличие фазы В2
 801f530:	2180      	movs	r1, #128	; 0x80
 801f532:	4879      	ldr	r0, [pc, #484]	; (801f718 <ThreadGetCurrentTask+0xfd8>)
 801f534:	f7f5 f994 	bl	8014860 <HAL_GPIO_ReadPin>
 801f538:	4603      	mov	r3, r0
 801f53a:	2b01      	cmp	r3, #1
 801f53c:	d148      	bne.n	801f5d0 <ThreadGetCurrentTask+0xe90>
				{
					phase_b2_alarm_state = 0;
 801f53e:	2300      	movs	r3, #0
 801f540:	827b      	strh	r3, [r7, #18]
					phase_b2_off_state = 0;
 801f542:	2300      	movs	r3, #0
 801f544:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

					if(phase_b2_on_state<2)
 801f548:	7ffb      	ldrb	r3, [r7, #31]
 801f54a:	b2db      	uxtb	r3, r3
 801f54c:	2b01      	cmp	r3, #1
 801f54e:	d83f      	bhi.n	801f5d0 <ThreadGetCurrentTask+0xe90>
					{
						phase_b2_on_state++;
 801f550:	7ffb      	ldrb	r3, [r7, #31]
 801f552:	b2db      	uxtb	r3, r3
 801f554:	3301      	adds	r3, #1
 801f556:	b2db      	uxtb	r3, r3
 801f558:	77fb      	strb	r3, [r7, #31]
						if(phase_b2_on_state>=2)
 801f55a:	7ffb      	ldrb	r3, [r7, #31]
 801f55c:	b2db      	uxtb	r3, r3
 801f55e:	2b01      	cmp	r3, #1
 801f560:	d936      	bls.n	801f5d0 <ThreadGetCurrentTask+0xe90>
						{

							phase_b2_on_state = 0; // выставляем среднее значение между 0 и 10
 801f562:	2300      	movs	r3, #0
 801f564:	77fb      	strb	r3, [r7, #31]

							if( ((status_registers.lighting_status_reg)&0x0010) == 0x0000 )
 801f566:	4b6d      	ldr	r3, [pc, #436]	; (801f71c <ThreadGetCurrentTask+0xfdc>)
 801f568:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801f56c:	f003 0310 	and.w	r3, r3, #16
 801f570:	2b00      	cmp	r3, #0
 801f572:	d12d      	bne.n	801f5d0 <ThreadGetCurrentTask+0xe90>
							{
								osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801f574:	4b6a      	ldr	r3, [pc, #424]	; (801f720 <ThreadGetCurrentTask+0xfe0>)
 801f576:	681b      	ldr	r3, [r3, #0]
 801f578:	f04f 31ff 	mov.w	r1, #4294967295
 801f57c:	4618      	mov	r0, r3
 801f57e:	f7f9 fe93 	bl	80192a8 <osMutexWait>
								fm25v02_read(2*LIGHTING_STATUS_REG+1, &phase_temp); // читаем значение регистра статуса освещения
 801f582:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 801f586:	4619      	mov	r1, r3
 801f588:	f242 0063 	movw	r0, #8291	; 0x2063
 801f58c:	f00b fa44 	bl	802aa18 <fm25v02_read>
								phase_temp = phase_temp|0x10; // устанавливаем 0-й бит статуса фазы А1
 801f590:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801f594:	b2db      	uxtb	r3, r3
 801f596:	f043 0310 	orr.w	r3, r3, #16
 801f59a:	b2db      	uxtb	r3, r3
 801f59c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
								fm25v02_write(2*LIGHTING_STATUS_REG+1, phase_temp); // записываем младший байт регистра статуса освещения
 801f5a0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801f5a4:	b2db      	uxtb	r3, r3
 801f5a6:	4619      	mov	r1, r3
 801f5a8:	f242 0063 	movw	r0, #8291	; 0x2063
 801f5ac:	f00b fa6e 	bl	802aa8c <fm25v02_write>
								status_registers.lighting_status_reg = status_registers.lighting_status_reg|0x0010; // выставляем бит фазы А1 в переменной регистра статуса освещения
 801f5b0:	4b5a      	ldr	r3, [pc, #360]	; (801f71c <ThreadGetCurrentTask+0xfdc>)
 801f5b2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801f5b6:	f043 0310 	orr.w	r3, r3, #16
 801f5ba:	b29a      	uxth	r2, r3
 801f5bc:	4b57      	ldr	r3, [pc, #348]	; (801f71c <ThreadGetCurrentTask+0xfdc>)
 801f5be:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
								osMutexRelease(Fm25v02MutexHandle);
 801f5c2:	4b57      	ldr	r3, [pc, #348]	; (801f720 <ThreadGetCurrentTask+0xfe0>)
 801f5c4:	681b      	ldr	r3, [r3, #0]
 801f5c6:	4618      	mov	r0, r3
 801f5c8:	f7f9 febc 	bl	8019344 <osMutexRelease>
								LED7_ON();
 801f5cc:	f00b fbce 	bl	802ad6c <LED7_ON>
						}
					}
				}


				if( HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_4) == GPIO_PIN_RESET ) // если нет наличия фазы С1
 801f5d0:	2110      	movs	r1, #16
 801f5d2:	4854      	ldr	r0, [pc, #336]	; (801f724 <ThreadGetCurrentTask+0xfe4>)
 801f5d4:	f7f5 f944 	bl	8014860 <HAL_GPIO_ReadPin>
 801f5d8:	4603      	mov	r3, r0
 801f5da:	2b00      	cmp	r3, #0
 801f5dc:	f040 80a6 	bne.w	801f72c <ThreadGetCurrentTask+0xfec>
				{
					if( ((control_registers.light_control_reg)&0x0004) == 0x0004 ) // если в управляющем регистре освещения выставлен бит включения фазы С
 801f5e0:	4b51      	ldr	r3, [pc, #324]	; (801f728 <ThreadGetCurrentTask+0xfe8>)
 801f5e2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 801f5e6:	f003 0304 	and.w	r3, r3, #4
 801f5ea:	2b00      	cmp	r3, #0
 801f5ec:	d045      	beq.n	801f67a <ThreadGetCurrentTask+0xf3a>
					{
						if(phase_c1_alarm_state<3000)
 801f5ee:	8a3b      	ldrh	r3, [r7, #16]
 801f5f0:	b29b      	uxth	r3, r3
 801f5f2:	f640 32b7 	movw	r2, #2999	; 0xbb7
 801f5f6:	4293      	cmp	r3, r2
 801f5f8:	d83f      	bhi.n	801f67a <ThreadGetCurrentTask+0xf3a>
						{
							phase_c1_alarm_state++;
 801f5fa:	8a3b      	ldrh	r3, [r7, #16]
 801f5fc:	b29b      	uxth	r3, r3
 801f5fe:	3301      	adds	r3, #1
 801f600:	b29b      	uxth	r3, r3
 801f602:	823b      	strh	r3, [r7, #16]
							if(phase_c1_alarm_state==3000)
 801f604:	8a3b      	ldrh	r3, [r7, #16]
 801f606:	b29b      	uxth	r3, r3
 801f608:	f640 32b8 	movw	r2, #3000	; 0xbb8
 801f60c:	4293      	cmp	r3, r2
 801f60e:	d134      	bne.n	801f67a <ThreadGetCurrentTask+0xf3a>
							{
								phase_c1_alarm_state = 0; // выставляем среднее значение между 0 и 10
 801f610:	2300      	movs	r3, #0
 801f612:	823b      	strh	r3, [r7, #16]

								if( ((status_registers.lighting_alarm_reg)&0x0004) == 0x0000 ) // проверяем наличие бита аварии фазы А1, если бит не выставлен, устанавливаем бит
 801f614:	4b41      	ldr	r3, [pc, #260]	; (801f71c <ThreadGetCurrentTask+0xfdc>)
 801f616:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801f61a:	f003 0304 	and.w	r3, r3, #4
 801f61e:	2b00      	cmp	r3, #0
 801f620:	d12b      	bne.n	801f67a <ThreadGetCurrentTask+0xf3a>
								{
									osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801f622:	4b3f      	ldr	r3, [pc, #252]	; (801f720 <ThreadGetCurrentTask+0xfe0>)
 801f624:	681b      	ldr	r3, [r3, #0]
 801f626:	f04f 31ff 	mov.w	r1, #4294967295
 801f62a:	4618      	mov	r0, r3
 801f62c:	f7f9 fe3c 	bl	80192a8 <osMutexWait>
									fm25v02_read(2*LIGHTING_ALARM_REG+1, &phase_temp); // читаем значение из старшего байта регистра аварий освещения
 801f630:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 801f634:	4619      	mov	r1, r3
 801f636:	f242 0065 	movw	r0, #8293	; 0x2065
 801f63a:	f00b f9ed 	bl	802aa18 <fm25v02_read>
									phase_temp = phase_temp|0x04; // устанавливаем 0-й бит статуса фазы А1
 801f63e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801f642:	b2db      	uxtb	r3, r3
 801f644:	f043 0304 	orr.w	r3, r3, #4
 801f648:	b2db      	uxtb	r3, r3
 801f64a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
									fm25v02_write(2*LIGHTING_ALARM_REG+1, phase_temp); // записываем младший байт регистра аварий освещения
 801f64e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801f652:	b2db      	uxtb	r3, r3
 801f654:	4619      	mov	r1, r3
 801f656:	f242 0065 	movw	r0, #8293	; 0x2065
 801f65a:	f00b fa17 	bl	802aa8c <fm25v02_write>
									status_registers.lighting_alarm_reg = status_registers.lighting_alarm_reg|0x0004; // выставляем бит аварии фазы А1 в переменной регистра аварий освещения
 801f65e:	4b2f      	ldr	r3, [pc, #188]	; (801f71c <ThreadGetCurrentTask+0xfdc>)
 801f660:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801f664:	f043 0304 	orr.w	r3, r3, #4
 801f668:	b29a      	uxth	r2, r3
 801f66a:	4b2c      	ldr	r3, [pc, #176]	; (801f71c <ThreadGetCurrentTask+0xfdc>)
 801f66c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
									osMutexRelease(Fm25v02MutexHandle);
 801f670:	4b2b      	ldr	r3, [pc, #172]	; (801f720 <ThreadGetCurrentTask+0xfe0>)
 801f672:	681b      	ldr	r3, [r3, #0]
 801f674:	4618      	mov	r0, r3
 801f676:	f7f9 fe65 	bl	8019344 <osMutexRelease>

							}
						}
					}

					phase_c1_on_state = 0;
 801f67a:	2300      	movs	r3, #0
 801f67c:	77bb      	strb	r3, [r7, #30]

					if(phase_c1_off_state<200)
 801f67e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801f682:	b2db      	uxtb	r3, r3
 801f684:	2bc7      	cmp	r3, #199	; 0xc7
 801f686:	f200 80a1 	bhi.w	801f7cc <ThreadGetCurrentTask+0x108c>
					{
						phase_c1_off_state++;
 801f68a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801f68e:	b2db      	uxtb	r3, r3
 801f690:	3301      	adds	r3, #1
 801f692:	b2db      	uxtb	r3, r3
 801f694:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
						if(phase_c1_off_state >= 200)
 801f698:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801f69c:	b2db      	uxtb	r3, r3
 801f69e:	2bc7      	cmp	r3, #199	; 0xc7
 801f6a0:	f240 8094 	bls.w	801f7cc <ThreadGetCurrentTask+0x108c>
						{
							phase_c1_off_state = 0;
 801f6a4:	2300      	movs	r3, #0
 801f6a6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
							if( ((status_registers.lighting_status_reg)&0x0004) == 0x0004 )
 801f6aa:	4b1c      	ldr	r3, [pc, #112]	; (801f71c <ThreadGetCurrentTask+0xfdc>)
 801f6ac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801f6b0:	f003 0304 	and.w	r3, r3, #4
 801f6b4:	2b00      	cmp	r3, #0
 801f6b6:	f000 8089 	beq.w	801f7cc <ThreadGetCurrentTask+0x108c>
							{
								osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801f6ba:	4b19      	ldr	r3, [pc, #100]	; (801f720 <ThreadGetCurrentTask+0xfe0>)
 801f6bc:	681b      	ldr	r3, [r3, #0]
 801f6be:	f04f 31ff 	mov.w	r1, #4294967295
 801f6c2:	4618      	mov	r0, r3
 801f6c4:	f7f9 fdf0 	bl	80192a8 <osMutexWait>
								fm25v02_read(2*LIGHTING_STATUS_REG+1, &phase_temp);
 801f6c8:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 801f6cc:	4619      	mov	r1, r3
 801f6ce:	f242 0063 	movw	r0, #8291	; 0x2063
 801f6d2:	f00b f9a1 	bl	802aa18 <fm25v02_read>
								phase_temp = phase_temp&0xFB;
 801f6d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801f6da:	b2db      	uxtb	r3, r3
 801f6dc:	f023 0304 	bic.w	r3, r3, #4
 801f6e0:	b2db      	uxtb	r3, r3
 801f6e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
								fm25v02_write(2*LIGHTING_STATUS_REG+1, phase_temp);
 801f6e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801f6ea:	b2db      	uxtb	r3, r3
 801f6ec:	4619      	mov	r1, r3
 801f6ee:	f242 0063 	movw	r0, #8291	; 0x2063
 801f6f2:	f00b f9cb 	bl	802aa8c <fm25v02_write>
								status_registers.lighting_status_reg = status_registers.lighting_status_reg&0xFFFB;
 801f6f6:	4b09      	ldr	r3, [pc, #36]	; (801f71c <ThreadGetCurrentTask+0xfdc>)
 801f6f8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801f6fc:	f023 0304 	bic.w	r3, r3, #4
 801f700:	b29a      	uxth	r2, r3
 801f702:	4b06      	ldr	r3, [pc, #24]	; (801f71c <ThreadGetCurrentTask+0xfdc>)
 801f704:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
								osMutexRelease(Fm25v02MutexHandle);
 801f708:	4b05      	ldr	r3, [pc, #20]	; (801f720 <ThreadGetCurrentTask+0xfe0>)
 801f70a:	681b      	ldr	r3, [r3, #0]
 801f70c:	4618      	mov	r0, r3
 801f70e:	f7f9 fe19 	bl	8019344 <osMutexRelease>
								LED5_OFF();
 801f712:	f00b faef 	bl	802acf4 <LED5_OFF>
 801f716:	e059      	b.n	801f7cc <ThreadGetCurrentTask+0x108c>
 801f718:	40020000 	.word	0x40020000
 801f71c:	2000af40 	.word	0x2000af40
 801f720:	20009bb8 	.word	0x20009bb8
 801f724:	40020800 	.word	0x40020800
 801f728:	2000b000 	.word	0x2000b000
							}
						}
					}
				}

				else if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_4) == GPIO_PIN_SET) // если есть наличие фазы С1
 801f72c:	2110      	movs	r1, #16
 801f72e:	487d      	ldr	r0, [pc, #500]	; (801f924 <ThreadGetCurrentTask+0x11e4>)
 801f730:	f7f5 f896 	bl	8014860 <HAL_GPIO_ReadPin>
 801f734:	4603      	mov	r3, r0
 801f736:	2b01      	cmp	r3, #1
 801f738:	d148      	bne.n	801f7cc <ThreadGetCurrentTask+0x108c>
				{
					phase_c1_alarm_state = 0;
 801f73a:	2300      	movs	r3, #0
 801f73c:	823b      	strh	r3, [r7, #16]
					phase_c1_off_state = 0;
 801f73e:	2300      	movs	r3, #0
 801f740:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

					if(phase_c1_on_state<2)
 801f744:	7fbb      	ldrb	r3, [r7, #30]
 801f746:	b2db      	uxtb	r3, r3
 801f748:	2b01      	cmp	r3, #1
 801f74a:	d83f      	bhi.n	801f7cc <ThreadGetCurrentTask+0x108c>
					{
						phase_c1_on_state++;
 801f74c:	7fbb      	ldrb	r3, [r7, #30]
 801f74e:	b2db      	uxtb	r3, r3
 801f750:	3301      	adds	r3, #1
 801f752:	b2db      	uxtb	r3, r3
 801f754:	77bb      	strb	r3, [r7, #30]
						if(phase_c1_on_state>=2)
 801f756:	7fbb      	ldrb	r3, [r7, #30]
 801f758:	b2db      	uxtb	r3, r3
 801f75a:	2b01      	cmp	r3, #1
 801f75c:	d936      	bls.n	801f7cc <ThreadGetCurrentTask+0x108c>
						{

							phase_c1_on_state = 0; // выставляем среднее значение между 0 и 10
 801f75e:	2300      	movs	r3, #0
 801f760:	77bb      	strb	r3, [r7, #30]

							if( ((status_registers.lighting_status_reg)&0x0004) == 0x0000 )
 801f762:	4b71      	ldr	r3, [pc, #452]	; (801f928 <ThreadGetCurrentTask+0x11e8>)
 801f764:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801f768:	f003 0304 	and.w	r3, r3, #4
 801f76c:	2b00      	cmp	r3, #0
 801f76e:	d12d      	bne.n	801f7cc <ThreadGetCurrentTask+0x108c>
							{
								osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801f770:	4b6e      	ldr	r3, [pc, #440]	; (801f92c <ThreadGetCurrentTask+0x11ec>)
 801f772:	681b      	ldr	r3, [r3, #0]
 801f774:	f04f 31ff 	mov.w	r1, #4294967295
 801f778:	4618      	mov	r0, r3
 801f77a:	f7f9 fd95 	bl	80192a8 <osMutexWait>
								fm25v02_read(2*LIGHTING_STATUS_REG+1, &phase_temp); // читаем значение регистра статуса освещения
 801f77e:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 801f782:	4619      	mov	r1, r3
 801f784:	f242 0063 	movw	r0, #8291	; 0x2063
 801f788:	f00b f946 	bl	802aa18 <fm25v02_read>
								phase_temp = phase_temp|0x04; // устанавливаем 0-й бит статуса фазы А1
 801f78c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801f790:	b2db      	uxtb	r3, r3
 801f792:	f043 0304 	orr.w	r3, r3, #4
 801f796:	b2db      	uxtb	r3, r3
 801f798:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
								fm25v02_write(2*LIGHTING_STATUS_REG+1, phase_temp); // записываем младший байт регистра статуса освещения
 801f79c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801f7a0:	b2db      	uxtb	r3, r3
 801f7a2:	4619      	mov	r1, r3
 801f7a4:	f242 0063 	movw	r0, #8291	; 0x2063
 801f7a8:	f00b f970 	bl	802aa8c <fm25v02_write>
								status_registers.lighting_status_reg = status_registers.lighting_status_reg|0x0004; // выставляем бит фазы А1 в переменной регистра статуса освещения
 801f7ac:	4b5e      	ldr	r3, [pc, #376]	; (801f928 <ThreadGetCurrentTask+0x11e8>)
 801f7ae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801f7b2:	f043 0304 	orr.w	r3, r3, #4
 801f7b6:	b29a      	uxth	r2, r3
 801f7b8:	4b5b      	ldr	r3, [pc, #364]	; (801f928 <ThreadGetCurrentTask+0x11e8>)
 801f7ba:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
								osMutexRelease(Fm25v02MutexHandle);
 801f7be:	4b5b      	ldr	r3, [pc, #364]	; (801f92c <ThreadGetCurrentTask+0x11ec>)
 801f7c0:	681b      	ldr	r3, [r3, #0]
 801f7c2:	4618      	mov	r0, r3
 801f7c4:	f7f9 fdbe 	bl	8019344 <osMutexRelease>
								LED5_ON();
 801f7c8:	f00b faa0 	bl	802ad0c <LED5_ON>
						}
					}
				}


				if( HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5) == GPIO_PIN_RESET ) // если нет наличия фазы С2
 801f7cc:	2120      	movs	r1, #32
 801f7ce:	4855      	ldr	r0, [pc, #340]	; (801f924 <ThreadGetCurrentTask+0x11e4>)
 801f7d0:	f7f5 f846 	bl	8014860 <HAL_GPIO_ReadPin>
 801f7d4:	4603      	mov	r3, r0
 801f7d6:	2b00      	cmp	r3, #0
 801f7d8:	f040 80ac 	bne.w	801f934 <ThreadGetCurrentTask+0x11f4>
				{
					if( (((control_registers.light_control_reg)&0x0010) == 0x0010) && (((control_registers.light_control_reg)&0x0004) == 0x0004) ) // если контроль второй линии включен и если в управляющем регистре освещения выставлен бит включения фазы С
 801f7dc:	4b54      	ldr	r3, [pc, #336]	; (801f930 <ThreadGetCurrentTask+0x11f0>)
 801f7de:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 801f7e2:	f003 0310 	and.w	r3, r3, #16
 801f7e6:	2b00      	cmp	r3, #0
 801f7e8:	d04c      	beq.n	801f884 <ThreadGetCurrentTask+0x1144>
 801f7ea:	4b51      	ldr	r3, [pc, #324]	; (801f930 <ThreadGetCurrentTask+0x11f0>)
 801f7ec:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 801f7f0:	f003 0304 	and.w	r3, r3, #4
 801f7f4:	2b00      	cmp	r3, #0
 801f7f6:	d045      	beq.n	801f884 <ThreadGetCurrentTask+0x1144>
					{
						if(phase_c2_alarm_state<3000)
 801f7f8:	89fb      	ldrh	r3, [r7, #14]
 801f7fa:	b29b      	uxth	r3, r3
 801f7fc:	f640 32b7 	movw	r2, #2999	; 0xbb7
 801f800:	4293      	cmp	r3, r2
 801f802:	d83f      	bhi.n	801f884 <ThreadGetCurrentTask+0x1144>
						{
							phase_c2_alarm_state++;
 801f804:	89fb      	ldrh	r3, [r7, #14]
 801f806:	b29b      	uxth	r3, r3
 801f808:	3301      	adds	r3, #1
 801f80a:	b29b      	uxth	r3, r3
 801f80c:	81fb      	strh	r3, [r7, #14]
							if(phase_c2_alarm_state==3000)
 801f80e:	89fb      	ldrh	r3, [r7, #14]
 801f810:	b29b      	uxth	r3, r3
 801f812:	f640 32b8 	movw	r2, #3000	; 0xbb8
 801f816:	4293      	cmp	r3, r2
 801f818:	d134      	bne.n	801f884 <ThreadGetCurrentTask+0x1144>
							{
								phase_c2_alarm_state = 0; // выставляем среднее значение между 0 и 10
 801f81a:	2300      	movs	r3, #0
 801f81c:	81fb      	strh	r3, [r7, #14]

								if( ((status_registers.lighting_alarm_reg)&0x0020) == 0x0000 ) // проверяем наличие бита аварии фазы А1, если бит не выставлен, устанавливаем бит
 801f81e:	4b42      	ldr	r3, [pc, #264]	; (801f928 <ThreadGetCurrentTask+0x11e8>)
 801f820:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801f824:	f003 0320 	and.w	r3, r3, #32
 801f828:	2b00      	cmp	r3, #0
 801f82a:	d12b      	bne.n	801f884 <ThreadGetCurrentTask+0x1144>
								{
									osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801f82c:	4b3f      	ldr	r3, [pc, #252]	; (801f92c <ThreadGetCurrentTask+0x11ec>)
 801f82e:	681b      	ldr	r3, [r3, #0]
 801f830:	f04f 31ff 	mov.w	r1, #4294967295
 801f834:	4618      	mov	r0, r3
 801f836:	f7f9 fd37 	bl	80192a8 <osMutexWait>
									fm25v02_read(2*LIGHTING_ALARM_REG+1, &phase_temp); // читаем значение из старшего байта регистра аварий освещения
 801f83a:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 801f83e:	4619      	mov	r1, r3
 801f840:	f242 0065 	movw	r0, #8293	; 0x2065
 801f844:	f00b f8e8 	bl	802aa18 <fm25v02_read>
									phase_temp = phase_temp|0x20; // устанавливаем 0-й бит статуса фазы А1
 801f848:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801f84c:	b2db      	uxtb	r3, r3
 801f84e:	f043 0320 	orr.w	r3, r3, #32
 801f852:	b2db      	uxtb	r3, r3
 801f854:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
									fm25v02_write(2*LIGHTING_ALARM_REG+1, phase_temp); // записываем младший байт регистра аварий освещения
 801f858:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801f85c:	b2db      	uxtb	r3, r3
 801f85e:	4619      	mov	r1, r3
 801f860:	f242 0065 	movw	r0, #8293	; 0x2065
 801f864:	f00b f912 	bl	802aa8c <fm25v02_write>
									status_registers.lighting_alarm_reg = status_registers.lighting_alarm_reg|0x0020; // выставляем бит аварии фазы А1 в переменной регистра аварий освещения
 801f868:	4b2f      	ldr	r3, [pc, #188]	; (801f928 <ThreadGetCurrentTask+0x11e8>)
 801f86a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801f86e:	f043 0320 	orr.w	r3, r3, #32
 801f872:	b29a      	uxth	r2, r3
 801f874:	4b2c      	ldr	r3, [pc, #176]	; (801f928 <ThreadGetCurrentTask+0x11e8>)
 801f876:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
									osMutexRelease(Fm25v02MutexHandle);
 801f87a:	4b2c      	ldr	r3, [pc, #176]	; (801f92c <ThreadGetCurrentTask+0x11ec>)
 801f87c:	681b      	ldr	r3, [r3, #0]
 801f87e:	4618      	mov	r0, r3
 801f880:	f7f9 fd60 	bl	8019344 <osMutexRelease>

							}
						}
					}

					phase_c2_on_state = 0;
 801f884:	2300      	movs	r3, #0
 801f886:	777b      	strb	r3, [r7, #29]

					if(phase_c2_off_state<200)
 801f888:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801f88c:	b2db      	uxtb	r3, r3
 801f88e:	2bc7      	cmp	r3, #199	; 0xc7
 801f890:	f200 80a0 	bhi.w	801f9d4 <ThreadGetCurrentTask+0x1294>
					{
						phase_c2_off_state++;
 801f894:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801f898:	b2db      	uxtb	r3, r3
 801f89a:	3301      	adds	r3, #1
 801f89c:	b2db      	uxtb	r3, r3
 801f89e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
						if(phase_c2_off_state >= 200)
 801f8a2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801f8a6:	b2db      	uxtb	r3, r3
 801f8a8:	2bc7      	cmp	r3, #199	; 0xc7
 801f8aa:	f240 8093 	bls.w	801f9d4 <ThreadGetCurrentTask+0x1294>
						{
							phase_c2_off_state = 0;
 801f8ae:	2300      	movs	r3, #0
 801f8b0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
							if( ((status_registers.lighting_status_reg)&0x0020) == 0x0020 )
 801f8b4:	4b1c      	ldr	r3, [pc, #112]	; (801f928 <ThreadGetCurrentTask+0x11e8>)
 801f8b6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801f8ba:	f003 0320 	and.w	r3, r3, #32
 801f8be:	2b00      	cmp	r3, #0
 801f8c0:	f000 8088 	beq.w	801f9d4 <ThreadGetCurrentTask+0x1294>
							{
								osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801f8c4:	4b19      	ldr	r3, [pc, #100]	; (801f92c <ThreadGetCurrentTask+0x11ec>)
 801f8c6:	681b      	ldr	r3, [r3, #0]
 801f8c8:	f04f 31ff 	mov.w	r1, #4294967295
 801f8cc:	4618      	mov	r0, r3
 801f8ce:	f7f9 fceb 	bl	80192a8 <osMutexWait>
								fm25v02_read(2*LIGHTING_STATUS_REG+1, &phase_temp);
 801f8d2:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 801f8d6:	4619      	mov	r1, r3
 801f8d8:	f242 0063 	movw	r0, #8291	; 0x2063
 801f8dc:	f00b f89c 	bl	802aa18 <fm25v02_read>
								phase_temp = phase_temp&0xDF;
 801f8e0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801f8e4:	b2db      	uxtb	r3, r3
 801f8e6:	f023 0320 	bic.w	r3, r3, #32
 801f8ea:	b2db      	uxtb	r3, r3
 801f8ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
								fm25v02_write(2*LIGHTING_STATUS_REG+1, phase_temp);
 801f8f0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801f8f4:	b2db      	uxtb	r3, r3
 801f8f6:	4619      	mov	r1, r3
 801f8f8:	f242 0063 	movw	r0, #8291	; 0x2063
 801f8fc:	f00b f8c6 	bl	802aa8c <fm25v02_write>
								status_registers.lighting_status_reg = status_registers.lighting_status_reg&0xFFDF;
 801f900:	4b09      	ldr	r3, [pc, #36]	; (801f928 <ThreadGetCurrentTask+0x11e8>)
 801f902:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801f906:	f023 0320 	bic.w	r3, r3, #32
 801f90a:	b29a      	uxth	r2, r3
 801f90c:	4b06      	ldr	r3, [pc, #24]	; (801f928 <ThreadGetCurrentTask+0x11e8>)
 801f90e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
								osMutexRelease(Fm25v02MutexHandle);
 801f912:	4b06      	ldr	r3, [pc, #24]	; (801f92c <ThreadGetCurrentTask+0x11ec>)
 801f914:	681b      	ldr	r3, [r3, #0]
 801f916:	4618      	mov	r0, r3
 801f918:	f7f9 fd14 	bl	8019344 <osMutexRelease>
								LED8_OFF();
 801f91c:	f00b fa32 	bl	802ad84 <LED8_OFF>
 801f920:	e058      	b.n	801f9d4 <ThreadGetCurrentTask+0x1294>
 801f922:	bf00      	nop
 801f924:	40020800 	.word	0x40020800
 801f928:	2000af40 	.word	0x2000af40
 801f92c:	20009bb8 	.word	0x20009bb8
 801f930:	2000b000 	.word	0x2000b000
							}
						}
					}
				}
				else if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5) == GPIO_PIN_SET) // если нет наличия фазы С2
 801f934:	2120      	movs	r1, #32
 801f936:	48a2      	ldr	r0, [pc, #648]	; (801fbc0 <ThreadGetCurrentTask+0x1480>)
 801f938:	f7f4 ff92 	bl	8014860 <HAL_GPIO_ReadPin>
 801f93c:	4603      	mov	r3, r0
 801f93e:	2b01      	cmp	r3, #1
 801f940:	d148      	bne.n	801f9d4 <ThreadGetCurrentTask+0x1294>
				{
					phase_c2_alarm_state = 0;
 801f942:	2300      	movs	r3, #0
 801f944:	81fb      	strh	r3, [r7, #14]
					phase_c2_off_state = 0;
 801f946:	2300      	movs	r3, #0
 801f948:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

					if(phase_c2_on_state<2)
 801f94c:	7f7b      	ldrb	r3, [r7, #29]
 801f94e:	b2db      	uxtb	r3, r3
 801f950:	2b01      	cmp	r3, #1
 801f952:	d83f      	bhi.n	801f9d4 <ThreadGetCurrentTask+0x1294>
					{
						phase_c2_on_state++;
 801f954:	7f7b      	ldrb	r3, [r7, #29]
 801f956:	b2db      	uxtb	r3, r3
 801f958:	3301      	adds	r3, #1
 801f95a:	b2db      	uxtb	r3, r3
 801f95c:	777b      	strb	r3, [r7, #29]
						if(phase_c2_on_state>=2)
 801f95e:	7f7b      	ldrb	r3, [r7, #29]
 801f960:	b2db      	uxtb	r3, r3
 801f962:	2b01      	cmp	r3, #1
 801f964:	d936      	bls.n	801f9d4 <ThreadGetCurrentTask+0x1294>
						{

							phase_c2_on_state = 0; // выставляем среднее значение между 0 и 10
 801f966:	2300      	movs	r3, #0
 801f968:	777b      	strb	r3, [r7, #29]

							if( ((status_registers.lighting_status_reg)&0x0020) == 0x0000 )
 801f96a:	4b96      	ldr	r3, [pc, #600]	; (801fbc4 <ThreadGetCurrentTask+0x1484>)
 801f96c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801f970:	f003 0320 	and.w	r3, r3, #32
 801f974:	2b00      	cmp	r3, #0
 801f976:	d12d      	bne.n	801f9d4 <ThreadGetCurrentTask+0x1294>
							{
								osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801f978:	4b93      	ldr	r3, [pc, #588]	; (801fbc8 <ThreadGetCurrentTask+0x1488>)
 801f97a:	681b      	ldr	r3, [r3, #0]
 801f97c:	f04f 31ff 	mov.w	r1, #4294967295
 801f980:	4618      	mov	r0, r3
 801f982:	f7f9 fc91 	bl	80192a8 <osMutexWait>
								fm25v02_read(2*LIGHTING_STATUS_REG+1, &phase_temp); // читаем значение регистра статуса освещения
 801f986:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 801f98a:	4619      	mov	r1, r3
 801f98c:	f242 0063 	movw	r0, #8291	; 0x2063
 801f990:	f00b f842 	bl	802aa18 <fm25v02_read>
								phase_temp = phase_temp|0x20; // устанавливаем 0-й бит статуса фазы А1
 801f994:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801f998:	b2db      	uxtb	r3, r3
 801f99a:	f043 0320 	orr.w	r3, r3, #32
 801f99e:	b2db      	uxtb	r3, r3
 801f9a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
								fm25v02_write(2*LIGHTING_STATUS_REG+1, phase_temp); // записываем младший байт регистра статуса освещения
 801f9a4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801f9a8:	b2db      	uxtb	r3, r3
 801f9aa:	4619      	mov	r1, r3
 801f9ac:	f242 0063 	movw	r0, #8291	; 0x2063
 801f9b0:	f00b f86c 	bl	802aa8c <fm25v02_write>
								status_registers.lighting_status_reg = status_registers.lighting_status_reg|0x0020; // выставляем бит фазы А1 в переменной регистра статуса освещения
 801f9b4:	4b83      	ldr	r3, [pc, #524]	; (801fbc4 <ThreadGetCurrentTask+0x1484>)
 801f9b6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801f9ba:	f043 0320 	orr.w	r3, r3, #32
 801f9be:	b29a      	uxth	r2, r3
 801f9c0:	4b80      	ldr	r3, [pc, #512]	; (801fbc4 <ThreadGetCurrentTask+0x1484>)
 801f9c2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
								osMutexRelease(Fm25v02MutexHandle);
 801f9c6:	4b80      	ldr	r3, [pc, #512]	; (801fbc8 <ThreadGetCurrentTask+0x1488>)
 801f9c8:	681b      	ldr	r3, [r3, #0]
 801f9ca:	4618      	mov	r0, r3
 801f9cc:	f7f9 fcba 	bl	8019344 <osMutexRelease>
								LED8_ON();
 801f9d0:	f00b f9e4 	bl	802ad9c <LED8_ON>
						}
					}
				}
				*/

				if( HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET ) // если пин каскада сброшен
 801f9d4:	2101      	movs	r1, #1
 801f9d6:	487d      	ldr	r0, [pc, #500]	; (801fbcc <ThreadGetCurrentTask+0x148c>)
 801f9d8:	f7f4 ff42 	bl	8014860 <HAL_GPIO_ReadPin>
 801f9dc:	4603      	mov	r3, r0
 801f9de:	2b00      	cmp	r3, #0
 801f9e0:	f040 80f8 	bne.w	801fbd4 <ThreadGetCurrentTask+0x1494>
				{

					cascade_on_state = 0;
 801f9e4:	2300      	movs	r3, #0
 801f9e6:	773b      	strb	r3, [r7, #28]

					if(cascade_off_state<200)
 801f9e8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801f9ec:	b2db      	uxtb	r3, r3
 801f9ee:	2bc7      	cmp	r3, #199	; 0xc7
 801f9f0:	f200 81e0 	bhi.w	801fdb4 <ThreadGetCurrentTask+0x1674>
					{
						cascade_off_state++;
 801f9f4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801f9f8:	b2db      	uxtb	r3, r3
 801f9fa:	3301      	adds	r3, #1
 801f9fc:	b2db      	uxtb	r3, r3
 801f9fe:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

						if(cascade_off_state >= 200)
 801fa02:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801fa06:	b2db      	uxtb	r3, r3
 801fa08:	2bc7      	cmp	r3, #199	; 0xc7
 801fa0a:	f240 81d3 	bls.w	801fdb4 <ThreadGetCurrentTask+0x1674>
						{
							cascade_off_state = 0;
 801fa0e:	2300      	movs	r3, #0
 801fa10:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
								osMutexRelease(Fm25v02MutexHandle);
								LED3_OFF();
							}
							*/

							if( ((status_registers.lighting_status_reg)&0x0040) == 0x0040 )
 801fa14:	4b6b      	ldr	r3, [pc, #428]	; (801fbc4 <ThreadGetCurrentTask+0x1484>)
 801fa16:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801fa1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801fa1e:	2b00      	cmp	r3, #0
 801fa20:	d02b      	beq.n	801fa7a <ThreadGetCurrentTask+0x133a>
							{
								osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801fa22:	4b69      	ldr	r3, [pc, #420]	; (801fbc8 <ThreadGetCurrentTask+0x1488>)
 801fa24:	681b      	ldr	r3, [r3, #0]
 801fa26:	f04f 31ff 	mov.w	r1, #4294967295
 801fa2a:	4618      	mov	r0, r3
 801fa2c:	f7f9 fc3c 	bl	80192a8 <osMutexWait>
								fm25v02_read(2*LIGHTING_STATUS_REG+1, &phase_temp);
 801fa30:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 801fa34:	4619      	mov	r1, r3
 801fa36:	f242 0063 	movw	r0, #8291	; 0x2063
 801fa3a:	f00a ffed 	bl	802aa18 <fm25v02_read>
								phase_temp = phase_temp&0xBF;
 801fa3e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801fa42:	b2db      	uxtb	r3, r3
 801fa44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801fa48:	b2db      	uxtb	r3, r3
 801fa4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
								fm25v02_write(2*LIGHTING_STATUS_REG+1, phase_temp);
 801fa4e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801fa52:	b2db      	uxtb	r3, r3
 801fa54:	4619      	mov	r1, r3
 801fa56:	f242 0063 	movw	r0, #8291	; 0x2063
 801fa5a:	f00b f817 	bl	802aa8c <fm25v02_write>
								status_registers.lighting_status_reg = (status_registers.lighting_status_reg)&0xFFBF;
 801fa5e:	4b59      	ldr	r3, [pc, #356]	; (801fbc4 <ThreadGetCurrentTask+0x1484>)
 801fa60:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801fa64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801fa68:	b29a      	uxth	r2, r3
 801fa6a:	4b56      	ldr	r3, [pc, #344]	; (801fbc4 <ThreadGetCurrentTask+0x1484>)
 801fa6c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
								osMutexRelease(Fm25v02MutexHandle);
 801fa70:	4b55      	ldr	r3, [pc, #340]	; (801fbc8 <ThreadGetCurrentTask+0x1488>)
 801fa72:	681b      	ldr	r3, [r3, #0]
 801fa74:	4618      	mov	r0, r3
 801fa76:	f7f9 fc65 	bl	8019344 <osMutexRelease>
							}

							if( ((control_registers.light_control_reg)&0x0008) == 0x0008 ) // если контроль каскада включен
 801fa7a:	4b55      	ldr	r3, [pc, #340]	; (801fbd0 <ThreadGetCurrentTask+0x1490>)
 801fa7c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 801fa80:	f003 0308 	and.w	r3, r3, #8
 801fa84:	2b00      	cmp	r3, #0
 801fa86:	f000 8195 	beq.w	801fdb4 <ThreadGetCurrentTask+0x1674>
							{
								if( ((control_registers.light_control_reg)&0x0001) == 0x0001 )
 801fa8a:	4b51      	ldr	r3, [pc, #324]	; (801fbd0 <ThreadGetCurrentTask+0x1490>)
 801fa8c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 801fa90:	f003 0301 	and.w	r3, r3, #1
 801fa94:	2b00      	cmp	r3, #0
 801fa96:	d02b      	beq.n	801faf0 <ThreadGetCurrentTask+0x13b0>
								{
									osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801fa98:	4b4b      	ldr	r3, [pc, #300]	; (801fbc8 <ThreadGetCurrentTask+0x1488>)
 801fa9a:	681b      	ldr	r3, [r3, #0]
 801fa9c:	f04f 31ff 	mov.w	r1, #4294967295
 801faa0:	4618      	mov	r0, r3
 801faa2:	f7f9 fc01 	bl	80192a8 <osMutexWait>
									fm25v02_read(2*LIGHT_CONTROL_REG+1, &phase_temp); // читаем значение из старшего байта регистра управления освещением
 801faa6:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 801faaa:	4619      	mov	r1, r3
 801faac:	f242 1083 	movw	r0, #8579	; 0x2183
 801fab0:	f00a ffb2 	bl	802aa18 <fm25v02_read>
									phase_temp = phase_temp&0xFE;
 801fab4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801fab8:	b2db      	uxtb	r3, r3
 801faba:	f023 0301 	bic.w	r3, r3, #1
 801fabe:	b2db      	uxtb	r3, r3
 801fac0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
									fm25v02_write(2*LIGHT_CONTROL_REG+1, phase_temp); // записываем младший байт регистра управления освещением
 801fac4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801fac8:	b2db      	uxtb	r3, r3
 801faca:	4619      	mov	r1, r3
 801facc:	f242 1083 	movw	r0, #8579	; 0x2183
 801fad0:	f00a ffdc 	bl	802aa8c <fm25v02_write>
									control_registers.light_control_reg = (control_registers.light_control_reg)&0xFFFE;
 801fad4:	4b3e      	ldr	r3, [pc, #248]	; (801fbd0 <ThreadGetCurrentTask+0x1490>)
 801fad6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 801fada:	f023 0301 	bic.w	r3, r3, #1
 801fade:	b29a      	uxth	r2, r3
 801fae0:	4b3b      	ldr	r3, [pc, #236]	; (801fbd0 <ThreadGetCurrentTask+0x1490>)
 801fae2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
									osMutexRelease(Fm25v02MutexHandle);
 801fae6:	4b38      	ldr	r3, [pc, #224]	; (801fbc8 <ThreadGetCurrentTask+0x1488>)
 801fae8:	681b      	ldr	r3, [r3, #0]
 801faea:	4618      	mov	r0, r3
 801faec:	f7f9 fc2a 	bl	8019344 <osMutexRelease>
								}
								if( ((control_registers.light_control_reg)&0x0002) == 0x0002 )
 801faf0:	4b37      	ldr	r3, [pc, #220]	; (801fbd0 <ThreadGetCurrentTask+0x1490>)
 801faf2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 801faf6:	f003 0302 	and.w	r3, r3, #2
 801fafa:	2b00      	cmp	r3, #0
 801fafc:	d02b      	beq.n	801fb56 <ThreadGetCurrentTask+0x1416>
								{
									osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801fafe:	4b32      	ldr	r3, [pc, #200]	; (801fbc8 <ThreadGetCurrentTask+0x1488>)
 801fb00:	681b      	ldr	r3, [r3, #0]
 801fb02:	f04f 31ff 	mov.w	r1, #4294967295
 801fb06:	4618      	mov	r0, r3
 801fb08:	f7f9 fbce 	bl	80192a8 <osMutexWait>
									fm25v02_read(2*LIGHT_CONTROL_REG+1, &phase_temp); // читаем значение из старшего байта регистра управления освещением
 801fb0c:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 801fb10:	4619      	mov	r1, r3
 801fb12:	f242 1083 	movw	r0, #8579	; 0x2183
 801fb16:	f00a ff7f 	bl	802aa18 <fm25v02_read>
									phase_temp = phase_temp&0xFD;
 801fb1a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801fb1e:	b2db      	uxtb	r3, r3
 801fb20:	f023 0302 	bic.w	r3, r3, #2
 801fb24:	b2db      	uxtb	r3, r3
 801fb26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
									fm25v02_write(2*LIGHT_CONTROL_REG+1, phase_temp); // записываем младший байт регистра управления освещением
 801fb2a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801fb2e:	b2db      	uxtb	r3, r3
 801fb30:	4619      	mov	r1, r3
 801fb32:	f242 1083 	movw	r0, #8579	; 0x2183
 801fb36:	f00a ffa9 	bl	802aa8c <fm25v02_write>
									control_registers.light_control_reg = (control_registers.light_control_reg)&0xFFFD;
 801fb3a:	4b25      	ldr	r3, [pc, #148]	; (801fbd0 <ThreadGetCurrentTask+0x1490>)
 801fb3c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 801fb40:	f023 0302 	bic.w	r3, r3, #2
 801fb44:	b29a      	uxth	r2, r3
 801fb46:	4b22      	ldr	r3, [pc, #136]	; (801fbd0 <ThreadGetCurrentTask+0x1490>)
 801fb48:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
									osMutexRelease(Fm25v02MutexHandle);
 801fb4c:	4b1e      	ldr	r3, [pc, #120]	; (801fbc8 <ThreadGetCurrentTask+0x1488>)
 801fb4e:	681b      	ldr	r3, [r3, #0]
 801fb50:	4618      	mov	r0, r3
 801fb52:	f7f9 fbf7 	bl	8019344 <osMutexRelease>
								}
								if( ((control_registers.light_control_reg)&0x0004) == 0x0004 )
 801fb56:	4b1e      	ldr	r3, [pc, #120]	; (801fbd0 <ThreadGetCurrentTask+0x1490>)
 801fb58:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 801fb5c:	f003 0304 	and.w	r3, r3, #4
 801fb60:	2b00      	cmp	r3, #0
 801fb62:	f000 8127 	beq.w	801fdb4 <ThreadGetCurrentTask+0x1674>
								{
									osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801fb66:	4b18      	ldr	r3, [pc, #96]	; (801fbc8 <ThreadGetCurrentTask+0x1488>)
 801fb68:	681b      	ldr	r3, [r3, #0]
 801fb6a:	f04f 31ff 	mov.w	r1, #4294967295
 801fb6e:	4618      	mov	r0, r3
 801fb70:	f7f9 fb9a 	bl	80192a8 <osMutexWait>
									fm25v02_read(2*LIGHT_CONTROL_REG+1, &phase_temp); // читаем значение из старшего байта регистра управления освещением
 801fb74:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 801fb78:	4619      	mov	r1, r3
 801fb7a:	f242 1083 	movw	r0, #8579	; 0x2183
 801fb7e:	f00a ff4b 	bl	802aa18 <fm25v02_read>
									phase_temp = phase_temp&0xFB;
 801fb82:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801fb86:	b2db      	uxtb	r3, r3
 801fb88:	f023 0304 	bic.w	r3, r3, #4
 801fb8c:	b2db      	uxtb	r3, r3
 801fb8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
									fm25v02_write(2*LIGHT_CONTROL_REG+1, phase_temp); // записываем младший байт регистра управления освещением
 801fb92:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801fb96:	b2db      	uxtb	r3, r3
 801fb98:	4619      	mov	r1, r3
 801fb9a:	f242 1083 	movw	r0, #8579	; 0x2183
 801fb9e:	f00a ff75 	bl	802aa8c <fm25v02_write>
									control_registers.light_control_reg = (control_registers.light_control_reg)&0xFFFB;
 801fba2:	4b0b      	ldr	r3, [pc, #44]	; (801fbd0 <ThreadGetCurrentTask+0x1490>)
 801fba4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 801fba8:	f023 0304 	bic.w	r3, r3, #4
 801fbac:	b29a      	uxth	r2, r3
 801fbae:	4b08      	ldr	r3, [pc, #32]	; (801fbd0 <ThreadGetCurrentTask+0x1490>)
 801fbb0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
									osMutexRelease(Fm25v02MutexHandle);
 801fbb4:	4b04      	ldr	r3, [pc, #16]	; (801fbc8 <ThreadGetCurrentTask+0x1488>)
 801fbb6:	681b      	ldr	r3, [r3, #0]
 801fbb8:	4618      	mov	r0, r3
 801fbba:	f7f9 fbc3 	bl	8019344 <osMutexRelease>
 801fbbe:	e0f9      	b.n	801fdb4 <ThreadGetCurrentTask+0x1674>
 801fbc0:	40020800 	.word	0x40020800
 801fbc4:	2000af40 	.word	0x2000af40
 801fbc8:	20009bb8 	.word	0x20009bb8
 801fbcc:	40020400 	.word	0x40020400
 801fbd0:	2000b000 	.word	0x2000b000
						}
					}

				}

				else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_SET) // если пин каскада установлен
 801fbd4:	2101      	movs	r1, #1
 801fbd6:	48a0      	ldr	r0, [pc, #640]	; (801fe58 <ThreadGetCurrentTask+0x1718>)
 801fbd8:	f7f4 fe42 	bl	8014860 <HAL_GPIO_ReadPin>
 801fbdc:	4603      	mov	r3, r0
 801fbde:	2b01      	cmp	r3, #1
 801fbe0:	f040 80e8 	bne.w	801fdb4 <ThreadGetCurrentTask+0x1674>
				{
					//phase_a1_alarm_state = 0;
					cascade_off_state = 0;
 801fbe4:	2300      	movs	r3, #0
 801fbe6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

					if(cascade_on_state<2)
 801fbea:	7f3b      	ldrb	r3, [r7, #28]
 801fbec:	b2db      	uxtb	r3, r3
 801fbee:	2b01      	cmp	r3, #1
 801fbf0:	f200 80e0 	bhi.w	801fdb4 <ThreadGetCurrentTask+0x1674>
					{
						cascade_on_state++;
 801fbf4:	7f3b      	ldrb	r3, [r7, #28]
 801fbf6:	b2db      	uxtb	r3, r3
 801fbf8:	3301      	adds	r3, #1
 801fbfa:	b2db      	uxtb	r3, r3
 801fbfc:	773b      	strb	r3, [r7, #28]
						if(cascade_on_state>=2)
 801fbfe:	7f3b      	ldrb	r3, [r7, #28]
 801fc00:	b2db      	uxtb	r3, r3
 801fc02:	2b01      	cmp	r3, #1
 801fc04:	f240 80d6 	bls.w	801fdb4 <ThreadGetCurrentTask+0x1674>
						{

							cascade_on_state = 0; // выставляем среднее значение между 0 и 10
 801fc08:	2300      	movs	r3, #0
 801fc0a:	773b      	strb	r3, [r7, #28]
								osMutexRelease(Fm25v02MutexHandle);
								LED3_ON();
							}
							*/

							if( ((status_registers.lighting_status_reg)&0x0040) == 0x0000 )
 801fc0c:	4b93      	ldr	r3, [pc, #588]	; (801fe5c <ThreadGetCurrentTask+0x171c>)
 801fc0e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801fc12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801fc16:	2b00      	cmp	r3, #0
 801fc18:	d12b      	bne.n	801fc72 <ThreadGetCurrentTask+0x1532>
							{
								osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801fc1a:	4b91      	ldr	r3, [pc, #580]	; (801fe60 <ThreadGetCurrentTask+0x1720>)
 801fc1c:	681b      	ldr	r3, [r3, #0]
 801fc1e:	f04f 31ff 	mov.w	r1, #4294967295
 801fc22:	4618      	mov	r0, r3
 801fc24:	f7f9 fb40 	bl	80192a8 <osMutexWait>
								fm25v02_read(2*LIGHTING_STATUS_REG+1, &phase_temp); // читаем значение регистра статуса освещения
 801fc28:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 801fc2c:	4619      	mov	r1, r3
 801fc2e:	f242 0063 	movw	r0, #8291	; 0x2063
 801fc32:	f00a fef1 	bl	802aa18 <fm25v02_read>
								phase_temp = phase_temp|0x40;
 801fc36:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801fc3a:	b2db      	uxtb	r3, r3
 801fc3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801fc40:	b2db      	uxtb	r3, r3
 801fc42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
								fm25v02_write(2*LIGHTING_STATUS_REG+1, phase_temp); // записываем младший байт регистра статуса освещения
 801fc46:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801fc4a:	b2db      	uxtb	r3, r3
 801fc4c:	4619      	mov	r1, r3
 801fc4e:	f242 0063 	movw	r0, #8291	; 0x2063
 801fc52:	f00a ff1b 	bl	802aa8c <fm25v02_write>
								status_registers.lighting_status_reg = status_registers.lighting_status_reg|0x0040;
 801fc56:	4b81      	ldr	r3, [pc, #516]	; (801fe5c <ThreadGetCurrentTask+0x171c>)
 801fc58:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801fc5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801fc60:	b29a      	uxth	r2, r3
 801fc62:	4b7e      	ldr	r3, [pc, #504]	; (801fe5c <ThreadGetCurrentTask+0x171c>)
 801fc64:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
								osMutexRelease(Fm25v02MutexHandle);
 801fc68:	4b7d      	ldr	r3, [pc, #500]	; (801fe60 <ThreadGetCurrentTask+0x1720>)
 801fc6a:	681b      	ldr	r3, [r3, #0]
 801fc6c:	4618      	mov	r0, r3
 801fc6e:	f7f9 fb69 	bl	8019344 <osMutexRelease>
							}

							if( ((control_registers.light_control_reg)&0x0008) == 0x0008 ) // если контроль каскада включен
 801fc72:	4b7c      	ldr	r3, [pc, #496]	; (801fe64 <ThreadGetCurrentTask+0x1724>)
 801fc74:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 801fc78:	f003 0308 	and.w	r3, r3, #8
 801fc7c:	2b00      	cmp	r3, #0
 801fc7e:	f000 8099 	beq.w	801fdb4 <ThreadGetCurrentTask+0x1674>
							{
								if( ((control_registers.light_control_reg)&0x0001) == 0x0000 )
 801fc82:	4b78      	ldr	r3, [pc, #480]	; (801fe64 <ThreadGetCurrentTask+0x1724>)
 801fc84:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 801fc88:	f003 0301 	and.w	r3, r3, #1
 801fc8c:	2b00      	cmp	r3, #0
 801fc8e:	d12b      	bne.n	801fce8 <ThreadGetCurrentTask+0x15a8>
								{
									osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801fc90:	4b73      	ldr	r3, [pc, #460]	; (801fe60 <ThreadGetCurrentTask+0x1720>)
 801fc92:	681b      	ldr	r3, [r3, #0]
 801fc94:	f04f 31ff 	mov.w	r1, #4294967295
 801fc98:	4618      	mov	r0, r3
 801fc9a:	f7f9 fb05 	bl	80192a8 <osMutexWait>
									fm25v02_read(2*LIGHT_CONTROL_REG+1, &phase_temp); // читаем значение из старшего байта регистра управления освещением
 801fc9e:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 801fca2:	4619      	mov	r1, r3
 801fca4:	f242 1083 	movw	r0, #8579	; 0x2183
 801fca8:	f00a feb6 	bl	802aa18 <fm25v02_read>
									phase_temp = phase_temp|0x01;
 801fcac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801fcb0:	b2db      	uxtb	r3, r3
 801fcb2:	f043 0301 	orr.w	r3, r3, #1
 801fcb6:	b2db      	uxtb	r3, r3
 801fcb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
									fm25v02_write(2*LIGHT_CONTROL_REG+1, phase_temp); // записываем младший байт регистра управления освещением
 801fcbc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801fcc0:	b2db      	uxtb	r3, r3
 801fcc2:	4619      	mov	r1, r3
 801fcc4:	f242 1083 	movw	r0, #8579	; 0x2183
 801fcc8:	f00a fee0 	bl	802aa8c <fm25v02_write>
									control_registers.light_control_reg = control_registers.light_control_reg|0x01;
 801fccc:	4b65      	ldr	r3, [pc, #404]	; (801fe64 <ThreadGetCurrentTask+0x1724>)
 801fcce:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 801fcd2:	f043 0301 	orr.w	r3, r3, #1
 801fcd6:	b29a      	uxth	r2, r3
 801fcd8:	4b62      	ldr	r3, [pc, #392]	; (801fe64 <ThreadGetCurrentTask+0x1724>)
 801fcda:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
									osMutexRelease(Fm25v02MutexHandle);
 801fcde:	4b60      	ldr	r3, [pc, #384]	; (801fe60 <ThreadGetCurrentTask+0x1720>)
 801fce0:	681b      	ldr	r3, [r3, #0]
 801fce2:	4618      	mov	r0, r3
 801fce4:	f7f9 fb2e 	bl	8019344 <osMutexRelease>
								}
								if( ((control_registers.light_control_reg)&0x0002) == 0x0000 )
 801fce8:	4b5e      	ldr	r3, [pc, #376]	; (801fe64 <ThreadGetCurrentTask+0x1724>)
 801fcea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 801fcee:	f003 0302 	and.w	r3, r3, #2
 801fcf2:	2b00      	cmp	r3, #0
 801fcf4:	d12b      	bne.n	801fd4e <ThreadGetCurrentTask+0x160e>
								{
									osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801fcf6:	4b5a      	ldr	r3, [pc, #360]	; (801fe60 <ThreadGetCurrentTask+0x1720>)
 801fcf8:	681b      	ldr	r3, [r3, #0]
 801fcfa:	f04f 31ff 	mov.w	r1, #4294967295
 801fcfe:	4618      	mov	r0, r3
 801fd00:	f7f9 fad2 	bl	80192a8 <osMutexWait>
									fm25v02_read(2*LIGHT_CONTROL_REG+1, &phase_temp); // читаем значение из старшего байта регистра управления освещением
 801fd04:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 801fd08:	4619      	mov	r1, r3
 801fd0a:	f242 1083 	movw	r0, #8579	; 0x2183
 801fd0e:	f00a fe83 	bl	802aa18 <fm25v02_read>
									phase_temp = phase_temp|0x02;
 801fd12:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801fd16:	b2db      	uxtb	r3, r3
 801fd18:	f043 0302 	orr.w	r3, r3, #2
 801fd1c:	b2db      	uxtb	r3, r3
 801fd1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
									fm25v02_write(2*LIGHT_CONTROL_REG+1, phase_temp); // записываем младший байт регистра управления освещением
 801fd22:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801fd26:	b2db      	uxtb	r3, r3
 801fd28:	4619      	mov	r1, r3
 801fd2a:	f242 1083 	movw	r0, #8579	; 0x2183
 801fd2e:	f00a fead 	bl	802aa8c <fm25v02_write>
									control_registers.light_control_reg = control_registers.light_control_reg|0x02;
 801fd32:	4b4c      	ldr	r3, [pc, #304]	; (801fe64 <ThreadGetCurrentTask+0x1724>)
 801fd34:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 801fd38:	f043 0302 	orr.w	r3, r3, #2
 801fd3c:	b29a      	uxth	r2, r3
 801fd3e:	4b49      	ldr	r3, [pc, #292]	; (801fe64 <ThreadGetCurrentTask+0x1724>)
 801fd40:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
									osMutexRelease(Fm25v02MutexHandle);
 801fd44:	4b46      	ldr	r3, [pc, #280]	; (801fe60 <ThreadGetCurrentTask+0x1720>)
 801fd46:	681b      	ldr	r3, [r3, #0]
 801fd48:	4618      	mov	r0, r3
 801fd4a:	f7f9 fafb 	bl	8019344 <osMutexRelease>
								}
								if( ((control_registers.light_control_reg)&0x0004) == 0x0000 )
 801fd4e:	4b45      	ldr	r3, [pc, #276]	; (801fe64 <ThreadGetCurrentTask+0x1724>)
 801fd50:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 801fd54:	f003 0304 	and.w	r3, r3, #4
 801fd58:	2b00      	cmp	r3, #0
 801fd5a:	d12b      	bne.n	801fdb4 <ThreadGetCurrentTask+0x1674>
								{
									osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801fd5c:	4b40      	ldr	r3, [pc, #256]	; (801fe60 <ThreadGetCurrentTask+0x1720>)
 801fd5e:	681b      	ldr	r3, [r3, #0]
 801fd60:	f04f 31ff 	mov.w	r1, #4294967295
 801fd64:	4618      	mov	r0, r3
 801fd66:	f7f9 fa9f 	bl	80192a8 <osMutexWait>
									fm25v02_read(2*LIGHT_CONTROL_REG+1, &phase_temp); // читаем значение из старшего байта регистра управления освещением
 801fd6a:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 801fd6e:	4619      	mov	r1, r3
 801fd70:	f242 1083 	movw	r0, #8579	; 0x2183
 801fd74:	f00a fe50 	bl	802aa18 <fm25v02_read>
									phase_temp = phase_temp|0x04;
 801fd78:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801fd7c:	b2db      	uxtb	r3, r3
 801fd7e:	f043 0304 	orr.w	r3, r3, #4
 801fd82:	b2db      	uxtb	r3, r3
 801fd84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
									fm25v02_write(2*LIGHT_CONTROL_REG+1, phase_temp); // записываем младший байт регистра управления освещением
 801fd88:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801fd8c:	b2db      	uxtb	r3, r3
 801fd8e:	4619      	mov	r1, r3
 801fd90:	f242 1083 	movw	r0, #8579	; 0x2183
 801fd94:	f00a fe7a 	bl	802aa8c <fm25v02_write>
									control_registers.light_control_reg = control_registers.light_control_reg|0x04;
 801fd98:	4b32      	ldr	r3, [pc, #200]	; (801fe64 <ThreadGetCurrentTask+0x1724>)
 801fd9a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 801fd9e:	f043 0304 	orr.w	r3, r3, #4
 801fda2:	b29a      	uxth	r2, r3
 801fda4:	4b2f      	ldr	r3, [pc, #188]	; (801fe64 <ThreadGetCurrentTask+0x1724>)
 801fda6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
									osMutexRelease(Fm25v02MutexHandle);
 801fdaa:	4b2d      	ldr	r3, [pc, #180]	; (801fe60 <ThreadGetCurrentTask+0x1720>)
 801fdac:	681b      	ldr	r3, [r3, #0]
 801fdae:	4618      	mov	r0, r3
 801fdb0:	f7f9 fac8 	bl	8019344 <osMutexRelease>
					}

				}


				if( HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == GPIO_PIN_RESET ) // если сброшен пин двери освещения
 801fdb4:	2102      	movs	r1, #2
 801fdb6:	4828      	ldr	r0, [pc, #160]	; (801fe58 <ThreadGetCurrentTask+0x1718>)
 801fdb8:	f7f4 fd52 	bl	8014860 <HAL_GPIO_ReadPin>
 801fdbc:	4603      	mov	r3, r0
 801fdbe:	2b00      	cmp	r3, #0
 801fdc0:	d152      	bne.n	801fe68 <ThreadGetCurrentTask+0x1728>
				{

					if(door_off_state<50)
 801fdc2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801fdc6:	b2db      	uxtb	r3, r3
 801fdc8:	2b31      	cmp	r3, #49	; 0x31
 801fdca:	f200 8099 	bhi.w	801ff00 <ThreadGetCurrentTask+0x17c0>
					{
						door_off_state++;
 801fdce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801fdd2:	b2db      	uxtb	r3, r3
 801fdd4:	3301      	adds	r3, #1
 801fdd6:	b2db      	uxtb	r3, r3
 801fdd8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
						if(door_off_state == 50)
 801fddc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801fde0:	b2db      	uxtb	r3, r3
 801fde2:	2b32      	cmp	r3, #50	; 0x32
 801fde4:	f040 808c 	bne.w	801ff00 <ThreadGetCurrentTask+0x17c0>
						{
							door_off_state = 0;
 801fde8:	2300      	movs	r3, #0
 801fdea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
							if( ((status_registers.lighting_status_reg)&0x0080) == 0x0080 )
 801fdee:	4b1b      	ldr	r3, [pc, #108]	; (801fe5c <ThreadGetCurrentTask+0x171c>)
 801fdf0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801fdf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801fdf8:	2b00      	cmp	r3, #0
 801fdfa:	f000 8081 	beq.w	801ff00 <ThreadGetCurrentTask+0x17c0>
							{
								osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801fdfe:	4b18      	ldr	r3, [pc, #96]	; (801fe60 <ThreadGetCurrentTask+0x1720>)
 801fe00:	681b      	ldr	r3, [r3, #0]
 801fe02:	f04f 31ff 	mov.w	r1, #4294967295
 801fe06:	4618      	mov	r0, r3
 801fe08:	f7f9 fa4e 	bl	80192a8 <osMutexWait>
								fm25v02_read(2*LIGHTING_STATUS_REG+1, &phase_temp);
 801fe0c:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 801fe10:	4619      	mov	r1, r3
 801fe12:	f242 0063 	movw	r0, #8291	; 0x2063
 801fe16:	f00a fdff 	bl	802aa18 <fm25v02_read>
								phase_temp = phase_temp&0x7F;
 801fe1a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801fe1e:	b2db      	uxtb	r3, r3
 801fe20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801fe24:	b2db      	uxtb	r3, r3
 801fe26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
								fm25v02_write(2*LIGHTING_STATUS_REG+1, phase_temp);
 801fe2a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801fe2e:	b2db      	uxtb	r3, r3
 801fe30:	4619      	mov	r1, r3
 801fe32:	f242 0063 	movw	r0, #8291	; 0x2063
 801fe36:	f00a fe29 	bl	802aa8c <fm25v02_write>
								status_registers.lighting_status_reg = status_registers.lighting_status_reg&0xFF7F;
 801fe3a:	4b08      	ldr	r3, [pc, #32]	; (801fe5c <ThreadGetCurrentTask+0x171c>)
 801fe3c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801fe40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801fe44:	b29a      	uxth	r2, r3
 801fe46:	4b05      	ldr	r3, [pc, #20]	; (801fe5c <ThreadGetCurrentTask+0x171c>)
 801fe48:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
								osMutexRelease(Fm25v02MutexHandle);
 801fe4c:	4b04      	ldr	r3, [pc, #16]	; (801fe60 <ThreadGetCurrentTask+0x1720>)
 801fe4e:	681b      	ldr	r3, [r3, #0]
 801fe50:	4618      	mov	r0, r3
 801fe52:	f7f9 fa77 	bl	8019344 <osMutexRelease>
 801fe56:	e053      	b.n	801ff00 <ThreadGetCurrentTask+0x17c0>
 801fe58:	40020400 	.word	0x40020400
 801fe5c:	2000af40 	.word	0x2000af40
 801fe60:	20009bb8 	.word	0x20009bb8
 801fe64:	2000b000 	.word	0x2000b000
							}
						}
					}
				}
				else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == GPIO_PIN_SET) // если установлен пин двери освещения
 801fe68:	2102      	movs	r1, #2
 801fe6a:	48bb      	ldr	r0, [pc, #748]	; (8020158 <ThreadGetCurrentTask+0x1a18>)
 801fe6c:	f7f4 fcf8 	bl	8014860 <HAL_GPIO_ReadPin>
 801fe70:	4603      	mov	r3, r0
 801fe72:	2b01      	cmp	r3, #1
 801fe74:	d144      	bne.n	801ff00 <ThreadGetCurrentTask+0x17c0>
				{

					door_off_state = 0;
 801fe76:	2300      	movs	r3, #0
 801fe78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

					if(door_on_state<10)
 801fe7c:	7efb      	ldrb	r3, [r7, #27]
 801fe7e:	b2db      	uxtb	r3, r3
 801fe80:	2b09      	cmp	r3, #9
 801fe82:	d83d      	bhi.n	801ff00 <ThreadGetCurrentTask+0x17c0>
					{
						door_on_state++;
 801fe84:	7efb      	ldrb	r3, [r7, #27]
 801fe86:	b2db      	uxtb	r3, r3
 801fe88:	3301      	adds	r3, #1
 801fe8a:	b2db      	uxtb	r3, r3
 801fe8c:	76fb      	strb	r3, [r7, #27]

						if(door_on_state==10)
 801fe8e:	7efb      	ldrb	r3, [r7, #27]
 801fe90:	b2db      	uxtb	r3, r3
 801fe92:	2b0a      	cmp	r3, #10
 801fe94:	d134      	bne.n	801ff00 <ThreadGetCurrentTask+0x17c0>
						{
							door_on_state = 0;
 801fe96:	2300      	movs	r3, #0
 801fe98:	76fb      	strb	r3, [r7, #27]

							if( ((status_registers.lighting_status_reg)&0x0080) == 0x0000 )
 801fe9a:	4bb0      	ldr	r3, [pc, #704]	; (802015c <ThreadGetCurrentTask+0x1a1c>)
 801fe9c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801fea0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801fea4:	2b00      	cmp	r3, #0
 801fea6:	d12b      	bne.n	801ff00 <ThreadGetCurrentTask+0x17c0>
							{
								osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801fea8:	4bad      	ldr	r3, [pc, #692]	; (8020160 <ThreadGetCurrentTask+0x1a20>)
 801feaa:	681b      	ldr	r3, [r3, #0]
 801feac:	f04f 31ff 	mov.w	r1, #4294967295
 801feb0:	4618      	mov	r0, r3
 801feb2:	f7f9 f9f9 	bl	80192a8 <osMutexWait>
								fm25v02_read(2*LIGHTING_STATUS_REG+1, &phase_temp);
 801feb6:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 801feba:	4619      	mov	r1, r3
 801febc:	f242 0063 	movw	r0, #8291	; 0x2063
 801fec0:	f00a fdaa 	bl	802aa18 <fm25v02_read>
								phase_temp = phase_temp|0x80;
 801fec4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801fec8:	b2db      	uxtb	r3, r3
 801feca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801fece:	b2db      	uxtb	r3, r3
 801fed0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
								fm25v02_write(2*LIGHTING_STATUS_REG+1, phase_temp);
 801fed4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801fed8:	b2db      	uxtb	r3, r3
 801feda:	4619      	mov	r1, r3
 801fedc:	f242 0063 	movw	r0, #8291	; 0x2063
 801fee0:	f00a fdd4 	bl	802aa8c <fm25v02_write>
								status_registers.lighting_status_reg = status_registers.lighting_status_reg|0x0080;
 801fee4:	4b9d      	ldr	r3, [pc, #628]	; (802015c <ThreadGetCurrentTask+0x1a1c>)
 801fee6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801feea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801feee:	b29a      	uxth	r2, r3
 801fef0:	4b9a      	ldr	r3, [pc, #616]	; (802015c <ThreadGetCurrentTask+0x1a1c>)
 801fef2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
								osMutexRelease(Fm25v02MutexHandle);
 801fef6:	4b9a      	ldr	r3, [pc, #616]	; (8020160 <ThreadGetCurrentTask+0x1a20>)
 801fef8:	681b      	ldr	r3, [r3, #0]
 801fefa:	4618      	mov	r0, r3
 801fefc:	f7f9 fa22 	bl	8019344 <osMutexRelease>

			//break;

		//}

				if(control_registers.lighting_switching_reg == LIGHTING_ON) // если функция освещения включена
 801ff00:	4b98      	ldr	r3, [pc, #608]	; (8020164 <ThreadGetCurrentTask+0x1a24>)
 801ff02:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801ff06:	2b01      	cmp	r3, #1
 801ff08:	f040 8111 	bne.w	802012e <ThreadGetCurrentTask+0x19ee>
				{
					switch(control_registers.light_control_reg&0x01) // проверяем бит фазы А
 801ff0c:	4b95      	ldr	r3, [pc, #596]	; (8020164 <ThreadGetCurrentTask+0x1a24>)
 801ff0e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 801ff12:	f003 0301 	and.w	r3, r3, #1
 801ff16:	2b00      	cmp	r3, #0
 801ff18:	d002      	beq.n	801ff20 <ThreadGetCurrentTask+0x17e0>
 801ff1a:	2b01      	cmp	r3, #1
 801ff1c:	d024      	beq.n	801ff68 <ThreadGetCurrentTask+0x1828>
 801ff1e:	e051      	b.n	801ffc4 <ThreadGetCurrentTask+0x1884>
					{
						case(PHASE_A_SWITCH_OFF): // если выставлен бит на выключение фазы А

							PHASE_A_OFF(); // выключаем фазу А
 801ff20:	f00a ff5e 	bl	802ade0 <PHASE_A_OFF>

							if(phase_a_off_state == 0)
 801ff24:	4b90      	ldr	r3, [pc, #576]	; (8020168 <ThreadGetCurrentTask+0x1a28>)
 801ff26:	781b      	ldrb	r3, [r3, #0]
 801ff28:	b2db      	uxtb	r3, r3
 801ff2a:	2b00      	cmp	r3, #0
 801ff2c:	d147      	bne.n	801ffbe <ThreadGetCurrentTask+0x187e>
							{
								phase_a_off_state = 1;
 801ff2e:	4b8e      	ldr	r3, [pc, #568]	; (8020168 <ThreadGetCurrentTask+0x1a28>)
 801ff30:	2201      	movs	r2, #1
 801ff32:	701a      	strb	r2, [r3, #0]

								phase_a_on_state = 0;
 801ff34:	4b8d      	ldr	r3, [pc, #564]	; (802016c <ThreadGetCurrentTask+0x1a2c>)
 801ff36:	2200      	movs	r2, #0
 801ff38:	701a      	strb	r2, [r3, #0]

								osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801ff3a:	4b89      	ldr	r3, [pc, #548]	; (8020160 <ThreadGetCurrentTask+0x1a20>)
 801ff3c:	681b      	ldr	r3, [r3, #0]
 801ff3e:	f04f 31ff 	mov.w	r1, #4294967295
 801ff42:	4618      	mov	r0, r3
 801ff44:	f7f9 f9b0 	bl	80192a8 <osMutexWait>
								fm25v02_write(2*GPRS_CALL_REG, 0x00);
 801ff48:	2100      	movs	r1, #0
 801ff4a:	f242 106e 	movw	r0, #8558	; 0x216e
 801ff4e:	f00a fd9d 	bl	802aa8c <fm25v02_write>
								fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
 801ff52:	2101      	movs	r1, #1
 801ff54:	f242 106f 	movw	r0, #8559	; 0x216f
 801ff58:	f00a fd98 	bl	802aa8c <fm25v02_write>
								osMutexRelease(Fm25v02MutexHandle);
 801ff5c:	4b80      	ldr	r3, [pc, #512]	; (8020160 <ThreadGetCurrentTask+0x1a20>)
 801ff5e:	681b      	ldr	r3, [r3, #0]
 801ff60:	4618      	mov	r0, r3
 801ff62:	f7f9 f9ef 	bl	8019344 <osMutexRelease>
							}

						break;
 801ff66:	e02a      	b.n	801ffbe <ThreadGetCurrentTask+0x187e>
						case(PHASE_A_SWITCH_ON): // если выставлен бит на включение фазы А

							if( ((status_registers.lighting_status_reg)&0x0001) == 0x0000 ) // если на фазе А1 нет напряжения
 801ff68:	4b7c      	ldr	r3, [pc, #496]	; (802015c <ThreadGetCurrentTask+0x1a1c>)
 801ff6a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801ff6e:	f003 0301 	and.w	r3, r3, #1
 801ff72:	2b00      	cmp	r3, #0
 801ff74:	d125      	bne.n	801ffc2 <ThreadGetCurrentTask+0x1882>
							{
								PHASE_A_ON(); // включаем фазу А
 801ff76:	f00a ff27 	bl	802adc8 <PHASE_A_ON>

								if(phase_a_on_state == 0)
 801ff7a:	4b7c      	ldr	r3, [pc, #496]	; (802016c <ThreadGetCurrentTask+0x1a2c>)
 801ff7c:	781b      	ldrb	r3, [r3, #0]
 801ff7e:	b2db      	uxtb	r3, r3
 801ff80:	2b00      	cmp	r3, #0
 801ff82:	d11e      	bne.n	801ffc2 <ThreadGetCurrentTask+0x1882>
								{
									phase_a_on_state = 1;
 801ff84:	4b79      	ldr	r3, [pc, #484]	; (802016c <ThreadGetCurrentTask+0x1a2c>)
 801ff86:	2201      	movs	r2, #1
 801ff88:	701a      	strb	r2, [r3, #0]

									phase_a_off_state = 0;
 801ff8a:	4b77      	ldr	r3, [pc, #476]	; (8020168 <ThreadGetCurrentTask+0x1a28>)
 801ff8c:	2200      	movs	r2, #0
 801ff8e:	701a      	strb	r2, [r3, #0]

									osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801ff90:	4b73      	ldr	r3, [pc, #460]	; (8020160 <ThreadGetCurrentTask+0x1a20>)
 801ff92:	681b      	ldr	r3, [r3, #0]
 801ff94:	f04f 31ff 	mov.w	r1, #4294967295
 801ff98:	4618      	mov	r0, r3
 801ff9a:	f7f9 f985 	bl	80192a8 <osMutexWait>
									fm25v02_write(2*GPRS_CALL_REG, 0x00);
 801ff9e:	2100      	movs	r1, #0
 801ffa0:	f242 106e 	movw	r0, #8558	; 0x216e
 801ffa4:	f00a fd72 	bl	802aa8c <fm25v02_write>
									fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
 801ffa8:	2101      	movs	r1, #1
 801ffaa:	f242 106f 	movw	r0, #8559	; 0x216f
 801ffae:	f00a fd6d 	bl	802aa8c <fm25v02_write>
									osMutexRelease(Fm25v02MutexHandle);
 801ffb2:	4b6b      	ldr	r3, [pc, #428]	; (8020160 <ThreadGetCurrentTask+0x1a20>)
 801ffb4:	681b      	ldr	r3, [r3, #0]
 801ffb6:	4618      	mov	r0, r3
 801ffb8:	f7f9 f9c4 	bl	8019344 <osMutexRelease>
								}

							}

						break;
 801ffbc:	e001      	b.n	801ffc2 <ThreadGetCurrentTask+0x1882>
						break;
 801ffbe:	bf00      	nop
 801ffc0:	e000      	b.n	801ffc4 <ThreadGetCurrentTask+0x1884>
						break;
 801ffc2:	bf00      	nop
					}
					switch(control_registers.light_control_reg&0x02) // проверяем бит фазы В
 801ffc4:	4b67      	ldr	r3, [pc, #412]	; (8020164 <ThreadGetCurrentTask+0x1a24>)
 801ffc6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 801ffca:	f003 0302 	and.w	r3, r3, #2
 801ffce:	2b00      	cmp	r3, #0
 801ffd0:	d002      	beq.n	801ffd8 <ThreadGetCurrentTask+0x1898>
 801ffd2:	2b02      	cmp	r3, #2
 801ffd4:	d024      	beq.n	8020020 <ThreadGetCurrentTask+0x18e0>
 801ffd6:	e051      	b.n	802007c <ThreadGetCurrentTask+0x193c>
					{

						case(PHASE_B_SWITCH_OFF): // если выставлен бит на выключение фазы В

							PHASE_B_OFF(); // выключаем фазу А
 801ffd8:	f00a ff1a 	bl	802ae10 <PHASE_B_OFF>

							if(phase_b_off_state == 0)
 801ffdc:	4b64      	ldr	r3, [pc, #400]	; (8020170 <ThreadGetCurrentTask+0x1a30>)
 801ffde:	781b      	ldrb	r3, [r3, #0]
 801ffe0:	b2db      	uxtb	r3, r3
 801ffe2:	2b00      	cmp	r3, #0
 801ffe4:	d147      	bne.n	8020076 <ThreadGetCurrentTask+0x1936>
							{
								phase_b_off_state = 1;
 801ffe6:	4b62      	ldr	r3, [pc, #392]	; (8020170 <ThreadGetCurrentTask+0x1a30>)
 801ffe8:	2201      	movs	r2, #1
 801ffea:	701a      	strb	r2, [r3, #0]

								phase_b_on_state = 0;
 801ffec:	4b61      	ldr	r3, [pc, #388]	; (8020174 <ThreadGetCurrentTask+0x1a34>)
 801ffee:	2200      	movs	r2, #0
 801fff0:	701a      	strb	r2, [r3, #0]

								osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801fff2:	4b5b      	ldr	r3, [pc, #364]	; (8020160 <ThreadGetCurrentTask+0x1a20>)
 801fff4:	681b      	ldr	r3, [r3, #0]
 801fff6:	f04f 31ff 	mov.w	r1, #4294967295
 801fffa:	4618      	mov	r0, r3
 801fffc:	f7f9 f954 	bl	80192a8 <osMutexWait>
								fm25v02_write(2*GPRS_CALL_REG, 0x00);
 8020000:	2100      	movs	r1, #0
 8020002:	f242 106e 	movw	r0, #8558	; 0x216e
 8020006:	f00a fd41 	bl	802aa8c <fm25v02_write>
								fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
 802000a:	2101      	movs	r1, #1
 802000c:	f242 106f 	movw	r0, #8559	; 0x216f
 8020010:	f00a fd3c 	bl	802aa8c <fm25v02_write>
								osMutexRelease(Fm25v02MutexHandle);
 8020014:	4b52      	ldr	r3, [pc, #328]	; (8020160 <ThreadGetCurrentTask+0x1a20>)
 8020016:	681b      	ldr	r3, [r3, #0]
 8020018:	4618      	mov	r0, r3
 802001a:	f7f9 f993 	bl	8019344 <osMutexRelease>
							}

						break;
 802001e:	e02a      	b.n	8020076 <ThreadGetCurrentTask+0x1936>

						case(PHASE_B_SWITCH_ON): //если выставлен бит на включение фазы В

							if( ((status_registers.lighting_status_reg)&0x0002) == 0x0000 ) // если на фазе В1 нет напряжения
 8020020:	4b4e      	ldr	r3, [pc, #312]	; (802015c <ThreadGetCurrentTask+0x1a1c>)
 8020022:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8020026:	f003 0302 	and.w	r3, r3, #2
 802002a:	2b00      	cmp	r3, #0
 802002c:	d125      	bne.n	802007a <ThreadGetCurrentTask+0x193a>
							{
								PHASE_B_ON(); // включаем фазу А
 802002e:	f00a fee3 	bl	802adf8 <PHASE_B_ON>

								if(phase_b_on_state == 0)
 8020032:	4b50      	ldr	r3, [pc, #320]	; (8020174 <ThreadGetCurrentTask+0x1a34>)
 8020034:	781b      	ldrb	r3, [r3, #0]
 8020036:	b2db      	uxtb	r3, r3
 8020038:	2b00      	cmp	r3, #0
 802003a:	d11e      	bne.n	802007a <ThreadGetCurrentTask+0x193a>
								{
									phase_b_on_state = 1;
 802003c:	4b4d      	ldr	r3, [pc, #308]	; (8020174 <ThreadGetCurrentTask+0x1a34>)
 802003e:	2201      	movs	r2, #1
 8020040:	701a      	strb	r2, [r3, #0]

									phase_b_off_state = 0;
 8020042:	4b4b      	ldr	r3, [pc, #300]	; (8020170 <ThreadGetCurrentTask+0x1a30>)
 8020044:	2200      	movs	r2, #0
 8020046:	701a      	strb	r2, [r3, #0]

									osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8020048:	4b45      	ldr	r3, [pc, #276]	; (8020160 <ThreadGetCurrentTask+0x1a20>)
 802004a:	681b      	ldr	r3, [r3, #0]
 802004c:	f04f 31ff 	mov.w	r1, #4294967295
 8020050:	4618      	mov	r0, r3
 8020052:	f7f9 f929 	bl	80192a8 <osMutexWait>
									fm25v02_write(2*GPRS_CALL_REG, 0x00);
 8020056:	2100      	movs	r1, #0
 8020058:	f242 106e 	movw	r0, #8558	; 0x216e
 802005c:	f00a fd16 	bl	802aa8c <fm25v02_write>
									fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
 8020060:	2101      	movs	r1, #1
 8020062:	f242 106f 	movw	r0, #8559	; 0x216f
 8020066:	f00a fd11 	bl	802aa8c <fm25v02_write>
									osMutexRelease(Fm25v02MutexHandle);
 802006a:	4b3d      	ldr	r3, [pc, #244]	; (8020160 <ThreadGetCurrentTask+0x1a20>)
 802006c:	681b      	ldr	r3, [r3, #0]
 802006e:	4618      	mov	r0, r3
 8020070:	f7f9 f968 	bl	8019344 <osMutexRelease>
								}
							}

						break;
 8020074:	e001      	b.n	802007a <ThreadGetCurrentTask+0x193a>
						break;
 8020076:	bf00      	nop
 8020078:	e000      	b.n	802007c <ThreadGetCurrentTask+0x193c>
						break;
 802007a:	bf00      	nop

					}
					switch(control_registers.light_control_reg&0x04) // проверяяем бит фазы С
 802007c:	4b39      	ldr	r3, [pc, #228]	; (8020164 <ThreadGetCurrentTask+0x1a24>)
 802007e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8020082:	f003 0304 	and.w	r3, r3, #4
 8020086:	2b00      	cmp	r3, #0
 8020088:	d002      	beq.n	8020090 <ThreadGetCurrentTask+0x1950>
 802008a:	2b04      	cmp	r3, #4
 802008c:	d024      	beq.n	80200d8 <ThreadGetCurrentTask+0x1998>
 802008e:	e05d      	b.n	802014c <ThreadGetCurrentTask+0x1a0c>
					{

						case(PHASE_C_SWITCH_OFF): // если выставлен бит на выключение фазы С

							PHASE_C_OFF(); // выключаем фазу А
 8020090:	f00a fed6 	bl	802ae40 <PHASE_C_OFF>

							if(phase_c_off_state == 0)
 8020094:	4b38      	ldr	r3, [pc, #224]	; (8020178 <ThreadGetCurrentTask+0x1a38>)
 8020096:	781b      	ldrb	r3, [r3, #0]
 8020098:	b2db      	uxtb	r3, r3
 802009a:	2b00      	cmp	r3, #0
 802009c:	d153      	bne.n	8020146 <ThreadGetCurrentTask+0x1a06>
							{
								phase_c_off_state = 1;
 802009e:	4b36      	ldr	r3, [pc, #216]	; (8020178 <ThreadGetCurrentTask+0x1a38>)
 80200a0:	2201      	movs	r2, #1
 80200a2:	701a      	strb	r2, [r3, #0]

								phase_c_on_state = 0;
 80200a4:	4b35      	ldr	r3, [pc, #212]	; (802017c <ThreadGetCurrentTask+0x1a3c>)
 80200a6:	2200      	movs	r2, #0
 80200a8:	701a      	strb	r2, [r3, #0]

								osMutexWait(Fm25v02MutexHandle, osWaitForever);
 80200aa:	4b2d      	ldr	r3, [pc, #180]	; (8020160 <ThreadGetCurrentTask+0x1a20>)
 80200ac:	681b      	ldr	r3, [r3, #0]
 80200ae:	f04f 31ff 	mov.w	r1, #4294967295
 80200b2:	4618      	mov	r0, r3
 80200b4:	f7f9 f8f8 	bl	80192a8 <osMutexWait>
								fm25v02_write(2*GPRS_CALL_REG, 0x00);
 80200b8:	2100      	movs	r1, #0
 80200ba:	f242 106e 	movw	r0, #8558	; 0x216e
 80200be:	f00a fce5 	bl	802aa8c <fm25v02_write>
								fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
 80200c2:	2101      	movs	r1, #1
 80200c4:	f242 106f 	movw	r0, #8559	; 0x216f
 80200c8:	f00a fce0 	bl	802aa8c <fm25v02_write>
								osMutexRelease(Fm25v02MutexHandle);
 80200cc:	4b24      	ldr	r3, [pc, #144]	; (8020160 <ThreadGetCurrentTask+0x1a20>)
 80200ce:	681b      	ldr	r3, [r3, #0]
 80200d0:	4618      	mov	r0, r3
 80200d2:	f7f9 f937 	bl	8019344 <osMutexRelease>
							}

						break;
 80200d6:	e036      	b.n	8020146 <ThreadGetCurrentTask+0x1a06>

						case(PHASE_C_SWITCH_ON): // если выставлен бит на включение фазы С

							if( ((status_registers.lighting_status_reg)&0x0004) == 0x0000 ) // если на фазе В1 нет напряжения
 80200d8:	4b20      	ldr	r3, [pc, #128]	; (802015c <ThreadGetCurrentTask+0x1a1c>)
 80200da:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80200de:	f003 0304 	and.w	r3, r3, #4
 80200e2:	2b00      	cmp	r3, #0
 80200e4:	d131      	bne.n	802014a <ThreadGetCurrentTask+0x1a0a>
							{
								PHASE_C_ON(); // включаем фазу А
 80200e6:	f00a fe9f 	bl	802ae28 <PHASE_C_ON>

								if(phase_c_on_state == 0)
 80200ea:	4b24      	ldr	r3, [pc, #144]	; (802017c <ThreadGetCurrentTask+0x1a3c>)
 80200ec:	781b      	ldrb	r3, [r3, #0]
 80200ee:	b2db      	uxtb	r3, r3
 80200f0:	2b00      	cmp	r3, #0
 80200f2:	d12a      	bne.n	802014a <ThreadGetCurrentTask+0x1a0a>
								{
									phase_c_on_state = 1;
 80200f4:	4b21      	ldr	r3, [pc, #132]	; (802017c <ThreadGetCurrentTask+0x1a3c>)
 80200f6:	2201      	movs	r2, #1
 80200f8:	701a      	strb	r2, [r3, #0]

									phase_c_off_state = 0;
 80200fa:	4b1f      	ldr	r3, [pc, #124]	; (8020178 <ThreadGetCurrentTask+0x1a38>)
 80200fc:	2200      	movs	r2, #0
 80200fe:	701a      	strb	r2, [r3, #0]

									osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8020100:	4b17      	ldr	r3, [pc, #92]	; (8020160 <ThreadGetCurrentTask+0x1a20>)
 8020102:	681b      	ldr	r3, [r3, #0]
 8020104:	f04f 31ff 	mov.w	r1, #4294967295
 8020108:	4618      	mov	r0, r3
 802010a:	f7f9 f8cd 	bl	80192a8 <osMutexWait>
									fm25v02_write(2*GPRS_CALL_REG, 0x00);
 802010e:	2100      	movs	r1, #0
 8020110:	f242 106e 	movw	r0, #8558	; 0x216e
 8020114:	f00a fcba 	bl	802aa8c <fm25v02_write>
									fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
 8020118:	2101      	movs	r1, #1
 802011a:	f242 106f 	movw	r0, #8559	; 0x216f
 802011e:	f00a fcb5 	bl	802aa8c <fm25v02_write>
									osMutexRelease(Fm25v02MutexHandle);
 8020122:	4b0f      	ldr	r3, [pc, #60]	; (8020160 <ThreadGetCurrentTask+0x1a20>)
 8020124:	681b      	ldr	r3, [r3, #0]
 8020126:	4618      	mov	r0, r3
 8020128:	f7f9 f90c 	bl	8019344 <osMutexRelease>
								}
							}

						break;
 802012c:	e00d      	b.n	802014a <ThreadGetCurrentTask+0x1a0a>

					}
				}
				else if(control_registers.lighting_switching_reg == LIGHTING_OFF) // если функция освещения выключена
 802012e:	4b0d      	ldr	r3, [pc, #52]	; (8020164 <ThreadGetCurrentTask+0x1a24>)
 8020130:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8020134:	2b00      	cmp	r3, #0
 8020136:	d109      	bne.n	802014c <ThreadGetCurrentTask+0x1a0c>
				{

					PHASE_A_OFF(); // отключаем фазу А
 8020138:	f00a fe52 	bl	802ade0 <PHASE_A_OFF>

					PHASE_B_OFF(); // отключаем фазу В
 802013c:	f00a fe68 	bl	802ae10 <PHASE_B_OFF>

					PHASE_C_OFF(); // отключаем фазу С
 8020140:	f00a fe7e 	bl	802ae40 <PHASE_C_OFF>
 8020144:	e002      	b.n	802014c <ThreadGetCurrentTask+0x1a0c>
						break;
 8020146:	bf00      	nop
 8020148:	e000      	b.n	802014c <ThreadGetCurrentTask+0x1a0c>
						break;
 802014a:	bf00      	nop

				}

		osDelay(1);
 802014c:	2001      	movs	r0, #1
 802014e:	f7f8 ffca 	bl	80190e6 <osDelay>
					if(cur_a > (control_registers.max_current_phase_a)*10 ) // проверяем если значение тока превысило максимальное значение тока фазы А
 8020152:	f7fe bb4c 	b.w	801e7ee <ThreadGetCurrentTask+0xae>
 8020156:	bf00      	nop
 8020158:	40020400 	.word	0x40020400
 802015c:	2000af40 	.word	0x2000af40
 8020160:	20009bb8 	.word	0x20009bb8
 8020164:	2000b000 	.word	0x2000b000
 8020168:	2000801a 	.word	0x2000801a
 802016c:	2000801d 	.word	0x2000801d
 8020170:	2000801b 	.word	0x2000801b
 8020174:	2000801e 	.word	0x2000801e
 8020178:	2000801c 	.word	0x2000801c
 802017c:	2000801f 	.word	0x2000801f

08020180 <ThreadM95Task>:
uint8_t test_h;
uint8_t test_l;


void ThreadM95Task(void const * argument)
{
 8020180:	b590      	push	{r4, r7, lr}
 8020182:	b085      	sub	sp, #20
 8020184:	af02      	add	r7, sp, #8
 8020186:	6078      	str	r0, [r7, #4]

	osThreadSuspend(M95TaskHandle);
 8020188:	4b7f      	ldr	r3, [pc, #508]	; (8020388 <ThreadM95Task+0x208>)
 802018a:	681b      	ldr	r3, [r3, #0]
 802018c:	4618      	mov	r0, r3
 802018e:	f7f9 faa1 	bl	80196d4 <osThreadSuspend>
	osSemaphoreWait(TransmissionStateHandle, osWaitForever); // обнуляем семафор, при создании семафора его значение равно 1
 8020192:	4b7e      	ldr	r3, [pc, #504]	; (802038c <ThreadM95Task+0x20c>)
 8020194:	681b      	ldr	r3, [r3, #0]
 8020196:	f04f 31ff 	mov.w	r1, #4294967295
 802019a:	4618      	mov	r0, r3
 802019c:	f7f9 f93a 	bl	8019414 <osSemaphoreWait>
	osSemaphoreWait(ReceiveStateHandle, osWaitForever); // обнуляем семафор, при создании семафора его значение равно 1
 80201a0:	4b7b      	ldr	r3, [pc, #492]	; (8020390 <ThreadM95Task+0x210>)
 80201a2:	681b      	ldr	r3, [r3, #0]
 80201a4:	f04f 31ff 	mov.w	r1, #4294967295
 80201a8:	4618      	mov	r0, r3
 80201aa:	f7f9 f933 	bl	8019414 <osSemaphoreWait>

	osTimerStart(Ring_Center_TimerHandle, 60000); // запускаем таймер для перезагрузки по его окончанию
 80201ae:	4b79      	ldr	r3, [pc, #484]	; (8020394 <ThreadM95Task+0x214>)
 80201b0:	681b      	ldr	r3, [r3, #0]
 80201b2:	f64e 2160 	movw	r1, #60000	; 0xea60
 80201b6:	4618      	mov	r0, r3
 80201b8:	f7f8 ffde 	bl	8019178 <osTimerStart>



	osMutexWait(Fm25v02MutexHandle, osWaitForever);
 80201bc:	4b76      	ldr	r3, [pc, #472]	; (8020398 <ThreadM95Task+0x218>)
 80201be:	681b      	ldr	r3, [r3, #0]
 80201c0:	f04f 31ff 	mov.w	r1, #4294967295
 80201c4:	4618      	mov	r0, r3
 80201c6:	f7f9 f86f 	bl	80192a8 <osMutexWait>
	fm25v02_write(2*VERSION_REG, 0x01);
 80201ca:	2101      	movs	r1, #1
 80201cc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80201d0:	f00a fc5c 	bl	802aa8c <fm25v02_write>
	fm25v02_write(2*VERSION_REG+1, 0x0E);
 80201d4:	210e      	movs	r1, #14
 80201d6:	f242 0001 	movw	r0, #8193	; 0x2001
 80201da:	f00a fc57 	bl	802aa8c <fm25v02_write>
	osMutexRelease(Fm25v02MutexHandle);
 80201de:	4b6e      	ldr	r3, [pc, #440]	; (8020398 <ThreadM95Task+0x218>)
 80201e0:	681b      	ldr	r3, [r3, #0]
 80201e2:	4618      	mov	r0, r3
 80201e4:	f7f9 f8ae 	bl	8019344 <osMutexRelease>


	for(;;)
	{

		osMutexWait(Fm25v02MutexHandle, osWaitForever);
 80201e8:	4b6b      	ldr	r3, [pc, #428]	; (8020398 <ThreadM95Task+0x218>)
 80201ea:	681b      	ldr	r3, [r3, #0]
 80201ec:	f04f 31ff 	mov.w	r1, #4294967295
 80201f0:	4618      	mov	r0, r3
 80201f2:	f7f9 f859 	bl	80192a8 <osMutexWait>

		fm25v02_read(2*IP_1_REG+1, &ip1); // читаем значение IP адреса сервера из памяти
 80201f6:	4969      	ldr	r1, [pc, #420]	; (802039c <ThreadM95Task+0x21c>)
 80201f8:	f242 105f 	movw	r0, #8543	; 0x215f
 80201fc:	f00a fc0c 	bl	802aa18 <fm25v02_read>
		fm25v02_read(2*IP_2_REG+1, &ip2);
 8020200:	4967      	ldr	r1, [pc, #412]	; (80203a0 <ThreadM95Task+0x220>)
 8020202:	f242 1061 	movw	r0, #8545	; 0x2161
 8020206:	f00a fc07 	bl	802aa18 <fm25v02_read>
		fm25v02_read(2*IP_3_REG+1, &ip3);
 802020a:	4966      	ldr	r1, [pc, #408]	; (80203a4 <ThreadM95Task+0x224>)
 802020c:	f242 1063 	movw	r0, #8547	; 0x2163
 8020210:	f00a fc02 	bl	802aa18 <fm25v02_read>
		fm25v02_read(2*IP_4_REG+1, &ip4);
 8020214:	4964      	ldr	r1, [pc, #400]	; (80203a8 <ThreadM95Task+0x228>)
 8020216:	f242 1065 	movw	r0, #8549	; 0x2165
 802021a:	f00a fbfd 	bl	802aa18 <fm25v02_read>
		fm25v02_read(2*PORT_HIGH_REG+1, &port_high_reg); // читаем значение старшего байта порта сервера
 802021e:	4963      	ldr	r1, [pc, #396]	; (80203ac <ThreadM95Task+0x22c>)
 8020220:	f242 1067 	movw	r0, #8551	; 0x2167
 8020224:	f00a fbf8 	bl	802aa18 <fm25v02_read>
		fm25v02_read(2*PORT_LOW_REG+1, &port_low_reg); // читаем занчение младшего байта порта сервера
 8020228:	4961      	ldr	r1, [pc, #388]	; (80203b0 <ThreadM95Task+0x230>)
 802022a:	f242 1069 	movw	r0, #8553	; 0x2169
 802022e:	f00a fbf3 	bl	802aa18 <fm25v02_read>

		osMutexRelease(Fm25v02MutexHandle);
 8020232:	4b59      	ldr	r3, [pc, #356]	; (8020398 <ThreadM95Task+0x218>)
 8020234:	681b      	ldr	r3, [r3, #0]
 8020236:	4618      	mov	r0, r3
 8020238:	f7f9 f884 	bl	8019344 <osMutexRelease>

		port = (((uint16_t)port_high_reg)<<8)|((uint16_t)port_low_reg); // вычисляем общее значение регистра порта
 802023c:	4b5b      	ldr	r3, [pc, #364]	; (80203ac <ThreadM95Task+0x22c>)
 802023e:	781b      	ldrb	r3, [r3, #0]
 8020240:	b2db      	uxtb	r3, r3
 8020242:	021b      	lsls	r3, r3, #8
 8020244:	b21a      	sxth	r2, r3
 8020246:	4b5a      	ldr	r3, [pc, #360]	; (80203b0 <ThreadM95Task+0x230>)
 8020248:	781b      	ldrb	r3, [r3, #0]
 802024a:	b2db      	uxtb	r3, r3
 802024c:	b21b      	sxth	r3, r3
 802024e:	4313      	orrs	r3, r2
 8020250:	b21b      	sxth	r3, r3
 8020252:	b29a      	uxth	r2, r3
 8020254:	4b57      	ldr	r3, [pc, #348]	; (80203b4 <ThreadM95Task+0x234>)
 8020256:	801a      	strh	r2, [r3, #0]

		if ( (ip1==0)&&(ip2==0)&&(ip3==0)&&(ip4==0)&&(port==0) ) // Если значения ip адреса сервера и его номера порта при инициализации нулевые, то выставляем их значения по умолчанию
 8020258:	4b50      	ldr	r3, [pc, #320]	; (802039c <ThreadM95Task+0x21c>)
 802025a:	781b      	ldrb	r3, [r3, #0]
 802025c:	b2db      	uxtb	r3, r3
 802025e:	2b00      	cmp	r3, #0
 8020260:	d123      	bne.n	80202aa <ThreadM95Task+0x12a>
 8020262:	4b4f      	ldr	r3, [pc, #316]	; (80203a0 <ThreadM95Task+0x220>)
 8020264:	781b      	ldrb	r3, [r3, #0]
 8020266:	b2db      	uxtb	r3, r3
 8020268:	2b00      	cmp	r3, #0
 802026a:	d11e      	bne.n	80202aa <ThreadM95Task+0x12a>
 802026c:	4b4d      	ldr	r3, [pc, #308]	; (80203a4 <ThreadM95Task+0x224>)
 802026e:	781b      	ldrb	r3, [r3, #0]
 8020270:	b2db      	uxtb	r3, r3
 8020272:	2b00      	cmp	r3, #0
 8020274:	d119      	bne.n	80202aa <ThreadM95Task+0x12a>
 8020276:	4b4c      	ldr	r3, [pc, #304]	; (80203a8 <ThreadM95Task+0x228>)
 8020278:	781b      	ldrb	r3, [r3, #0]
 802027a:	b2db      	uxtb	r3, r3
 802027c:	2b00      	cmp	r3, #0
 802027e:	d114      	bne.n	80202aa <ThreadM95Task+0x12a>
 8020280:	4b4c      	ldr	r3, [pc, #304]	; (80203b4 <ThreadM95Task+0x234>)
 8020282:	881b      	ldrh	r3, [r3, #0]
 8020284:	b29b      	uxth	r3, r3
 8020286:	2b00      	cmp	r3, #0
 8020288:	d10f      	bne.n	80202aa <ThreadM95Task+0x12a>
		{
			// сервер сигнализации
			ip1 = 195;    // значение по умолчанию
 802028a:	4b44      	ldr	r3, [pc, #272]	; (802039c <ThreadM95Task+0x21c>)
 802028c:	22c3      	movs	r2, #195	; 0xc3
 802028e:	701a      	strb	r2, [r3, #0]
			ip2 = 208;    // значение по умолчанию
 8020290:	4b43      	ldr	r3, [pc, #268]	; (80203a0 <ThreadM95Task+0x220>)
 8020292:	22d0      	movs	r2, #208	; 0xd0
 8020294:	701a      	strb	r2, [r3, #0]
			ip3 = 163;    // значение по умолчанию
 8020296:	4b43      	ldr	r3, [pc, #268]	; (80203a4 <ThreadM95Task+0x224>)
 8020298:	22a3      	movs	r2, #163	; 0xa3
 802029a:	701a      	strb	r2, [r3, #0]
			ip4 = 67;     // значение по умолчанию
 802029c:	4b42      	ldr	r3, [pc, #264]	; (80203a8 <ThreadM95Task+0x228>)
 802029e:	2243      	movs	r2, #67	; 0x43
 80202a0:	701a      	strb	r2, [r3, #0]
			port = 35050; // значение по умолчанию
 80202a2:	4b44      	ldr	r3, [pc, #272]	; (80203b4 <ThreadM95Task+0x234>)
 80202a4:	f648 02ea 	movw	r2, #35050	; 0x88ea
 80202a8:	801a      	strh	r2, [r3, #0]
		{
			m95_power_on();
		}
		*/

		osMutexWait(UartMutexHandle, osWaitForever);
 80202aa:	4b43      	ldr	r3, [pc, #268]	; (80203b8 <ThreadM95Task+0x238>)
 80202ac:	681b      	ldr	r3, [r3, #0]
 80202ae:	f04f 31ff 	mov.w	r1, #4294967295
 80202b2:	4618      	mov	r0, r3
 80202b4:	f7f8 fff8 	bl	80192a8 <osMutexWait>

		if(AT()==AT_ERROR) // два раза проверяем, есть ли ответ на команду АТ, если нет, включаем питание
 80202b8:	f00a feb2 	bl	802b020 <AT>
 80202bc:	4603      	mov	r3, r0
 80202be:	2b01      	cmp	r3, #1
 80202c0:	d106      	bne.n	80202d0 <ThreadM95Task+0x150>
		{
			if(AT()==AT_ERROR)
 80202c2:	f00a fead 	bl	802b020 <AT>
 80202c6:	4603      	mov	r3, r0
 80202c8:	2b01      	cmp	r3, #1
 80202ca:	d101      	bne.n	80202d0 <ThreadM95Task+0x150>
			{
				m95_power_on();
 80202cc:	f00a fdf8 	bl	802aec0 <m95_power_on>
			}
		}

		if( ATE0() == AT_OK )
 80202d0:	f00a fe50 	bl	802af74 <ATE0>
		{

		}

		osMutexRelease(UartMutexHandle);
 80202d4:	4b38      	ldr	r3, [pc, #224]	; (80203b8 <ThreadM95Task+0x238>)
 80202d6:	681b      	ldr	r3, [r3, #0]
 80202d8:	4618      	mov	r0, r3
 80202da:	f7f9 f833 	bl	8019344 <osMutexRelease>

		osMutexWait(UartMutexHandle, osWaitForever);
 80202de:	4b36      	ldr	r3, [pc, #216]	; (80203b8 <ThreadM95Task+0x238>)
 80202e0:	681b      	ldr	r3, [r3, #0]
 80202e2:	f04f 31ff 	mov.w	r1, #4294967295
 80202e6:	4618      	mov	r0, r3
 80202e8:	f7f8 ffde 	bl	80192a8 <osMutexWait>

		switch( AT_CIPSTATUS() )
 80202ec:	f00a ff88 	bl	802b200 <AT_CIPSTATUS>
 80202f0:	4603      	mov	r3, r0
 80202f2:	3b02      	subs	r3, #2
 80202f4:	2b0b      	cmp	r3, #11
 80202f6:	f200 8145 	bhi.w	8020584 <ThreadM95Task+0x404>
 80202fa:	a201      	add	r2, pc, #4	; (adr r2, 8020300 <ThreadM95Task+0x180>)
 80202fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020300:	08020331 	.word	0x08020331
 8020304:	08020341 	.word	0x08020341
 8020308:	08020585 	.word	0x08020585
 802030c:	08020585 	.word	0x08020585
 8020310:	0802034b 	.word	0x0802034b
 8020314:	08020355 	.word	0x08020355
 8020318:	0802057d 	.word	0x0802057d
 802031c:	08020585 	.word	0x08020585
 8020320:	08020585 	.word	0x08020585
 8020324:	080203c9 	.word	0x080203c9
 8020328:	08020573 	.word	0x08020573
 802032c:	08020537 	.word	0x08020537
		{

			case IP_INITIAL:

				LED1_OFF();
 8020330:	f00a fc80 	bl	802ac34 <LED1_OFF>

				AT_CSTT("internet.mts.ru","mts","mts");
 8020334:	4a21      	ldr	r2, [pc, #132]	; (80203bc <ThreadM95Task+0x23c>)
 8020336:	4921      	ldr	r1, [pc, #132]	; (80203bc <ThreadM95Task+0x23c>)
 8020338:	4821      	ldr	r0, [pc, #132]	; (80203c0 <ThreadM95Task+0x240>)
 802033a:	f00b f89d 	bl	802b478 <AT_CSTT>

			break;
 802033e:	e121      	b.n	8020584 <ThreadM95Task+0x404>

			case IP_START:

				LED1_OFF();
 8020340:	f00a fc78 	bl	802ac34 <LED1_OFF>

				AT_CIICR();
 8020344:	f00b f914 	bl	802b570 <AT_CIICR>

			break;
 8020348:	e11c      	b.n	8020584 <ThreadM95Task+0x404>

			case IP_GPRSACT:

				LED1_OFF();
 802034a:	f00a fc73 	bl	802ac34 <LED1_OFF>

				AT_CIFSR();
 802034e:	f00b f979 	bl	802b644 <AT_CIFSR>

			break;
 8020352:	e117      	b.n	8020584 <ThreadM95Task+0x404>

			case IP_STATUS:

				LED1_OFF();
 8020354:	f00a fc6e 	bl	802ac34 <LED1_OFF>

				AT_CIPSTART("TCP", ip1, ip2, ip3, ip4, port);
 8020358:	4b10      	ldr	r3, [pc, #64]	; (802039c <ThreadM95Task+0x21c>)
 802035a:	781b      	ldrb	r3, [r3, #0]
 802035c:	b2d9      	uxtb	r1, r3
 802035e:	4b10      	ldr	r3, [pc, #64]	; (80203a0 <ThreadM95Task+0x220>)
 8020360:	781b      	ldrb	r3, [r3, #0]
 8020362:	b2d8      	uxtb	r0, r3
 8020364:	4b0f      	ldr	r3, [pc, #60]	; (80203a4 <ThreadM95Task+0x224>)
 8020366:	781b      	ldrb	r3, [r3, #0]
 8020368:	b2dc      	uxtb	r4, r3
 802036a:	4b0f      	ldr	r3, [pc, #60]	; (80203a8 <ThreadM95Task+0x228>)
 802036c:	781b      	ldrb	r3, [r3, #0]
 802036e:	b2db      	uxtb	r3, r3
 8020370:	4a10      	ldr	r2, [pc, #64]	; (80203b4 <ThreadM95Task+0x234>)
 8020372:	8812      	ldrh	r2, [r2, #0]
 8020374:	b292      	uxth	r2, r2
 8020376:	9201      	str	r2, [sp, #4]
 8020378:	9300      	str	r3, [sp, #0]
 802037a:	4623      	mov	r3, r4
 802037c:	4602      	mov	r2, r0
 802037e:	4811      	ldr	r0, [pc, #68]	; (80203c4 <ThreadM95Task+0x244>)
 8020380:	f00b f9ca 	bl	802b718 <AT_CIPSTART>

			break;
 8020384:	e0fe      	b.n	8020584 <ThreadM95Task+0x404>
 8020386:	bf00      	nop
 8020388:	20009a08 	.word	0x20009a08
 802038c:	20009ea0 	.word	0x20009ea0
 8020390:	20009eb8 	.word	0x20009eb8
 8020394:	20009724 	.word	0x20009724
 8020398:	20009bb8 	.word	0x20009bb8
 802039c:	20008020 	.word	0x20008020
 80203a0:	20008021 	.word	0x20008021
 80203a4:	20008022 	.word	0x20008022
 80203a8:	20008023 	.word	0x20008023
 80203ac:	20008024 	.word	0x20008024
 80203b0:	20008025 	.word	0x20008025
 80203b4:	20008026 	.word	0x20008026
 80203b8:	2000971c 	.word	0x2000971c
 80203bc:	0802fd40 	.word	0x0802fd40
 80203c0:	0802fd44 	.word	0x0802fd44
 80203c4:	0802fd54 	.word	0x0802fd54

			case CONNECT_OK:

				osThreadResume(CallRingCenterTaskHandle); // пробуждаем процесс запроса к серверу
 80203c8:	4b73      	ldr	r3, [pc, #460]	; (8020598 <ThreadM95Task+0x418>)
 80203ca:	681b      	ldr	r3, [r3, #0]
 80203cc:	4618      	mov	r0, r3
 80203ce:	f7f9 f98d 	bl	80196ec <osThreadResume>

				LED1_ON();
 80203d2:	f00a fc3b 	bl	802ac4c <LED1_ON>

				if( AT_CSQ(&level) == AT_OK )
 80203d6:	4871      	ldr	r0, [pc, #452]	; (802059c <ThreadM95Task+0x41c>)
 80203d8:	f00a fe94 	bl	802b104 <AT_CSQ>
 80203dc:	4603      	mov	r3, r0
 80203de:	2b00      	cmp	r3, #0
 80203e0:	d117      	bne.n	8020412 <ThreadM95Task+0x292>
				{
					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 80203e2:	4b6f      	ldr	r3, [pc, #444]	; (80205a0 <ThreadM95Task+0x420>)
 80203e4:	681b      	ldr	r3, [r3, #0]
 80203e6:	f04f 31ff 	mov.w	r1, #4294967295
 80203ea:	4618      	mov	r0, r3
 80203ec:	f7f8 ff5c 	bl	80192a8 <osMutexWait>
					fm25v02_write(2*SIGNAL_LEVEL_REG, 0x00);
 80203f0:	2100      	movs	r1, #0
 80203f2:	f242 00a6 	movw	r0, #8358	; 0x20a6
 80203f6:	f00a fb49 	bl	802aa8c <fm25v02_write>
					fm25v02_write(2*SIGNAL_LEVEL_REG+1, level);
 80203fa:	4b68      	ldr	r3, [pc, #416]	; (802059c <ThreadM95Task+0x41c>)
 80203fc:	781b      	ldrb	r3, [r3, #0]
 80203fe:	4619      	mov	r1, r3
 8020400:	f242 00a7 	movw	r0, #8359	; 0x20a7
 8020404:	f00a fb42 	bl	802aa8c <fm25v02_write>
					osMutexRelease(Fm25v02MutexHandle);
 8020408:	4b65      	ldr	r3, [pc, #404]	; (80205a0 <ThreadM95Task+0x420>)
 802040a:	681b      	ldr	r3, [r3, #0]
 802040c:	4618      	mov	r0, r3
 802040e:	f7f8 ff99 	bl	8019344 <osMutexRelease>
				}

				if(	AT_CCID(&id2[0], &id1[0]) == AT_OK ) // читаем CCID сим-карты
 8020412:	4964      	ldr	r1, [pc, #400]	; (80205a4 <ThreadM95Task+0x424>)
 8020414:	4864      	ldr	r0, [pc, #400]	; (80205a8 <ThreadM95Task+0x428>)
 8020416:	f00b fb4b 	bl	802bab0 <AT_CCID>
 802041a:	4603      	mov	r3, r0
 802041c:	2b00      	cmp	r3, #0
 802041e:	d16b      	bne.n	80204f8 <ThreadM95Task+0x378>
				{
					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8020420:	4b5f      	ldr	r3, [pc, #380]	; (80205a0 <ThreadM95Task+0x420>)
 8020422:	681b      	ldr	r3, [r3, #0]
 8020424:	f04f 31ff 	mov.w	r1, #4294967295
 8020428:	4618      	mov	r0, r3
 802042a:	f7f8 ff3d 	bl	80192a8 <osMutexWait>

					fm25v02_write(2*ICCID_NUMBER_REG1, 0x00); // записываем в регистры CCID сим-карты
 802042e:	2100      	movs	r1, #0
 8020430:	f242 00b0 	movw	r0, #8368	; 0x20b0
 8020434:	f00a fb2a 	bl	802aa8c <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG1+1, id2[0]);
 8020438:	4b5b      	ldr	r3, [pc, #364]	; (80205a8 <ThreadM95Task+0x428>)
 802043a:	781b      	ldrb	r3, [r3, #0]
 802043c:	4619      	mov	r1, r3
 802043e:	f242 00b1 	movw	r0, #8369	; 0x20b1
 8020442:	f00a fb23 	bl	802aa8c <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG2, 0x00);
 8020446:	2100      	movs	r1, #0
 8020448:	f242 00b2 	movw	r0, #8370	; 0x20b2
 802044c:	f00a fb1e 	bl	802aa8c <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG2+1, id2[1]);
 8020450:	4b55      	ldr	r3, [pc, #340]	; (80205a8 <ThreadM95Task+0x428>)
 8020452:	785b      	ldrb	r3, [r3, #1]
 8020454:	4619      	mov	r1, r3
 8020456:	f242 00b3 	movw	r0, #8371	; 0x20b3
 802045a:	f00a fb17 	bl	802aa8c <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG3, 0x00);
 802045e:	2100      	movs	r1, #0
 8020460:	f242 00b4 	movw	r0, #8372	; 0x20b4
 8020464:	f00a fb12 	bl	802aa8c <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG3+1, id2[2]);
 8020468:	4b4f      	ldr	r3, [pc, #316]	; (80205a8 <ThreadM95Task+0x428>)
 802046a:	789b      	ldrb	r3, [r3, #2]
 802046c:	4619      	mov	r1, r3
 802046e:	f242 00b5 	movw	r0, #8373	; 0x20b5
 8020472:	f00a fb0b 	bl	802aa8c <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG4, 0x00);
 8020476:	2100      	movs	r1, #0
 8020478:	f242 00b6 	movw	r0, #8374	; 0x20b6
 802047c:	f00a fb06 	bl	802aa8c <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG4+1, id2[3]);
 8020480:	4b49      	ldr	r3, [pc, #292]	; (80205a8 <ThreadM95Task+0x428>)
 8020482:	78db      	ldrb	r3, [r3, #3]
 8020484:	4619      	mov	r1, r3
 8020486:	f242 00b7 	movw	r0, #8375	; 0x20b7
 802048a:	f00a faff 	bl	802aa8c <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG5, 0x00);
 802048e:	2100      	movs	r1, #0
 8020490:	f242 00b8 	movw	r0, #8376	; 0x20b8
 8020494:	f00a fafa 	bl	802aa8c <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG5+1, id2[4]);
 8020498:	4b43      	ldr	r3, [pc, #268]	; (80205a8 <ThreadM95Task+0x428>)
 802049a:	791b      	ldrb	r3, [r3, #4]
 802049c:	4619      	mov	r1, r3
 802049e:	f242 00b9 	movw	r0, #8377	; 0x20b9
 80204a2:	f00a faf3 	bl	802aa8c <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG6, 0x00);
 80204a6:	2100      	movs	r1, #0
 80204a8:	f242 00ba 	movw	r0, #8378	; 0x20ba
 80204ac:	f00a faee 	bl	802aa8c <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG6+1, id2[5]);
 80204b0:	4b3d      	ldr	r3, [pc, #244]	; (80205a8 <ThreadM95Task+0x428>)
 80204b2:	795b      	ldrb	r3, [r3, #5]
 80204b4:	4619      	mov	r1, r3
 80204b6:	f242 00bb 	movw	r0, #8379	; 0x20bb
 80204ba:	f00a fae7 	bl	802aa8c <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG7, 0x00);
 80204be:	2100      	movs	r1, #0
 80204c0:	f242 00bc 	movw	r0, #8380	; 0x20bc
 80204c4:	f00a fae2 	bl	802aa8c <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG7+1, id2[6]);
 80204c8:	4b37      	ldr	r3, [pc, #220]	; (80205a8 <ThreadM95Task+0x428>)
 80204ca:	799b      	ldrb	r3, [r3, #6]
 80204cc:	4619      	mov	r1, r3
 80204ce:	f242 00bd 	movw	r0, #8381	; 0x20bd
 80204d2:	f00a fadb 	bl	802aa8c <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG8, 0x00);
 80204d6:	2100      	movs	r1, #0
 80204d8:	f242 00be 	movw	r0, #8382	; 0x20be
 80204dc:	f00a fad6 	bl	802aa8c <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG8+1, id2[7]);
 80204e0:	4b31      	ldr	r3, [pc, #196]	; (80205a8 <ThreadM95Task+0x428>)
 80204e2:	79db      	ldrb	r3, [r3, #7]
 80204e4:	4619      	mov	r1, r3
 80204e6:	f242 00bf 	movw	r0, #8383	; 0x20bf
 80204ea:	f00a facf 	bl	802aa8c <fm25v02_write>

					osMutexRelease(Fm25v02MutexHandle);
 80204ee:	4b2c      	ldr	r3, [pc, #176]	; (80205a0 <ThreadM95Task+0x420>)
 80204f0:	681b      	ldr	r3, [r3, #0]
 80204f2:	4618      	mov	r0, r3
 80204f4:	f7f8 ff26 	bl	8019344 <osMutexRelease>
				}

				if( request_state == 0)
 80204f8:	4b2c      	ldr	r3, [pc, #176]	; (80205ac <ThreadM95Task+0x42c>)
 80204fa:	781b      	ldrb	r3, [r3, #0]
 80204fc:	b2db      	uxtb	r3, r3
 80204fe:	2b00      	cmp	r3, #0
 8020500:	d13f      	bne.n	8020582 <ThreadM95Task+0x402>
				{
					request_state = 1;
 8020502:	4b2a      	ldr	r3, [pc, #168]	; (80205ac <ThreadM95Task+0x42c>)
 8020504:	2201      	movs	r2, #1
 8020506:	701a      	strb	r2, [r3, #0]
					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8020508:	4b25      	ldr	r3, [pc, #148]	; (80205a0 <ThreadM95Task+0x420>)
 802050a:	681b      	ldr	r3, [r3, #0]
 802050c:	f04f 31ff 	mov.w	r1, #4294967295
 8020510:	4618      	mov	r0, r3
 8020512:	f7f8 fec9 	bl	80192a8 <osMutexWait>
					fm25v02_write(2*GPRS_CALL_REG, 0x00);
 8020516:	2100      	movs	r1, #0
 8020518:	f242 106e 	movw	r0, #8558	; 0x216e
 802051c:	f00a fab6 	bl	802aa8c <fm25v02_write>
					fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
 8020520:	2101      	movs	r1, #1
 8020522:	f242 106f 	movw	r0, #8559	; 0x216f
 8020526:	f00a fab1 	bl	802aa8c <fm25v02_write>
					osMutexRelease(Fm25v02MutexHandle);
 802052a:	4b1d      	ldr	r3, [pc, #116]	; (80205a0 <ThreadM95Task+0x420>)
 802052c:	681b      	ldr	r3, [r3, #0]
 802052e:	4618      	mov	r0, r3
 8020530:	f7f8 ff08 	bl	8019344 <osMutexRelease>
				}

			break;
 8020534:	e025      	b.n	8020582 <ThreadM95Task+0x402>

			case TCP_CLOSED:

				osThreadSuspend(CallRingCenterTaskHandle);
 8020536:	4b18      	ldr	r3, [pc, #96]	; (8020598 <ThreadM95Task+0x418>)
 8020538:	681b      	ldr	r3, [r3, #0]
 802053a:	4618      	mov	r0, r3
 802053c:	f7f9 f8ca 	bl	80196d4 <osThreadSuspend>

				LED1_OFF();
 8020540:	f00a fb78 	bl	802ac34 <LED1_OFF>

				AT_CIPSTART("TCP", ip1, ip2, ip3, ip4, port);
 8020544:	4b1a      	ldr	r3, [pc, #104]	; (80205b0 <ThreadM95Task+0x430>)
 8020546:	781b      	ldrb	r3, [r3, #0]
 8020548:	b2d9      	uxtb	r1, r3
 802054a:	4b1a      	ldr	r3, [pc, #104]	; (80205b4 <ThreadM95Task+0x434>)
 802054c:	781b      	ldrb	r3, [r3, #0]
 802054e:	b2d8      	uxtb	r0, r3
 8020550:	4b19      	ldr	r3, [pc, #100]	; (80205b8 <ThreadM95Task+0x438>)
 8020552:	781b      	ldrb	r3, [r3, #0]
 8020554:	b2dc      	uxtb	r4, r3
 8020556:	4b19      	ldr	r3, [pc, #100]	; (80205bc <ThreadM95Task+0x43c>)
 8020558:	781b      	ldrb	r3, [r3, #0]
 802055a:	b2db      	uxtb	r3, r3
 802055c:	4a18      	ldr	r2, [pc, #96]	; (80205c0 <ThreadM95Task+0x440>)
 802055e:	8812      	ldrh	r2, [r2, #0]
 8020560:	b292      	uxth	r2, r2
 8020562:	9201      	str	r2, [sp, #4]
 8020564:	9300      	str	r3, [sp, #0]
 8020566:	4623      	mov	r3, r4
 8020568:	4602      	mov	r2, r0
 802056a:	4816      	ldr	r0, [pc, #88]	; (80205c4 <ThreadM95Task+0x444>)
 802056c:	f00b f8d4 	bl	802b718 <AT_CIPSTART>

			break;
 8020570:	e008      	b.n	8020584 <ThreadM95Task+0x404>

			case PDP_DEACT:

				LED1_OFF();
 8020572:	f00a fb5f 	bl	802ac34 <LED1_OFF>

				AT_CIPSHUT();
 8020576:	f00b fa31 	bl	802b9dc <AT_CIPSHUT>

			break;
 802057a:	e003      	b.n	8020584 <ThreadM95Task+0x404>

			case TCP_CONNECTING:

				LED1_OFF();
 802057c:	f00a fb5a 	bl	802ac34 <LED1_OFF>

			break;
 8020580:	e000      	b.n	8020584 <ThreadM95Task+0x404>
			break;
 8020582:	bf00      	nop

		}

		osMutexRelease(UartMutexHandle);
 8020584:	4b10      	ldr	r3, [pc, #64]	; (80205c8 <ThreadM95Task+0x448>)
 8020586:	681b      	ldr	r3, [r3, #0]
 8020588:	4618      	mov	r0, r3
 802058a:	f7f8 fedb 	bl	8019344 <osMutexRelease>

		osDelay(1000);
 802058e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8020592:	f7f8 fda8 	bl	80190e6 <osDelay>
		osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8020596:	e627      	b.n	80201e8 <ThreadM95Task+0x68>
 8020598:	200082a0 	.word	0x200082a0
 802059c:	2000a16c 	.word	0x2000a16c
 80205a0:	20009bb8 	.word	0x20009bb8
 80205a4:	20009f78 	.word	0x20009f78
 80205a8:	20009f6c 	.word	0x20009f6c
 80205ac:	20008028 	.word	0x20008028
 80205b0:	20008020 	.word	0x20008020
 80205b4:	20008021 	.word	0x20008021
 80205b8:	20008022 	.word	0x20008022
 80205bc:	20008023 	.word	0x20008023
 80205c0:	20008026 	.word	0x20008026
 80205c4:	0802fd54 	.word	0x0802fd54
 80205c8:	2000971c 	.word	0x2000971c

080205cc <__NVIC_SystemReset>:
{
 80205cc:	b480      	push	{r7}
 80205ce:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80205d0:	f3bf 8f4f 	dsb	sy
}
 80205d4:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80205d6:	4b06      	ldr	r3, [pc, #24]	; (80205f0 <__NVIC_SystemReset+0x24>)
 80205d8:	68db      	ldr	r3, [r3, #12]
 80205da:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80205de:	4904      	ldr	r1, [pc, #16]	; (80205f0 <__NVIC_SystemReset+0x24>)
 80205e0:	4b04      	ldr	r3, [pc, #16]	; (80205f4 <__NVIC_SystemReset+0x28>)
 80205e2:	4313      	orrs	r3, r2
 80205e4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80205e6:	f3bf 8f4f 	dsb	sy
}
 80205ea:	bf00      	nop
    __NOP();
 80205ec:	bf00      	nop
 80205ee:	e7fd      	b.n	80205ec <__NVIC_SystemReset+0x20>
 80205f0:	e000ed00 	.word	0xe000ed00
 80205f4:	05fa0004 	.word	0x05fa0004

080205f8 <ThreadMainTask>:
unsigned char sensor_id;



void ThreadMainTask(void const * argument)
{
 80205f8:	b590      	push	{r4, r7, lr}
 80205fa:	b087      	sub	sp, #28
 80205fc:	af02      	add	r7, sp, #8
 80205fe:	6078      	str	r0, [r7, #4]





	osThreadSuspend(MainTaskHandle); // ждем пока не будут вычитаны регистры и не получен статус фаз А1,А2,В1,В2,С1,С2
 8020600:	4b54      	ldr	r3, [pc, #336]	; (8020754 <ThreadMainTask+0x15c>)
 8020602:	681b      	ldr	r3, [r3, #0]
 8020604:	4618      	mov	r0, r3
 8020606:	f7f9 f865 	bl	80196d4 <osThreadSuspend>

	time_on_counter = (control_registers.delay_on_sensor_reg + 1); // выставляем значения, чтобы не происходило переключений освещения после сброса контроллера
 802060a:	4b53      	ldr	r3, [pc, #332]	; (8020758 <ThreadMainTask+0x160>)
 802060c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8020610:	3301      	adds	r3, #1
 8020612:	b29a      	uxth	r2, r3
 8020614:	4b51      	ldr	r3, [pc, #324]	; (802075c <ThreadMainTask+0x164>)
 8020616:	801a      	strh	r2, [r3, #0]
	time_off_counter = (control_registers.delay_off_sensor_reg + 1);
 8020618:	4b4f      	ldr	r3, [pc, #316]	; (8020758 <ThreadMainTask+0x160>)
 802061a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 802061e:	3301      	adds	r3, #1
 8020620:	b29a      	uxth	r2, r3
 8020622:	4b4f      	ldr	r3, [pc, #316]	; (8020760 <ThreadMainTask+0x168>)
 8020624:	801a      	strh	r2, [r3, #0]


	for(;;)
	{

		if( HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_0) == GPIO_PIN_SET ) // проверяем если есть наличие единицы на пине PFO микросхемы TPS3306-15
 8020626:	2101      	movs	r1, #1
 8020628:	484e      	ldr	r0, [pc, #312]	; (8020764 <ThreadMainTask+0x16c>)
 802062a:	f7f4 f919 	bl	8014860 <HAL_GPIO_ReadPin>
 802062e:	4603      	mov	r3, r0
 8020630:	2b01      	cmp	r3, #1
 8020632:	f040 809f 	bne.w	8020774 <ThreadMainTask+0x17c>
		{
			if(status_registers.power_on_reg == 0) // если основного питания до этого не было, записываем в регистр наличия питания 1
 8020636:	4b4c      	ldr	r3, [pc, #304]	; (8020768 <ThreadMainTask+0x170>)
 8020638:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 802063a:	2b00      	cmp	r3, #0
 802063c:	d14c      	bne.n	80206d8 <ThreadMainTask+0xe0>
			{
				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 802063e:	4b4b      	ldr	r3, [pc, #300]	; (802076c <ThreadMainTask+0x174>)
 8020640:	681b      	ldr	r3, [r3, #0]
 8020642:	f04f 31ff 	mov.w	r1, #4294967295
 8020646:	4618      	mov	r0, r3
 8020648:	f7f8 fe2e 	bl	80192a8 <osMutexWait>
				fm25v02_write(2*POWER_ON_REG, 0x00);
 802064c:	2100      	movs	r1, #0
 802064e:	f242 0022 	movw	r0, #8226	; 0x2022
 8020652:	f00a fa1b 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*POWER_ON_REG+1, 1);
 8020656:	2101      	movs	r1, #1
 8020658:	f242 0023 	movw	r0, #8227	; 0x2023
 802065c:	f00a fa16 	bl	802aa8c <fm25v02_write>
				status_registers.power_on_reg = 1;
 8020660:	4b41      	ldr	r3, [pc, #260]	; (8020768 <ThreadMainTask+0x170>)
 8020662:	2201      	movs	r2, #1
 8020664:	845a      	strh	r2, [r3, #34]	; 0x22
				osMutexRelease(Fm25v02MutexHandle);
 8020666:	4b41      	ldr	r3, [pc, #260]	; (802076c <ThreadMainTask+0x174>)
 8020668:	681b      	ldr	r3, [r3, #0]
 802066a:	4618      	mov	r0, r3
 802066c:	f7f8 fe6a 	bl	8019344 <osMutexRelease>

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8020670:	4b3e      	ldr	r3, [pc, #248]	; (802076c <ThreadMainTask+0x174>)
 8020672:	681b      	ldr	r3, [r3, #0]
 8020674:	f04f 31ff 	mov.w	r1, #4294967295
 8020678:	4618      	mov	r0, r3
 802067a:	f7f8 fe15 	bl	80192a8 <osMutexWait>
				fm25v02_write(2*GPRS_CALL_REG, 0x00);
 802067e:	2100      	movs	r1, #0
 8020680:	f242 106e 	movw	r0, #8558	; 0x216e
 8020684:	f00a fa02 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
 8020688:	2101      	movs	r1, #1
 802068a:	f242 106f 	movw	r0, #8559	; 0x216f
 802068e:	f00a f9fd 	bl	802aa8c <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8020692:	4b36      	ldr	r3, [pc, #216]	; (802076c <ThreadMainTask+0x174>)
 8020694:	681b      	ldr	r3, [r3, #0]
 8020696:	4618      	mov	r0, r3
 8020698:	f7f8 fe54 	bl	8019344 <osMutexRelease>

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 802069c:	4b33      	ldr	r3, [pc, #204]	; (802076c <ThreadMainTask+0x174>)
 802069e:	681b      	ldr	r3, [r3, #0]
 80206a0:	f04f 31ff 	mov.w	r1, #4294967295
 80206a4:	4618      	mov	r0, r3
 80206a6:	f7f8 fdff 	bl	80192a8 <osMutexWait>
				fm25v02_write(2*SYSTEM_STATUS_REG, 0x00);
 80206aa:	2100      	movs	r1, #0
 80206ac:	f242 0020 	movw	r0, #8224	; 0x2020
 80206b0:	f00a f9ec 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*SYSTEM_STATUS_REG+1, POWER_ON);
 80206b4:	2101      	movs	r1, #1
 80206b6:	f242 0021 	movw	r0, #8225	; 0x2021
 80206ba:	f00a f9e7 	bl	802aa8c <fm25v02_write>
				status_registers.system_status_reg = POWER_ON;
 80206be:	4b2a      	ldr	r3, [pc, #168]	; (8020768 <ThreadMainTask+0x170>)
 80206c0:	2201      	movs	r2, #1
 80206c2:	841a      	strh	r2, [r3, #32]
				osMutexRelease(Fm25v02MutexHandle);
 80206c4:	4b29      	ldr	r3, [pc, #164]	; (802076c <ThreadMainTask+0x174>)
 80206c6:	681b      	ldr	r3, [r3, #0]
 80206c8:	4618      	mov	r0, r3
 80206ca:	f7f8 fe3b 	bl	8019344 <osMutexRelease>

				osThreadResume(EventWriteTaskHandle);
 80206ce:	4b28      	ldr	r3, [pc, #160]	; (8020770 <ThreadMainTask+0x178>)
 80206d0:	681b      	ldr	r3, [r3, #0]
 80206d2:	4618      	mov	r0, r3
 80206d4:	f7f9 f80a 	bl	80196ec <osThreadResume>
			}

			if(status_registers.power_on_lighting_reg == 0) // если основного питания до этого не было, записываем в регистр наличия питания освещения 1
 80206d8:	4b23      	ldr	r3, [pc, #140]	; (8020768 <ThreadMainTask+0x170>)
 80206da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80206dc:	2b00      	cmp	r3, #0
 80206de:	f040 80d5 	bne.w	802088c <ThreadMainTask+0x294>
			{
				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 80206e2:	4b22      	ldr	r3, [pc, #136]	; (802076c <ThreadMainTask+0x174>)
 80206e4:	681b      	ldr	r3, [r3, #0]
 80206e6:	f04f 31ff 	mov.w	r1, #4294967295
 80206ea:	4618      	mov	r0, r3
 80206ec:	f7f8 fddc 	bl	80192a8 <osMutexWait>
				fm25v02_write(2*POWER_ON_LIGHTING_REG, 0x00);
 80206f0:	2100      	movs	r1, #0
 80206f2:	f242 0026 	movw	r0, #8230	; 0x2026
 80206f6:	f00a f9c9 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*POWER_ON_LIGHTING_REG+1, 1);
 80206fa:	2101      	movs	r1, #1
 80206fc:	f242 0027 	movw	r0, #8231	; 0x2027
 8020700:	f00a f9c4 	bl	802aa8c <fm25v02_write>
				status_registers.power_on_lighting_reg = 1;
 8020704:	4b18      	ldr	r3, [pc, #96]	; (8020768 <ThreadMainTask+0x170>)
 8020706:	2201      	movs	r2, #1
 8020708:	84da      	strh	r2, [r3, #38]	; 0x26
				osMutexRelease(Fm25v02MutexHandle);
 802070a:	4b18      	ldr	r3, [pc, #96]	; (802076c <ThreadMainTask+0x174>)
 802070c:	681b      	ldr	r3, [r3, #0]
 802070e:	4618      	mov	r0, r3
 8020710:	f7f8 fe18 	bl	8019344 <osMutexRelease>
				//osMutexWait(Fm25v02MutexHandle, osWaitForever);
				//fm25v02_write(2*GPRS_CALL_REG, 0x00);
				//fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
				//osMutexRelease(Fm25v02MutexHandle);

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8020714:	4b15      	ldr	r3, [pc, #84]	; (802076c <ThreadMainTask+0x174>)
 8020716:	681b      	ldr	r3, [r3, #0]
 8020718:	f04f 31ff 	mov.w	r1, #4294967295
 802071c:	4618      	mov	r0, r3
 802071e:	f7f8 fdc3 	bl	80192a8 <osMutexWait>
				fm25v02_write(2*SYSTEM_STATUS_REG, 0x00);
 8020722:	2100      	movs	r1, #0
 8020724:	f242 0020 	movw	r0, #8224	; 0x2020
 8020728:	f00a f9b0 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*SYSTEM_STATUS_REG+1, POWER_ON);
 802072c:	2101      	movs	r1, #1
 802072e:	f242 0021 	movw	r0, #8225	; 0x2021
 8020732:	f00a f9ab 	bl	802aa8c <fm25v02_write>
				status_registers.system_status_reg = POWER_ON;
 8020736:	4b0c      	ldr	r3, [pc, #48]	; (8020768 <ThreadMainTask+0x170>)
 8020738:	2201      	movs	r2, #1
 802073a:	841a      	strh	r2, [r3, #32]
				osMutexRelease(Fm25v02MutexHandle);
 802073c:	4b0b      	ldr	r3, [pc, #44]	; (802076c <ThreadMainTask+0x174>)
 802073e:	681b      	ldr	r3, [r3, #0]
 8020740:	4618      	mov	r0, r3
 8020742:	f7f8 fdff 	bl	8019344 <osMutexRelease>

				osThreadResume(EventWriteTaskHandle);
 8020746:	4b0a      	ldr	r3, [pc, #40]	; (8020770 <ThreadMainTask+0x178>)
 8020748:	681b      	ldr	r3, [r3, #0]
 802074a:	4618      	mov	r0, r3
 802074c:	f7f8 ffce 	bl	80196ec <osThreadResume>
 8020750:	e09c      	b.n	802088c <ThreadMainTask+0x294>
 8020752:	bf00      	nop
 8020754:	20009838 	.word	0x20009838
 8020758:	2000b000 	.word	0x2000b000
 802075c:	2000802a 	.word	0x2000802a
 8020760:	2000802c 	.word	0x2000802c
 8020764:	40021000 	.word	0x40021000
 8020768:	2000af40 	.word	0x2000af40
 802076c:	20009bb8 	.word	0x20009bb8
 8020770:	20009718 	.word	0x20009718
			}
		}
		else // если на пине PFO микросхемы TPS3306-15 нет наличия единицы
		{
			if(status_registers.power_on_reg == 1)
 8020774:	4b8b      	ldr	r3, [pc, #556]	; (80209a4 <ThreadMainTask+0x3ac>)
 8020776:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8020778:	2b01      	cmp	r3, #1
 802077a:	d14c      	bne.n	8020816 <ThreadMainTask+0x21e>
			{
				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 802077c:	4b8a      	ldr	r3, [pc, #552]	; (80209a8 <ThreadMainTask+0x3b0>)
 802077e:	681b      	ldr	r3, [r3, #0]
 8020780:	f04f 31ff 	mov.w	r1, #4294967295
 8020784:	4618      	mov	r0, r3
 8020786:	f7f8 fd8f 	bl	80192a8 <osMutexWait>
				fm25v02_write(2*POWER_ON_REG, 0x00);
 802078a:	2100      	movs	r1, #0
 802078c:	f242 0022 	movw	r0, #8226	; 0x2022
 8020790:	f00a f97c 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*POWER_ON_REG+1, 0x00);
 8020794:	2100      	movs	r1, #0
 8020796:	f242 0023 	movw	r0, #8227	; 0x2023
 802079a:	f00a f977 	bl	802aa8c <fm25v02_write>
				status_registers.power_on_reg = 0;
 802079e:	4b81      	ldr	r3, [pc, #516]	; (80209a4 <ThreadMainTask+0x3ac>)
 80207a0:	2200      	movs	r2, #0
 80207a2:	845a      	strh	r2, [r3, #34]	; 0x22
				osMutexRelease(Fm25v02MutexHandle);
 80207a4:	4b80      	ldr	r3, [pc, #512]	; (80209a8 <ThreadMainTask+0x3b0>)
 80207a6:	681b      	ldr	r3, [r3, #0]
 80207a8:	4618      	mov	r0, r3
 80207aa:	f7f8 fdcb 	bl	8019344 <osMutexRelease>

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 80207ae:	4b7e      	ldr	r3, [pc, #504]	; (80209a8 <ThreadMainTask+0x3b0>)
 80207b0:	681b      	ldr	r3, [r3, #0]
 80207b2:	f04f 31ff 	mov.w	r1, #4294967295
 80207b6:	4618      	mov	r0, r3
 80207b8:	f7f8 fd76 	bl	80192a8 <osMutexWait>
				fm25v02_write(2*GPRS_CALL_REG, 0x00);
 80207bc:	2100      	movs	r1, #0
 80207be:	f242 106e 	movw	r0, #8558	; 0x216e
 80207c2:	f00a f963 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
 80207c6:	2101      	movs	r1, #1
 80207c8:	f242 106f 	movw	r0, #8559	; 0x216f
 80207cc:	f00a f95e 	bl	802aa8c <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 80207d0:	4b75      	ldr	r3, [pc, #468]	; (80209a8 <ThreadMainTask+0x3b0>)
 80207d2:	681b      	ldr	r3, [r3, #0]
 80207d4:	4618      	mov	r0, r3
 80207d6:	f7f8 fdb5 	bl	8019344 <osMutexRelease>

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 80207da:	4b73      	ldr	r3, [pc, #460]	; (80209a8 <ThreadMainTask+0x3b0>)
 80207dc:	681b      	ldr	r3, [r3, #0]
 80207de:	f04f 31ff 	mov.w	r1, #4294967295
 80207e2:	4618      	mov	r0, r3
 80207e4:	f7f8 fd60 	bl	80192a8 <osMutexWait>
				fm25v02_write(2*SYSTEM_STATUS_REG, 0x00);
 80207e8:	2100      	movs	r1, #0
 80207ea:	f242 0020 	movw	r0, #8224	; 0x2020
 80207ee:	f00a f94d 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*SYSTEM_STATUS_REG+1, POWER_OFF);
 80207f2:	2102      	movs	r1, #2
 80207f4:	f242 0021 	movw	r0, #8225	; 0x2021
 80207f8:	f00a f948 	bl	802aa8c <fm25v02_write>
				status_registers.system_status_reg = POWER_OFF;
 80207fc:	4b69      	ldr	r3, [pc, #420]	; (80209a4 <ThreadMainTask+0x3ac>)
 80207fe:	2202      	movs	r2, #2
 8020800:	841a      	strh	r2, [r3, #32]
				osMutexRelease(Fm25v02MutexHandle);
 8020802:	4b69      	ldr	r3, [pc, #420]	; (80209a8 <ThreadMainTask+0x3b0>)
 8020804:	681b      	ldr	r3, [r3, #0]
 8020806:	4618      	mov	r0, r3
 8020808:	f7f8 fd9c 	bl	8019344 <osMutexRelease>

				osThreadResume(EventWriteTaskHandle);
 802080c:	4b67      	ldr	r3, [pc, #412]	; (80209ac <ThreadMainTask+0x3b4>)
 802080e:	681b      	ldr	r3, [r3, #0]
 8020810:	4618      	mov	r0, r3
 8020812:	f7f8 ff6b 	bl	80196ec <osThreadResume>
			}

			if(status_registers.power_on_lighting_reg == 1)
 8020816:	4b63      	ldr	r3, [pc, #396]	; (80209a4 <ThreadMainTask+0x3ac>)
 8020818:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 802081a:	2b01      	cmp	r3, #1
 802081c:	d136      	bne.n	802088c <ThreadMainTask+0x294>
			{
				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 802081e:	4b62      	ldr	r3, [pc, #392]	; (80209a8 <ThreadMainTask+0x3b0>)
 8020820:	681b      	ldr	r3, [r3, #0]
 8020822:	f04f 31ff 	mov.w	r1, #4294967295
 8020826:	4618      	mov	r0, r3
 8020828:	f7f8 fd3e 	bl	80192a8 <osMutexWait>
				fm25v02_write(2*POWER_ON_LIGHTING_REG, 0x00);
 802082c:	2100      	movs	r1, #0
 802082e:	f242 0026 	movw	r0, #8230	; 0x2026
 8020832:	f00a f92b 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*POWER_ON_LIGHTING_REG+1, 0x00);
 8020836:	2100      	movs	r1, #0
 8020838:	f242 0027 	movw	r0, #8231	; 0x2027
 802083c:	f00a f926 	bl	802aa8c <fm25v02_write>
				status_registers.power_on_lighting_reg = 0;
 8020840:	4b58      	ldr	r3, [pc, #352]	; (80209a4 <ThreadMainTask+0x3ac>)
 8020842:	2200      	movs	r2, #0
 8020844:	84da      	strh	r2, [r3, #38]	; 0x26
				osMutexRelease(Fm25v02MutexHandle);
 8020846:	4b58      	ldr	r3, [pc, #352]	; (80209a8 <ThreadMainTask+0x3b0>)
 8020848:	681b      	ldr	r3, [r3, #0]
 802084a:	4618      	mov	r0, r3
 802084c:	f7f8 fd7a 	bl	8019344 <osMutexRelease>
				//osMutexWait(Fm25v02MutexHandle, osWaitForever);
				//fm25v02_write(2*GPRS_CALL_REG, 0x00);
				//fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
				//osMutexRelease(Fm25v02MutexHandle);

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8020850:	4b55      	ldr	r3, [pc, #340]	; (80209a8 <ThreadMainTask+0x3b0>)
 8020852:	681b      	ldr	r3, [r3, #0]
 8020854:	f04f 31ff 	mov.w	r1, #4294967295
 8020858:	4618      	mov	r0, r3
 802085a:	f7f8 fd25 	bl	80192a8 <osMutexWait>
				fm25v02_write(2*SYSTEM_STATUS_REG, 0x00);
 802085e:	2100      	movs	r1, #0
 8020860:	f242 0020 	movw	r0, #8224	; 0x2020
 8020864:	f00a f912 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*SYSTEM_STATUS_REG+1, POWER_OFF);
 8020868:	2102      	movs	r1, #2
 802086a:	f242 0021 	movw	r0, #8225	; 0x2021
 802086e:	f00a f90d 	bl	802aa8c <fm25v02_write>
				status_registers.system_status_reg = POWER_OFF;
 8020872:	4b4c      	ldr	r3, [pc, #304]	; (80209a4 <ThreadMainTask+0x3ac>)
 8020874:	2202      	movs	r2, #2
 8020876:	841a      	strh	r2, [r3, #32]
				osMutexRelease(Fm25v02MutexHandle);
 8020878:	4b4b      	ldr	r3, [pc, #300]	; (80209a8 <ThreadMainTask+0x3b0>)
 802087a:	681b      	ldr	r3, [r3, #0]
 802087c:	4618      	mov	r0, r3
 802087e:	f7f8 fd61 	bl	8019344 <osMutexRelease>

				osThreadResume(EventWriteTaskHandle);
 8020882:	4b4a      	ldr	r3, [pc, #296]	; (80209ac <ThreadMainTask+0x3b4>)
 8020884:	681b      	ldr	r3, [r3, #0]
 8020886:	4618      	mov	r0, r3
 8020888:	f7f8 ff30 	bl	80196ec <osThreadResume>

			break;
		}
		*/

		switch(control_registers.time_update_reg) // проверяем значение переменной обновления времени
 802088c:	4b48      	ldr	r3, [pc, #288]	; (80209b0 <ThreadMainTask+0x3b8>)
 802088e:	8a1b      	ldrh	r3, [r3, #16]
 8020890:	2b00      	cmp	r3, #0
 8020892:	f000 8095 	beq.w	80209c0 <ThreadMainTask+0x3c8>
 8020896:	2b01      	cmp	r3, #1
 8020898:	f040 875f 	bne.w	802175a <ThreadMainTask+0x1162>
		{
			case(SET_TIME): // Если в регистр записана команда установить время

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 802089c:	4b42      	ldr	r3, [pc, #264]	; (80209a8 <ThreadMainTask+0x3b0>)
 802089e:	681b      	ldr	r3, [r3, #0]
 80208a0:	f04f 31ff 	mov.w	r1, #4294967295
 80208a4:	4618      	mov	r0, r3
 80208a6:	f7f8 fcff 	bl	80192a8 <osMutexWait>
				fm25v02_write(2*TIME_UPDATE_REG, 0x00);
 80208aa:	2100      	movs	r1, #0
 80208ac:	f242 1030 	movw	r0, #8496	; 0x2130
 80208b0:	f00a f8ec 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*TIME_UPDATE_REG+1, SET_TIME_DEFAULT);
 80208b4:	2100      	movs	r1, #0
 80208b6:	f242 1031 	movw	r0, #8497	; 0x2131
 80208ba:	f00a f8e7 	bl	802aa8c <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 80208be:	4b3a      	ldr	r3, [pc, #232]	; (80209a8 <ThreadMainTask+0x3b0>)
 80208c0:	681b      	ldr	r3, [r3, #0]
 80208c2:	4618      	mov	r0, r3
 80208c4:	f7f8 fd3e 	bl	8019344 <osMutexRelease>

				set_time.Hours = control_registers.time_hour_reg; // записываем в переменные структуры времени значения регистров управления временем
 80208c8:	4b39      	ldr	r3, [pc, #228]	; (80209b0 <ThreadMainTask+0x3b8>)
 80208ca:	8b1b      	ldrh	r3, [r3, #24]
 80208cc:	b2da      	uxtb	r2, r3
 80208ce:	4b39      	ldr	r3, [pc, #228]	; (80209b4 <ThreadMainTask+0x3bc>)
 80208d0:	701a      	strb	r2, [r3, #0]
				set_time.Minutes = control_registers.time_minute_reg;
 80208d2:	4b37      	ldr	r3, [pc, #220]	; (80209b0 <ThreadMainTask+0x3b8>)
 80208d4:	8b5b      	ldrh	r3, [r3, #26]
 80208d6:	b2da      	uxtb	r2, r3
 80208d8:	4b36      	ldr	r3, [pc, #216]	; (80209b4 <ThreadMainTask+0x3bc>)
 80208da:	705a      	strb	r2, [r3, #1]
				set_time.Seconds = control_registers.time_seconds_reg;
 80208dc:	4b34      	ldr	r3, [pc, #208]	; (80209b0 <ThreadMainTask+0x3b8>)
 80208de:	8b9b      	ldrh	r3, [r3, #28]
 80208e0:	b2da      	uxtb	r2, r3
 80208e2:	4b34      	ldr	r3, [pc, #208]	; (80209b4 <ThreadMainTask+0x3bc>)
 80208e4:	709a      	strb	r2, [r3, #2]
				set_date.Date = control_registers.time_day_reg;
 80208e6:	4b32      	ldr	r3, [pc, #200]	; (80209b0 <ThreadMainTask+0x3b8>)
 80208e8:	8adb      	ldrh	r3, [r3, #22]
 80208ea:	b2da      	uxtb	r2, r3
 80208ec:	4b32      	ldr	r3, [pc, #200]	; (80209b8 <ThreadMainTask+0x3c0>)
 80208ee:	709a      	strb	r2, [r3, #2]
				set_date.Month = control_registers.time_month_reg;
 80208f0:	4b2f      	ldr	r3, [pc, #188]	; (80209b0 <ThreadMainTask+0x3b8>)
 80208f2:	8a9b      	ldrh	r3, [r3, #20]
 80208f4:	b2da      	uxtb	r2, r3
 80208f6:	4b30      	ldr	r3, [pc, #192]	; (80209b8 <ThreadMainTask+0x3c0>)
 80208f8:	705a      	strb	r2, [r3, #1]
				set_date.Year = control_registers.time_year_reg;
 80208fa:	4b2d      	ldr	r3, [pc, #180]	; (80209b0 <ThreadMainTask+0x3b8>)
 80208fc:	8a5b      	ldrh	r3, [r3, #18]
 80208fe:	b2da      	uxtb	r2, r3
 8020900:	4b2d      	ldr	r3, [pc, #180]	; (80209b8 <ThreadMainTask+0x3c0>)
 8020902:	70da      	strb	r2, [r3, #3]
				set_date.WeekDay = control_registers.time_weekday_reg;
 8020904:	4b2a      	ldr	r3, [pc, #168]	; (80209b0 <ThreadMainTask+0x3b8>)
 8020906:	8bdb      	ldrh	r3, [r3, #30]
 8020908:	b2da      	uxtb	r2, r3
 802090a:	4b2b      	ldr	r3, [pc, #172]	; (80209b8 <ThreadMainTask+0x3c0>)
 802090c:	701a      	strb	r2, [r3, #0]

				set_time.Hours = RTC_ByteToBcd2(set_time.Hours); // переводим обычный формат времени в BCD
 802090e:	4b29      	ldr	r3, [pc, #164]	; (80209b4 <ThreadMainTask+0x3bc>)
 8020910:	781b      	ldrb	r3, [r3, #0]
 8020912:	4618      	mov	r0, r3
 8020914:	f7f5 ffd7 	bl	80168c6 <RTC_ByteToBcd2>
 8020918:	4603      	mov	r3, r0
 802091a:	461a      	mov	r2, r3
 802091c:	4b25      	ldr	r3, [pc, #148]	; (80209b4 <ThreadMainTask+0x3bc>)
 802091e:	701a      	strb	r2, [r3, #0]
				set_time.Minutes = RTC_ByteToBcd2(set_time.Minutes);
 8020920:	4b24      	ldr	r3, [pc, #144]	; (80209b4 <ThreadMainTask+0x3bc>)
 8020922:	785b      	ldrb	r3, [r3, #1]
 8020924:	4618      	mov	r0, r3
 8020926:	f7f5 ffce 	bl	80168c6 <RTC_ByteToBcd2>
 802092a:	4603      	mov	r3, r0
 802092c:	461a      	mov	r2, r3
 802092e:	4b21      	ldr	r3, [pc, #132]	; (80209b4 <ThreadMainTask+0x3bc>)
 8020930:	705a      	strb	r2, [r3, #1]
				set_time.Seconds = RTC_ByteToBcd2(set_time.Seconds);
 8020932:	4b20      	ldr	r3, [pc, #128]	; (80209b4 <ThreadMainTask+0x3bc>)
 8020934:	789b      	ldrb	r3, [r3, #2]
 8020936:	4618      	mov	r0, r3
 8020938:	f7f5 ffc5 	bl	80168c6 <RTC_ByteToBcd2>
 802093c:	4603      	mov	r3, r0
 802093e:	461a      	mov	r2, r3
 8020940:	4b1c      	ldr	r3, [pc, #112]	; (80209b4 <ThreadMainTask+0x3bc>)
 8020942:	709a      	strb	r2, [r3, #2]
				set_date.Date = RTC_ByteToBcd2(set_date.Date);
 8020944:	4b1c      	ldr	r3, [pc, #112]	; (80209b8 <ThreadMainTask+0x3c0>)
 8020946:	789b      	ldrb	r3, [r3, #2]
 8020948:	4618      	mov	r0, r3
 802094a:	f7f5 ffbc 	bl	80168c6 <RTC_ByteToBcd2>
 802094e:	4603      	mov	r3, r0
 8020950:	461a      	mov	r2, r3
 8020952:	4b19      	ldr	r3, [pc, #100]	; (80209b8 <ThreadMainTask+0x3c0>)
 8020954:	709a      	strb	r2, [r3, #2]
				set_date.Month = RTC_ByteToBcd2(set_date.Month);
 8020956:	4b18      	ldr	r3, [pc, #96]	; (80209b8 <ThreadMainTask+0x3c0>)
 8020958:	785b      	ldrb	r3, [r3, #1]
 802095a:	4618      	mov	r0, r3
 802095c:	f7f5 ffb3 	bl	80168c6 <RTC_ByteToBcd2>
 8020960:	4603      	mov	r3, r0
 8020962:	461a      	mov	r2, r3
 8020964:	4b14      	ldr	r3, [pc, #80]	; (80209b8 <ThreadMainTask+0x3c0>)
 8020966:	705a      	strb	r2, [r3, #1]
				set_date.Year = RTC_ByteToBcd2(set_date.Year);
 8020968:	4b13      	ldr	r3, [pc, #76]	; (80209b8 <ThreadMainTask+0x3c0>)
 802096a:	78db      	ldrb	r3, [r3, #3]
 802096c:	4618      	mov	r0, r3
 802096e:	f7f5 ffaa 	bl	80168c6 <RTC_ByteToBcd2>
 8020972:	4603      	mov	r3, r0
 8020974:	461a      	mov	r2, r3
 8020976:	4b10      	ldr	r3, [pc, #64]	; (80209b8 <ThreadMainTask+0x3c0>)
 8020978:	70da      	strb	r2, [r3, #3]
				set_date.WeekDay = RTC_ByteToBcd2(set_date.WeekDay);
 802097a:	4b0f      	ldr	r3, [pc, #60]	; (80209b8 <ThreadMainTask+0x3c0>)
 802097c:	781b      	ldrb	r3, [r3, #0]
 802097e:	4618      	mov	r0, r3
 8020980:	f7f5 ffa1 	bl	80168c6 <RTC_ByteToBcd2>
 8020984:	4603      	mov	r3, r0
 8020986:	461a      	mov	r2, r3
 8020988:	4b0b      	ldr	r3, [pc, #44]	; (80209b8 <ThreadMainTask+0x3c0>)
 802098a:	701a      	strb	r2, [r3, #0]

				HAL_RTC_SetTime(&hrtc, &set_time, RTC_FORMAT_BCD); // устанавливаем дату и время
 802098c:	2201      	movs	r2, #1
 802098e:	4909      	ldr	r1, [pc, #36]	; (80209b4 <ThreadMainTask+0x3bc>)
 8020990:	480a      	ldr	r0, [pc, #40]	; (80209bc <ThreadMainTask+0x3c4>)
 8020992:	f7f5 fd49 	bl	8016428 <HAL_RTC_SetTime>
				HAL_RTC_SetDate(&hrtc, &set_date, RTC_FORMAT_BCD);
 8020996:	2201      	movs	r2, #1
 8020998:	4907      	ldr	r1, [pc, #28]	; (80209b8 <ThreadMainTask+0x3c0>)
 802099a:	4808      	ldr	r0, [pc, #32]	; (80209bc <ThreadMainTask+0x3c4>)
 802099c:	f7f5 fe3c 	bl	8016618 <HAL_RTC_SetDate>


			break;
 80209a0:	f000 bedb 	b.w	802175a <ThreadMainTask+0x1162>
 80209a4:	2000af40 	.word	0x2000af40
 80209a8:	20009bb8 	.word	0x20009bb8
 80209ac:	20009718 	.word	0x20009718
 80209b0:	2000b000 	.word	0x2000b000
 80209b4:	2000a04c 	.word	0x2000a04c
 80209b8:	2000a040 	.word	0x2000a040
 80209bc:	20009b74 	.word	0x20009b74

			case(SET_TIME_DEFAULT): // Если в регистр не поступала команда установки времени

				HAL_RTC_GetTime(&hrtc, &current_time , RTC_FORMAT_BCD); // получаем значение даты и времени
 80209c0:	2201      	movs	r2, #1
 80209c2:	49bb      	ldr	r1, [pc, #748]	; (8020cb0 <ThreadMainTask+0x6b8>)
 80209c4:	48bb      	ldr	r0, [pc, #748]	; (8020cb4 <ThreadMainTask+0x6bc>)
 80209c6:	f7f5 fdc9 	bl	801655c <HAL_RTC_GetTime>
				HAL_RTC_GetDate(&hrtc, &current_date , RTC_FORMAT_BCD);
 80209ca:	2201      	movs	r2, #1
 80209cc:	49ba      	ldr	r1, [pc, #744]	; (8020cb8 <ThreadMainTask+0x6c0>)
 80209ce:	48b9      	ldr	r0, [pc, #740]	; (8020cb4 <ThreadMainTask+0x6bc>)
 80209d0:	f7f5 fea6 	bl	8016720 <HAL_RTC_GetDate>

				current_time.Hours = RTC_Bcd2ToByte(current_time.Hours); // переводим из BCD формата в обычный
 80209d4:	4bb6      	ldr	r3, [pc, #728]	; (8020cb0 <ThreadMainTask+0x6b8>)
 80209d6:	781b      	ldrb	r3, [r3, #0]
 80209d8:	4618      	mov	r0, r3
 80209da:	f7f5 ff91 	bl	8016900 <RTC_Bcd2ToByte>
 80209de:	4603      	mov	r3, r0
 80209e0:	461a      	mov	r2, r3
 80209e2:	4bb3      	ldr	r3, [pc, #716]	; (8020cb0 <ThreadMainTask+0x6b8>)
 80209e4:	701a      	strb	r2, [r3, #0]
				current_time.Minutes = RTC_Bcd2ToByte(current_time.Minutes);
 80209e6:	4bb2      	ldr	r3, [pc, #712]	; (8020cb0 <ThreadMainTask+0x6b8>)
 80209e8:	785b      	ldrb	r3, [r3, #1]
 80209ea:	4618      	mov	r0, r3
 80209ec:	f7f5 ff88 	bl	8016900 <RTC_Bcd2ToByte>
 80209f0:	4603      	mov	r3, r0
 80209f2:	461a      	mov	r2, r3
 80209f4:	4bae      	ldr	r3, [pc, #696]	; (8020cb0 <ThreadMainTask+0x6b8>)
 80209f6:	705a      	strb	r2, [r3, #1]
				current_time.Seconds = RTC_Bcd2ToByte(current_time.Seconds);
 80209f8:	4bad      	ldr	r3, [pc, #692]	; (8020cb0 <ThreadMainTask+0x6b8>)
 80209fa:	789b      	ldrb	r3, [r3, #2]
 80209fc:	4618      	mov	r0, r3
 80209fe:	f7f5 ff7f 	bl	8016900 <RTC_Bcd2ToByte>
 8020a02:	4603      	mov	r3, r0
 8020a04:	461a      	mov	r2, r3
 8020a06:	4baa      	ldr	r3, [pc, #680]	; (8020cb0 <ThreadMainTask+0x6b8>)
 8020a08:	709a      	strb	r2, [r3, #2]
				current_date.Date = RTC_Bcd2ToByte(current_date.Date);
 8020a0a:	4bab      	ldr	r3, [pc, #684]	; (8020cb8 <ThreadMainTask+0x6c0>)
 8020a0c:	789b      	ldrb	r3, [r3, #2]
 8020a0e:	4618      	mov	r0, r3
 8020a10:	f7f5 ff76 	bl	8016900 <RTC_Bcd2ToByte>
 8020a14:	4603      	mov	r3, r0
 8020a16:	461a      	mov	r2, r3
 8020a18:	4ba7      	ldr	r3, [pc, #668]	; (8020cb8 <ThreadMainTask+0x6c0>)
 8020a1a:	709a      	strb	r2, [r3, #2]
				current_date.Month = RTC_Bcd2ToByte(current_date.Month);
 8020a1c:	4ba6      	ldr	r3, [pc, #664]	; (8020cb8 <ThreadMainTask+0x6c0>)
 8020a1e:	785b      	ldrb	r3, [r3, #1]
 8020a20:	4618      	mov	r0, r3
 8020a22:	f7f5 ff6d 	bl	8016900 <RTC_Bcd2ToByte>
 8020a26:	4603      	mov	r3, r0
 8020a28:	461a      	mov	r2, r3
 8020a2a:	4ba3      	ldr	r3, [pc, #652]	; (8020cb8 <ThreadMainTask+0x6c0>)
 8020a2c:	705a      	strb	r2, [r3, #1]
				current_date.Year = RTC_Bcd2ToByte(current_date.Year);
 8020a2e:	4ba2      	ldr	r3, [pc, #648]	; (8020cb8 <ThreadMainTask+0x6c0>)
 8020a30:	78db      	ldrb	r3, [r3, #3]
 8020a32:	4618      	mov	r0, r3
 8020a34:	f7f5 ff64 	bl	8016900 <RTC_Bcd2ToByte>
 8020a38:	4603      	mov	r3, r0
 8020a3a:	461a      	mov	r2, r3
 8020a3c:	4b9e      	ldr	r3, [pc, #632]	; (8020cb8 <ThreadMainTask+0x6c0>)
 8020a3e:	70da      	strb	r2, [r3, #3]
				current_date.WeekDay = RTC_Bcd2ToByte(current_date.WeekDay);
 8020a40:	4b9d      	ldr	r3, [pc, #628]	; (8020cb8 <ThreadMainTask+0x6c0>)
 8020a42:	781b      	ldrb	r3, [r3, #0]
 8020a44:	4618      	mov	r0, r3
 8020a46:	f7f5 ff5b 	bl	8016900 <RTC_Bcd2ToByte>
 8020a4a:	4603      	mov	r3, r0
 8020a4c:	461a      	mov	r2, r3
 8020a4e:	4b9a      	ldr	r3, [pc, #616]	; (8020cb8 <ThreadMainTask+0x6c0>)
 8020a50:	701a      	strb	r2, [r3, #0]

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8020a52:	4b9a      	ldr	r3, [pc, #616]	; (8020cbc <ThreadMainTask+0x6c4>)
 8020a54:	681b      	ldr	r3, [r3, #0]
 8020a56:	f04f 31ff 	mov.w	r1, #4294967295
 8020a5a:	4618      	mov	r0, r3
 8020a5c:	f7f8 fc24 	bl	80192a8 <osMutexWait>

				fm25v02_write(2*TIME_CURRENT_HOUR_REG, 0x00); // записываем в регистры значения даты и времени
 8020a60:	2100      	movs	r1, #0
 8020a62:	f242 0010 	movw	r0, #8208	; 0x2010
 8020a66:	f00a f811 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*TIME_CURRENT_HOUR_REG+1, current_time.Hours);
 8020a6a:	4b91      	ldr	r3, [pc, #580]	; (8020cb0 <ThreadMainTask+0x6b8>)
 8020a6c:	781b      	ldrb	r3, [r3, #0]
 8020a6e:	4619      	mov	r1, r3
 8020a70:	f242 0011 	movw	r0, #8209	; 0x2011
 8020a74:	f00a f80a 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*TIME_CURRENT_MINUTE_REG, 0x00);
 8020a78:	2100      	movs	r1, #0
 8020a7a:	f242 0012 	movw	r0, #8210	; 0x2012
 8020a7e:	f00a f805 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*TIME_CURRENT_MINUTE_REG+1, current_time.Minutes);
 8020a82:	4b8b      	ldr	r3, [pc, #556]	; (8020cb0 <ThreadMainTask+0x6b8>)
 8020a84:	785b      	ldrb	r3, [r3, #1]
 8020a86:	4619      	mov	r1, r3
 8020a88:	f242 0013 	movw	r0, #8211	; 0x2013
 8020a8c:	f009 fffe 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*TIME_CURRENT_SECOND_REG, 0x00);
 8020a90:	2100      	movs	r1, #0
 8020a92:	f242 0014 	movw	r0, #8212	; 0x2014
 8020a96:	f009 fff9 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*TIME_CURRENT_SECOND_REG+1, current_time.Seconds);
 8020a9a:	4b85      	ldr	r3, [pc, #532]	; (8020cb0 <ThreadMainTask+0x6b8>)
 8020a9c:	789b      	ldrb	r3, [r3, #2]
 8020a9e:	4619      	mov	r1, r3
 8020aa0:	f242 0015 	movw	r0, #8213	; 0x2015
 8020aa4:	f009 fff2 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*TIME_CURRENT_DAY_REG, 0x00);
 8020aa8:	2100      	movs	r1, #0
 8020aaa:	f242 000e 	movw	r0, #8206	; 0x200e
 8020aae:	f009 ffed 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*TIME_CURRENT_DAY_REG+1, current_date.Date);
 8020ab2:	4b81      	ldr	r3, [pc, #516]	; (8020cb8 <ThreadMainTask+0x6c0>)
 8020ab4:	789b      	ldrb	r3, [r3, #2]
 8020ab6:	4619      	mov	r1, r3
 8020ab8:	f242 000f 	movw	r0, #8207	; 0x200f
 8020abc:	f009 ffe6 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*TIME_CURRENT_MONTH_REG, 0x00);
 8020ac0:	2100      	movs	r1, #0
 8020ac2:	f242 000c 	movw	r0, #8204	; 0x200c
 8020ac6:	f009 ffe1 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*TIME_CURRENT_MONTH_REG+1, current_date.Month);
 8020aca:	4b7b      	ldr	r3, [pc, #492]	; (8020cb8 <ThreadMainTask+0x6c0>)
 8020acc:	785b      	ldrb	r3, [r3, #1]
 8020ace:	4619      	mov	r1, r3
 8020ad0:	f242 000d 	movw	r0, #8205	; 0x200d
 8020ad4:	f009 ffda 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*TIME_CURRENT_YEAR_REG, 0x00);
 8020ad8:	2100      	movs	r1, #0
 8020ada:	f242 000a 	movw	r0, #8202	; 0x200a
 8020ade:	f009 ffd5 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*TIME_CURRENT_YEAR_REG+1, current_date.Year);
 8020ae2:	4b75      	ldr	r3, [pc, #468]	; (8020cb8 <ThreadMainTask+0x6c0>)
 8020ae4:	78db      	ldrb	r3, [r3, #3]
 8020ae6:	4619      	mov	r1, r3
 8020ae8:	f242 000b 	movw	r0, #8203	; 0x200b
 8020aec:	f009 ffce 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*TIME_CURRENT_WEEKDAY_REG, 0x00);
 8020af0:	2100      	movs	r1, #0
 8020af2:	f242 0016 	movw	r0, #8214	; 0x2016
 8020af6:	f009 ffc9 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*TIME_CURRENT_WEEKDAY_REG+1, current_date.WeekDay);
 8020afa:	4b6f      	ldr	r3, [pc, #444]	; (8020cb8 <ThreadMainTask+0x6c0>)
 8020afc:	781b      	ldrb	r3, [r3, #0]
 8020afe:	4619      	mov	r1, r3
 8020b00:	f242 0017 	movw	r0, #8215	; 0x2017
 8020b04:	f009 ffc2 	bl	802aa8c <fm25v02_write>

				osMutexRelease(Fm25v02MutexHandle);
 8020b08:	4b6c      	ldr	r3, [pc, #432]	; (8020cbc <ThreadMainTask+0x6c4>)
 8020b0a:	681b      	ldr	r3, [r3, #0]
 8020b0c:	4618      	mov	r0, r3
 8020b0e:	f7f8 fc19 	bl	8019344 <osMutexRelease>

				status_registers.time_current_hour_reg = current_time.Hours;
 8020b12:	4b67      	ldr	r3, [pc, #412]	; (8020cb0 <ThreadMainTask+0x6b8>)
 8020b14:	781b      	ldrb	r3, [r3, #0]
 8020b16:	b29a      	uxth	r2, r3
 8020b18:	4b69      	ldr	r3, [pc, #420]	; (8020cc0 <ThreadMainTask+0x6c8>)
 8020b1a:	821a      	strh	r2, [r3, #16]
				status_registers.time_current_minute_reg = current_time.Minutes;
 8020b1c:	4b64      	ldr	r3, [pc, #400]	; (8020cb0 <ThreadMainTask+0x6b8>)
 8020b1e:	785b      	ldrb	r3, [r3, #1]
 8020b20:	b29a      	uxth	r2, r3
 8020b22:	4b67      	ldr	r3, [pc, #412]	; (8020cc0 <ThreadMainTask+0x6c8>)
 8020b24:	825a      	strh	r2, [r3, #18]
				status_registers.time_current_second_reg = current_time.Seconds;
 8020b26:	4b62      	ldr	r3, [pc, #392]	; (8020cb0 <ThreadMainTask+0x6b8>)
 8020b28:	789b      	ldrb	r3, [r3, #2]
 8020b2a:	b29a      	uxth	r2, r3
 8020b2c:	4b64      	ldr	r3, [pc, #400]	; (8020cc0 <ThreadMainTask+0x6c8>)
 8020b2e:	829a      	strh	r2, [r3, #20]
				status_registers.time_current_day_reg = current_date.Date;
 8020b30:	4b61      	ldr	r3, [pc, #388]	; (8020cb8 <ThreadMainTask+0x6c0>)
 8020b32:	789b      	ldrb	r3, [r3, #2]
 8020b34:	b29a      	uxth	r2, r3
 8020b36:	4b62      	ldr	r3, [pc, #392]	; (8020cc0 <ThreadMainTask+0x6c8>)
 8020b38:	81da      	strh	r2, [r3, #14]
				status_registers.time_current_month_reg = current_date.Month;
 8020b3a:	4b5f      	ldr	r3, [pc, #380]	; (8020cb8 <ThreadMainTask+0x6c0>)
 8020b3c:	785b      	ldrb	r3, [r3, #1]
 8020b3e:	b29a      	uxth	r2, r3
 8020b40:	4b5f      	ldr	r3, [pc, #380]	; (8020cc0 <ThreadMainTask+0x6c8>)
 8020b42:	819a      	strh	r2, [r3, #12]
				status_registers.time_current_year_reg = current_date.Year;
 8020b44:	4b5c      	ldr	r3, [pc, #368]	; (8020cb8 <ThreadMainTask+0x6c0>)
 8020b46:	78db      	ldrb	r3, [r3, #3]
 8020b48:	b29a      	uxth	r2, r3
 8020b4a:	4b5d      	ldr	r3, [pc, #372]	; (8020cc0 <ThreadMainTask+0x6c8>)
 8020b4c:	815a      	strh	r2, [r3, #10]
				status_registers.time_current_weekday_reg = current_date.WeekDay;
 8020b4e:	4b5a      	ldr	r3, [pc, #360]	; (8020cb8 <ThreadMainTask+0x6c0>)
 8020b50:	781b      	ldrb	r3, [r3, #0]
 8020b52:	b29a      	uxth	r2, r3
 8020b54:	4b5a      	ldr	r3, [pc, #360]	; (8020cc0 <ThreadMainTask+0x6c8>)
 8020b56:	82da      	strh	r2, [r3, #22]

				if( ((control_registers.light_control_reg)&0x0020) == 0x0020 ) // если включено управление по расписанию
 8020b58:	4b5a      	ldr	r3, [pc, #360]	; (8020cc4 <ThreadMainTask+0x6cc>)
 8020b5a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8020b5e:	f003 0320 	and.w	r3, r3, #32
 8020b62:	2b00      	cmp	r3, #0
 8020b64:	f000 85f8 	beq.w	8021758 <ThreadMainTask+0x1160>
				{

					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8020b68:	4b54      	ldr	r3, [pc, #336]	; (8020cbc <ThreadMainTask+0x6c4>)
 8020b6a:	681b      	ldr	r3, [r3, #0]
 8020b6c:	f04f 31ff 	mov.w	r1, #4294967295
 8020b70:	4618      	mov	r0, r3
 8020b72:	f7f8 fb99 	bl	80192a8 <osMutexWait>

					fm25v02_read( 2*(0x28C0+(((current_date.Month)-1)*31*16)+(((current_date.Date)-1)*16)+0)+1, &temp_time_on_1_hour);
 8020b76:	4b50      	ldr	r3, [pc, #320]	; (8020cb8 <ThreadMainTask+0x6c0>)
 8020b78:	785b      	ldrb	r3, [r3, #1]
 8020b7a:	1e5a      	subs	r2, r3, #1
 8020b7c:	4613      	mov	r3, r2
 8020b7e:	015b      	lsls	r3, r3, #5
 8020b80:	1a9b      	subs	r3, r3, r2
 8020b82:	011b      	lsls	r3, r3, #4
 8020b84:	f503 5223 	add.w	r2, r3, #10432	; 0x28c0
 8020b88:	4b4b      	ldr	r3, [pc, #300]	; (8020cb8 <ThreadMainTask+0x6c0>)
 8020b8a:	789b      	ldrb	r3, [r3, #2]
 8020b8c:	3b01      	subs	r3, #1
 8020b8e:	011b      	lsls	r3, r3, #4
 8020b90:	4413      	add	r3, r2
 8020b92:	b29b      	uxth	r3, r3
 8020b94:	005b      	lsls	r3, r3, #1
 8020b96:	b29b      	uxth	r3, r3
 8020b98:	3301      	adds	r3, #1
 8020b9a:	b29b      	uxth	r3, r3
 8020b9c:	494a      	ldr	r1, [pc, #296]	; (8020cc8 <ThreadMainTask+0x6d0>)
 8020b9e:	4618      	mov	r0, r3
 8020ba0:	f009 ff3a 	bl	802aa18 <fm25v02_read>
					fm25v02_read( 2*(0x28C0+(((current_date.Month)-1)*31*16)+(((current_date.Date)-1)*16)+1)+1, &temp_time_on_1_minute);
 8020ba4:	4b44      	ldr	r3, [pc, #272]	; (8020cb8 <ThreadMainTask+0x6c0>)
 8020ba6:	785b      	ldrb	r3, [r3, #1]
 8020ba8:	1e5a      	subs	r2, r3, #1
 8020baa:	4613      	mov	r3, r2
 8020bac:	015b      	lsls	r3, r3, #5
 8020bae:	1a9b      	subs	r3, r3, r2
 8020bb0:	011b      	lsls	r3, r3, #4
 8020bb2:	f503 5223 	add.w	r2, r3, #10432	; 0x28c0
 8020bb6:	4b40      	ldr	r3, [pc, #256]	; (8020cb8 <ThreadMainTask+0x6c0>)
 8020bb8:	789b      	ldrb	r3, [r3, #2]
 8020bba:	3b01      	subs	r3, #1
 8020bbc:	011b      	lsls	r3, r3, #4
 8020bbe:	4413      	add	r3, r2
 8020bc0:	3301      	adds	r3, #1
 8020bc2:	b29b      	uxth	r3, r3
 8020bc4:	005b      	lsls	r3, r3, #1
 8020bc6:	b29b      	uxth	r3, r3
 8020bc8:	3301      	adds	r3, #1
 8020bca:	b29b      	uxth	r3, r3
 8020bcc:	493f      	ldr	r1, [pc, #252]	; (8020ccc <ThreadMainTask+0x6d4>)
 8020bce:	4618      	mov	r0, r3
 8020bd0:	f009 ff22 	bl	802aa18 <fm25v02_read>
					fm25v02_read( 2*(0x28C0+(((current_date.Month)-1)*31*16)+(((current_date.Date)-1)*16)+2)+1, &temp_time_on_2_hour);
 8020bd4:	4b38      	ldr	r3, [pc, #224]	; (8020cb8 <ThreadMainTask+0x6c0>)
 8020bd6:	785b      	ldrb	r3, [r3, #1]
 8020bd8:	1e5a      	subs	r2, r3, #1
 8020bda:	4613      	mov	r3, r2
 8020bdc:	015b      	lsls	r3, r3, #5
 8020bde:	1a9b      	subs	r3, r3, r2
 8020be0:	011b      	lsls	r3, r3, #4
 8020be2:	f503 5223 	add.w	r2, r3, #10432	; 0x28c0
 8020be6:	4b34      	ldr	r3, [pc, #208]	; (8020cb8 <ThreadMainTask+0x6c0>)
 8020be8:	789b      	ldrb	r3, [r3, #2]
 8020bea:	3b01      	subs	r3, #1
 8020bec:	011b      	lsls	r3, r3, #4
 8020bee:	4413      	add	r3, r2
 8020bf0:	3302      	adds	r3, #2
 8020bf2:	b29b      	uxth	r3, r3
 8020bf4:	005b      	lsls	r3, r3, #1
 8020bf6:	b29b      	uxth	r3, r3
 8020bf8:	3301      	adds	r3, #1
 8020bfa:	b29b      	uxth	r3, r3
 8020bfc:	4934      	ldr	r1, [pc, #208]	; (8020cd0 <ThreadMainTask+0x6d8>)
 8020bfe:	4618      	mov	r0, r3
 8020c00:	f009 ff0a 	bl	802aa18 <fm25v02_read>
					fm25v02_read( 2*(0x28C0+(((current_date.Month)-1)*31*16)+(((current_date.Date)-1)*16)+3)+1, &temp_time_on_2_minute);
 8020c04:	4b2c      	ldr	r3, [pc, #176]	; (8020cb8 <ThreadMainTask+0x6c0>)
 8020c06:	785b      	ldrb	r3, [r3, #1]
 8020c08:	1e5a      	subs	r2, r3, #1
 8020c0a:	4613      	mov	r3, r2
 8020c0c:	015b      	lsls	r3, r3, #5
 8020c0e:	1a9b      	subs	r3, r3, r2
 8020c10:	011b      	lsls	r3, r3, #4
 8020c12:	f503 5223 	add.w	r2, r3, #10432	; 0x28c0
 8020c16:	4b28      	ldr	r3, [pc, #160]	; (8020cb8 <ThreadMainTask+0x6c0>)
 8020c18:	789b      	ldrb	r3, [r3, #2]
 8020c1a:	3b01      	subs	r3, #1
 8020c1c:	011b      	lsls	r3, r3, #4
 8020c1e:	4413      	add	r3, r2
 8020c20:	3303      	adds	r3, #3
 8020c22:	b29b      	uxth	r3, r3
 8020c24:	005b      	lsls	r3, r3, #1
 8020c26:	b29b      	uxth	r3, r3
 8020c28:	3301      	adds	r3, #1
 8020c2a:	b29b      	uxth	r3, r3
 8020c2c:	4929      	ldr	r1, [pc, #164]	; (8020cd4 <ThreadMainTask+0x6dc>)
 8020c2e:	4618      	mov	r0, r3
 8020c30:	f009 fef2 	bl	802aa18 <fm25v02_read>
					fm25v02_read( 2*(0x28C0+(((current_date.Month)-1)*31*16)+(((current_date.Date)-1)*16)+4)+1, &temp_time_on_3_hour);
 8020c34:	4b20      	ldr	r3, [pc, #128]	; (8020cb8 <ThreadMainTask+0x6c0>)
 8020c36:	785b      	ldrb	r3, [r3, #1]
 8020c38:	1e5a      	subs	r2, r3, #1
 8020c3a:	4613      	mov	r3, r2
 8020c3c:	015b      	lsls	r3, r3, #5
 8020c3e:	1a9b      	subs	r3, r3, r2
 8020c40:	011b      	lsls	r3, r3, #4
 8020c42:	f503 5223 	add.w	r2, r3, #10432	; 0x28c0
 8020c46:	4b1c      	ldr	r3, [pc, #112]	; (8020cb8 <ThreadMainTask+0x6c0>)
 8020c48:	789b      	ldrb	r3, [r3, #2]
 8020c4a:	3b01      	subs	r3, #1
 8020c4c:	011b      	lsls	r3, r3, #4
 8020c4e:	4413      	add	r3, r2
 8020c50:	3304      	adds	r3, #4
 8020c52:	b29b      	uxth	r3, r3
 8020c54:	005b      	lsls	r3, r3, #1
 8020c56:	b29b      	uxth	r3, r3
 8020c58:	3301      	adds	r3, #1
 8020c5a:	b29b      	uxth	r3, r3
 8020c5c:	491e      	ldr	r1, [pc, #120]	; (8020cd8 <ThreadMainTask+0x6e0>)
 8020c5e:	4618      	mov	r0, r3
 8020c60:	f009 feda 	bl	802aa18 <fm25v02_read>
					fm25v02_read( 2*(0x28C0+(((current_date.Month)-1)*31*16)+(((current_date.Date)-1)*16)+5)+1, &temp_time_on_3_minute);
 8020c64:	4b14      	ldr	r3, [pc, #80]	; (8020cb8 <ThreadMainTask+0x6c0>)
 8020c66:	785b      	ldrb	r3, [r3, #1]
 8020c68:	1e5a      	subs	r2, r3, #1
 8020c6a:	4613      	mov	r3, r2
 8020c6c:	015b      	lsls	r3, r3, #5
 8020c6e:	1a9b      	subs	r3, r3, r2
 8020c70:	011b      	lsls	r3, r3, #4
 8020c72:	f503 5223 	add.w	r2, r3, #10432	; 0x28c0
 8020c76:	4b10      	ldr	r3, [pc, #64]	; (8020cb8 <ThreadMainTask+0x6c0>)
 8020c78:	789b      	ldrb	r3, [r3, #2]
 8020c7a:	3b01      	subs	r3, #1
 8020c7c:	011b      	lsls	r3, r3, #4
 8020c7e:	4413      	add	r3, r2
 8020c80:	3305      	adds	r3, #5
 8020c82:	b29b      	uxth	r3, r3
 8020c84:	005b      	lsls	r3, r3, #1
 8020c86:	b29b      	uxth	r3, r3
 8020c88:	3301      	adds	r3, #1
 8020c8a:	b29b      	uxth	r3, r3
 8020c8c:	4913      	ldr	r1, [pc, #76]	; (8020cdc <ThreadMainTask+0x6e4>)
 8020c8e:	4618      	mov	r0, r3
 8020c90:	f009 fec2 	bl	802aa18 <fm25v02_read>
					fm25v02_read( 2*(0x28C0+(((current_date.Month)-1)*31*16)+(((current_date.Date)-1)*16)+6)+1, &temp_time_on_4_hour);
 8020c94:	4b08      	ldr	r3, [pc, #32]	; (8020cb8 <ThreadMainTask+0x6c0>)
 8020c96:	785b      	ldrb	r3, [r3, #1]
 8020c98:	1e5a      	subs	r2, r3, #1
 8020c9a:	4613      	mov	r3, r2
 8020c9c:	015b      	lsls	r3, r3, #5
 8020c9e:	1a9b      	subs	r3, r3, r2
 8020ca0:	011b      	lsls	r3, r3, #4
 8020ca2:	f503 5223 	add.w	r2, r3, #10432	; 0x28c0
 8020ca6:	4b04      	ldr	r3, [pc, #16]	; (8020cb8 <ThreadMainTask+0x6c0>)
 8020ca8:	789b      	ldrb	r3, [r3, #2]
 8020caa:	3b01      	subs	r3, #1
 8020cac:	e018      	b.n	8020ce0 <ThreadMainTask+0x6e8>
 8020cae:	bf00      	nop
 8020cb0:	2000a028 	.word	0x2000a028
 8020cb4:	20009b74 	.word	0x20009b74
 8020cb8:	2000a020 	.word	0x2000a020
 8020cbc:	20009bb8 	.word	0x20009bb8
 8020cc0:	2000af40 	.word	0x2000af40
 8020cc4:	2000b000 	.word	0x2000b000
 8020cc8:	2000a069 	.word	0x2000a069
 8020ccc:	2000a03c 	.word	0x2000a03c
 8020cd0:	2000a024 	.word	0x2000a024
 8020cd4:	2000a01c 	.word	0x2000a01c
 8020cd8:	2000a067 	.word	0x2000a067
 8020cdc:	2000a063 	.word	0x2000a063
 8020ce0:	011b      	lsls	r3, r3, #4
 8020ce2:	4413      	add	r3, r2
 8020ce4:	3306      	adds	r3, #6
 8020ce6:	b29b      	uxth	r3, r3
 8020ce8:	005b      	lsls	r3, r3, #1
 8020cea:	b29b      	uxth	r3, r3
 8020cec:	3301      	adds	r3, #1
 8020cee:	b29b      	uxth	r3, r3
 8020cf0:	49bb      	ldr	r1, [pc, #748]	; (8020fe0 <ThreadMainTask+0x9e8>)
 8020cf2:	4618      	mov	r0, r3
 8020cf4:	f009 fe90 	bl	802aa18 <fm25v02_read>
					fm25v02_read( 2*(0x28C0+(((current_date.Month)-1)*31*16)+(((current_date.Date)-1)*16)+7)+1, &temp_time_on_4_minute);
 8020cf8:	4bba      	ldr	r3, [pc, #744]	; (8020fe4 <ThreadMainTask+0x9ec>)
 8020cfa:	785b      	ldrb	r3, [r3, #1]
 8020cfc:	1e5a      	subs	r2, r3, #1
 8020cfe:	4613      	mov	r3, r2
 8020d00:	015b      	lsls	r3, r3, #5
 8020d02:	1a9b      	subs	r3, r3, r2
 8020d04:	011b      	lsls	r3, r3, #4
 8020d06:	f503 5223 	add.w	r2, r3, #10432	; 0x28c0
 8020d0a:	4bb6      	ldr	r3, [pc, #728]	; (8020fe4 <ThreadMainTask+0x9ec>)
 8020d0c:	789b      	ldrb	r3, [r3, #2]
 8020d0e:	3b01      	subs	r3, #1
 8020d10:	011b      	lsls	r3, r3, #4
 8020d12:	4413      	add	r3, r2
 8020d14:	3307      	adds	r3, #7
 8020d16:	b29b      	uxth	r3, r3
 8020d18:	005b      	lsls	r3, r3, #1
 8020d1a:	b29b      	uxth	r3, r3
 8020d1c:	3301      	adds	r3, #1
 8020d1e:	b29b      	uxth	r3, r3
 8020d20:	49b1      	ldr	r1, [pc, #708]	; (8020fe8 <ThreadMainTask+0x9f0>)
 8020d22:	4618      	mov	r0, r3
 8020d24:	f009 fe78 	bl	802aa18 <fm25v02_read>
					fm25v02_read( 2*(0x28C0+(((current_date.Month)-1)*31*16)+(((current_date.Date)-1)*16)+8)+1, &temp_time_off_1_hour);
 8020d28:	4bae      	ldr	r3, [pc, #696]	; (8020fe4 <ThreadMainTask+0x9ec>)
 8020d2a:	785b      	ldrb	r3, [r3, #1]
 8020d2c:	1e5a      	subs	r2, r3, #1
 8020d2e:	4613      	mov	r3, r2
 8020d30:	015b      	lsls	r3, r3, #5
 8020d32:	1a9b      	subs	r3, r3, r2
 8020d34:	011b      	lsls	r3, r3, #4
 8020d36:	f503 5223 	add.w	r2, r3, #10432	; 0x28c0
 8020d3a:	4baa      	ldr	r3, [pc, #680]	; (8020fe4 <ThreadMainTask+0x9ec>)
 8020d3c:	789b      	ldrb	r3, [r3, #2]
 8020d3e:	3b01      	subs	r3, #1
 8020d40:	011b      	lsls	r3, r3, #4
 8020d42:	4413      	add	r3, r2
 8020d44:	3308      	adds	r3, #8
 8020d46:	b29b      	uxth	r3, r3
 8020d48:	005b      	lsls	r3, r3, #1
 8020d4a:	b29b      	uxth	r3, r3
 8020d4c:	3301      	adds	r3, #1
 8020d4e:	b29b      	uxth	r3, r3
 8020d50:	49a6      	ldr	r1, [pc, #664]	; (8020fec <ThreadMainTask+0x9f4>)
 8020d52:	4618      	mov	r0, r3
 8020d54:	f009 fe60 	bl	802aa18 <fm25v02_read>
					fm25v02_read( 2*(0x28C0+(((current_date.Month)-1)*31*16)+(((current_date.Date)-1)*16)+9)+1, &temp_time_off_1_minute);
 8020d58:	4ba2      	ldr	r3, [pc, #648]	; (8020fe4 <ThreadMainTask+0x9ec>)
 8020d5a:	785b      	ldrb	r3, [r3, #1]
 8020d5c:	1e5a      	subs	r2, r3, #1
 8020d5e:	4613      	mov	r3, r2
 8020d60:	015b      	lsls	r3, r3, #5
 8020d62:	1a9b      	subs	r3, r3, r2
 8020d64:	011b      	lsls	r3, r3, #4
 8020d66:	f503 5223 	add.w	r2, r3, #10432	; 0x28c0
 8020d6a:	4b9e      	ldr	r3, [pc, #632]	; (8020fe4 <ThreadMainTask+0x9ec>)
 8020d6c:	789b      	ldrb	r3, [r3, #2]
 8020d6e:	3b01      	subs	r3, #1
 8020d70:	011b      	lsls	r3, r3, #4
 8020d72:	4413      	add	r3, r2
 8020d74:	3309      	adds	r3, #9
 8020d76:	b29b      	uxth	r3, r3
 8020d78:	005b      	lsls	r3, r3, #1
 8020d7a:	b29b      	uxth	r3, r3
 8020d7c:	3301      	adds	r3, #1
 8020d7e:	b29b      	uxth	r3, r3
 8020d80:	499b      	ldr	r1, [pc, #620]	; (8020ff0 <ThreadMainTask+0x9f8>)
 8020d82:	4618      	mov	r0, r3
 8020d84:	f009 fe48 	bl	802aa18 <fm25v02_read>
					fm25v02_read( 2*(0x28C0+(((current_date.Month)-1)*31*16)+(((current_date.Date)-1)*16)+10)+1, &temp_time_off_2_hour);
 8020d88:	4b96      	ldr	r3, [pc, #600]	; (8020fe4 <ThreadMainTask+0x9ec>)
 8020d8a:	785b      	ldrb	r3, [r3, #1]
 8020d8c:	1e5a      	subs	r2, r3, #1
 8020d8e:	4613      	mov	r3, r2
 8020d90:	015b      	lsls	r3, r3, #5
 8020d92:	1a9b      	subs	r3, r3, r2
 8020d94:	011b      	lsls	r3, r3, #4
 8020d96:	f503 5223 	add.w	r2, r3, #10432	; 0x28c0
 8020d9a:	4b92      	ldr	r3, [pc, #584]	; (8020fe4 <ThreadMainTask+0x9ec>)
 8020d9c:	789b      	ldrb	r3, [r3, #2]
 8020d9e:	3b01      	subs	r3, #1
 8020da0:	011b      	lsls	r3, r3, #4
 8020da2:	4413      	add	r3, r2
 8020da4:	330a      	adds	r3, #10
 8020da6:	b29b      	uxth	r3, r3
 8020da8:	005b      	lsls	r3, r3, #1
 8020daa:	b29b      	uxth	r3, r3
 8020dac:	3301      	adds	r3, #1
 8020dae:	b29b      	uxth	r3, r3
 8020db0:	4990      	ldr	r1, [pc, #576]	; (8020ff4 <ThreadMainTask+0x9fc>)
 8020db2:	4618      	mov	r0, r3
 8020db4:	f009 fe30 	bl	802aa18 <fm25v02_read>
					fm25v02_read( 2*(0x28C0+(((current_date.Month)-1)*31*16)+(((current_date.Date)-1)*16)+11)+1, &temp_time_off_2_minute);
 8020db8:	4b8a      	ldr	r3, [pc, #552]	; (8020fe4 <ThreadMainTask+0x9ec>)
 8020dba:	785b      	ldrb	r3, [r3, #1]
 8020dbc:	1e5a      	subs	r2, r3, #1
 8020dbe:	4613      	mov	r3, r2
 8020dc0:	015b      	lsls	r3, r3, #5
 8020dc2:	1a9b      	subs	r3, r3, r2
 8020dc4:	011b      	lsls	r3, r3, #4
 8020dc6:	f503 5223 	add.w	r2, r3, #10432	; 0x28c0
 8020dca:	4b86      	ldr	r3, [pc, #536]	; (8020fe4 <ThreadMainTask+0x9ec>)
 8020dcc:	789b      	ldrb	r3, [r3, #2]
 8020dce:	3b01      	subs	r3, #1
 8020dd0:	011b      	lsls	r3, r3, #4
 8020dd2:	4413      	add	r3, r2
 8020dd4:	330b      	adds	r3, #11
 8020dd6:	b29b      	uxth	r3, r3
 8020dd8:	005b      	lsls	r3, r3, #1
 8020dda:	b29b      	uxth	r3, r3
 8020ddc:	3301      	adds	r3, #1
 8020dde:	b29b      	uxth	r3, r3
 8020de0:	4985      	ldr	r1, [pc, #532]	; (8020ff8 <ThreadMainTask+0xa00>)
 8020de2:	4618      	mov	r0, r3
 8020de4:	f009 fe18 	bl	802aa18 <fm25v02_read>
					fm25v02_read( 2*(0x28C0+(((current_date.Month)-1)*31*16)+(((current_date.Date)-1)*16)+12)+1, &temp_time_off_3_hour);
 8020de8:	4b7e      	ldr	r3, [pc, #504]	; (8020fe4 <ThreadMainTask+0x9ec>)
 8020dea:	785b      	ldrb	r3, [r3, #1]
 8020dec:	1e5a      	subs	r2, r3, #1
 8020dee:	4613      	mov	r3, r2
 8020df0:	015b      	lsls	r3, r3, #5
 8020df2:	1a9b      	subs	r3, r3, r2
 8020df4:	011b      	lsls	r3, r3, #4
 8020df6:	f503 5223 	add.w	r2, r3, #10432	; 0x28c0
 8020dfa:	4b7a      	ldr	r3, [pc, #488]	; (8020fe4 <ThreadMainTask+0x9ec>)
 8020dfc:	789b      	ldrb	r3, [r3, #2]
 8020dfe:	3b01      	subs	r3, #1
 8020e00:	011b      	lsls	r3, r3, #4
 8020e02:	4413      	add	r3, r2
 8020e04:	330c      	adds	r3, #12
 8020e06:	b29b      	uxth	r3, r3
 8020e08:	005b      	lsls	r3, r3, #1
 8020e0a:	b29b      	uxth	r3, r3
 8020e0c:	3301      	adds	r3, #1
 8020e0e:	b29b      	uxth	r3, r3
 8020e10:	497a      	ldr	r1, [pc, #488]	; (8020ffc <ThreadMainTask+0xa04>)
 8020e12:	4618      	mov	r0, r3
 8020e14:	f009 fe00 	bl	802aa18 <fm25v02_read>
					fm25v02_read( 2*(0x28C0+(((current_date.Month)-1)*31*16)+(((current_date.Date)-1)*16)+13)+1, &temp_time_off_3_minute);
 8020e18:	4b72      	ldr	r3, [pc, #456]	; (8020fe4 <ThreadMainTask+0x9ec>)
 8020e1a:	785b      	ldrb	r3, [r3, #1]
 8020e1c:	1e5a      	subs	r2, r3, #1
 8020e1e:	4613      	mov	r3, r2
 8020e20:	015b      	lsls	r3, r3, #5
 8020e22:	1a9b      	subs	r3, r3, r2
 8020e24:	011b      	lsls	r3, r3, #4
 8020e26:	f503 5223 	add.w	r2, r3, #10432	; 0x28c0
 8020e2a:	4b6e      	ldr	r3, [pc, #440]	; (8020fe4 <ThreadMainTask+0x9ec>)
 8020e2c:	789b      	ldrb	r3, [r3, #2]
 8020e2e:	3b01      	subs	r3, #1
 8020e30:	011b      	lsls	r3, r3, #4
 8020e32:	4413      	add	r3, r2
 8020e34:	330d      	adds	r3, #13
 8020e36:	b29b      	uxth	r3, r3
 8020e38:	005b      	lsls	r3, r3, #1
 8020e3a:	b29b      	uxth	r3, r3
 8020e3c:	3301      	adds	r3, #1
 8020e3e:	b29b      	uxth	r3, r3
 8020e40:	496f      	ldr	r1, [pc, #444]	; (8021000 <ThreadMainTask+0xa08>)
 8020e42:	4618      	mov	r0, r3
 8020e44:	f009 fde8 	bl	802aa18 <fm25v02_read>
					fm25v02_read( 2*(0x28C0+(((current_date.Month)-1)*31*16)+(((current_date.Date)-1)*16)+14)+1, &temp_time_off_4_hour);
 8020e48:	4b66      	ldr	r3, [pc, #408]	; (8020fe4 <ThreadMainTask+0x9ec>)
 8020e4a:	785b      	ldrb	r3, [r3, #1]
 8020e4c:	1e5a      	subs	r2, r3, #1
 8020e4e:	4613      	mov	r3, r2
 8020e50:	015b      	lsls	r3, r3, #5
 8020e52:	1a9b      	subs	r3, r3, r2
 8020e54:	011b      	lsls	r3, r3, #4
 8020e56:	f503 5223 	add.w	r2, r3, #10432	; 0x28c0
 8020e5a:	4b62      	ldr	r3, [pc, #392]	; (8020fe4 <ThreadMainTask+0x9ec>)
 8020e5c:	789b      	ldrb	r3, [r3, #2]
 8020e5e:	3b01      	subs	r3, #1
 8020e60:	011b      	lsls	r3, r3, #4
 8020e62:	4413      	add	r3, r2
 8020e64:	330e      	adds	r3, #14
 8020e66:	b29b      	uxth	r3, r3
 8020e68:	005b      	lsls	r3, r3, #1
 8020e6a:	b29b      	uxth	r3, r3
 8020e6c:	3301      	adds	r3, #1
 8020e6e:	b29b      	uxth	r3, r3
 8020e70:	4964      	ldr	r1, [pc, #400]	; (8021004 <ThreadMainTask+0xa0c>)
 8020e72:	4618      	mov	r0, r3
 8020e74:	f009 fdd0 	bl	802aa18 <fm25v02_read>
					fm25v02_read( 2*(0x28C0+(((current_date.Month)-1)*31*16)+(((current_date.Date)-1)*16)+15)+1, &temp_time_off_4_minute);
 8020e78:	4b5a      	ldr	r3, [pc, #360]	; (8020fe4 <ThreadMainTask+0x9ec>)
 8020e7a:	785b      	ldrb	r3, [r3, #1]
 8020e7c:	1e5a      	subs	r2, r3, #1
 8020e7e:	4613      	mov	r3, r2
 8020e80:	015b      	lsls	r3, r3, #5
 8020e82:	1a9b      	subs	r3, r3, r2
 8020e84:	011b      	lsls	r3, r3, #4
 8020e86:	f503 5223 	add.w	r2, r3, #10432	; 0x28c0
 8020e8a:	4b56      	ldr	r3, [pc, #344]	; (8020fe4 <ThreadMainTask+0x9ec>)
 8020e8c:	789b      	ldrb	r3, [r3, #2]
 8020e8e:	3b01      	subs	r3, #1
 8020e90:	011b      	lsls	r3, r3, #4
 8020e92:	4413      	add	r3, r2
 8020e94:	330f      	adds	r3, #15
 8020e96:	b29b      	uxth	r3, r3
 8020e98:	005b      	lsls	r3, r3, #1
 8020e9a:	b29b      	uxth	r3, r3
 8020e9c:	3301      	adds	r3, #1
 8020e9e:	b29b      	uxth	r3, r3
 8020ea0:	4959      	ldr	r1, [pc, #356]	; (8021008 <ThreadMainTask+0xa10>)
 8020ea2:	4618      	mov	r0, r3
 8020ea4:	f009 fdb8 	bl	802aa18 <fm25v02_read>

					osMutexRelease(Fm25v02MutexHandle);
 8020ea8:	4b58      	ldr	r3, [pc, #352]	; (802100c <ThreadMainTask+0xa14>)
 8020eaa:	681b      	ldr	r3, [r3, #0]
 8020eac:	4618      	mov	r0, r3
 8020eae:	f7f8 fa49 	bl	8019344 <osMutexRelease>

					if( (((control_registers.light_control_reg)&0x0001)==0x0000) || (((control_registers.light_control_reg)&0x0002)==0x0000) || (((control_registers.light_control_reg)&0x0004)==0x0000) )
 8020eb2:	4b57      	ldr	r3, [pc, #348]	; (8021010 <ThreadMainTask+0xa18>)
 8020eb4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8020eb8:	f003 0301 	and.w	r3, r3, #1
 8020ebc:	2b00      	cmp	r3, #0
 8020ebe:	d00e      	beq.n	8020ede <ThreadMainTask+0x8e6>
 8020ec0:	4b53      	ldr	r3, [pc, #332]	; (8021010 <ThreadMainTask+0xa18>)
 8020ec2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8020ec6:	f003 0302 	and.w	r3, r3, #2
 8020eca:	2b00      	cmp	r3, #0
 8020ecc:	d007      	beq.n	8020ede <ThreadMainTask+0x8e6>
 8020ece:	4b50      	ldr	r3, [pc, #320]	; (8021010 <ThreadMainTask+0xa18>)
 8020ed0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8020ed4:	f003 0304 	and.w	r3, r3, #4
 8020ed8:	2b00      	cmp	r3, #0
 8020eda:	f040 8225 	bne.w	8021328 <ThreadMainTask+0xd30>
					{

						if( (temp_time_on_1_hour==current_time.Hours)&&(temp_time_on_1_minute==current_time.Minutes)&&((temp_time_on_1_hour!=temp_time_off_1_hour)||(temp_time_on_1_minute!=temp_time_off_1_minute)) )
 8020ede:	4b4d      	ldr	r3, [pc, #308]	; (8021014 <ThreadMainTask+0xa1c>)
 8020ee0:	781a      	ldrb	r2, [r3, #0]
 8020ee2:	4b4d      	ldr	r3, [pc, #308]	; (8021018 <ThreadMainTask+0xa20>)
 8020ee4:	781b      	ldrb	r3, [r3, #0]
 8020ee6:	429a      	cmp	r2, r3
 8020ee8:	d170      	bne.n	8020fcc <ThreadMainTask+0x9d4>
 8020eea:	4b4a      	ldr	r3, [pc, #296]	; (8021014 <ThreadMainTask+0xa1c>)
 8020eec:	785a      	ldrb	r2, [r3, #1]
 8020eee:	4b4b      	ldr	r3, [pc, #300]	; (802101c <ThreadMainTask+0xa24>)
 8020ef0:	781b      	ldrb	r3, [r3, #0]
 8020ef2:	429a      	cmp	r2, r3
 8020ef4:	d16a      	bne.n	8020fcc <ThreadMainTask+0x9d4>
 8020ef6:	4b48      	ldr	r3, [pc, #288]	; (8021018 <ThreadMainTask+0xa20>)
 8020ef8:	781a      	ldrb	r2, [r3, #0]
 8020efa:	4b3c      	ldr	r3, [pc, #240]	; (8020fec <ThreadMainTask+0x9f4>)
 8020efc:	781b      	ldrb	r3, [r3, #0]
 8020efe:	429a      	cmp	r2, r3
 8020f00:	d105      	bne.n	8020f0e <ThreadMainTask+0x916>
 8020f02:	4b46      	ldr	r3, [pc, #280]	; (802101c <ThreadMainTask+0xa24>)
 8020f04:	781a      	ldrb	r2, [r3, #0]
 8020f06:	4b3a      	ldr	r3, [pc, #232]	; (8020ff0 <ThreadMainTask+0x9f8>)
 8020f08:	781b      	ldrb	r3, [r3, #0]
 8020f0a:	429a      	cmp	r2, r3
 8020f0c:	d05e      	beq.n	8020fcc <ThreadMainTask+0x9d4>
						{
							osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8020f0e:	4b3f      	ldr	r3, [pc, #252]	; (802100c <ThreadMainTask+0xa14>)
 8020f10:	681b      	ldr	r3, [r3, #0]
 8020f12:	f04f 31ff 	mov.w	r1, #4294967295
 8020f16:	4618      	mov	r0, r3
 8020f18:	f7f8 f9c6 	bl	80192a8 <osMutexWait>
							fm25v02_read(2*LIGHT_CONTROL_REG+1, &temp);
 8020f1c:	f107 030f 	add.w	r3, r7, #15
 8020f20:	4619      	mov	r1, r3
 8020f22:	f242 1083 	movw	r0, #8579	; 0x2183
 8020f26:	f009 fd77 	bl	802aa18 <fm25v02_read>
							temp = temp|0x07;
 8020f2a:	7bfb      	ldrb	r3, [r7, #15]
 8020f2c:	f043 0307 	orr.w	r3, r3, #7
 8020f30:	b2db      	uxtb	r3, r3
 8020f32:	73fb      	strb	r3, [r7, #15]
							fm25v02_write(2*LIGHT_CONTROL_REG+1, temp);
 8020f34:	7bfb      	ldrb	r3, [r7, #15]
 8020f36:	4619      	mov	r1, r3
 8020f38:	f242 1083 	movw	r0, #8579	; 0x2183
 8020f3c:	f009 fda6 	bl	802aa8c <fm25v02_write>
							control_registers.light_control_reg = control_registers.light_control_reg|0x0007;
 8020f40:	4b33      	ldr	r3, [pc, #204]	; (8021010 <ThreadMainTask+0xa18>)
 8020f42:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8020f46:	f043 0307 	orr.w	r3, r3, #7
 8020f4a:	b29a      	uxth	r2, r3
 8020f4c:	4b30      	ldr	r3, [pc, #192]	; (8021010 <ThreadMainTask+0xa18>)
 8020f4e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

							fm25v02_write(2*MONTH_LIGHTING_ON_REG, 0x00);
 8020f52:	2100      	movs	r1, #0
 8020f54:	f242 006e 	movw	r0, #8302	; 0x206e
 8020f58:	f009 fd98 	bl	802aa8c <fm25v02_write>
							temp = current_date.Month;
 8020f5c:	4b21      	ldr	r3, [pc, #132]	; (8020fe4 <ThreadMainTask+0x9ec>)
 8020f5e:	785b      	ldrb	r3, [r3, #1]
 8020f60:	73fb      	strb	r3, [r7, #15]
							fm25v02_write(2*MONTH_LIGHTING_ON_REG+1, temp);
 8020f62:	7bfb      	ldrb	r3, [r7, #15]
 8020f64:	4619      	mov	r1, r3
 8020f66:	f242 006f 	movw	r0, #8303	; 0x206f
 8020f6a:	f009 fd8f 	bl	802aa8c <fm25v02_write>
							fm25v02_write(2*DAY_LIGHTING_ON_REG, 0x00);
 8020f6e:	2100      	movs	r1, #0
 8020f70:	f242 0070 	movw	r0, #8304	; 0x2070
 8020f74:	f009 fd8a 	bl	802aa8c <fm25v02_write>
							temp = current_date.Date;
 8020f78:	4b1a      	ldr	r3, [pc, #104]	; (8020fe4 <ThreadMainTask+0x9ec>)
 8020f7a:	789b      	ldrb	r3, [r3, #2]
 8020f7c:	73fb      	strb	r3, [r7, #15]
							fm25v02_write(2*DAY_LIGHTING_ON_REG+1, temp);
 8020f7e:	7bfb      	ldrb	r3, [r7, #15]
 8020f80:	4619      	mov	r1, r3
 8020f82:	f242 0071 	movw	r0, #8305	; 0x2071
 8020f86:	f009 fd81 	bl	802aa8c <fm25v02_write>
							fm25v02_write(2*HOUR_LIGHTING_ON_REG+1, 0x00);
 8020f8a:	2100      	movs	r1, #0
 8020f8c:	f242 0073 	movw	r0, #8307	; 0x2073
 8020f90:	f009 fd7c 	bl	802aa8c <fm25v02_write>
							temp = current_time.Hours;
 8020f94:	4b1f      	ldr	r3, [pc, #124]	; (8021014 <ThreadMainTask+0xa1c>)
 8020f96:	781b      	ldrb	r3, [r3, #0]
 8020f98:	73fb      	strb	r3, [r7, #15]
							fm25v02_write(2*HOUR_LIGHTING_ON_REG+1, temp);
 8020f9a:	7bfb      	ldrb	r3, [r7, #15]
 8020f9c:	4619      	mov	r1, r3
 8020f9e:	f242 0073 	movw	r0, #8307	; 0x2073
 8020fa2:	f009 fd73 	bl	802aa8c <fm25v02_write>
							fm25v02_write(2*MINUTE_LIGHTING_ON_REG, 0x00);
 8020fa6:	2100      	movs	r1, #0
 8020fa8:	f242 0074 	movw	r0, #8308	; 0x2074
 8020fac:	f009 fd6e 	bl	802aa8c <fm25v02_write>
							temp = current_time.Minutes;
 8020fb0:	4b18      	ldr	r3, [pc, #96]	; (8021014 <ThreadMainTask+0xa1c>)
 8020fb2:	785b      	ldrb	r3, [r3, #1]
 8020fb4:	73fb      	strb	r3, [r7, #15]
							fm25v02_write(2*MINUTE_LIGHTING_ON_REG+1, temp);
 8020fb6:	7bfb      	ldrb	r3, [r7, #15]
 8020fb8:	4619      	mov	r1, r3
 8020fba:	f242 0075 	movw	r0, #8309	; 0x2075
 8020fbe:	f009 fd65 	bl	802aa8c <fm25v02_write>

							osMutexRelease(Fm25v02MutexHandle);
 8020fc2:	4b12      	ldr	r3, [pc, #72]	; (802100c <ThreadMainTask+0xa14>)
 8020fc4:	681b      	ldr	r3, [r3, #0]
 8020fc6:	4618      	mov	r0, r3
 8020fc8:	f7f8 f9bc 	bl	8019344 <osMutexRelease>

							//LED8_TOGGLE();
						}

						if( (temp_time_on_2_hour==current_time.Hours)&&(temp_time_on_2_minute==current_time.Minutes)&&((temp_time_on_2_hour!=temp_time_off_2_hour)||(temp_time_on_2_minute!=temp_time_off_2_minute)) )
 8020fcc:	4b11      	ldr	r3, [pc, #68]	; (8021014 <ThreadMainTask+0xa1c>)
 8020fce:	781a      	ldrb	r2, [r3, #0]
 8020fd0:	4b13      	ldr	r3, [pc, #76]	; (8021020 <ThreadMainTask+0xa28>)
 8020fd2:	781b      	ldrb	r3, [r3, #0]
 8020fd4:	429a      	cmp	r2, r3
 8020fd6:	f040 8094 	bne.w	8021102 <ThreadMainTask+0xb0a>
 8020fda:	4b0e      	ldr	r3, [pc, #56]	; (8021014 <ThreadMainTask+0xa1c>)
 8020fdc:	785a      	ldrb	r2, [r3, #1]
 8020fde:	e021      	b.n	8021024 <ThreadMainTask+0xa2c>
 8020fe0:	2000a060 	.word	0x2000a060
 8020fe4:	2000a020 	.word	0x2000a020
 8020fe8:	2000a047 	.word	0x2000a047
 8020fec:	2000a065 	.word	0x2000a065
 8020ff0:	2000a048 	.word	0x2000a048
 8020ff4:	2000a061 	.word	0x2000a061
 8020ff8:	2000a044 	.word	0x2000a044
 8020ffc:	2000a046 	.word	0x2000a046
 8021000:	2000a068 	.word	0x2000a068
 8021004:	2000a01e 	.word	0x2000a01e
 8021008:	2000a062 	.word	0x2000a062
 802100c:	20009bb8 	.word	0x20009bb8
 8021010:	2000b000 	.word	0x2000b000
 8021014:	2000a028 	.word	0x2000a028
 8021018:	2000a069 	.word	0x2000a069
 802101c:	2000a03c 	.word	0x2000a03c
 8021020:	2000a024 	.word	0x2000a024
 8021024:	4bb0      	ldr	r3, [pc, #704]	; (80212e8 <ThreadMainTask+0xcf0>)
 8021026:	781b      	ldrb	r3, [r3, #0]
 8021028:	429a      	cmp	r2, r3
 802102a:	d16a      	bne.n	8021102 <ThreadMainTask+0xb0a>
 802102c:	4baf      	ldr	r3, [pc, #700]	; (80212ec <ThreadMainTask+0xcf4>)
 802102e:	781a      	ldrb	r2, [r3, #0]
 8021030:	4baf      	ldr	r3, [pc, #700]	; (80212f0 <ThreadMainTask+0xcf8>)
 8021032:	781b      	ldrb	r3, [r3, #0]
 8021034:	429a      	cmp	r2, r3
 8021036:	d105      	bne.n	8021044 <ThreadMainTask+0xa4c>
 8021038:	4bab      	ldr	r3, [pc, #684]	; (80212e8 <ThreadMainTask+0xcf0>)
 802103a:	781a      	ldrb	r2, [r3, #0]
 802103c:	4bad      	ldr	r3, [pc, #692]	; (80212f4 <ThreadMainTask+0xcfc>)
 802103e:	781b      	ldrb	r3, [r3, #0]
 8021040:	429a      	cmp	r2, r3
 8021042:	d05e      	beq.n	8021102 <ThreadMainTask+0xb0a>
						{
							osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8021044:	4bac      	ldr	r3, [pc, #688]	; (80212f8 <ThreadMainTask+0xd00>)
 8021046:	681b      	ldr	r3, [r3, #0]
 8021048:	f04f 31ff 	mov.w	r1, #4294967295
 802104c:	4618      	mov	r0, r3
 802104e:	f7f8 f92b 	bl	80192a8 <osMutexWait>
							fm25v02_read(2*LIGHT_CONTROL_REG+1, &temp);
 8021052:	f107 030f 	add.w	r3, r7, #15
 8021056:	4619      	mov	r1, r3
 8021058:	f242 1083 	movw	r0, #8579	; 0x2183
 802105c:	f009 fcdc 	bl	802aa18 <fm25v02_read>
							temp = temp|0x07;
 8021060:	7bfb      	ldrb	r3, [r7, #15]
 8021062:	f043 0307 	orr.w	r3, r3, #7
 8021066:	b2db      	uxtb	r3, r3
 8021068:	73fb      	strb	r3, [r7, #15]
							fm25v02_write(2*LIGHT_CONTROL_REG+1, temp);
 802106a:	7bfb      	ldrb	r3, [r7, #15]
 802106c:	4619      	mov	r1, r3
 802106e:	f242 1083 	movw	r0, #8579	; 0x2183
 8021072:	f009 fd0b 	bl	802aa8c <fm25v02_write>
							control_registers.light_control_reg = control_registers.light_control_reg|0x0007;
 8021076:	4ba1      	ldr	r3, [pc, #644]	; (80212fc <ThreadMainTask+0xd04>)
 8021078:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 802107c:	f043 0307 	orr.w	r3, r3, #7
 8021080:	b29a      	uxth	r2, r3
 8021082:	4b9e      	ldr	r3, [pc, #632]	; (80212fc <ThreadMainTask+0xd04>)
 8021084:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

							fm25v02_write(2*MONTH_LIGHTING_ON_REG, 0x00);
 8021088:	2100      	movs	r1, #0
 802108a:	f242 006e 	movw	r0, #8302	; 0x206e
 802108e:	f009 fcfd 	bl	802aa8c <fm25v02_write>
							temp = current_date.Month;
 8021092:	4b9b      	ldr	r3, [pc, #620]	; (8021300 <ThreadMainTask+0xd08>)
 8021094:	785b      	ldrb	r3, [r3, #1]
 8021096:	73fb      	strb	r3, [r7, #15]
							fm25v02_write(2*MONTH_LIGHTING_ON_REG+1, temp);
 8021098:	7bfb      	ldrb	r3, [r7, #15]
 802109a:	4619      	mov	r1, r3
 802109c:	f242 006f 	movw	r0, #8303	; 0x206f
 80210a0:	f009 fcf4 	bl	802aa8c <fm25v02_write>
							fm25v02_write(2*DAY_LIGHTING_ON_REG, 0x00);
 80210a4:	2100      	movs	r1, #0
 80210a6:	f242 0070 	movw	r0, #8304	; 0x2070
 80210aa:	f009 fcef 	bl	802aa8c <fm25v02_write>
							temp = current_date.Date;
 80210ae:	4b94      	ldr	r3, [pc, #592]	; (8021300 <ThreadMainTask+0xd08>)
 80210b0:	789b      	ldrb	r3, [r3, #2]
 80210b2:	73fb      	strb	r3, [r7, #15]
							fm25v02_write(2*DAY_LIGHTING_ON_REG+1, temp);
 80210b4:	7bfb      	ldrb	r3, [r7, #15]
 80210b6:	4619      	mov	r1, r3
 80210b8:	f242 0071 	movw	r0, #8305	; 0x2071
 80210bc:	f009 fce6 	bl	802aa8c <fm25v02_write>
							fm25v02_write(2*HOUR_LIGHTING_ON_REG+1, 0x00);
 80210c0:	2100      	movs	r1, #0
 80210c2:	f242 0073 	movw	r0, #8307	; 0x2073
 80210c6:	f009 fce1 	bl	802aa8c <fm25v02_write>
							temp = current_time.Hours;
 80210ca:	4b8e      	ldr	r3, [pc, #568]	; (8021304 <ThreadMainTask+0xd0c>)
 80210cc:	781b      	ldrb	r3, [r3, #0]
 80210ce:	73fb      	strb	r3, [r7, #15]
							fm25v02_write(2*HOUR_LIGHTING_ON_REG+1, temp);
 80210d0:	7bfb      	ldrb	r3, [r7, #15]
 80210d2:	4619      	mov	r1, r3
 80210d4:	f242 0073 	movw	r0, #8307	; 0x2073
 80210d8:	f009 fcd8 	bl	802aa8c <fm25v02_write>
							fm25v02_write(2*MINUTE_LIGHTING_ON_REG, 0x00);
 80210dc:	2100      	movs	r1, #0
 80210de:	f242 0074 	movw	r0, #8308	; 0x2074
 80210e2:	f009 fcd3 	bl	802aa8c <fm25v02_write>
							temp = current_time.Minutes;
 80210e6:	4b87      	ldr	r3, [pc, #540]	; (8021304 <ThreadMainTask+0xd0c>)
 80210e8:	785b      	ldrb	r3, [r3, #1]
 80210ea:	73fb      	strb	r3, [r7, #15]
							fm25v02_write(2*MINUTE_LIGHTING_ON_REG+1, temp);
 80210ec:	7bfb      	ldrb	r3, [r7, #15]
 80210ee:	4619      	mov	r1, r3
 80210f0:	f242 0075 	movw	r0, #8309	; 0x2075
 80210f4:	f009 fcca 	bl	802aa8c <fm25v02_write>

							osMutexRelease(Fm25v02MutexHandle);
 80210f8:	4b7f      	ldr	r3, [pc, #508]	; (80212f8 <ThreadMainTask+0xd00>)
 80210fa:	681b      	ldr	r3, [r3, #0]
 80210fc:	4618      	mov	r0, r3
 80210fe:	f7f8 f921 	bl	8019344 <osMutexRelease>

							//LED7_TOGGLE();
						}

						if( (temp_time_on_3_hour==current_time.Hours)&&(temp_time_on_3_minute==current_time.Minutes)&&((temp_time_on_3_hour!=temp_time_off_3_hour)||(temp_time_on_3_minute!=temp_time_off_3_minute)) )
 8021102:	4b80      	ldr	r3, [pc, #512]	; (8021304 <ThreadMainTask+0xd0c>)
 8021104:	781a      	ldrb	r2, [r3, #0]
 8021106:	4b80      	ldr	r3, [pc, #512]	; (8021308 <ThreadMainTask+0xd10>)
 8021108:	781b      	ldrb	r3, [r3, #0]
 802110a:	429a      	cmp	r2, r3
 802110c:	d170      	bne.n	80211f0 <ThreadMainTask+0xbf8>
 802110e:	4b7d      	ldr	r3, [pc, #500]	; (8021304 <ThreadMainTask+0xd0c>)
 8021110:	785a      	ldrb	r2, [r3, #1]
 8021112:	4b7e      	ldr	r3, [pc, #504]	; (802130c <ThreadMainTask+0xd14>)
 8021114:	781b      	ldrb	r3, [r3, #0]
 8021116:	429a      	cmp	r2, r3
 8021118:	d16a      	bne.n	80211f0 <ThreadMainTask+0xbf8>
 802111a:	4b7b      	ldr	r3, [pc, #492]	; (8021308 <ThreadMainTask+0xd10>)
 802111c:	781a      	ldrb	r2, [r3, #0]
 802111e:	4b7c      	ldr	r3, [pc, #496]	; (8021310 <ThreadMainTask+0xd18>)
 8021120:	781b      	ldrb	r3, [r3, #0]
 8021122:	429a      	cmp	r2, r3
 8021124:	d105      	bne.n	8021132 <ThreadMainTask+0xb3a>
 8021126:	4b79      	ldr	r3, [pc, #484]	; (802130c <ThreadMainTask+0xd14>)
 8021128:	781a      	ldrb	r2, [r3, #0]
 802112a:	4b7a      	ldr	r3, [pc, #488]	; (8021314 <ThreadMainTask+0xd1c>)
 802112c:	781b      	ldrb	r3, [r3, #0]
 802112e:	429a      	cmp	r2, r3
 8021130:	d05e      	beq.n	80211f0 <ThreadMainTask+0xbf8>
						{
							osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8021132:	4b71      	ldr	r3, [pc, #452]	; (80212f8 <ThreadMainTask+0xd00>)
 8021134:	681b      	ldr	r3, [r3, #0]
 8021136:	f04f 31ff 	mov.w	r1, #4294967295
 802113a:	4618      	mov	r0, r3
 802113c:	f7f8 f8b4 	bl	80192a8 <osMutexWait>
							fm25v02_read(2*LIGHT_CONTROL_REG+1, &temp);
 8021140:	f107 030f 	add.w	r3, r7, #15
 8021144:	4619      	mov	r1, r3
 8021146:	f242 1083 	movw	r0, #8579	; 0x2183
 802114a:	f009 fc65 	bl	802aa18 <fm25v02_read>
							temp = temp|0x07;
 802114e:	7bfb      	ldrb	r3, [r7, #15]
 8021150:	f043 0307 	orr.w	r3, r3, #7
 8021154:	b2db      	uxtb	r3, r3
 8021156:	73fb      	strb	r3, [r7, #15]
							fm25v02_write(2*LIGHT_CONTROL_REG+1, temp);
 8021158:	7bfb      	ldrb	r3, [r7, #15]
 802115a:	4619      	mov	r1, r3
 802115c:	f242 1083 	movw	r0, #8579	; 0x2183
 8021160:	f009 fc94 	bl	802aa8c <fm25v02_write>
							control_registers.light_control_reg = control_registers.light_control_reg|0x0007;
 8021164:	4b65      	ldr	r3, [pc, #404]	; (80212fc <ThreadMainTask+0xd04>)
 8021166:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 802116a:	f043 0307 	orr.w	r3, r3, #7
 802116e:	b29a      	uxth	r2, r3
 8021170:	4b62      	ldr	r3, [pc, #392]	; (80212fc <ThreadMainTask+0xd04>)
 8021172:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

							fm25v02_write(2*MONTH_LIGHTING_ON_REG, 0x00);
 8021176:	2100      	movs	r1, #0
 8021178:	f242 006e 	movw	r0, #8302	; 0x206e
 802117c:	f009 fc86 	bl	802aa8c <fm25v02_write>
							temp = current_date.Month;
 8021180:	4b5f      	ldr	r3, [pc, #380]	; (8021300 <ThreadMainTask+0xd08>)
 8021182:	785b      	ldrb	r3, [r3, #1]
 8021184:	73fb      	strb	r3, [r7, #15]
							fm25v02_write(2*MONTH_LIGHTING_ON_REG+1, temp);
 8021186:	7bfb      	ldrb	r3, [r7, #15]
 8021188:	4619      	mov	r1, r3
 802118a:	f242 006f 	movw	r0, #8303	; 0x206f
 802118e:	f009 fc7d 	bl	802aa8c <fm25v02_write>
							fm25v02_write(2*DAY_LIGHTING_ON_REG, 0x00);
 8021192:	2100      	movs	r1, #0
 8021194:	f242 0070 	movw	r0, #8304	; 0x2070
 8021198:	f009 fc78 	bl	802aa8c <fm25v02_write>
							temp = current_date.Date;
 802119c:	4b58      	ldr	r3, [pc, #352]	; (8021300 <ThreadMainTask+0xd08>)
 802119e:	789b      	ldrb	r3, [r3, #2]
 80211a0:	73fb      	strb	r3, [r7, #15]
							fm25v02_write(2*DAY_LIGHTING_ON_REG+1, temp);
 80211a2:	7bfb      	ldrb	r3, [r7, #15]
 80211a4:	4619      	mov	r1, r3
 80211a6:	f242 0071 	movw	r0, #8305	; 0x2071
 80211aa:	f009 fc6f 	bl	802aa8c <fm25v02_write>
							fm25v02_write(2*HOUR_LIGHTING_ON_REG+1, 0x00);
 80211ae:	2100      	movs	r1, #0
 80211b0:	f242 0073 	movw	r0, #8307	; 0x2073
 80211b4:	f009 fc6a 	bl	802aa8c <fm25v02_write>
							temp = current_time.Hours;
 80211b8:	4b52      	ldr	r3, [pc, #328]	; (8021304 <ThreadMainTask+0xd0c>)
 80211ba:	781b      	ldrb	r3, [r3, #0]
 80211bc:	73fb      	strb	r3, [r7, #15]
							fm25v02_write(2*HOUR_LIGHTING_ON_REG+1, temp);
 80211be:	7bfb      	ldrb	r3, [r7, #15]
 80211c0:	4619      	mov	r1, r3
 80211c2:	f242 0073 	movw	r0, #8307	; 0x2073
 80211c6:	f009 fc61 	bl	802aa8c <fm25v02_write>
							fm25v02_write(2*MINUTE_LIGHTING_ON_REG, 0x00);
 80211ca:	2100      	movs	r1, #0
 80211cc:	f242 0074 	movw	r0, #8308	; 0x2074
 80211d0:	f009 fc5c 	bl	802aa8c <fm25v02_write>
							temp = current_time.Minutes;
 80211d4:	4b4b      	ldr	r3, [pc, #300]	; (8021304 <ThreadMainTask+0xd0c>)
 80211d6:	785b      	ldrb	r3, [r3, #1]
 80211d8:	73fb      	strb	r3, [r7, #15]
							fm25v02_write(2*MINUTE_LIGHTING_ON_REG+1, temp);
 80211da:	7bfb      	ldrb	r3, [r7, #15]
 80211dc:	4619      	mov	r1, r3
 80211de:	f242 0075 	movw	r0, #8309	; 0x2075
 80211e2:	f009 fc53 	bl	802aa8c <fm25v02_write>

							osMutexRelease(Fm25v02MutexHandle);
 80211e6:	4b44      	ldr	r3, [pc, #272]	; (80212f8 <ThreadMainTask+0xd00>)
 80211e8:	681b      	ldr	r3, [r3, #0]
 80211ea:	4618      	mov	r0, r3
 80211ec:	f7f8 f8aa 	bl	8019344 <osMutexRelease>

							//LED6_TOGGLE();
						}

						if( (temp_time_on_4_hour==current_time.Hours)&&(temp_time_on_4_minute==current_time.Minutes)&&((temp_time_on_4_hour!=temp_time_off_4_hour)||(temp_time_on_4_minute!=temp_time_off_4_minute)) )
 80211f0:	4b44      	ldr	r3, [pc, #272]	; (8021304 <ThreadMainTask+0xd0c>)
 80211f2:	781a      	ldrb	r2, [r3, #0]
 80211f4:	4b48      	ldr	r3, [pc, #288]	; (8021318 <ThreadMainTask+0xd20>)
 80211f6:	781b      	ldrb	r3, [r3, #0]
 80211f8:	429a      	cmp	r2, r3
 80211fa:	f040 82ac 	bne.w	8021756 <ThreadMainTask+0x115e>
 80211fe:	4b41      	ldr	r3, [pc, #260]	; (8021304 <ThreadMainTask+0xd0c>)
 8021200:	785a      	ldrb	r2, [r3, #1]
 8021202:	4b46      	ldr	r3, [pc, #280]	; (802131c <ThreadMainTask+0xd24>)
 8021204:	781b      	ldrb	r3, [r3, #0]
 8021206:	429a      	cmp	r2, r3
 8021208:	f040 82a5 	bne.w	8021756 <ThreadMainTask+0x115e>
 802120c:	4b42      	ldr	r3, [pc, #264]	; (8021318 <ThreadMainTask+0xd20>)
 802120e:	781a      	ldrb	r2, [r3, #0]
 8021210:	4b43      	ldr	r3, [pc, #268]	; (8021320 <ThreadMainTask+0xd28>)
 8021212:	781b      	ldrb	r3, [r3, #0]
 8021214:	429a      	cmp	r2, r3
 8021216:	d106      	bne.n	8021226 <ThreadMainTask+0xc2e>
 8021218:	4b40      	ldr	r3, [pc, #256]	; (802131c <ThreadMainTask+0xd24>)
 802121a:	781a      	ldrb	r2, [r3, #0]
 802121c:	4b41      	ldr	r3, [pc, #260]	; (8021324 <ThreadMainTask+0xd2c>)
 802121e:	781b      	ldrb	r3, [r3, #0]
 8021220:	429a      	cmp	r2, r3
 8021222:	f000 8298 	beq.w	8021756 <ThreadMainTask+0x115e>
						{
							osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8021226:	4b34      	ldr	r3, [pc, #208]	; (80212f8 <ThreadMainTask+0xd00>)
 8021228:	681b      	ldr	r3, [r3, #0]
 802122a:	f04f 31ff 	mov.w	r1, #4294967295
 802122e:	4618      	mov	r0, r3
 8021230:	f7f8 f83a 	bl	80192a8 <osMutexWait>
							fm25v02_read(2*LIGHT_CONTROL_REG+1, &temp);
 8021234:	f107 030f 	add.w	r3, r7, #15
 8021238:	4619      	mov	r1, r3
 802123a:	f242 1083 	movw	r0, #8579	; 0x2183
 802123e:	f009 fbeb 	bl	802aa18 <fm25v02_read>
							temp = temp|0x07;
 8021242:	7bfb      	ldrb	r3, [r7, #15]
 8021244:	f043 0307 	orr.w	r3, r3, #7
 8021248:	b2db      	uxtb	r3, r3
 802124a:	73fb      	strb	r3, [r7, #15]
							fm25v02_write(2*LIGHT_CONTROL_REG+1, temp);
 802124c:	7bfb      	ldrb	r3, [r7, #15]
 802124e:	4619      	mov	r1, r3
 8021250:	f242 1083 	movw	r0, #8579	; 0x2183
 8021254:	f009 fc1a 	bl	802aa8c <fm25v02_write>
							control_registers.light_control_reg = control_registers.light_control_reg|0x0007;
 8021258:	4b28      	ldr	r3, [pc, #160]	; (80212fc <ThreadMainTask+0xd04>)
 802125a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 802125e:	f043 0307 	orr.w	r3, r3, #7
 8021262:	b29a      	uxth	r2, r3
 8021264:	4b25      	ldr	r3, [pc, #148]	; (80212fc <ThreadMainTask+0xd04>)
 8021266:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

							fm25v02_write(2*MONTH_LIGHTING_ON_REG, 0x00);
 802126a:	2100      	movs	r1, #0
 802126c:	f242 006e 	movw	r0, #8302	; 0x206e
 8021270:	f009 fc0c 	bl	802aa8c <fm25v02_write>
							temp = current_date.Month;
 8021274:	4b22      	ldr	r3, [pc, #136]	; (8021300 <ThreadMainTask+0xd08>)
 8021276:	785b      	ldrb	r3, [r3, #1]
 8021278:	73fb      	strb	r3, [r7, #15]
							fm25v02_write(2*MONTH_LIGHTING_ON_REG+1, temp);
 802127a:	7bfb      	ldrb	r3, [r7, #15]
 802127c:	4619      	mov	r1, r3
 802127e:	f242 006f 	movw	r0, #8303	; 0x206f
 8021282:	f009 fc03 	bl	802aa8c <fm25v02_write>
							fm25v02_write(2*DAY_LIGHTING_ON_REG, 0x00);
 8021286:	2100      	movs	r1, #0
 8021288:	f242 0070 	movw	r0, #8304	; 0x2070
 802128c:	f009 fbfe 	bl	802aa8c <fm25v02_write>
							temp = current_date.Date;
 8021290:	4b1b      	ldr	r3, [pc, #108]	; (8021300 <ThreadMainTask+0xd08>)
 8021292:	789b      	ldrb	r3, [r3, #2]
 8021294:	73fb      	strb	r3, [r7, #15]
							fm25v02_write(2*DAY_LIGHTING_ON_REG+1, temp);
 8021296:	7bfb      	ldrb	r3, [r7, #15]
 8021298:	4619      	mov	r1, r3
 802129a:	f242 0071 	movw	r0, #8305	; 0x2071
 802129e:	f009 fbf5 	bl	802aa8c <fm25v02_write>
							fm25v02_write(2*HOUR_LIGHTING_ON_REG+1, 0x00);
 80212a2:	2100      	movs	r1, #0
 80212a4:	f242 0073 	movw	r0, #8307	; 0x2073
 80212a8:	f009 fbf0 	bl	802aa8c <fm25v02_write>
							temp = current_time.Hours;
 80212ac:	4b15      	ldr	r3, [pc, #84]	; (8021304 <ThreadMainTask+0xd0c>)
 80212ae:	781b      	ldrb	r3, [r3, #0]
 80212b0:	73fb      	strb	r3, [r7, #15]
							fm25v02_write(2*HOUR_LIGHTING_ON_REG+1, temp);
 80212b2:	7bfb      	ldrb	r3, [r7, #15]
 80212b4:	4619      	mov	r1, r3
 80212b6:	f242 0073 	movw	r0, #8307	; 0x2073
 80212ba:	f009 fbe7 	bl	802aa8c <fm25v02_write>
							fm25v02_write(2*MINUTE_LIGHTING_ON_REG, 0x00);
 80212be:	2100      	movs	r1, #0
 80212c0:	f242 0074 	movw	r0, #8308	; 0x2074
 80212c4:	f009 fbe2 	bl	802aa8c <fm25v02_write>
							temp = current_time.Minutes;
 80212c8:	4b0e      	ldr	r3, [pc, #56]	; (8021304 <ThreadMainTask+0xd0c>)
 80212ca:	785b      	ldrb	r3, [r3, #1]
 80212cc:	73fb      	strb	r3, [r7, #15]
							fm25v02_write(2*MINUTE_LIGHTING_ON_REG+1, temp);
 80212ce:	7bfb      	ldrb	r3, [r7, #15]
 80212d0:	4619      	mov	r1, r3
 80212d2:	f242 0075 	movw	r0, #8309	; 0x2075
 80212d6:	f009 fbd9 	bl	802aa8c <fm25v02_write>

							osMutexRelease(Fm25v02MutexHandle);
 80212da:	4b07      	ldr	r3, [pc, #28]	; (80212f8 <ThreadMainTask+0xd00>)
 80212dc:	681b      	ldr	r3, [r3, #0]
 80212de:	4618      	mov	r0, r3
 80212e0:	f7f8 f830 	bl	8019344 <osMutexRelease>
						if( (temp_time_on_4_hour==current_time.Hours)&&(temp_time_on_4_minute==current_time.Minutes)&&((temp_time_on_4_hour!=temp_time_off_4_hour)||(temp_time_on_4_minute!=temp_time_off_4_minute)) )
 80212e4:	e237      	b.n	8021756 <ThreadMainTask+0x115e>
 80212e6:	bf00      	nop
 80212e8:	2000a01c 	.word	0x2000a01c
 80212ec:	2000a024 	.word	0x2000a024
 80212f0:	2000a061 	.word	0x2000a061
 80212f4:	2000a044 	.word	0x2000a044
 80212f8:	20009bb8 	.word	0x20009bb8
 80212fc:	2000b000 	.word	0x2000b000
 8021300:	2000a020 	.word	0x2000a020
 8021304:	2000a028 	.word	0x2000a028
 8021308:	2000a067 	.word	0x2000a067
 802130c:	2000a063 	.word	0x2000a063
 8021310:	2000a046 	.word	0x2000a046
 8021314:	2000a068 	.word	0x2000a068
 8021318:	2000a060 	.word	0x2000a060
 802131c:	2000a047 	.word	0x2000a047
 8021320:	2000a01e 	.word	0x2000a01e
 8021324:	2000a062 	.word	0x2000a062
						}


					}

					else if( (((control_registers.light_control_reg)&0x0001)==0x0001) || (((control_registers.light_control_reg)&0x0002)==0x0002) || (((control_registers.light_control_reg)&0x0004)==0x0004) )
 8021328:	4bbc      	ldr	r3, [pc, #752]	; (802161c <ThreadMainTask+0x1024>)
 802132a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 802132e:	f003 0301 	and.w	r3, r3, #1
 8021332:	2b00      	cmp	r3, #0
 8021334:	d10e      	bne.n	8021354 <ThreadMainTask+0xd5c>
 8021336:	4bb9      	ldr	r3, [pc, #740]	; (802161c <ThreadMainTask+0x1024>)
 8021338:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 802133c:	f003 0302 	and.w	r3, r3, #2
 8021340:	2b00      	cmp	r3, #0
 8021342:	d107      	bne.n	8021354 <ThreadMainTask+0xd5c>
 8021344:	4bb5      	ldr	r3, [pc, #724]	; (802161c <ThreadMainTask+0x1024>)
 8021346:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 802134a:	f003 0304 	and.w	r3, r3, #4
 802134e:	2b00      	cmp	r3, #0
 8021350:	f000 8202 	beq.w	8021758 <ThreadMainTask+0x1160>
					{

						if( (temp_time_off_1_hour==current_time.Hours)&&(temp_time_off_1_minute==current_time.Minutes)&&((temp_time_on_1_hour!=temp_time_off_1_hour)||(temp_time_on_1_minute!=temp_time_off_1_minute)) )
 8021354:	4bb2      	ldr	r3, [pc, #712]	; (8021620 <ThreadMainTask+0x1028>)
 8021356:	781a      	ldrb	r2, [r3, #0]
 8021358:	4bb2      	ldr	r3, [pc, #712]	; (8021624 <ThreadMainTask+0x102c>)
 802135a:	781b      	ldrb	r3, [r3, #0]
 802135c:	429a      	cmp	r2, r3
 802135e:	d170      	bne.n	8021442 <ThreadMainTask+0xe4a>
 8021360:	4baf      	ldr	r3, [pc, #700]	; (8021620 <ThreadMainTask+0x1028>)
 8021362:	785a      	ldrb	r2, [r3, #1]
 8021364:	4bb0      	ldr	r3, [pc, #704]	; (8021628 <ThreadMainTask+0x1030>)
 8021366:	781b      	ldrb	r3, [r3, #0]
 8021368:	429a      	cmp	r2, r3
 802136a:	d16a      	bne.n	8021442 <ThreadMainTask+0xe4a>
 802136c:	4baf      	ldr	r3, [pc, #700]	; (802162c <ThreadMainTask+0x1034>)
 802136e:	781a      	ldrb	r2, [r3, #0]
 8021370:	4bac      	ldr	r3, [pc, #688]	; (8021624 <ThreadMainTask+0x102c>)
 8021372:	781b      	ldrb	r3, [r3, #0]
 8021374:	429a      	cmp	r2, r3
 8021376:	d105      	bne.n	8021384 <ThreadMainTask+0xd8c>
 8021378:	4bad      	ldr	r3, [pc, #692]	; (8021630 <ThreadMainTask+0x1038>)
 802137a:	781a      	ldrb	r2, [r3, #0]
 802137c:	4baa      	ldr	r3, [pc, #680]	; (8021628 <ThreadMainTask+0x1030>)
 802137e:	781b      	ldrb	r3, [r3, #0]
 8021380:	429a      	cmp	r2, r3
 8021382:	d05e      	beq.n	8021442 <ThreadMainTask+0xe4a>
						{
							osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8021384:	4bab      	ldr	r3, [pc, #684]	; (8021634 <ThreadMainTask+0x103c>)
 8021386:	681b      	ldr	r3, [r3, #0]
 8021388:	f04f 31ff 	mov.w	r1, #4294967295
 802138c:	4618      	mov	r0, r3
 802138e:	f7f7 ff8b 	bl	80192a8 <osMutexWait>
							fm25v02_read(2*LIGHT_CONTROL_REG+1, &temp);
 8021392:	f107 030f 	add.w	r3, r7, #15
 8021396:	4619      	mov	r1, r3
 8021398:	f242 1083 	movw	r0, #8579	; 0x2183
 802139c:	f009 fb3c 	bl	802aa18 <fm25v02_read>
							temp = temp&0xF8;
 80213a0:	7bfb      	ldrb	r3, [r7, #15]
 80213a2:	f023 0307 	bic.w	r3, r3, #7
 80213a6:	b2db      	uxtb	r3, r3
 80213a8:	73fb      	strb	r3, [r7, #15]
							fm25v02_write(2*LIGHT_CONTROL_REG+1, temp);
 80213aa:	7bfb      	ldrb	r3, [r7, #15]
 80213ac:	4619      	mov	r1, r3
 80213ae:	f242 1083 	movw	r0, #8579	; 0x2183
 80213b2:	f009 fb6b 	bl	802aa8c <fm25v02_write>
							control_registers.light_control_reg = control_registers.light_control_reg&0xFFF8;
 80213b6:	4b99      	ldr	r3, [pc, #612]	; (802161c <ThreadMainTask+0x1024>)
 80213b8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80213bc:	f023 0307 	bic.w	r3, r3, #7
 80213c0:	b29a      	uxth	r2, r3
 80213c2:	4b96      	ldr	r3, [pc, #600]	; (802161c <ThreadMainTask+0x1024>)
 80213c4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

							fm25v02_write(2*MONTH_LIGHTING_OFF_REG, 0x00);
 80213c8:	2100      	movs	r1, #0
 80213ca:	f242 0066 	movw	r0, #8294	; 0x2066
 80213ce:	f009 fb5d 	bl	802aa8c <fm25v02_write>
							temp = current_date.Month;
 80213d2:	4b99      	ldr	r3, [pc, #612]	; (8021638 <ThreadMainTask+0x1040>)
 80213d4:	785b      	ldrb	r3, [r3, #1]
 80213d6:	73fb      	strb	r3, [r7, #15]
							fm25v02_write(2*MONTH_LIGHTING_OFF_REG+1, temp);
 80213d8:	7bfb      	ldrb	r3, [r7, #15]
 80213da:	4619      	mov	r1, r3
 80213dc:	f242 0067 	movw	r0, #8295	; 0x2067
 80213e0:	f009 fb54 	bl	802aa8c <fm25v02_write>
							fm25v02_write(2*DAY_LIGHTING_OFF_REG+1, 0x00);
 80213e4:	2100      	movs	r1, #0
 80213e6:	f242 0069 	movw	r0, #8297	; 0x2069
 80213ea:	f009 fb4f 	bl	802aa8c <fm25v02_write>
							temp = current_date.Date;
 80213ee:	4b92      	ldr	r3, [pc, #584]	; (8021638 <ThreadMainTask+0x1040>)
 80213f0:	789b      	ldrb	r3, [r3, #2]
 80213f2:	73fb      	strb	r3, [r7, #15]
							fm25v02_write(2*DAY_LIGHTING_OFF_REG+1, temp);
 80213f4:	7bfb      	ldrb	r3, [r7, #15]
 80213f6:	4619      	mov	r1, r3
 80213f8:	f242 0069 	movw	r0, #8297	; 0x2069
 80213fc:	f009 fb46 	bl	802aa8c <fm25v02_write>
							fm25v02_write(2*HOUR_LIGHTING_OFF_REG+1, 0x00);
 8021400:	2100      	movs	r1, #0
 8021402:	f242 006b 	movw	r0, #8299	; 0x206b
 8021406:	f009 fb41 	bl	802aa8c <fm25v02_write>
							temp = current_time.Hours;
 802140a:	4b85      	ldr	r3, [pc, #532]	; (8021620 <ThreadMainTask+0x1028>)
 802140c:	781b      	ldrb	r3, [r3, #0]
 802140e:	73fb      	strb	r3, [r7, #15]
							fm25v02_write(2*HOUR_LIGHTING_OFF_REG+1, temp);
 8021410:	7bfb      	ldrb	r3, [r7, #15]
 8021412:	4619      	mov	r1, r3
 8021414:	f242 006b 	movw	r0, #8299	; 0x206b
 8021418:	f009 fb38 	bl	802aa8c <fm25v02_write>
							fm25v02_write(2*MINUTE_LIGHTING_OFF_REG+1, 0x00);
 802141c:	2100      	movs	r1, #0
 802141e:	f242 006d 	movw	r0, #8301	; 0x206d
 8021422:	f009 fb33 	bl	802aa8c <fm25v02_write>
							temp = current_time.Minutes;
 8021426:	4b7e      	ldr	r3, [pc, #504]	; (8021620 <ThreadMainTask+0x1028>)
 8021428:	785b      	ldrb	r3, [r3, #1]
 802142a:	73fb      	strb	r3, [r7, #15]
							fm25v02_write(2*MINUTE_LIGHTING_OFF_REG+1, temp);
 802142c:	7bfb      	ldrb	r3, [r7, #15]
 802142e:	4619      	mov	r1, r3
 8021430:	f242 006d 	movw	r0, #8301	; 0x206d
 8021434:	f009 fb2a 	bl	802aa8c <fm25v02_write>

							osMutexRelease(Fm25v02MutexHandle);
 8021438:	4b7e      	ldr	r3, [pc, #504]	; (8021634 <ThreadMainTask+0x103c>)
 802143a:	681b      	ldr	r3, [r3, #0]
 802143c:	4618      	mov	r0, r3
 802143e:	f7f7 ff81 	bl	8019344 <osMutexRelease>
						}

						if( (temp_time_off_2_hour==current_time.Hours)&&(temp_time_off_2_minute==current_time.Minutes)&&((temp_time_on_2_hour!=temp_time_off_2_hour)||(temp_time_on_2_minute!=temp_time_off_2_minute)) )
 8021442:	4b77      	ldr	r3, [pc, #476]	; (8021620 <ThreadMainTask+0x1028>)
 8021444:	781a      	ldrb	r2, [r3, #0]
 8021446:	4b7d      	ldr	r3, [pc, #500]	; (802163c <ThreadMainTask+0x1044>)
 8021448:	781b      	ldrb	r3, [r3, #0]
 802144a:	429a      	cmp	r2, r3
 802144c:	d170      	bne.n	8021530 <ThreadMainTask+0xf38>
 802144e:	4b74      	ldr	r3, [pc, #464]	; (8021620 <ThreadMainTask+0x1028>)
 8021450:	785a      	ldrb	r2, [r3, #1]
 8021452:	4b7b      	ldr	r3, [pc, #492]	; (8021640 <ThreadMainTask+0x1048>)
 8021454:	781b      	ldrb	r3, [r3, #0]
 8021456:	429a      	cmp	r2, r3
 8021458:	d16a      	bne.n	8021530 <ThreadMainTask+0xf38>
 802145a:	4b7a      	ldr	r3, [pc, #488]	; (8021644 <ThreadMainTask+0x104c>)
 802145c:	781a      	ldrb	r2, [r3, #0]
 802145e:	4b77      	ldr	r3, [pc, #476]	; (802163c <ThreadMainTask+0x1044>)
 8021460:	781b      	ldrb	r3, [r3, #0]
 8021462:	429a      	cmp	r2, r3
 8021464:	d105      	bne.n	8021472 <ThreadMainTask+0xe7a>
 8021466:	4b78      	ldr	r3, [pc, #480]	; (8021648 <ThreadMainTask+0x1050>)
 8021468:	781a      	ldrb	r2, [r3, #0]
 802146a:	4b75      	ldr	r3, [pc, #468]	; (8021640 <ThreadMainTask+0x1048>)
 802146c:	781b      	ldrb	r3, [r3, #0]
 802146e:	429a      	cmp	r2, r3
 8021470:	d05e      	beq.n	8021530 <ThreadMainTask+0xf38>
						{
							osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8021472:	4b70      	ldr	r3, [pc, #448]	; (8021634 <ThreadMainTask+0x103c>)
 8021474:	681b      	ldr	r3, [r3, #0]
 8021476:	f04f 31ff 	mov.w	r1, #4294967295
 802147a:	4618      	mov	r0, r3
 802147c:	f7f7 ff14 	bl	80192a8 <osMutexWait>
							fm25v02_read(2*LIGHT_CONTROL_REG+1, &temp);
 8021480:	f107 030f 	add.w	r3, r7, #15
 8021484:	4619      	mov	r1, r3
 8021486:	f242 1083 	movw	r0, #8579	; 0x2183
 802148a:	f009 fac5 	bl	802aa18 <fm25v02_read>
							temp = temp&0xF8;
 802148e:	7bfb      	ldrb	r3, [r7, #15]
 8021490:	f023 0307 	bic.w	r3, r3, #7
 8021494:	b2db      	uxtb	r3, r3
 8021496:	73fb      	strb	r3, [r7, #15]
							fm25v02_write(2*LIGHT_CONTROL_REG+1, temp);
 8021498:	7bfb      	ldrb	r3, [r7, #15]
 802149a:	4619      	mov	r1, r3
 802149c:	f242 1083 	movw	r0, #8579	; 0x2183
 80214a0:	f009 faf4 	bl	802aa8c <fm25v02_write>
							control_registers.light_control_reg = control_registers.light_control_reg&0xFFF8;
 80214a4:	4b5d      	ldr	r3, [pc, #372]	; (802161c <ThreadMainTask+0x1024>)
 80214a6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80214aa:	f023 0307 	bic.w	r3, r3, #7
 80214ae:	b29a      	uxth	r2, r3
 80214b0:	4b5a      	ldr	r3, [pc, #360]	; (802161c <ThreadMainTask+0x1024>)
 80214b2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

							fm25v02_write(2*MONTH_LIGHTING_OFF_REG, 0x00);
 80214b6:	2100      	movs	r1, #0
 80214b8:	f242 0066 	movw	r0, #8294	; 0x2066
 80214bc:	f009 fae6 	bl	802aa8c <fm25v02_write>
							temp = current_date.Month;
 80214c0:	4b5d      	ldr	r3, [pc, #372]	; (8021638 <ThreadMainTask+0x1040>)
 80214c2:	785b      	ldrb	r3, [r3, #1]
 80214c4:	73fb      	strb	r3, [r7, #15]
							fm25v02_write(2*MONTH_LIGHTING_OFF_REG+1, temp);
 80214c6:	7bfb      	ldrb	r3, [r7, #15]
 80214c8:	4619      	mov	r1, r3
 80214ca:	f242 0067 	movw	r0, #8295	; 0x2067
 80214ce:	f009 fadd 	bl	802aa8c <fm25v02_write>
							fm25v02_write(2*DAY_LIGHTING_OFF_REG+1, 0x00);
 80214d2:	2100      	movs	r1, #0
 80214d4:	f242 0069 	movw	r0, #8297	; 0x2069
 80214d8:	f009 fad8 	bl	802aa8c <fm25v02_write>
							temp = current_date.Date;
 80214dc:	4b56      	ldr	r3, [pc, #344]	; (8021638 <ThreadMainTask+0x1040>)
 80214de:	789b      	ldrb	r3, [r3, #2]
 80214e0:	73fb      	strb	r3, [r7, #15]
							fm25v02_write(2*DAY_LIGHTING_OFF_REG+1, temp);
 80214e2:	7bfb      	ldrb	r3, [r7, #15]
 80214e4:	4619      	mov	r1, r3
 80214e6:	f242 0069 	movw	r0, #8297	; 0x2069
 80214ea:	f009 facf 	bl	802aa8c <fm25v02_write>
							fm25v02_write(2*HOUR_LIGHTING_OFF_REG+1, 0x00);
 80214ee:	2100      	movs	r1, #0
 80214f0:	f242 006b 	movw	r0, #8299	; 0x206b
 80214f4:	f009 faca 	bl	802aa8c <fm25v02_write>
							temp = current_time.Hours;
 80214f8:	4b49      	ldr	r3, [pc, #292]	; (8021620 <ThreadMainTask+0x1028>)
 80214fa:	781b      	ldrb	r3, [r3, #0]
 80214fc:	73fb      	strb	r3, [r7, #15]
							fm25v02_write(2*HOUR_LIGHTING_OFF_REG+1, temp);
 80214fe:	7bfb      	ldrb	r3, [r7, #15]
 8021500:	4619      	mov	r1, r3
 8021502:	f242 006b 	movw	r0, #8299	; 0x206b
 8021506:	f009 fac1 	bl	802aa8c <fm25v02_write>
							fm25v02_write(2*MINUTE_LIGHTING_OFF_REG+1, 0x00);
 802150a:	2100      	movs	r1, #0
 802150c:	f242 006d 	movw	r0, #8301	; 0x206d
 8021510:	f009 fabc 	bl	802aa8c <fm25v02_write>
							temp = current_time.Minutes;
 8021514:	4b42      	ldr	r3, [pc, #264]	; (8021620 <ThreadMainTask+0x1028>)
 8021516:	785b      	ldrb	r3, [r3, #1]
 8021518:	73fb      	strb	r3, [r7, #15]
							fm25v02_write(2*MINUTE_LIGHTING_OFF_REG+1, temp);
 802151a:	7bfb      	ldrb	r3, [r7, #15]
 802151c:	4619      	mov	r1, r3
 802151e:	f242 006d 	movw	r0, #8301	; 0x206d
 8021522:	f009 fab3 	bl	802aa8c <fm25v02_write>

							osMutexRelease(Fm25v02MutexHandle);
 8021526:	4b43      	ldr	r3, [pc, #268]	; (8021634 <ThreadMainTask+0x103c>)
 8021528:	681b      	ldr	r3, [r3, #0]
 802152a:	4618      	mov	r0, r3
 802152c:	f7f7 ff0a 	bl	8019344 <osMutexRelease>
						}

						if( (temp_time_off_3_hour==current_time.Hours)&&(temp_time_off_3_minute==current_time.Minutes)&&((temp_time_on_3_hour!=temp_time_off_3_hour)||(temp_time_on_3_minute!=temp_time_off_3_minute)) )
 8021530:	4b3b      	ldr	r3, [pc, #236]	; (8021620 <ThreadMainTask+0x1028>)
 8021532:	781a      	ldrb	r2, [r3, #0]
 8021534:	4b45      	ldr	r3, [pc, #276]	; (802164c <ThreadMainTask+0x1054>)
 8021536:	781b      	ldrb	r3, [r3, #0]
 8021538:	429a      	cmp	r2, r3
 802153a:	f040 8094 	bne.w	8021666 <ThreadMainTask+0x106e>
 802153e:	4b38      	ldr	r3, [pc, #224]	; (8021620 <ThreadMainTask+0x1028>)
 8021540:	785a      	ldrb	r2, [r3, #1]
 8021542:	4b43      	ldr	r3, [pc, #268]	; (8021650 <ThreadMainTask+0x1058>)
 8021544:	781b      	ldrb	r3, [r3, #0]
 8021546:	429a      	cmp	r2, r3
 8021548:	f040 808d 	bne.w	8021666 <ThreadMainTask+0x106e>
 802154c:	4b41      	ldr	r3, [pc, #260]	; (8021654 <ThreadMainTask+0x105c>)
 802154e:	781a      	ldrb	r2, [r3, #0]
 8021550:	4b3e      	ldr	r3, [pc, #248]	; (802164c <ThreadMainTask+0x1054>)
 8021552:	781b      	ldrb	r3, [r3, #0]
 8021554:	429a      	cmp	r2, r3
 8021556:	d106      	bne.n	8021566 <ThreadMainTask+0xf6e>
 8021558:	4b3f      	ldr	r3, [pc, #252]	; (8021658 <ThreadMainTask+0x1060>)
 802155a:	781a      	ldrb	r2, [r3, #0]
 802155c:	4b3c      	ldr	r3, [pc, #240]	; (8021650 <ThreadMainTask+0x1058>)
 802155e:	781b      	ldrb	r3, [r3, #0]
 8021560:	429a      	cmp	r2, r3
 8021562:	f000 8080 	beq.w	8021666 <ThreadMainTask+0x106e>
						{
							osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8021566:	4b33      	ldr	r3, [pc, #204]	; (8021634 <ThreadMainTask+0x103c>)
 8021568:	681b      	ldr	r3, [r3, #0]
 802156a:	f04f 31ff 	mov.w	r1, #4294967295
 802156e:	4618      	mov	r0, r3
 8021570:	f7f7 fe9a 	bl	80192a8 <osMutexWait>
							fm25v02_read(2*LIGHT_CONTROL_REG+1, &temp);
 8021574:	f107 030f 	add.w	r3, r7, #15
 8021578:	4619      	mov	r1, r3
 802157a:	f242 1083 	movw	r0, #8579	; 0x2183
 802157e:	f009 fa4b 	bl	802aa18 <fm25v02_read>
							temp = temp&0xF8;
 8021582:	7bfb      	ldrb	r3, [r7, #15]
 8021584:	f023 0307 	bic.w	r3, r3, #7
 8021588:	b2db      	uxtb	r3, r3
 802158a:	73fb      	strb	r3, [r7, #15]
							fm25v02_write(2*LIGHT_CONTROL_REG+1, temp);
 802158c:	7bfb      	ldrb	r3, [r7, #15]
 802158e:	4619      	mov	r1, r3
 8021590:	f242 1083 	movw	r0, #8579	; 0x2183
 8021594:	f009 fa7a 	bl	802aa8c <fm25v02_write>
							control_registers.light_control_reg = control_registers.light_control_reg&0xFFF8;
 8021598:	4b20      	ldr	r3, [pc, #128]	; (802161c <ThreadMainTask+0x1024>)
 802159a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 802159e:	f023 0307 	bic.w	r3, r3, #7
 80215a2:	b29a      	uxth	r2, r3
 80215a4:	4b1d      	ldr	r3, [pc, #116]	; (802161c <ThreadMainTask+0x1024>)
 80215a6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

							fm25v02_write(2*MONTH_LIGHTING_OFF_REG, 0x00);
 80215aa:	2100      	movs	r1, #0
 80215ac:	f242 0066 	movw	r0, #8294	; 0x2066
 80215b0:	f009 fa6c 	bl	802aa8c <fm25v02_write>
							temp = current_date.Month;
 80215b4:	4b20      	ldr	r3, [pc, #128]	; (8021638 <ThreadMainTask+0x1040>)
 80215b6:	785b      	ldrb	r3, [r3, #1]
 80215b8:	73fb      	strb	r3, [r7, #15]
							fm25v02_write(2*MONTH_LIGHTING_OFF_REG+1, temp);
 80215ba:	7bfb      	ldrb	r3, [r7, #15]
 80215bc:	4619      	mov	r1, r3
 80215be:	f242 0067 	movw	r0, #8295	; 0x2067
 80215c2:	f009 fa63 	bl	802aa8c <fm25v02_write>
							fm25v02_write(2*DAY_LIGHTING_OFF_REG+1, 0x00);
 80215c6:	2100      	movs	r1, #0
 80215c8:	f242 0069 	movw	r0, #8297	; 0x2069
 80215cc:	f009 fa5e 	bl	802aa8c <fm25v02_write>
							temp = current_date.Date;
 80215d0:	4b19      	ldr	r3, [pc, #100]	; (8021638 <ThreadMainTask+0x1040>)
 80215d2:	789b      	ldrb	r3, [r3, #2]
 80215d4:	73fb      	strb	r3, [r7, #15]
							fm25v02_write(2*DAY_LIGHTING_OFF_REG+1, temp);
 80215d6:	7bfb      	ldrb	r3, [r7, #15]
 80215d8:	4619      	mov	r1, r3
 80215da:	f242 0069 	movw	r0, #8297	; 0x2069
 80215de:	f009 fa55 	bl	802aa8c <fm25v02_write>
							fm25v02_write(2*HOUR_LIGHTING_OFF_REG+1, 0x00);
 80215e2:	2100      	movs	r1, #0
 80215e4:	f242 006b 	movw	r0, #8299	; 0x206b
 80215e8:	f009 fa50 	bl	802aa8c <fm25v02_write>
							temp = current_time.Hours;
 80215ec:	4b0c      	ldr	r3, [pc, #48]	; (8021620 <ThreadMainTask+0x1028>)
 80215ee:	781b      	ldrb	r3, [r3, #0]
 80215f0:	73fb      	strb	r3, [r7, #15]
							fm25v02_write(2*HOUR_LIGHTING_OFF_REG+1, temp);
 80215f2:	7bfb      	ldrb	r3, [r7, #15]
 80215f4:	4619      	mov	r1, r3
 80215f6:	f242 006b 	movw	r0, #8299	; 0x206b
 80215fa:	f009 fa47 	bl	802aa8c <fm25v02_write>
							fm25v02_write(2*MINUTE_LIGHTING_OFF_REG+1, 0x00);
 80215fe:	2100      	movs	r1, #0
 8021600:	f242 006d 	movw	r0, #8301	; 0x206d
 8021604:	f009 fa42 	bl	802aa8c <fm25v02_write>
							temp = current_time.Minutes;
 8021608:	4b05      	ldr	r3, [pc, #20]	; (8021620 <ThreadMainTask+0x1028>)
 802160a:	785b      	ldrb	r3, [r3, #1]
 802160c:	73fb      	strb	r3, [r7, #15]
							fm25v02_write(2*MINUTE_LIGHTING_OFF_REG+1, temp);
 802160e:	7bfb      	ldrb	r3, [r7, #15]
 8021610:	4619      	mov	r1, r3
 8021612:	f242 006d 	movw	r0, #8301	; 0x206d
 8021616:	f009 fa39 	bl	802aa8c <fm25v02_write>
 802161a:	e01f      	b.n	802165c <ThreadMainTask+0x1064>
 802161c:	2000b000 	.word	0x2000b000
 8021620:	2000a028 	.word	0x2000a028
 8021624:	2000a065 	.word	0x2000a065
 8021628:	2000a048 	.word	0x2000a048
 802162c:	2000a069 	.word	0x2000a069
 8021630:	2000a03c 	.word	0x2000a03c
 8021634:	20009bb8 	.word	0x20009bb8
 8021638:	2000a020 	.word	0x2000a020
 802163c:	2000a061 	.word	0x2000a061
 8021640:	2000a044 	.word	0x2000a044
 8021644:	2000a024 	.word	0x2000a024
 8021648:	2000a01c 	.word	0x2000a01c
 802164c:	2000a046 	.word	0x2000a046
 8021650:	2000a068 	.word	0x2000a068
 8021654:	2000a067 	.word	0x2000a067
 8021658:	2000a063 	.word	0x2000a063

							osMutexRelease(Fm25v02MutexHandle);
 802165c:	4b4d      	ldr	r3, [pc, #308]	; (8021794 <ThreadMainTask+0x119c>)
 802165e:	681b      	ldr	r3, [r3, #0]
 8021660:	4618      	mov	r0, r3
 8021662:	f7f7 fe6f 	bl	8019344 <osMutexRelease>
						}

						if( (temp_time_off_4_hour==current_time.Hours)&&(temp_time_off_4_minute==current_time.Minutes)&&((temp_time_on_4_hour!=temp_time_off_4_hour)||(temp_time_on_4_minute!=temp_time_off_4_minute)) )
 8021666:	4b4c      	ldr	r3, [pc, #304]	; (8021798 <ThreadMainTask+0x11a0>)
 8021668:	781a      	ldrb	r2, [r3, #0]
 802166a:	4b4c      	ldr	r3, [pc, #304]	; (802179c <ThreadMainTask+0x11a4>)
 802166c:	781b      	ldrb	r3, [r3, #0]
 802166e:	429a      	cmp	r2, r3
 8021670:	d172      	bne.n	8021758 <ThreadMainTask+0x1160>
 8021672:	4b49      	ldr	r3, [pc, #292]	; (8021798 <ThreadMainTask+0x11a0>)
 8021674:	785a      	ldrb	r2, [r3, #1]
 8021676:	4b4a      	ldr	r3, [pc, #296]	; (80217a0 <ThreadMainTask+0x11a8>)
 8021678:	781b      	ldrb	r3, [r3, #0]
 802167a:	429a      	cmp	r2, r3
 802167c:	d16c      	bne.n	8021758 <ThreadMainTask+0x1160>
 802167e:	4b49      	ldr	r3, [pc, #292]	; (80217a4 <ThreadMainTask+0x11ac>)
 8021680:	781a      	ldrb	r2, [r3, #0]
 8021682:	4b46      	ldr	r3, [pc, #280]	; (802179c <ThreadMainTask+0x11a4>)
 8021684:	781b      	ldrb	r3, [r3, #0]
 8021686:	429a      	cmp	r2, r3
 8021688:	d105      	bne.n	8021696 <ThreadMainTask+0x109e>
 802168a:	4b47      	ldr	r3, [pc, #284]	; (80217a8 <ThreadMainTask+0x11b0>)
 802168c:	781a      	ldrb	r2, [r3, #0]
 802168e:	4b44      	ldr	r3, [pc, #272]	; (80217a0 <ThreadMainTask+0x11a8>)
 8021690:	781b      	ldrb	r3, [r3, #0]
 8021692:	429a      	cmp	r2, r3
 8021694:	d060      	beq.n	8021758 <ThreadMainTask+0x1160>
						{
							osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8021696:	4b3f      	ldr	r3, [pc, #252]	; (8021794 <ThreadMainTask+0x119c>)
 8021698:	681b      	ldr	r3, [r3, #0]
 802169a:	f04f 31ff 	mov.w	r1, #4294967295
 802169e:	4618      	mov	r0, r3
 80216a0:	f7f7 fe02 	bl	80192a8 <osMutexWait>
							fm25v02_read(2*LIGHT_CONTROL_REG+1, &temp);
 80216a4:	f107 030f 	add.w	r3, r7, #15
 80216a8:	4619      	mov	r1, r3
 80216aa:	f242 1083 	movw	r0, #8579	; 0x2183
 80216ae:	f009 f9b3 	bl	802aa18 <fm25v02_read>
							temp = temp&0xF8;
 80216b2:	7bfb      	ldrb	r3, [r7, #15]
 80216b4:	f023 0307 	bic.w	r3, r3, #7
 80216b8:	b2db      	uxtb	r3, r3
 80216ba:	73fb      	strb	r3, [r7, #15]
							fm25v02_write(2*LIGHT_CONTROL_REG+1, temp);
 80216bc:	7bfb      	ldrb	r3, [r7, #15]
 80216be:	4619      	mov	r1, r3
 80216c0:	f242 1083 	movw	r0, #8579	; 0x2183
 80216c4:	f009 f9e2 	bl	802aa8c <fm25v02_write>
							control_registers.light_control_reg = control_registers.light_control_reg&0xFFF8;
 80216c8:	4b38      	ldr	r3, [pc, #224]	; (80217ac <ThreadMainTask+0x11b4>)
 80216ca:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80216ce:	f023 0307 	bic.w	r3, r3, #7
 80216d2:	b29a      	uxth	r2, r3
 80216d4:	4b35      	ldr	r3, [pc, #212]	; (80217ac <ThreadMainTask+0x11b4>)
 80216d6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

							fm25v02_write(2*MONTH_LIGHTING_OFF_REG, 0x00);
 80216da:	2100      	movs	r1, #0
 80216dc:	f242 0066 	movw	r0, #8294	; 0x2066
 80216e0:	f009 f9d4 	bl	802aa8c <fm25v02_write>
							temp = current_date.Month;
 80216e4:	4b32      	ldr	r3, [pc, #200]	; (80217b0 <ThreadMainTask+0x11b8>)
 80216e6:	785b      	ldrb	r3, [r3, #1]
 80216e8:	73fb      	strb	r3, [r7, #15]
							fm25v02_write(2*MONTH_LIGHTING_OFF_REG+1, temp);
 80216ea:	7bfb      	ldrb	r3, [r7, #15]
 80216ec:	4619      	mov	r1, r3
 80216ee:	f242 0067 	movw	r0, #8295	; 0x2067
 80216f2:	f009 f9cb 	bl	802aa8c <fm25v02_write>
							fm25v02_write(2*DAY_LIGHTING_OFF_REG+1, 0x00);
 80216f6:	2100      	movs	r1, #0
 80216f8:	f242 0069 	movw	r0, #8297	; 0x2069
 80216fc:	f009 f9c6 	bl	802aa8c <fm25v02_write>
							temp = current_date.Date;
 8021700:	4b2b      	ldr	r3, [pc, #172]	; (80217b0 <ThreadMainTask+0x11b8>)
 8021702:	789b      	ldrb	r3, [r3, #2]
 8021704:	73fb      	strb	r3, [r7, #15]
							fm25v02_write(2*DAY_LIGHTING_OFF_REG+1, temp);
 8021706:	7bfb      	ldrb	r3, [r7, #15]
 8021708:	4619      	mov	r1, r3
 802170a:	f242 0069 	movw	r0, #8297	; 0x2069
 802170e:	f009 f9bd 	bl	802aa8c <fm25v02_write>
							fm25v02_write(2*HOUR_LIGHTING_OFF_REG+1, 0x00);
 8021712:	2100      	movs	r1, #0
 8021714:	f242 006b 	movw	r0, #8299	; 0x206b
 8021718:	f009 f9b8 	bl	802aa8c <fm25v02_write>
							temp = current_time.Hours;
 802171c:	4b1e      	ldr	r3, [pc, #120]	; (8021798 <ThreadMainTask+0x11a0>)
 802171e:	781b      	ldrb	r3, [r3, #0]
 8021720:	73fb      	strb	r3, [r7, #15]
							fm25v02_write(2*HOUR_LIGHTING_OFF_REG+1, temp);
 8021722:	7bfb      	ldrb	r3, [r7, #15]
 8021724:	4619      	mov	r1, r3
 8021726:	f242 006b 	movw	r0, #8299	; 0x206b
 802172a:	f009 f9af 	bl	802aa8c <fm25v02_write>
							fm25v02_write(2*MINUTE_LIGHTING_OFF_REG+1, 0x00);
 802172e:	2100      	movs	r1, #0
 8021730:	f242 006d 	movw	r0, #8301	; 0x206d
 8021734:	f009 f9aa 	bl	802aa8c <fm25v02_write>
							temp = current_time.Minutes;
 8021738:	4b17      	ldr	r3, [pc, #92]	; (8021798 <ThreadMainTask+0x11a0>)
 802173a:	785b      	ldrb	r3, [r3, #1]
 802173c:	73fb      	strb	r3, [r7, #15]
							fm25v02_write(2*MINUTE_LIGHTING_OFF_REG+1, temp);
 802173e:	7bfb      	ldrb	r3, [r7, #15]
 8021740:	4619      	mov	r1, r3
 8021742:	f242 006d 	movw	r0, #8301	; 0x206d
 8021746:	f009 f9a1 	bl	802aa8c <fm25v02_write>

							osMutexRelease(Fm25v02MutexHandle);
 802174a:	4b12      	ldr	r3, [pc, #72]	; (8021794 <ThreadMainTask+0x119c>)
 802174c:	681b      	ldr	r3, [r3, #0]
 802174e:	4618      	mov	r0, r3
 8021750:	f7f7 fdf8 	bl	8019344 <osMutexRelease>


					}
				}

			break;
 8021754:	e000      	b.n	8021758 <ThreadMainTask+0x1160>
						if( (temp_time_on_4_hour==current_time.Hours)&&(temp_time_on_4_minute==current_time.Minutes)&&((temp_time_on_4_hour!=temp_time_off_4_hour)||(temp_time_on_4_minute!=temp_time_off_4_minute)) )
 8021756:	bf00      	nop
			break;
 8021758:	bf00      	nop

		}

		switch(control_registers.reset_control_reg) // удаленная перезагрузка контроллера
 802175a:	4b14      	ldr	r3, [pc, #80]	; (80217ac <ThreadMainTask+0x11b4>)
 802175c:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 802175e:	2b01      	cmp	r3, #1
 8021760:	d128      	bne.n	80217b4 <ThreadMainTask+0x11bc>
		{
			case(1):
				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8021762:	4b0c      	ldr	r3, [pc, #48]	; (8021794 <ThreadMainTask+0x119c>)
 8021764:	681b      	ldr	r3, [r3, #0]
 8021766:	f04f 31ff 	mov.w	r1, #4294967295
 802176a:	4618      	mov	r0, r3
 802176c:	f7f7 fd9c 	bl	80192a8 <osMutexWait>
				fm25v02_write(2*RESET_CONTROL_REG, 0);
 8021770:	2100      	movs	r1, #0
 8021772:	f242 105a 	movw	r0, #8538	; 0x215a
 8021776:	f009 f989 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*RESET_CONTROL_REG+1, 0);
 802177a:	2100      	movs	r1, #0
 802177c:	f242 105b 	movw	r0, #8539	; 0x215b
 8021780:	f009 f984 	bl	802aa8c <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8021784:	4b03      	ldr	r3, [pc, #12]	; (8021794 <ThreadMainTask+0x119c>)
 8021786:	681b      	ldr	r3, [r3, #0]
 8021788:	4618      	mov	r0, r3
 802178a:	f7f7 fddb 	bl	8019344 <osMutexRelease>
				NVIC_SystemReset();
 802178e:	f7fe ff1d 	bl	80205cc <__NVIC_SystemReset>
 8021792:	bf00      	nop
 8021794:	20009bb8 	.word	0x20009bb8
 8021798:	2000a028 	.word	0x2000a028
 802179c:	2000a01e 	.word	0x2000a01e
 80217a0:	2000a062 	.word	0x2000a062
 80217a4:	2000a060 	.word	0x2000a060
 80217a8:	2000a047 	.word	0x2000a047
 80217ac:	2000b000 	.word	0x2000b000
 80217b0:	2000a020 	.word	0x2000a020
			break;

		}

		switch(control_registers.alarm_loop_clear_reg) // сбросить сработавшие шлейфы
 80217b4:	4bf2      	ldr	r3, [pc, #968]	; (8021b80 <ThreadMainTask+0x1588>)
 80217b6:	895b      	ldrh	r3, [r3, #10]
 80217b8:	2b01      	cmp	r3, #1
 80217ba:	d13b      	bne.n	8021834 <ThreadMainTask+0x123c>
		{
			case(1):
				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 80217bc:	4bf1      	ldr	r3, [pc, #964]	; (8021b84 <ThreadMainTask+0x158c>)
 80217be:	681b      	ldr	r3, [r3, #0]
 80217c0:	f04f 31ff 	mov.w	r1, #4294967295
 80217c4:	4618      	mov	r0, r3
 80217c6:	f7f7 fd6f 	bl	80192a8 <osMutexWait>
				fm25v02_write(2*ALARM_LOOP_CLEAR_REG, 0);
 80217ca:	2100      	movs	r1, #0
 80217cc:	f242 102a 	movw	r0, #8490	; 0x212a
 80217d0:	f009 f95c 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*ALARM_LOOP_CLEAR_REG+1, 0);
 80217d4:	2100      	movs	r1, #0
 80217d6:	f242 102b 	movw	r0, #8491	; 0x212b
 80217da:	f009 f957 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*ALARM_LOOP_REG, 0);
 80217de:	2100      	movs	r1, #0
 80217e0:	f242 0008 	movw	r0, #8200	; 0x2008
 80217e4:	f009 f952 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*ALARM_LOOP_REG+1, 0);
 80217e8:	2100      	movs	r1, #0
 80217ea:	f242 0009 	movw	r0, #8201	; 0x2009
 80217ee:	f009 f94d 	bl	802aa8c <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 80217f2:	4be4      	ldr	r3, [pc, #912]	; (8021b84 <ThreadMainTask+0x158c>)
 80217f4:	681b      	ldr	r3, [r3, #0]
 80217f6:	4618      	mov	r0, r3
 80217f8:	f7f7 fda4 	bl	8019344 <osMutexRelease>

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 80217fc:	4be1      	ldr	r3, [pc, #900]	; (8021b84 <ThreadMainTask+0x158c>)
 80217fe:	681b      	ldr	r3, [r3, #0]
 8021800:	f04f 31ff 	mov.w	r1, #4294967295
 8021804:	4618      	mov	r0, r3
 8021806:	f7f7 fd4f 	bl	80192a8 <osMutexWait>
				fm25v02_write(2*GPRS_CALL_REG, 0x00);
 802180a:	2100      	movs	r1, #0
 802180c:	f242 106e 	movw	r0, #8558	; 0x216e
 8021810:	f009 f93c 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
 8021814:	2101      	movs	r1, #1
 8021816:	f242 106f 	movw	r0, #8559	; 0x216f
 802181a:	f009 f937 	bl	802aa8c <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 802181e:	4bd9      	ldr	r3, [pc, #868]	; (8021b84 <ThreadMainTask+0x158c>)
 8021820:	681b      	ldr	r3, [r3, #0]
 8021822:	4618      	mov	r0, r3
 8021824:	f7f7 fd8e 	bl	8019344 <osMutexRelease>

				osThreadResume(EventWriteTaskHandle);
 8021828:	4bd7      	ldr	r3, [pc, #860]	; (8021b88 <ThreadMainTask+0x1590>)
 802182a:	681b      	ldr	r3, [r3, #0]
 802182c:	4618      	mov	r0, r3
 802182e:	f7f7 ff5d 	bl	80196ec <osThreadResume>

			break;
 8021832:	bf00      	nop

		}

		switch(control_registers.false_loop_clear_reg) // сбросить неисправные шлейфы
 8021834:	4bd2      	ldr	r3, [pc, #840]	; (8021b80 <ThreadMainTask+0x1588>)
 8021836:	899b      	ldrh	r3, [r3, #12]
 8021838:	2b01      	cmp	r3, #1
 802183a:	f040 821a 	bne.w	8021c72 <ThreadMainTask+0x167a>
		{
			case(1):
				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 802183e:	4bd1      	ldr	r3, [pc, #836]	; (8021b84 <ThreadMainTask+0x158c>)
 8021840:	681b      	ldr	r3, [r3, #0]
 8021842:	f04f 31ff 	mov.w	r1, #4294967295
 8021846:	4618      	mov	r0, r3
 8021848:	f7f7 fd2e 	bl	80192a8 <osMutexWait>
				fm25v02_write(2*FALSE_LOOP_CLEAR_REG, 0);
 802184c:	2100      	movs	r1, #0
 802184e:	f242 102c 	movw	r0, #8492	; 0x212c
 8021852:	f009 f91b 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*FALSE_LOOP_CLEAR_REG+1, 0);
 8021856:	2100      	movs	r1, #0
 8021858:	f242 102d 	movw	r0, #8493	; 0x212d
 802185c:	f009 f916 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*ERROR_LOOP_REG, 0);
 8021860:	2100      	movs	r1, #0
 8021862:	f242 0006 	movw	r0, #8198	; 0x2006
 8021866:	f009 f911 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*ERROR_LOOP_REG+1, 0);
 802186a:	2100      	movs	r1, #0
 802186c:	f242 0007 	movw	r0, #8199	; 0x2007
 8021870:	f009 f90c 	bl	802aa8c <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8021874:	4bc3      	ldr	r3, [pc, #780]	; (8021b84 <ThreadMainTask+0x158c>)
 8021876:	681b      	ldr	r3, [r3, #0]
 8021878:	4618      	mov	r0, r3
 802187a:	f7f7 fd63 	bl	8019344 <osMutexRelease>
				//osMutexRelease(Fm25v02MutexHandle);

				//osThreadResume(EventWriteTaskHandle);
				//osTimerStart(Ring_Center_TimerHandle, 1);

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 802187e:	4bc1      	ldr	r3, [pc, #772]	; (8021b84 <ThreadMainTask+0x158c>)
 8021880:	681b      	ldr	r3, [r3, #0]
 8021882:	f04f 31ff 	mov.w	r1, #4294967295
 8021886:	4618      	mov	r0, r3
 8021888:	f7f7 fd0e 	bl	80192a8 <osMutexWait>

				fm25v02_write(2*CE_303_ERROR_REG, 0);
 802188c:	2100      	movs	r1, #0
 802188e:	f242 003c 	movw	r0, #8252	; 0x203c
 8021892:	f009 f8fb 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_ERROR_REG+1, 0);
 8021896:	2100      	movs	r1, #0
 8021898:	f242 003d 	movw	r0, #8253	; 0x203d
 802189c:	f009 f8f6 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_A_REG, 0);
 80218a0:	2100      	movs	r1, #0
 80218a2:	f242 003e 	movw	r0, #8254	; 0x203e
 80218a6:	f009 f8f1 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_A_REG+1, 0);
 80218aa:	2100      	movs	r1, #0
 80218ac:	f242 003f 	movw	r0, #8255	; 0x203f
 80218b0:	f009 f8ec 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_B_REG, 0);
 80218b4:	2100      	movs	r1, #0
 80218b6:	f44f 5001 	mov.w	r0, #8256	; 0x2040
 80218ba:	f009 f8e7 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_B_REG+1, 0);
 80218be:	2100      	movs	r1, #0
 80218c0:	f242 0041 	movw	r0, #8257	; 0x2041
 80218c4:	f009 f8e2 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_C_REG, 0);
 80218c8:	2100      	movs	r1, #0
 80218ca:	f242 0042 	movw	r0, #8258	; 0x2042
 80218ce:	f009 f8dd 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_C_REG+1, 0);
 80218d2:	2100      	movs	r1, #0
 80218d4:	f242 0043 	movw	r0, #8259	; 0x2043
 80218d8:	f009 f8d8 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_MIL_A_REG, 0);
 80218dc:	2100      	movs	r1, #0
 80218de:	f242 0044 	movw	r0, #8260	; 0x2044
 80218e2:	f009 f8d3 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_MIL_A_REG+1, 0);
 80218e6:	2100      	movs	r1, #0
 80218e8:	f242 0045 	movw	r0, #8261	; 0x2045
 80218ec:	f009 f8ce 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_MIL_B_REG, 0);
 80218f0:	2100      	movs	r1, #0
 80218f2:	f242 0046 	movw	r0, #8262	; 0x2046
 80218f6:	f009 f8c9 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_MIL_B_REG+1, 0);
 80218fa:	2100      	movs	r1, #0
 80218fc:	f242 0047 	movw	r0, #8263	; 0x2047
 8021900:	f009 f8c4 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_MIL_C_REG, 0);
 8021904:	2100      	movs	r1, #0
 8021906:	f242 0048 	movw	r0, #8264	; 0x2048
 802190a:	f009 f8bf 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_MIL_C_REG+1, 0);
 802190e:	2100      	movs	r1, #0
 8021910:	f242 0049 	movw	r0, #8265	; 0x2049
 8021914:	f009 f8ba 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_A_REG, 0);
 8021918:	2100      	movs	r1, #0
 802191a:	f242 004a 	movw	r0, #8266	; 0x204a
 802191e:	f009 f8b5 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_A_REG+1, 0);
 8021922:	2100      	movs	r1, #0
 8021924:	f242 004b 	movw	r0, #8267	; 0x204b
 8021928:	f009 f8b0 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_B_REG, 0);
 802192c:	2100      	movs	r1, #0
 802192e:	f242 004c 	movw	r0, #8268	; 0x204c
 8021932:	f009 f8ab 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_B_REG+1, 0);
 8021936:	2100      	movs	r1, #0
 8021938:	f242 004d 	movw	r0, #8269	; 0x204d
 802193c:	f009 f8a6 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_C_REG, 0);
 8021940:	2100      	movs	r1, #0
 8021942:	f242 004e 	movw	r0, #8270	; 0x204e
 8021946:	f009 f8a1 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_C_REG+1, 0);
 802194a:	2100      	movs	r1, #0
 802194c:	f242 004f 	movw	r0, #8271	; 0x204f
 8021950:	f009 f89c 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_MIL_A_REG, 0);
 8021954:	2100      	movs	r1, #0
 8021956:	f242 0050 	movw	r0, #8272	; 0x2050
 802195a:	f009 f897 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_MIL_A_REG+1, 0);
 802195e:	2100      	movs	r1, #0
 8021960:	f242 0051 	movw	r0, #8273	; 0x2051
 8021964:	f009 f892 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_MIL_B_REG, 0);
 8021968:	2100      	movs	r1, #0
 802196a:	f242 0052 	movw	r0, #8274	; 0x2052
 802196e:	f009 f88d 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_MIL_B_REG+1, 0);
 8021972:	2100      	movs	r1, #0
 8021974:	f242 0053 	movw	r0, #8275	; 0x2053
 8021978:	f009 f888 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_MIL_C_REG, 0);
 802197c:	2100      	movs	r1, #0
 802197e:	f242 0054 	movw	r0, #8276	; 0x2054
 8021982:	f009 f883 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_MIL_C_REG+1, 0);
 8021986:	2100      	movs	r1, #0
 8021988:	f242 0055 	movw	r0, #8277	; 0x2055
 802198c:	f009 f87e 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_A_REG, 0);
 8021990:	2100      	movs	r1, #0
 8021992:	f242 0056 	movw	r0, #8278	; 0x2056
 8021996:	f009 f879 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_A_REG+1, 0);
 802199a:	2100      	movs	r1, #0
 802199c:	f242 0057 	movw	r0, #8279	; 0x2057
 80219a0:	f009 f874 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_B_REG, 0);
 80219a4:	2100      	movs	r1, #0
 80219a6:	f242 0058 	movw	r0, #8280	; 0x2058
 80219aa:	f009 f86f 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_B_REG+1, 0);
 80219ae:	2100      	movs	r1, #0
 80219b0:	f242 0059 	movw	r0, #8281	; 0x2059
 80219b4:	f009 f86a 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_C_REG, 0);
 80219b8:	2100      	movs	r1, #0
 80219ba:	f242 005a 	movw	r0, #8282	; 0x205a
 80219be:	f009 f865 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_C_REG+1, 0);
 80219c2:	2100      	movs	r1, #0
 80219c4:	f242 005b 	movw	r0, #8283	; 0x205b
 80219c8:	f009 f860 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_MIL_A_REG, 0);
 80219cc:	2100      	movs	r1, #0
 80219ce:	f242 005c 	movw	r0, #8284	; 0x205c
 80219d2:	f009 f85b 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_MIL_A_REG+1, 0);
 80219d6:	2100      	movs	r1, #0
 80219d8:	f242 005d 	movw	r0, #8285	; 0x205d
 80219dc:	f009 f856 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_MIL_B_REG, 0);
 80219e0:	2100      	movs	r1, #0
 80219e2:	f242 005e 	movw	r0, #8286	; 0x205e
 80219e6:	f009 f851 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_MIL_B_REG+1, 0);
 80219ea:	2100      	movs	r1, #0
 80219ec:	f242 005f 	movw	r0, #8287	; 0x205f
 80219f0:	f009 f84c 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_MIL_C_REG, 0);
 80219f4:	2100      	movs	r1, #0
 80219f6:	f242 0060 	movw	r0, #8288	; 0x2060
 80219fa:	f009 f847 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_MIL_C_REG+1, 0);
 80219fe:	2100      	movs	r1, #0
 8021a00:	f242 0061 	movw	r0, #8289	; 0x2061
 8021a04:	f009 f842 	bl	802aa8c <fm25v02_write>

				fm25v02_write(2*LIGHTING_STATUS_REG, 0);
 8021a08:	2100      	movs	r1, #0
 8021a0a:	f242 0062 	movw	r0, #8290	; 0x2062
 8021a0e:	f009 f83d 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*LIGHTING_STATUS_REG+1, 0);
 8021a12:	2100      	movs	r1, #0
 8021a14:	f242 0063 	movw	r0, #8291	; 0x2063
 8021a18:	f009 f838 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*LIGHTING_ALARM_REG, 0);
 8021a1c:	2100      	movs	r1, #0
 8021a1e:	f242 0064 	movw	r0, #8292	; 0x2064
 8021a22:	f009 f833 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*LIGHTING_ALARM_REG+1, 0);
 8021a26:	2100      	movs	r1, #0
 8021a28:	f242 0065 	movw	r0, #8293	; 0x2065
 8021a2c:	f009 f82e 	bl	802aa8c <fm25v02_write>

				fm25v02_write(2*MONTH_LIGHTING_OFF_REG, 0);
 8021a30:	2100      	movs	r1, #0
 8021a32:	f242 0066 	movw	r0, #8294	; 0x2066
 8021a36:	f009 f829 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*MONTH_LIGHTING_OFF_REG+1, 0);
 8021a3a:	2100      	movs	r1, #0
 8021a3c:	f242 0067 	movw	r0, #8295	; 0x2067
 8021a40:	f009 f824 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*DAY_LIGHTING_OFF_REG, 0);
 8021a44:	2100      	movs	r1, #0
 8021a46:	f242 0068 	movw	r0, #8296	; 0x2068
 8021a4a:	f009 f81f 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*DAY_LIGHTING_OFF_REG+1, 0);
 8021a4e:	2100      	movs	r1, #0
 8021a50:	f242 0069 	movw	r0, #8297	; 0x2069
 8021a54:	f009 f81a 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*HOUR_LIGHTING_OFF_REG, 0);
 8021a58:	2100      	movs	r1, #0
 8021a5a:	f242 006a 	movw	r0, #8298	; 0x206a
 8021a5e:	f009 f815 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*HOUR_LIGHTING_OFF_REG+1, 0);
 8021a62:	2100      	movs	r1, #0
 8021a64:	f242 006b 	movw	r0, #8299	; 0x206b
 8021a68:	f009 f810 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*MINUTE_LIGHTING_OFF_REG, 0);
 8021a6c:	2100      	movs	r1, #0
 8021a6e:	f242 006c 	movw	r0, #8300	; 0x206c
 8021a72:	f009 f80b 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*MINUTE_LIGHTING_OFF_REG+1, 0);
 8021a76:	2100      	movs	r1, #0
 8021a78:	f242 006d 	movw	r0, #8301	; 0x206d
 8021a7c:	f009 f806 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*MONTH_LIGHTING_ON_REG, 0);
 8021a80:	2100      	movs	r1, #0
 8021a82:	f242 006e 	movw	r0, #8302	; 0x206e
 8021a86:	f009 f801 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*MONTH_LIGHTING_ON_REG+1, 0);
 8021a8a:	2100      	movs	r1, #0
 8021a8c:	f242 006f 	movw	r0, #8303	; 0x206f
 8021a90:	f008 fffc 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*DAY_LIGHTING_ON_REG, 0);
 8021a94:	2100      	movs	r1, #0
 8021a96:	f242 0070 	movw	r0, #8304	; 0x2070
 8021a9a:	f008 fff7 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*DAY_LIGHTING_ON_REG+1, 0);
 8021a9e:	2100      	movs	r1, #0
 8021aa0:	f242 0071 	movw	r0, #8305	; 0x2071
 8021aa4:	f008 fff2 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*HOUR_LIGHTING_ON_REG, 0);
 8021aa8:	2100      	movs	r1, #0
 8021aaa:	f242 0072 	movw	r0, #8306	; 0x2072
 8021aae:	f008 ffed 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*HOUR_LIGHTING_ON_REG+1, 0);
 8021ab2:	2100      	movs	r1, #0
 8021ab4:	f242 0073 	movw	r0, #8307	; 0x2073
 8021ab8:	f008 ffe8 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*MINUTE_LIGHTING_ON_REG, 0);
 8021abc:	2100      	movs	r1, #0
 8021abe:	f242 0074 	movw	r0, #8308	; 0x2074
 8021ac2:	f008 ffe3 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*MINUTE_LIGHTING_ON_REG+1, 0);
 8021ac6:	2100      	movs	r1, #0
 8021ac8:	f242 0075 	movw	r0, #8309	; 0x2075
 8021acc:	f008 ffde 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_H_REG, 0);
 8021ad0:	2100      	movs	r1, #0
 8021ad2:	f242 0082 	movw	r0, #8322	; 0x2082
 8021ad6:	f008 ffd9 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_H_REG+1, 0);
 8021ada:	2100      	movs	r1, #0
 8021adc:	f242 0083 	movw	r0, #8323	; 0x2083
 8021ae0:	f008 ffd4 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_L_REG, 0);
 8021ae4:	2100      	movs	r1, #0
 8021ae6:	f242 0084 	movw	r0, #8324	; 0x2084
 8021aea:	f008 ffcf 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_L_REG+1, 0);
 8021aee:	2100      	movs	r1, #0
 8021af0:	f242 0085 	movw	r0, #8325	; 0x2085
 8021af4:	f008 ffca 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_M_REG, 0);
 8021af8:	2100      	movs	r1, #0
 8021afa:	f242 0086 	movw	r0, #8326	; 0x2086
 8021afe:	f008 ffc5 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_M_REG+1, 0);
 8021b02:	2100      	movs	r1, #0
 8021b04:	f242 0087 	movw	r0, #8327	; 0x2087
 8021b08:	f008 ffc0 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_H_REG, 0);
 8021b0c:	2100      	movs	r1, #0
 8021b0e:	f242 0088 	movw	r0, #8328	; 0x2088
 8021b12:	f008 ffbb 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_H_REG+1, 0);
 8021b16:	2100      	movs	r1, #0
 8021b18:	f242 0089 	movw	r0, #8329	; 0x2089
 8021b1c:	f008 ffb6 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_L_REG, 0);
 8021b20:	2100      	movs	r1, #0
 8021b22:	f242 008a 	movw	r0, #8330	; 0x208a
 8021b26:	f008 ffb1 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_L_REG+1, 0);
 8021b2a:	2100      	movs	r1, #0
 8021b2c:	f242 008b 	movw	r0, #8331	; 0x208b
 8021b30:	f008 ffac 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_MIL_REG, 0);
 8021b34:	2100      	movs	r1, #0
 8021b36:	f242 008c 	movw	r0, #8332	; 0x208c
 8021b3a:	f008 ffa7 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_MIL_REG+1, 0);
 8021b3e:	2100      	movs	r1, #0
 8021b40:	f242 008d 	movw	r0, #8333	; 0x208d
 8021b44:	f008 ffa2 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_H_REG, 0);
 8021b48:	2100      	movs	r1, #0
 8021b4a:	f242 008e 	movw	r0, #8334	; 0x208e
 8021b4e:	f008 ff9d 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_H_REG+1, 0);
 8021b52:	2100      	movs	r1, #0
 8021b54:	f242 008f 	movw	r0, #8335	; 0x208f
 8021b58:	f008 ff98 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_L_REG, 0);
 8021b5c:	2100      	movs	r1, #0
 8021b5e:	f242 0090 	movw	r0, #8336	; 0x2090
 8021b62:	f008 ff93 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_L_REG+1, 0);
 8021b66:	2100      	movs	r1, #0
 8021b68:	f242 0091 	movw	r0, #8337	; 0x2091
 8021b6c:	f008 ff8e 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_MIL_REG, 0);
 8021b70:	2100      	movs	r1, #0
 8021b72:	f242 0092 	movw	r0, #8338	; 0x2092
 8021b76:	f008 ff89 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_MIL_REG+1, 0);
 8021b7a:	2100      	movs	r1, #0
 8021b7c:	e006      	b.n	8021b8c <ThreadMainTask+0x1594>
 8021b7e:	bf00      	nop
 8021b80:	2000b000 	.word	0x2000b000
 8021b84:	20009bb8 	.word	0x20009bb8
 8021b88:	20009718 	.word	0x20009718
 8021b8c:	f242 0093 	movw	r0, #8339	; 0x2093
 8021b90:	f008 ff7c 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_H_REG, 0);
 8021b94:	2100      	movs	r1, #0
 8021b96:	f242 0094 	movw	r0, #8340	; 0x2094
 8021b9a:	f008 ff77 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_H_REG+1, 0);
 8021b9e:	2100      	movs	r1, #0
 8021ba0:	f242 0095 	movw	r0, #8341	; 0x2095
 8021ba4:	f008 ff72 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_L_REG, 0);
 8021ba8:	2100      	movs	r1, #0
 8021baa:	f242 0096 	movw	r0, #8342	; 0x2096
 8021bae:	f008 ff6d 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_L_REG+1, 0);
 8021bb2:	2100      	movs	r1, #0
 8021bb4:	f242 0097 	movw	r0, #8343	; 0x2097
 8021bb8:	f008 ff68 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_MIL_REG, 0);
 8021bbc:	2100      	movs	r1, #0
 8021bbe:	f242 0098 	movw	r0, #8344	; 0x2098
 8021bc2:	f008 ff63 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_MIL_REG+1, 0);
 8021bc6:	2100      	movs	r1, #0
 8021bc8:	f242 0099 	movw	r0, #8345	; 0x2099
 8021bcc:	f008 ff5e 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF4_POWER_H_REG, 0);
 8021bd0:	2100      	movs	r1, #0
 8021bd2:	f242 009a 	movw	r0, #8346	; 0x209a
 8021bd6:	f008 ff59 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF4_POWER_H_REG+1, 0);
 8021bda:	2100      	movs	r1, #0
 8021bdc:	f242 009b 	movw	r0, #8347	; 0x209b
 8021be0:	f008 ff54 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF4_POWER_L_REG, 0);
 8021be4:	2100      	movs	r1, #0
 8021be6:	f242 009c 	movw	r0, #8348	; 0x209c
 8021bea:	f008 ff4f 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF4_POWER_L_REG+1, 0);
 8021bee:	2100      	movs	r1, #0
 8021bf0:	f242 009d 	movw	r0, #8349	; 0x209d
 8021bf4:	f008 ff4a 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF4_POWER_MIL_REG, 0);
 8021bf8:	2100      	movs	r1, #0
 8021bfa:	f242 009e 	movw	r0, #8350	; 0x209e
 8021bfe:	f008 ff45 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF4_POWER_MIL_REG+1, 0);
 8021c02:	2100      	movs	r1, #0
 8021c04:	f242 009f 	movw	r0, #8351	; 0x209f
 8021c08:	f008 ff40 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF5_POWER_H_REG, 0);
 8021c0c:	2100      	movs	r1, #0
 8021c0e:	f242 00a0 	movw	r0, #8352	; 0x20a0
 8021c12:	f008 ff3b 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF5_POWER_H_REG+1, 0);
 8021c16:	2100      	movs	r1, #0
 8021c18:	f242 00a1 	movw	r0, #8353	; 0x20a1
 8021c1c:	f008 ff36 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF5_POWER_L_REG, 0);
 8021c20:	2100      	movs	r1, #0
 8021c22:	f242 00a2 	movw	r0, #8354	; 0x20a2
 8021c26:	f008 ff31 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF5_POWER_L_REG+1, 0);
 8021c2a:	2100      	movs	r1, #0
 8021c2c:	f242 00a3 	movw	r0, #8355	; 0x20a3
 8021c30:	f008 ff2c 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF5_POWER_MIL_REG, 0);
 8021c34:	2100      	movs	r1, #0
 8021c36:	f242 00a4 	movw	r0, #8356	; 0x20a4
 8021c3a:	f008 ff27 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF5_POWER_MIL_REG+1, 0);
 8021c3e:	2100      	movs	r1, #0
 8021c40:	f242 00a5 	movw	r0, #8357	; 0x20a5
 8021c44:	f008 ff22 	bl	802aa8c <fm25v02_write>

				fm25v02_write(2*LIGHT_CONTROL_REG, 0);
 8021c48:	2100      	movs	r1, #0
 8021c4a:	f242 1082 	movw	r0, #8578	; 0x2182
 8021c4e:	f008 ff1d 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*LIGHT_CONTROL_REG+1, 0);
 8021c52:	2100      	movs	r1, #0
 8021c54:	f242 1083 	movw	r0, #8579	; 0x2183
 8021c58:	f008 ff18 	bl	802aa8c <fm25v02_write>

				osMutexRelease(Fm25v02MutexHandle);
 8021c5c:	4b9e      	ldr	r3, [pc, #632]	; (8021ed8 <ThreadMainTask+0x18e0>)
 8021c5e:	681b      	ldr	r3, [r3, #0]
 8021c60:	4618      	mov	r0, r3
 8021c62:	f7f7 fb6f 	bl	8019344 <osMutexRelease>

				osThreadResume(EventWriteTaskHandle);
 8021c66:	4b9d      	ldr	r3, [pc, #628]	; (8021edc <ThreadMainTask+0x18e4>)
 8021c68:	681b      	ldr	r3, [r3, #0]
 8021c6a:	4618      	mov	r0, r3
 8021c6c:	f7f7 fd3e 	bl	80196ec <osThreadResume>

			break;
 8021c70:	bf00      	nop

		}


		switch(control_registers.event_read_reg)
 8021c72:	4b9b      	ldr	r3, [pc, #620]	; (8021ee0 <ThreadMainTask+0x18e8>)
 8021c74:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8021c76:	2b01      	cmp	r3, #1
 8021c78:	d12a      	bne.n	8021cd0 <ThreadMainTask+0x16d8>
		{
			case(1):

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8021c7a:	4b97      	ldr	r3, [pc, #604]	; (8021ed8 <ThreadMainTask+0x18e0>)
 8021c7c:	681b      	ldr	r3, [r3, #0]
 8021c7e:	f04f 31ff 	mov.w	r1, #4294967295
 8021c82:	4618      	mov	r0, r3
 8021c84:	f7f7 fb10 	bl	80192a8 <osMutexWait>
				fm25v02_write(2*EVENT_READ_REG, 0);
 8021c88:	2100      	movs	r1, #0
 8021c8a:	f242 1044 	movw	r0, #8516	; 0x2144
 8021c8e:	f008 fefd 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*EVENT_READ_REG+1, 0);
 8021c92:	2100      	movs	r1, #0
 8021c94:	f242 1045 	movw	r0, #8517	; 0x2145
 8021c98:	f008 fef8 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*ADDRESS_LAST_EVENT_H_REG, 0x00);
 8021c9c:	2100      	movs	r1, #0
 8021c9e:	f242 001c 	movw	r0, #8220	; 0x201c
 8021ca2:	f008 fef3 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*ADDRESS_LAST_EVENT_H_REG+1, 0x20);
 8021ca6:	2120      	movs	r1, #32
 8021ca8:	f242 001d 	movw	r0, #8221	; 0x201d
 8021cac:	f008 feee 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*ADDRESS_LAST_EVENT_L_REG, 0x00);
 8021cb0:	2100      	movs	r1, #0
 8021cb2:	f242 001e 	movw	r0, #8222	; 0x201e
 8021cb6:	f008 fee9 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*ADDRESS_LAST_EVENT_L_REG+1, 0x00);
 8021cba:	2100      	movs	r1, #0
 8021cbc:	f242 001f 	movw	r0, #8223	; 0x201f
 8021cc0:	f008 fee4 	bl	802aa8c <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8021cc4:	4b84      	ldr	r3, [pc, #528]	; (8021ed8 <ThreadMainTask+0x18e0>)
 8021cc6:	681b      	ldr	r3, [r3, #0]
 8021cc8:	4618      	mov	r0, r3
 8021cca:	f7f7 fb3b 	bl	8019344 <osMutexRelease>

			break;
 8021cce:	bf00      	nop
		}

		switch(bootloader_registers.working_mode_reg)
 8021cd0:	4b84      	ldr	r3, [pc, #528]	; (8021ee4 <ThreadMainTask+0x18ec>)
 8021cd2:	8b9b      	ldrh	r3, [r3, #28]
 8021cd4:	2b01      	cmp	r3, #1
 8021cd6:	d101      	bne.n	8021cdc <ThreadMainTask+0x16e4>
		{
			case(1):

				NVIC_SystemReset();
 8021cd8:	f7fe fc78 	bl	80205cc <__NVIC_SystemReset>

		}

*/

		if(control_registers.lighting_switching_reg == LIGHTING_ON) // если функция освещения включена
 8021cdc:	4b80      	ldr	r3, [pc, #512]	; (8021ee0 <ThreadMainTask+0x18e8>)
 8021cde:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8021ce2:	2b01      	cmp	r3, #1
 8021ce4:	d12d      	bne.n	8021d42 <ThreadMainTask+0x174a>
		{
			switch(control_registers.lighting_alarm_reset_reg)
 8021ce6:	4b7e      	ldr	r3, [pc, #504]	; (8021ee0 <ThreadMainTask+0x18e8>)
 8021ce8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8021cec:	2b01      	cmp	r3, #1
 8021cee:	d129      	bne.n	8021d44 <ThreadMainTask+0x174c>
			{
				case(1):
					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8021cf0:	4b79      	ldr	r3, [pc, #484]	; (8021ed8 <ThreadMainTask+0x18e0>)
 8021cf2:	681b      	ldr	r3, [r3, #0]
 8021cf4:	f04f 31ff 	mov.w	r1, #4294967295
 8021cf8:	4618      	mov	r0, r3
 8021cfa:	f7f7 fad5 	bl	80192a8 <osMutexWait>
					fm25v02_write(2*LIGHTING_ALARM_RESET_REG, 0x00);
 8021cfe:	2100      	movs	r1, #0
 8021d00:	f242 1084 	movw	r0, #8580	; 0x2184
 8021d04:	f008 fec2 	bl	802aa8c <fm25v02_write>
					fm25v02_write(2*LIGHTING_ALARM_RESET_REG+1, 0x00);
 8021d08:	2100      	movs	r1, #0
 8021d0a:	f242 1085 	movw	r0, #8581	; 0x2185
 8021d0e:	f008 febd 	bl	802aa8c <fm25v02_write>
					control_registers.lighting_alarm_reset_reg = 0x00;
 8021d12:	4b73      	ldr	r3, [pc, #460]	; (8021ee0 <ThreadMainTask+0x18e8>)
 8021d14:	2200      	movs	r2, #0
 8021d16:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
					fm25v02_write(2*LIGHTING_ALARM_REG, 0x00);
 8021d1a:	2100      	movs	r1, #0
 8021d1c:	f242 0064 	movw	r0, #8292	; 0x2064
 8021d20:	f008 feb4 	bl	802aa8c <fm25v02_write>
					fm25v02_write(2*LIGHTING_ALARM_REG+1, 0x00);
 8021d24:	2100      	movs	r1, #0
 8021d26:	f242 0065 	movw	r0, #8293	; 0x2065
 8021d2a:	f008 feaf 	bl	802aa8c <fm25v02_write>
					status_registers.lighting_alarm_reg = 0x00;
 8021d2e:	4b6e      	ldr	r3, [pc, #440]	; (8021ee8 <ThreadMainTask+0x18f0>)
 8021d30:	2200      	movs	r2, #0
 8021d32:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
					osMutexRelease(Fm25v02MutexHandle);
 8021d36:	4b68      	ldr	r3, [pc, #416]	; (8021ed8 <ThreadMainTask+0x18e0>)
 8021d38:	681b      	ldr	r3, [r3, #0]
 8021d3a:	4618      	mov	r0, r3
 8021d3c:	f7f7 fb02 	bl	8019344 <osMutexRelease>
				break;
 8021d40:	e000      	b.n	8021d44 <ThreadMainTask+0x174c>
			}
		}
 8021d42:	bf00      	nop

		if(1)
		{
			osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8021d44:	4b64      	ldr	r3, [pc, #400]	; (8021ed8 <ThreadMainTask+0x18e0>)
 8021d46:	681b      	ldr	r3, [r3, #0]
 8021d48:	f04f 31ff 	mov.w	r1, #4294967295
 8021d4c:	4618      	mov	r0, r3
 8021d4e:	f7f7 faab 	bl	80192a8 <osMutexWait>
			fm25v02_write(2*CURRENT_PHASE_A_REG, (uint8_t)((cur_a>>8)&0x00FF) );
 8021d52:	4b66      	ldr	r3, [pc, #408]	; (8021eec <ThreadMainTask+0x18f4>)
 8021d54:	681b      	ldr	r3, [r3, #0]
 8021d56:	0a1b      	lsrs	r3, r3, #8
 8021d58:	b2db      	uxtb	r3, r3
 8021d5a:	4619      	mov	r1, r3
 8021d5c:	f242 0076 	movw	r0, #8310	; 0x2076
 8021d60:	f008 fe94 	bl	802aa8c <fm25v02_write>
			fm25v02_write(2*CURRENT_PHASE_A_REG+1, (uint8_t)(cur_a&0x00FF) );
 8021d64:	4b61      	ldr	r3, [pc, #388]	; (8021eec <ThreadMainTask+0x18f4>)
 8021d66:	681b      	ldr	r3, [r3, #0]
 8021d68:	b2db      	uxtb	r3, r3
 8021d6a:	4619      	mov	r1, r3
 8021d6c:	f242 0077 	movw	r0, #8311	; 0x2077
 8021d70:	f008 fe8c 	bl	802aa8c <fm25v02_write>
			fm25v02_write(2*CURRENT_PHASE_B_REG, (uint8_t)((cur_b>>8)&0x00FF) );
 8021d74:	4b5e      	ldr	r3, [pc, #376]	; (8021ef0 <ThreadMainTask+0x18f8>)
 8021d76:	681b      	ldr	r3, [r3, #0]
 8021d78:	0a1b      	lsrs	r3, r3, #8
 8021d7a:	b2db      	uxtb	r3, r3
 8021d7c:	4619      	mov	r1, r3
 8021d7e:	f242 0078 	movw	r0, #8312	; 0x2078
 8021d82:	f008 fe83 	bl	802aa8c <fm25v02_write>
			fm25v02_write(2*CURRENT_PHASE_B_REG+1, (uint8_t)(cur_b&0x00FF) );
 8021d86:	4b5a      	ldr	r3, [pc, #360]	; (8021ef0 <ThreadMainTask+0x18f8>)
 8021d88:	681b      	ldr	r3, [r3, #0]
 8021d8a:	b2db      	uxtb	r3, r3
 8021d8c:	4619      	mov	r1, r3
 8021d8e:	f242 0079 	movw	r0, #8313	; 0x2079
 8021d92:	f008 fe7b 	bl	802aa8c <fm25v02_write>
			fm25v02_write(2*CURRENT_PHASE_C_REG, (uint8_t)((cur_c>>8)&0x00FF) );
 8021d96:	4b57      	ldr	r3, [pc, #348]	; (8021ef4 <ThreadMainTask+0x18fc>)
 8021d98:	681b      	ldr	r3, [r3, #0]
 8021d9a:	0a1b      	lsrs	r3, r3, #8
 8021d9c:	b2db      	uxtb	r3, r3
 8021d9e:	4619      	mov	r1, r3
 8021da0:	f242 007a 	movw	r0, #8314	; 0x207a
 8021da4:	f008 fe72 	bl	802aa8c <fm25v02_write>
			fm25v02_write(2*CURRENT_PHASE_C_REG+1, (uint8_t)(cur_c&0x00FF) );
 8021da8:	4b52      	ldr	r3, [pc, #328]	; (8021ef4 <ThreadMainTask+0x18fc>)
 8021daa:	681b      	ldr	r3, [r3, #0]
 8021dac:	b2db      	uxtb	r3, r3
 8021dae:	4619      	mov	r1, r3
 8021db0:	f242 007b 	movw	r0, #8315	; 0x207b
 8021db4:	f008 fe6a 	bl	802aa8c <fm25v02_write>
			osMutexRelease(Fm25v02MutexHandle);
 8021db8:	4b47      	ldr	r3, [pc, #284]	; (8021ed8 <ThreadMainTask+0x18e0>)
 8021dba:	681b      	ldr	r3, [r3, #0]
 8021dbc:	4618      	mov	r0, r3
 8021dbe:	f7f7 fac1 	bl	8019344 <osMutexRelease>

			status_registers.current_phase_a_reg = cur_a;
 8021dc2:	4b4a      	ldr	r3, [pc, #296]	; (8021eec <ThreadMainTask+0x18f4>)
 8021dc4:	681b      	ldr	r3, [r3, #0]
 8021dc6:	b29a      	uxth	r2, r3
 8021dc8:	4b47      	ldr	r3, [pc, #284]	; (8021ee8 <ThreadMainTask+0x18f0>)
 8021dca:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
			status_registers.current_phase_b_reg = cur_b;
 8021dce:	4b48      	ldr	r3, [pc, #288]	; (8021ef0 <ThreadMainTask+0x18f8>)
 8021dd0:	681b      	ldr	r3, [r3, #0]
 8021dd2:	b29a      	uxth	r2, r3
 8021dd4:	4b44      	ldr	r3, [pc, #272]	; (8021ee8 <ThreadMainTask+0x18f0>)
 8021dd6:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
			status_registers.current_phase_c_reg = cur_c;
 8021dda:	4b46      	ldr	r3, [pc, #280]	; (8021ef4 <ThreadMainTask+0x18fc>)
 8021ddc:	681b      	ldr	r3, [r3, #0]
 8021dde:	b29a      	uxth	r2, r3
 8021de0:	4b41      	ldr	r3, [pc, #260]	; (8021ee8 <ThreadMainTask+0x18f0>)
 8021de2:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
		}

		if(1)
		{
			if( TSL2561_getID(&sensor_id) == true)
 8021de6:	4844      	ldr	r0, [pc, #272]	; (8021ef8 <ThreadMainTask+0x1900>)
 8021de8:	f00c f952 	bl	802e090 <TSL2561_getID>
 8021dec:	4603      	mov	r3, r0
 8021dee:	2b00      	cmp	r3, #0
 8021df0:	d03b      	beq.n	8021e6a <ThreadMainTask+0x1872>
			{
				//TSL2561_setPowerDown();
				//HAL_Delay(1000);
				//while( TSL2561_getID(&sensor_id) == true){}
				d_state2 = TSL2561_setTiming_ms(gain, time,&ms);
 8021df2:	4b42      	ldr	r3, [pc, #264]	; (8021efc <ThreadMainTask+0x1904>)
 8021df4:	781b      	ldrb	r3, [r3, #0]
 8021df6:	4a42      	ldr	r2, [pc, #264]	; (8021f00 <ThreadMainTask+0x1908>)
 8021df8:	7811      	ldrb	r1, [r2, #0]
 8021dfa:	4a42      	ldr	r2, [pc, #264]	; (8021f04 <ThreadMainTask+0x190c>)
 8021dfc:	4618      	mov	r0, r3
 8021dfe:	f00b ff8a 	bl	802dd16 <TSL2561_setTiming_ms>
 8021e02:	4603      	mov	r3, r0
 8021e04:	461a      	mov	r2, r3
 8021e06:	4b40      	ldr	r3, [pc, #256]	; (8021f08 <ThreadMainTask+0x1910>)
 8021e08:	701a      	strb	r2, [r3, #0]
				TSL2561_setPowerUp();
 8021e0a:	f00b ff3d 	bl	802dc88 <TSL2561_setPowerUp>
				//HAL_Delay(1000);
				//while( TSL2561_getID(&sensor_id) == false){}
				d_state1 = TSL2561_getData(&data0, &data2);
 8021e0e:	493f      	ldr	r1, [pc, #252]	; (8021f0c <ThreadMainTask+0x1914>)
 8021e10:	483f      	ldr	r0, [pc, #252]	; (8021f10 <ThreadMainTask+0x1918>)
 8021e12:	f00b ffad 	bl	802dd70 <TSL2561_getData>
 8021e16:	4603      	mov	r3, r0
 8021e18:	461a      	mov	r2, r3
 8021e1a:	4b3e      	ldr	r3, [pc, #248]	; (8021f14 <ThreadMainTask+0x191c>)
 8021e1c:	701a      	strb	r2, [r3, #0]
				if( TSL2561_getLux(gain, ms, data0, data2, &lux) == 1)
 8021e1e:	4b37      	ldr	r3, [pc, #220]	; (8021efc <ThreadMainTask+0x1904>)
 8021e20:	781b      	ldrb	r3, [r3, #0]
 8021e22:	461c      	mov	r4, r3
 8021e24:	4b37      	ldr	r3, [pc, #220]	; (8021f04 <ThreadMainTask+0x190c>)
 8021e26:	6819      	ldr	r1, [r3, #0]
 8021e28:	4b39      	ldr	r3, [pc, #228]	; (8021f10 <ThreadMainTask+0x1918>)
 8021e2a:	681a      	ldr	r2, [r3, #0]
 8021e2c:	4b37      	ldr	r3, [pc, #220]	; (8021f0c <ThreadMainTask+0x1914>)
 8021e2e:	681b      	ldr	r3, [r3, #0]
 8021e30:	4839      	ldr	r0, [pc, #228]	; (8021f18 <ThreadMainTask+0x1920>)
 8021e32:	9000      	str	r0, [sp, #0]
 8021e34:	4620      	mov	r0, r4
 8021e36:	f00b ffbb 	bl	802ddb0 <TSL2561_getLux>
 8021e3a:	4603      	mov	r3, r0
 8021e3c:	2b00      	cmp	r3, #0
 8021e3e:	d00d      	beq.n	8021e5c <ThreadMainTask+0x1864>
				{
					data_lux = lux/1.8;
 8021e40:	4b35      	ldr	r3, [pc, #212]	; (8021f18 <ThreadMainTask+0x1920>)
 8021e42:	e9d3 0100 	ldrd	r0, r1, [r3]
 8021e46:	a320      	add	r3, pc, #128	; (adr r3, 8021ec8 <ThreadMainTask+0x18d0>)
 8021e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021e4c:	f7ee fcfe 	bl	801084c <__aeabi_ddiv>
 8021e50:	4602      	mov	r2, r0
 8021e52:	460b      	mov	r3, r1
 8021e54:	4931      	ldr	r1, [pc, #196]	; (8021f1c <ThreadMainTask+0x1924>)
 8021e56:	e9c1 2300 	strd	r2, r3, [r1]
 8021e5a:	e00c      	b.n	8021e76 <ThreadMainTask+0x187e>
					//data_lux = 2000;
				}
				else
				{
					data_lux = 40000;
 8021e5c:	492f      	ldr	r1, [pc, #188]	; (8021f1c <ThreadMainTask+0x1924>)
 8021e5e:	a31c      	add	r3, pc, #112	; (adr r3, 8021ed0 <ThreadMainTask+0x18d8>)
 8021e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021e64:	e9c1 2300 	strd	r2, r3, [r1]
 8021e68:	e005      	b.n	8021e76 <ThreadMainTask+0x187e>
				}

			}
			else
			{
				HAL_I2C_DeInit(&hi2c1);
 8021e6a:	482d      	ldr	r0, [pc, #180]	; (8021f20 <ThreadMainTask+0x1928>)
 8021e6c:	f7f2 fe88 	bl	8014b80 <HAL_I2C_DeInit>
				HAL_I2C_Init(&hi2c1);
 8021e70:	482b      	ldr	r0, [pc, #172]	; (8021f20 <ThreadMainTask+0x1928>)
 8021e72:	f7f2 fd41 	bl	80148f8 <HAL_I2C_Init>
			}


		}

		if( ((control_registers.light_control_reg)&0x0040) == 0x0040 ) // если включено управление по датчику освещенности
 8021e76:	4b1a      	ldr	r3, [pc, #104]	; (8021ee0 <ThreadMainTask+0x18e8>)
 8021e78:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8021e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8021e80:	2b00      	cmp	r3, #0
 8021e82:	f000 8202 	beq.w	802228a <ThreadMainTask+0x1c92>
		{
			if( data_lux > control_registers.lighting_threshold_off_reg )
 8021e86:	4b16      	ldr	r3, [pc, #88]	; (8021ee0 <ThreadMainTask+0x18e8>)
 8021e88:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8021e8c:	4618      	mov	r0, r3
 8021e8e:	f7ee fb49 	bl	8010524 <__aeabi_i2d>
 8021e92:	4b22      	ldr	r3, [pc, #136]	; (8021f1c <ThreadMainTask+0x1924>)
 8021e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021e98:	f7ee fe20 	bl	8010adc <__aeabi_dcmplt>
 8021e9c:	4603      	mov	r3, r0
 8021e9e:	2b00      	cmp	r3, #0
 8021ea0:	f000 80f5 	beq.w	802208e <ThreadMainTask+0x1a96>
			{
				//time_on_counter = 0;

				if(time_off_counter < control_registers.delay_off_sensor_reg)
 8021ea4:	4b0e      	ldr	r3, [pc, #56]	; (8021ee0 <ThreadMainTask+0x18e8>)
 8021ea6:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 8021eaa:	4b1e      	ldr	r3, [pc, #120]	; (8021f24 <ThreadMainTask+0x192c>)
 8021eac:	881b      	ldrh	r3, [r3, #0]
 8021eae:	b29b      	uxth	r3, r3
 8021eb0:	429a      	cmp	r2, r3
 8021eb2:	d939      	bls.n	8021f28 <ThreadMainTask+0x1930>
				{
					time_off_counter++;
 8021eb4:	4b1b      	ldr	r3, [pc, #108]	; (8021f24 <ThreadMainTask+0x192c>)
 8021eb6:	881b      	ldrh	r3, [r3, #0]
 8021eb8:	b29b      	uxth	r3, r3
 8021eba:	3301      	adds	r3, #1
 8021ebc:	b29a      	uxth	r2, r3
 8021ebe:	4b19      	ldr	r3, [pc, #100]	; (8021f24 <ThreadMainTask+0x192c>)
 8021ec0:	801a      	strh	r2, [r3, #0]
 8021ec2:	e0f5      	b.n	80220b0 <ThreadMainTask+0x1ab8>
 8021ec4:	f3af 8000 	nop.w
 8021ec8:	cccccccd 	.word	0xcccccccd
 8021ecc:	3ffccccc 	.word	0x3ffccccc
 8021ed0:	00000000 	.word	0x00000000
 8021ed4:	40e38800 	.word	0x40e38800
 8021ed8:	20009bb8 	.word	0x20009bb8
 8021edc:	20009718 	.word	0x20009718
 8021ee0:	2000b000 	.word	0x2000b000
 8021ee4:	2000a284 	.word	0x2000a284
 8021ee8:	2000af40 	.word	0x2000af40
 8021eec:	20009710 	.word	0x20009710
 8021ef0:	20009cc0 	.word	0x20009cc0
 8021ef4:	20009a00 	.word	0x20009a00
 8021ef8:	2000a066 	.word	0x2000a066
 8021efc:	20000876 	.word	0x20000876
 8021f00:	20000000 	.word	0x20000000
 8021f04:	20009720 	.word	0x20009720
 8021f08:	2000a045 	.word	0x2000a045
 8021f0c:	20008258 	.word	0x20008258
 8021f10:	20009b94 	.word	0x20009b94
 8021f14:	2000a049 	.word	0x2000a049
 8021f18:	200099f8 	.word	0x200099f8
 8021f1c:	20009e50 	.word	0x20009e50
 8021f20:	200082a4 	.word	0x200082a4
 8021f24:	2000802c 	.word	0x2000802c
				}
				else if(time_off_counter == control_registers.delay_off_sensor_reg)
 8021f28:	4bab      	ldr	r3, [pc, #684]	; (80221d8 <ThreadMainTask+0x1be0>)
 8021f2a:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 8021f2e:	4bab      	ldr	r3, [pc, #684]	; (80221dc <ThreadMainTask+0x1be4>)
 8021f30:	881b      	ldrh	r3, [r3, #0]
 8021f32:	b29b      	uxth	r3, r3
 8021f34:	429a      	cmp	r2, r3
 8021f36:	f040 80bb 	bne.w	80220b0 <ThreadMainTask+0x1ab8>
				{
					time_off_counter++;
 8021f3a:	4ba8      	ldr	r3, [pc, #672]	; (80221dc <ThreadMainTask+0x1be4>)
 8021f3c:	881b      	ldrh	r3, [r3, #0]
 8021f3e:	b29b      	uxth	r3, r3
 8021f40:	3301      	adds	r3, #1
 8021f42:	b29a      	uxth	r2, r3
 8021f44:	4ba5      	ldr	r3, [pc, #660]	; (80221dc <ThreadMainTask+0x1be4>)
 8021f46:	801a      	strh	r2, [r3, #0]
					//time_on_counter = 0;

					if(((control_registers.light_control_reg)&0x0001)==0x0001) // если включена фаза А, выключаем фазу А
 8021f48:	4ba3      	ldr	r3, [pc, #652]	; (80221d8 <ThreadMainTask+0x1be0>)
 8021f4a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8021f4e:	f003 0301 	and.w	r3, r3, #1
 8021f52:	2b00      	cmp	r3, #0
 8021f54:	d027      	beq.n	8021fa6 <ThreadMainTask+0x19ae>
					{
						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8021f56:	4ba2      	ldr	r3, [pc, #648]	; (80221e0 <ThreadMainTask+0x1be8>)
 8021f58:	681b      	ldr	r3, [r3, #0]
 8021f5a:	f04f 31ff 	mov.w	r1, #4294967295
 8021f5e:	4618      	mov	r0, r3
 8021f60:	f7f7 f9a2 	bl	80192a8 <osMutexWait>
						fm25v02_read(2*LIGHT_CONTROL_REG+1, &temp);
 8021f64:	f107 030f 	add.w	r3, r7, #15
 8021f68:	4619      	mov	r1, r3
 8021f6a:	f242 1083 	movw	r0, #8579	; 0x2183
 8021f6e:	f008 fd53 	bl	802aa18 <fm25v02_read>
						temp = temp&0xFE;
 8021f72:	7bfb      	ldrb	r3, [r7, #15]
 8021f74:	f023 0301 	bic.w	r3, r3, #1
 8021f78:	b2db      	uxtb	r3, r3
 8021f7a:	73fb      	strb	r3, [r7, #15]
						fm25v02_write(2*LIGHT_CONTROL_REG+1, temp);
 8021f7c:	7bfb      	ldrb	r3, [r7, #15]
 8021f7e:	4619      	mov	r1, r3
 8021f80:	f242 1083 	movw	r0, #8579	; 0x2183
 8021f84:	f008 fd82 	bl	802aa8c <fm25v02_write>
						control_registers.light_control_reg = control_registers.light_control_reg&0xFFFE;
 8021f88:	4b93      	ldr	r3, [pc, #588]	; (80221d8 <ThreadMainTask+0x1be0>)
 8021f8a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8021f8e:	f023 0301 	bic.w	r3, r3, #1
 8021f92:	b29a      	uxth	r2, r3
 8021f94:	4b90      	ldr	r3, [pc, #576]	; (80221d8 <ThreadMainTask+0x1be0>)
 8021f96:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
						osMutexRelease(Fm25v02MutexHandle);
 8021f9a:	4b91      	ldr	r3, [pc, #580]	; (80221e0 <ThreadMainTask+0x1be8>)
 8021f9c:	681b      	ldr	r3, [r3, #0]
 8021f9e:	4618      	mov	r0, r3
 8021fa0:	f7f7 f9d0 	bl	8019344 <osMutexRelease>
 8021fa4:	e006      	b.n	8021fb4 <ThreadMainTask+0x19bc>
					}
					else
					{
						time_on_counter = (control_registers.delay_on_sensor_reg + 1);
 8021fa6:	4b8c      	ldr	r3, [pc, #560]	; (80221d8 <ThreadMainTask+0x1be0>)
 8021fa8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8021fac:	3301      	adds	r3, #1
 8021fae:	b29a      	uxth	r2, r3
 8021fb0:	4b8c      	ldr	r3, [pc, #560]	; (80221e4 <ThreadMainTask+0x1bec>)
 8021fb2:	801a      	strh	r2, [r3, #0]
					}
					if(((control_registers.light_control_reg)&0x0002)==0x0002) // если включена фаза В, выключаем фазу В
 8021fb4:	4b88      	ldr	r3, [pc, #544]	; (80221d8 <ThreadMainTask+0x1be0>)
 8021fb6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8021fba:	f003 0302 	and.w	r3, r3, #2
 8021fbe:	2b00      	cmp	r3, #0
 8021fc0:	d027      	beq.n	8022012 <ThreadMainTask+0x1a1a>
					{
						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8021fc2:	4b87      	ldr	r3, [pc, #540]	; (80221e0 <ThreadMainTask+0x1be8>)
 8021fc4:	681b      	ldr	r3, [r3, #0]
 8021fc6:	f04f 31ff 	mov.w	r1, #4294967295
 8021fca:	4618      	mov	r0, r3
 8021fcc:	f7f7 f96c 	bl	80192a8 <osMutexWait>
						fm25v02_read(2*LIGHT_CONTROL_REG+1, &temp);
 8021fd0:	f107 030f 	add.w	r3, r7, #15
 8021fd4:	4619      	mov	r1, r3
 8021fd6:	f242 1083 	movw	r0, #8579	; 0x2183
 8021fda:	f008 fd1d 	bl	802aa18 <fm25v02_read>
						temp = temp&0xFD;
 8021fde:	7bfb      	ldrb	r3, [r7, #15]
 8021fe0:	f023 0302 	bic.w	r3, r3, #2
 8021fe4:	b2db      	uxtb	r3, r3
 8021fe6:	73fb      	strb	r3, [r7, #15]
						fm25v02_write(2*LIGHT_CONTROL_REG+1, temp);
 8021fe8:	7bfb      	ldrb	r3, [r7, #15]
 8021fea:	4619      	mov	r1, r3
 8021fec:	f242 1083 	movw	r0, #8579	; 0x2183
 8021ff0:	f008 fd4c 	bl	802aa8c <fm25v02_write>
						control_registers.light_control_reg = control_registers.light_control_reg&0xFFFD;
 8021ff4:	4b78      	ldr	r3, [pc, #480]	; (80221d8 <ThreadMainTask+0x1be0>)
 8021ff6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8021ffa:	f023 0302 	bic.w	r3, r3, #2
 8021ffe:	b29a      	uxth	r2, r3
 8022000:	4b75      	ldr	r3, [pc, #468]	; (80221d8 <ThreadMainTask+0x1be0>)
 8022002:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
						osMutexRelease(Fm25v02MutexHandle);
 8022006:	4b76      	ldr	r3, [pc, #472]	; (80221e0 <ThreadMainTask+0x1be8>)
 8022008:	681b      	ldr	r3, [r3, #0]
 802200a:	4618      	mov	r0, r3
 802200c:	f7f7 f99a 	bl	8019344 <osMutexRelease>
 8022010:	e006      	b.n	8022020 <ThreadMainTask+0x1a28>
					}
					else
					{
						time_on_counter = (control_registers.delay_on_sensor_reg + 1);
 8022012:	4b71      	ldr	r3, [pc, #452]	; (80221d8 <ThreadMainTask+0x1be0>)
 8022014:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8022018:	3301      	adds	r3, #1
 802201a:	b29a      	uxth	r2, r3
 802201c:	4b71      	ldr	r3, [pc, #452]	; (80221e4 <ThreadMainTask+0x1bec>)
 802201e:	801a      	strh	r2, [r3, #0]
					}
					if(((control_registers.light_control_reg)&0x0004)==0x0004) // если включена фаза С, выключаем фазу С
 8022020:	4b6d      	ldr	r3, [pc, #436]	; (80221d8 <ThreadMainTask+0x1be0>)
 8022022:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8022026:	f003 0304 	and.w	r3, r3, #4
 802202a:	2b00      	cmp	r3, #0
 802202c:	d027      	beq.n	802207e <ThreadMainTask+0x1a86>
					{
						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 802202e:	4b6c      	ldr	r3, [pc, #432]	; (80221e0 <ThreadMainTask+0x1be8>)
 8022030:	681b      	ldr	r3, [r3, #0]
 8022032:	f04f 31ff 	mov.w	r1, #4294967295
 8022036:	4618      	mov	r0, r3
 8022038:	f7f7 f936 	bl	80192a8 <osMutexWait>
						fm25v02_read(2*LIGHT_CONTROL_REG+1, &temp);
 802203c:	f107 030f 	add.w	r3, r7, #15
 8022040:	4619      	mov	r1, r3
 8022042:	f242 1083 	movw	r0, #8579	; 0x2183
 8022046:	f008 fce7 	bl	802aa18 <fm25v02_read>
						temp = temp&0xFB;
 802204a:	7bfb      	ldrb	r3, [r7, #15]
 802204c:	f023 0304 	bic.w	r3, r3, #4
 8022050:	b2db      	uxtb	r3, r3
 8022052:	73fb      	strb	r3, [r7, #15]
						fm25v02_write(2*LIGHT_CONTROL_REG+1, temp);
 8022054:	7bfb      	ldrb	r3, [r7, #15]
 8022056:	4619      	mov	r1, r3
 8022058:	f242 1083 	movw	r0, #8579	; 0x2183
 802205c:	f008 fd16 	bl	802aa8c <fm25v02_write>
						control_registers.light_control_reg = control_registers.light_control_reg|0xFFFB;
 8022060:	4b5d      	ldr	r3, [pc, #372]	; (80221d8 <ThreadMainTask+0x1be0>)
 8022062:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8022066:	f063 0304 	orn	r3, r3, #4
 802206a:	b29a      	uxth	r2, r3
 802206c:	4b5a      	ldr	r3, [pc, #360]	; (80221d8 <ThreadMainTask+0x1be0>)
 802206e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
						osMutexRelease(Fm25v02MutexHandle);
 8022072:	4b5b      	ldr	r3, [pc, #364]	; (80221e0 <ThreadMainTask+0x1be8>)
 8022074:	681b      	ldr	r3, [r3, #0]
 8022076:	4618      	mov	r0, r3
 8022078:	f7f7 f964 	bl	8019344 <osMutexRelease>
 802207c:	e018      	b.n	80220b0 <ThreadMainTask+0x1ab8>
					}
					else
					{
						time_on_counter = (control_registers.delay_on_sensor_reg + 1);
 802207e:	4b56      	ldr	r3, [pc, #344]	; (80221d8 <ThreadMainTask+0x1be0>)
 8022080:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8022084:	3301      	adds	r3, #1
 8022086:	b29a      	uxth	r2, r3
 8022088:	4b56      	ldr	r3, [pc, #344]	; (80221e4 <ThreadMainTask+0x1bec>)
 802208a:	801a      	strh	r2, [r3, #0]
 802208c:	e010      	b.n	80220b0 <ThreadMainTask+0x1ab8>
					}
				}

			}

			else if( data_lux <= control_registers.lighting_threshold_off_reg )
 802208e:	4b52      	ldr	r3, [pc, #328]	; (80221d8 <ThreadMainTask+0x1be0>)
 8022090:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8022094:	4618      	mov	r0, r3
 8022096:	f7ee fa45 	bl	8010524 <__aeabi_i2d>
 802209a:	4b53      	ldr	r3, [pc, #332]	; (80221e8 <ThreadMainTask+0x1bf0>)
 802209c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80220a0:	f7ee fd30 	bl	8010b04 <__aeabi_dcmpge>
 80220a4:	4603      	mov	r3, r0
 80220a6:	2b00      	cmp	r3, #0
 80220a8:	d002      	beq.n	80220b0 <ThreadMainTask+0x1ab8>
			{
				time_off_counter = 0;
 80220aa:	4b4c      	ldr	r3, [pc, #304]	; (80221dc <ThreadMainTask+0x1be4>)
 80220ac:	2200      	movs	r2, #0
 80220ae:	801a      	strh	r2, [r3, #0]
				//{
					//time_on_counter = 0;
				//}
			}

			if( data_lux < control_registers.lighting_threshold_on_reg )
 80220b0:	4b49      	ldr	r3, [pc, #292]	; (80221d8 <ThreadMainTask+0x1be0>)
 80220b2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80220b6:	4618      	mov	r0, r3
 80220b8:	f7ee fa34 	bl	8010524 <__aeabi_i2d>
 80220bc:	4b4a      	ldr	r3, [pc, #296]	; (80221e8 <ThreadMainTask+0x1bf0>)
 80220be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80220c2:	f7ee fd29 	bl	8010b18 <__aeabi_dcmpgt>
 80220c6:	4603      	mov	r3, r0
 80220c8:	2b00      	cmp	r3, #0
 80220ca:	f000 80cd 	beq.w	8022268 <ThreadMainTask+0x1c70>
			{
				//time_off_counter = 0;

				if(time_on_counter < control_registers.delay_on_sensor_reg)
 80220ce:	4b42      	ldr	r3, [pc, #264]	; (80221d8 <ThreadMainTask+0x1be0>)
 80220d0:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80220d4:	4b43      	ldr	r3, [pc, #268]	; (80221e4 <ThreadMainTask+0x1bec>)
 80220d6:	881b      	ldrh	r3, [r3, #0]
 80220d8:	b29b      	uxth	r3, r3
 80220da:	429a      	cmp	r2, r3
 80220dc:	d907      	bls.n	80220ee <ThreadMainTask+0x1af6>
				{
					time_on_counter++;
 80220de:	4b41      	ldr	r3, [pc, #260]	; (80221e4 <ThreadMainTask+0x1bec>)
 80220e0:	881b      	ldrh	r3, [r3, #0]
 80220e2:	b29b      	uxth	r3, r3
 80220e4:	3301      	adds	r3, #1
 80220e6:	b29a      	uxth	r2, r3
 80220e8:	4b3e      	ldr	r3, [pc, #248]	; (80221e4 <ThreadMainTask+0x1bec>)
 80220ea:	801a      	strh	r2, [r3, #0]
 80220ec:	e0cd      	b.n	802228a <ThreadMainTask+0x1c92>
				}
				else if( time_on_counter == control_registers.delay_on_sensor_reg )
 80220ee:	4b3a      	ldr	r3, [pc, #232]	; (80221d8 <ThreadMainTask+0x1be0>)
 80220f0:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80220f4:	4b3b      	ldr	r3, [pc, #236]	; (80221e4 <ThreadMainTask+0x1bec>)
 80220f6:	881b      	ldrh	r3, [r3, #0]
 80220f8:	b29b      	uxth	r3, r3
 80220fa:	429a      	cmp	r2, r3
 80220fc:	f040 80c5 	bne.w	802228a <ThreadMainTask+0x1c92>
				{
					time_on_counter++;
 8022100:	4b38      	ldr	r3, [pc, #224]	; (80221e4 <ThreadMainTask+0x1bec>)
 8022102:	881b      	ldrh	r3, [r3, #0]
 8022104:	b29b      	uxth	r3, r3
 8022106:	3301      	adds	r3, #1
 8022108:	b29a      	uxth	r2, r3
 802210a:	4b36      	ldr	r3, [pc, #216]	; (80221e4 <ThreadMainTask+0x1bec>)
 802210c:	801a      	strh	r2, [r3, #0]
					//time_off_counter = 0;

					if(((control_registers.light_control_reg)&0x0001)==0x0000) // если выключена фаза А, включаем фазу А
 802210e:	4b32      	ldr	r3, [pc, #200]	; (80221d8 <ThreadMainTask+0x1be0>)
 8022110:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8022114:	f003 0301 	and.w	r3, r3, #1
 8022118:	2b00      	cmp	r3, #0
 802211a:	d127      	bne.n	802216c <ThreadMainTask+0x1b74>
					{
						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 802211c:	4b30      	ldr	r3, [pc, #192]	; (80221e0 <ThreadMainTask+0x1be8>)
 802211e:	681b      	ldr	r3, [r3, #0]
 8022120:	f04f 31ff 	mov.w	r1, #4294967295
 8022124:	4618      	mov	r0, r3
 8022126:	f7f7 f8bf 	bl	80192a8 <osMutexWait>
						fm25v02_read(2*LIGHT_CONTROL_REG+1, &temp);
 802212a:	f107 030f 	add.w	r3, r7, #15
 802212e:	4619      	mov	r1, r3
 8022130:	f242 1083 	movw	r0, #8579	; 0x2183
 8022134:	f008 fc70 	bl	802aa18 <fm25v02_read>
						temp = temp|0x01;
 8022138:	7bfb      	ldrb	r3, [r7, #15]
 802213a:	f043 0301 	orr.w	r3, r3, #1
 802213e:	b2db      	uxtb	r3, r3
 8022140:	73fb      	strb	r3, [r7, #15]
						fm25v02_write(2*LIGHT_CONTROL_REG+1, temp);
 8022142:	7bfb      	ldrb	r3, [r7, #15]
 8022144:	4619      	mov	r1, r3
 8022146:	f242 1083 	movw	r0, #8579	; 0x2183
 802214a:	f008 fc9f 	bl	802aa8c <fm25v02_write>
						control_registers.light_control_reg = control_registers.light_control_reg|0x0001;
 802214e:	4b22      	ldr	r3, [pc, #136]	; (80221d8 <ThreadMainTask+0x1be0>)
 8022150:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8022154:	f043 0301 	orr.w	r3, r3, #1
 8022158:	b29a      	uxth	r2, r3
 802215a:	4b1f      	ldr	r3, [pc, #124]	; (80221d8 <ThreadMainTask+0x1be0>)
 802215c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
						osMutexRelease(Fm25v02MutexHandle);
 8022160:	4b1f      	ldr	r3, [pc, #124]	; (80221e0 <ThreadMainTask+0x1be8>)
 8022162:	681b      	ldr	r3, [r3, #0]
 8022164:	4618      	mov	r0, r3
 8022166:	f7f7 f8ed 	bl	8019344 <osMutexRelease>
 802216a:	e006      	b.n	802217a <ThreadMainTask+0x1b82>
					}
					else
					{
						time_off_counter = (control_registers.delay_off_sensor_reg + 1);
 802216c:	4b1a      	ldr	r3, [pc, #104]	; (80221d8 <ThreadMainTask+0x1be0>)
 802216e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8022172:	3301      	adds	r3, #1
 8022174:	b29a      	uxth	r2, r3
 8022176:	4b19      	ldr	r3, [pc, #100]	; (80221dc <ThreadMainTask+0x1be4>)
 8022178:	801a      	strh	r2, [r3, #0]
					}
					if(((control_registers.light_control_reg)&0x0002)==0x0000) // если выключена фаза В, включаем фазу В
 802217a:	4b17      	ldr	r3, [pc, #92]	; (80221d8 <ThreadMainTask+0x1be0>)
 802217c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8022180:	f003 0302 	and.w	r3, r3, #2
 8022184:	2b00      	cmp	r3, #0
 8022186:	d131      	bne.n	80221ec <ThreadMainTask+0x1bf4>
					{
						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8022188:	4b15      	ldr	r3, [pc, #84]	; (80221e0 <ThreadMainTask+0x1be8>)
 802218a:	681b      	ldr	r3, [r3, #0]
 802218c:	f04f 31ff 	mov.w	r1, #4294967295
 8022190:	4618      	mov	r0, r3
 8022192:	f7f7 f889 	bl	80192a8 <osMutexWait>
						fm25v02_read(2*LIGHT_CONTROL_REG+1, &temp);
 8022196:	f107 030f 	add.w	r3, r7, #15
 802219a:	4619      	mov	r1, r3
 802219c:	f242 1083 	movw	r0, #8579	; 0x2183
 80221a0:	f008 fc3a 	bl	802aa18 <fm25v02_read>
						temp = temp|0x02;
 80221a4:	7bfb      	ldrb	r3, [r7, #15]
 80221a6:	f043 0302 	orr.w	r3, r3, #2
 80221aa:	b2db      	uxtb	r3, r3
 80221ac:	73fb      	strb	r3, [r7, #15]
						fm25v02_write(2*LIGHT_CONTROL_REG+1, temp);
 80221ae:	7bfb      	ldrb	r3, [r7, #15]
 80221b0:	4619      	mov	r1, r3
 80221b2:	f242 1083 	movw	r0, #8579	; 0x2183
 80221b6:	f008 fc69 	bl	802aa8c <fm25v02_write>
						control_registers.light_control_reg = control_registers.light_control_reg|0x0002;
 80221ba:	4b07      	ldr	r3, [pc, #28]	; (80221d8 <ThreadMainTask+0x1be0>)
 80221bc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80221c0:	f043 0302 	orr.w	r3, r3, #2
 80221c4:	b29a      	uxth	r2, r3
 80221c6:	4b04      	ldr	r3, [pc, #16]	; (80221d8 <ThreadMainTask+0x1be0>)
 80221c8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
						osMutexRelease(Fm25v02MutexHandle);
 80221cc:	4b04      	ldr	r3, [pc, #16]	; (80221e0 <ThreadMainTask+0x1be8>)
 80221ce:	681b      	ldr	r3, [r3, #0]
 80221d0:	4618      	mov	r0, r3
 80221d2:	f7f7 f8b7 	bl	8019344 <osMutexRelease>
 80221d6:	e010      	b.n	80221fa <ThreadMainTask+0x1c02>
 80221d8:	2000b000 	.word	0x2000b000
 80221dc:	2000802c 	.word	0x2000802c
 80221e0:	20009bb8 	.word	0x20009bb8
 80221e4:	2000802a 	.word	0x2000802a
 80221e8:	20009e50 	.word	0x20009e50
					}
					else
					{
						time_off_counter = (control_registers.delay_off_sensor_reg + 1);
 80221ec:	4b43      	ldr	r3, [pc, #268]	; (80222fc <ThreadMainTask+0x1d04>)
 80221ee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80221f2:	3301      	adds	r3, #1
 80221f4:	b29a      	uxth	r2, r3
 80221f6:	4b42      	ldr	r3, [pc, #264]	; (8022300 <ThreadMainTask+0x1d08>)
 80221f8:	801a      	strh	r2, [r3, #0]
					}
					if(((control_registers.light_control_reg)&0x0004)==0x0000) // если выключена фаза С, включаем фазу С
 80221fa:	4b40      	ldr	r3, [pc, #256]	; (80222fc <ThreadMainTask+0x1d04>)
 80221fc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8022200:	f003 0304 	and.w	r3, r3, #4
 8022204:	2b00      	cmp	r3, #0
 8022206:	d127      	bne.n	8022258 <ThreadMainTask+0x1c60>
					{
						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8022208:	4b3e      	ldr	r3, [pc, #248]	; (8022304 <ThreadMainTask+0x1d0c>)
 802220a:	681b      	ldr	r3, [r3, #0]
 802220c:	f04f 31ff 	mov.w	r1, #4294967295
 8022210:	4618      	mov	r0, r3
 8022212:	f7f7 f849 	bl	80192a8 <osMutexWait>
						fm25v02_read(2*LIGHT_CONTROL_REG+1, &temp);
 8022216:	f107 030f 	add.w	r3, r7, #15
 802221a:	4619      	mov	r1, r3
 802221c:	f242 1083 	movw	r0, #8579	; 0x2183
 8022220:	f008 fbfa 	bl	802aa18 <fm25v02_read>
						temp = temp|0x04;
 8022224:	7bfb      	ldrb	r3, [r7, #15]
 8022226:	f043 0304 	orr.w	r3, r3, #4
 802222a:	b2db      	uxtb	r3, r3
 802222c:	73fb      	strb	r3, [r7, #15]
						fm25v02_write(2*LIGHT_CONTROL_REG+1, temp);
 802222e:	7bfb      	ldrb	r3, [r7, #15]
 8022230:	4619      	mov	r1, r3
 8022232:	f242 1083 	movw	r0, #8579	; 0x2183
 8022236:	f008 fc29 	bl	802aa8c <fm25v02_write>
						control_registers.light_control_reg = control_registers.light_control_reg|0x0004;
 802223a:	4b30      	ldr	r3, [pc, #192]	; (80222fc <ThreadMainTask+0x1d04>)
 802223c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8022240:	f043 0304 	orr.w	r3, r3, #4
 8022244:	b29a      	uxth	r2, r3
 8022246:	4b2d      	ldr	r3, [pc, #180]	; (80222fc <ThreadMainTask+0x1d04>)
 8022248:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
						osMutexRelease(Fm25v02MutexHandle);
 802224c:	4b2d      	ldr	r3, [pc, #180]	; (8022304 <ThreadMainTask+0x1d0c>)
 802224e:	681b      	ldr	r3, [r3, #0]
 8022250:	4618      	mov	r0, r3
 8022252:	f7f7 f877 	bl	8019344 <osMutexRelease>
 8022256:	e018      	b.n	802228a <ThreadMainTask+0x1c92>
					}
					else
					{
						time_off_counter = (control_registers.delay_off_sensor_reg + 1);
 8022258:	4b28      	ldr	r3, [pc, #160]	; (80222fc <ThreadMainTask+0x1d04>)
 802225a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 802225e:	3301      	adds	r3, #1
 8022260:	b29a      	uxth	r2, r3
 8022262:	4b27      	ldr	r3, [pc, #156]	; (8022300 <ThreadMainTask+0x1d08>)
 8022264:	801a      	strh	r2, [r3, #0]
 8022266:	e010      	b.n	802228a <ThreadMainTask+0x1c92>
					}
				}

			}
			else if( data_lux >= control_registers.lighting_threshold_on_reg )
 8022268:	4b24      	ldr	r3, [pc, #144]	; (80222fc <ThreadMainTask+0x1d04>)
 802226a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 802226e:	4618      	mov	r0, r3
 8022270:	f7ee f958 	bl	8010524 <__aeabi_i2d>
 8022274:	4b24      	ldr	r3, [pc, #144]	; (8022308 <ThreadMainTask+0x1d10>)
 8022276:	e9d3 2300 	ldrd	r2, r3, [r3]
 802227a:	f7ee fc39 	bl	8010af0 <__aeabi_dcmple>
 802227e:	4603      	mov	r3, r0
 8022280:	2b00      	cmp	r3, #0
 8022282:	d002      	beq.n	802228a <ThreadMainTask+0x1c92>
			{
				time_on_counter = 0;
 8022284:	4b21      	ldr	r3, [pc, #132]	; (802230c <ThreadMainTask+0x1d14>)
 8022286:	2200      	movs	r2, #0
 8022288:	801a      	strh	r2, [r3, #0]
			}


		}

		if( (((control_registers.light_control_reg)&0x0020)==0x0020) && (((control_registers.light_control_reg)&0x0008)==0x0000) )
 802228a:	4b1c      	ldr	r3, [pc, #112]	; (80222fc <ThreadMainTask+0x1d04>)
 802228c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8022290:	f003 0320 	and.w	r3, r3, #32
 8022294:	2b00      	cmp	r3, #0
 8022296:	d009      	beq.n	80222ac <ThreadMainTask+0x1cb4>
 8022298:	4b18      	ldr	r3, [pc, #96]	; (80222fc <ThreadMainTask+0x1d04>)
 802229a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 802229e:	f003 0308 	and.w	r3, r3, #8
 80222a2:	2b00      	cmp	r3, #0
 80222a4:	d102      	bne.n	80222ac <ThreadMainTask+0x1cb4>
		{
			//schedule_state_on = 1;
			//schedule_state_off = 0;
			LED2_ON();
 80222a6:	f008 fce9 	bl	802ac7c <LED2_ON>
 80222aa:	e020      	b.n	80222ee <ThreadMainTask+0x1cf6>
		}
		else if( (((control_registers.light_control_reg)&0x0020)==0x0000) && (((control_registers.light_control_reg)&0x0008)==0x0000) )
 80222ac:	4b13      	ldr	r3, [pc, #76]	; (80222fc <ThreadMainTask+0x1d04>)
 80222ae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80222b2:	f003 0320 	and.w	r3, r3, #32
 80222b6:	2b00      	cmp	r3, #0
 80222b8:	d109      	bne.n	80222ce <ThreadMainTask+0x1cd6>
 80222ba:	4b10      	ldr	r3, [pc, #64]	; (80222fc <ThreadMainTask+0x1d04>)
 80222bc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80222c0:	f003 0308 	and.w	r3, r3, #8
 80222c4:	2b00      	cmp	r3, #0
 80222c6:	d102      	bne.n	80222ce <ThreadMainTask+0x1cd6>
		{
			//schedule_state_off = 1;
			//schedule_state_on = 0;
			LED2_OFF();
 80222c8:	f008 fccc 	bl	802ac64 <LED2_OFF>
 80222cc:	e00f      	b.n	80222ee <ThreadMainTask+0x1cf6>
		}
		else if( (((control_registers.light_control_reg)&0x0008)==0x0008) && (((control_registers.light_control_reg)&0x0020)==0x0000) )
 80222ce:	4b0b      	ldr	r3, [pc, #44]	; (80222fc <ThreadMainTask+0x1d04>)
 80222d0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80222d4:	f003 0308 	and.w	r3, r3, #8
 80222d8:	2b00      	cmp	r3, #0
 80222da:	d008      	beq.n	80222ee <ThreadMainTask+0x1cf6>
 80222dc:	4b07      	ldr	r3, [pc, #28]	; (80222fc <ThreadMainTask+0x1d04>)
 80222de:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80222e2:	f003 0320 	and.w	r3, r3, #32
 80222e6:	2b00      	cmp	r3, #0
 80222e8:	d101      	bne.n	80222ee <ThreadMainTask+0x1cf6>
		{
			//cascade_state_on = 1;
			//cascade_state_off = 0;
			LED2_TOGGLE();
 80222ea:	f008 fd63 	bl	802adb4 <LED2_TOGGLE>
			//cascade_state_off = 1;
			//cascade_state_on = 0;
			//LED2_OFF();
		//}

		osDelay(500);
 80222ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80222f2:	f7f6 fef8 	bl	80190e6 <osDelay>
		if( HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_0) == GPIO_PIN_SET ) // проверяем если есть наличие единицы на пине PFO микросхемы TPS3306-15
 80222f6:	f7fe b996 	b.w	8020626 <ThreadMainTask+0x2e>
 80222fa:	bf00      	nop
 80222fc:	2000b000 	.word	0x2000b000
 8022300:	2000802c 	.word	0x2000802c
 8022304:	20009bb8 	.word	0x20009bb8
 8022308:	20009e50 	.word	0x20009e50
 802230c:	2000802a 	.word	0x2000802a

08022310 <ThreadMeterTask>:

uint8_t meter_temp;


void ThreadMeterTask(void const * argument)
{
 8022310:	b580      	push	{r7, lr}
 8022312:	b082      	sub	sp, #8
 8022314:	af00      	add	r7, sp, #0
 8022316:	6078      	str	r0, [r7, #4]


	osSemaphoreWait(RS485TransmissionStateHandle, osWaitForever); // обнуляем семафор, при создании семафора его значение равно 1
 8022318:	4b25      	ldr	r3, [pc, #148]	; (80223b0 <ThreadMeterTask+0xa0>)
 802231a:	681b      	ldr	r3, [r3, #0]
 802231c:	f04f 31ff 	mov.w	r1, #4294967295
 8022320:	4618      	mov	r0, r3
 8022322:	f7f7 f877 	bl	8019414 <osSemaphoreWait>

	osMutexWait(Fm25v02MutexHandle, osWaitForever); // тестово обнуляем регистр ошибки опроса счетчика
 8022326:	4b23      	ldr	r3, [pc, #140]	; (80223b4 <ThreadMeterTask+0xa4>)
 8022328:	681b      	ldr	r3, [r3, #0]
 802232a:	f04f 31ff 	mov.w	r1, #4294967295
 802232e:	4618      	mov	r0, r3
 8022330:	f7f6 ffba 	bl	80192a8 <osMutexWait>
	fm25v02_write(2*CE_303_ERROR_REG, 0x00);
 8022334:	2100      	movs	r1, #0
 8022336:	f242 003c 	movw	r0, #8252	; 0x203c
 802233a:	f008 fba7 	bl	802aa8c <fm25v02_write>
	fm25v02_write(2*CE_303_ERROR_REG+1, 0x00);
 802233e:	2100      	movs	r1, #0
 8022340:	f242 003d 	movw	r0, #8253	; 0x203d
 8022344:	f008 fba2 	bl	802aa8c <fm25v02_write>
	osMutexRelease(Fm25v02MutexHandle);
 8022348:	4b1a      	ldr	r3, [pc, #104]	; (80223b4 <ThreadMeterTask+0xa4>)
 802234a:	681b      	ldr	r3, [r3, #0]
 802234c:	4618      	mov	r0, r3
 802234e:	f7f6 fff9 	bl	8019344 <osMutexRelease>



	for(;;)
	{
		if(control_registers.meter_polling_reg == 1)
 8022352:	4b19      	ldr	r3, [pc, #100]	; (80223b8 <ThreadMeterTask+0xa8>)
 8022354:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8022356:	2b01      	cmp	r3, #1
 8022358:	d124      	bne.n	80223a4 <ThreadMeterTask+0x94>
		{
			osMutexWait(Fm25v02MutexHandle, osWaitForever);
 802235a:	4b16      	ldr	r3, [pc, #88]	; (80223b4 <ThreadMeterTask+0xa4>)
 802235c:	681b      	ldr	r3, [r3, #0]
 802235e:	f04f 31ff 	mov.w	r1, #4294967295
 8022362:	4618      	mov	r0, r3
 8022364:	f7f6 ffa0 	bl	80192a8 <osMutexWait>
			fm25v02_read(2*METER_ID_LOW_REG+1, &meter_temp); // вычитываем значение регистра номера счетчика и записываем его в переменную буфера.
 8022368:	4914      	ldr	r1, [pc, #80]	; (80223bc <ThreadMeterTask+0xac>)
 802236a:	f242 106d 	movw	r0, #8557	; 0x216d
 802236e:	f008 fb53 	bl	802aa18 <fm25v02_read>

			osMutexRelease(Fm25v02MutexHandle);
 8022372:	4b10      	ldr	r3, [pc, #64]	; (80223b4 <ThreadMeterTask+0xa4>)
 8022374:	681b      	ldr	r3, [r3, #0]
 8022376:	4618      	mov	r0, r3
 8022378:	f7f6 ffe4 	bl	8019344 <osMutexRelease>

			ce303_voltage(meter_temp); // читаем напряжение
 802237c:	4b0f      	ldr	r3, [pc, #60]	; (80223bc <ThreadMeterTask+0xac>)
 802237e:	781b      	ldrb	r3, [r3, #0]
 8022380:	4618      	mov	r0, r3
 8022382:	f000 fcdb 	bl	8022d3c <ce303_voltage>
			ce303_current(meter_temp); // читаем ток
 8022386:	4b0d      	ldr	r3, [pc, #52]	; (80223bc <ThreadMeterTask+0xac>)
 8022388:	781b      	ldrb	r3, [r3, #0]
 802238a:	4618      	mov	r0, r3
 802238c:	f001 ff22 	bl	80241d4 <ce303_current>
			ce303_power(meter_temp); // читаем мощность
 8022390:	4b0a      	ldr	r3, [pc, #40]	; (80223bc <ThreadMeterTask+0xac>)
 8022392:	781b      	ldrb	r3, [r3, #0]
 8022394:	4618      	mov	r0, r3
 8022396:	f003 f967 	bl	8025668 <ce303_power>
			ce303_tarif(meter_temp); // читаем тарифы
 802239a:	4b08      	ldr	r3, [pc, #32]	; (80223bc <ThreadMeterTask+0xac>)
 802239c:	781b      	ldrb	r3, [r3, #0]
 802239e:	4618      	mov	r0, r3
 80223a0:	f004 fbae 	bl	8026b00 <ce303_tarif>
		}


		osDelay(2000);
 80223a4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80223a8:	f7f6 fe9d 	bl	80190e6 <osDelay>
		if(control_registers.meter_polling_reg == 1)
 80223ac:	e7d1      	b.n	8022352 <ThreadMeterTask+0x42>
 80223ae:	bf00      	nop
 80223b0:	20009b98 	.word	0x20009b98
 80223b4:	20009bb8 	.word	0x20009bb8
 80223b8:	2000b000 	.word	0x2000b000
 80223bc:	2000a06a 	.word	0x2000a06a

080223c0 <ThreadModbusPacketTask>:
volatile uint8_t phase_b_control_state = 0; // переменная статуса включения фазы В
volatile uint8_t phase_c_control_state = 0; // переменная статуса включения фазы С


void ThreadModbusPacketTask(void const * argument)
{
 80223c0:	b580      	push	{r7, lr}
 80223c2:	b084      	sub	sp, #16
 80223c4:	af00      	add	r7, sp, #0
 80223c6:	6078      	str	r0, [r7, #4]
	uint8_t temp_h1;
	uint8_t temp_l1;

	osSemaphoreWait(ModbusPacketReceiveHandle, osWaitForever); // обнуляем семафор, при создании семафора его значение равно 1
 80223c8:	4b88      	ldr	r3, [pc, #544]	; (80225ec <ThreadModbusPacketTask+0x22c>)
 80223ca:	681b      	ldr	r3, [r3, #0]
 80223cc:	f04f 31ff 	mov.w	r1, #4294967295
 80223d0:	4618      	mov	r0, r3
 80223d2:	f7f7 f81f 	bl	8019414 <osSemaphoreWait>



	for(;;)
	{
		osSemaphoreWait(ModbusPacketReceiveHandle, osWaitForever);
 80223d6:	4b85      	ldr	r3, [pc, #532]	; (80225ec <ThreadModbusPacketTask+0x22c>)
 80223d8:	681b      	ldr	r3, [r3, #0]
 80223da:	f04f 31ff 	mov.w	r1, #4294967295
 80223de:	4618      	mov	r0, r3
 80223e0:	f7f7 f818 	bl	8019414 <osSemaphoreWait>

		switch(modbus_buffer[modbus_packet_number1][1]) // проверяем тип поступившей команды MODBUS и формируем соответствующий ответ
 80223e4:	4b82      	ldr	r3, [pc, #520]	; (80225f0 <ThreadModbusPacketTask+0x230>)
 80223e6:	781b      	ldrb	r3, [r3, #0]
 80223e8:	4a82      	ldr	r2, [pc, #520]	; (80225f4 <ThreadModbusPacketTask+0x234>)
 80223ea:	021b      	lsls	r3, r3, #8
 80223ec:	4413      	add	r3, r2
 80223ee:	3301      	adds	r3, #1
 80223f0:	781b      	ldrb	r3, [r3, #0]
 80223f2:	2b03      	cmp	r3, #3
 80223f4:	d003      	beq.n	80223fe <ThreadModbusPacketTask+0x3e>
 80223f6:	2b10      	cmp	r3, #16
 80223f8:	f000 80ad 	beq.w	8022556 <ThreadModbusPacketTask+0x196>
 80223fc:	e1f0      	b.n	80227e0 <ThreadModbusPacketTask+0x420>
		{
			case(0x03): // чтение регистра

				modbus_address = (((((uint16_t)modbus_buffer[modbus_packet_number1][2])<<8)&0xFF00)|(((uint16_t)modbus_buffer[modbus_packet_number1][3])&0xFF)); // считаем адрес регистра для чтения
 80223fe:	4b7c      	ldr	r3, [pc, #496]	; (80225f0 <ThreadModbusPacketTask+0x230>)
 8022400:	781b      	ldrb	r3, [r3, #0]
 8022402:	4a7c      	ldr	r2, [pc, #496]	; (80225f4 <ThreadModbusPacketTask+0x234>)
 8022404:	021b      	lsls	r3, r3, #8
 8022406:	4413      	add	r3, r2
 8022408:	3302      	adds	r3, #2
 802240a:	781b      	ldrb	r3, [r3, #0]
 802240c:	021b      	lsls	r3, r3, #8
 802240e:	b21a      	sxth	r2, r3
 8022410:	4b77      	ldr	r3, [pc, #476]	; (80225f0 <ThreadModbusPacketTask+0x230>)
 8022412:	781b      	ldrb	r3, [r3, #0]
 8022414:	4977      	ldr	r1, [pc, #476]	; (80225f4 <ThreadModbusPacketTask+0x234>)
 8022416:	021b      	lsls	r3, r3, #8
 8022418:	440b      	add	r3, r1
 802241a:	3303      	adds	r3, #3
 802241c:	781b      	ldrb	r3, [r3, #0]
 802241e:	b21b      	sxth	r3, r3
 8022420:	4313      	orrs	r3, r2
 8022422:	b21b      	sxth	r3, r3
 8022424:	b29a      	uxth	r2, r3
 8022426:	4b74      	ldr	r3, [pc, #464]	; (80225f8 <ThreadModbusPacketTask+0x238>)
 8022428:	801a      	strh	r2, [r3, #0]
				modbus_size = (((((uint16_t)modbus_buffer[modbus_packet_number1][4])<<8)&0xFF00)|(((uint16_t)modbus_buffer[modbus_packet_number1][5])&0xFF)); //  считаем количество регистров для чтения
 802242a:	4b71      	ldr	r3, [pc, #452]	; (80225f0 <ThreadModbusPacketTask+0x230>)
 802242c:	781b      	ldrb	r3, [r3, #0]
 802242e:	4a71      	ldr	r2, [pc, #452]	; (80225f4 <ThreadModbusPacketTask+0x234>)
 8022430:	021b      	lsls	r3, r3, #8
 8022432:	4413      	add	r3, r2
 8022434:	3304      	adds	r3, #4
 8022436:	781b      	ldrb	r3, [r3, #0]
 8022438:	021b      	lsls	r3, r3, #8
 802243a:	b21a      	sxth	r2, r3
 802243c:	4b6c      	ldr	r3, [pc, #432]	; (80225f0 <ThreadModbusPacketTask+0x230>)
 802243e:	781b      	ldrb	r3, [r3, #0]
 8022440:	496c      	ldr	r1, [pc, #432]	; (80225f4 <ThreadModbusPacketTask+0x234>)
 8022442:	021b      	lsls	r3, r3, #8
 8022444:	440b      	add	r3, r1
 8022446:	3305      	adds	r3, #5
 8022448:	781b      	ldrb	r3, [r3, #0]
 802244a:	b21b      	sxth	r3, r3
 802244c:	4313      	orrs	r3, r2
 802244e:	b21b      	sxth	r3, r3
 8022450:	b29a      	uxth	r2, r3
 8022452:	4b6a      	ldr	r3, [pc, #424]	; (80225fc <ThreadModbusPacketTask+0x23c>)
 8022454:	801a      	strh	r2, [r3, #0]
					}
					*/

				// обработка пакета чтения 16-битного регистра modbus

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8022456:	4b6a      	ldr	r3, [pc, #424]	; (8022600 <ThreadModbusPacketTask+0x240>)
 8022458:	681b      	ldr	r3, [r3, #0]
 802245a:	f04f 31ff 	mov.w	r1, #4294967295
 802245e:	4618      	mov	r0, r3
 8022460:	f7f6 ff22 	bl	80192a8 <osMutexWait>
				fm25v02_fast_read( 2*modbus_address , &buf_out[0] , 2*modbus_size); // читаем из памяти необходимое количество регистров
 8022464:	4b64      	ldr	r3, [pc, #400]	; (80225f8 <ThreadModbusPacketTask+0x238>)
 8022466:	881b      	ldrh	r3, [r3, #0]
 8022468:	005b      	lsls	r3, r3, #1
 802246a:	b298      	uxth	r0, r3
 802246c:	4b63      	ldr	r3, [pc, #396]	; (80225fc <ThreadModbusPacketTask+0x23c>)
 802246e:	881b      	ldrh	r3, [r3, #0]
 8022470:	005b      	lsls	r3, r3, #1
 8022472:	b29b      	uxth	r3, r3
 8022474:	461a      	mov	r2, r3
 8022476:	4963      	ldr	r1, [pc, #396]	; (8022604 <ThreadModbusPacketTask+0x244>)
 8022478:	f008 fb78 	bl	802ab6c <fm25v02_fast_read>
				osMutexRelease(Fm25v02MutexHandle);
 802247c:	4b60      	ldr	r3, [pc, #384]	; (8022600 <ThreadModbusPacketTask+0x240>)
 802247e:	681b      	ldr	r3, [r3, #0]
 8022480:	4618      	mov	r0, r3
 8022482:	f7f6 ff5f 	bl	8019344 <osMutexRelease>

				buf_out1[0] = 0x01;
 8022486:	4b60      	ldr	r3, [pc, #384]	; (8022608 <ThreadModbusPacketTask+0x248>)
 8022488:	2201      	movs	r2, #1
 802248a:	701a      	strb	r2, [r3, #0]
				buf_out1[1] = 0x03;
 802248c:	4b5e      	ldr	r3, [pc, #376]	; (8022608 <ThreadModbusPacketTask+0x248>)
 802248e:	2203      	movs	r2, #3
 8022490:	705a      	strb	r2, [r3, #1]
				buf_out1[2] = 2*modbus_size;
 8022492:	4b5a      	ldr	r3, [pc, #360]	; (80225fc <ThreadModbusPacketTask+0x23c>)
 8022494:	881b      	ldrh	r3, [r3, #0]
 8022496:	b2db      	uxtb	r3, r3
 8022498:	005b      	lsls	r3, r3, #1
 802249a:	b2da      	uxtb	r2, r3
 802249c:	4b5a      	ldr	r3, [pc, #360]	; (8022608 <ThreadModbusPacketTask+0x248>)
 802249e:	709a      	strb	r2, [r3, #2]
				for(uint8_t i=0; i<modbus_size; i++)
 80224a0:	2300      	movs	r3, #0
 80224a2:	73fb      	strb	r3, [r7, #15]
 80224a4:	e015      	b.n	80224d2 <ThreadModbusPacketTask+0x112>
				{
					buf_out1[2*i+3] = buf_out[2*i];
 80224a6:	7bfb      	ldrb	r3, [r7, #15]
 80224a8:	005a      	lsls	r2, r3, #1
 80224aa:	7bfb      	ldrb	r3, [r7, #15]
 80224ac:	005b      	lsls	r3, r3, #1
 80224ae:	3303      	adds	r3, #3
 80224b0:	4954      	ldr	r1, [pc, #336]	; (8022604 <ThreadModbusPacketTask+0x244>)
 80224b2:	5c89      	ldrb	r1, [r1, r2]
 80224b4:	4a54      	ldr	r2, [pc, #336]	; (8022608 <ThreadModbusPacketTask+0x248>)
 80224b6:	54d1      	strb	r1, [r2, r3]
					buf_out1[2*i+4] = buf_out[2*i+1];
 80224b8:	7bfb      	ldrb	r3, [r7, #15]
 80224ba:	005b      	lsls	r3, r3, #1
 80224bc:	1c5a      	adds	r2, r3, #1
 80224be:	7bfb      	ldrb	r3, [r7, #15]
 80224c0:	3302      	adds	r3, #2
 80224c2:	005b      	lsls	r3, r3, #1
 80224c4:	494f      	ldr	r1, [pc, #316]	; (8022604 <ThreadModbusPacketTask+0x244>)
 80224c6:	5c89      	ldrb	r1, [r1, r2]
 80224c8:	4a4f      	ldr	r2, [pc, #316]	; (8022608 <ThreadModbusPacketTask+0x248>)
 80224ca:	54d1      	strb	r1, [r2, r3]
				for(uint8_t i=0; i<modbus_size; i++)
 80224cc:	7bfb      	ldrb	r3, [r7, #15]
 80224ce:	3301      	adds	r3, #1
 80224d0:	73fb      	strb	r3, [r7, #15]
 80224d2:	7bfb      	ldrb	r3, [r7, #15]
 80224d4:	b29a      	uxth	r2, r3
 80224d6:	4b49      	ldr	r3, [pc, #292]	; (80225fc <ThreadModbusPacketTask+0x23c>)
 80224d8:	881b      	ldrh	r3, [r3, #0]
 80224da:	429a      	cmp	r2, r3
 80224dc:	d3e3      	bcc.n	80224a6 <ThreadModbusPacketTask+0xe6>
				}
				crc_temp = CRC16(&buf_out1[0], 3+2*modbus_size);
 80224de:	4b47      	ldr	r3, [pc, #284]	; (80225fc <ThreadModbusPacketTask+0x23c>)
 80224e0:	881b      	ldrh	r3, [r3, #0]
 80224e2:	005b      	lsls	r3, r3, #1
 80224e4:	3303      	adds	r3, #3
 80224e6:	4619      	mov	r1, r3
 80224e8:	4847      	ldr	r0, [pc, #284]	; (8022608 <ThreadModbusPacketTask+0x248>)
 80224ea:	f00b fb9b 	bl	802dc24 <CRC16>
 80224ee:	4603      	mov	r3, r0
 80224f0:	4a46      	ldr	r2, [pc, #280]	; (802260c <ThreadModbusPacketTask+0x24c>)
 80224f2:	6013      	str	r3, [r2, #0]
				buf_out1[2*modbus_size+3] = (uint8_t)(crc_temp&0x00FF);
 80224f4:	4b45      	ldr	r3, [pc, #276]	; (802260c <ThreadModbusPacketTask+0x24c>)
 80224f6:	681a      	ldr	r2, [r3, #0]
 80224f8:	4b40      	ldr	r3, [pc, #256]	; (80225fc <ThreadModbusPacketTask+0x23c>)
 80224fa:	881b      	ldrh	r3, [r3, #0]
 80224fc:	005b      	lsls	r3, r3, #1
 80224fe:	3303      	adds	r3, #3
 8022500:	b2d1      	uxtb	r1, r2
 8022502:	4a41      	ldr	r2, [pc, #260]	; (8022608 <ThreadModbusPacketTask+0x248>)
 8022504:	54d1      	strb	r1, [r2, r3]
				buf_out1[2*modbus_size+4] = (uint8_t)((crc_temp>>8)&0x00FF);
 8022506:	4b41      	ldr	r3, [pc, #260]	; (802260c <ThreadModbusPacketTask+0x24c>)
 8022508:	681b      	ldr	r3, [r3, #0]
 802250a:	0a1a      	lsrs	r2, r3, #8
 802250c:	4b3b      	ldr	r3, [pc, #236]	; (80225fc <ThreadModbusPacketTask+0x23c>)
 802250e:	881b      	ldrh	r3, [r3, #0]
 8022510:	3302      	adds	r3, #2
 8022512:	005b      	lsls	r3, r3, #1
 8022514:	b2d1      	uxtb	r1, r2
 8022516:	4a3c      	ldr	r2, [pc, #240]	; (8022608 <ThreadModbusPacketTask+0x248>)
 8022518:	54d1      	strb	r1, [r2, r3]

				osMutexWait(UartMutexHandle, osWaitForever);
 802251a:	4b3d      	ldr	r3, [pc, #244]	; (8022610 <ThreadModbusPacketTask+0x250>)
 802251c:	681b      	ldr	r3, [r3, #0]
 802251e:	f04f 31ff 	mov.w	r1, #4294967295
 8022522:	4618      	mov	r0, r3
 8022524:	f7f6 fec0 	bl	80192a8 <osMutexWait>
				if( AT_CIPSEND(&buf_out1[0], 2*modbus_size+5) != AT_OK )
 8022528:	4b34      	ldr	r3, [pc, #208]	; (80225fc <ThreadModbusPacketTask+0x23c>)
 802252a:	881b      	ldrh	r3, [r3, #0]
 802252c:	005b      	lsls	r3, r3, #1
 802252e:	b29b      	uxth	r3, r3
 8022530:	3305      	adds	r3, #5
 8022532:	b29b      	uxth	r3, r3
 8022534:	4619      	mov	r1, r3
 8022536:	4834      	ldr	r0, [pc, #208]	; (8022608 <ThreadModbusPacketTask+0x248>)
 8022538:	f009 f9bc 	bl	802b8b4 <AT_CIPSEND>
				{
					//LED7_ON();
				}
				osMutexRelease(UartMutexHandle);
 802253c:	4b34      	ldr	r3, [pc, #208]	; (8022610 <ThreadModbusPacketTask+0x250>)
 802253e:	681b      	ldr	r3, [r3, #0]
 8022540:	4618      	mov	r0, r3
 8022542:	f7f6 feff 	bl	8019344 <osMutexRelease>
				{
					//osTimerStop(Ring_Center_TimerHandle);
					//osTimerStart(Ring_Center_TimerHandle, 300000);
				}

				osTimerStart(Ring_Center_TimerHandle, 60000);// перезапускаем таймер перезагрузки
 8022546:	4b33      	ldr	r3, [pc, #204]	; (8022614 <ThreadModbusPacketTask+0x254>)
 8022548:	681b      	ldr	r3, [r3, #0]
 802254a:	f64e 2160 	movw	r1, #60000	; 0xea60
 802254e:	4618      	mov	r0, r3
 8022550:	f7f6 fe12 	bl	8019178 <osTimerStart>


			break;
 8022554:	e144      	b.n	80227e0 <ThreadModbusPacketTask+0x420>

			case(0x10): // запись нескольких регистров

				modbus_address = (((((uint16_t)modbus_buffer[modbus_packet_number1][2])<<8)&0xFF00)|(((uint16_t)modbus_buffer[modbus_packet_number1][3])&0xFF)); // считаем адрес регистра для записи
 8022556:	4b26      	ldr	r3, [pc, #152]	; (80225f0 <ThreadModbusPacketTask+0x230>)
 8022558:	781b      	ldrb	r3, [r3, #0]
 802255a:	4a26      	ldr	r2, [pc, #152]	; (80225f4 <ThreadModbusPacketTask+0x234>)
 802255c:	021b      	lsls	r3, r3, #8
 802255e:	4413      	add	r3, r2
 8022560:	3302      	adds	r3, #2
 8022562:	781b      	ldrb	r3, [r3, #0]
 8022564:	021b      	lsls	r3, r3, #8
 8022566:	b21a      	sxth	r2, r3
 8022568:	4b21      	ldr	r3, [pc, #132]	; (80225f0 <ThreadModbusPacketTask+0x230>)
 802256a:	781b      	ldrb	r3, [r3, #0]
 802256c:	4921      	ldr	r1, [pc, #132]	; (80225f4 <ThreadModbusPacketTask+0x234>)
 802256e:	021b      	lsls	r3, r3, #8
 8022570:	440b      	add	r3, r1
 8022572:	3303      	adds	r3, #3
 8022574:	781b      	ldrb	r3, [r3, #0]
 8022576:	b21b      	sxth	r3, r3
 8022578:	4313      	orrs	r3, r2
 802257a:	b21b      	sxth	r3, r3
 802257c:	b29a      	uxth	r2, r3
 802257e:	4b1e      	ldr	r3, [pc, #120]	; (80225f8 <ThreadModbusPacketTask+0x238>)
 8022580:	801a      	strh	r2, [r3, #0]
				modbus_size = (((((uint16_t)modbus_buffer[modbus_packet_number1][4])<<8)&0xFF00)|(((uint16_t)modbus_buffer[modbus_packet_number1][5])&0xFF)); //  считаем количество регистров для чтения
 8022582:	4b1b      	ldr	r3, [pc, #108]	; (80225f0 <ThreadModbusPacketTask+0x230>)
 8022584:	781b      	ldrb	r3, [r3, #0]
 8022586:	4a1b      	ldr	r2, [pc, #108]	; (80225f4 <ThreadModbusPacketTask+0x234>)
 8022588:	021b      	lsls	r3, r3, #8
 802258a:	4413      	add	r3, r2
 802258c:	3304      	adds	r3, #4
 802258e:	781b      	ldrb	r3, [r3, #0]
 8022590:	021b      	lsls	r3, r3, #8
 8022592:	b21a      	sxth	r2, r3
 8022594:	4b16      	ldr	r3, [pc, #88]	; (80225f0 <ThreadModbusPacketTask+0x230>)
 8022596:	781b      	ldrb	r3, [r3, #0]
 8022598:	4916      	ldr	r1, [pc, #88]	; (80225f4 <ThreadModbusPacketTask+0x234>)
 802259a:	021b      	lsls	r3, r3, #8
 802259c:	440b      	add	r3, r1
 802259e:	3305      	adds	r3, #5
 80225a0:	781b      	ldrb	r3, [r3, #0]
 80225a2:	b21b      	sxth	r3, r3
 80225a4:	4313      	orrs	r3, r2
 80225a6:	b21b      	sxth	r3, r3
 80225a8:	b29a      	uxth	r2, r3
 80225aa:	4b14      	ldr	r3, [pc, #80]	; (80225fc <ThreadModbusPacketTask+0x23c>)
 80225ac:	801a      	strh	r2, [r3, #0]

				if( !( (modbus_address>=0x1000) && (modbus_address<=0x108F) ) && !( (modbus_address<0x1000) && (modbus_address+modbus_size>0x1000) ) ) // модбас адресс не должен находиться в области статусных регистров, а также запись не должна затрагивать статусные регистры
 80225ae:	4b12      	ldr	r3, [pc, #72]	; (80225f8 <ThreadModbusPacketTask+0x238>)
 80225b0:	881b      	ldrh	r3, [r3, #0]
 80225b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80225b6:	d306      	bcc.n	80225c6 <ThreadModbusPacketTask+0x206>
 80225b8:	4b0f      	ldr	r3, [pc, #60]	; (80225f8 <ThreadModbusPacketTask+0x238>)
 80225ba:	881b      	ldrh	r3, [r3, #0]
 80225bc:	f241 028f 	movw	r2, #4239	; 0x108f
 80225c0:	4293      	cmp	r3, r2
 80225c2:	f240 810c 	bls.w	80227de <ThreadModbusPacketTask+0x41e>
 80225c6:	4b0c      	ldr	r3, [pc, #48]	; (80225f8 <ThreadModbusPacketTask+0x238>)
 80225c8:	881b      	ldrh	r3, [r3, #0]
 80225ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80225ce:	d209      	bcs.n	80225e4 <ThreadModbusPacketTask+0x224>
 80225d0:	4b09      	ldr	r3, [pc, #36]	; (80225f8 <ThreadModbusPacketTask+0x238>)
 80225d2:	881b      	ldrh	r3, [r3, #0]
 80225d4:	461a      	mov	r2, r3
 80225d6:	4b09      	ldr	r3, [pc, #36]	; (80225fc <ThreadModbusPacketTask+0x23c>)
 80225d8:	881b      	ldrh	r3, [r3, #0]
 80225da:	4413      	add	r3, r2
 80225dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80225e0:	f300 80fd 	bgt.w	80227de <ThreadModbusPacketTask+0x41e>

					*/

					// обработка пакета записи 16-битного регистра modbus

					for(uint8_t a=0; a<(modbus_buffer[modbus_packet_number1][6])/2; a++)
 80225e4:	2300      	movs	r3, #0
 80225e6:	73bb      	strb	r3, [r7, #14]
 80225e8:	e053      	b.n	8022692 <ThreadModbusPacketTask+0x2d2>
 80225ea:	bf00      	nop
 80225ec:	20009b0c 	.word	0x20009b0c
 80225f0:	2000802f 	.word	0x2000802f
 80225f4:	20008310 	.word	0x20008310
 80225f8:	2000a270 	.word	0x2000a270
 80225fc:	2000a272 	.word	0x2000a272
 8022600:	20009bb8 	.word	0x20009bb8
 8022604:	2000a170 	.word	0x2000a170
 8022608:	2000a06c 	.word	0x2000a06c
 802260c:	2000a280 	.word	0x2000a280
 8022610:	2000971c 	.word	0x2000971c
 8022614:	20009724 	.word	0x20009724
					{
						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8022618:	4b73      	ldr	r3, [pc, #460]	; (80227e8 <ThreadModbusPacketTask+0x428>)
 802261a:	681b      	ldr	r3, [r3, #0]
 802261c:	f04f 31ff 	mov.w	r1, #4294967295
 8022620:	4618      	mov	r0, r3
 8022622:	f7f6 fe41 	bl	80192a8 <osMutexWait>
						fm25v02_fast_write( (2*modbus_address+2*a), &modbus_buffer[modbus_packet_number1][7+a*2], 1 );
 8022626:	4b71      	ldr	r3, [pc, #452]	; (80227ec <ThreadModbusPacketTask+0x42c>)
 8022628:	881b      	ldrh	r3, [r3, #0]
 802262a:	461a      	mov	r2, r3
 802262c:	7bbb      	ldrb	r3, [r7, #14]
 802262e:	4413      	add	r3, r2
 8022630:	b29b      	uxth	r3, r3
 8022632:	005b      	lsls	r3, r3, #1
 8022634:	b298      	uxth	r0, r3
 8022636:	4b6e      	ldr	r3, [pc, #440]	; (80227f0 <ThreadModbusPacketTask+0x430>)
 8022638:	781b      	ldrb	r3, [r3, #0]
 802263a:	461a      	mov	r2, r3
 802263c:	7bbb      	ldrb	r3, [r7, #14]
 802263e:	005b      	lsls	r3, r3, #1
 8022640:	3307      	adds	r3, #7
 8022642:	0212      	lsls	r2, r2, #8
 8022644:	4413      	add	r3, r2
 8022646:	4a6b      	ldr	r2, [pc, #428]	; (80227f4 <ThreadModbusPacketTask+0x434>)
 8022648:	4413      	add	r3, r2
 802264a:	2201      	movs	r2, #1
 802264c:	4619      	mov	r1, r3
 802264e:	f008 fa69 	bl	802ab24 <fm25v02_fast_write>
						fm25v02_fast_write( (2*modbus_address+2*a+1), &modbus_buffer[modbus_packet_number1][8+a*2], 1 );
 8022652:	4b66      	ldr	r3, [pc, #408]	; (80227ec <ThreadModbusPacketTask+0x42c>)
 8022654:	881b      	ldrh	r3, [r3, #0]
 8022656:	461a      	mov	r2, r3
 8022658:	7bbb      	ldrb	r3, [r7, #14]
 802265a:	4413      	add	r3, r2
 802265c:	b29b      	uxth	r3, r3
 802265e:	005b      	lsls	r3, r3, #1
 8022660:	b29b      	uxth	r3, r3
 8022662:	3301      	adds	r3, #1
 8022664:	b298      	uxth	r0, r3
 8022666:	4b62      	ldr	r3, [pc, #392]	; (80227f0 <ThreadModbusPacketTask+0x430>)
 8022668:	781b      	ldrb	r3, [r3, #0]
 802266a:	461a      	mov	r2, r3
 802266c:	7bbb      	ldrb	r3, [r7, #14]
 802266e:	3304      	adds	r3, #4
 8022670:	005b      	lsls	r3, r3, #1
 8022672:	0212      	lsls	r2, r2, #8
 8022674:	4413      	add	r3, r2
 8022676:	4a5f      	ldr	r2, [pc, #380]	; (80227f4 <ThreadModbusPacketTask+0x434>)
 8022678:	4413      	add	r3, r2
 802267a:	2201      	movs	r2, #1
 802267c:	4619      	mov	r1, r3
 802267e:	f008 fa51 	bl	802ab24 <fm25v02_fast_write>
						osMutexRelease(Fm25v02MutexHandle);
 8022682:	4b59      	ldr	r3, [pc, #356]	; (80227e8 <ThreadModbusPacketTask+0x428>)
 8022684:	681b      	ldr	r3, [r3, #0]
 8022686:	4618      	mov	r0, r3
 8022688:	f7f6 fe5c 	bl	8019344 <osMutexRelease>
					for(uint8_t a=0; a<(modbus_buffer[modbus_packet_number1][6])/2; a++)
 802268c:	7bbb      	ldrb	r3, [r7, #14]
 802268e:	3301      	adds	r3, #1
 8022690:	73bb      	strb	r3, [r7, #14]
 8022692:	4b57      	ldr	r3, [pc, #348]	; (80227f0 <ThreadModbusPacketTask+0x430>)
 8022694:	781b      	ldrb	r3, [r3, #0]
 8022696:	4a57      	ldr	r2, [pc, #348]	; (80227f4 <ThreadModbusPacketTask+0x434>)
 8022698:	021b      	lsls	r3, r3, #8
 802269a:	4413      	add	r3, r2
 802269c:	3306      	adds	r3, #6
 802269e:	781b      	ldrb	r3, [r3, #0]
 80226a0:	085b      	lsrs	r3, r3, #1
 80226a2:	b2db      	uxtb	r3, r3
 80226a4:	7bba      	ldrb	r2, [r7, #14]
 80226a6:	429a      	cmp	r2, r3
 80226a8:	d3b6      	bcc.n	8022618 <ThreadModbusPacketTask+0x258>
					}

					buf_out1[0] = 0x01;
 80226aa:	4b53      	ldr	r3, [pc, #332]	; (80227f8 <ThreadModbusPacketTask+0x438>)
 80226ac:	2201      	movs	r2, #1
 80226ae:	701a      	strb	r2, [r3, #0]
					buf_out1[1] = 0x10;
 80226b0:	4b51      	ldr	r3, [pc, #324]	; (80227f8 <ThreadModbusPacketTask+0x438>)
 80226b2:	2210      	movs	r2, #16
 80226b4:	705a      	strb	r2, [r3, #1]
					buf_out1[2] = modbus_buffer[modbus_packet_number1][2];
 80226b6:	4b4e      	ldr	r3, [pc, #312]	; (80227f0 <ThreadModbusPacketTask+0x430>)
 80226b8:	781b      	ldrb	r3, [r3, #0]
 80226ba:	4a4e      	ldr	r2, [pc, #312]	; (80227f4 <ThreadModbusPacketTask+0x434>)
 80226bc:	021b      	lsls	r3, r3, #8
 80226be:	4413      	add	r3, r2
 80226c0:	3302      	adds	r3, #2
 80226c2:	781a      	ldrb	r2, [r3, #0]
 80226c4:	4b4c      	ldr	r3, [pc, #304]	; (80227f8 <ThreadModbusPacketTask+0x438>)
 80226c6:	709a      	strb	r2, [r3, #2]
					buf_out1[3] = modbus_buffer[modbus_packet_number1][3];
 80226c8:	4b49      	ldr	r3, [pc, #292]	; (80227f0 <ThreadModbusPacketTask+0x430>)
 80226ca:	781b      	ldrb	r3, [r3, #0]
 80226cc:	4a49      	ldr	r2, [pc, #292]	; (80227f4 <ThreadModbusPacketTask+0x434>)
 80226ce:	021b      	lsls	r3, r3, #8
 80226d0:	4413      	add	r3, r2
 80226d2:	3303      	adds	r3, #3
 80226d4:	781a      	ldrb	r2, [r3, #0]
 80226d6:	4b48      	ldr	r3, [pc, #288]	; (80227f8 <ThreadModbusPacketTask+0x438>)
 80226d8:	70da      	strb	r2, [r3, #3]
					buf_out1[4] = modbus_buffer[modbus_packet_number1][4];
 80226da:	4b45      	ldr	r3, [pc, #276]	; (80227f0 <ThreadModbusPacketTask+0x430>)
 80226dc:	781b      	ldrb	r3, [r3, #0]
 80226de:	4a45      	ldr	r2, [pc, #276]	; (80227f4 <ThreadModbusPacketTask+0x434>)
 80226e0:	021b      	lsls	r3, r3, #8
 80226e2:	4413      	add	r3, r2
 80226e4:	3304      	adds	r3, #4
 80226e6:	781a      	ldrb	r2, [r3, #0]
 80226e8:	4b43      	ldr	r3, [pc, #268]	; (80227f8 <ThreadModbusPacketTask+0x438>)
 80226ea:	711a      	strb	r2, [r3, #4]
					buf_out1[5] = modbus_buffer[modbus_packet_number1][5];
 80226ec:	4b40      	ldr	r3, [pc, #256]	; (80227f0 <ThreadModbusPacketTask+0x430>)
 80226ee:	781b      	ldrb	r3, [r3, #0]
 80226f0:	4a40      	ldr	r2, [pc, #256]	; (80227f4 <ThreadModbusPacketTask+0x434>)
 80226f2:	021b      	lsls	r3, r3, #8
 80226f4:	4413      	add	r3, r2
 80226f6:	3305      	adds	r3, #5
 80226f8:	781a      	ldrb	r2, [r3, #0]
 80226fa:	4b3f      	ldr	r3, [pc, #252]	; (80227f8 <ThreadModbusPacketTask+0x438>)
 80226fc:	715a      	strb	r2, [r3, #5]

					crc_temp = CRC16(&buf_out1[0], 6);
 80226fe:	2106      	movs	r1, #6
 8022700:	483d      	ldr	r0, [pc, #244]	; (80227f8 <ThreadModbusPacketTask+0x438>)
 8022702:	f00b fa8f 	bl	802dc24 <CRC16>
 8022706:	4603      	mov	r3, r0
 8022708:	4a3c      	ldr	r2, [pc, #240]	; (80227fc <ThreadModbusPacketTask+0x43c>)
 802270a:	6013      	str	r3, [r2, #0]

					buf_out1[6] = (uint8_t)(crc_temp&0x00FF);
 802270c:	4b3b      	ldr	r3, [pc, #236]	; (80227fc <ThreadModbusPacketTask+0x43c>)
 802270e:	681b      	ldr	r3, [r3, #0]
 8022710:	b2da      	uxtb	r2, r3
 8022712:	4b39      	ldr	r3, [pc, #228]	; (80227f8 <ThreadModbusPacketTask+0x438>)
 8022714:	719a      	strb	r2, [r3, #6]
					buf_out1[7] = (uint8_t)((crc_temp>>8)&0x00FF);
 8022716:	4b39      	ldr	r3, [pc, #228]	; (80227fc <ThreadModbusPacketTask+0x43c>)
 8022718:	681b      	ldr	r3, [r3, #0]
 802271a:	0a1b      	lsrs	r3, r3, #8
 802271c:	b2da      	uxtb	r2, r3
 802271e:	4b36      	ldr	r3, [pc, #216]	; (80227f8 <ThreadModbusPacketTask+0x438>)
 8022720:	71da      	strb	r2, [r3, #7]

					osMutexWait(UartMutexHandle, osWaitForever);
 8022722:	4b37      	ldr	r3, [pc, #220]	; (8022800 <ThreadModbusPacketTask+0x440>)
 8022724:	681b      	ldr	r3, [r3, #0]
 8022726:	f04f 31ff 	mov.w	r1, #4294967295
 802272a:	4618      	mov	r0, r3
 802272c:	f7f6 fdbc 	bl	80192a8 <osMutexWait>
					if( AT_CIPSEND(&buf_out1[0], 8) != AT_OK )
 8022730:	2108      	movs	r1, #8
 8022732:	4831      	ldr	r0, [pc, #196]	; (80227f8 <ThreadModbusPacketTask+0x438>)
 8022734:	f009 f8be 	bl	802b8b4 <AT_CIPSEND>
					{

					}
					osMutexRelease(UartMutexHandle);
 8022738:	4b31      	ldr	r3, [pc, #196]	; (8022800 <ThreadModbusPacketTask+0x440>)
 802273a:	681b      	ldr	r3, [r3, #0]
 802273c:	4618      	mov	r0, r3
 802273e:	f7f6 fe01 	bl	8019344 <osMutexRelease>
						fm25v02_write(2*GPRS_CALL_REG, 0x00);
						fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
						osMutexRelease(Fm25v02MutexHandle);
					}
					*/
					if( modbus_address == 0x2710)
 8022742:	4b2a      	ldr	r3, [pc, #168]	; (80227ec <ThreadModbusPacketTask+0x42c>)
 8022744:	881b      	ldrh	r3, [r3, #0]
 8022746:	f242 7210 	movw	r2, #10000	; 0x2710
 802274a:	4293      	cmp	r3, r2
 802274c:	d115      	bne.n	802277a <ThreadModbusPacketTask+0x3ba>
					{
						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 802274e:	4b26      	ldr	r3, [pc, #152]	; (80227e8 <ThreadModbusPacketTask+0x428>)
 8022750:	681b      	ldr	r3, [r3, #0]
 8022752:	f04f 31ff 	mov.w	r1, #4294967295
 8022756:	4618      	mov	r0, r3
 8022758:	f7f6 fda6 	bl	80192a8 <osMutexWait>
						fm25v02_write(2*GPRS_CALL_REG, 0x00);
 802275c:	2100      	movs	r1, #0
 802275e:	f242 106e 	movw	r0, #8558	; 0x216e
 8022762:	f008 f993 	bl	802aa8c <fm25v02_write>
						fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
 8022766:	2101      	movs	r1, #1
 8022768:	f242 106f 	movw	r0, #8559	; 0x216f
 802276c:	f008 f98e 	bl	802aa8c <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 8022770:	4b1d      	ldr	r3, [pc, #116]	; (80227e8 <ThreadModbusPacketTask+0x428>)
 8022772:	681b      	ldr	r3, [r3, #0]
 8022774:	4618      	mov	r0, r3
 8022776:	f7f6 fde5 	bl	8019344 <osMutexRelease>
					}

					if( modbus_address == LIGHT_CONTROL_REG)
 802277a:	4b1c      	ldr	r3, [pc, #112]	; (80227ec <ThreadModbusPacketTask+0x42c>)
 802277c:	881b      	ldrh	r3, [r3, #0]
 802277e:	f241 02c1 	movw	r2, #4289	; 0x10c1
 8022782:	4293      	cmp	r3, r2
 8022784:	d124      	bne.n	80227d0 <ThreadModbusPacketTask+0x410>
					{
						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8022786:	4b18      	ldr	r3, [pc, #96]	; (80227e8 <ThreadModbusPacketTask+0x428>)
 8022788:	681b      	ldr	r3, [r3, #0]
 802278a:	f04f 31ff 	mov.w	r1, #4294967295
 802278e:	4618      	mov	r0, r3
 8022790:	f7f6 fd8a 	bl	80192a8 <osMutexWait>
						fm25v02_read(2*LIGHT_CONTROL_REG, &temp_h1);
 8022794:	f107 030d 	add.w	r3, r7, #13
 8022798:	4619      	mov	r1, r3
 802279a:	f242 1082 	movw	r0, #8578	; 0x2182
 802279e:	f008 f93b 	bl	802aa18 <fm25v02_read>
						fm25v02_read(2*LIGHT_CONTROL_REG+1, &temp_l1);
 80227a2:	f107 030c 	add.w	r3, r7, #12
 80227a6:	4619      	mov	r1, r3
 80227a8:	f242 1083 	movw	r0, #8579	; 0x2183
 80227ac:	f008 f934 	bl	802aa18 <fm25v02_read>
						control_registers.light_control_reg = (((uint16_t)temp_h1)<<8)|temp_l1;
 80227b0:	7b7b      	ldrb	r3, [r7, #13]
 80227b2:	021b      	lsls	r3, r3, #8
 80227b4:	b21a      	sxth	r2, r3
 80227b6:	7b3b      	ldrb	r3, [r7, #12]
 80227b8:	b21b      	sxth	r3, r3
 80227ba:	4313      	orrs	r3, r2
 80227bc:	b21b      	sxth	r3, r3
 80227be:	b29a      	uxth	r2, r3
 80227c0:	4b10      	ldr	r3, [pc, #64]	; (8022804 <ThreadModbusPacketTask+0x444>)
 80227c2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
						osMutexRelease(Fm25v02MutexHandle);
 80227c6:	4b08      	ldr	r3, [pc, #32]	; (80227e8 <ThreadModbusPacketTask+0x428>)
 80227c8:	681b      	ldr	r3, [r3, #0]
 80227ca:	4618      	mov	r0, r3
 80227cc:	f7f6 fdba 	bl	8019344 <osMutexRelease>

					}

					osTimerStart(Ring_Center_TimerHandle, 60000);// перезапускаем таймер перезагрузки
 80227d0:	4b0d      	ldr	r3, [pc, #52]	; (8022808 <ThreadModbusPacketTask+0x448>)
 80227d2:	681b      	ldr	r3, [r3, #0]
 80227d4:	f64e 2160 	movw	r1, #60000	; 0xea60
 80227d8:	4618      	mov	r0, r3
 80227da:	f7f6 fccd 	bl	8019178 <osTimerStart>

				}


			break;
 80227de:	bf00      	nop
		}


		osDelay(1);
 80227e0:	2001      	movs	r0, #1
 80227e2:	f7f6 fc80 	bl	80190e6 <osDelay>
		osSemaphoreWait(ModbusPacketReceiveHandle, osWaitForever);
 80227e6:	e5f6      	b.n	80223d6 <ThreadModbusPacketTask+0x16>
 80227e8:	20009bb8 	.word	0x20009bb8
 80227ec:	2000a270 	.word	0x2000a270
 80227f0:	2000802f 	.word	0x2000802f
 80227f4:	20008310 	.word	0x20008310
 80227f8:	2000a06c 	.word	0x2000a06c
 80227fc:	2000a280 	.word	0x2000a280
 8022800:	2000971c 	.word	0x2000971c
 8022804:	2000b000 	.word	0x2000b000
 8022808:	20009724 	.word	0x20009724

0802280c <ThreadModbusTask>:
uint8_t modbus_packet_number = 0;
uint8_t modbus_packet_number1 = 0;


void ThreadModbusTask(void const * argument)
{
 802280c:	b590      	push	{r4, r7, lr}
 802280e:	b089      	sub	sp, #36	; 0x24
 8022810:	af00      	add	r7, sp, #0
 8022812:	6178      	str	r0, [r7, #20]
	uint16_t i=0;
 8022814:	2300      	movs	r3, #0
 8022816:	83fb      	strh	r3, [r7, #30]
	uint16_t i_max;


	for(;;)
	{
		ModbusEvent = osMessageGet(ModbusQueueHandle, osWaitForever); // ожидаем сообщение
 8022818:	4ba1      	ldr	r3, [pc, #644]	; (8022aa0 <ThreadModbusTask+0x294>)
 802281a:	6819      	ldr	r1, [r3, #0]
 802281c:	4ca1      	ldr	r4, [pc, #644]	; (8022aa4 <ThreadModbusTask+0x298>)
 802281e:	463b      	mov	r3, r7
 8022820:	f04f 32ff 	mov.w	r2, #4294967295
 8022824:	4618      	mov	r0, r3
 8022826:	f7f6 fee1 	bl	80195ec <osMessageGet>
 802282a:	463b      	mov	r3, r7
 802282c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8022830:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		if(ModbusEvent.status == osEventMessage) // если сообщение пришло
 8022834:	4b9b      	ldr	r3, [pc, #620]	; (8022aa4 <ThreadModbusTask+0x298>)
 8022836:	681b      	ldr	r3, [r3, #0]
 8022838:	2b10      	cmp	r3, #16
 802283a:	f040 8226 	bne.w	8022c8a <ThreadModbusTask+0x47e>
		{

			switch(ModbusEvent.value.v) // проверяем полученное значение из очереди
 802283e:	4b99      	ldr	r3, [pc, #612]	; (8022aa4 <ThreadModbusTask+0x298>)
 8022840:	685b      	ldr	r3, [r3, #4]
 8022842:	3b01      	subs	r3, #1
 8022844:	2b0f      	cmp	r3, #15
 8022846:	f200 817f 	bhi.w	8022b48 <ThreadModbusTask+0x33c>
 802284a:	a201      	add	r2, pc, #4	; (adr r2, 8022850 <ThreadModbusTask+0x44>)
 802284c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022850:	08022891 	.word	0x08022891
 8022854:	08022b49 	.word	0x08022b49
 8022858:	08022939 	.word	0x08022939
 802285c:	08022b49 	.word	0x08022b49
 8022860:	08022b49 	.word	0x08022b49
 8022864:	080229e5 	.word	0x080229e5
 8022868:	08022b49 	.word	0x08022b49
 802286c:	08022b49 	.word	0x08022b49
 8022870:	08022b49 	.word	0x08022b49
 8022874:	08022b49 	.word	0x08022b49
 8022878:	08022b49 	.word	0x08022b49
 802287c:	08022b49 	.word	0x08022b49
 8022880:	08022b49 	.word	0x08022b49
 8022884:	08022b49 	.word	0x08022b49
 8022888:	08022b49 	.word	0x08022b49
 802288c:	08022a8f 	.word	0x08022a8f
			{
				case(0x01):
					if(i==0)
 8022890:	8bfb      	ldrh	r3, [r7, #30]
 8022892:	2b00      	cmp	r3, #0
 8022894:	d110      	bne.n	80228b8 <ThreadModbusTask+0xac>
					{
						modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 8022896:	4b83      	ldr	r3, [pc, #524]	; (8022aa4 <ThreadModbusTask+0x298>)
 8022898:	6859      	ldr	r1, [r3, #4]
 802289a:	4b83      	ldr	r3, [pc, #524]	; (8022aa8 <ThreadModbusTask+0x29c>)
 802289c:	781b      	ldrb	r3, [r3, #0]
 802289e:	461a      	mov	r2, r3
 80228a0:	8bfb      	ldrh	r3, [r7, #30]
 80228a2:	b2c8      	uxtb	r0, r1
 80228a4:	4981      	ldr	r1, [pc, #516]	; (8022aac <ThreadModbusTask+0x2a0>)
 80228a6:	0212      	lsls	r2, r2, #8
 80228a8:	440a      	add	r2, r1
 80228aa:	4413      	add	r3, r2
 80228ac:	4602      	mov	r2, r0
 80228ae:	701a      	strb	r2, [r3, #0]
						i++;
 80228b0:	8bfb      	ldrh	r3, [r7, #30]
 80228b2:	3301      	adds	r3, #1
 80228b4:	83fb      	strh	r3, [r7, #30]
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
							i++;
						}
					}

				break;
 80228b6:	e18e      	b.n	8022bd6 <ThreadModbusTask+0x3ca>
					else if(i==1)
 80228b8:	8bfb      	ldrh	r3, [r7, #30]
 80228ba:	2b01      	cmp	r3, #1
 80228bc:	d104      	bne.n	80228c8 <ThreadModbusTask+0xbc>
						i = 0;
 80228be:	2300      	movs	r3, #0
 80228c0:	83fb      	strh	r3, [r7, #30]
						i_max = 0;
 80228c2:	2300      	movs	r3, #0
 80228c4:	83bb      	strh	r3, [r7, #28]
				break;
 80228c6:	e186      	b.n	8022bd6 <ThreadModbusTask+0x3ca>
					else if(i>1)
 80228c8:	8bfb      	ldrh	r3, [r7, #30]
 80228ca:	2b01      	cmp	r3, #1
 80228cc:	f240 8183 	bls.w	8022bd6 <ThreadModbusTask+0x3ca>
						if( (i==6) && (modbus_buffer[modbus_packet_number][1] == 0x10) )
 80228d0:	8bfb      	ldrh	r3, [r7, #30]
 80228d2:	2b06      	cmp	r3, #6
 80228d4:	d11f      	bne.n	8022916 <ThreadModbusTask+0x10a>
 80228d6:	4b74      	ldr	r3, [pc, #464]	; (8022aa8 <ThreadModbusTask+0x29c>)
 80228d8:	781b      	ldrb	r3, [r3, #0]
 80228da:	4a74      	ldr	r2, [pc, #464]	; (8022aac <ThreadModbusTask+0x2a0>)
 80228dc:	021b      	lsls	r3, r3, #8
 80228de:	4413      	add	r3, r2
 80228e0:	3301      	adds	r3, #1
 80228e2:	781b      	ldrb	r3, [r3, #0]
 80228e4:	2b10      	cmp	r3, #16
 80228e6:	d116      	bne.n	8022916 <ThreadModbusTask+0x10a>
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 80228e8:	4b6e      	ldr	r3, [pc, #440]	; (8022aa4 <ThreadModbusTask+0x298>)
 80228ea:	6859      	ldr	r1, [r3, #4]
 80228ec:	4b6e      	ldr	r3, [pc, #440]	; (8022aa8 <ThreadModbusTask+0x29c>)
 80228ee:	781b      	ldrb	r3, [r3, #0]
 80228f0:	461a      	mov	r2, r3
 80228f2:	8bfb      	ldrh	r3, [r7, #30]
 80228f4:	b2c8      	uxtb	r0, r1
 80228f6:	496d      	ldr	r1, [pc, #436]	; (8022aac <ThreadModbusTask+0x2a0>)
 80228f8:	0212      	lsls	r2, r2, #8
 80228fa:	440a      	add	r2, r1
 80228fc:	4413      	add	r3, r2
 80228fe:	4602      	mov	r2, r0
 8022900:	701a      	strb	r2, [r3, #0]
							i_max = 9 + (uint8_t)ModbusEvent.value.v;
 8022902:	4b68      	ldr	r3, [pc, #416]	; (8022aa4 <ThreadModbusTask+0x298>)
 8022904:	685b      	ldr	r3, [r3, #4]
 8022906:	b2db      	uxtb	r3, r3
 8022908:	b29b      	uxth	r3, r3
 802290a:	3309      	adds	r3, #9
 802290c:	83bb      	strh	r3, [r7, #28]
							i++;
 802290e:	8bfb      	ldrh	r3, [r7, #30]
 8022910:	3301      	adds	r3, #1
 8022912:	83fb      	strh	r3, [r7, #30]
				break;
 8022914:	e15f      	b.n	8022bd6 <ThreadModbusTask+0x3ca>
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 8022916:	4b63      	ldr	r3, [pc, #396]	; (8022aa4 <ThreadModbusTask+0x298>)
 8022918:	6859      	ldr	r1, [r3, #4]
 802291a:	4b63      	ldr	r3, [pc, #396]	; (8022aa8 <ThreadModbusTask+0x29c>)
 802291c:	781b      	ldrb	r3, [r3, #0]
 802291e:	461a      	mov	r2, r3
 8022920:	8bfb      	ldrh	r3, [r7, #30]
 8022922:	b2c8      	uxtb	r0, r1
 8022924:	4961      	ldr	r1, [pc, #388]	; (8022aac <ThreadModbusTask+0x2a0>)
 8022926:	0212      	lsls	r2, r2, #8
 8022928:	440a      	add	r2, r1
 802292a:	4413      	add	r3, r2
 802292c:	4602      	mov	r2, r0
 802292e:	701a      	strb	r2, [r3, #0]
							i++;
 8022930:	8bfb      	ldrh	r3, [r7, #30]
 8022932:	3301      	adds	r3, #1
 8022934:	83fb      	strh	r3, [r7, #30]
				break;
 8022936:	e14e      	b.n	8022bd6 <ThreadModbusTask+0x3ca>

				case(0x03):
					if(i==0)
 8022938:	8bfb      	ldrh	r3, [r7, #30]
 802293a:	2b00      	cmp	r3, #0
 802293c:	d104      	bne.n	8022948 <ThreadModbusTask+0x13c>
					{
						i = 0;
 802293e:	2300      	movs	r3, #0
 8022940:	83fb      	strh	r3, [r7, #30]
						i_max = 0;
 8022942:	2300      	movs	r3, #0
 8022944:	83bb      	strh	r3, [r7, #28]
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
							i++;
						}
					}

				break;
 8022946:	e148      	b.n	8022bda <ThreadModbusTask+0x3ce>
					else if(i==1)
 8022948:	8bfb      	ldrh	r3, [r7, #30]
 802294a:	2b01      	cmp	r3, #1
 802294c:	d112      	bne.n	8022974 <ThreadModbusTask+0x168>
						modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 802294e:	4b55      	ldr	r3, [pc, #340]	; (8022aa4 <ThreadModbusTask+0x298>)
 8022950:	6859      	ldr	r1, [r3, #4]
 8022952:	4b55      	ldr	r3, [pc, #340]	; (8022aa8 <ThreadModbusTask+0x29c>)
 8022954:	781b      	ldrb	r3, [r3, #0]
 8022956:	461a      	mov	r2, r3
 8022958:	8bfb      	ldrh	r3, [r7, #30]
 802295a:	b2c8      	uxtb	r0, r1
 802295c:	4953      	ldr	r1, [pc, #332]	; (8022aac <ThreadModbusTask+0x2a0>)
 802295e:	0212      	lsls	r2, r2, #8
 8022960:	440a      	add	r2, r1
 8022962:	4413      	add	r3, r2
 8022964:	4602      	mov	r2, r0
 8022966:	701a      	strb	r2, [r3, #0]
						i++;
 8022968:	8bfb      	ldrh	r3, [r7, #30]
 802296a:	3301      	adds	r3, #1
 802296c:	83fb      	strh	r3, [r7, #30]
						i_max = 8;
 802296e:	2308      	movs	r3, #8
 8022970:	83bb      	strh	r3, [r7, #28]
				break;
 8022972:	e132      	b.n	8022bda <ThreadModbusTask+0x3ce>
					else if(i>1)
 8022974:	8bfb      	ldrh	r3, [r7, #30]
 8022976:	2b01      	cmp	r3, #1
 8022978:	f240 812f 	bls.w	8022bda <ThreadModbusTask+0x3ce>
						if( (i==6) && (modbus_buffer[modbus_packet_number][1] == 0x10) )
 802297c:	8bfb      	ldrh	r3, [r7, #30]
 802297e:	2b06      	cmp	r3, #6
 8022980:	d11f      	bne.n	80229c2 <ThreadModbusTask+0x1b6>
 8022982:	4b49      	ldr	r3, [pc, #292]	; (8022aa8 <ThreadModbusTask+0x29c>)
 8022984:	781b      	ldrb	r3, [r3, #0]
 8022986:	4a49      	ldr	r2, [pc, #292]	; (8022aac <ThreadModbusTask+0x2a0>)
 8022988:	021b      	lsls	r3, r3, #8
 802298a:	4413      	add	r3, r2
 802298c:	3301      	adds	r3, #1
 802298e:	781b      	ldrb	r3, [r3, #0]
 8022990:	2b10      	cmp	r3, #16
 8022992:	d116      	bne.n	80229c2 <ThreadModbusTask+0x1b6>
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 8022994:	4b43      	ldr	r3, [pc, #268]	; (8022aa4 <ThreadModbusTask+0x298>)
 8022996:	6859      	ldr	r1, [r3, #4]
 8022998:	4b43      	ldr	r3, [pc, #268]	; (8022aa8 <ThreadModbusTask+0x29c>)
 802299a:	781b      	ldrb	r3, [r3, #0]
 802299c:	461a      	mov	r2, r3
 802299e:	8bfb      	ldrh	r3, [r7, #30]
 80229a0:	b2c8      	uxtb	r0, r1
 80229a2:	4942      	ldr	r1, [pc, #264]	; (8022aac <ThreadModbusTask+0x2a0>)
 80229a4:	0212      	lsls	r2, r2, #8
 80229a6:	440a      	add	r2, r1
 80229a8:	4413      	add	r3, r2
 80229aa:	4602      	mov	r2, r0
 80229ac:	701a      	strb	r2, [r3, #0]
							i_max = 9 + (uint8_t)ModbusEvent.value.v;
 80229ae:	4b3d      	ldr	r3, [pc, #244]	; (8022aa4 <ThreadModbusTask+0x298>)
 80229b0:	685b      	ldr	r3, [r3, #4]
 80229b2:	b2db      	uxtb	r3, r3
 80229b4:	b29b      	uxth	r3, r3
 80229b6:	3309      	adds	r3, #9
 80229b8:	83bb      	strh	r3, [r7, #28]
							i++;
 80229ba:	8bfb      	ldrh	r3, [r7, #30]
 80229bc:	3301      	adds	r3, #1
 80229be:	83fb      	strh	r3, [r7, #30]
				break;
 80229c0:	e10b      	b.n	8022bda <ThreadModbusTask+0x3ce>
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 80229c2:	4b38      	ldr	r3, [pc, #224]	; (8022aa4 <ThreadModbusTask+0x298>)
 80229c4:	6859      	ldr	r1, [r3, #4]
 80229c6:	4b38      	ldr	r3, [pc, #224]	; (8022aa8 <ThreadModbusTask+0x29c>)
 80229c8:	781b      	ldrb	r3, [r3, #0]
 80229ca:	461a      	mov	r2, r3
 80229cc:	8bfb      	ldrh	r3, [r7, #30]
 80229ce:	b2c8      	uxtb	r0, r1
 80229d0:	4936      	ldr	r1, [pc, #216]	; (8022aac <ThreadModbusTask+0x2a0>)
 80229d2:	0212      	lsls	r2, r2, #8
 80229d4:	440a      	add	r2, r1
 80229d6:	4413      	add	r3, r2
 80229d8:	4602      	mov	r2, r0
 80229da:	701a      	strb	r2, [r3, #0]
							i++;
 80229dc:	8bfb      	ldrh	r3, [r7, #30]
 80229de:	3301      	adds	r3, #1
 80229e0:	83fb      	strh	r3, [r7, #30]
				break;
 80229e2:	e0fa      	b.n	8022bda <ThreadModbusTask+0x3ce>

				case(0x06):
					if(i==0)
 80229e4:	8bfb      	ldrh	r3, [r7, #30]
 80229e6:	2b00      	cmp	r3, #0
 80229e8:	d104      	bne.n	80229f4 <ThreadModbusTask+0x1e8>
					{
						i = 0;
 80229ea:	2300      	movs	r3, #0
 80229ec:	83fb      	strh	r3, [r7, #30]
						i_max = 0;
 80229ee:	2300      	movs	r3, #0
 80229f0:	83bb      	strh	r3, [r7, #28]
 80229f2:	e014      	b.n	8022a1e <ThreadModbusTask+0x212>
					}
					else if(i==1)
 80229f4:	8bfb      	ldrh	r3, [r7, #30]
 80229f6:	2b01      	cmp	r3, #1
 80229f8:	d111      	bne.n	8022a1e <ThreadModbusTask+0x212>
					{
						modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 80229fa:	4b2a      	ldr	r3, [pc, #168]	; (8022aa4 <ThreadModbusTask+0x298>)
 80229fc:	6859      	ldr	r1, [r3, #4]
 80229fe:	4b2a      	ldr	r3, [pc, #168]	; (8022aa8 <ThreadModbusTask+0x29c>)
 8022a00:	781b      	ldrb	r3, [r3, #0]
 8022a02:	461a      	mov	r2, r3
 8022a04:	8bfb      	ldrh	r3, [r7, #30]
 8022a06:	b2c8      	uxtb	r0, r1
 8022a08:	4928      	ldr	r1, [pc, #160]	; (8022aac <ThreadModbusTask+0x2a0>)
 8022a0a:	0212      	lsls	r2, r2, #8
 8022a0c:	440a      	add	r2, r1
 8022a0e:	4413      	add	r3, r2
 8022a10:	4602      	mov	r2, r0
 8022a12:	701a      	strb	r2, [r3, #0]
						i++;
 8022a14:	8bfb      	ldrh	r3, [r7, #30]
 8022a16:	3301      	adds	r3, #1
 8022a18:	83fb      	strh	r3, [r7, #30]
						i_max = 8;
 8022a1a:	2308      	movs	r3, #8
 8022a1c:	83bb      	strh	r3, [r7, #28]
					}
					if(i>1)
 8022a1e:	8bfb      	ldrh	r3, [r7, #30]
 8022a20:	2b01      	cmp	r3, #1
 8022a22:	f240 80dc 	bls.w	8022bde <ThreadModbusTask+0x3d2>
					{
						if( (i==6) && (modbus_buffer[modbus_packet_number][1] == 0x10) )
 8022a26:	8bfb      	ldrh	r3, [r7, #30]
 8022a28:	2b06      	cmp	r3, #6
 8022a2a:	d11f      	bne.n	8022a6c <ThreadModbusTask+0x260>
 8022a2c:	4b1e      	ldr	r3, [pc, #120]	; (8022aa8 <ThreadModbusTask+0x29c>)
 8022a2e:	781b      	ldrb	r3, [r3, #0]
 8022a30:	4a1e      	ldr	r2, [pc, #120]	; (8022aac <ThreadModbusTask+0x2a0>)
 8022a32:	021b      	lsls	r3, r3, #8
 8022a34:	4413      	add	r3, r2
 8022a36:	3301      	adds	r3, #1
 8022a38:	781b      	ldrb	r3, [r3, #0]
 8022a3a:	2b10      	cmp	r3, #16
 8022a3c:	d116      	bne.n	8022a6c <ThreadModbusTask+0x260>
						{
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 8022a3e:	4b19      	ldr	r3, [pc, #100]	; (8022aa4 <ThreadModbusTask+0x298>)
 8022a40:	6859      	ldr	r1, [r3, #4]
 8022a42:	4b19      	ldr	r3, [pc, #100]	; (8022aa8 <ThreadModbusTask+0x29c>)
 8022a44:	781b      	ldrb	r3, [r3, #0]
 8022a46:	461a      	mov	r2, r3
 8022a48:	8bfb      	ldrh	r3, [r7, #30]
 8022a4a:	b2c8      	uxtb	r0, r1
 8022a4c:	4917      	ldr	r1, [pc, #92]	; (8022aac <ThreadModbusTask+0x2a0>)
 8022a4e:	0212      	lsls	r2, r2, #8
 8022a50:	440a      	add	r2, r1
 8022a52:	4413      	add	r3, r2
 8022a54:	4602      	mov	r2, r0
 8022a56:	701a      	strb	r2, [r3, #0]
							i_max = 9 + (uint8_t)ModbusEvent.value.v;
 8022a58:	4b12      	ldr	r3, [pc, #72]	; (8022aa4 <ThreadModbusTask+0x298>)
 8022a5a:	685b      	ldr	r3, [r3, #4]
 8022a5c:	b2db      	uxtb	r3, r3
 8022a5e:	b29b      	uxth	r3, r3
 8022a60:	3309      	adds	r3, #9
 8022a62:	83bb      	strh	r3, [r7, #28]
							i++;
 8022a64:	8bfb      	ldrh	r3, [r7, #30]
 8022a66:	3301      	adds	r3, #1
 8022a68:	83fb      	strh	r3, [r7, #30]
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
							i++;
						}
					}

				break;
 8022a6a:	e0b8      	b.n	8022bde <ThreadModbusTask+0x3d2>
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 8022a6c:	4b0d      	ldr	r3, [pc, #52]	; (8022aa4 <ThreadModbusTask+0x298>)
 8022a6e:	6859      	ldr	r1, [r3, #4]
 8022a70:	4b0d      	ldr	r3, [pc, #52]	; (8022aa8 <ThreadModbusTask+0x29c>)
 8022a72:	781b      	ldrb	r3, [r3, #0]
 8022a74:	461a      	mov	r2, r3
 8022a76:	8bfb      	ldrh	r3, [r7, #30]
 8022a78:	b2c8      	uxtb	r0, r1
 8022a7a:	490c      	ldr	r1, [pc, #48]	; (8022aac <ThreadModbusTask+0x2a0>)
 8022a7c:	0212      	lsls	r2, r2, #8
 8022a7e:	440a      	add	r2, r1
 8022a80:	4413      	add	r3, r2
 8022a82:	4602      	mov	r2, r0
 8022a84:	701a      	strb	r2, [r3, #0]
							i++;
 8022a86:	8bfb      	ldrh	r3, [r7, #30]
 8022a88:	3301      	adds	r3, #1
 8022a8a:	83fb      	strh	r3, [r7, #30]
				break;
 8022a8c:	e0a7      	b.n	8022bde <ThreadModbusTask+0x3d2>

				case(0x10):
					if(i==0)
 8022a8e:	8bfb      	ldrh	r3, [r7, #30]
 8022a90:	2b00      	cmp	r3, #0
 8022a92:	d10d      	bne.n	8022ab0 <ThreadModbusTask+0x2a4>
					{
						i = 0;
 8022a94:	2300      	movs	r3, #0
 8022a96:	83fb      	strh	r3, [r7, #30]
						i_max = 0;
 8022a98:	2300      	movs	r3, #0
 8022a9a:	83bb      	strh	r3, [r7, #28]
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
							i++;
						}
					}

				break;
 8022a9c:	e0a1      	b.n	8022be2 <ThreadModbusTask+0x3d6>
 8022a9e:	bf00      	nop
 8022aa0:	2000830c 	.word	0x2000830c
 8022aa4:	2000a274 	.word	0x2000a274
 8022aa8:	2000802e 	.word	0x2000802e
 8022aac:	20008310 	.word	0x20008310
					else if(i==1)
 8022ab0:	8bfb      	ldrh	r3, [r7, #30]
 8022ab2:	2b01      	cmp	r3, #1
 8022ab4:	d110      	bne.n	8022ad8 <ThreadModbusTask+0x2cc>
						modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 8022ab6:	4b77      	ldr	r3, [pc, #476]	; (8022c94 <ThreadModbusTask+0x488>)
 8022ab8:	6859      	ldr	r1, [r3, #4]
 8022aba:	4b77      	ldr	r3, [pc, #476]	; (8022c98 <ThreadModbusTask+0x48c>)
 8022abc:	781b      	ldrb	r3, [r3, #0]
 8022abe:	461a      	mov	r2, r3
 8022ac0:	8bfb      	ldrh	r3, [r7, #30]
 8022ac2:	b2c8      	uxtb	r0, r1
 8022ac4:	4975      	ldr	r1, [pc, #468]	; (8022c9c <ThreadModbusTask+0x490>)
 8022ac6:	0212      	lsls	r2, r2, #8
 8022ac8:	440a      	add	r2, r1
 8022aca:	4413      	add	r3, r2
 8022acc:	4602      	mov	r2, r0
 8022ace:	701a      	strb	r2, [r3, #0]
						i++;
 8022ad0:	8bfb      	ldrh	r3, [r7, #30]
 8022ad2:	3301      	adds	r3, #1
 8022ad4:	83fb      	strh	r3, [r7, #30]
				break;
 8022ad6:	e084      	b.n	8022be2 <ThreadModbusTask+0x3d6>
					else if(i>1)
 8022ad8:	8bfb      	ldrh	r3, [r7, #30]
 8022ada:	2b01      	cmp	r3, #1
 8022adc:	f240 8081 	bls.w	8022be2 <ThreadModbusTask+0x3d6>
						if( (i==6) && (modbus_buffer[modbus_packet_number][1] == 0x10) )
 8022ae0:	8bfb      	ldrh	r3, [r7, #30]
 8022ae2:	2b06      	cmp	r3, #6
 8022ae4:	d11f      	bne.n	8022b26 <ThreadModbusTask+0x31a>
 8022ae6:	4b6c      	ldr	r3, [pc, #432]	; (8022c98 <ThreadModbusTask+0x48c>)
 8022ae8:	781b      	ldrb	r3, [r3, #0]
 8022aea:	4a6c      	ldr	r2, [pc, #432]	; (8022c9c <ThreadModbusTask+0x490>)
 8022aec:	021b      	lsls	r3, r3, #8
 8022aee:	4413      	add	r3, r2
 8022af0:	3301      	adds	r3, #1
 8022af2:	781b      	ldrb	r3, [r3, #0]
 8022af4:	2b10      	cmp	r3, #16
 8022af6:	d116      	bne.n	8022b26 <ThreadModbusTask+0x31a>
								modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 8022af8:	4b66      	ldr	r3, [pc, #408]	; (8022c94 <ThreadModbusTask+0x488>)
 8022afa:	6859      	ldr	r1, [r3, #4]
 8022afc:	4b66      	ldr	r3, [pc, #408]	; (8022c98 <ThreadModbusTask+0x48c>)
 8022afe:	781b      	ldrb	r3, [r3, #0]
 8022b00:	461a      	mov	r2, r3
 8022b02:	8bfb      	ldrh	r3, [r7, #30]
 8022b04:	b2c8      	uxtb	r0, r1
 8022b06:	4965      	ldr	r1, [pc, #404]	; (8022c9c <ThreadModbusTask+0x490>)
 8022b08:	0212      	lsls	r2, r2, #8
 8022b0a:	440a      	add	r2, r1
 8022b0c:	4413      	add	r3, r2
 8022b0e:	4602      	mov	r2, r0
 8022b10:	701a      	strb	r2, [r3, #0]
								i_max = 9 + (uint8_t)ModbusEvent.value.v;
 8022b12:	4b60      	ldr	r3, [pc, #384]	; (8022c94 <ThreadModbusTask+0x488>)
 8022b14:	685b      	ldr	r3, [r3, #4]
 8022b16:	b2db      	uxtb	r3, r3
 8022b18:	b29b      	uxth	r3, r3
 8022b1a:	3309      	adds	r3, #9
 8022b1c:	83bb      	strh	r3, [r7, #28]
								i++;
 8022b1e:	8bfb      	ldrh	r3, [r7, #30]
 8022b20:	3301      	adds	r3, #1
 8022b22:	83fb      	strh	r3, [r7, #30]
				break;
 8022b24:	e05d      	b.n	8022be2 <ThreadModbusTask+0x3d6>
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 8022b26:	4b5b      	ldr	r3, [pc, #364]	; (8022c94 <ThreadModbusTask+0x488>)
 8022b28:	6859      	ldr	r1, [r3, #4]
 8022b2a:	4b5b      	ldr	r3, [pc, #364]	; (8022c98 <ThreadModbusTask+0x48c>)
 8022b2c:	781b      	ldrb	r3, [r3, #0]
 8022b2e:	461a      	mov	r2, r3
 8022b30:	8bfb      	ldrh	r3, [r7, #30]
 8022b32:	b2c8      	uxtb	r0, r1
 8022b34:	4959      	ldr	r1, [pc, #356]	; (8022c9c <ThreadModbusTask+0x490>)
 8022b36:	0212      	lsls	r2, r2, #8
 8022b38:	440a      	add	r2, r1
 8022b3a:	4413      	add	r3, r2
 8022b3c:	4602      	mov	r2, r0
 8022b3e:	701a      	strb	r2, [r3, #0]
							i++;
 8022b40:	8bfb      	ldrh	r3, [r7, #30]
 8022b42:	3301      	adds	r3, #1
 8022b44:	83fb      	strh	r3, [r7, #30]
				break;
 8022b46:	e04c      	b.n	8022be2 <ThreadModbusTask+0x3d6>

				default:
					if(i==0)
 8022b48:	8bfb      	ldrh	r3, [r7, #30]
 8022b4a:	2b00      	cmp	r3, #0
 8022b4c:	d104      	bne.n	8022b58 <ThreadModbusTask+0x34c>
					{
						i = 0;
 8022b4e:	2300      	movs	r3, #0
 8022b50:	83fb      	strh	r3, [r7, #30]
						i_max = 0;
 8022b52:	2300      	movs	r3, #0
 8022b54:	83bb      	strh	r3, [r7, #28]
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
							i++;
						}
					}

				break;
 8022b56:	e046      	b.n	8022be6 <ThreadModbusTask+0x3da>
					else if(i==1)
 8022b58:	8bfb      	ldrh	r3, [r7, #30]
 8022b5a:	2b01      	cmp	r3, #1
 8022b5c:	d104      	bne.n	8022b68 <ThreadModbusTask+0x35c>
						i = 0;
 8022b5e:	2300      	movs	r3, #0
 8022b60:	83fb      	strh	r3, [r7, #30]
						i_max = 0;
 8022b62:	2300      	movs	r3, #0
 8022b64:	83bb      	strh	r3, [r7, #28]
				break;
 8022b66:	e03e      	b.n	8022be6 <ThreadModbusTask+0x3da>
					else if(i>1)
 8022b68:	8bfb      	ldrh	r3, [r7, #30]
 8022b6a:	2b01      	cmp	r3, #1
 8022b6c:	d93b      	bls.n	8022be6 <ThreadModbusTask+0x3da>
						if( (i==6) && (modbus_buffer[modbus_packet_number][1] == 0x10) )
 8022b6e:	8bfb      	ldrh	r3, [r7, #30]
 8022b70:	2b06      	cmp	r3, #6
 8022b72:	d11f      	bne.n	8022bb4 <ThreadModbusTask+0x3a8>
 8022b74:	4b48      	ldr	r3, [pc, #288]	; (8022c98 <ThreadModbusTask+0x48c>)
 8022b76:	781b      	ldrb	r3, [r3, #0]
 8022b78:	4a48      	ldr	r2, [pc, #288]	; (8022c9c <ThreadModbusTask+0x490>)
 8022b7a:	021b      	lsls	r3, r3, #8
 8022b7c:	4413      	add	r3, r2
 8022b7e:	3301      	adds	r3, #1
 8022b80:	781b      	ldrb	r3, [r3, #0]
 8022b82:	2b10      	cmp	r3, #16
 8022b84:	d116      	bne.n	8022bb4 <ThreadModbusTask+0x3a8>
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 8022b86:	4b43      	ldr	r3, [pc, #268]	; (8022c94 <ThreadModbusTask+0x488>)
 8022b88:	6859      	ldr	r1, [r3, #4]
 8022b8a:	4b43      	ldr	r3, [pc, #268]	; (8022c98 <ThreadModbusTask+0x48c>)
 8022b8c:	781b      	ldrb	r3, [r3, #0]
 8022b8e:	461a      	mov	r2, r3
 8022b90:	8bfb      	ldrh	r3, [r7, #30]
 8022b92:	b2c8      	uxtb	r0, r1
 8022b94:	4941      	ldr	r1, [pc, #260]	; (8022c9c <ThreadModbusTask+0x490>)
 8022b96:	0212      	lsls	r2, r2, #8
 8022b98:	440a      	add	r2, r1
 8022b9a:	4413      	add	r3, r2
 8022b9c:	4602      	mov	r2, r0
 8022b9e:	701a      	strb	r2, [r3, #0]
							i_max = 9 + (uint8_t)ModbusEvent.value.v;
 8022ba0:	4b3c      	ldr	r3, [pc, #240]	; (8022c94 <ThreadModbusTask+0x488>)
 8022ba2:	685b      	ldr	r3, [r3, #4]
 8022ba4:	b2db      	uxtb	r3, r3
 8022ba6:	b29b      	uxth	r3, r3
 8022ba8:	3309      	adds	r3, #9
 8022baa:	83bb      	strh	r3, [r7, #28]
							i++;
 8022bac:	8bfb      	ldrh	r3, [r7, #30]
 8022bae:	3301      	adds	r3, #1
 8022bb0:	83fb      	strh	r3, [r7, #30]
				break;
 8022bb2:	e018      	b.n	8022be6 <ThreadModbusTask+0x3da>
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 8022bb4:	4b37      	ldr	r3, [pc, #220]	; (8022c94 <ThreadModbusTask+0x488>)
 8022bb6:	6859      	ldr	r1, [r3, #4]
 8022bb8:	4b37      	ldr	r3, [pc, #220]	; (8022c98 <ThreadModbusTask+0x48c>)
 8022bba:	781b      	ldrb	r3, [r3, #0]
 8022bbc:	461a      	mov	r2, r3
 8022bbe:	8bfb      	ldrh	r3, [r7, #30]
 8022bc0:	b2c8      	uxtb	r0, r1
 8022bc2:	4936      	ldr	r1, [pc, #216]	; (8022c9c <ThreadModbusTask+0x490>)
 8022bc4:	0212      	lsls	r2, r2, #8
 8022bc6:	440a      	add	r2, r1
 8022bc8:	4413      	add	r3, r2
 8022bca:	4602      	mov	r2, r0
 8022bcc:	701a      	strb	r2, [r3, #0]
							i++;
 8022bce:	8bfb      	ldrh	r3, [r7, #30]
 8022bd0:	3301      	adds	r3, #1
 8022bd2:	83fb      	strh	r3, [r7, #30]
				break;
 8022bd4:	e007      	b.n	8022be6 <ThreadModbusTask+0x3da>
				break;
 8022bd6:	bf00      	nop
 8022bd8:	e006      	b.n	8022be8 <ThreadModbusTask+0x3dc>
				break;
 8022bda:	bf00      	nop
 8022bdc:	e004      	b.n	8022be8 <ThreadModbusTask+0x3dc>
				break;
 8022bde:	bf00      	nop
 8022be0:	e002      	b.n	8022be8 <ThreadModbusTask+0x3dc>
				break;
 8022be2:	bf00      	nop
 8022be4:	e000      	b.n	8022be8 <ThreadModbusTask+0x3dc>
				break;
 8022be6:	bf00      	nop
			}
			if( (i >= i_max) && (i != 0) && (i_max != 0) ) // если число принятых байт соответствует длине соответствующей команды
 8022be8:	8bfa      	ldrh	r2, [r7, #30]
 8022bea:	8bbb      	ldrh	r3, [r7, #28]
 8022bec:	429a      	cmp	r2, r3
 8022bee:	d34c      	bcc.n	8022c8a <ThreadModbusTask+0x47e>
 8022bf0:	8bfb      	ldrh	r3, [r7, #30]
 8022bf2:	2b00      	cmp	r3, #0
 8022bf4:	d049      	beq.n	8022c8a <ThreadModbusTask+0x47e>
 8022bf6:	8bbb      	ldrh	r3, [r7, #28]
 8022bf8:	2b00      	cmp	r3, #0
 8022bfa:	d046      	beq.n	8022c8a <ThreadModbusTask+0x47e>
			{
				crc_temp = CRC16(&modbus_buffer[modbus_packet_number][0], i_max-2); // считаем контрольную сумму принятого пакета
 8022bfc:	4b26      	ldr	r3, [pc, #152]	; (8022c98 <ThreadModbusTask+0x48c>)
 8022bfe:	781b      	ldrb	r3, [r3, #0]
 8022c00:	021b      	lsls	r3, r3, #8
 8022c02:	4a26      	ldr	r2, [pc, #152]	; (8022c9c <ThreadModbusTask+0x490>)
 8022c04:	441a      	add	r2, r3
 8022c06:	8bbb      	ldrh	r3, [r7, #28]
 8022c08:	3b02      	subs	r3, #2
 8022c0a:	4619      	mov	r1, r3
 8022c0c:	4610      	mov	r0, r2
 8022c0e:	f00b f809 	bl	802dc24 <CRC16>
 8022c12:	4603      	mov	r3, r0
 8022c14:	4a22      	ldr	r2, [pc, #136]	; (8022ca0 <ThreadModbusTask+0x494>)
 8022c16:	6013      	str	r3, [r2, #0]
				if( ( ((crc_temp>>8)&0x00FF) == modbus_buffer[modbus_packet_number][i_max-1] ) && ( (crc_temp&0x00FF) == modbus_buffer[modbus_packet_number][i_max-2]) ) // проверяем контрольную сумму принятого пакета
 8022c18:	4b21      	ldr	r3, [pc, #132]	; (8022ca0 <ThreadModbusTask+0x494>)
 8022c1a:	681b      	ldr	r3, [r3, #0]
 8022c1c:	0a1b      	lsrs	r3, r3, #8
 8022c1e:	b2db      	uxtb	r3, r3
 8022c20:	4a1d      	ldr	r2, [pc, #116]	; (8022c98 <ThreadModbusTask+0x48c>)
 8022c22:	7812      	ldrb	r2, [r2, #0]
 8022c24:	4611      	mov	r1, r2
 8022c26:	8bba      	ldrh	r2, [r7, #28]
 8022c28:	3a01      	subs	r2, #1
 8022c2a:	481c      	ldr	r0, [pc, #112]	; (8022c9c <ThreadModbusTask+0x490>)
 8022c2c:	0209      	lsls	r1, r1, #8
 8022c2e:	4401      	add	r1, r0
 8022c30:	440a      	add	r2, r1
 8022c32:	7812      	ldrb	r2, [r2, #0]
 8022c34:	4293      	cmp	r3, r2
 8022c36:	d124      	bne.n	8022c82 <ThreadModbusTask+0x476>
 8022c38:	4b19      	ldr	r3, [pc, #100]	; (8022ca0 <ThreadModbusTask+0x494>)
 8022c3a:	681b      	ldr	r3, [r3, #0]
 8022c3c:	b2db      	uxtb	r3, r3
 8022c3e:	4a16      	ldr	r2, [pc, #88]	; (8022c98 <ThreadModbusTask+0x48c>)
 8022c40:	7812      	ldrb	r2, [r2, #0]
 8022c42:	4611      	mov	r1, r2
 8022c44:	8bba      	ldrh	r2, [r7, #28]
 8022c46:	3a02      	subs	r2, #2
 8022c48:	4814      	ldr	r0, [pc, #80]	; (8022c9c <ThreadModbusTask+0x490>)
 8022c4a:	0209      	lsls	r1, r1, #8
 8022c4c:	4401      	add	r1, r0
 8022c4e:	440a      	add	r2, r1
 8022c50:	7812      	ldrb	r2, [r2, #0]
 8022c52:	4293      	cmp	r3, r2
 8022c54:	d115      	bne.n	8022c82 <ThreadModbusTask+0x476>
				{
					modbus_packet_number1 = modbus_packet_number;
 8022c56:	4b10      	ldr	r3, [pc, #64]	; (8022c98 <ThreadModbusTask+0x48c>)
 8022c58:	781a      	ldrb	r2, [r3, #0]
 8022c5a:	4b12      	ldr	r3, [pc, #72]	; (8022ca4 <ThreadModbusTask+0x498>)
 8022c5c:	701a      	strb	r2, [r3, #0]
					modbus_packet_number++;
 8022c5e:	4b0e      	ldr	r3, [pc, #56]	; (8022c98 <ThreadModbusTask+0x48c>)
 8022c60:	781b      	ldrb	r3, [r3, #0]
 8022c62:	3301      	adds	r3, #1
 8022c64:	b2da      	uxtb	r2, r3
 8022c66:	4b0c      	ldr	r3, [pc, #48]	; (8022c98 <ThreadModbusTask+0x48c>)
 8022c68:	701a      	strb	r2, [r3, #0]
					if( modbus_packet_number >= 20)
 8022c6a:	4b0b      	ldr	r3, [pc, #44]	; (8022c98 <ThreadModbusTask+0x48c>)
 8022c6c:	781b      	ldrb	r3, [r3, #0]
 8022c6e:	2b13      	cmp	r3, #19
 8022c70:	d902      	bls.n	8022c78 <ThreadModbusTask+0x46c>
					{
						modbus_packet_number = 0;
 8022c72:	4b09      	ldr	r3, [pc, #36]	; (8022c98 <ThreadModbusTask+0x48c>)
 8022c74:	2200      	movs	r2, #0
 8022c76:	701a      	strb	r2, [r3, #0]
					}

					osSemaphoreRelease(ModbusPacketReceiveHandle);
 8022c78:	4b0b      	ldr	r3, [pc, #44]	; (8022ca8 <ThreadModbusTask+0x49c>)
 8022c7a:	681b      	ldr	r3, [r3, #0]
 8022c7c:	4618      	mov	r0, r3
 8022c7e:	f7f6 fc17 	bl	80194b0 <osSemaphoreRelease>
				}

				i = 0;     // обнуляем значение текущего принятого байта
 8022c82:	2300      	movs	r3, #0
 8022c84:	83fb      	strh	r3, [r7, #30]
				i_max = 0; // обнуляем максимальное значение принятого байта
 8022c86:	2300      	movs	r3, #0
 8022c88:	83bb      	strh	r3, [r7, #28]
		}




		osDelay(1);
 8022c8a:	2001      	movs	r0, #1
 8022c8c:	f7f6 fa2b 	bl	80190e6 <osDelay>
		ModbusEvent = osMessageGet(ModbusQueueHandle, osWaitForever); // ожидаем сообщение
 8022c90:	e5c2      	b.n	8022818 <ThreadModbusTask+0xc>
 8022c92:	bf00      	nop
 8022c94:	2000a274 	.word	0x2000a274
 8022c98:	2000802e 	.word	0x2000802e
 8022c9c:	20008310 	.word	0x20008310
 8022ca0:	2000a280 	.word	0x2000a280
 8022ca4:	2000802f 	.word	0x2000802f
 8022ca8:	20009b0c 	.word	0x20009b0c

08022cac <ThreadReadRegistersTask>:
extern status_register_struct status_registers;
extern control_register_struct control_registers;


void ThreadReadRegistersTask(void const * argument)
{
 8022cac:	b580      	push	{r7, lr}
 8022cae:	b082      	sub	sp, #8
 8022cb0:	af00      	add	r7, sp, #0
 8022cb2:	6078      	str	r0, [r7, #4]
	read_status_registers(); // вычитываем регистры
 8022cb4:	f009 fa86 	bl	802c1c4 <read_status_registers>
	read_control_registers();
 8022cb8:	f00a faec 	bl	802d294 <read_control_registers>
	osDelay(2000); // ждем пока будет получен статус фаз А1,А2,В1,В2,С1,С2
 8022cbc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8022cc0:	f7f6 fa11 	bl	80190e6 <osDelay>
	osThreadResume(MainTaskHandle); // запускаем основной процесс
 8022cc4:	4b0d      	ldr	r3, [pc, #52]	; (8022cfc <ThreadReadRegistersTask+0x50>)
 8022cc6:	681b      	ldr	r3, [r3, #0]
 8022cc8:	4618      	mov	r0, r3
 8022cca:	f7f6 fd0f 	bl	80196ec <osThreadResume>
	osThreadResume(M95TaskHandle);  // запускаем процесс модема
 8022cce:	4b0c      	ldr	r3, [pc, #48]	; (8022d00 <ThreadReadRegistersTask+0x54>)
 8022cd0:	681b      	ldr	r3, [r3, #0]
 8022cd2:	4618      	mov	r0, r3
 8022cd4:	f7f6 fd0a 	bl	80196ec <osThreadResume>
	osThreadResume(GetCurrentTaskHandle);  // запускаем процесс модема
 8022cd8:	4b0a      	ldr	r3, [pc, #40]	; (8022d04 <ThreadReadRegistersTask+0x58>)
 8022cda:	681b      	ldr	r3, [r3, #0]
 8022cdc:	4618      	mov	r0, r3
 8022cde:	f7f6 fd05 	bl	80196ec <osThreadResume>
	osDelay(1000); //ждем 1 секунду
 8022ce2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8022ce6:	f7f6 f9fe 	bl	80190e6 <osDelay>


	for(;;)
	{

		read_status_registers(); // вычитываем регистры
 8022cea:	f009 fa6b 	bl	802c1c4 <read_status_registers>
		read_control_registers();
 8022cee:	f00a fad1 	bl	802d294 <read_control_registers>

		osDelay(1000); // ждем 1 секунду
 8022cf2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8022cf6:	f7f6 f9f6 	bl	80190e6 <osDelay>
		read_status_registers(); // вычитываем регистры
 8022cfa:	e7f6      	b.n	8022cea <ThreadReadRegistersTask+0x3e>
 8022cfc:	20009838 	.word	0x20009838
 8022d00:	20009a08 	.word	0x20009a08
 8022d04:	20009788 	.word	0x20009788

08022d08 <meter_rx_buffer_clear>:
uint8_t current_buf[13] = {0x01, 0x52, 0x31, 0x02, 0x43, 0x55, 0x52, 0x52, 0x45, 0x28, 0x29, 0x03, 0x5A};
uint8_t power_buf[13] = {0x01, 0x52, 0x31, 0x02, 0x50, 0x4F, 0x57, 0x50, 0x50, 0x28, 0x29, 0x03, 0x6F};
uint8_t tarif_buf[13] = {0x01, 0x52, 0x31, 0x02, 0x45, 0x54, 0x30, 0x50, 0x45, 0x28, 0x29, 0x03, 0x37};

void meter_rx_buffer_clear (void)
{
 8022d08:	b480      	push	{r7}
 8022d0a:	b083      	sub	sp, #12
 8022d0c:	af00      	add	r7, sp, #0
	for(uint16_t i=0; i<256; i++)
 8022d0e:	2300      	movs	r3, #0
 8022d10:	80fb      	strh	r3, [r7, #6]
 8022d12:	e006      	b.n	8022d22 <meter_rx_buffer_clear+0x1a>
	{
		meter_rx_buffer[i] = 0;
 8022d14:	88fb      	ldrh	r3, [r7, #6]
 8022d16:	4a08      	ldr	r2, [pc, #32]	; (8022d38 <meter_rx_buffer_clear+0x30>)
 8022d18:	2100      	movs	r1, #0
 8022d1a:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i=0; i<256; i++)
 8022d1c:	88fb      	ldrh	r3, [r7, #6]
 8022d1e:	3301      	adds	r3, #1
 8022d20:	80fb      	strh	r3, [r7, #6]
 8022d22:	88fb      	ldrh	r3, [r7, #6]
 8022d24:	2bff      	cmp	r3, #255	; 0xff
 8022d26:	d9f5      	bls.n	8022d14 <meter_rx_buffer_clear+0xc>
	}
}
 8022d28:	bf00      	nop
 8022d2a:	bf00      	nop
 8022d2c:	370c      	adds	r7, #12
 8022d2e:	46bd      	mov	sp, r7
 8022d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022d34:	4770      	bx	lr
 8022d36:	bf00      	nop
 8022d38:	20009a0c 	.word	0x20009a0c

08022d3c <ce303_voltage>:

void ce303_voltage (uint8_t meter_id) // функция чтения напряения из счетчика СЕ303
{
 8022d3c:	b580      	push	{r7, lr}
 8022d3e:	b086      	sub	sp, #24
 8022d40:	af00      	add	r7, sp, #0
 8022d42:	4603      	mov	r3, r0
 8022d44:	71fb      	strb	r3, [r7, #7]
	uint16_t temp_mil;
	uint8_t voltage_a_state; // переменные состояния прочтения значений напряжения ( если переменная равна 0, то значение напряжения не прочитано, если 1 - значение прочитанно )
	uint8_t voltage_b_state;
	uint8_t voltage_c_state;

	if( (meter_id>99)&&(meter_id<1000) )
 8022d46:	79fb      	ldrb	r3, [r7, #7]
 8022d48:	2b63      	cmp	r3, #99	; 0x63
 8022d4a:	d962      	bls.n	8022e12 <ce303_voltage+0xd6>
	{
		start_buf[0] = 0x2F;
 8022d4c:	4b9d      	ldr	r3, [pc, #628]	; (8022fc4 <ce303_voltage+0x288>)
 8022d4e:	222f      	movs	r2, #47	; 0x2f
 8022d50:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 8022d52:	4b9c      	ldr	r3, [pc, #624]	; (8022fc4 <ce303_voltage+0x288>)
 8022d54:	223f      	movs	r2, #63	; 0x3f
 8022d56:	705a      	strb	r2, [r3, #1]
		start_buf[2] = (meter_id/100) + 0x30;
 8022d58:	79fb      	ldrb	r3, [r7, #7]
 8022d5a:	4a9b      	ldr	r2, [pc, #620]	; (8022fc8 <ce303_voltage+0x28c>)
 8022d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8022d60:	095b      	lsrs	r3, r3, #5
 8022d62:	b2db      	uxtb	r3, r3
 8022d64:	3330      	adds	r3, #48	; 0x30
 8022d66:	b2da      	uxtb	r2, r3
 8022d68:	4b96      	ldr	r3, [pc, #600]	; (8022fc4 <ce303_voltage+0x288>)
 8022d6a:	709a      	strb	r2, [r3, #2]
		start_buf[3] = ((meter_id - (meter_id/100)*100)/10) + 0x30;
 8022d6c:	79fa      	ldrb	r2, [r7, #7]
 8022d6e:	79fb      	ldrb	r3, [r7, #7]
 8022d70:	4995      	ldr	r1, [pc, #596]	; (8022fc8 <ce303_voltage+0x28c>)
 8022d72:	fba1 1303 	umull	r1, r3, r1, r3
 8022d76:	095b      	lsrs	r3, r3, #5
 8022d78:	b2db      	uxtb	r3, r3
 8022d7a:	4619      	mov	r1, r3
 8022d7c:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8022d80:	fb03 f301 	mul.w	r3, r3, r1
 8022d84:	4413      	add	r3, r2
 8022d86:	4a91      	ldr	r2, [pc, #580]	; (8022fcc <ce303_voltage+0x290>)
 8022d88:	fb82 1203 	smull	r1, r2, r2, r3
 8022d8c:	1092      	asrs	r2, r2, #2
 8022d8e:	17db      	asrs	r3, r3, #31
 8022d90:	1ad3      	subs	r3, r2, r3
 8022d92:	b2db      	uxtb	r3, r3
 8022d94:	3330      	adds	r3, #48	; 0x30
 8022d96:	b2da      	uxtb	r2, r3
 8022d98:	4b8a      	ldr	r3, [pc, #552]	; (8022fc4 <ce303_voltage+0x288>)
 8022d9a:	70da      	strb	r2, [r3, #3]
		start_buf[4] = ((meter_id - ((meter_id/100)*100)) - (((meter_id - ((meter_id/100)*100))/10)*10)) + 0x30 ;
 8022d9c:	79fa      	ldrb	r2, [r7, #7]
 8022d9e:	79fb      	ldrb	r3, [r7, #7]
 8022da0:	4989      	ldr	r1, [pc, #548]	; (8022fc8 <ce303_voltage+0x28c>)
 8022da2:	fba1 1303 	umull	r1, r3, r1, r3
 8022da6:	095b      	lsrs	r3, r3, #5
 8022da8:	b2db      	uxtb	r3, r3
 8022daa:	4619      	mov	r1, r3
 8022dac:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8022db0:	fb03 f301 	mul.w	r3, r3, r1
 8022db4:	441a      	add	r2, r3
 8022db6:	4b85      	ldr	r3, [pc, #532]	; (8022fcc <ce303_voltage+0x290>)
 8022db8:	fb83 1302 	smull	r1, r3, r3, r2
 8022dbc:	1099      	asrs	r1, r3, #2
 8022dbe:	17d3      	asrs	r3, r2, #31
 8022dc0:	1ac9      	subs	r1, r1, r3
 8022dc2:	460b      	mov	r3, r1
 8022dc4:	009b      	lsls	r3, r3, #2
 8022dc6:	440b      	add	r3, r1
 8022dc8:	005b      	lsls	r3, r3, #1
 8022dca:	1ad1      	subs	r1, r2, r3
 8022dcc:	b2cb      	uxtb	r3, r1
 8022dce:	3330      	adds	r3, #48	; 0x30
 8022dd0:	b2da      	uxtb	r2, r3
 8022dd2:	4b7c      	ldr	r3, [pc, #496]	; (8022fc4 <ce303_voltage+0x288>)
 8022dd4:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x21;
 8022dd6:	4b7b      	ldr	r3, [pc, #492]	; (8022fc4 <ce303_voltage+0x288>)
 8022dd8:	2221      	movs	r2, #33	; 0x21
 8022dda:	715a      	strb	r2, [r3, #5]
		start_buf[6] = 0x0D;
 8022ddc:	4b79      	ldr	r3, [pc, #484]	; (8022fc4 <ce303_voltage+0x288>)
 8022dde:	220d      	movs	r2, #13
 8022de0:	719a      	strb	r2, [r3, #6]
		start_buf[7] = 0x0A;
 8022de2:	4b78      	ldr	r3, [pc, #480]	; (8022fc4 <ce303_voltage+0x288>)
 8022de4:	220a      	movs	r2, #10
 8022de6:	71da      	strb	r2, [r3, #7]

		meter_rx_number = 0;
 8022de8:	4b79      	ldr	r3, [pc, #484]	; (8022fd0 <ce303_voltage+0x294>)
 8022dea:	2200      	movs	r2, #0
 8022dec:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 8022dee:	f7ff ff8b 	bl	8022d08 <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 8022df2:	2201      	movs	r2, #1
 8022df4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8022df8:	4876      	ldr	r0, [pc, #472]	; (8022fd4 <ce303_voltage+0x298>)
 8022dfa:	f7f1 fd49 	bl	8014890 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 8); // передаем команду
 8022dfe:	2208      	movs	r2, #8
 8022e00:	4970      	ldr	r1, [pc, #448]	; (8022fc4 <ce303_voltage+0x288>)
 8022e02:	4875      	ldr	r0, [pc, #468]	; (8022fd8 <ce303_voltage+0x29c>)
 8022e04:	f7f5 f810 	bl	8017e28 <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 8022e08:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8022e0c:	f7f0 f85c 	bl	8012ec8 <HAL_Delay>
 8022e10:	e072      	b.n	8022ef8 <ce303_voltage+0x1bc>

	}
	else if( (meter_id>9)&&(meter_id<100) )
 8022e12:	79fb      	ldrb	r3, [r7, #7]
 8022e14:	2b09      	cmp	r3, #9
 8022e16:	d944      	bls.n	8022ea2 <ce303_voltage+0x166>
 8022e18:	79fb      	ldrb	r3, [r7, #7]
 8022e1a:	2b63      	cmp	r3, #99	; 0x63
 8022e1c:	d841      	bhi.n	8022ea2 <ce303_voltage+0x166>
	{
		start_buf[0] = 0x2F;
 8022e1e:	4b69      	ldr	r3, [pc, #420]	; (8022fc4 <ce303_voltage+0x288>)
 8022e20:	222f      	movs	r2, #47	; 0x2f
 8022e22:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 8022e24:	4b67      	ldr	r3, [pc, #412]	; (8022fc4 <ce303_voltage+0x288>)
 8022e26:	223f      	movs	r2, #63	; 0x3f
 8022e28:	705a      	strb	r2, [r3, #1]
		start_buf[2] = (meter_id/10) + 0x30;
 8022e2a:	79fb      	ldrb	r3, [r7, #7]
 8022e2c:	4a6b      	ldr	r2, [pc, #428]	; (8022fdc <ce303_voltage+0x2a0>)
 8022e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8022e32:	08db      	lsrs	r3, r3, #3
 8022e34:	b2db      	uxtb	r3, r3
 8022e36:	3330      	adds	r3, #48	; 0x30
 8022e38:	b2da      	uxtb	r2, r3
 8022e3a:	4b62      	ldr	r3, [pc, #392]	; (8022fc4 <ce303_voltage+0x288>)
 8022e3c:	709a      	strb	r2, [r3, #2]
		start_buf[3] = (meter_id - ((meter_id/10)*10)) + 0x30;
 8022e3e:	79fb      	ldrb	r3, [r7, #7]
 8022e40:	4a66      	ldr	r2, [pc, #408]	; (8022fdc <ce303_voltage+0x2a0>)
 8022e42:	fba2 2303 	umull	r2, r3, r2, r3
 8022e46:	08db      	lsrs	r3, r3, #3
 8022e48:	b2db      	uxtb	r3, r3
 8022e4a:	461a      	mov	r2, r3
 8022e4c:	0152      	lsls	r2, r2, #5
 8022e4e:	1ad2      	subs	r2, r2, r3
 8022e50:	0092      	lsls	r2, r2, #2
 8022e52:	1ad3      	subs	r3, r2, r3
 8022e54:	005b      	lsls	r3, r3, #1
 8022e56:	b2da      	uxtb	r2, r3
 8022e58:	79fb      	ldrb	r3, [r7, #7]
 8022e5a:	4413      	add	r3, r2
 8022e5c:	b2db      	uxtb	r3, r3
 8022e5e:	3330      	adds	r3, #48	; 0x30
 8022e60:	b2da      	uxtb	r2, r3
 8022e62:	4b58      	ldr	r3, [pc, #352]	; (8022fc4 <ce303_voltage+0x288>)
 8022e64:	70da      	strb	r2, [r3, #3]
		start_buf[4] = 0x21;
 8022e66:	4b57      	ldr	r3, [pc, #348]	; (8022fc4 <ce303_voltage+0x288>)
 8022e68:	2221      	movs	r2, #33	; 0x21
 8022e6a:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x0D;
 8022e6c:	4b55      	ldr	r3, [pc, #340]	; (8022fc4 <ce303_voltage+0x288>)
 8022e6e:	220d      	movs	r2, #13
 8022e70:	715a      	strb	r2, [r3, #5]
		start_buf[6] = 0x0A;
 8022e72:	4b54      	ldr	r3, [pc, #336]	; (8022fc4 <ce303_voltage+0x288>)
 8022e74:	220a      	movs	r2, #10
 8022e76:	719a      	strb	r2, [r3, #6]

		meter_rx_number = 0;
 8022e78:	4b55      	ldr	r3, [pc, #340]	; (8022fd0 <ce303_voltage+0x294>)
 8022e7a:	2200      	movs	r2, #0
 8022e7c:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 8022e7e:	f7ff ff43 	bl	8022d08 <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 8022e82:	2201      	movs	r2, #1
 8022e84:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8022e88:	4852      	ldr	r0, [pc, #328]	; (8022fd4 <ce303_voltage+0x298>)
 8022e8a:	f7f1 fd01 	bl	8014890 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 7); // передаем команду
 8022e8e:	2207      	movs	r2, #7
 8022e90:	494c      	ldr	r1, [pc, #304]	; (8022fc4 <ce303_voltage+0x288>)
 8022e92:	4851      	ldr	r0, [pc, #324]	; (8022fd8 <ce303_voltage+0x29c>)
 8022e94:	f7f4 ffc8 	bl	8017e28 <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 8022e98:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8022e9c:	f7f0 f814 	bl	8012ec8 <HAL_Delay>
 8022ea0:	e02a      	b.n	8022ef8 <ce303_voltage+0x1bc>

	}
	else if( (meter_id>=0)&&(meter_id<10) )
 8022ea2:	79fb      	ldrb	r3, [r7, #7]
 8022ea4:	2b09      	cmp	r3, #9
 8022ea6:	d827      	bhi.n	8022ef8 <ce303_voltage+0x1bc>
	{
		start_buf[0] = 0x2F;
 8022ea8:	4b46      	ldr	r3, [pc, #280]	; (8022fc4 <ce303_voltage+0x288>)
 8022eaa:	222f      	movs	r2, #47	; 0x2f
 8022eac:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 8022eae:	4b45      	ldr	r3, [pc, #276]	; (8022fc4 <ce303_voltage+0x288>)
 8022eb0:	223f      	movs	r2, #63	; 0x3f
 8022eb2:	705a      	strb	r2, [r3, #1]
		start_buf[2] = meter_id + 0x30;
 8022eb4:	79fb      	ldrb	r3, [r7, #7]
 8022eb6:	3330      	adds	r3, #48	; 0x30
 8022eb8:	b2da      	uxtb	r2, r3
 8022eba:	4b42      	ldr	r3, [pc, #264]	; (8022fc4 <ce303_voltage+0x288>)
 8022ebc:	709a      	strb	r2, [r3, #2]
		start_buf[3] = 0x21;
 8022ebe:	4b41      	ldr	r3, [pc, #260]	; (8022fc4 <ce303_voltage+0x288>)
 8022ec0:	2221      	movs	r2, #33	; 0x21
 8022ec2:	70da      	strb	r2, [r3, #3]
		start_buf[4] = 0x0D;
 8022ec4:	4b3f      	ldr	r3, [pc, #252]	; (8022fc4 <ce303_voltage+0x288>)
 8022ec6:	220d      	movs	r2, #13
 8022ec8:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x0A;
 8022eca:	4b3e      	ldr	r3, [pc, #248]	; (8022fc4 <ce303_voltage+0x288>)
 8022ecc:	220a      	movs	r2, #10
 8022ece:	715a      	strb	r2, [r3, #5]

		meter_rx_number = 0;
 8022ed0:	4b3f      	ldr	r3, [pc, #252]	; (8022fd0 <ce303_voltage+0x294>)
 8022ed2:	2200      	movs	r2, #0
 8022ed4:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 8022ed6:	f7ff ff17 	bl	8022d08 <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 8022eda:	2201      	movs	r2, #1
 8022edc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8022ee0:	483c      	ldr	r0, [pc, #240]	; (8022fd4 <ce303_voltage+0x298>)
 8022ee2:	f7f1 fcd5 	bl	8014890 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 6); // передаем команду
 8022ee6:	2206      	movs	r2, #6
 8022ee8:	4936      	ldr	r1, [pc, #216]	; (8022fc4 <ce303_voltage+0x288>)
 8022eea:	483b      	ldr	r0, [pc, #236]	; (8022fd8 <ce303_voltage+0x29c>)
 8022eec:	f7f4 ff9c 	bl	8017e28 <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 8022ef0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8022ef4:	f7ef ffe8 	bl	8012ec8 <HAL_Delay>
	}


	if( (meter_id>99)&&(meter_id<1000) )
 8022ef8:	79fb      	ldrb	r3, [r7, #7]
 8022efa:	2b63      	cmp	r3, #99	; 0x63
 8022efc:	d970      	bls.n	8022fe0 <ce303_voltage+0x2a4>
	{
		start_buf[0] = 0x2F;
 8022efe:	4b31      	ldr	r3, [pc, #196]	; (8022fc4 <ce303_voltage+0x288>)
 8022f00:	222f      	movs	r2, #47	; 0x2f
 8022f02:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 8022f04:	4b2f      	ldr	r3, [pc, #188]	; (8022fc4 <ce303_voltage+0x288>)
 8022f06:	223f      	movs	r2, #63	; 0x3f
 8022f08:	705a      	strb	r2, [r3, #1]
		start_buf[2] = (meter_id/100) + 0x30;
 8022f0a:	79fb      	ldrb	r3, [r7, #7]
 8022f0c:	4a2e      	ldr	r2, [pc, #184]	; (8022fc8 <ce303_voltage+0x28c>)
 8022f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8022f12:	095b      	lsrs	r3, r3, #5
 8022f14:	b2db      	uxtb	r3, r3
 8022f16:	3330      	adds	r3, #48	; 0x30
 8022f18:	b2da      	uxtb	r2, r3
 8022f1a:	4b2a      	ldr	r3, [pc, #168]	; (8022fc4 <ce303_voltage+0x288>)
 8022f1c:	709a      	strb	r2, [r3, #2]
		start_buf[3] = ((meter_id - (meter_id/100)*100)/10) + 0x30;
 8022f1e:	79fa      	ldrb	r2, [r7, #7]
 8022f20:	79fb      	ldrb	r3, [r7, #7]
 8022f22:	4929      	ldr	r1, [pc, #164]	; (8022fc8 <ce303_voltage+0x28c>)
 8022f24:	fba1 1303 	umull	r1, r3, r1, r3
 8022f28:	095b      	lsrs	r3, r3, #5
 8022f2a:	b2db      	uxtb	r3, r3
 8022f2c:	4619      	mov	r1, r3
 8022f2e:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8022f32:	fb03 f301 	mul.w	r3, r3, r1
 8022f36:	4413      	add	r3, r2
 8022f38:	4a24      	ldr	r2, [pc, #144]	; (8022fcc <ce303_voltage+0x290>)
 8022f3a:	fb82 1203 	smull	r1, r2, r2, r3
 8022f3e:	1092      	asrs	r2, r2, #2
 8022f40:	17db      	asrs	r3, r3, #31
 8022f42:	1ad3      	subs	r3, r2, r3
 8022f44:	b2db      	uxtb	r3, r3
 8022f46:	3330      	adds	r3, #48	; 0x30
 8022f48:	b2da      	uxtb	r2, r3
 8022f4a:	4b1e      	ldr	r3, [pc, #120]	; (8022fc4 <ce303_voltage+0x288>)
 8022f4c:	70da      	strb	r2, [r3, #3]
		start_buf[4] = ((meter_id - ((meter_id/100)*100)) - (((meter_id - ((meter_id/100)*100))/10)*10)) + 0x30 ;
 8022f4e:	79fa      	ldrb	r2, [r7, #7]
 8022f50:	79fb      	ldrb	r3, [r7, #7]
 8022f52:	491d      	ldr	r1, [pc, #116]	; (8022fc8 <ce303_voltage+0x28c>)
 8022f54:	fba1 1303 	umull	r1, r3, r1, r3
 8022f58:	095b      	lsrs	r3, r3, #5
 8022f5a:	b2db      	uxtb	r3, r3
 8022f5c:	4619      	mov	r1, r3
 8022f5e:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8022f62:	fb03 f301 	mul.w	r3, r3, r1
 8022f66:	441a      	add	r2, r3
 8022f68:	4b18      	ldr	r3, [pc, #96]	; (8022fcc <ce303_voltage+0x290>)
 8022f6a:	fb83 1302 	smull	r1, r3, r3, r2
 8022f6e:	1099      	asrs	r1, r3, #2
 8022f70:	17d3      	asrs	r3, r2, #31
 8022f72:	1ac9      	subs	r1, r1, r3
 8022f74:	460b      	mov	r3, r1
 8022f76:	009b      	lsls	r3, r3, #2
 8022f78:	440b      	add	r3, r1
 8022f7a:	005b      	lsls	r3, r3, #1
 8022f7c:	1ad1      	subs	r1, r2, r3
 8022f7e:	b2cb      	uxtb	r3, r1
 8022f80:	3330      	adds	r3, #48	; 0x30
 8022f82:	b2da      	uxtb	r2, r3
 8022f84:	4b0f      	ldr	r3, [pc, #60]	; (8022fc4 <ce303_voltage+0x288>)
 8022f86:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x21;
 8022f88:	4b0e      	ldr	r3, [pc, #56]	; (8022fc4 <ce303_voltage+0x288>)
 8022f8a:	2221      	movs	r2, #33	; 0x21
 8022f8c:	715a      	strb	r2, [r3, #5]
		start_buf[6] = 0x0D;
 8022f8e:	4b0d      	ldr	r3, [pc, #52]	; (8022fc4 <ce303_voltage+0x288>)
 8022f90:	220d      	movs	r2, #13
 8022f92:	719a      	strb	r2, [r3, #6]
		start_buf[7] = 0x0A;
 8022f94:	4b0b      	ldr	r3, [pc, #44]	; (8022fc4 <ce303_voltage+0x288>)
 8022f96:	220a      	movs	r2, #10
 8022f98:	71da      	strb	r2, [r3, #7]

		meter_rx_number = 0;
 8022f9a:	4b0d      	ldr	r3, [pc, #52]	; (8022fd0 <ce303_voltage+0x294>)
 8022f9c:	2200      	movs	r2, #0
 8022f9e:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 8022fa0:	f7ff feb2 	bl	8022d08 <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 8022fa4:	2201      	movs	r2, #1
 8022fa6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8022faa:	480a      	ldr	r0, [pc, #40]	; (8022fd4 <ce303_voltage+0x298>)
 8022fac:	f7f1 fc70 	bl	8014890 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 8); // передаем команду
 8022fb0:	2208      	movs	r2, #8
 8022fb2:	4904      	ldr	r1, [pc, #16]	; (8022fc4 <ce303_voltage+0x288>)
 8022fb4:	4808      	ldr	r0, [pc, #32]	; (8022fd8 <ce303_voltage+0x29c>)
 8022fb6:	f7f4 ff37 	bl	8017e28 <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 8022fba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8022fbe:	f7ef ff83 	bl	8012ec8 <HAL_Delay>
 8022fc2:	e080      	b.n	80230c6 <ce303_voltage+0x38a>
 8022fc4:	20000018 	.word	0x20000018
 8022fc8:	51eb851f 	.word	0x51eb851f
 8022fcc:	66666667 	.word	0x66666667
 8022fd0:	20000865 	.word	0x20000865
 8022fd4:	40021800 	.word	0x40021800
 8022fd8:	20009dc4 	.word	0x20009dc4
 8022fdc:	cccccccd 	.word	0xcccccccd

	}
	else if( (meter_id>9)&&(meter_id<100) )
 8022fe0:	79fb      	ldrb	r3, [r7, #7]
 8022fe2:	2b09      	cmp	r3, #9
 8022fe4:	d944      	bls.n	8023070 <ce303_voltage+0x334>
 8022fe6:	79fb      	ldrb	r3, [r7, #7]
 8022fe8:	2b63      	cmp	r3, #99	; 0x63
 8022fea:	d841      	bhi.n	8023070 <ce303_voltage+0x334>
	{
		start_buf[0] = 0x2F;
 8022fec:	4b90      	ldr	r3, [pc, #576]	; (8023230 <ce303_voltage+0x4f4>)
 8022fee:	222f      	movs	r2, #47	; 0x2f
 8022ff0:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 8022ff2:	4b8f      	ldr	r3, [pc, #572]	; (8023230 <ce303_voltage+0x4f4>)
 8022ff4:	223f      	movs	r2, #63	; 0x3f
 8022ff6:	705a      	strb	r2, [r3, #1]
		start_buf[2] = (meter_id/10) + 0x30;
 8022ff8:	79fb      	ldrb	r3, [r7, #7]
 8022ffa:	4a8e      	ldr	r2, [pc, #568]	; (8023234 <ce303_voltage+0x4f8>)
 8022ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8023000:	08db      	lsrs	r3, r3, #3
 8023002:	b2db      	uxtb	r3, r3
 8023004:	3330      	adds	r3, #48	; 0x30
 8023006:	b2da      	uxtb	r2, r3
 8023008:	4b89      	ldr	r3, [pc, #548]	; (8023230 <ce303_voltage+0x4f4>)
 802300a:	709a      	strb	r2, [r3, #2]
		start_buf[3] = (meter_id - ((meter_id/10)*10)) + 0x30;
 802300c:	79fb      	ldrb	r3, [r7, #7]
 802300e:	4a89      	ldr	r2, [pc, #548]	; (8023234 <ce303_voltage+0x4f8>)
 8023010:	fba2 2303 	umull	r2, r3, r2, r3
 8023014:	08db      	lsrs	r3, r3, #3
 8023016:	b2db      	uxtb	r3, r3
 8023018:	461a      	mov	r2, r3
 802301a:	0152      	lsls	r2, r2, #5
 802301c:	1ad2      	subs	r2, r2, r3
 802301e:	0092      	lsls	r2, r2, #2
 8023020:	1ad3      	subs	r3, r2, r3
 8023022:	005b      	lsls	r3, r3, #1
 8023024:	b2da      	uxtb	r2, r3
 8023026:	79fb      	ldrb	r3, [r7, #7]
 8023028:	4413      	add	r3, r2
 802302a:	b2db      	uxtb	r3, r3
 802302c:	3330      	adds	r3, #48	; 0x30
 802302e:	b2da      	uxtb	r2, r3
 8023030:	4b7f      	ldr	r3, [pc, #508]	; (8023230 <ce303_voltage+0x4f4>)
 8023032:	70da      	strb	r2, [r3, #3]
		start_buf[4] = 0x21;
 8023034:	4b7e      	ldr	r3, [pc, #504]	; (8023230 <ce303_voltage+0x4f4>)
 8023036:	2221      	movs	r2, #33	; 0x21
 8023038:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x0D;
 802303a:	4b7d      	ldr	r3, [pc, #500]	; (8023230 <ce303_voltage+0x4f4>)
 802303c:	220d      	movs	r2, #13
 802303e:	715a      	strb	r2, [r3, #5]
		start_buf[6] = 0x0A;
 8023040:	4b7b      	ldr	r3, [pc, #492]	; (8023230 <ce303_voltage+0x4f4>)
 8023042:	220a      	movs	r2, #10
 8023044:	719a      	strb	r2, [r3, #6]

		meter_rx_number = 0;
 8023046:	4b7c      	ldr	r3, [pc, #496]	; (8023238 <ce303_voltage+0x4fc>)
 8023048:	2200      	movs	r2, #0
 802304a:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 802304c:	f7ff fe5c 	bl	8022d08 <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 8023050:	2201      	movs	r2, #1
 8023052:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8023056:	4879      	ldr	r0, [pc, #484]	; (802323c <ce303_voltage+0x500>)
 8023058:	f7f1 fc1a 	bl	8014890 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 7); // передаем команду
 802305c:	2207      	movs	r2, #7
 802305e:	4974      	ldr	r1, [pc, #464]	; (8023230 <ce303_voltage+0x4f4>)
 8023060:	4877      	ldr	r0, [pc, #476]	; (8023240 <ce303_voltage+0x504>)
 8023062:	f7f4 fee1 	bl	8017e28 <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 8023066:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 802306a:	f7ef ff2d 	bl	8012ec8 <HAL_Delay>
 802306e:	e02a      	b.n	80230c6 <ce303_voltage+0x38a>

	}
	else if( (meter_id>=0)&&(meter_id<10) )
 8023070:	79fb      	ldrb	r3, [r7, #7]
 8023072:	2b09      	cmp	r3, #9
 8023074:	d827      	bhi.n	80230c6 <ce303_voltage+0x38a>
	{
		start_buf[0] = 0x2F;
 8023076:	4b6e      	ldr	r3, [pc, #440]	; (8023230 <ce303_voltage+0x4f4>)
 8023078:	222f      	movs	r2, #47	; 0x2f
 802307a:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 802307c:	4b6c      	ldr	r3, [pc, #432]	; (8023230 <ce303_voltage+0x4f4>)
 802307e:	223f      	movs	r2, #63	; 0x3f
 8023080:	705a      	strb	r2, [r3, #1]
		start_buf[2] = meter_id + 0x30;
 8023082:	79fb      	ldrb	r3, [r7, #7]
 8023084:	3330      	adds	r3, #48	; 0x30
 8023086:	b2da      	uxtb	r2, r3
 8023088:	4b69      	ldr	r3, [pc, #420]	; (8023230 <ce303_voltage+0x4f4>)
 802308a:	709a      	strb	r2, [r3, #2]
		start_buf[3] = 0x21;
 802308c:	4b68      	ldr	r3, [pc, #416]	; (8023230 <ce303_voltage+0x4f4>)
 802308e:	2221      	movs	r2, #33	; 0x21
 8023090:	70da      	strb	r2, [r3, #3]
		start_buf[4] = 0x0D;
 8023092:	4b67      	ldr	r3, [pc, #412]	; (8023230 <ce303_voltage+0x4f4>)
 8023094:	220d      	movs	r2, #13
 8023096:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x0A;
 8023098:	4b65      	ldr	r3, [pc, #404]	; (8023230 <ce303_voltage+0x4f4>)
 802309a:	220a      	movs	r2, #10
 802309c:	715a      	strb	r2, [r3, #5]

		meter_rx_number = 0;
 802309e:	4b66      	ldr	r3, [pc, #408]	; (8023238 <ce303_voltage+0x4fc>)
 80230a0:	2200      	movs	r2, #0
 80230a2:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 80230a4:	f7ff fe30 	bl	8022d08 <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 80230a8:	2201      	movs	r2, #1
 80230aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80230ae:	4863      	ldr	r0, [pc, #396]	; (802323c <ce303_voltage+0x500>)
 80230b0:	f7f1 fbee 	bl	8014890 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 6); // передаем команду
 80230b4:	2206      	movs	r2, #6
 80230b6:	495e      	ldr	r1, [pc, #376]	; (8023230 <ce303_voltage+0x4f4>)
 80230b8:	4861      	ldr	r0, [pc, #388]	; (8023240 <ce303_voltage+0x504>)
 80230ba:	f7f4 feb5 	bl	8017e28 <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 80230be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80230c2:	f7ef ff01 	bl	8012ec8 <HAL_Delay>
	}



	meter_rx_number = 0;
 80230c6:	4b5c      	ldr	r3, [pc, #368]	; (8023238 <ce303_voltage+0x4fc>)
 80230c8:	2200      	movs	r2, #0
 80230ca:	701a      	strb	r2, [r3, #0]
	meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 80230cc:	f7ff fe1c 	bl	8022d08 <meter_rx_buffer_clear>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 80230d0:	2201      	movs	r2, #1
 80230d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80230d6:	4859      	ldr	r0, [pc, #356]	; (802323c <ce303_voltage+0x500>)
 80230d8:	f7f1 fbda 	bl	8014890 <HAL_GPIO_WritePin>
	HAL_UART_Transmit_DMA(&huart6, &password_buf[0], 6); // передаем команду
 80230dc:	2206      	movs	r2, #6
 80230de:	4959      	ldr	r1, [pc, #356]	; (8023244 <ce303_voltage+0x508>)
 80230e0:	4857      	ldr	r0, [pc, #348]	; (8023240 <ce303_voltage+0x504>)
 80230e2:	f7f4 fea1 	bl	8017e28 <HAL_UART_Transmit_DMA>
	HAL_Delay(1000);
 80230e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80230ea:	f7ef feed 	bl	8012ec8 <HAL_Delay>

	meter_rx_number = 0;
 80230ee:	4b52      	ldr	r3, [pc, #328]	; (8023238 <ce303_voltage+0x4fc>)
 80230f0:	2200      	movs	r2, #0
 80230f2:	701a      	strb	r2, [r3, #0]
	meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 80230f4:	f7ff fe08 	bl	8022d08 <meter_rx_buffer_clear>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 80230f8:	2201      	movs	r2, #1
 80230fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80230fe:	484f      	ldr	r0, [pc, #316]	; (802323c <ce303_voltage+0x500>)
 8023100:	f7f1 fbc6 	bl	8014890 <HAL_GPIO_WritePin>
	HAL_UART_Transmit_DMA(&huart6, &voltage_buf[0], 13); // передаем команду
 8023104:	220d      	movs	r2, #13
 8023106:	4950      	ldr	r1, [pc, #320]	; (8023248 <ce303_voltage+0x50c>)
 8023108:	484d      	ldr	r0, [pc, #308]	; (8023240 <ce303_voltage+0x504>)
 802310a:	f7f4 fe8d 	bl	8017e28 <HAL_UART_Transmit_DMA>
	HAL_Delay(1000);
 802310e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8023112:	f7ef fed9 	bl	8012ec8 <HAL_Delay>

	voltage_a_state = 0; // обнуляем переменные состояния прочтения напряжения перед их прочтением
 8023116:	2300      	movs	r3, #0
 8023118:	757b      	strb	r3, [r7, #21]
	voltage_b_state = 0;
 802311a:	2300      	movs	r3, #0
 802311c:	753b      	strb	r3, [r7, #20]
	voltage_c_state = 0;
 802311e:	2300      	movs	r3, #0
 8023120:	74fb      	strb	r3, [r7, #19]

	for(uint16_t i=0; i<256; i++)
 8023122:	2300      	movs	r3, #0
 8023124:	823b      	strh	r3, [r7, #16]
 8023126:	f001 b82b 	b.w	8024180 <ce303_voltage+0x1444>
	{

		if( (meter_rx_buffer[i] == 0x28) && (voltage_a_state==0) && (voltage_b_state==0) && (voltage_c_state==0) ) // 0х28 означает символ "(" в ASCII таблице
 802312a:	8a3b      	ldrh	r3, [r7, #16]
 802312c:	4a47      	ldr	r2, [pc, #284]	; (802324c <ce303_voltage+0x510>)
 802312e:	5cd3      	ldrb	r3, [r2, r3]
 8023130:	2b28      	cmp	r3, #40	; 0x28
 8023132:	f040 82ba 	bne.w	80236aa <ce303_voltage+0x96e>
 8023136:	7d7b      	ldrb	r3, [r7, #21]
 8023138:	2b00      	cmp	r3, #0
 802313a:	f040 82b6 	bne.w	80236aa <ce303_voltage+0x96e>
 802313e:	7d3b      	ldrb	r3, [r7, #20]
 8023140:	2b00      	cmp	r3, #0
 8023142:	f040 82b2 	bne.w	80236aa <ce303_voltage+0x96e>
 8023146:	7cfb      	ldrb	r3, [r7, #19]
 8023148:	2b00      	cmp	r3, #0
 802314a:	f040 82ae 	bne.w	80236aa <ce303_voltage+0x96e>
		{
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 802314e:	8a3b      	ldrh	r3, [r7, #16]
 8023150:	3302      	adds	r3, #2
 8023152:	4a3e      	ldr	r2, [pc, #248]	; (802324c <ce303_voltage+0x510>)
 8023154:	5cd3      	ldrb	r3, [r2, r3]
 8023156:	2b2e      	cmp	r3, #46	; 0x2e
 8023158:	f040 80d8 	bne.w	802330c <ce303_voltage+0x5d0>
			{
				temp = (uint16_t)(meter_rx_buffer[i+1]-0x30);
 802315c:	8a3b      	ldrh	r3, [r7, #16]
 802315e:	3301      	adds	r3, #1
 8023160:	4a3a      	ldr	r2, [pc, #232]	; (802324c <ce303_voltage+0x510>)
 8023162:	5cd3      	ldrb	r3, [r2, r3]
 8023164:	b29b      	uxth	r3, r3
 8023166:	3b30      	subs	r3, #48	; 0x30
 8023168:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+4] == 0x29 ) // если 1 разряд после запятой
 802316a:	8a3b      	ldrh	r3, [r7, #16]
 802316c:	3304      	adds	r3, #4
 802316e:	4a37      	ldr	r2, [pc, #220]	; (802324c <ce303_voltage+0x510>)
 8023170:	5cd3      	ldrb	r3, [r2, r3]
 8023172:	2b29      	cmp	r3, #41	; 0x29
 8023174:	d110      	bne.n	8023198 <ce303_voltage+0x45c>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+3])-0x30)*100;
 8023176:	8a3b      	ldrh	r3, [r7, #16]
 8023178:	3303      	adds	r3, #3
 802317a:	4a34      	ldr	r2, [pc, #208]	; (802324c <ce303_voltage+0x510>)
 802317c:	5cd3      	ldrb	r3, [r2, r3]
 802317e:	3b30      	subs	r3, #48	; 0x30
 8023180:	b29b      	uxth	r3, r3
 8023182:	461a      	mov	r2, r3
 8023184:	0092      	lsls	r2, r2, #2
 8023186:	4413      	add	r3, r2
 8023188:	461a      	mov	r2, r3
 802318a:	0091      	lsls	r1, r2, #2
 802318c:	461a      	mov	r2, r3
 802318e:	460b      	mov	r3, r1
 8023190:	4413      	add	r3, r2
 8023192:	009b      	lsls	r3, r3, #2
 8023194:	82fb      	strh	r3, [r7, #22]
 8023196:	e081      	b.n	802329c <ce303_voltage+0x560>
				}
				else if( meter_rx_buffer[i+5] == 0x29 ) // если 2 разряда после запятой
 8023198:	8a3b      	ldrh	r3, [r7, #16]
 802319a:	3305      	adds	r3, #5
 802319c:	4a2b      	ldr	r2, [pc, #172]	; (802324c <ce303_voltage+0x510>)
 802319e:	5cd3      	ldrb	r3, [r2, r3]
 80231a0:	2b29      	cmp	r3, #41	; 0x29
 80231a2:	d117      	bne.n	80231d4 <ce303_voltage+0x498>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+3])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+4])-0x30))*10;
 80231a4:	8a3b      	ldrh	r3, [r7, #16]
 80231a6:	3303      	adds	r3, #3
 80231a8:	4a28      	ldr	r2, [pc, #160]	; (802324c <ce303_voltage+0x510>)
 80231aa:	5cd3      	ldrb	r3, [r2, r3]
 80231ac:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80231b0:	4613      	mov	r3, r2
 80231b2:	009b      	lsls	r3, r3, #2
 80231b4:	4413      	add	r3, r2
 80231b6:	005b      	lsls	r3, r3, #1
 80231b8:	4619      	mov	r1, r3
 80231ba:	8a3b      	ldrh	r3, [r7, #16]
 80231bc:	3304      	adds	r3, #4
 80231be:	4a23      	ldr	r2, [pc, #140]	; (802324c <ce303_voltage+0x510>)
 80231c0:	5cd3      	ldrb	r3, [r2, r3]
 80231c2:	3b30      	subs	r3, #48	; 0x30
 80231c4:	440b      	add	r3, r1
 80231c6:	b29b      	uxth	r3, r3
 80231c8:	461a      	mov	r2, r3
 80231ca:	0092      	lsls	r2, r2, #2
 80231cc:	4413      	add	r3, r2
 80231ce:	005b      	lsls	r3, r3, #1
 80231d0:	82fb      	strh	r3, [r7, #22]
 80231d2:	e063      	b.n	802329c <ce303_voltage+0x560>
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 3 разряда после запятой
 80231d4:	8a3b      	ldrh	r3, [r7, #16]
 80231d6:	3306      	adds	r3, #6
 80231d8:	4a1c      	ldr	r2, [pc, #112]	; (802324c <ce303_voltage+0x510>)
 80231da:	5cd3      	ldrb	r3, [r2, r3]
 80231dc:	2b29      	cmp	r3, #41	; 0x29
 80231de:	d137      	bne.n	8023250 <ce303_voltage+0x514>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 80231e0:	8a3b      	ldrh	r3, [r7, #16]
 80231e2:	3303      	adds	r3, #3
 80231e4:	4a19      	ldr	r2, [pc, #100]	; (802324c <ce303_voltage+0x510>)
 80231e6:	5cd3      	ldrb	r3, [r2, r3]
 80231e8:	3b30      	subs	r3, #48	; 0x30
 80231ea:	b29b      	uxth	r3, r3
 80231ec:	461a      	mov	r2, r3
 80231ee:	0092      	lsls	r2, r2, #2
 80231f0:	4413      	add	r3, r2
 80231f2:	461a      	mov	r2, r3
 80231f4:	0091      	lsls	r1, r2, #2
 80231f6:	461a      	mov	r2, r3
 80231f8:	460b      	mov	r3, r1
 80231fa:	4413      	add	r3, r2
 80231fc:	009b      	lsls	r3, r3, #2
 80231fe:	b29a      	uxth	r2, r3
 8023200:	8a3b      	ldrh	r3, [r7, #16]
 8023202:	3304      	adds	r3, #4
 8023204:	4911      	ldr	r1, [pc, #68]	; (802324c <ce303_voltage+0x510>)
 8023206:	5ccb      	ldrb	r3, [r1, r3]
 8023208:	3b30      	subs	r3, #48	; 0x30
 802320a:	b29b      	uxth	r3, r3
 802320c:	4619      	mov	r1, r3
 802320e:	0089      	lsls	r1, r1, #2
 8023210:	440b      	add	r3, r1
 8023212:	005b      	lsls	r3, r3, #1
 8023214:	b29b      	uxth	r3, r3
 8023216:	4413      	add	r3, r2
 8023218:	b29a      	uxth	r2, r3
 802321a:	8a3b      	ldrh	r3, [r7, #16]
 802321c:	3305      	adds	r3, #5
 802321e:	490b      	ldr	r1, [pc, #44]	; (802324c <ce303_voltage+0x510>)
 8023220:	5ccb      	ldrb	r3, [r1, r3]
 8023222:	b29b      	uxth	r3, r3
 8023224:	4413      	add	r3, r2
 8023226:	b29b      	uxth	r3, r3
 8023228:	3b30      	subs	r3, #48	; 0x30
 802322a:	82fb      	strh	r3, [r7, #22]
 802322c:	e036      	b.n	802329c <ce303_voltage+0x560>
 802322e:	bf00      	nop
 8023230:	20000018 	.word	0x20000018
 8023234:	cccccccd 	.word	0xcccccccd
 8023238:	20000865 	.word	0x20000865
 802323c:	40021800 	.word	0x40021800
 8023240:	20009dc4 	.word	0x20009dc4
 8023244:	20000020 	.word	0x20000020
 8023248:	20000028 	.word	0x20000028
 802324c:	20009a0c 	.word	0x20009a0c
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 8023250:	8a3b      	ldrh	r3, [r7, #16]
 8023252:	3303      	adds	r3, #3
 8023254:	4a9b      	ldr	r2, [pc, #620]	; (80234c4 <ce303_voltage+0x788>)
 8023256:	5cd3      	ldrb	r3, [r2, r3]
 8023258:	3b30      	subs	r3, #48	; 0x30
 802325a:	b29b      	uxth	r3, r3
 802325c:	461a      	mov	r2, r3
 802325e:	0092      	lsls	r2, r2, #2
 8023260:	4413      	add	r3, r2
 8023262:	461a      	mov	r2, r3
 8023264:	0091      	lsls	r1, r2, #2
 8023266:	461a      	mov	r2, r3
 8023268:	460b      	mov	r3, r1
 802326a:	4413      	add	r3, r2
 802326c:	009b      	lsls	r3, r3, #2
 802326e:	b29a      	uxth	r2, r3
 8023270:	8a3b      	ldrh	r3, [r7, #16]
 8023272:	3304      	adds	r3, #4
 8023274:	4993      	ldr	r1, [pc, #588]	; (80234c4 <ce303_voltage+0x788>)
 8023276:	5ccb      	ldrb	r3, [r1, r3]
 8023278:	3b30      	subs	r3, #48	; 0x30
 802327a:	b29b      	uxth	r3, r3
 802327c:	4619      	mov	r1, r3
 802327e:	0089      	lsls	r1, r1, #2
 8023280:	440b      	add	r3, r1
 8023282:	005b      	lsls	r3, r3, #1
 8023284:	b29b      	uxth	r3, r3
 8023286:	4413      	add	r3, r2
 8023288:	b29a      	uxth	r2, r3
 802328a:	8a3b      	ldrh	r3, [r7, #16]
 802328c:	3305      	adds	r3, #5
 802328e:	498d      	ldr	r1, [pc, #564]	; (80234c4 <ce303_voltage+0x788>)
 8023290:	5ccb      	ldrb	r3, [r1, r3]
 8023292:	b29b      	uxth	r3, r3
 8023294:	4413      	add	r3, r2
 8023296:	b29b      	uxth	r3, r3
 8023298:	3b30      	subs	r3, #48	; 0x30
 802329a:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 802329c:	4b8a      	ldr	r3, [pc, #552]	; (80234c8 <ce303_voltage+0x78c>)
 802329e:	681b      	ldr	r3, [r3, #0]
 80232a0:	f04f 31ff 	mov.w	r1, #4294967295
 80232a4:	4618      	mov	r0, r3
 80232a6:	f7f5 ffff 	bl	80192a8 <osMutexWait>
				fm25v02_write(2*CE_303_VOLT_A_REG, ((uint8_t)(temp>>8)) );
 80232aa:	89fb      	ldrh	r3, [r7, #14]
 80232ac:	0a1b      	lsrs	r3, r3, #8
 80232ae:	b29b      	uxth	r3, r3
 80232b0:	b2db      	uxtb	r3, r3
 80232b2:	4619      	mov	r1, r3
 80232b4:	f242 004a 	movw	r0, #8266	; 0x204a
 80232b8:	f007 fbe8 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_A_REG+1, ((uint8_t)(temp&0x00FF)) );
 80232bc:	89fb      	ldrh	r3, [r7, #14]
 80232be:	b2db      	uxtb	r3, r3
 80232c0:	4619      	mov	r1, r3
 80232c2:	f242 004b 	movw	r0, #8267	; 0x204b
 80232c6:	f007 fbe1 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_MIL_A_REG, ((uint8_t)(temp_mil>>8)) );
 80232ca:	8afb      	ldrh	r3, [r7, #22]
 80232cc:	0a1b      	lsrs	r3, r3, #8
 80232ce:	b29b      	uxth	r3, r3
 80232d0:	b2db      	uxtb	r3, r3
 80232d2:	4619      	mov	r1, r3
 80232d4:	f242 0050 	movw	r0, #8272	; 0x2050
 80232d8:	f007 fbd8 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_MIL_A_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 80232dc:	8afb      	ldrh	r3, [r7, #22]
 80232de:	b2db      	uxtb	r3, r3
 80232e0:	4619      	mov	r1, r3
 80232e2:	f242 0051 	movw	r0, #8273	; 0x2051
 80232e6:	f007 fbd1 	bl	802aa8c <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 80232ea:	4b77      	ldr	r3, [pc, #476]	; (80234c8 <ce303_voltage+0x78c>)
 80232ec:	681b      	ldr	r3, [r3, #0]
 80232ee:	4618      	mov	r0, r3
 80232f0:	f7f6 f828 	bl	8019344 <osMutexRelease>
				status_registers.ce303_volt_a_reg = temp;
 80232f4:	4a75      	ldr	r2, [pc, #468]	; (80234cc <ce303_voltage+0x790>)
 80232f6:	89fb      	ldrh	r3, [r7, #14]
 80232f8:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a
				status_registers.ce303_volt_mil_a_reg =  temp_mil;
 80232fc:	4a73      	ldr	r2, [pc, #460]	; (80234cc <ce303_voltage+0x790>)
 80232fe:	8afb      	ldrh	r3, [r7, #22]
 8023300:	f8a2 3050 	strh.w	r3, [r2, #80]	; 0x50
				voltage_a_state = 1;
 8023304:	2301      	movs	r3, #1
 8023306:	757b      	strb	r3, [r7, #21]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 8023308:	f000 bf34 	b.w	8024174 <ce303_voltage+0x1438>
			}
			else if( meter_rx_buffer[i+3] == 0x2E)
 802330c:	8a3b      	ldrh	r3, [r7, #16]
 802330e:	3303      	adds	r3, #3
 8023310:	4a6c      	ldr	r2, [pc, #432]	; (80234c4 <ce303_voltage+0x788>)
 8023312:	5cd3      	ldrb	r3, [r2, r3]
 8023314:	2b2e      	cmp	r3, #46	; 0x2e
 8023316:	f040 80db 	bne.w	80234d0 <ce303_voltage+0x794>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+2])-0x30);
 802331a:	8a3b      	ldrh	r3, [r7, #16]
 802331c:	3301      	adds	r3, #1
 802331e:	4a69      	ldr	r2, [pc, #420]	; (80234c4 <ce303_voltage+0x788>)
 8023320:	5cd3      	ldrb	r3, [r2, r3]
 8023322:	3b30      	subs	r3, #48	; 0x30
 8023324:	b29b      	uxth	r3, r3
 8023326:	461a      	mov	r2, r3
 8023328:	0092      	lsls	r2, r2, #2
 802332a:	4413      	add	r3, r2
 802332c:	005b      	lsls	r3, r3, #1
 802332e:	b29a      	uxth	r2, r3
 8023330:	8a3b      	ldrh	r3, [r7, #16]
 8023332:	3302      	adds	r3, #2
 8023334:	4963      	ldr	r1, [pc, #396]	; (80234c4 <ce303_voltage+0x788>)
 8023336:	5ccb      	ldrb	r3, [r1, r3]
 8023338:	b29b      	uxth	r3, r3
 802333a:	4413      	add	r3, r2
 802333c:	b29b      	uxth	r3, r3
 802333e:	3b30      	subs	r3, #48	; 0x30
 8023340:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+5] == 0x29 ) // если 1 разряд после запятой
 8023342:	8a3b      	ldrh	r3, [r7, #16]
 8023344:	3305      	adds	r3, #5
 8023346:	4a5f      	ldr	r2, [pc, #380]	; (80234c4 <ce303_voltage+0x788>)
 8023348:	5cd3      	ldrb	r3, [r2, r3]
 802334a:	2b29      	cmp	r3, #41	; 0x29
 802334c:	d110      	bne.n	8023370 <ce303_voltage+0x634>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+4])-0x30)*100;
 802334e:	8a3b      	ldrh	r3, [r7, #16]
 8023350:	3304      	adds	r3, #4
 8023352:	4a5c      	ldr	r2, [pc, #368]	; (80234c4 <ce303_voltage+0x788>)
 8023354:	5cd3      	ldrb	r3, [r2, r3]
 8023356:	3b30      	subs	r3, #48	; 0x30
 8023358:	b29b      	uxth	r3, r3
 802335a:	461a      	mov	r2, r3
 802335c:	0092      	lsls	r2, r2, #2
 802335e:	4413      	add	r3, r2
 8023360:	461a      	mov	r2, r3
 8023362:	0091      	lsls	r1, r2, #2
 8023364:	461a      	mov	r2, r3
 8023366:	460b      	mov	r3, r1
 8023368:	4413      	add	r3, r2
 802336a:	009b      	lsls	r3, r3, #2
 802336c:	82fb      	strh	r3, [r7, #22]
 802336e:	e070      	b.n	8023452 <ce303_voltage+0x716>
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 2 разряда после запятой
 8023370:	8a3b      	ldrh	r3, [r7, #16]
 8023372:	3306      	adds	r3, #6
 8023374:	4a53      	ldr	r2, [pc, #332]	; (80234c4 <ce303_voltage+0x788>)
 8023376:	5cd3      	ldrb	r3, [r2, r3]
 8023378:	2b29      	cmp	r3, #41	; 0x29
 802337a:	d117      	bne.n	80233ac <ce303_voltage+0x670>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30))*10;
 802337c:	8a3b      	ldrh	r3, [r7, #16]
 802337e:	3304      	adds	r3, #4
 8023380:	4a50      	ldr	r2, [pc, #320]	; (80234c4 <ce303_voltage+0x788>)
 8023382:	5cd3      	ldrb	r3, [r2, r3]
 8023384:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8023388:	4613      	mov	r3, r2
 802338a:	009b      	lsls	r3, r3, #2
 802338c:	4413      	add	r3, r2
 802338e:	005b      	lsls	r3, r3, #1
 8023390:	4619      	mov	r1, r3
 8023392:	8a3b      	ldrh	r3, [r7, #16]
 8023394:	3305      	adds	r3, #5
 8023396:	4a4b      	ldr	r2, [pc, #300]	; (80234c4 <ce303_voltage+0x788>)
 8023398:	5cd3      	ldrb	r3, [r2, r3]
 802339a:	3b30      	subs	r3, #48	; 0x30
 802339c:	440b      	add	r3, r1
 802339e:	b29b      	uxth	r3, r3
 80233a0:	461a      	mov	r2, r3
 80233a2:	0092      	lsls	r2, r2, #2
 80233a4:	4413      	add	r3, r2
 80233a6:	005b      	lsls	r3, r3, #1
 80233a8:	82fb      	strh	r3, [r7, #22]
 80233aa:	e052      	b.n	8023452 <ce303_voltage+0x716>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 3 разряда после запятой
 80233ac:	8a3b      	ldrh	r3, [r7, #16]
 80233ae:	3307      	adds	r3, #7
 80233b0:	4a44      	ldr	r2, [pc, #272]	; (80234c4 <ce303_voltage+0x788>)
 80233b2:	5cd3      	ldrb	r3, [r2, r3]
 80233b4:	2b29      	cmp	r3, #41	; 0x29
 80233b6:	d126      	bne.n	8023406 <ce303_voltage+0x6ca>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 80233b8:	8a3b      	ldrh	r3, [r7, #16]
 80233ba:	3304      	adds	r3, #4
 80233bc:	4a41      	ldr	r2, [pc, #260]	; (80234c4 <ce303_voltage+0x788>)
 80233be:	5cd3      	ldrb	r3, [r2, r3]
 80233c0:	3b30      	subs	r3, #48	; 0x30
 80233c2:	b29b      	uxth	r3, r3
 80233c4:	461a      	mov	r2, r3
 80233c6:	0092      	lsls	r2, r2, #2
 80233c8:	4413      	add	r3, r2
 80233ca:	461a      	mov	r2, r3
 80233cc:	0091      	lsls	r1, r2, #2
 80233ce:	461a      	mov	r2, r3
 80233d0:	460b      	mov	r3, r1
 80233d2:	4413      	add	r3, r2
 80233d4:	009b      	lsls	r3, r3, #2
 80233d6:	b29a      	uxth	r2, r3
 80233d8:	8a3b      	ldrh	r3, [r7, #16]
 80233da:	3305      	adds	r3, #5
 80233dc:	4939      	ldr	r1, [pc, #228]	; (80234c4 <ce303_voltage+0x788>)
 80233de:	5ccb      	ldrb	r3, [r1, r3]
 80233e0:	3b30      	subs	r3, #48	; 0x30
 80233e2:	b29b      	uxth	r3, r3
 80233e4:	4619      	mov	r1, r3
 80233e6:	0089      	lsls	r1, r1, #2
 80233e8:	440b      	add	r3, r1
 80233ea:	005b      	lsls	r3, r3, #1
 80233ec:	b29b      	uxth	r3, r3
 80233ee:	4413      	add	r3, r2
 80233f0:	b29a      	uxth	r2, r3
 80233f2:	8a3b      	ldrh	r3, [r7, #16]
 80233f4:	3306      	adds	r3, #6
 80233f6:	4933      	ldr	r1, [pc, #204]	; (80234c4 <ce303_voltage+0x788>)
 80233f8:	5ccb      	ldrb	r3, [r1, r3]
 80233fa:	b29b      	uxth	r3, r3
 80233fc:	4413      	add	r3, r2
 80233fe:	b29b      	uxth	r3, r3
 8023400:	3b30      	subs	r3, #48	; 0x30
 8023402:	82fb      	strh	r3, [r7, #22]
 8023404:	e025      	b.n	8023452 <ce303_voltage+0x716>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 8023406:	8a3b      	ldrh	r3, [r7, #16]
 8023408:	3304      	adds	r3, #4
 802340a:	4a2e      	ldr	r2, [pc, #184]	; (80234c4 <ce303_voltage+0x788>)
 802340c:	5cd3      	ldrb	r3, [r2, r3]
 802340e:	3b30      	subs	r3, #48	; 0x30
 8023410:	b29b      	uxth	r3, r3
 8023412:	461a      	mov	r2, r3
 8023414:	0092      	lsls	r2, r2, #2
 8023416:	4413      	add	r3, r2
 8023418:	461a      	mov	r2, r3
 802341a:	0091      	lsls	r1, r2, #2
 802341c:	461a      	mov	r2, r3
 802341e:	460b      	mov	r3, r1
 8023420:	4413      	add	r3, r2
 8023422:	009b      	lsls	r3, r3, #2
 8023424:	b29a      	uxth	r2, r3
 8023426:	8a3b      	ldrh	r3, [r7, #16]
 8023428:	3305      	adds	r3, #5
 802342a:	4926      	ldr	r1, [pc, #152]	; (80234c4 <ce303_voltage+0x788>)
 802342c:	5ccb      	ldrb	r3, [r1, r3]
 802342e:	3b30      	subs	r3, #48	; 0x30
 8023430:	b29b      	uxth	r3, r3
 8023432:	4619      	mov	r1, r3
 8023434:	0089      	lsls	r1, r1, #2
 8023436:	440b      	add	r3, r1
 8023438:	005b      	lsls	r3, r3, #1
 802343a:	b29b      	uxth	r3, r3
 802343c:	4413      	add	r3, r2
 802343e:	b29a      	uxth	r2, r3
 8023440:	8a3b      	ldrh	r3, [r7, #16]
 8023442:	3306      	adds	r3, #6
 8023444:	491f      	ldr	r1, [pc, #124]	; (80234c4 <ce303_voltage+0x788>)
 8023446:	5ccb      	ldrb	r3, [r1, r3]
 8023448:	b29b      	uxth	r3, r3
 802344a:	4413      	add	r3, r2
 802344c:	b29b      	uxth	r3, r3
 802344e:	3b30      	subs	r3, #48	; 0x30
 8023450:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8023452:	4b1d      	ldr	r3, [pc, #116]	; (80234c8 <ce303_voltage+0x78c>)
 8023454:	681b      	ldr	r3, [r3, #0]
 8023456:	f04f 31ff 	mov.w	r1, #4294967295
 802345a:	4618      	mov	r0, r3
 802345c:	f7f5 ff24 	bl	80192a8 <osMutexWait>
				fm25v02_write(2*CE_303_VOLT_A_REG, ((uint8_t)(temp>>8)) );
 8023460:	89fb      	ldrh	r3, [r7, #14]
 8023462:	0a1b      	lsrs	r3, r3, #8
 8023464:	b29b      	uxth	r3, r3
 8023466:	b2db      	uxtb	r3, r3
 8023468:	4619      	mov	r1, r3
 802346a:	f242 004a 	movw	r0, #8266	; 0x204a
 802346e:	f007 fb0d 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_A_REG+1, ((uint8_t)(temp&0x00FF)) );
 8023472:	89fb      	ldrh	r3, [r7, #14]
 8023474:	b2db      	uxtb	r3, r3
 8023476:	4619      	mov	r1, r3
 8023478:	f242 004b 	movw	r0, #8267	; 0x204b
 802347c:	f007 fb06 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_MIL_A_REG, ((uint8_t)(temp_mil>>8)) );
 8023480:	8afb      	ldrh	r3, [r7, #22]
 8023482:	0a1b      	lsrs	r3, r3, #8
 8023484:	b29b      	uxth	r3, r3
 8023486:	b2db      	uxtb	r3, r3
 8023488:	4619      	mov	r1, r3
 802348a:	f242 0050 	movw	r0, #8272	; 0x2050
 802348e:	f007 fafd 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_MIL_A_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 8023492:	8afb      	ldrh	r3, [r7, #22]
 8023494:	b2db      	uxtb	r3, r3
 8023496:	4619      	mov	r1, r3
 8023498:	f242 0051 	movw	r0, #8273	; 0x2051
 802349c:	f007 faf6 	bl	802aa8c <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 80234a0:	4b09      	ldr	r3, [pc, #36]	; (80234c8 <ce303_voltage+0x78c>)
 80234a2:	681b      	ldr	r3, [r3, #0]
 80234a4:	4618      	mov	r0, r3
 80234a6:	f7f5 ff4d 	bl	8019344 <osMutexRelease>
				status_registers.ce303_volt_a_reg = temp;
 80234aa:	4a08      	ldr	r2, [pc, #32]	; (80234cc <ce303_voltage+0x790>)
 80234ac:	89fb      	ldrh	r3, [r7, #14]
 80234ae:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a
				status_registers.ce303_volt_mil_a_reg = temp_mil;
 80234b2:	4a06      	ldr	r2, [pc, #24]	; (80234cc <ce303_voltage+0x790>)
 80234b4:	8afb      	ldrh	r3, [r7, #22]
 80234b6:	f8a2 3050 	strh.w	r3, [r2, #80]	; 0x50
				voltage_a_state = 1;
 80234ba:	2301      	movs	r3, #1
 80234bc:	757b      	strb	r3, [r7, #21]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 80234be:	f000 be59 	b.w	8024174 <ce303_voltage+0x1438>
 80234c2:	bf00      	nop
 80234c4:	20009a0c 	.word	0x20009a0c
 80234c8:	20009bb8 	.word	0x20009bb8
 80234cc:	2000af40 	.word	0x2000af40
			}

			else if( meter_rx_buffer[i+4] == 0x2E)
 80234d0:	8a3b      	ldrh	r3, [r7, #16]
 80234d2:	3304      	adds	r3, #4
 80234d4:	4a9f      	ldr	r2, [pc, #636]	; (8023754 <ce303_voltage+0xa18>)
 80234d6:	5cd3      	ldrb	r3, [r2, r3]
 80234d8:	2b2e      	cmp	r3, #46	; 0x2e
 80234da:	f040 864b 	bne.w	8024174 <ce303_voltage+0x1438>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+2])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+3])-0x30);
 80234de:	8a3b      	ldrh	r3, [r7, #16]
 80234e0:	3301      	adds	r3, #1
 80234e2:	4a9c      	ldr	r2, [pc, #624]	; (8023754 <ce303_voltage+0xa18>)
 80234e4:	5cd3      	ldrb	r3, [r2, r3]
 80234e6:	3b30      	subs	r3, #48	; 0x30
 80234e8:	b29b      	uxth	r3, r3
 80234ea:	461a      	mov	r2, r3
 80234ec:	0092      	lsls	r2, r2, #2
 80234ee:	4413      	add	r3, r2
 80234f0:	461a      	mov	r2, r3
 80234f2:	0091      	lsls	r1, r2, #2
 80234f4:	461a      	mov	r2, r3
 80234f6:	460b      	mov	r3, r1
 80234f8:	4413      	add	r3, r2
 80234fa:	009b      	lsls	r3, r3, #2
 80234fc:	b29a      	uxth	r2, r3
 80234fe:	8a3b      	ldrh	r3, [r7, #16]
 8023500:	3302      	adds	r3, #2
 8023502:	4994      	ldr	r1, [pc, #592]	; (8023754 <ce303_voltage+0xa18>)
 8023504:	5ccb      	ldrb	r3, [r1, r3]
 8023506:	3b30      	subs	r3, #48	; 0x30
 8023508:	b29b      	uxth	r3, r3
 802350a:	4619      	mov	r1, r3
 802350c:	0089      	lsls	r1, r1, #2
 802350e:	440b      	add	r3, r1
 8023510:	005b      	lsls	r3, r3, #1
 8023512:	b29b      	uxth	r3, r3
 8023514:	4413      	add	r3, r2
 8023516:	b29a      	uxth	r2, r3
 8023518:	8a3b      	ldrh	r3, [r7, #16]
 802351a:	3303      	adds	r3, #3
 802351c:	498d      	ldr	r1, [pc, #564]	; (8023754 <ce303_voltage+0xa18>)
 802351e:	5ccb      	ldrb	r3, [r1, r3]
 8023520:	b29b      	uxth	r3, r3
 8023522:	4413      	add	r3, r2
 8023524:	b29b      	uxth	r3, r3
 8023526:	3b30      	subs	r3, #48	; 0x30
 8023528:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+6] == 0x29 ) // если 1 разряд после запятой
 802352a:	8a3b      	ldrh	r3, [r7, #16]
 802352c:	3306      	adds	r3, #6
 802352e:	4a89      	ldr	r2, [pc, #548]	; (8023754 <ce303_voltage+0xa18>)
 8023530:	5cd3      	ldrb	r3, [r2, r3]
 8023532:	2b29      	cmp	r3, #41	; 0x29
 8023534:	d110      	bne.n	8023558 <ce303_voltage+0x81c>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+5])-0x30)*100;
 8023536:	8a3b      	ldrh	r3, [r7, #16]
 8023538:	3305      	adds	r3, #5
 802353a:	4a86      	ldr	r2, [pc, #536]	; (8023754 <ce303_voltage+0xa18>)
 802353c:	5cd3      	ldrb	r3, [r2, r3]
 802353e:	3b30      	subs	r3, #48	; 0x30
 8023540:	b29b      	uxth	r3, r3
 8023542:	461a      	mov	r2, r3
 8023544:	0092      	lsls	r2, r2, #2
 8023546:	4413      	add	r3, r2
 8023548:	461a      	mov	r2, r3
 802354a:	0091      	lsls	r1, r2, #2
 802354c:	461a      	mov	r2, r3
 802354e:	460b      	mov	r3, r1
 8023550:	4413      	add	r3, r2
 8023552:	009b      	lsls	r3, r3, #2
 8023554:	82fb      	strh	r3, [r7, #22]
 8023556:	e070      	b.n	802363a <ce303_voltage+0x8fe>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 2 разряда после запятой
 8023558:	8a3b      	ldrh	r3, [r7, #16]
 802355a:	3307      	adds	r3, #7
 802355c:	4a7d      	ldr	r2, [pc, #500]	; (8023754 <ce303_voltage+0xa18>)
 802355e:	5cd3      	ldrb	r3, [r2, r3]
 8023560:	2b29      	cmp	r3, #41	; 0x29
 8023562:	d117      	bne.n	8023594 <ce303_voltage+0x858>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30))*10;
 8023564:	8a3b      	ldrh	r3, [r7, #16]
 8023566:	3305      	adds	r3, #5
 8023568:	4a7a      	ldr	r2, [pc, #488]	; (8023754 <ce303_voltage+0xa18>)
 802356a:	5cd3      	ldrb	r3, [r2, r3]
 802356c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8023570:	4613      	mov	r3, r2
 8023572:	009b      	lsls	r3, r3, #2
 8023574:	4413      	add	r3, r2
 8023576:	005b      	lsls	r3, r3, #1
 8023578:	4619      	mov	r1, r3
 802357a:	8a3b      	ldrh	r3, [r7, #16]
 802357c:	3306      	adds	r3, #6
 802357e:	4a75      	ldr	r2, [pc, #468]	; (8023754 <ce303_voltage+0xa18>)
 8023580:	5cd3      	ldrb	r3, [r2, r3]
 8023582:	3b30      	subs	r3, #48	; 0x30
 8023584:	440b      	add	r3, r1
 8023586:	b29b      	uxth	r3, r3
 8023588:	461a      	mov	r2, r3
 802358a:	0092      	lsls	r2, r2, #2
 802358c:	4413      	add	r3, r2
 802358e:	005b      	lsls	r3, r3, #1
 8023590:	82fb      	strh	r3, [r7, #22]
 8023592:	e052      	b.n	802363a <ce303_voltage+0x8fe>
				}
				else if( meter_rx_buffer[i+8] == 0x29 ) // если 3 разряда после запятой
 8023594:	8a3b      	ldrh	r3, [r7, #16]
 8023596:	3308      	adds	r3, #8
 8023598:	4a6e      	ldr	r2, [pc, #440]	; (8023754 <ce303_voltage+0xa18>)
 802359a:	5cd3      	ldrb	r3, [r2, r3]
 802359c:	2b29      	cmp	r3, #41	; 0x29
 802359e:	d126      	bne.n	80235ee <ce303_voltage+0x8b2>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 80235a0:	8a3b      	ldrh	r3, [r7, #16]
 80235a2:	3305      	adds	r3, #5
 80235a4:	4a6b      	ldr	r2, [pc, #428]	; (8023754 <ce303_voltage+0xa18>)
 80235a6:	5cd3      	ldrb	r3, [r2, r3]
 80235a8:	3b30      	subs	r3, #48	; 0x30
 80235aa:	b29b      	uxth	r3, r3
 80235ac:	461a      	mov	r2, r3
 80235ae:	0092      	lsls	r2, r2, #2
 80235b0:	4413      	add	r3, r2
 80235b2:	461a      	mov	r2, r3
 80235b4:	0091      	lsls	r1, r2, #2
 80235b6:	461a      	mov	r2, r3
 80235b8:	460b      	mov	r3, r1
 80235ba:	4413      	add	r3, r2
 80235bc:	009b      	lsls	r3, r3, #2
 80235be:	b29a      	uxth	r2, r3
 80235c0:	8a3b      	ldrh	r3, [r7, #16]
 80235c2:	3306      	adds	r3, #6
 80235c4:	4963      	ldr	r1, [pc, #396]	; (8023754 <ce303_voltage+0xa18>)
 80235c6:	5ccb      	ldrb	r3, [r1, r3]
 80235c8:	3b30      	subs	r3, #48	; 0x30
 80235ca:	b29b      	uxth	r3, r3
 80235cc:	4619      	mov	r1, r3
 80235ce:	0089      	lsls	r1, r1, #2
 80235d0:	440b      	add	r3, r1
 80235d2:	005b      	lsls	r3, r3, #1
 80235d4:	b29b      	uxth	r3, r3
 80235d6:	4413      	add	r3, r2
 80235d8:	b29a      	uxth	r2, r3
 80235da:	8a3b      	ldrh	r3, [r7, #16]
 80235dc:	3307      	adds	r3, #7
 80235de:	495d      	ldr	r1, [pc, #372]	; (8023754 <ce303_voltage+0xa18>)
 80235e0:	5ccb      	ldrb	r3, [r1, r3]
 80235e2:	b29b      	uxth	r3, r3
 80235e4:	4413      	add	r3, r2
 80235e6:	b29b      	uxth	r3, r3
 80235e8:	3b30      	subs	r3, #48	; 0x30
 80235ea:	82fb      	strh	r3, [r7, #22]
 80235ec:	e025      	b.n	802363a <ce303_voltage+0x8fe>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 80235ee:	8a3b      	ldrh	r3, [r7, #16]
 80235f0:	3305      	adds	r3, #5
 80235f2:	4a58      	ldr	r2, [pc, #352]	; (8023754 <ce303_voltage+0xa18>)
 80235f4:	5cd3      	ldrb	r3, [r2, r3]
 80235f6:	3b30      	subs	r3, #48	; 0x30
 80235f8:	b29b      	uxth	r3, r3
 80235fa:	461a      	mov	r2, r3
 80235fc:	0092      	lsls	r2, r2, #2
 80235fe:	4413      	add	r3, r2
 8023600:	461a      	mov	r2, r3
 8023602:	0091      	lsls	r1, r2, #2
 8023604:	461a      	mov	r2, r3
 8023606:	460b      	mov	r3, r1
 8023608:	4413      	add	r3, r2
 802360a:	009b      	lsls	r3, r3, #2
 802360c:	b29a      	uxth	r2, r3
 802360e:	8a3b      	ldrh	r3, [r7, #16]
 8023610:	3306      	adds	r3, #6
 8023612:	4950      	ldr	r1, [pc, #320]	; (8023754 <ce303_voltage+0xa18>)
 8023614:	5ccb      	ldrb	r3, [r1, r3]
 8023616:	3b30      	subs	r3, #48	; 0x30
 8023618:	b29b      	uxth	r3, r3
 802361a:	4619      	mov	r1, r3
 802361c:	0089      	lsls	r1, r1, #2
 802361e:	440b      	add	r3, r1
 8023620:	005b      	lsls	r3, r3, #1
 8023622:	b29b      	uxth	r3, r3
 8023624:	4413      	add	r3, r2
 8023626:	b29a      	uxth	r2, r3
 8023628:	8a3b      	ldrh	r3, [r7, #16]
 802362a:	3307      	adds	r3, #7
 802362c:	4949      	ldr	r1, [pc, #292]	; (8023754 <ce303_voltage+0xa18>)
 802362e:	5ccb      	ldrb	r3, [r1, r3]
 8023630:	b29b      	uxth	r3, r3
 8023632:	4413      	add	r3, r2
 8023634:	b29b      	uxth	r3, r3
 8023636:	3b30      	subs	r3, #48	; 0x30
 8023638:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 802363a:	4b47      	ldr	r3, [pc, #284]	; (8023758 <ce303_voltage+0xa1c>)
 802363c:	681b      	ldr	r3, [r3, #0]
 802363e:	f04f 31ff 	mov.w	r1, #4294967295
 8023642:	4618      	mov	r0, r3
 8023644:	f7f5 fe30 	bl	80192a8 <osMutexWait>
				fm25v02_write(2*CE_303_VOLT_A_REG, ((uint8_t)(temp>>8)) );
 8023648:	89fb      	ldrh	r3, [r7, #14]
 802364a:	0a1b      	lsrs	r3, r3, #8
 802364c:	b29b      	uxth	r3, r3
 802364e:	b2db      	uxtb	r3, r3
 8023650:	4619      	mov	r1, r3
 8023652:	f242 004a 	movw	r0, #8266	; 0x204a
 8023656:	f007 fa19 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_A_REG+1, ((uint8_t)(temp&0x00FF)) );
 802365a:	89fb      	ldrh	r3, [r7, #14]
 802365c:	b2db      	uxtb	r3, r3
 802365e:	4619      	mov	r1, r3
 8023660:	f242 004b 	movw	r0, #8267	; 0x204b
 8023664:	f007 fa12 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_MIL_A_REG, ((uint8_t)(temp_mil>>8)) );
 8023668:	8afb      	ldrh	r3, [r7, #22]
 802366a:	0a1b      	lsrs	r3, r3, #8
 802366c:	b29b      	uxth	r3, r3
 802366e:	b2db      	uxtb	r3, r3
 8023670:	4619      	mov	r1, r3
 8023672:	f242 0050 	movw	r0, #8272	; 0x2050
 8023676:	f007 fa09 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_MIL_A_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 802367a:	8afb      	ldrh	r3, [r7, #22]
 802367c:	b2db      	uxtb	r3, r3
 802367e:	4619      	mov	r1, r3
 8023680:	f242 0051 	movw	r0, #8273	; 0x2051
 8023684:	f007 fa02 	bl	802aa8c <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8023688:	4b33      	ldr	r3, [pc, #204]	; (8023758 <ce303_voltage+0xa1c>)
 802368a:	681b      	ldr	r3, [r3, #0]
 802368c:	4618      	mov	r0, r3
 802368e:	f7f5 fe59 	bl	8019344 <osMutexRelease>
				status_registers.ce303_volt_a_reg = temp;
 8023692:	4a32      	ldr	r2, [pc, #200]	; (802375c <ce303_voltage+0xa20>)
 8023694:	89fb      	ldrh	r3, [r7, #14]
 8023696:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a
				status_registers.ce303_volt_mil_a_reg = temp_mil;
 802369a:	4a30      	ldr	r2, [pc, #192]	; (802375c <ce303_voltage+0xa20>)
 802369c:	8afb      	ldrh	r3, [r7, #22]
 802369e:	f8a2 3050 	strh.w	r3, [r2, #80]	; 0x50
				voltage_a_state = 1;
 80236a2:	2301      	movs	r3, #1
 80236a4:	757b      	strb	r3, [r7, #21]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 80236a6:	f000 bd65 	b.w	8024174 <ce303_voltage+0x1438>
			}
		}

		else if( (meter_rx_buffer[i] == 0x28) && (voltage_a_state==1) && (voltage_b_state==0) && (voltage_c_state==0) )
 80236aa:	8a3b      	ldrh	r3, [r7, #16]
 80236ac:	4a29      	ldr	r2, [pc, #164]	; (8023754 <ce303_voltage+0xa18>)
 80236ae:	5cd3      	ldrb	r3, [r2, r3]
 80236b0:	2b28      	cmp	r3, #40	; 0x28
 80236b2:	f040 82ad 	bne.w	8023c10 <ce303_voltage+0xed4>
 80236b6:	7d7b      	ldrb	r3, [r7, #21]
 80236b8:	2b01      	cmp	r3, #1
 80236ba:	f040 82a9 	bne.w	8023c10 <ce303_voltage+0xed4>
 80236be:	7d3b      	ldrb	r3, [r7, #20]
 80236c0:	2b00      	cmp	r3, #0
 80236c2:	f040 82a5 	bne.w	8023c10 <ce303_voltage+0xed4>
 80236c6:	7cfb      	ldrb	r3, [r7, #19]
 80236c8:	2b00      	cmp	r3, #0
 80236ca:	f040 82a1 	bne.w	8023c10 <ce303_voltage+0xed4>
		{
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 80236ce:	8a3b      	ldrh	r3, [r7, #16]
 80236d0:	3302      	adds	r3, #2
 80236d2:	4a20      	ldr	r2, [pc, #128]	; (8023754 <ce303_voltage+0xa18>)
 80236d4:	5cd3      	ldrb	r3, [r2, r3]
 80236d6:	2b2e      	cmp	r3, #46	; 0x2e
 80236d8:	f040 80cd 	bne.w	8023876 <ce303_voltage+0xb3a>
			{
				temp = (uint16_t)(meter_rx_buffer[i+1]-0x30);
 80236dc:	8a3b      	ldrh	r3, [r7, #16]
 80236de:	3301      	adds	r3, #1
 80236e0:	4a1c      	ldr	r2, [pc, #112]	; (8023754 <ce303_voltage+0xa18>)
 80236e2:	5cd3      	ldrb	r3, [r2, r3]
 80236e4:	b29b      	uxth	r3, r3
 80236e6:	3b30      	subs	r3, #48	; 0x30
 80236e8:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+4] == 0x29 ) // если 1 разряд после запятой
 80236ea:	8a3b      	ldrh	r3, [r7, #16]
 80236ec:	3304      	adds	r3, #4
 80236ee:	4a19      	ldr	r2, [pc, #100]	; (8023754 <ce303_voltage+0xa18>)
 80236f0:	5cd3      	ldrb	r3, [r2, r3]
 80236f2:	2b29      	cmp	r3, #41	; 0x29
 80236f4:	d110      	bne.n	8023718 <ce303_voltage+0x9dc>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+3])-0x30)*100;
 80236f6:	8a3b      	ldrh	r3, [r7, #16]
 80236f8:	3303      	adds	r3, #3
 80236fa:	4a16      	ldr	r2, [pc, #88]	; (8023754 <ce303_voltage+0xa18>)
 80236fc:	5cd3      	ldrb	r3, [r2, r3]
 80236fe:	3b30      	subs	r3, #48	; 0x30
 8023700:	b29b      	uxth	r3, r3
 8023702:	461a      	mov	r2, r3
 8023704:	0092      	lsls	r2, r2, #2
 8023706:	4413      	add	r3, r2
 8023708:	461a      	mov	r2, r3
 802370a:	0091      	lsls	r1, r2, #2
 802370c:	461a      	mov	r2, r3
 802370e:	460b      	mov	r3, r1
 8023710:	4413      	add	r3, r2
 8023712:	009b      	lsls	r3, r3, #2
 8023714:	82fb      	strh	r3, [r7, #22]
 8023716:	e076      	b.n	8023806 <ce303_voltage+0xaca>
				}
				else if( meter_rx_buffer[i+5] == 0x29 ) // если 2 разряда после запятой
 8023718:	8a3b      	ldrh	r3, [r7, #16]
 802371a:	3305      	adds	r3, #5
 802371c:	4a0d      	ldr	r2, [pc, #52]	; (8023754 <ce303_voltage+0xa18>)
 802371e:	5cd3      	ldrb	r3, [r2, r3]
 8023720:	2b29      	cmp	r3, #41	; 0x29
 8023722:	d11d      	bne.n	8023760 <ce303_voltage+0xa24>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+3])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+4])-0x30))*10;
 8023724:	8a3b      	ldrh	r3, [r7, #16]
 8023726:	3303      	adds	r3, #3
 8023728:	4a0a      	ldr	r2, [pc, #40]	; (8023754 <ce303_voltage+0xa18>)
 802372a:	5cd3      	ldrb	r3, [r2, r3]
 802372c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8023730:	4613      	mov	r3, r2
 8023732:	009b      	lsls	r3, r3, #2
 8023734:	4413      	add	r3, r2
 8023736:	005b      	lsls	r3, r3, #1
 8023738:	4619      	mov	r1, r3
 802373a:	8a3b      	ldrh	r3, [r7, #16]
 802373c:	3304      	adds	r3, #4
 802373e:	4a05      	ldr	r2, [pc, #20]	; (8023754 <ce303_voltage+0xa18>)
 8023740:	5cd3      	ldrb	r3, [r2, r3]
 8023742:	3b30      	subs	r3, #48	; 0x30
 8023744:	440b      	add	r3, r1
 8023746:	b29b      	uxth	r3, r3
 8023748:	461a      	mov	r2, r3
 802374a:	0092      	lsls	r2, r2, #2
 802374c:	4413      	add	r3, r2
 802374e:	005b      	lsls	r3, r3, #1
 8023750:	82fb      	strh	r3, [r7, #22]
 8023752:	e058      	b.n	8023806 <ce303_voltage+0xaca>
 8023754:	20009a0c 	.word	0x20009a0c
 8023758:	20009bb8 	.word	0x20009bb8
 802375c:	2000af40 	.word	0x2000af40
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 3 разряда после запятой
 8023760:	8a3b      	ldrh	r3, [r7, #16]
 8023762:	3306      	adds	r3, #6
 8023764:	4ab1      	ldr	r2, [pc, #708]	; (8023a2c <ce303_voltage+0xcf0>)
 8023766:	5cd3      	ldrb	r3, [r2, r3]
 8023768:	2b29      	cmp	r3, #41	; 0x29
 802376a:	d126      	bne.n	80237ba <ce303_voltage+0xa7e>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 802376c:	8a3b      	ldrh	r3, [r7, #16]
 802376e:	3303      	adds	r3, #3
 8023770:	4aae      	ldr	r2, [pc, #696]	; (8023a2c <ce303_voltage+0xcf0>)
 8023772:	5cd3      	ldrb	r3, [r2, r3]
 8023774:	3b30      	subs	r3, #48	; 0x30
 8023776:	b29b      	uxth	r3, r3
 8023778:	461a      	mov	r2, r3
 802377a:	0092      	lsls	r2, r2, #2
 802377c:	4413      	add	r3, r2
 802377e:	461a      	mov	r2, r3
 8023780:	0091      	lsls	r1, r2, #2
 8023782:	461a      	mov	r2, r3
 8023784:	460b      	mov	r3, r1
 8023786:	4413      	add	r3, r2
 8023788:	009b      	lsls	r3, r3, #2
 802378a:	b29a      	uxth	r2, r3
 802378c:	8a3b      	ldrh	r3, [r7, #16]
 802378e:	3304      	adds	r3, #4
 8023790:	49a6      	ldr	r1, [pc, #664]	; (8023a2c <ce303_voltage+0xcf0>)
 8023792:	5ccb      	ldrb	r3, [r1, r3]
 8023794:	3b30      	subs	r3, #48	; 0x30
 8023796:	b29b      	uxth	r3, r3
 8023798:	4619      	mov	r1, r3
 802379a:	0089      	lsls	r1, r1, #2
 802379c:	440b      	add	r3, r1
 802379e:	005b      	lsls	r3, r3, #1
 80237a0:	b29b      	uxth	r3, r3
 80237a2:	4413      	add	r3, r2
 80237a4:	b29a      	uxth	r2, r3
 80237a6:	8a3b      	ldrh	r3, [r7, #16]
 80237a8:	3305      	adds	r3, #5
 80237aa:	49a0      	ldr	r1, [pc, #640]	; (8023a2c <ce303_voltage+0xcf0>)
 80237ac:	5ccb      	ldrb	r3, [r1, r3]
 80237ae:	b29b      	uxth	r3, r3
 80237b0:	4413      	add	r3, r2
 80237b2:	b29b      	uxth	r3, r3
 80237b4:	3b30      	subs	r3, #48	; 0x30
 80237b6:	82fb      	strh	r3, [r7, #22]
 80237b8:	e025      	b.n	8023806 <ce303_voltage+0xaca>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 80237ba:	8a3b      	ldrh	r3, [r7, #16]
 80237bc:	3303      	adds	r3, #3
 80237be:	4a9b      	ldr	r2, [pc, #620]	; (8023a2c <ce303_voltage+0xcf0>)
 80237c0:	5cd3      	ldrb	r3, [r2, r3]
 80237c2:	3b30      	subs	r3, #48	; 0x30
 80237c4:	b29b      	uxth	r3, r3
 80237c6:	461a      	mov	r2, r3
 80237c8:	0092      	lsls	r2, r2, #2
 80237ca:	4413      	add	r3, r2
 80237cc:	461a      	mov	r2, r3
 80237ce:	0091      	lsls	r1, r2, #2
 80237d0:	461a      	mov	r2, r3
 80237d2:	460b      	mov	r3, r1
 80237d4:	4413      	add	r3, r2
 80237d6:	009b      	lsls	r3, r3, #2
 80237d8:	b29a      	uxth	r2, r3
 80237da:	8a3b      	ldrh	r3, [r7, #16]
 80237dc:	3304      	adds	r3, #4
 80237de:	4993      	ldr	r1, [pc, #588]	; (8023a2c <ce303_voltage+0xcf0>)
 80237e0:	5ccb      	ldrb	r3, [r1, r3]
 80237e2:	3b30      	subs	r3, #48	; 0x30
 80237e4:	b29b      	uxth	r3, r3
 80237e6:	4619      	mov	r1, r3
 80237e8:	0089      	lsls	r1, r1, #2
 80237ea:	440b      	add	r3, r1
 80237ec:	005b      	lsls	r3, r3, #1
 80237ee:	b29b      	uxth	r3, r3
 80237f0:	4413      	add	r3, r2
 80237f2:	b29a      	uxth	r2, r3
 80237f4:	8a3b      	ldrh	r3, [r7, #16]
 80237f6:	3305      	adds	r3, #5
 80237f8:	498c      	ldr	r1, [pc, #560]	; (8023a2c <ce303_voltage+0xcf0>)
 80237fa:	5ccb      	ldrb	r3, [r1, r3]
 80237fc:	b29b      	uxth	r3, r3
 80237fe:	4413      	add	r3, r2
 8023800:	b29b      	uxth	r3, r3
 8023802:	3b30      	subs	r3, #48	; 0x30
 8023804:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8023806:	4b8a      	ldr	r3, [pc, #552]	; (8023a30 <ce303_voltage+0xcf4>)
 8023808:	681b      	ldr	r3, [r3, #0]
 802380a:	f04f 31ff 	mov.w	r1, #4294967295
 802380e:	4618      	mov	r0, r3
 8023810:	f7f5 fd4a 	bl	80192a8 <osMutexWait>
				fm25v02_write(2*CE_303_VOLT_B_REG, ((uint8_t)(temp>>8)) );
 8023814:	89fb      	ldrh	r3, [r7, #14]
 8023816:	0a1b      	lsrs	r3, r3, #8
 8023818:	b29b      	uxth	r3, r3
 802381a:	b2db      	uxtb	r3, r3
 802381c:	4619      	mov	r1, r3
 802381e:	f242 004c 	movw	r0, #8268	; 0x204c
 8023822:	f007 f933 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_B_REG+1, ((uint8_t)(temp&0x00FF)) );
 8023826:	89fb      	ldrh	r3, [r7, #14]
 8023828:	b2db      	uxtb	r3, r3
 802382a:	4619      	mov	r1, r3
 802382c:	f242 004d 	movw	r0, #8269	; 0x204d
 8023830:	f007 f92c 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_MIL_B_REG, ((uint8_t)(temp_mil>>8)) );
 8023834:	8afb      	ldrh	r3, [r7, #22]
 8023836:	0a1b      	lsrs	r3, r3, #8
 8023838:	b29b      	uxth	r3, r3
 802383a:	b2db      	uxtb	r3, r3
 802383c:	4619      	mov	r1, r3
 802383e:	f242 0052 	movw	r0, #8274	; 0x2052
 8023842:	f007 f923 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_MIL_B_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 8023846:	8afb      	ldrh	r3, [r7, #22]
 8023848:	b2db      	uxtb	r3, r3
 802384a:	4619      	mov	r1, r3
 802384c:	f242 0053 	movw	r0, #8275	; 0x2053
 8023850:	f007 f91c 	bl	802aa8c <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8023854:	4b76      	ldr	r3, [pc, #472]	; (8023a30 <ce303_voltage+0xcf4>)
 8023856:	681b      	ldr	r3, [r3, #0]
 8023858:	4618      	mov	r0, r3
 802385a:	f7f5 fd73 	bl	8019344 <osMutexRelease>
				status_registers.ce303_volt_b_reg = temp;
 802385e:	4a75      	ldr	r2, [pc, #468]	; (8023a34 <ce303_voltage+0xcf8>)
 8023860:	89fb      	ldrh	r3, [r7, #14]
 8023862:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
				status_registers.ce303_volt_mil_b_reg =  temp_mil;
 8023866:	4a73      	ldr	r2, [pc, #460]	; (8023a34 <ce303_voltage+0xcf8>)
 8023868:	8afb      	ldrh	r3, [r7, #22]
 802386a:	f8a2 3052 	strh.w	r3, [r2, #82]	; 0x52
				voltage_b_state = 1;
 802386e:	2301      	movs	r3, #1
 8023870:	753b      	strb	r3, [r7, #20]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 8023872:	f000 bc81 	b.w	8024178 <ce303_voltage+0x143c>
			}
			else if( meter_rx_buffer[i+3] == 0x2E)
 8023876:	8a3b      	ldrh	r3, [r7, #16]
 8023878:	3303      	adds	r3, #3
 802387a:	4a6c      	ldr	r2, [pc, #432]	; (8023a2c <ce303_voltage+0xcf0>)
 802387c:	5cd3      	ldrb	r3, [r2, r3]
 802387e:	2b2e      	cmp	r3, #46	; 0x2e
 8023880:	f040 80da 	bne.w	8023a38 <ce303_voltage+0xcfc>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+2])-0x30);
 8023884:	8a3b      	ldrh	r3, [r7, #16]
 8023886:	3301      	adds	r3, #1
 8023888:	4a68      	ldr	r2, [pc, #416]	; (8023a2c <ce303_voltage+0xcf0>)
 802388a:	5cd3      	ldrb	r3, [r2, r3]
 802388c:	3b30      	subs	r3, #48	; 0x30
 802388e:	b29b      	uxth	r3, r3
 8023890:	461a      	mov	r2, r3
 8023892:	0092      	lsls	r2, r2, #2
 8023894:	4413      	add	r3, r2
 8023896:	005b      	lsls	r3, r3, #1
 8023898:	b29a      	uxth	r2, r3
 802389a:	8a3b      	ldrh	r3, [r7, #16]
 802389c:	3302      	adds	r3, #2
 802389e:	4963      	ldr	r1, [pc, #396]	; (8023a2c <ce303_voltage+0xcf0>)
 80238a0:	5ccb      	ldrb	r3, [r1, r3]
 80238a2:	b29b      	uxth	r3, r3
 80238a4:	4413      	add	r3, r2
 80238a6:	b29b      	uxth	r3, r3
 80238a8:	3b30      	subs	r3, #48	; 0x30
 80238aa:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+5] == 0x29 ) // если 1 разряд после запятой
 80238ac:	8a3b      	ldrh	r3, [r7, #16]
 80238ae:	3305      	adds	r3, #5
 80238b0:	4a5e      	ldr	r2, [pc, #376]	; (8023a2c <ce303_voltage+0xcf0>)
 80238b2:	5cd3      	ldrb	r3, [r2, r3]
 80238b4:	2b29      	cmp	r3, #41	; 0x29
 80238b6:	d110      	bne.n	80238da <ce303_voltage+0xb9e>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+4])-0x30)*100;
 80238b8:	8a3b      	ldrh	r3, [r7, #16]
 80238ba:	3304      	adds	r3, #4
 80238bc:	4a5b      	ldr	r2, [pc, #364]	; (8023a2c <ce303_voltage+0xcf0>)
 80238be:	5cd3      	ldrb	r3, [r2, r3]
 80238c0:	3b30      	subs	r3, #48	; 0x30
 80238c2:	b29b      	uxth	r3, r3
 80238c4:	461a      	mov	r2, r3
 80238c6:	0092      	lsls	r2, r2, #2
 80238c8:	4413      	add	r3, r2
 80238ca:	461a      	mov	r2, r3
 80238cc:	0091      	lsls	r1, r2, #2
 80238ce:	461a      	mov	r2, r3
 80238d0:	460b      	mov	r3, r1
 80238d2:	4413      	add	r3, r2
 80238d4:	009b      	lsls	r3, r3, #2
 80238d6:	82fb      	strh	r3, [r7, #22]
 80238d8:	e070      	b.n	80239bc <ce303_voltage+0xc80>
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 2 разряда после запятой
 80238da:	8a3b      	ldrh	r3, [r7, #16]
 80238dc:	3306      	adds	r3, #6
 80238de:	4a53      	ldr	r2, [pc, #332]	; (8023a2c <ce303_voltage+0xcf0>)
 80238e0:	5cd3      	ldrb	r3, [r2, r3]
 80238e2:	2b29      	cmp	r3, #41	; 0x29
 80238e4:	d117      	bne.n	8023916 <ce303_voltage+0xbda>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30))*10;
 80238e6:	8a3b      	ldrh	r3, [r7, #16]
 80238e8:	3304      	adds	r3, #4
 80238ea:	4a50      	ldr	r2, [pc, #320]	; (8023a2c <ce303_voltage+0xcf0>)
 80238ec:	5cd3      	ldrb	r3, [r2, r3]
 80238ee:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80238f2:	4613      	mov	r3, r2
 80238f4:	009b      	lsls	r3, r3, #2
 80238f6:	4413      	add	r3, r2
 80238f8:	005b      	lsls	r3, r3, #1
 80238fa:	4619      	mov	r1, r3
 80238fc:	8a3b      	ldrh	r3, [r7, #16]
 80238fe:	3305      	adds	r3, #5
 8023900:	4a4a      	ldr	r2, [pc, #296]	; (8023a2c <ce303_voltage+0xcf0>)
 8023902:	5cd3      	ldrb	r3, [r2, r3]
 8023904:	3b30      	subs	r3, #48	; 0x30
 8023906:	440b      	add	r3, r1
 8023908:	b29b      	uxth	r3, r3
 802390a:	461a      	mov	r2, r3
 802390c:	0092      	lsls	r2, r2, #2
 802390e:	4413      	add	r3, r2
 8023910:	005b      	lsls	r3, r3, #1
 8023912:	82fb      	strh	r3, [r7, #22]
 8023914:	e052      	b.n	80239bc <ce303_voltage+0xc80>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 3 разряда после запятой
 8023916:	8a3b      	ldrh	r3, [r7, #16]
 8023918:	3307      	adds	r3, #7
 802391a:	4a44      	ldr	r2, [pc, #272]	; (8023a2c <ce303_voltage+0xcf0>)
 802391c:	5cd3      	ldrb	r3, [r2, r3]
 802391e:	2b29      	cmp	r3, #41	; 0x29
 8023920:	d126      	bne.n	8023970 <ce303_voltage+0xc34>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 8023922:	8a3b      	ldrh	r3, [r7, #16]
 8023924:	3304      	adds	r3, #4
 8023926:	4a41      	ldr	r2, [pc, #260]	; (8023a2c <ce303_voltage+0xcf0>)
 8023928:	5cd3      	ldrb	r3, [r2, r3]
 802392a:	3b30      	subs	r3, #48	; 0x30
 802392c:	b29b      	uxth	r3, r3
 802392e:	461a      	mov	r2, r3
 8023930:	0092      	lsls	r2, r2, #2
 8023932:	4413      	add	r3, r2
 8023934:	461a      	mov	r2, r3
 8023936:	0091      	lsls	r1, r2, #2
 8023938:	461a      	mov	r2, r3
 802393a:	460b      	mov	r3, r1
 802393c:	4413      	add	r3, r2
 802393e:	009b      	lsls	r3, r3, #2
 8023940:	b29a      	uxth	r2, r3
 8023942:	8a3b      	ldrh	r3, [r7, #16]
 8023944:	3305      	adds	r3, #5
 8023946:	4939      	ldr	r1, [pc, #228]	; (8023a2c <ce303_voltage+0xcf0>)
 8023948:	5ccb      	ldrb	r3, [r1, r3]
 802394a:	3b30      	subs	r3, #48	; 0x30
 802394c:	b29b      	uxth	r3, r3
 802394e:	4619      	mov	r1, r3
 8023950:	0089      	lsls	r1, r1, #2
 8023952:	440b      	add	r3, r1
 8023954:	005b      	lsls	r3, r3, #1
 8023956:	b29b      	uxth	r3, r3
 8023958:	4413      	add	r3, r2
 802395a:	b29a      	uxth	r2, r3
 802395c:	8a3b      	ldrh	r3, [r7, #16]
 802395e:	3306      	adds	r3, #6
 8023960:	4932      	ldr	r1, [pc, #200]	; (8023a2c <ce303_voltage+0xcf0>)
 8023962:	5ccb      	ldrb	r3, [r1, r3]
 8023964:	b29b      	uxth	r3, r3
 8023966:	4413      	add	r3, r2
 8023968:	b29b      	uxth	r3, r3
 802396a:	3b30      	subs	r3, #48	; 0x30
 802396c:	82fb      	strh	r3, [r7, #22]
 802396e:	e025      	b.n	80239bc <ce303_voltage+0xc80>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 8023970:	8a3b      	ldrh	r3, [r7, #16]
 8023972:	3304      	adds	r3, #4
 8023974:	4a2d      	ldr	r2, [pc, #180]	; (8023a2c <ce303_voltage+0xcf0>)
 8023976:	5cd3      	ldrb	r3, [r2, r3]
 8023978:	3b30      	subs	r3, #48	; 0x30
 802397a:	b29b      	uxth	r3, r3
 802397c:	461a      	mov	r2, r3
 802397e:	0092      	lsls	r2, r2, #2
 8023980:	4413      	add	r3, r2
 8023982:	461a      	mov	r2, r3
 8023984:	0091      	lsls	r1, r2, #2
 8023986:	461a      	mov	r2, r3
 8023988:	460b      	mov	r3, r1
 802398a:	4413      	add	r3, r2
 802398c:	009b      	lsls	r3, r3, #2
 802398e:	b29a      	uxth	r2, r3
 8023990:	8a3b      	ldrh	r3, [r7, #16]
 8023992:	3305      	adds	r3, #5
 8023994:	4925      	ldr	r1, [pc, #148]	; (8023a2c <ce303_voltage+0xcf0>)
 8023996:	5ccb      	ldrb	r3, [r1, r3]
 8023998:	3b30      	subs	r3, #48	; 0x30
 802399a:	b29b      	uxth	r3, r3
 802399c:	4619      	mov	r1, r3
 802399e:	0089      	lsls	r1, r1, #2
 80239a0:	440b      	add	r3, r1
 80239a2:	005b      	lsls	r3, r3, #1
 80239a4:	b29b      	uxth	r3, r3
 80239a6:	4413      	add	r3, r2
 80239a8:	b29a      	uxth	r2, r3
 80239aa:	8a3b      	ldrh	r3, [r7, #16]
 80239ac:	3306      	adds	r3, #6
 80239ae:	491f      	ldr	r1, [pc, #124]	; (8023a2c <ce303_voltage+0xcf0>)
 80239b0:	5ccb      	ldrb	r3, [r1, r3]
 80239b2:	b29b      	uxth	r3, r3
 80239b4:	4413      	add	r3, r2
 80239b6:	b29b      	uxth	r3, r3
 80239b8:	3b30      	subs	r3, #48	; 0x30
 80239ba:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 80239bc:	4b1c      	ldr	r3, [pc, #112]	; (8023a30 <ce303_voltage+0xcf4>)
 80239be:	681b      	ldr	r3, [r3, #0]
 80239c0:	f04f 31ff 	mov.w	r1, #4294967295
 80239c4:	4618      	mov	r0, r3
 80239c6:	f7f5 fc6f 	bl	80192a8 <osMutexWait>
				fm25v02_write(2*CE_303_VOLT_B_REG, ((uint8_t)(temp>>8)) );
 80239ca:	89fb      	ldrh	r3, [r7, #14]
 80239cc:	0a1b      	lsrs	r3, r3, #8
 80239ce:	b29b      	uxth	r3, r3
 80239d0:	b2db      	uxtb	r3, r3
 80239d2:	4619      	mov	r1, r3
 80239d4:	f242 004c 	movw	r0, #8268	; 0x204c
 80239d8:	f007 f858 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_B_REG+1, ((uint8_t)(temp&0x00FF)) );
 80239dc:	89fb      	ldrh	r3, [r7, #14]
 80239de:	b2db      	uxtb	r3, r3
 80239e0:	4619      	mov	r1, r3
 80239e2:	f242 004d 	movw	r0, #8269	; 0x204d
 80239e6:	f007 f851 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_MIL_B_REG, ((uint8_t)(temp_mil>>8)) );
 80239ea:	8afb      	ldrh	r3, [r7, #22]
 80239ec:	0a1b      	lsrs	r3, r3, #8
 80239ee:	b29b      	uxth	r3, r3
 80239f0:	b2db      	uxtb	r3, r3
 80239f2:	4619      	mov	r1, r3
 80239f4:	f242 0052 	movw	r0, #8274	; 0x2052
 80239f8:	f007 f848 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_MIL_B_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 80239fc:	8afb      	ldrh	r3, [r7, #22]
 80239fe:	b2db      	uxtb	r3, r3
 8023a00:	4619      	mov	r1, r3
 8023a02:	f242 0053 	movw	r0, #8275	; 0x2053
 8023a06:	f007 f841 	bl	802aa8c <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8023a0a:	4b09      	ldr	r3, [pc, #36]	; (8023a30 <ce303_voltage+0xcf4>)
 8023a0c:	681b      	ldr	r3, [r3, #0]
 8023a0e:	4618      	mov	r0, r3
 8023a10:	f7f5 fc98 	bl	8019344 <osMutexRelease>
				status_registers.ce303_volt_b_reg = temp;
 8023a14:	4a07      	ldr	r2, [pc, #28]	; (8023a34 <ce303_voltage+0xcf8>)
 8023a16:	89fb      	ldrh	r3, [r7, #14]
 8023a18:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
				status_registers.ce303_volt_mil_b_reg = temp_mil;
 8023a1c:	4a05      	ldr	r2, [pc, #20]	; (8023a34 <ce303_voltage+0xcf8>)
 8023a1e:	8afb      	ldrh	r3, [r7, #22]
 8023a20:	f8a2 3052 	strh.w	r3, [r2, #82]	; 0x52
				voltage_b_state = 1;
 8023a24:	2301      	movs	r3, #1
 8023a26:	753b      	strb	r3, [r7, #20]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 8023a28:	e3a6      	b.n	8024178 <ce303_voltage+0x143c>
 8023a2a:	bf00      	nop
 8023a2c:	20009a0c 	.word	0x20009a0c
 8023a30:	20009bb8 	.word	0x20009bb8
 8023a34:	2000af40 	.word	0x2000af40
			}

			else if( meter_rx_buffer[i+4] == 0x2E)
 8023a38:	8a3b      	ldrh	r3, [r7, #16]
 8023a3a:	3304      	adds	r3, #4
 8023a3c:	4a9f      	ldr	r2, [pc, #636]	; (8023cbc <ce303_voltage+0xf80>)
 8023a3e:	5cd3      	ldrb	r3, [r2, r3]
 8023a40:	2b2e      	cmp	r3, #46	; 0x2e
 8023a42:	f040 8399 	bne.w	8024178 <ce303_voltage+0x143c>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+2])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+3])-0x30);
 8023a46:	8a3b      	ldrh	r3, [r7, #16]
 8023a48:	3301      	adds	r3, #1
 8023a4a:	4a9c      	ldr	r2, [pc, #624]	; (8023cbc <ce303_voltage+0xf80>)
 8023a4c:	5cd3      	ldrb	r3, [r2, r3]
 8023a4e:	3b30      	subs	r3, #48	; 0x30
 8023a50:	b29b      	uxth	r3, r3
 8023a52:	461a      	mov	r2, r3
 8023a54:	0092      	lsls	r2, r2, #2
 8023a56:	4413      	add	r3, r2
 8023a58:	461a      	mov	r2, r3
 8023a5a:	0091      	lsls	r1, r2, #2
 8023a5c:	461a      	mov	r2, r3
 8023a5e:	460b      	mov	r3, r1
 8023a60:	4413      	add	r3, r2
 8023a62:	009b      	lsls	r3, r3, #2
 8023a64:	b29a      	uxth	r2, r3
 8023a66:	8a3b      	ldrh	r3, [r7, #16]
 8023a68:	3302      	adds	r3, #2
 8023a6a:	4994      	ldr	r1, [pc, #592]	; (8023cbc <ce303_voltage+0xf80>)
 8023a6c:	5ccb      	ldrb	r3, [r1, r3]
 8023a6e:	3b30      	subs	r3, #48	; 0x30
 8023a70:	b29b      	uxth	r3, r3
 8023a72:	4619      	mov	r1, r3
 8023a74:	0089      	lsls	r1, r1, #2
 8023a76:	440b      	add	r3, r1
 8023a78:	005b      	lsls	r3, r3, #1
 8023a7a:	b29b      	uxth	r3, r3
 8023a7c:	4413      	add	r3, r2
 8023a7e:	b29a      	uxth	r2, r3
 8023a80:	8a3b      	ldrh	r3, [r7, #16]
 8023a82:	3303      	adds	r3, #3
 8023a84:	498d      	ldr	r1, [pc, #564]	; (8023cbc <ce303_voltage+0xf80>)
 8023a86:	5ccb      	ldrb	r3, [r1, r3]
 8023a88:	b29b      	uxth	r3, r3
 8023a8a:	4413      	add	r3, r2
 8023a8c:	b29b      	uxth	r3, r3
 8023a8e:	3b30      	subs	r3, #48	; 0x30
 8023a90:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+6] == 0x29 ) // если 1 разряд после запятой
 8023a92:	8a3b      	ldrh	r3, [r7, #16]
 8023a94:	3306      	adds	r3, #6
 8023a96:	4a89      	ldr	r2, [pc, #548]	; (8023cbc <ce303_voltage+0xf80>)
 8023a98:	5cd3      	ldrb	r3, [r2, r3]
 8023a9a:	2b29      	cmp	r3, #41	; 0x29
 8023a9c:	d110      	bne.n	8023ac0 <ce303_voltage+0xd84>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+5])-0x30)*100;
 8023a9e:	8a3b      	ldrh	r3, [r7, #16]
 8023aa0:	3305      	adds	r3, #5
 8023aa2:	4a86      	ldr	r2, [pc, #536]	; (8023cbc <ce303_voltage+0xf80>)
 8023aa4:	5cd3      	ldrb	r3, [r2, r3]
 8023aa6:	3b30      	subs	r3, #48	; 0x30
 8023aa8:	b29b      	uxth	r3, r3
 8023aaa:	461a      	mov	r2, r3
 8023aac:	0092      	lsls	r2, r2, #2
 8023aae:	4413      	add	r3, r2
 8023ab0:	461a      	mov	r2, r3
 8023ab2:	0091      	lsls	r1, r2, #2
 8023ab4:	461a      	mov	r2, r3
 8023ab6:	460b      	mov	r3, r1
 8023ab8:	4413      	add	r3, r2
 8023aba:	009b      	lsls	r3, r3, #2
 8023abc:	82fb      	strh	r3, [r7, #22]
 8023abe:	e070      	b.n	8023ba2 <ce303_voltage+0xe66>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 2 разряда после запятой
 8023ac0:	8a3b      	ldrh	r3, [r7, #16]
 8023ac2:	3307      	adds	r3, #7
 8023ac4:	4a7d      	ldr	r2, [pc, #500]	; (8023cbc <ce303_voltage+0xf80>)
 8023ac6:	5cd3      	ldrb	r3, [r2, r3]
 8023ac8:	2b29      	cmp	r3, #41	; 0x29
 8023aca:	d117      	bne.n	8023afc <ce303_voltage+0xdc0>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30))*10;
 8023acc:	8a3b      	ldrh	r3, [r7, #16]
 8023ace:	3305      	adds	r3, #5
 8023ad0:	4a7a      	ldr	r2, [pc, #488]	; (8023cbc <ce303_voltage+0xf80>)
 8023ad2:	5cd3      	ldrb	r3, [r2, r3]
 8023ad4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8023ad8:	4613      	mov	r3, r2
 8023ada:	009b      	lsls	r3, r3, #2
 8023adc:	4413      	add	r3, r2
 8023ade:	005b      	lsls	r3, r3, #1
 8023ae0:	4619      	mov	r1, r3
 8023ae2:	8a3b      	ldrh	r3, [r7, #16]
 8023ae4:	3306      	adds	r3, #6
 8023ae6:	4a75      	ldr	r2, [pc, #468]	; (8023cbc <ce303_voltage+0xf80>)
 8023ae8:	5cd3      	ldrb	r3, [r2, r3]
 8023aea:	3b30      	subs	r3, #48	; 0x30
 8023aec:	440b      	add	r3, r1
 8023aee:	b29b      	uxth	r3, r3
 8023af0:	461a      	mov	r2, r3
 8023af2:	0092      	lsls	r2, r2, #2
 8023af4:	4413      	add	r3, r2
 8023af6:	005b      	lsls	r3, r3, #1
 8023af8:	82fb      	strh	r3, [r7, #22]
 8023afa:	e052      	b.n	8023ba2 <ce303_voltage+0xe66>
				}
				else if( meter_rx_buffer[i+8] == 0x29 ) // если 3 разряда после запятой
 8023afc:	8a3b      	ldrh	r3, [r7, #16]
 8023afe:	3308      	adds	r3, #8
 8023b00:	4a6e      	ldr	r2, [pc, #440]	; (8023cbc <ce303_voltage+0xf80>)
 8023b02:	5cd3      	ldrb	r3, [r2, r3]
 8023b04:	2b29      	cmp	r3, #41	; 0x29
 8023b06:	d126      	bne.n	8023b56 <ce303_voltage+0xe1a>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 8023b08:	8a3b      	ldrh	r3, [r7, #16]
 8023b0a:	3305      	adds	r3, #5
 8023b0c:	4a6b      	ldr	r2, [pc, #428]	; (8023cbc <ce303_voltage+0xf80>)
 8023b0e:	5cd3      	ldrb	r3, [r2, r3]
 8023b10:	3b30      	subs	r3, #48	; 0x30
 8023b12:	b29b      	uxth	r3, r3
 8023b14:	461a      	mov	r2, r3
 8023b16:	0092      	lsls	r2, r2, #2
 8023b18:	4413      	add	r3, r2
 8023b1a:	461a      	mov	r2, r3
 8023b1c:	0091      	lsls	r1, r2, #2
 8023b1e:	461a      	mov	r2, r3
 8023b20:	460b      	mov	r3, r1
 8023b22:	4413      	add	r3, r2
 8023b24:	009b      	lsls	r3, r3, #2
 8023b26:	b29a      	uxth	r2, r3
 8023b28:	8a3b      	ldrh	r3, [r7, #16]
 8023b2a:	3306      	adds	r3, #6
 8023b2c:	4963      	ldr	r1, [pc, #396]	; (8023cbc <ce303_voltage+0xf80>)
 8023b2e:	5ccb      	ldrb	r3, [r1, r3]
 8023b30:	3b30      	subs	r3, #48	; 0x30
 8023b32:	b29b      	uxth	r3, r3
 8023b34:	4619      	mov	r1, r3
 8023b36:	0089      	lsls	r1, r1, #2
 8023b38:	440b      	add	r3, r1
 8023b3a:	005b      	lsls	r3, r3, #1
 8023b3c:	b29b      	uxth	r3, r3
 8023b3e:	4413      	add	r3, r2
 8023b40:	b29a      	uxth	r2, r3
 8023b42:	8a3b      	ldrh	r3, [r7, #16]
 8023b44:	3307      	adds	r3, #7
 8023b46:	495d      	ldr	r1, [pc, #372]	; (8023cbc <ce303_voltage+0xf80>)
 8023b48:	5ccb      	ldrb	r3, [r1, r3]
 8023b4a:	b29b      	uxth	r3, r3
 8023b4c:	4413      	add	r3, r2
 8023b4e:	b29b      	uxth	r3, r3
 8023b50:	3b30      	subs	r3, #48	; 0x30
 8023b52:	82fb      	strh	r3, [r7, #22]
 8023b54:	e025      	b.n	8023ba2 <ce303_voltage+0xe66>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 8023b56:	8a3b      	ldrh	r3, [r7, #16]
 8023b58:	3305      	adds	r3, #5
 8023b5a:	4a58      	ldr	r2, [pc, #352]	; (8023cbc <ce303_voltage+0xf80>)
 8023b5c:	5cd3      	ldrb	r3, [r2, r3]
 8023b5e:	3b30      	subs	r3, #48	; 0x30
 8023b60:	b29b      	uxth	r3, r3
 8023b62:	461a      	mov	r2, r3
 8023b64:	0092      	lsls	r2, r2, #2
 8023b66:	4413      	add	r3, r2
 8023b68:	461a      	mov	r2, r3
 8023b6a:	0091      	lsls	r1, r2, #2
 8023b6c:	461a      	mov	r2, r3
 8023b6e:	460b      	mov	r3, r1
 8023b70:	4413      	add	r3, r2
 8023b72:	009b      	lsls	r3, r3, #2
 8023b74:	b29a      	uxth	r2, r3
 8023b76:	8a3b      	ldrh	r3, [r7, #16]
 8023b78:	3306      	adds	r3, #6
 8023b7a:	4950      	ldr	r1, [pc, #320]	; (8023cbc <ce303_voltage+0xf80>)
 8023b7c:	5ccb      	ldrb	r3, [r1, r3]
 8023b7e:	3b30      	subs	r3, #48	; 0x30
 8023b80:	b29b      	uxth	r3, r3
 8023b82:	4619      	mov	r1, r3
 8023b84:	0089      	lsls	r1, r1, #2
 8023b86:	440b      	add	r3, r1
 8023b88:	005b      	lsls	r3, r3, #1
 8023b8a:	b29b      	uxth	r3, r3
 8023b8c:	4413      	add	r3, r2
 8023b8e:	b29a      	uxth	r2, r3
 8023b90:	8a3b      	ldrh	r3, [r7, #16]
 8023b92:	3307      	adds	r3, #7
 8023b94:	4949      	ldr	r1, [pc, #292]	; (8023cbc <ce303_voltage+0xf80>)
 8023b96:	5ccb      	ldrb	r3, [r1, r3]
 8023b98:	b29b      	uxth	r3, r3
 8023b9a:	4413      	add	r3, r2
 8023b9c:	b29b      	uxth	r3, r3
 8023b9e:	3b30      	subs	r3, #48	; 0x30
 8023ba0:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8023ba2:	4b47      	ldr	r3, [pc, #284]	; (8023cc0 <ce303_voltage+0xf84>)
 8023ba4:	681b      	ldr	r3, [r3, #0]
 8023ba6:	f04f 31ff 	mov.w	r1, #4294967295
 8023baa:	4618      	mov	r0, r3
 8023bac:	f7f5 fb7c 	bl	80192a8 <osMutexWait>
				fm25v02_write(2*CE_303_VOLT_B_REG, ((uint8_t)(temp>>8)) );
 8023bb0:	89fb      	ldrh	r3, [r7, #14]
 8023bb2:	0a1b      	lsrs	r3, r3, #8
 8023bb4:	b29b      	uxth	r3, r3
 8023bb6:	b2db      	uxtb	r3, r3
 8023bb8:	4619      	mov	r1, r3
 8023bba:	f242 004c 	movw	r0, #8268	; 0x204c
 8023bbe:	f006 ff65 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_B_REG+1, ((uint8_t)(temp&0x00FF)) );
 8023bc2:	89fb      	ldrh	r3, [r7, #14]
 8023bc4:	b2db      	uxtb	r3, r3
 8023bc6:	4619      	mov	r1, r3
 8023bc8:	f242 004d 	movw	r0, #8269	; 0x204d
 8023bcc:	f006 ff5e 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_MIL_B_REG, ((uint8_t)(temp_mil>>8)) );
 8023bd0:	8afb      	ldrh	r3, [r7, #22]
 8023bd2:	0a1b      	lsrs	r3, r3, #8
 8023bd4:	b29b      	uxth	r3, r3
 8023bd6:	b2db      	uxtb	r3, r3
 8023bd8:	4619      	mov	r1, r3
 8023bda:	f242 0052 	movw	r0, #8274	; 0x2052
 8023bde:	f006 ff55 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_MIL_B_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 8023be2:	8afb      	ldrh	r3, [r7, #22]
 8023be4:	b2db      	uxtb	r3, r3
 8023be6:	4619      	mov	r1, r3
 8023be8:	f242 0053 	movw	r0, #8275	; 0x2053
 8023bec:	f006 ff4e 	bl	802aa8c <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8023bf0:	4b33      	ldr	r3, [pc, #204]	; (8023cc0 <ce303_voltage+0xf84>)
 8023bf2:	681b      	ldr	r3, [r3, #0]
 8023bf4:	4618      	mov	r0, r3
 8023bf6:	f7f5 fba5 	bl	8019344 <osMutexRelease>
				status_registers.ce303_volt_b_reg = temp;
 8023bfa:	4a32      	ldr	r2, [pc, #200]	; (8023cc4 <ce303_voltage+0xf88>)
 8023bfc:	89fb      	ldrh	r3, [r7, #14]
 8023bfe:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
				status_registers.ce303_volt_mil_b_reg = temp_mil;
 8023c02:	4a30      	ldr	r2, [pc, #192]	; (8023cc4 <ce303_voltage+0xf88>)
 8023c04:	8afb      	ldrh	r3, [r7, #22]
 8023c06:	f8a2 3052 	strh.w	r3, [r2, #82]	; 0x52
				voltage_b_state = 1;
 8023c0a:	2301      	movs	r3, #1
 8023c0c:	753b      	strb	r3, [r7, #20]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 8023c0e:	e2b3      	b.n	8024178 <ce303_voltage+0x143c>
			}
		}

		else if( (meter_rx_buffer[i] == 0x28) && (voltage_a_state==1) && (voltage_b_state==1) && (voltage_c_state==0) )
 8023c10:	8a3b      	ldrh	r3, [r7, #16]
 8023c12:	4a2a      	ldr	r2, [pc, #168]	; (8023cbc <ce303_voltage+0xf80>)
 8023c14:	5cd3      	ldrb	r3, [r2, r3]
 8023c16:	2b28      	cmp	r3, #40	; 0x28
 8023c18:	f040 82af 	bne.w	802417a <ce303_voltage+0x143e>
 8023c1c:	7d7b      	ldrb	r3, [r7, #21]
 8023c1e:	2b01      	cmp	r3, #1
 8023c20:	f040 82ab 	bne.w	802417a <ce303_voltage+0x143e>
 8023c24:	7d3b      	ldrb	r3, [r7, #20]
 8023c26:	2b01      	cmp	r3, #1
 8023c28:	f040 82a7 	bne.w	802417a <ce303_voltage+0x143e>
 8023c2c:	7cfb      	ldrb	r3, [r7, #19]
 8023c2e:	2b00      	cmp	r3, #0
 8023c30:	f040 82a3 	bne.w	802417a <ce303_voltage+0x143e>
		{
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 8023c34:	8a3b      	ldrh	r3, [r7, #16]
 8023c36:	3302      	adds	r3, #2
 8023c38:	4a20      	ldr	r2, [pc, #128]	; (8023cbc <ce303_voltage+0xf80>)
 8023c3a:	5cd3      	ldrb	r3, [r2, r3]
 8023c3c:	2b2e      	cmp	r3, #46	; 0x2e
 8023c3e:	f040 80cd 	bne.w	8023ddc <ce303_voltage+0x10a0>
			{
				temp = (uint16_t)(meter_rx_buffer[i+1]-0x30);
 8023c42:	8a3b      	ldrh	r3, [r7, #16]
 8023c44:	3301      	adds	r3, #1
 8023c46:	4a1d      	ldr	r2, [pc, #116]	; (8023cbc <ce303_voltage+0xf80>)
 8023c48:	5cd3      	ldrb	r3, [r2, r3]
 8023c4a:	b29b      	uxth	r3, r3
 8023c4c:	3b30      	subs	r3, #48	; 0x30
 8023c4e:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+4] == 0x29 ) // если 1 разряд после запятой
 8023c50:	8a3b      	ldrh	r3, [r7, #16]
 8023c52:	3304      	adds	r3, #4
 8023c54:	4a19      	ldr	r2, [pc, #100]	; (8023cbc <ce303_voltage+0xf80>)
 8023c56:	5cd3      	ldrb	r3, [r2, r3]
 8023c58:	2b29      	cmp	r3, #41	; 0x29
 8023c5a:	d110      	bne.n	8023c7e <ce303_voltage+0xf42>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+3])-0x30)*100;
 8023c5c:	8a3b      	ldrh	r3, [r7, #16]
 8023c5e:	3303      	adds	r3, #3
 8023c60:	4a16      	ldr	r2, [pc, #88]	; (8023cbc <ce303_voltage+0xf80>)
 8023c62:	5cd3      	ldrb	r3, [r2, r3]
 8023c64:	3b30      	subs	r3, #48	; 0x30
 8023c66:	b29b      	uxth	r3, r3
 8023c68:	461a      	mov	r2, r3
 8023c6a:	0092      	lsls	r2, r2, #2
 8023c6c:	4413      	add	r3, r2
 8023c6e:	461a      	mov	r2, r3
 8023c70:	0091      	lsls	r1, r2, #2
 8023c72:	461a      	mov	r2, r3
 8023c74:	460b      	mov	r3, r1
 8023c76:	4413      	add	r3, r2
 8023c78:	009b      	lsls	r3, r3, #2
 8023c7a:	82fb      	strh	r3, [r7, #22]
 8023c7c:	e077      	b.n	8023d6e <ce303_voltage+0x1032>
				}
				else if( meter_rx_buffer[i+5] == 0x29 ) // если 2 разряда после запятой
 8023c7e:	8a3b      	ldrh	r3, [r7, #16]
 8023c80:	3305      	adds	r3, #5
 8023c82:	4a0e      	ldr	r2, [pc, #56]	; (8023cbc <ce303_voltage+0xf80>)
 8023c84:	5cd3      	ldrb	r3, [r2, r3]
 8023c86:	2b29      	cmp	r3, #41	; 0x29
 8023c88:	d11e      	bne.n	8023cc8 <ce303_voltage+0xf8c>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+3])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+4])-0x30))*10;
 8023c8a:	8a3b      	ldrh	r3, [r7, #16]
 8023c8c:	3303      	adds	r3, #3
 8023c8e:	4a0b      	ldr	r2, [pc, #44]	; (8023cbc <ce303_voltage+0xf80>)
 8023c90:	5cd3      	ldrb	r3, [r2, r3]
 8023c92:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8023c96:	4613      	mov	r3, r2
 8023c98:	009b      	lsls	r3, r3, #2
 8023c9a:	4413      	add	r3, r2
 8023c9c:	005b      	lsls	r3, r3, #1
 8023c9e:	4619      	mov	r1, r3
 8023ca0:	8a3b      	ldrh	r3, [r7, #16]
 8023ca2:	3304      	adds	r3, #4
 8023ca4:	4a05      	ldr	r2, [pc, #20]	; (8023cbc <ce303_voltage+0xf80>)
 8023ca6:	5cd3      	ldrb	r3, [r2, r3]
 8023ca8:	3b30      	subs	r3, #48	; 0x30
 8023caa:	440b      	add	r3, r1
 8023cac:	b29b      	uxth	r3, r3
 8023cae:	461a      	mov	r2, r3
 8023cb0:	0092      	lsls	r2, r2, #2
 8023cb2:	4413      	add	r3, r2
 8023cb4:	005b      	lsls	r3, r3, #1
 8023cb6:	82fb      	strh	r3, [r7, #22]
 8023cb8:	e059      	b.n	8023d6e <ce303_voltage+0x1032>
 8023cba:	bf00      	nop
 8023cbc:	20009a0c 	.word	0x20009a0c
 8023cc0:	20009bb8 	.word	0x20009bb8
 8023cc4:	2000af40 	.word	0x2000af40
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 3 разряда после запятой
 8023cc8:	8a3b      	ldrh	r3, [r7, #16]
 8023cca:	3306      	adds	r3, #6
 8023ccc:	4ab0      	ldr	r2, [pc, #704]	; (8023f90 <ce303_voltage+0x1254>)
 8023cce:	5cd3      	ldrb	r3, [r2, r3]
 8023cd0:	2b29      	cmp	r3, #41	; 0x29
 8023cd2:	d126      	bne.n	8023d22 <ce303_voltage+0xfe6>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 8023cd4:	8a3b      	ldrh	r3, [r7, #16]
 8023cd6:	3303      	adds	r3, #3
 8023cd8:	4aad      	ldr	r2, [pc, #692]	; (8023f90 <ce303_voltage+0x1254>)
 8023cda:	5cd3      	ldrb	r3, [r2, r3]
 8023cdc:	3b30      	subs	r3, #48	; 0x30
 8023cde:	b29b      	uxth	r3, r3
 8023ce0:	461a      	mov	r2, r3
 8023ce2:	0092      	lsls	r2, r2, #2
 8023ce4:	4413      	add	r3, r2
 8023ce6:	461a      	mov	r2, r3
 8023ce8:	0091      	lsls	r1, r2, #2
 8023cea:	461a      	mov	r2, r3
 8023cec:	460b      	mov	r3, r1
 8023cee:	4413      	add	r3, r2
 8023cf0:	009b      	lsls	r3, r3, #2
 8023cf2:	b29a      	uxth	r2, r3
 8023cf4:	8a3b      	ldrh	r3, [r7, #16]
 8023cf6:	3304      	adds	r3, #4
 8023cf8:	49a5      	ldr	r1, [pc, #660]	; (8023f90 <ce303_voltage+0x1254>)
 8023cfa:	5ccb      	ldrb	r3, [r1, r3]
 8023cfc:	3b30      	subs	r3, #48	; 0x30
 8023cfe:	b29b      	uxth	r3, r3
 8023d00:	4619      	mov	r1, r3
 8023d02:	0089      	lsls	r1, r1, #2
 8023d04:	440b      	add	r3, r1
 8023d06:	005b      	lsls	r3, r3, #1
 8023d08:	b29b      	uxth	r3, r3
 8023d0a:	4413      	add	r3, r2
 8023d0c:	b29a      	uxth	r2, r3
 8023d0e:	8a3b      	ldrh	r3, [r7, #16]
 8023d10:	3305      	adds	r3, #5
 8023d12:	499f      	ldr	r1, [pc, #636]	; (8023f90 <ce303_voltage+0x1254>)
 8023d14:	5ccb      	ldrb	r3, [r1, r3]
 8023d16:	b29b      	uxth	r3, r3
 8023d18:	4413      	add	r3, r2
 8023d1a:	b29b      	uxth	r3, r3
 8023d1c:	3b30      	subs	r3, #48	; 0x30
 8023d1e:	82fb      	strh	r3, [r7, #22]
 8023d20:	e025      	b.n	8023d6e <ce303_voltage+0x1032>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 8023d22:	8a3b      	ldrh	r3, [r7, #16]
 8023d24:	3303      	adds	r3, #3
 8023d26:	4a9a      	ldr	r2, [pc, #616]	; (8023f90 <ce303_voltage+0x1254>)
 8023d28:	5cd3      	ldrb	r3, [r2, r3]
 8023d2a:	3b30      	subs	r3, #48	; 0x30
 8023d2c:	b29b      	uxth	r3, r3
 8023d2e:	461a      	mov	r2, r3
 8023d30:	0092      	lsls	r2, r2, #2
 8023d32:	4413      	add	r3, r2
 8023d34:	461a      	mov	r2, r3
 8023d36:	0091      	lsls	r1, r2, #2
 8023d38:	461a      	mov	r2, r3
 8023d3a:	460b      	mov	r3, r1
 8023d3c:	4413      	add	r3, r2
 8023d3e:	009b      	lsls	r3, r3, #2
 8023d40:	b29a      	uxth	r2, r3
 8023d42:	8a3b      	ldrh	r3, [r7, #16]
 8023d44:	3304      	adds	r3, #4
 8023d46:	4992      	ldr	r1, [pc, #584]	; (8023f90 <ce303_voltage+0x1254>)
 8023d48:	5ccb      	ldrb	r3, [r1, r3]
 8023d4a:	3b30      	subs	r3, #48	; 0x30
 8023d4c:	b29b      	uxth	r3, r3
 8023d4e:	4619      	mov	r1, r3
 8023d50:	0089      	lsls	r1, r1, #2
 8023d52:	440b      	add	r3, r1
 8023d54:	005b      	lsls	r3, r3, #1
 8023d56:	b29b      	uxth	r3, r3
 8023d58:	4413      	add	r3, r2
 8023d5a:	b29a      	uxth	r2, r3
 8023d5c:	8a3b      	ldrh	r3, [r7, #16]
 8023d5e:	3305      	adds	r3, #5
 8023d60:	498b      	ldr	r1, [pc, #556]	; (8023f90 <ce303_voltage+0x1254>)
 8023d62:	5ccb      	ldrb	r3, [r1, r3]
 8023d64:	b29b      	uxth	r3, r3
 8023d66:	4413      	add	r3, r2
 8023d68:	b29b      	uxth	r3, r3
 8023d6a:	3b30      	subs	r3, #48	; 0x30
 8023d6c:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8023d6e:	4b89      	ldr	r3, [pc, #548]	; (8023f94 <ce303_voltage+0x1258>)
 8023d70:	681b      	ldr	r3, [r3, #0]
 8023d72:	f04f 31ff 	mov.w	r1, #4294967295
 8023d76:	4618      	mov	r0, r3
 8023d78:	f7f5 fa96 	bl	80192a8 <osMutexWait>
				fm25v02_write(2*CE_303_VOLT_C_REG, ((uint8_t)(temp>>8)) );
 8023d7c:	89fb      	ldrh	r3, [r7, #14]
 8023d7e:	0a1b      	lsrs	r3, r3, #8
 8023d80:	b29b      	uxth	r3, r3
 8023d82:	b2db      	uxtb	r3, r3
 8023d84:	4619      	mov	r1, r3
 8023d86:	f242 004e 	movw	r0, #8270	; 0x204e
 8023d8a:	f006 fe7f 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_C_REG+1, ((uint8_t)(temp&0x00FF)) );
 8023d8e:	89fb      	ldrh	r3, [r7, #14]
 8023d90:	b2db      	uxtb	r3, r3
 8023d92:	4619      	mov	r1, r3
 8023d94:	f242 004f 	movw	r0, #8271	; 0x204f
 8023d98:	f006 fe78 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_MIL_C_REG, ((uint8_t)(temp_mil>>8)) );
 8023d9c:	8afb      	ldrh	r3, [r7, #22]
 8023d9e:	0a1b      	lsrs	r3, r3, #8
 8023da0:	b29b      	uxth	r3, r3
 8023da2:	b2db      	uxtb	r3, r3
 8023da4:	4619      	mov	r1, r3
 8023da6:	f242 0054 	movw	r0, #8276	; 0x2054
 8023daa:	f006 fe6f 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_MIL_C_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 8023dae:	8afb      	ldrh	r3, [r7, #22]
 8023db0:	b2db      	uxtb	r3, r3
 8023db2:	4619      	mov	r1, r3
 8023db4:	f242 0055 	movw	r0, #8277	; 0x2055
 8023db8:	f006 fe68 	bl	802aa8c <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8023dbc:	4b75      	ldr	r3, [pc, #468]	; (8023f94 <ce303_voltage+0x1258>)
 8023dbe:	681b      	ldr	r3, [r3, #0]
 8023dc0:	4618      	mov	r0, r3
 8023dc2:	f7f5 fabf 	bl	8019344 <osMutexRelease>
				status_registers.ce303_volt_c_reg = temp;
 8023dc6:	4a74      	ldr	r2, [pc, #464]	; (8023f98 <ce303_voltage+0x125c>)
 8023dc8:	89fb      	ldrh	r3, [r7, #14]
 8023dca:	f8a2 304e 	strh.w	r3, [r2, #78]	; 0x4e
				status_registers.ce303_volt_mil_c_reg = temp_mil;
 8023dce:	4a72      	ldr	r2, [pc, #456]	; (8023f98 <ce303_voltage+0x125c>)
 8023dd0:	8afb      	ldrh	r3, [r7, #22]
 8023dd2:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54
				voltage_c_state = 1;
 8023dd6:	2301      	movs	r3, #1
 8023dd8:	74fb      	strb	r3, [r7, #19]
 8023dda:	e1ce      	b.n	802417a <ce303_voltage+0x143e>
			}
			else if( meter_rx_buffer[i+3] == 0x2E)
 8023ddc:	8a3b      	ldrh	r3, [r7, #16]
 8023dde:	3303      	adds	r3, #3
 8023de0:	4a6b      	ldr	r2, [pc, #428]	; (8023f90 <ce303_voltage+0x1254>)
 8023de2:	5cd3      	ldrb	r3, [r2, r3]
 8023de4:	2b2e      	cmp	r3, #46	; 0x2e
 8023de6:	f040 80d9 	bne.w	8023f9c <ce303_voltage+0x1260>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+2])-0x30);
 8023dea:	8a3b      	ldrh	r3, [r7, #16]
 8023dec:	3301      	adds	r3, #1
 8023dee:	4a68      	ldr	r2, [pc, #416]	; (8023f90 <ce303_voltage+0x1254>)
 8023df0:	5cd3      	ldrb	r3, [r2, r3]
 8023df2:	3b30      	subs	r3, #48	; 0x30
 8023df4:	b29b      	uxth	r3, r3
 8023df6:	461a      	mov	r2, r3
 8023df8:	0092      	lsls	r2, r2, #2
 8023dfa:	4413      	add	r3, r2
 8023dfc:	005b      	lsls	r3, r3, #1
 8023dfe:	b29a      	uxth	r2, r3
 8023e00:	8a3b      	ldrh	r3, [r7, #16]
 8023e02:	3302      	adds	r3, #2
 8023e04:	4962      	ldr	r1, [pc, #392]	; (8023f90 <ce303_voltage+0x1254>)
 8023e06:	5ccb      	ldrb	r3, [r1, r3]
 8023e08:	b29b      	uxth	r3, r3
 8023e0a:	4413      	add	r3, r2
 8023e0c:	b29b      	uxth	r3, r3
 8023e0e:	3b30      	subs	r3, #48	; 0x30
 8023e10:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+5] == 0x29 ) // если 1 разряд после запятой
 8023e12:	8a3b      	ldrh	r3, [r7, #16]
 8023e14:	3305      	adds	r3, #5
 8023e16:	4a5e      	ldr	r2, [pc, #376]	; (8023f90 <ce303_voltage+0x1254>)
 8023e18:	5cd3      	ldrb	r3, [r2, r3]
 8023e1a:	2b29      	cmp	r3, #41	; 0x29
 8023e1c:	d110      	bne.n	8023e40 <ce303_voltage+0x1104>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+4])-0x30)*100;
 8023e1e:	8a3b      	ldrh	r3, [r7, #16]
 8023e20:	3304      	adds	r3, #4
 8023e22:	4a5b      	ldr	r2, [pc, #364]	; (8023f90 <ce303_voltage+0x1254>)
 8023e24:	5cd3      	ldrb	r3, [r2, r3]
 8023e26:	3b30      	subs	r3, #48	; 0x30
 8023e28:	b29b      	uxth	r3, r3
 8023e2a:	461a      	mov	r2, r3
 8023e2c:	0092      	lsls	r2, r2, #2
 8023e2e:	4413      	add	r3, r2
 8023e30:	461a      	mov	r2, r3
 8023e32:	0091      	lsls	r1, r2, #2
 8023e34:	461a      	mov	r2, r3
 8023e36:	460b      	mov	r3, r1
 8023e38:	4413      	add	r3, r2
 8023e3a:	009b      	lsls	r3, r3, #2
 8023e3c:	82fb      	strh	r3, [r7, #22]
 8023e3e:	e070      	b.n	8023f22 <ce303_voltage+0x11e6>
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 2 разряда после запятой
 8023e40:	8a3b      	ldrh	r3, [r7, #16]
 8023e42:	3306      	adds	r3, #6
 8023e44:	4a52      	ldr	r2, [pc, #328]	; (8023f90 <ce303_voltage+0x1254>)
 8023e46:	5cd3      	ldrb	r3, [r2, r3]
 8023e48:	2b29      	cmp	r3, #41	; 0x29
 8023e4a:	d117      	bne.n	8023e7c <ce303_voltage+0x1140>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30))*10;
 8023e4c:	8a3b      	ldrh	r3, [r7, #16]
 8023e4e:	3304      	adds	r3, #4
 8023e50:	4a4f      	ldr	r2, [pc, #316]	; (8023f90 <ce303_voltage+0x1254>)
 8023e52:	5cd3      	ldrb	r3, [r2, r3]
 8023e54:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8023e58:	4613      	mov	r3, r2
 8023e5a:	009b      	lsls	r3, r3, #2
 8023e5c:	4413      	add	r3, r2
 8023e5e:	005b      	lsls	r3, r3, #1
 8023e60:	4619      	mov	r1, r3
 8023e62:	8a3b      	ldrh	r3, [r7, #16]
 8023e64:	3305      	adds	r3, #5
 8023e66:	4a4a      	ldr	r2, [pc, #296]	; (8023f90 <ce303_voltage+0x1254>)
 8023e68:	5cd3      	ldrb	r3, [r2, r3]
 8023e6a:	3b30      	subs	r3, #48	; 0x30
 8023e6c:	440b      	add	r3, r1
 8023e6e:	b29b      	uxth	r3, r3
 8023e70:	461a      	mov	r2, r3
 8023e72:	0092      	lsls	r2, r2, #2
 8023e74:	4413      	add	r3, r2
 8023e76:	005b      	lsls	r3, r3, #1
 8023e78:	82fb      	strh	r3, [r7, #22]
 8023e7a:	e052      	b.n	8023f22 <ce303_voltage+0x11e6>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 3 разряда после запятой
 8023e7c:	8a3b      	ldrh	r3, [r7, #16]
 8023e7e:	3307      	adds	r3, #7
 8023e80:	4a43      	ldr	r2, [pc, #268]	; (8023f90 <ce303_voltage+0x1254>)
 8023e82:	5cd3      	ldrb	r3, [r2, r3]
 8023e84:	2b29      	cmp	r3, #41	; 0x29
 8023e86:	d126      	bne.n	8023ed6 <ce303_voltage+0x119a>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 8023e88:	8a3b      	ldrh	r3, [r7, #16]
 8023e8a:	3304      	adds	r3, #4
 8023e8c:	4a40      	ldr	r2, [pc, #256]	; (8023f90 <ce303_voltage+0x1254>)
 8023e8e:	5cd3      	ldrb	r3, [r2, r3]
 8023e90:	3b30      	subs	r3, #48	; 0x30
 8023e92:	b29b      	uxth	r3, r3
 8023e94:	461a      	mov	r2, r3
 8023e96:	0092      	lsls	r2, r2, #2
 8023e98:	4413      	add	r3, r2
 8023e9a:	461a      	mov	r2, r3
 8023e9c:	0091      	lsls	r1, r2, #2
 8023e9e:	461a      	mov	r2, r3
 8023ea0:	460b      	mov	r3, r1
 8023ea2:	4413      	add	r3, r2
 8023ea4:	009b      	lsls	r3, r3, #2
 8023ea6:	b29a      	uxth	r2, r3
 8023ea8:	8a3b      	ldrh	r3, [r7, #16]
 8023eaa:	3305      	adds	r3, #5
 8023eac:	4938      	ldr	r1, [pc, #224]	; (8023f90 <ce303_voltage+0x1254>)
 8023eae:	5ccb      	ldrb	r3, [r1, r3]
 8023eb0:	3b30      	subs	r3, #48	; 0x30
 8023eb2:	b29b      	uxth	r3, r3
 8023eb4:	4619      	mov	r1, r3
 8023eb6:	0089      	lsls	r1, r1, #2
 8023eb8:	440b      	add	r3, r1
 8023eba:	005b      	lsls	r3, r3, #1
 8023ebc:	b29b      	uxth	r3, r3
 8023ebe:	4413      	add	r3, r2
 8023ec0:	b29a      	uxth	r2, r3
 8023ec2:	8a3b      	ldrh	r3, [r7, #16]
 8023ec4:	3306      	adds	r3, #6
 8023ec6:	4932      	ldr	r1, [pc, #200]	; (8023f90 <ce303_voltage+0x1254>)
 8023ec8:	5ccb      	ldrb	r3, [r1, r3]
 8023eca:	b29b      	uxth	r3, r3
 8023ecc:	4413      	add	r3, r2
 8023ece:	b29b      	uxth	r3, r3
 8023ed0:	3b30      	subs	r3, #48	; 0x30
 8023ed2:	82fb      	strh	r3, [r7, #22]
 8023ed4:	e025      	b.n	8023f22 <ce303_voltage+0x11e6>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 8023ed6:	8a3b      	ldrh	r3, [r7, #16]
 8023ed8:	3304      	adds	r3, #4
 8023eda:	4a2d      	ldr	r2, [pc, #180]	; (8023f90 <ce303_voltage+0x1254>)
 8023edc:	5cd3      	ldrb	r3, [r2, r3]
 8023ede:	3b30      	subs	r3, #48	; 0x30
 8023ee0:	b29b      	uxth	r3, r3
 8023ee2:	461a      	mov	r2, r3
 8023ee4:	0092      	lsls	r2, r2, #2
 8023ee6:	4413      	add	r3, r2
 8023ee8:	461a      	mov	r2, r3
 8023eea:	0091      	lsls	r1, r2, #2
 8023eec:	461a      	mov	r2, r3
 8023eee:	460b      	mov	r3, r1
 8023ef0:	4413      	add	r3, r2
 8023ef2:	009b      	lsls	r3, r3, #2
 8023ef4:	b29a      	uxth	r2, r3
 8023ef6:	8a3b      	ldrh	r3, [r7, #16]
 8023ef8:	3305      	adds	r3, #5
 8023efa:	4925      	ldr	r1, [pc, #148]	; (8023f90 <ce303_voltage+0x1254>)
 8023efc:	5ccb      	ldrb	r3, [r1, r3]
 8023efe:	3b30      	subs	r3, #48	; 0x30
 8023f00:	b29b      	uxth	r3, r3
 8023f02:	4619      	mov	r1, r3
 8023f04:	0089      	lsls	r1, r1, #2
 8023f06:	440b      	add	r3, r1
 8023f08:	005b      	lsls	r3, r3, #1
 8023f0a:	b29b      	uxth	r3, r3
 8023f0c:	4413      	add	r3, r2
 8023f0e:	b29a      	uxth	r2, r3
 8023f10:	8a3b      	ldrh	r3, [r7, #16]
 8023f12:	3306      	adds	r3, #6
 8023f14:	491e      	ldr	r1, [pc, #120]	; (8023f90 <ce303_voltage+0x1254>)
 8023f16:	5ccb      	ldrb	r3, [r1, r3]
 8023f18:	b29b      	uxth	r3, r3
 8023f1a:	4413      	add	r3, r2
 8023f1c:	b29b      	uxth	r3, r3
 8023f1e:	3b30      	subs	r3, #48	; 0x30
 8023f20:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8023f22:	4b1c      	ldr	r3, [pc, #112]	; (8023f94 <ce303_voltage+0x1258>)
 8023f24:	681b      	ldr	r3, [r3, #0]
 8023f26:	f04f 31ff 	mov.w	r1, #4294967295
 8023f2a:	4618      	mov	r0, r3
 8023f2c:	f7f5 f9bc 	bl	80192a8 <osMutexWait>
				fm25v02_write(2*CE_303_VOLT_C_REG, ((uint8_t)(temp>>8)) );
 8023f30:	89fb      	ldrh	r3, [r7, #14]
 8023f32:	0a1b      	lsrs	r3, r3, #8
 8023f34:	b29b      	uxth	r3, r3
 8023f36:	b2db      	uxtb	r3, r3
 8023f38:	4619      	mov	r1, r3
 8023f3a:	f242 004e 	movw	r0, #8270	; 0x204e
 8023f3e:	f006 fda5 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_C_REG+1, ((uint8_t)(temp&0x00FF)) );
 8023f42:	89fb      	ldrh	r3, [r7, #14]
 8023f44:	b2db      	uxtb	r3, r3
 8023f46:	4619      	mov	r1, r3
 8023f48:	f242 004f 	movw	r0, #8271	; 0x204f
 8023f4c:	f006 fd9e 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_MIL_C_REG, ((uint8_t)(temp_mil>>8)) );
 8023f50:	8afb      	ldrh	r3, [r7, #22]
 8023f52:	0a1b      	lsrs	r3, r3, #8
 8023f54:	b29b      	uxth	r3, r3
 8023f56:	b2db      	uxtb	r3, r3
 8023f58:	4619      	mov	r1, r3
 8023f5a:	f242 0054 	movw	r0, #8276	; 0x2054
 8023f5e:	f006 fd95 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_MIL_C_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 8023f62:	8afb      	ldrh	r3, [r7, #22]
 8023f64:	b2db      	uxtb	r3, r3
 8023f66:	4619      	mov	r1, r3
 8023f68:	f242 0055 	movw	r0, #8277	; 0x2055
 8023f6c:	f006 fd8e 	bl	802aa8c <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8023f70:	4b08      	ldr	r3, [pc, #32]	; (8023f94 <ce303_voltage+0x1258>)
 8023f72:	681b      	ldr	r3, [r3, #0]
 8023f74:	4618      	mov	r0, r3
 8023f76:	f7f5 f9e5 	bl	8019344 <osMutexRelease>
				status_registers.ce303_volt_c_reg = temp;
 8023f7a:	4a07      	ldr	r2, [pc, #28]	; (8023f98 <ce303_voltage+0x125c>)
 8023f7c:	89fb      	ldrh	r3, [r7, #14]
 8023f7e:	f8a2 304e 	strh.w	r3, [r2, #78]	; 0x4e
				status_registers.ce303_volt_mil_c_reg = temp_mil;
 8023f82:	4a05      	ldr	r2, [pc, #20]	; (8023f98 <ce303_voltage+0x125c>)
 8023f84:	8afb      	ldrh	r3, [r7, #22]
 8023f86:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54
				voltage_c_state = 1;
 8023f8a:	2301      	movs	r3, #1
 8023f8c:	74fb      	strb	r3, [r7, #19]
 8023f8e:	e0f4      	b.n	802417a <ce303_voltage+0x143e>
 8023f90:	20009a0c 	.word	0x20009a0c
 8023f94:	20009bb8 	.word	0x20009bb8
 8023f98:	2000af40 	.word	0x2000af40
			}

			else if( meter_rx_buffer[i+4] == 0x2E)
 8023f9c:	8a3b      	ldrh	r3, [r7, #16]
 8023f9e:	3304      	adds	r3, #4
 8023fa0:	4a85      	ldr	r2, [pc, #532]	; (80241b8 <ce303_voltage+0x147c>)
 8023fa2:	5cd3      	ldrb	r3, [r2, r3]
 8023fa4:	2b2e      	cmp	r3, #46	; 0x2e
 8023fa6:	f040 80e8 	bne.w	802417a <ce303_voltage+0x143e>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+2])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+3])-0x30);
 8023faa:	8a3b      	ldrh	r3, [r7, #16]
 8023fac:	3301      	adds	r3, #1
 8023fae:	4a82      	ldr	r2, [pc, #520]	; (80241b8 <ce303_voltage+0x147c>)
 8023fb0:	5cd3      	ldrb	r3, [r2, r3]
 8023fb2:	3b30      	subs	r3, #48	; 0x30
 8023fb4:	b29b      	uxth	r3, r3
 8023fb6:	461a      	mov	r2, r3
 8023fb8:	0092      	lsls	r2, r2, #2
 8023fba:	4413      	add	r3, r2
 8023fbc:	461a      	mov	r2, r3
 8023fbe:	0091      	lsls	r1, r2, #2
 8023fc0:	461a      	mov	r2, r3
 8023fc2:	460b      	mov	r3, r1
 8023fc4:	4413      	add	r3, r2
 8023fc6:	009b      	lsls	r3, r3, #2
 8023fc8:	b29a      	uxth	r2, r3
 8023fca:	8a3b      	ldrh	r3, [r7, #16]
 8023fcc:	3302      	adds	r3, #2
 8023fce:	497a      	ldr	r1, [pc, #488]	; (80241b8 <ce303_voltage+0x147c>)
 8023fd0:	5ccb      	ldrb	r3, [r1, r3]
 8023fd2:	3b30      	subs	r3, #48	; 0x30
 8023fd4:	b29b      	uxth	r3, r3
 8023fd6:	4619      	mov	r1, r3
 8023fd8:	0089      	lsls	r1, r1, #2
 8023fda:	440b      	add	r3, r1
 8023fdc:	005b      	lsls	r3, r3, #1
 8023fde:	b29b      	uxth	r3, r3
 8023fe0:	4413      	add	r3, r2
 8023fe2:	b29a      	uxth	r2, r3
 8023fe4:	8a3b      	ldrh	r3, [r7, #16]
 8023fe6:	3303      	adds	r3, #3
 8023fe8:	4973      	ldr	r1, [pc, #460]	; (80241b8 <ce303_voltage+0x147c>)
 8023fea:	5ccb      	ldrb	r3, [r1, r3]
 8023fec:	b29b      	uxth	r3, r3
 8023fee:	4413      	add	r3, r2
 8023ff0:	b29b      	uxth	r3, r3
 8023ff2:	3b30      	subs	r3, #48	; 0x30
 8023ff4:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+6] == 0x29 ) // если 1 разряд после запятой
 8023ff6:	8a3b      	ldrh	r3, [r7, #16]
 8023ff8:	3306      	adds	r3, #6
 8023ffa:	4a6f      	ldr	r2, [pc, #444]	; (80241b8 <ce303_voltage+0x147c>)
 8023ffc:	5cd3      	ldrb	r3, [r2, r3]
 8023ffe:	2b29      	cmp	r3, #41	; 0x29
 8024000:	d110      	bne.n	8024024 <ce303_voltage+0x12e8>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+5])-0x30)*100;
 8024002:	8a3b      	ldrh	r3, [r7, #16]
 8024004:	3305      	adds	r3, #5
 8024006:	4a6c      	ldr	r2, [pc, #432]	; (80241b8 <ce303_voltage+0x147c>)
 8024008:	5cd3      	ldrb	r3, [r2, r3]
 802400a:	3b30      	subs	r3, #48	; 0x30
 802400c:	b29b      	uxth	r3, r3
 802400e:	461a      	mov	r2, r3
 8024010:	0092      	lsls	r2, r2, #2
 8024012:	4413      	add	r3, r2
 8024014:	461a      	mov	r2, r3
 8024016:	0091      	lsls	r1, r2, #2
 8024018:	461a      	mov	r2, r3
 802401a:	460b      	mov	r3, r1
 802401c:	4413      	add	r3, r2
 802401e:	009b      	lsls	r3, r3, #2
 8024020:	82fb      	strh	r3, [r7, #22]
 8024022:	e070      	b.n	8024106 <ce303_voltage+0x13ca>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 2 разряда после запятой
 8024024:	8a3b      	ldrh	r3, [r7, #16]
 8024026:	3307      	adds	r3, #7
 8024028:	4a63      	ldr	r2, [pc, #396]	; (80241b8 <ce303_voltage+0x147c>)
 802402a:	5cd3      	ldrb	r3, [r2, r3]
 802402c:	2b29      	cmp	r3, #41	; 0x29
 802402e:	d117      	bne.n	8024060 <ce303_voltage+0x1324>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30))*10;
 8024030:	8a3b      	ldrh	r3, [r7, #16]
 8024032:	3305      	adds	r3, #5
 8024034:	4a60      	ldr	r2, [pc, #384]	; (80241b8 <ce303_voltage+0x147c>)
 8024036:	5cd3      	ldrb	r3, [r2, r3]
 8024038:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 802403c:	4613      	mov	r3, r2
 802403e:	009b      	lsls	r3, r3, #2
 8024040:	4413      	add	r3, r2
 8024042:	005b      	lsls	r3, r3, #1
 8024044:	4619      	mov	r1, r3
 8024046:	8a3b      	ldrh	r3, [r7, #16]
 8024048:	3306      	adds	r3, #6
 802404a:	4a5b      	ldr	r2, [pc, #364]	; (80241b8 <ce303_voltage+0x147c>)
 802404c:	5cd3      	ldrb	r3, [r2, r3]
 802404e:	3b30      	subs	r3, #48	; 0x30
 8024050:	440b      	add	r3, r1
 8024052:	b29b      	uxth	r3, r3
 8024054:	461a      	mov	r2, r3
 8024056:	0092      	lsls	r2, r2, #2
 8024058:	4413      	add	r3, r2
 802405a:	005b      	lsls	r3, r3, #1
 802405c:	82fb      	strh	r3, [r7, #22]
 802405e:	e052      	b.n	8024106 <ce303_voltage+0x13ca>
				}
				else if( meter_rx_buffer[i+8] == 0x29 ) // если 3 разряда после запятой
 8024060:	8a3b      	ldrh	r3, [r7, #16]
 8024062:	3308      	adds	r3, #8
 8024064:	4a54      	ldr	r2, [pc, #336]	; (80241b8 <ce303_voltage+0x147c>)
 8024066:	5cd3      	ldrb	r3, [r2, r3]
 8024068:	2b29      	cmp	r3, #41	; 0x29
 802406a:	d126      	bne.n	80240ba <ce303_voltage+0x137e>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 802406c:	8a3b      	ldrh	r3, [r7, #16]
 802406e:	3305      	adds	r3, #5
 8024070:	4a51      	ldr	r2, [pc, #324]	; (80241b8 <ce303_voltage+0x147c>)
 8024072:	5cd3      	ldrb	r3, [r2, r3]
 8024074:	3b30      	subs	r3, #48	; 0x30
 8024076:	b29b      	uxth	r3, r3
 8024078:	461a      	mov	r2, r3
 802407a:	0092      	lsls	r2, r2, #2
 802407c:	4413      	add	r3, r2
 802407e:	461a      	mov	r2, r3
 8024080:	0091      	lsls	r1, r2, #2
 8024082:	461a      	mov	r2, r3
 8024084:	460b      	mov	r3, r1
 8024086:	4413      	add	r3, r2
 8024088:	009b      	lsls	r3, r3, #2
 802408a:	b29a      	uxth	r2, r3
 802408c:	8a3b      	ldrh	r3, [r7, #16]
 802408e:	3306      	adds	r3, #6
 8024090:	4949      	ldr	r1, [pc, #292]	; (80241b8 <ce303_voltage+0x147c>)
 8024092:	5ccb      	ldrb	r3, [r1, r3]
 8024094:	3b30      	subs	r3, #48	; 0x30
 8024096:	b29b      	uxth	r3, r3
 8024098:	4619      	mov	r1, r3
 802409a:	0089      	lsls	r1, r1, #2
 802409c:	440b      	add	r3, r1
 802409e:	005b      	lsls	r3, r3, #1
 80240a0:	b29b      	uxth	r3, r3
 80240a2:	4413      	add	r3, r2
 80240a4:	b29a      	uxth	r2, r3
 80240a6:	8a3b      	ldrh	r3, [r7, #16]
 80240a8:	3307      	adds	r3, #7
 80240aa:	4943      	ldr	r1, [pc, #268]	; (80241b8 <ce303_voltage+0x147c>)
 80240ac:	5ccb      	ldrb	r3, [r1, r3]
 80240ae:	b29b      	uxth	r3, r3
 80240b0:	4413      	add	r3, r2
 80240b2:	b29b      	uxth	r3, r3
 80240b4:	3b30      	subs	r3, #48	; 0x30
 80240b6:	82fb      	strh	r3, [r7, #22]
 80240b8:	e025      	b.n	8024106 <ce303_voltage+0x13ca>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 80240ba:	8a3b      	ldrh	r3, [r7, #16]
 80240bc:	3305      	adds	r3, #5
 80240be:	4a3e      	ldr	r2, [pc, #248]	; (80241b8 <ce303_voltage+0x147c>)
 80240c0:	5cd3      	ldrb	r3, [r2, r3]
 80240c2:	3b30      	subs	r3, #48	; 0x30
 80240c4:	b29b      	uxth	r3, r3
 80240c6:	461a      	mov	r2, r3
 80240c8:	0092      	lsls	r2, r2, #2
 80240ca:	4413      	add	r3, r2
 80240cc:	461a      	mov	r2, r3
 80240ce:	0091      	lsls	r1, r2, #2
 80240d0:	461a      	mov	r2, r3
 80240d2:	460b      	mov	r3, r1
 80240d4:	4413      	add	r3, r2
 80240d6:	009b      	lsls	r3, r3, #2
 80240d8:	b29a      	uxth	r2, r3
 80240da:	8a3b      	ldrh	r3, [r7, #16]
 80240dc:	3306      	adds	r3, #6
 80240de:	4936      	ldr	r1, [pc, #216]	; (80241b8 <ce303_voltage+0x147c>)
 80240e0:	5ccb      	ldrb	r3, [r1, r3]
 80240e2:	3b30      	subs	r3, #48	; 0x30
 80240e4:	b29b      	uxth	r3, r3
 80240e6:	4619      	mov	r1, r3
 80240e8:	0089      	lsls	r1, r1, #2
 80240ea:	440b      	add	r3, r1
 80240ec:	005b      	lsls	r3, r3, #1
 80240ee:	b29b      	uxth	r3, r3
 80240f0:	4413      	add	r3, r2
 80240f2:	b29a      	uxth	r2, r3
 80240f4:	8a3b      	ldrh	r3, [r7, #16]
 80240f6:	3307      	adds	r3, #7
 80240f8:	492f      	ldr	r1, [pc, #188]	; (80241b8 <ce303_voltage+0x147c>)
 80240fa:	5ccb      	ldrb	r3, [r1, r3]
 80240fc:	b29b      	uxth	r3, r3
 80240fe:	4413      	add	r3, r2
 8024100:	b29b      	uxth	r3, r3
 8024102:	3b30      	subs	r3, #48	; 0x30
 8024104:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8024106:	4b2d      	ldr	r3, [pc, #180]	; (80241bc <ce303_voltage+0x1480>)
 8024108:	681b      	ldr	r3, [r3, #0]
 802410a:	f04f 31ff 	mov.w	r1, #4294967295
 802410e:	4618      	mov	r0, r3
 8024110:	f7f5 f8ca 	bl	80192a8 <osMutexWait>
				fm25v02_write(2*CE_303_VOLT_C_REG, ((uint8_t)(temp>>8)) );
 8024114:	89fb      	ldrh	r3, [r7, #14]
 8024116:	0a1b      	lsrs	r3, r3, #8
 8024118:	b29b      	uxth	r3, r3
 802411a:	b2db      	uxtb	r3, r3
 802411c:	4619      	mov	r1, r3
 802411e:	f242 004e 	movw	r0, #8270	; 0x204e
 8024122:	f006 fcb3 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_C_REG+1, ((uint8_t)(temp&0x00FF)) );
 8024126:	89fb      	ldrh	r3, [r7, #14]
 8024128:	b2db      	uxtb	r3, r3
 802412a:	4619      	mov	r1, r3
 802412c:	f242 004f 	movw	r0, #8271	; 0x204f
 8024130:	f006 fcac 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_MIL_C_REG, ((uint8_t)(temp_mil>>8)) );
 8024134:	8afb      	ldrh	r3, [r7, #22]
 8024136:	0a1b      	lsrs	r3, r3, #8
 8024138:	b29b      	uxth	r3, r3
 802413a:	b2db      	uxtb	r3, r3
 802413c:	4619      	mov	r1, r3
 802413e:	f242 0054 	movw	r0, #8276	; 0x2054
 8024142:	f006 fca3 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_MIL_C_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 8024146:	8afb      	ldrh	r3, [r7, #22]
 8024148:	b2db      	uxtb	r3, r3
 802414a:	4619      	mov	r1, r3
 802414c:	f242 0055 	movw	r0, #8277	; 0x2055
 8024150:	f006 fc9c 	bl	802aa8c <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8024154:	4b19      	ldr	r3, [pc, #100]	; (80241bc <ce303_voltage+0x1480>)
 8024156:	681b      	ldr	r3, [r3, #0]
 8024158:	4618      	mov	r0, r3
 802415a:	f7f5 f8f3 	bl	8019344 <osMutexRelease>
				status_registers.ce303_volt_c_reg = temp;
 802415e:	4a18      	ldr	r2, [pc, #96]	; (80241c0 <ce303_voltage+0x1484>)
 8024160:	89fb      	ldrh	r3, [r7, #14]
 8024162:	f8a2 304e 	strh.w	r3, [r2, #78]	; 0x4e
				status_registers.ce303_volt_mil_c_reg = temp_mil;
 8024166:	4a16      	ldr	r2, [pc, #88]	; (80241c0 <ce303_voltage+0x1484>)
 8024168:	8afb      	ldrh	r3, [r7, #22]
 802416a:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54
				voltage_c_state = 1;
 802416e:	2301      	movs	r3, #1
 8024170:	74fb      	strb	r3, [r7, #19]
 8024172:	e002      	b.n	802417a <ce303_voltage+0x143e>
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 8024174:	bf00      	nop
 8024176:	e000      	b.n	802417a <ce303_voltage+0x143e>
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 8024178:	bf00      	nop
	for(uint16_t i=0; i<256; i++)
 802417a:	8a3b      	ldrh	r3, [r7, #16]
 802417c:	3301      	adds	r3, #1
 802417e:	823b      	strh	r3, [r7, #16]
 8024180:	8a3b      	ldrh	r3, [r7, #16]
 8024182:	2bff      	cmp	r3, #255	; 0xff
 8024184:	f67e afd1 	bls.w	802312a <ce303_voltage+0x3ee>
			}
		}

	}

	meter_rx_number = 0;
 8024188:	4b0e      	ldr	r3, [pc, #56]	; (80241c4 <ce303_voltage+0x1488>)
 802418a:	2200      	movs	r2, #0
 802418c:	701a      	strb	r2, [r3, #0]
	meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 802418e:	f7fe fdbb 	bl	8022d08 <meter_rx_buffer_clear>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 8024192:	2201      	movs	r2, #1
 8024194:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8024198:	480b      	ldr	r0, [pc, #44]	; (80241c8 <ce303_voltage+0x148c>)
 802419a:	f7f0 fb79 	bl	8014890 <HAL_GPIO_WritePin>
	HAL_UART_Transmit_DMA(&huart6, &end_buf[0], 5); // передаем команду
 802419e:	2205      	movs	r2, #5
 80241a0:	490a      	ldr	r1, [pc, #40]	; (80241cc <ce303_voltage+0x1490>)
 80241a2:	480b      	ldr	r0, [pc, #44]	; (80241d0 <ce303_voltage+0x1494>)
 80241a4:	f7f3 fe40 	bl	8017e28 <HAL_UART_Transmit_DMA>
	HAL_Delay(1000);
 80241a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80241ac:	f7ee fe8c 	bl	8012ec8 <HAL_Delay>

}
 80241b0:	bf00      	nop
 80241b2:	3718      	adds	r7, #24
 80241b4:	46bd      	mov	sp, r7
 80241b6:	bd80      	pop	{r7, pc}
 80241b8:	20009a0c 	.word	0x20009a0c
 80241bc:	20009bb8 	.word	0x20009bb8
 80241c0:	2000af40 	.word	0x2000af40
 80241c4:	20000865 	.word	0x20000865
 80241c8:	40021800 	.word	0x40021800
 80241cc:	20000038 	.word	0x20000038
 80241d0:	20009dc4 	.word	0x20009dc4

080241d4 <ce303_current>:

void ce303_current (uint8_t meter_id) // функция чтения тока из счетчика СЕ303
{
 80241d4:	b580      	push	{r7, lr}
 80241d6:	b086      	sub	sp, #24
 80241d8:	af00      	add	r7, sp, #0
 80241da:	4603      	mov	r3, r0
 80241dc:	71fb      	strb	r3, [r7, #7]
	uint16_t temp_mil;
	uint8_t current_a_state; // переменные состояния прочтения значений тока ( если переменная равна 0, то значение тока не прочитано, если 1 - значение прочитанно )
	uint8_t current_b_state;
	uint8_t current_c_state;

	if( (meter_id>99)&&(meter_id<1000) )
 80241de:	79fb      	ldrb	r3, [r7, #7]
 80241e0:	2b63      	cmp	r3, #99	; 0x63
 80241e2:	d962      	bls.n	80242aa <ce303_current+0xd6>
	{
		start_buf[0] = 0x2F;
 80241e4:	4b9d      	ldr	r3, [pc, #628]	; (802445c <ce303_current+0x288>)
 80241e6:	222f      	movs	r2, #47	; 0x2f
 80241e8:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 80241ea:	4b9c      	ldr	r3, [pc, #624]	; (802445c <ce303_current+0x288>)
 80241ec:	223f      	movs	r2, #63	; 0x3f
 80241ee:	705a      	strb	r2, [r3, #1]
		start_buf[2] = (meter_id/100) + 0x30;
 80241f0:	79fb      	ldrb	r3, [r7, #7]
 80241f2:	4a9b      	ldr	r2, [pc, #620]	; (8024460 <ce303_current+0x28c>)
 80241f4:	fba2 2303 	umull	r2, r3, r2, r3
 80241f8:	095b      	lsrs	r3, r3, #5
 80241fa:	b2db      	uxtb	r3, r3
 80241fc:	3330      	adds	r3, #48	; 0x30
 80241fe:	b2da      	uxtb	r2, r3
 8024200:	4b96      	ldr	r3, [pc, #600]	; (802445c <ce303_current+0x288>)
 8024202:	709a      	strb	r2, [r3, #2]
		start_buf[3] = ((meter_id - (meter_id/100)*100)/10) + 0x30;
 8024204:	79fa      	ldrb	r2, [r7, #7]
 8024206:	79fb      	ldrb	r3, [r7, #7]
 8024208:	4995      	ldr	r1, [pc, #596]	; (8024460 <ce303_current+0x28c>)
 802420a:	fba1 1303 	umull	r1, r3, r1, r3
 802420e:	095b      	lsrs	r3, r3, #5
 8024210:	b2db      	uxtb	r3, r3
 8024212:	4619      	mov	r1, r3
 8024214:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8024218:	fb03 f301 	mul.w	r3, r3, r1
 802421c:	4413      	add	r3, r2
 802421e:	4a91      	ldr	r2, [pc, #580]	; (8024464 <ce303_current+0x290>)
 8024220:	fb82 1203 	smull	r1, r2, r2, r3
 8024224:	1092      	asrs	r2, r2, #2
 8024226:	17db      	asrs	r3, r3, #31
 8024228:	1ad3      	subs	r3, r2, r3
 802422a:	b2db      	uxtb	r3, r3
 802422c:	3330      	adds	r3, #48	; 0x30
 802422e:	b2da      	uxtb	r2, r3
 8024230:	4b8a      	ldr	r3, [pc, #552]	; (802445c <ce303_current+0x288>)
 8024232:	70da      	strb	r2, [r3, #3]
		start_buf[4] = ((meter_id - ((meter_id/100)*100)) - (((meter_id - ((meter_id/100)*100))/10)*10)) + 0x30 ;
 8024234:	79fa      	ldrb	r2, [r7, #7]
 8024236:	79fb      	ldrb	r3, [r7, #7]
 8024238:	4989      	ldr	r1, [pc, #548]	; (8024460 <ce303_current+0x28c>)
 802423a:	fba1 1303 	umull	r1, r3, r1, r3
 802423e:	095b      	lsrs	r3, r3, #5
 8024240:	b2db      	uxtb	r3, r3
 8024242:	4619      	mov	r1, r3
 8024244:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8024248:	fb03 f301 	mul.w	r3, r3, r1
 802424c:	441a      	add	r2, r3
 802424e:	4b85      	ldr	r3, [pc, #532]	; (8024464 <ce303_current+0x290>)
 8024250:	fb83 1302 	smull	r1, r3, r3, r2
 8024254:	1099      	asrs	r1, r3, #2
 8024256:	17d3      	asrs	r3, r2, #31
 8024258:	1ac9      	subs	r1, r1, r3
 802425a:	460b      	mov	r3, r1
 802425c:	009b      	lsls	r3, r3, #2
 802425e:	440b      	add	r3, r1
 8024260:	005b      	lsls	r3, r3, #1
 8024262:	1ad1      	subs	r1, r2, r3
 8024264:	b2cb      	uxtb	r3, r1
 8024266:	3330      	adds	r3, #48	; 0x30
 8024268:	b2da      	uxtb	r2, r3
 802426a:	4b7c      	ldr	r3, [pc, #496]	; (802445c <ce303_current+0x288>)
 802426c:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x21;
 802426e:	4b7b      	ldr	r3, [pc, #492]	; (802445c <ce303_current+0x288>)
 8024270:	2221      	movs	r2, #33	; 0x21
 8024272:	715a      	strb	r2, [r3, #5]
		start_buf[6] = 0x0D;
 8024274:	4b79      	ldr	r3, [pc, #484]	; (802445c <ce303_current+0x288>)
 8024276:	220d      	movs	r2, #13
 8024278:	719a      	strb	r2, [r3, #6]
		start_buf[7] = 0x0A;
 802427a:	4b78      	ldr	r3, [pc, #480]	; (802445c <ce303_current+0x288>)
 802427c:	220a      	movs	r2, #10
 802427e:	71da      	strb	r2, [r3, #7]

		meter_rx_number = 0;
 8024280:	4b79      	ldr	r3, [pc, #484]	; (8024468 <ce303_current+0x294>)
 8024282:	2200      	movs	r2, #0
 8024284:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 8024286:	f7fe fd3f 	bl	8022d08 <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 802428a:	2201      	movs	r2, #1
 802428c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8024290:	4876      	ldr	r0, [pc, #472]	; (802446c <ce303_current+0x298>)
 8024292:	f7f0 fafd 	bl	8014890 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 8); // передаем команду
 8024296:	2208      	movs	r2, #8
 8024298:	4970      	ldr	r1, [pc, #448]	; (802445c <ce303_current+0x288>)
 802429a:	4875      	ldr	r0, [pc, #468]	; (8024470 <ce303_current+0x29c>)
 802429c:	f7f3 fdc4 	bl	8017e28 <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 80242a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80242a4:	f7ee fe10 	bl	8012ec8 <HAL_Delay>
 80242a8:	e072      	b.n	8024390 <ce303_current+0x1bc>

	}
	else if( (meter_id>9)&&(meter_id<100) )
 80242aa:	79fb      	ldrb	r3, [r7, #7]
 80242ac:	2b09      	cmp	r3, #9
 80242ae:	d944      	bls.n	802433a <ce303_current+0x166>
 80242b0:	79fb      	ldrb	r3, [r7, #7]
 80242b2:	2b63      	cmp	r3, #99	; 0x63
 80242b4:	d841      	bhi.n	802433a <ce303_current+0x166>
	{
		start_buf[0] = 0x2F;
 80242b6:	4b69      	ldr	r3, [pc, #420]	; (802445c <ce303_current+0x288>)
 80242b8:	222f      	movs	r2, #47	; 0x2f
 80242ba:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 80242bc:	4b67      	ldr	r3, [pc, #412]	; (802445c <ce303_current+0x288>)
 80242be:	223f      	movs	r2, #63	; 0x3f
 80242c0:	705a      	strb	r2, [r3, #1]
		start_buf[2] = (meter_id/10) + 0x30;
 80242c2:	79fb      	ldrb	r3, [r7, #7]
 80242c4:	4a6b      	ldr	r2, [pc, #428]	; (8024474 <ce303_current+0x2a0>)
 80242c6:	fba2 2303 	umull	r2, r3, r2, r3
 80242ca:	08db      	lsrs	r3, r3, #3
 80242cc:	b2db      	uxtb	r3, r3
 80242ce:	3330      	adds	r3, #48	; 0x30
 80242d0:	b2da      	uxtb	r2, r3
 80242d2:	4b62      	ldr	r3, [pc, #392]	; (802445c <ce303_current+0x288>)
 80242d4:	709a      	strb	r2, [r3, #2]
		start_buf[3] = (meter_id - ((meter_id/10)*10)) + 0x30;
 80242d6:	79fb      	ldrb	r3, [r7, #7]
 80242d8:	4a66      	ldr	r2, [pc, #408]	; (8024474 <ce303_current+0x2a0>)
 80242da:	fba2 2303 	umull	r2, r3, r2, r3
 80242de:	08db      	lsrs	r3, r3, #3
 80242e0:	b2db      	uxtb	r3, r3
 80242e2:	461a      	mov	r2, r3
 80242e4:	0152      	lsls	r2, r2, #5
 80242e6:	1ad2      	subs	r2, r2, r3
 80242e8:	0092      	lsls	r2, r2, #2
 80242ea:	1ad3      	subs	r3, r2, r3
 80242ec:	005b      	lsls	r3, r3, #1
 80242ee:	b2da      	uxtb	r2, r3
 80242f0:	79fb      	ldrb	r3, [r7, #7]
 80242f2:	4413      	add	r3, r2
 80242f4:	b2db      	uxtb	r3, r3
 80242f6:	3330      	adds	r3, #48	; 0x30
 80242f8:	b2da      	uxtb	r2, r3
 80242fa:	4b58      	ldr	r3, [pc, #352]	; (802445c <ce303_current+0x288>)
 80242fc:	70da      	strb	r2, [r3, #3]
		start_buf[4] = 0x21;
 80242fe:	4b57      	ldr	r3, [pc, #348]	; (802445c <ce303_current+0x288>)
 8024300:	2221      	movs	r2, #33	; 0x21
 8024302:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x0D;
 8024304:	4b55      	ldr	r3, [pc, #340]	; (802445c <ce303_current+0x288>)
 8024306:	220d      	movs	r2, #13
 8024308:	715a      	strb	r2, [r3, #5]
		start_buf[6] = 0x0A;
 802430a:	4b54      	ldr	r3, [pc, #336]	; (802445c <ce303_current+0x288>)
 802430c:	220a      	movs	r2, #10
 802430e:	719a      	strb	r2, [r3, #6]

		meter_rx_number = 0;
 8024310:	4b55      	ldr	r3, [pc, #340]	; (8024468 <ce303_current+0x294>)
 8024312:	2200      	movs	r2, #0
 8024314:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 8024316:	f7fe fcf7 	bl	8022d08 <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 802431a:	2201      	movs	r2, #1
 802431c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8024320:	4852      	ldr	r0, [pc, #328]	; (802446c <ce303_current+0x298>)
 8024322:	f7f0 fab5 	bl	8014890 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 7); // передаем команду
 8024326:	2207      	movs	r2, #7
 8024328:	494c      	ldr	r1, [pc, #304]	; (802445c <ce303_current+0x288>)
 802432a:	4851      	ldr	r0, [pc, #324]	; (8024470 <ce303_current+0x29c>)
 802432c:	f7f3 fd7c 	bl	8017e28 <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 8024330:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8024334:	f7ee fdc8 	bl	8012ec8 <HAL_Delay>
 8024338:	e02a      	b.n	8024390 <ce303_current+0x1bc>

	}
	else if( (meter_id>=0)&&(meter_id<10) )
 802433a:	79fb      	ldrb	r3, [r7, #7]
 802433c:	2b09      	cmp	r3, #9
 802433e:	d827      	bhi.n	8024390 <ce303_current+0x1bc>
	{
		start_buf[0] = 0x2F;
 8024340:	4b46      	ldr	r3, [pc, #280]	; (802445c <ce303_current+0x288>)
 8024342:	222f      	movs	r2, #47	; 0x2f
 8024344:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 8024346:	4b45      	ldr	r3, [pc, #276]	; (802445c <ce303_current+0x288>)
 8024348:	223f      	movs	r2, #63	; 0x3f
 802434a:	705a      	strb	r2, [r3, #1]
		start_buf[2] = meter_id + 0x30;
 802434c:	79fb      	ldrb	r3, [r7, #7]
 802434e:	3330      	adds	r3, #48	; 0x30
 8024350:	b2da      	uxtb	r2, r3
 8024352:	4b42      	ldr	r3, [pc, #264]	; (802445c <ce303_current+0x288>)
 8024354:	709a      	strb	r2, [r3, #2]
		start_buf[3] = 0x21;
 8024356:	4b41      	ldr	r3, [pc, #260]	; (802445c <ce303_current+0x288>)
 8024358:	2221      	movs	r2, #33	; 0x21
 802435a:	70da      	strb	r2, [r3, #3]
		start_buf[4] = 0x0D;
 802435c:	4b3f      	ldr	r3, [pc, #252]	; (802445c <ce303_current+0x288>)
 802435e:	220d      	movs	r2, #13
 8024360:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x0A;
 8024362:	4b3e      	ldr	r3, [pc, #248]	; (802445c <ce303_current+0x288>)
 8024364:	220a      	movs	r2, #10
 8024366:	715a      	strb	r2, [r3, #5]

		meter_rx_number = 0;
 8024368:	4b3f      	ldr	r3, [pc, #252]	; (8024468 <ce303_current+0x294>)
 802436a:	2200      	movs	r2, #0
 802436c:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 802436e:	f7fe fccb 	bl	8022d08 <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 8024372:	2201      	movs	r2, #1
 8024374:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8024378:	483c      	ldr	r0, [pc, #240]	; (802446c <ce303_current+0x298>)
 802437a:	f7f0 fa89 	bl	8014890 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 6); // передаем команду
 802437e:	2206      	movs	r2, #6
 8024380:	4936      	ldr	r1, [pc, #216]	; (802445c <ce303_current+0x288>)
 8024382:	483b      	ldr	r0, [pc, #236]	; (8024470 <ce303_current+0x29c>)
 8024384:	f7f3 fd50 	bl	8017e28 <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 8024388:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 802438c:	f7ee fd9c 	bl	8012ec8 <HAL_Delay>
	}


	if( (meter_id>99)&&(meter_id<1000) )
 8024390:	79fb      	ldrb	r3, [r7, #7]
 8024392:	2b63      	cmp	r3, #99	; 0x63
 8024394:	d970      	bls.n	8024478 <ce303_current+0x2a4>
	{
		start_buf[0] = 0x2F;
 8024396:	4b31      	ldr	r3, [pc, #196]	; (802445c <ce303_current+0x288>)
 8024398:	222f      	movs	r2, #47	; 0x2f
 802439a:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 802439c:	4b2f      	ldr	r3, [pc, #188]	; (802445c <ce303_current+0x288>)
 802439e:	223f      	movs	r2, #63	; 0x3f
 80243a0:	705a      	strb	r2, [r3, #1]
		start_buf[2] = (meter_id/100) + 0x30;
 80243a2:	79fb      	ldrb	r3, [r7, #7]
 80243a4:	4a2e      	ldr	r2, [pc, #184]	; (8024460 <ce303_current+0x28c>)
 80243a6:	fba2 2303 	umull	r2, r3, r2, r3
 80243aa:	095b      	lsrs	r3, r3, #5
 80243ac:	b2db      	uxtb	r3, r3
 80243ae:	3330      	adds	r3, #48	; 0x30
 80243b0:	b2da      	uxtb	r2, r3
 80243b2:	4b2a      	ldr	r3, [pc, #168]	; (802445c <ce303_current+0x288>)
 80243b4:	709a      	strb	r2, [r3, #2]
		start_buf[3] = ((meter_id - (meter_id/100)*100)/10) + 0x30;
 80243b6:	79fa      	ldrb	r2, [r7, #7]
 80243b8:	79fb      	ldrb	r3, [r7, #7]
 80243ba:	4929      	ldr	r1, [pc, #164]	; (8024460 <ce303_current+0x28c>)
 80243bc:	fba1 1303 	umull	r1, r3, r1, r3
 80243c0:	095b      	lsrs	r3, r3, #5
 80243c2:	b2db      	uxtb	r3, r3
 80243c4:	4619      	mov	r1, r3
 80243c6:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80243ca:	fb03 f301 	mul.w	r3, r3, r1
 80243ce:	4413      	add	r3, r2
 80243d0:	4a24      	ldr	r2, [pc, #144]	; (8024464 <ce303_current+0x290>)
 80243d2:	fb82 1203 	smull	r1, r2, r2, r3
 80243d6:	1092      	asrs	r2, r2, #2
 80243d8:	17db      	asrs	r3, r3, #31
 80243da:	1ad3      	subs	r3, r2, r3
 80243dc:	b2db      	uxtb	r3, r3
 80243de:	3330      	adds	r3, #48	; 0x30
 80243e0:	b2da      	uxtb	r2, r3
 80243e2:	4b1e      	ldr	r3, [pc, #120]	; (802445c <ce303_current+0x288>)
 80243e4:	70da      	strb	r2, [r3, #3]
		start_buf[4] = ((meter_id - ((meter_id/100)*100)) - (((meter_id - ((meter_id/100)*100))/10)*10)) + 0x30 ;
 80243e6:	79fa      	ldrb	r2, [r7, #7]
 80243e8:	79fb      	ldrb	r3, [r7, #7]
 80243ea:	491d      	ldr	r1, [pc, #116]	; (8024460 <ce303_current+0x28c>)
 80243ec:	fba1 1303 	umull	r1, r3, r1, r3
 80243f0:	095b      	lsrs	r3, r3, #5
 80243f2:	b2db      	uxtb	r3, r3
 80243f4:	4619      	mov	r1, r3
 80243f6:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80243fa:	fb03 f301 	mul.w	r3, r3, r1
 80243fe:	441a      	add	r2, r3
 8024400:	4b18      	ldr	r3, [pc, #96]	; (8024464 <ce303_current+0x290>)
 8024402:	fb83 1302 	smull	r1, r3, r3, r2
 8024406:	1099      	asrs	r1, r3, #2
 8024408:	17d3      	asrs	r3, r2, #31
 802440a:	1ac9      	subs	r1, r1, r3
 802440c:	460b      	mov	r3, r1
 802440e:	009b      	lsls	r3, r3, #2
 8024410:	440b      	add	r3, r1
 8024412:	005b      	lsls	r3, r3, #1
 8024414:	1ad1      	subs	r1, r2, r3
 8024416:	b2cb      	uxtb	r3, r1
 8024418:	3330      	adds	r3, #48	; 0x30
 802441a:	b2da      	uxtb	r2, r3
 802441c:	4b0f      	ldr	r3, [pc, #60]	; (802445c <ce303_current+0x288>)
 802441e:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x21;
 8024420:	4b0e      	ldr	r3, [pc, #56]	; (802445c <ce303_current+0x288>)
 8024422:	2221      	movs	r2, #33	; 0x21
 8024424:	715a      	strb	r2, [r3, #5]
		start_buf[6] = 0x0D;
 8024426:	4b0d      	ldr	r3, [pc, #52]	; (802445c <ce303_current+0x288>)
 8024428:	220d      	movs	r2, #13
 802442a:	719a      	strb	r2, [r3, #6]
		start_buf[7] = 0x0A;
 802442c:	4b0b      	ldr	r3, [pc, #44]	; (802445c <ce303_current+0x288>)
 802442e:	220a      	movs	r2, #10
 8024430:	71da      	strb	r2, [r3, #7]

		meter_rx_number = 0;
 8024432:	4b0d      	ldr	r3, [pc, #52]	; (8024468 <ce303_current+0x294>)
 8024434:	2200      	movs	r2, #0
 8024436:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 8024438:	f7fe fc66 	bl	8022d08 <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 802443c:	2201      	movs	r2, #1
 802443e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8024442:	480a      	ldr	r0, [pc, #40]	; (802446c <ce303_current+0x298>)
 8024444:	f7f0 fa24 	bl	8014890 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 8); // передаем команду
 8024448:	2208      	movs	r2, #8
 802444a:	4904      	ldr	r1, [pc, #16]	; (802445c <ce303_current+0x288>)
 802444c:	4808      	ldr	r0, [pc, #32]	; (8024470 <ce303_current+0x29c>)
 802444e:	f7f3 fceb 	bl	8017e28 <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 8024452:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8024456:	f7ee fd37 	bl	8012ec8 <HAL_Delay>
 802445a:	e080      	b.n	802455e <ce303_current+0x38a>
 802445c:	20000018 	.word	0x20000018
 8024460:	51eb851f 	.word	0x51eb851f
 8024464:	66666667 	.word	0x66666667
 8024468:	20000865 	.word	0x20000865
 802446c:	40021800 	.word	0x40021800
 8024470:	20009dc4 	.word	0x20009dc4
 8024474:	cccccccd 	.word	0xcccccccd

	}
	else if( (meter_id>9)&&(meter_id<100) )
 8024478:	79fb      	ldrb	r3, [r7, #7]
 802447a:	2b09      	cmp	r3, #9
 802447c:	d944      	bls.n	8024508 <ce303_current+0x334>
 802447e:	79fb      	ldrb	r3, [r7, #7]
 8024480:	2b63      	cmp	r3, #99	; 0x63
 8024482:	d841      	bhi.n	8024508 <ce303_current+0x334>
	{
		start_buf[0] = 0x2F;
 8024484:	4b90      	ldr	r3, [pc, #576]	; (80246c8 <ce303_current+0x4f4>)
 8024486:	222f      	movs	r2, #47	; 0x2f
 8024488:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 802448a:	4b8f      	ldr	r3, [pc, #572]	; (80246c8 <ce303_current+0x4f4>)
 802448c:	223f      	movs	r2, #63	; 0x3f
 802448e:	705a      	strb	r2, [r3, #1]
		start_buf[2] = (meter_id/10) + 0x30;
 8024490:	79fb      	ldrb	r3, [r7, #7]
 8024492:	4a8e      	ldr	r2, [pc, #568]	; (80246cc <ce303_current+0x4f8>)
 8024494:	fba2 2303 	umull	r2, r3, r2, r3
 8024498:	08db      	lsrs	r3, r3, #3
 802449a:	b2db      	uxtb	r3, r3
 802449c:	3330      	adds	r3, #48	; 0x30
 802449e:	b2da      	uxtb	r2, r3
 80244a0:	4b89      	ldr	r3, [pc, #548]	; (80246c8 <ce303_current+0x4f4>)
 80244a2:	709a      	strb	r2, [r3, #2]
		start_buf[3] = (meter_id - ((meter_id/10)*10)) + 0x30;
 80244a4:	79fb      	ldrb	r3, [r7, #7]
 80244a6:	4a89      	ldr	r2, [pc, #548]	; (80246cc <ce303_current+0x4f8>)
 80244a8:	fba2 2303 	umull	r2, r3, r2, r3
 80244ac:	08db      	lsrs	r3, r3, #3
 80244ae:	b2db      	uxtb	r3, r3
 80244b0:	461a      	mov	r2, r3
 80244b2:	0152      	lsls	r2, r2, #5
 80244b4:	1ad2      	subs	r2, r2, r3
 80244b6:	0092      	lsls	r2, r2, #2
 80244b8:	1ad3      	subs	r3, r2, r3
 80244ba:	005b      	lsls	r3, r3, #1
 80244bc:	b2da      	uxtb	r2, r3
 80244be:	79fb      	ldrb	r3, [r7, #7]
 80244c0:	4413      	add	r3, r2
 80244c2:	b2db      	uxtb	r3, r3
 80244c4:	3330      	adds	r3, #48	; 0x30
 80244c6:	b2da      	uxtb	r2, r3
 80244c8:	4b7f      	ldr	r3, [pc, #508]	; (80246c8 <ce303_current+0x4f4>)
 80244ca:	70da      	strb	r2, [r3, #3]
		start_buf[4] = 0x21;
 80244cc:	4b7e      	ldr	r3, [pc, #504]	; (80246c8 <ce303_current+0x4f4>)
 80244ce:	2221      	movs	r2, #33	; 0x21
 80244d0:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x0D;
 80244d2:	4b7d      	ldr	r3, [pc, #500]	; (80246c8 <ce303_current+0x4f4>)
 80244d4:	220d      	movs	r2, #13
 80244d6:	715a      	strb	r2, [r3, #5]
		start_buf[6] = 0x0A;
 80244d8:	4b7b      	ldr	r3, [pc, #492]	; (80246c8 <ce303_current+0x4f4>)
 80244da:	220a      	movs	r2, #10
 80244dc:	719a      	strb	r2, [r3, #6]

		meter_rx_number = 0;
 80244de:	4b7c      	ldr	r3, [pc, #496]	; (80246d0 <ce303_current+0x4fc>)
 80244e0:	2200      	movs	r2, #0
 80244e2:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 80244e4:	f7fe fc10 	bl	8022d08 <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 80244e8:	2201      	movs	r2, #1
 80244ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80244ee:	4879      	ldr	r0, [pc, #484]	; (80246d4 <ce303_current+0x500>)
 80244f0:	f7f0 f9ce 	bl	8014890 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 7); // передаем команду
 80244f4:	2207      	movs	r2, #7
 80244f6:	4974      	ldr	r1, [pc, #464]	; (80246c8 <ce303_current+0x4f4>)
 80244f8:	4877      	ldr	r0, [pc, #476]	; (80246d8 <ce303_current+0x504>)
 80244fa:	f7f3 fc95 	bl	8017e28 <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 80244fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8024502:	f7ee fce1 	bl	8012ec8 <HAL_Delay>
 8024506:	e02a      	b.n	802455e <ce303_current+0x38a>

	}
	else if( (meter_id>=0)&&(meter_id<10) )
 8024508:	79fb      	ldrb	r3, [r7, #7]
 802450a:	2b09      	cmp	r3, #9
 802450c:	d827      	bhi.n	802455e <ce303_current+0x38a>
	{
		start_buf[0] = 0x2F;
 802450e:	4b6e      	ldr	r3, [pc, #440]	; (80246c8 <ce303_current+0x4f4>)
 8024510:	222f      	movs	r2, #47	; 0x2f
 8024512:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 8024514:	4b6c      	ldr	r3, [pc, #432]	; (80246c8 <ce303_current+0x4f4>)
 8024516:	223f      	movs	r2, #63	; 0x3f
 8024518:	705a      	strb	r2, [r3, #1]
		start_buf[2] = meter_id + 0x30;
 802451a:	79fb      	ldrb	r3, [r7, #7]
 802451c:	3330      	adds	r3, #48	; 0x30
 802451e:	b2da      	uxtb	r2, r3
 8024520:	4b69      	ldr	r3, [pc, #420]	; (80246c8 <ce303_current+0x4f4>)
 8024522:	709a      	strb	r2, [r3, #2]
		start_buf[3] = 0x21;
 8024524:	4b68      	ldr	r3, [pc, #416]	; (80246c8 <ce303_current+0x4f4>)
 8024526:	2221      	movs	r2, #33	; 0x21
 8024528:	70da      	strb	r2, [r3, #3]
		start_buf[4] = 0x0D;
 802452a:	4b67      	ldr	r3, [pc, #412]	; (80246c8 <ce303_current+0x4f4>)
 802452c:	220d      	movs	r2, #13
 802452e:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x0A;
 8024530:	4b65      	ldr	r3, [pc, #404]	; (80246c8 <ce303_current+0x4f4>)
 8024532:	220a      	movs	r2, #10
 8024534:	715a      	strb	r2, [r3, #5]

		meter_rx_number = 0;
 8024536:	4b66      	ldr	r3, [pc, #408]	; (80246d0 <ce303_current+0x4fc>)
 8024538:	2200      	movs	r2, #0
 802453a:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 802453c:	f7fe fbe4 	bl	8022d08 <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 8024540:	2201      	movs	r2, #1
 8024542:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8024546:	4863      	ldr	r0, [pc, #396]	; (80246d4 <ce303_current+0x500>)
 8024548:	f7f0 f9a2 	bl	8014890 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 6); // передаем команду
 802454c:	2206      	movs	r2, #6
 802454e:	495e      	ldr	r1, [pc, #376]	; (80246c8 <ce303_current+0x4f4>)
 8024550:	4861      	ldr	r0, [pc, #388]	; (80246d8 <ce303_current+0x504>)
 8024552:	f7f3 fc69 	bl	8017e28 <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 8024556:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 802455a:	f7ee fcb5 	bl	8012ec8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
	HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 6); // передаем команду
	HAL_Delay(1000); // ждем
	*/

	meter_rx_number = 0;
 802455e:	4b5c      	ldr	r3, [pc, #368]	; (80246d0 <ce303_current+0x4fc>)
 8024560:	2200      	movs	r2, #0
 8024562:	701a      	strb	r2, [r3, #0]
	meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 8024564:	f7fe fbd0 	bl	8022d08 <meter_rx_buffer_clear>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 8024568:	2201      	movs	r2, #1
 802456a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 802456e:	4859      	ldr	r0, [pc, #356]	; (80246d4 <ce303_current+0x500>)
 8024570:	f7f0 f98e 	bl	8014890 <HAL_GPIO_WritePin>
	HAL_UART_Transmit_DMA(&huart6, &password_buf[0], 6); // передаем команду
 8024574:	2206      	movs	r2, #6
 8024576:	4959      	ldr	r1, [pc, #356]	; (80246dc <ce303_current+0x508>)
 8024578:	4857      	ldr	r0, [pc, #348]	; (80246d8 <ce303_current+0x504>)
 802457a:	f7f3 fc55 	bl	8017e28 <HAL_UART_Transmit_DMA>
	HAL_Delay(1000);
 802457e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8024582:	f7ee fca1 	bl	8012ec8 <HAL_Delay>

	meter_rx_number = 0;
 8024586:	4b52      	ldr	r3, [pc, #328]	; (80246d0 <ce303_current+0x4fc>)
 8024588:	2200      	movs	r2, #0
 802458a:	701a      	strb	r2, [r3, #0]
	meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 802458c:	f7fe fbbc 	bl	8022d08 <meter_rx_buffer_clear>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 8024590:	2201      	movs	r2, #1
 8024592:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8024596:	484f      	ldr	r0, [pc, #316]	; (80246d4 <ce303_current+0x500>)
 8024598:	f7f0 f97a 	bl	8014890 <HAL_GPIO_WritePin>
	HAL_UART_Transmit_DMA(&huart6, &current_buf[0], 13); // передаем команду
 802459c:	220d      	movs	r2, #13
 802459e:	4950      	ldr	r1, [pc, #320]	; (80246e0 <ce303_current+0x50c>)
 80245a0:	484d      	ldr	r0, [pc, #308]	; (80246d8 <ce303_current+0x504>)
 80245a2:	f7f3 fc41 	bl	8017e28 <HAL_UART_Transmit_DMA>
	HAL_Delay(1000);
 80245a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80245aa:	f7ee fc8d 	bl	8012ec8 <HAL_Delay>

	current_a_state = 0; // обнуляем переменные состояния прочтения тока перед их прочтением
 80245ae:	2300      	movs	r3, #0
 80245b0:	757b      	strb	r3, [r7, #21]
	current_b_state = 0;
 80245b2:	2300      	movs	r3, #0
 80245b4:	753b      	strb	r3, [r7, #20]
	current_c_state = 0;
 80245b6:	2300      	movs	r3, #0
 80245b8:	74fb      	strb	r3, [r7, #19]

	for(uint16_t i=0; i<256; i++)
 80245ba:	2300      	movs	r3, #0
 80245bc:	823b      	strh	r3, [r7, #16]
 80245be:	f001 b829 	b.w	8025614 <ce303_current+0x1440>
	{

		if( (meter_rx_buffer[i] == 0x28) && (current_a_state==0) && (current_b_state==0) && (current_c_state==0) ) // 0х28 означает символ "(" в ASCII таблице
 80245c2:	8a3b      	ldrh	r3, [r7, #16]
 80245c4:	4a47      	ldr	r2, [pc, #284]	; (80246e4 <ce303_current+0x510>)
 80245c6:	5cd3      	ldrb	r3, [r2, r3]
 80245c8:	2b28      	cmp	r3, #40	; 0x28
 80245ca:	f040 82b7 	bne.w	8024b3c <ce303_current+0x968>
 80245ce:	7d7b      	ldrb	r3, [r7, #21]
 80245d0:	2b00      	cmp	r3, #0
 80245d2:	f040 82b3 	bne.w	8024b3c <ce303_current+0x968>
 80245d6:	7d3b      	ldrb	r3, [r7, #20]
 80245d8:	2b00      	cmp	r3, #0
 80245da:	f040 82af 	bne.w	8024b3c <ce303_current+0x968>
 80245de:	7cfb      	ldrb	r3, [r7, #19]
 80245e0:	2b00      	cmp	r3, #0
 80245e2:	f040 82ab 	bne.w	8024b3c <ce303_current+0x968>
		{
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 80245e6:	8a3b      	ldrh	r3, [r7, #16]
 80245e8:	3302      	adds	r3, #2
 80245ea:	4a3e      	ldr	r2, [pc, #248]	; (80246e4 <ce303_current+0x510>)
 80245ec:	5cd3      	ldrb	r3, [r2, r3]
 80245ee:	2b2e      	cmp	r3, #46	; 0x2e
 80245f0:	f040 80d7 	bne.w	80247a2 <ce303_current+0x5ce>
			{
				temp = (uint16_t)(meter_rx_buffer[i+1]-0x30);
 80245f4:	8a3b      	ldrh	r3, [r7, #16]
 80245f6:	3301      	adds	r3, #1
 80245f8:	4a3a      	ldr	r2, [pc, #232]	; (80246e4 <ce303_current+0x510>)
 80245fa:	5cd3      	ldrb	r3, [r2, r3]
 80245fc:	b29b      	uxth	r3, r3
 80245fe:	3b30      	subs	r3, #48	; 0x30
 8024600:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+4] == 0x29 ) // если 1 разряд после запятой
 8024602:	8a3b      	ldrh	r3, [r7, #16]
 8024604:	3304      	adds	r3, #4
 8024606:	4a37      	ldr	r2, [pc, #220]	; (80246e4 <ce303_current+0x510>)
 8024608:	5cd3      	ldrb	r3, [r2, r3]
 802460a:	2b29      	cmp	r3, #41	; 0x29
 802460c:	d110      	bne.n	8024630 <ce303_current+0x45c>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+3])-0x30)*100;
 802460e:	8a3b      	ldrh	r3, [r7, #16]
 8024610:	3303      	adds	r3, #3
 8024612:	4a34      	ldr	r2, [pc, #208]	; (80246e4 <ce303_current+0x510>)
 8024614:	5cd3      	ldrb	r3, [r2, r3]
 8024616:	3b30      	subs	r3, #48	; 0x30
 8024618:	b29b      	uxth	r3, r3
 802461a:	461a      	mov	r2, r3
 802461c:	0092      	lsls	r2, r2, #2
 802461e:	4413      	add	r3, r2
 8024620:	461a      	mov	r2, r3
 8024622:	0091      	lsls	r1, r2, #2
 8024624:	461a      	mov	r2, r3
 8024626:	460b      	mov	r3, r1
 8024628:	4413      	add	r3, r2
 802462a:	009b      	lsls	r3, r3, #2
 802462c:	82fb      	strh	r3, [r7, #22]
 802462e:	e081      	b.n	8024734 <ce303_current+0x560>
				}
				else if( meter_rx_buffer[i+5] == 0x29 ) // если 2 разряда после запятой
 8024630:	8a3b      	ldrh	r3, [r7, #16]
 8024632:	3305      	adds	r3, #5
 8024634:	4a2b      	ldr	r2, [pc, #172]	; (80246e4 <ce303_current+0x510>)
 8024636:	5cd3      	ldrb	r3, [r2, r3]
 8024638:	2b29      	cmp	r3, #41	; 0x29
 802463a:	d117      	bne.n	802466c <ce303_current+0x498>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+3])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+4])-0x30))*10;
 802463c:	8a3b      	ldrh	r3, [r7, #16]
 802463e:	3303      	adds	r3, #3
 8024640:	4a28      	ldr	r2, [pc, #160]	; (80246e4 <ce303_current+0x510>)
 8024642:	5cd3      	ldrb	r3, [r2, r3]
 8024644:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8024648:	4613      	mov	r3, r2
 802464a:	009b      	lsls	r3, r3, #2
 802464c:	4413      	add	r3, r2
 802464e:	005b      	lsls	r3, r3, #1
 8024650:	4619      	mov	r1, r3
 8024652:	8a3b      	ldrh	r3, [r7, #16]
 8024654:	3304      	adds	r3, #4
 8024656:	4a23      	ldr	r2, [pc, #140]	; (80246e4 <ce303_current+0x510>)
 8024658:	5cd3      	ldrb	r3, [r2, r3]
 802465a:	3b30      	subs	r3, #48	; 0x30
 802465c:	440b      	add	r3, r1
 802465e:	b29b      	uxth	r3, r3
 8024660:	461a      	mov	r2, r3
 8024662:	0092      	lsls	r2, r2, #2
 8024664:	4413      	add	r3, r2
 8024666:	005b      	lsls	r3, r3, #1
 8024668:	82fb      	strh	r3, [r7, #22]
 802466a:	e063      	b.n	8024734 <ce303_current+0x560>
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 3 разряда после запятой
 802466c:	8a3b      	ldrh	r3, [r7, #16]
 802466e:	3306      	adds	r3, #6
 8024670:	4a1c      	ldr	r2, [pc, #112]	; (80246e4 <ce303_current+0x510>)
 8024672:	5cd3      	ldrb	r3, [r2, r3]
 8024674:	2b29      	cmp	r3, #41	; 0x29
 8024676:	d137      	bne.n	80246e8 <ce303_current+0x514>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 8024678:	8a3b      	ldrh	r3, [r7, #16]
 802467a:	3303      	adds	r3, #3
 802467c:	4a19      	ldr	r2, [pc, #100]	; (80246e4 <ce303_current+0x510>)
 802467e:	5cd3      	ldrb	r3, [r2, r3]
 8024680:	3b30      	subs	r3, #48	; 0x30
 8024682:	b29b      	uxth	r3, r3
 8024684:	461a      	mov	r2, r3
 8024686:	0092      	lsls	r2, r2, #2
 8024688:	4413      	add	r3, r2
 802468a:	461a      	mov	r2, r3
 802468c:	0091      	lsls	r1, r2, #2
 802468e:	461a      	mov	r2, r3
 8024690:	460b      	mov	r3, r1
 8024692:	4413      	add	r3, r2
 8024694:	009b      	lsls	r3, r3, #2
 8024696:	b29a      	uxth	r2, r3
 8024698:	8a3b      	ldrh	r3, [r7, #16]
 802469a:	3304      	adds	r3, #4
 802469c:	4911      	ldr	r1, [pc, #68]	; (80246e4 <ce303_current+0x510>)
 802469e:	5ccb      	ldrb	r3, [r1, r3]
 80246a0:	3b30      	subs	r3, #48	; 0x30
 80246a2:	b29b      	uxth	r3, r3
 80246a4:	4619      	mov	r1, r3
 80246a6:	0089      	lsls	r1, r1, #2
 80246a8:	440b      	add	r3, r1
 80246aa:	005b      	lsls	r3, r3, #1
 80246ac:	b29b      	uxth	r3, r3
 80246ae:	4413      	add	r3, r2
 80246b0:	b29a      	uxth	r2, r3
 80246b2:	8a3b      	ldrh	r3, [r7, #16]
 80246b4:	3305      	adds	r3, #5
 80246b6:	490b      	ldr	r1, [pc, #44]	; (80246e4 <ce303_current+0x510>)
 80246b8:	5ccb      	ldrb	r3, [r1, r3]
 80246ba:	b29b      	uxth	r3, r3
 80246bc:	4413      	add	r3, r2
 80246be:	b29b      	uxth	r3, r3
 80246c0:	3b30      	subs	r3, #48	; 0x30
 80246c2:	82fb      	strh	r3, [r7, #22]
 80246c4:	e036      	b.n	8024734 <ce303_current+0x560>
 80246c6:	bf00      	nop
 80246c8:	20000018 	.word	0x20000018
 80246cc:	cccccccd 	.word	0xcccccccd
 80246d0:	20000865 	.word	0x20000865
 80246d4:	40021800 	.word	0x40021800
 80246d8:	20009dc4 	.word	0x20009dc4
 80246dc:	20000020 	.word	0x20000020
 80246e0:	20000040 	.word	0x20000040
 80246e4:	20009a0c 	.word	0x20009a0c
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 80246e8:	8a3b      	ldrh	r3, [r7, #16]
 80246ea:	3303      	adds	r3, #3
 80246ec:	4a9a      	ldr	r2, [pc, #616]	; (8024958 <ce303_current+0x784>)
 80246ee:	5cd3      	ldrb	r3, [r2, r3]
 80246f0:	3b30      	subs	r3, #48	; 0x30
 80246f2:	b29b      	uxth	r3, r3
 80246f4:	461a      	mov	r2, r3
 80246f6:	0092      	lsls	r2, r2, #2
 80246f8:	4413      	add	r3, r2
 80246fa:	461a      	mov	r2, r3
 80246fc:	0091      	lsls	r1, r2, #2
 80246fe:	461a      	mov	r2, r3
 8024700:	460b      	mov	r3, r1
 8024702:	4413      	add	r3, r2
 8024704:	009b      	lsls	r3, r3, #2
 8024706:	b29a      	uxth	r2, r3
 8024708:	8a3b      	ldrh	r3, [r7, #16]
 802470a:	3304      	adds	r3, #4
 802470c:	4992      	ldr	r1, [pc, #584]	; (8024958 <ce303_current+0x784>)
 802470e:	5ccb      	ldrb	r3, [r1, r3]
 8024710:	3b30      	subs	r3, #48	; 0x30
 8024712:	b29b      	uxth	r3, r3
 8024714:	4619      	mov	r1, r3
 8024716:	0089      	lsls	r1, r1, #2
 8024718:	440b      	add	r3, r1
 802471a:	005b      	lsls	r3, r3, #1
 802471c:	b29b      	uxth	r3, r3
 802471e:	4413      	add	r3, r2
 8024720:	b29a      	uxth	r2, r3
 8024722:	8a3b      	ldrh	r3, [r7, #16]
 8024724:	3305      	adds	r3, #5
 8024726:	498c      	ldr	r1, [pc, #560]	; (8024958 <ce303_current+0x784>)
 8024728:	5ccb      	ldrb	r3, [r1, r3]
 802472a:	b29b      	uxth	r3, r3
 802472c:	4413      	add	r3, r2
 802472e:	b29b      	uxth	r3, r3
 8024730:	3b30      	subs	r3, #48	; 0x30
 8024732:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8024734:	4b89      	ldr	r3, [pc, #548]	; (802495c <ce303_current+0x788>)
 8024736:	681b      	ldr	r3, [r3, #0]
 8024738:	f04f 31ff 	mov.w	r1, #4294967295
 802473c:	4618      	mov	r0, r3
 802473e:	f7f4 fdb3 	bl	80192a8 <osMutexWait>
				fm25v02_write(2*CE_303_CURRENT_A_REG, ((uint8_t)(temp>>8)) );
 8024742:	89fb      	ldrh	r3, [r7, #14]
 8024744:	0a1b      	lsrs	r3, r3, #8
 8024746:	b29b      	uxth	r3, r3
 8024748:	b2db      	uxtb	r3, r3
 802474a:	4619      	mov	r1, r3
 802474c:	f242 003e 	movw	r0, #8254	; 0x203e
 8024750:	f006 f99c 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_A_REG+1, ((uint8_t)(temp&0x00FF)) );
 8024754:	89fb      	ldrh	r3, [r7, #14]
 8024756:	b2db      	uxtb	r3, r3
 8024758:	4619      	mov	r1, r3
 802475a:	f242 003f 	movw	r0, #8255	; 0x203f
 802475e:	f006 f995 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_MIL_A_REG, ((uint8_t)(temp_mil>>8)) );
 8024762:	8afb      	ldrh	r3, [r7, #22]
 8024764:	0a1b      	lsrs	r3, r3, #8
 8024766:	b29b      	uxth	r3, r3
 8024768:	b2db      	uxtb	r3, r3
 802476a:	4619      	mov	r1, r3
 802476c:	f242 0044 	movw	r0, #8260	; 0x2044
 8024770:	f006 f98c 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_MIL_A_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 8024774:	8afb      	ldrh	r3, [r7, #22]
 8024776:	b2db      	uxtb	r3, r3
 8024778:	4619      	mov	r1, r3
 802477a:	f242 0045 	movw	r0, #8261	; 0x2045
 802477e:	f006 f985 	bl	802aa8c <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8024782:	4b76      	ldr	r3, [pc, #472]	; (802495c <ce303_current+0x788>)
 8024784:	681b      	ldr	r3, [r3, #0]
 8024786:	4618      	mov	r0, r3
 8024788:	f7f4 fddc 	bl	8019344 <osMutexRelease>
				status_registers.ce303_current_a_reg = temp;
 802478c:	4a74      	ldr	r2, [pc, #464]	; (8024960 <ce303_current+0x78c>)
 802478e:	89fb      	ldrh	r3, [r7, #14]
 8024790:	87d3      	strh	r3, [r2, #62]	; 0x3e
				status_registers.ce303_current_mil_a_reg =  temp_mil;
 8024792:	4a73      	ldr	r2, [pc, #460]	; (8024960 <ce303_current+0x78c>)
 8024794:	8afb      	ldrh	r3, [r7, #22]
 8024796:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
				current_a_state = 1;
 802479a:	2301      	movs	r3, #1
 802479c:	757b      	strb	r3, [r7, #21]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 802479e:	f000 bf33 	b.w	8025608 <ce303_current+0x1434>
			}
			else if( meter_rx_buffer[i+3] == 0x2E)
 80247a2:	8a3b      	ldrh	r3, [r7, #16]
 80247a4:	3303      	adds	r3, #3
 80247a6:	4a6c      	ldr	r2, [pc, #432]	; (8024958 <ce303_current+0x784>)
 80247a8:	5cd3      	ldrb	r3, [r2, r3]
 80247aa:	2b2e      	cmp	r3, #46	; 0x2e
 80247ac:	f040 80da 	bne.w	8024964 <ce303_current+0x790>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+2])-0x30);
 80247b0:	8a3b      	ldrh	r3, [r7, #16]
 80247b2:	3301      	adds	r3, #1
 80247b4:	4a68      	ldr	r2, [pc, #416]	; (8024958 <ce303_current+0x784>)
 80247b6:	5cd3      	ldrb	r3, [r2, r3]
 80247b8:	3b30      	subs	r3, #48	; 0x30
 80247ba:	b29b      	uxth	r3, r3
 80247bc:	461a      	mov	r2, r3
 80247be:	0092      	lsls	r2, r2, #2
 80247c0:	4413      	add	r3, r2
 80247c2:	005b      	lsls	r3, r3, #1
 80247c4:	b29a      	uxth	r2, r3
 80247c6:	8a3b      	ldrh	r3, [r7, #16]
 80247c8:	3302      	adds	r3, #2
 80247ca:	4963      	ldr	r1, [pc, #396]	; (8024958 <ce303_current+0x784>)
 80247cc:	5ccb      	ldrb	r3, [r1, r3]
 80247ce:	b29b      	uxth	r3, r3
 80247d0:	4413      	add	r3, r2
 80247d2:	b29b      	uxth	r3, r3
 80247d4:	3b30      	subs	r3, #48	; 0x30
 80247d6:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+5] == 0x29 ) // если 1 разряд после запятой
 80247d8:	8a3b      	ldrh	r3, [r7, #16]
 80247da:	3305      	adds	r3, #5
 80247dc:	4a5e      	ldr	r2, [pc, #376]	; (8024958 <ce303_current+0x784>)
 80247de:	5cd3      	ldrb	r3, [r2, r3]
 80247e0:	2b29      	cmp	r3, #41	; 0x29
 80247e2:	d110      	bne.n	8024806 <ce303_current+0x632>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+4])-0x30)*100;
 80247e4:	8a3b      	ldrh	r3, [r7, #16]
 80247e6:	3304      	adds	r3, #4
 80247e8:	4a5b      	ldr	r2, [pc, #364]	; (8024958 <ce303_current+0x784>)
 80247ea:	5cd3      	ldrb	r3, [r2, r3]
 80247ec:	3b30      	subs	r3, #48	; 0x30
 80247ee:	b29b      	uxth	r3, r3
 80247f0:	461a      	mov	r2, r3
 80247f2:	0092      	lsls	r2, r2, #2
 80247f4:	4413      	add	r3, r2
 80247f6:	461a      	mov	r2, r3
 80247f8:	0091      	lsls	r1, r2, #2
 80247fa:	461a      	mov	r2, r3
 80247fc:	460b      	mov	r3, r1
 80247fe:	4413      	add	r3, r2
 8024800:	009b      	lsls	r3, r3, #2
 8024802:	82fb      	strh	r3, [r7, #22]
 8024804:	e070      	b.n	80248e8 <ce303_current+0x714>
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 2 разряда после запятой
 8024806:	8a3b      	ldrh	r3, [r7, #16]
 8024808:	3306      	adds	r3, #6
 802480a:	4a53      	ldr	r2, [pc, #332]	; (8024958 <ce303_current+0x784>)
 802480c:	5cd3      	ldrb	r3, [r2, r3]
 802480e:	2b29      	cmp	r3, #41	; 0x29
 8024810:	d117      	bne.n	8024842 <ce303_current+0x66e>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30))*10;
 8024812:	8a3b      	ldrh	r3, [r7, #16]
 8024814:	3304      	adds	r3, #4
 8024816:	4a50      	ldr	r2, [pc, #320]	; (8024958 <ce303_current+0x784>)
 8024818:	5cd3      	ldrb	r3, [r2, r3]
 802481a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 802481e:	4613      	mov	r3, r2
 8024820:	009b      	lsls	r3, r3, #2
 8024822:	4413      	add	r3, r2
 8024824:	005b      	lsls	r3, r3, #1
 8024826:	4619      	mov	r1, r3
 8024828:	8a3b      	ldrh	r3, [r7, #16]
 802482a:	3305      	adds	r3, #5
 802482c:	4a4a      	ldr	r2, [pc, #296]	; (8024958 <ce303_current+0x784>)
 802482e:	5cd3      	ldrb	r3, [r2, r3]
 8024830:	3b30      	subs	r3, #48	; 0x30
 8024832:	440b      	add	r3, r1
 8024834:	b29b      	uxth	r3, r3
 8024836:	461a      	mov	r2, r3
 8024838:	0092      	lsls	r2, r2, #2
 802483a:	4413      	add	r3, r2
 802483c:	005b      	lsls	r3, r3, #1
 802483e:	82fb      	strh	r3, [r7, #22]
 8024840:	e052      	b.n	80248e8 <ce303_current+0x714>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 3 разряда после запятой
 8024842:	8a3b      	ldrh	r3, [r7, #16]
 8024844:	3307      	adds	r3, #7
 8024846:	4a44      	ldr	r2, [pc, #272]	; (8024958 <ce303_current+0x784>)
 8024848:	5cd3      	ldrb	r3, [r2, r3]
 802484a:	2b29      	cmp	r3, #41	; 0x29
 802484c:	d126      	bne.n	802489c <ce303_current+0x6c8>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 802484e:	8a3b      	ldrh	r3, [r7, #16]
 8024850:	3304      	adds	r3, #4
 8024852:	4a41      	ldr	r2, [pc, #260]	; (8024958 <ce303_current+0x784>)
 8024854:	5cd3      	ldrb	r3, [r2, r3]
 8024856:	3b30      	subs	r3, #48	; 0x30
 8024858:	b29b      	uxth	r3, r3
 802485a:	461a      	mov	r2, r3
 802485c:	0092      	lsls	r2, r2, #2
 802485e:	4413      	add	r3, r2
 8024860:	461a      	mov	r2, r3
 8024862:	0091      	lsls	r1, r2, #2
 8024864:	461a      	mov	r2, r3
 8024866:	460b      	mov	r3, r1
 8024868:	4413      	add	r3, r2
 802486a:	009b      	lsls	r3, r3, #2
 802486c:	b29a      	uxth	r2, r3
 802486e:	8a3b      	ldrh	r3, [r7, #16]
 8024870:	3305      	adds	r3, #5
 8024872:	4939      	ldr	r1, [pc, #228]	; (8024958 <ce303_current+0x784>)
 8024874:	5ccb      	ldrb	r3, [r1, r3]
 8024876:	3b30      	subs	r3, #48	; 0x30
 8024878:	b29b      	uxth	r3, r3
 802487a:	4619      	mov	r1, r3
 802487c:	0089      	lsls	r1, r1, #2
 802487e:	440b      	add	r3, r1
 8024880:	005b      	lsls	r3, r3, #1
 8024882:	b29b      	uxth	r3, r3
 8024884:	4413      	add	r3, r2
 8024886:	b29a      	uxth	r2, r3
 8024888:	8a3b      	ldrh	r3, [r7, #16]
 802488a:	3306      	adds	r3, #6
 802488c:	4932      	ldr	r1, [pc, #200]	; (8024958 <ce303_current+0x784>)
 802488e:	5ccb      	ldrb	r3, [r1, r3]
 8024890:	b29b      	uxth	r3, r3
 8024892:	4413      	add	r3, r2
 8024894:	b29b      	uxth	r3, r3
 8024896:	3b30      	subs	r3, #48	; 0x30
 8024898:	82fb      	strh	r3, [r7, #22]
 802489a:	e025      	b.n	80248e8 <ce303_current+0x714>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 802489c:	8a3b      	ldrh	r3, [r7, #16]
 802489e:	3304      	adds	r3, #4
 80248a0:	4a2d      	ldr	r2, [pc, #180]	; (8024958 <ce303_current+0x784>)
 80248a2:	5cd3      	ldrb	r3, [r2, r3]
 80248a4:	3b30      	subs	r3, #48	; 0x30
 80248a6:	b29b      	uxth	r3, r3
 80248a8:	461a      	mov	r2, r3
 80248aa:	0092      	lsls	r2, r2, #2
 80248ac:	4413      	add	r3, r2
 80248ae:	461a      	mov	r2, r3
 80248b0:	0091      	lsls	r1, r2, #2
 80248b2:	461a      	mov	r2, r3
 80248b4:	460b      	mov	r3, r1
 80248b6:	4413      	add	r3, r2
 80248b8:	009b      	lsls	r3, r3, #2
 80248ba:	b29a      	uxth	r2, r3
 80248bc:	8a3b      	ldrh	r3, [r7, #16]
 80248be:	3305      	adds	r3, #5
 80248c0:	4925      	ldr	r1, [pc, #148]	; (8024958 <ce303_current+0x784>)
 80248c2:	5ccb      	ldrb	r3, [r1, r3]
 80248c4:	3b30      	subs	r3, #48	; 0x30
 80248c6:	b29b      	uxth	r3, r3
 80248c8:	4619      	mov	r1, r3
 80248ca:	0089      	lsls	r1, r1, #2
 80248cc:	440b      	add	r3, r1
 80248ce:	005b      	lsls	r3, r3, #1
 80248d0:	b29b      	uxth	r3, r3
 80248d2:	4413      	add	r3, r2
 80248d4:	b29a      	uxth	r2, r3
 80248d6:	8a3b      	ldrh	r3, [r7, #16]
 80248d8:	3306      	adds	r3, #6
 80248da:	491f      	ldr	r1, [pc, #124]	; (8024958 <ce303_current+0x784>)
 80248dc:	5ccb      	ldrb	r3, [r1, r3]
 80248de:	b29b      	uxth	r3, r3
 80248e0:	4413      	add	r3, r2
 80248e2:	b29b      	uxth	r3, r3
 80248e4:	3b30      	subs	r3, #48	; 0x30
 80248e6:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 80248e8:	4b1c      	ldr	r3, [pc, #112]	; (802495c <ce303_current+0x788>)
 80248ea:	681b      	ldr	r3, [r3, #0]
 80248ec:	f04f 31ff 	mov.w	r1, #4294967295
 80248f0:	4618      	mov	r0, r3
 80248f2:	f7f4 fcd9 	bl	80192a8 <osMutexWait>
				fm25v02_write(2*CE_303_CURRENT_A_REG, ((uint8_t)(temp>>8)) );
 80248f6:	89fb      	ldrh	r3, [r7, #14]
 80248f8:	0a1b      	lsrs	r3, r3, #8
 80248fa:	b29b      	uxth	r3, r3
 80248fc:	b2db      	uxtb	r3, r3
 80248fe:	4619      	mov	r1, r3
 8024900:	f242 003e 	movw	r0, #8254	; 0x203e
 8024904:	f006 f8c2 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_A_REG+1, ((uint8_t)(temp&0x00FF)) );
 8024908:	89fb      	ldrh	r3, [r7, #14]
 802490a:	b2db      	uxtb	r3, r3
 802490c:	4619      	mov	r1, r3
 802490e:	f242 003f 	movw	r0, #8255	; 0x203f
 8024912:	f006 f8bb 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_MIL_A_REG, ((uint8_t)(temp_mil>>8)) );
 8024916:	8afb      	ldrh	r3, [r7, #22]
 8024918:	0a1b      	lsrs	r3, r3, #8
 802491a:	b29b      	uxth	r3, r3
 802491c:	b2db      	uxtb	r3, r3
 802491e:	4619      	mov	r1, r3
 8024920:	f242 0044 	movw	r0, #8260	; 0x2044
 8024924:	f006 f8b2 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_MIL_A_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 8024928:	8afb      	ldrh	r3, [r7, #22]
 802492a:	b2db      	uxtb	r3, r3
 802492c:	4619      	mov	r1, r3
 802492e:	f242 0045 	movw	r0, #8261	; 0x2045
 8024932:	f006 f8ab 	bl	802aa8c <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8024936:	4b09      	ldr	r3, [pc, #36]	; (802495c <ce303_current+0x788>)
 8024938:	681b      	ldr	r3, [r3, #0]
 802493a:	4618      	mov	r0, r3
 802493c:	f7f4 fd02 	bl	8019344 <osMutexRelease>
				status_registers.ce303_current_a_reg = temp;
 8024940:	4a07      	ldr	r2, [pc, #28]	; (8024960 <ce303_current+0x78c>)
 8024942:	89fb      	ldrh	r3, [r7, #14]
 8024944:	87d3      	strh	r3, [r2, #62]	; 0x3e
				status_registers.ce303_current_mil_a_reg = temp_mil;
 8024946:	4a06      	ldr	r2, [pc, #24]	; (8024960 <ce303_current+0x78c>)
 8024948:	8afb      	ldrh	r3, [r7, #22]
 802494a:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
				current_a_state = 1;
 802494e:	2301      	movs	r3, #1
 8024950:	757b      	strb	r3, [r7, #21]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 8024952:	f000 be59 	b.w	8025608 <ce303_current+0x1434>
 8024956:	bf00      	nop
 8024958:	20009a0c 	.word	0x20009a0c
 802495c:	20009bb8 	.word	0x20009bb8
 8024960:	2000af40 	.word	0x2000af40
			}

			else if( meter_rx_buffer[i+4] == 0x2E)
 8024964:	8a3b      	ldrh	r3, [r7, #16]
 8024966:	3304      	adds	r3, #4
 8024968:	4a9f      	ldr	r2, [pc, #636]	; (8024be8 <ce303_current+0xa14>)
 802496a:	5cd3      	ldrb	r3, [r2, r3]
 802496c:	2b2e      	cmp	r3, #46	; 0x2e
 802496e:	f040 864b 	bne.w	8025608 <ce303_current+0x1434>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+2])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+3])-0x30);
 8024972:	8a3b      	ldrh	r3, [r7, #16]
 8024974:	3301      	adds	r3, #1
 8024976:	4a9c      	ldr	r2, [pc, #624]	; (8024be8 <ce303_current+0xa14>)
 8024978:	5cd3      	ldrb	r3, [r2, r3]
 802497a:	3b30      	subs	r3, #48	; 0x30
 802497c:	b29b      	uxth	r3, r3
 802497e:	461a      	mov	r2, r3
 8024980:	0092      	lsls	r2, r2, #2
 8024982:	4413      	add	r3, r2
 8024984:	461a      	mov	r2, r3
 8024986:	0091      	lsls	r1, r2, #2
 8024988:	461a      	mov	r2, r3
 802498a:	460b      	mov	r3, r1
 802498c:	4413      	add	r3, r2
 802498e:	009b      	lsls	r3, r3, #2
 8024990:	b29a      	uxth	r2, r3
 8024992:	8a3b      	ldrh	r3, [r7, #16]
 8024994:	3302      	adds	r3, #2
 8024996:	4994      	ldr	r1, [pc, #592]	; (8024be8 <ce303_current+0xa14>)
 8024998:	5ccb      	ldrb	r3, [r1, r3]
 802499a:	3b30      	subs	r3, #48	; 0x30
 802499c:	b29b      	uxth	r3, r3
 802499e:	4619      	mov	r1, r3
 80249a0:	0089      	lsls	r1, r1, #2
 80249a2:	440b      	add	r3, r1
 80249a4:	005b      	lsls	r3, r3, #1
 80249a6:	b29b      	uxth	r3, r3
 80249a8:	4413      	add	r3, r2
 80249aa:	b29a      	uxth	r2, r3
 80249ac:	8a3b      	ldrh	r3, [r7, #16]
 80249ae:	3303      	adds	r3, #3
 80249b0:	498d      	ldr	r1, [pc, #564]	; (8024be8 <ce303_current+0xa14>)
 80249b2:	5ccb      	ldrb	r3, [r1, r3]
 80249b4:	b29b      	uxth	r3, r3
 80249b6:	4413      	add	r3, r2
 80249b8:	b29b      	uxth	r3, r3
 80249ba:	3b30      	subs	r3, #48	; 0x30
 80249bc:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+6] == 0x29 ) // если 1 разряд после запятой
 80249be:	8a3b      	ldrh	r3, [r7, #16]
 80249c0:	3306      	adds	r3, #6
 80249c2:	4a89      	ldr	r2, [pc, #548]	; (8024be8 <ce303_current+0xa14>)
 80249c4:	5cd3      	ldrb	r3, [r2, r3]
 80249c6:	2b29      	cmp	r3, #41	; 0x29
 80249c8:	d110      	bne.n	80249ec <ce303_current+0x818>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+5])-0x30)*100;
 80249ca:	8a3b      	ldrh	r3, [r7, #16]
 80249cc:	3305      	adds	r3, #5
 80249ce:	4a86      	ldr	r2, [pc, #536]	; (8024be8 <ce303_current+0xa14>)
 80249d0:	5cd3      	ldrb	r3, [r2, r3]
 80249d2:	3b30      	subs	r3, #48	; 0x30
 80249d4:	b29b      	uxth	r3, r3
 80249d6:	461a      	mov	r2, r3
 80249d8:	0092      	lsls	r2, r2, #2
 80249da:	4413      	add	r3, r2
 80249dc:	461a      	mov	r2, r3
 80249de:	0091      	lsls	r1, r2, #2
 80249e0:	461a      	mov	r2, r3
 80249e2:	460b      	mov	r3, r1
 80249e4:	4413      	add	r3, r2
 80249e6:	009b      	lsls	r3, r3, #2
 80249e8:	82fb      	strh	r3, [r7, #22]
 80249ea:	e070      	b.n	8024ace <ce303_current+0x8fa>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 2 разряда после запятой
 80249ec:	8a3b      	ldrh	r3, [r7, #16]
 80249ee:	3307      	adds	r3, #7
 80249f0:	4a7d      	ldr	r2, [pc, #500]	; (8024be8 <ce303_current+0xa14>)
 80249f2:	5cd3      	ldrb	r3, [r2, r3]
 80249f4:	2b29      	cmp	r3, #41	; 0x29
 80249f6:	d117      	bne.n	8024a28 <ce303_current+0x854>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30))*10;
 80249f8:	8a3b      	ldrh	r3, [r7, #16]
 80249fa:	3305      	adds	r3, #5
 80249fc:	4a7a      	ldr	r2, [pc, #488]	; (8024be8 <ce303_current+0xa14>)
 80249fe:	5cd3      	ldrb	r3, [r2, r3]
 8024a00:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8024a04:	4613      	mov	r3, r2
 8024a06:	009b      	lsls	r3, r3, #2
 8024a08:	4413      	add	r3, r2
 8024a0a:	005b      	lsls	r3, r3, #1
 8024a0c:	4619      	mov	r1, r3
 8024a0e:	8a3b      	ldrh	r3, [r7, #16]
 8024a10:	3306      	adds	r3, #6
 8024a12:	4a75      	ldr	r2, [pc, #468]	; (8024be8 <ce303_current+0xa14>)
 8024a14:	5cd3      	ldrb	r3, [r2, r3]
 8024a16:	3b30      	subs	r3, #48	; 0x30
 8024a18:	440b      	add	r3, r1
 8024a1a:	b29b      	uxth	r3, r3
 8024a1c:	461a      	mov	r2, r3
 8024a1e:	0092      	lsls	r2, r2, #2
 8024a20:	4413      	add	r3, r2
 8024a22:	005b      	lsls	r3, r3, #1
 8024a24:	82fb      	strh	r3, [r7, #22]
 8024a26:	e052      	b.n	8024ace <ce303_current+0x8fa>
				}
				else if( meter_rx_buffer[i+8] == 0x29 ) // если 3 разряда после запятой
 8024a28:	8a3b      	ldrh	r3, [r7, #16]
 8024a2a:	3308      	adds	r3, #8
 8024a2c:	4a6e      	ldr	r2, [pc, #440]	; (8024be8 <ce303_current+0xa14>)
 8024a2e:	5cd3      	ldrb	r3, [r2, r3]
 8024a30:	2b29      	cmp	r3, #41	; 0x29
 8024a32:	d126      	bne.n	8024a82 <ce303_current+0x8ae>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 8024a34:	8a3b      	ldrh	r3, [r7, #16]
 8024a36:	3305      	adds	r3, #5
 8024a38:	4a6b      	ldr	r2, [pc, #428]	; (8024be8 <ce303_current+0xa14>)
 8024a3a:	5cd3      	ldrb	r3, [r2, r3]
 8024a3c:	3b30      	subs	r3, #48	; 0x30
 8024a3e:	b29b      	uxth	r3, r3
 8024a40:	461a      	mov	r2, r3
 8024a42:	0092      	lsls	r2, r2, #2
 8024a44:	4413      	add	r3, r2
 8024a46:	461a      	mov	r2, r3
 8024a48:	0091      	lsls	r1, r2, #2
 8024a4a:	461a      	mov	r2, r3
 8024a4c:	460b      	mov	r3, r1
 8024a4e:	4413      	add	r3, r2
 8024a50:	009b      	lsls	r3, r3, #2
 8024a52:	b29a      	uxth	r2, r3
 8024a54:	8a3b      	ldrh	r3, [r7, #16]
 8024a56:	3306      	adds	r3, #6
 8024a58:	4963      	ldr	r1, [pc, #396]	; (8024be8 <ce303_current+0xa14>)
 8024a5a:	5ccb      	ldrb	r3, [r1, r3]
 8024a5c:	3b30      	subs	r3, #48	; 0x30
 8024a5e:	b29b      	uxth	r3, r3
 8024a60:	4619      	mov	r1, r3
 8024a62:	0089      	lsls	r1, r1, #2
 8024a64:	440b      	add	r3, r1
 8024a66:	005b      	lsls	r3, r3, #1
 8024a68:	b29b      	uxth	r3, r3
 8024a6a:	4413      	add	r3, r2
 8024a6c:	b29a      	uxth	r2, r3
 8024a6e:	8a3b      	ldrh	r3, [r7, #16]
 8024a70:	3307      	adds	r3, #7
 8024a72:	495d      	ldr	r1, [pc, #372]	; (8024be8 <ce303_current+0xa14>)
 8024a74:	5ccb      	ldrb	r3, [r1, r3]
 8024a76:	b29b      	uxth	r3, r3
 8024a78:	4413      	add	r3, r2
 8024a7a:	b29b      	uxth	r3, r3
 8024a7c:	3b30      	subs	r3, #48	; 0x30
 8024a7e:	82fb      	strh	r3, [r7, #22]
 8024a80:	e025      	b.n	8024ace <ce303_current+0x8fa>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 8024a82:	8a3b      	ldrh	r3, [r7, #16]
 8024a84:	3305      	adds	r3, #5
 8024a86:	4a58      	ldr	r2, [pc, #352]	; (8024be8 <ce303_current+0xa14>)
 8024a88:	5cd3      	ldrb	r3, [r2, r3]
 8024a8a:	3b30      	subs	r3, #48	; 0x30
 8024a8c:	b29b      	uxth	r3, r3
 8024a8e:	461a      	mov	r2, r3
 8024a90:	0092      	lsls	r2, r2, #2
 8024a92:	4413      	add	r3, r2
 8024a94:	461a      	mov	r2, r3
 8024a96:	0091      	lsls	r1, r2, #2
 8024a98:	461a      	mov	r2, r3
 8024a9a:	460b      	mov	r3, r1
 8024a9c:	4413      	add	r3, r2
 8024a9e:	009b      	lsls	r3, r3, #2
 8024aa0:	b29a      	uxth	r2, r3
 8024aa2:	8a3b      	ldrh	r3, [r7, #16]
 8024aa4:	3306      	adds	r3, #6
 8024aa6:	4950      	ldr	r1, [pc, #320]	; (8024be8 <ce303_current+0xa14>)
 8024aa8:	5ccb      	ldrb	r3, [r1, r3]
 8024aaa:	3b30      	subs	r3, #48	; 0x30
 8024aac:	b29b      	uxth	r3, r3
 8024aae:	4619      	mov	r1, r3
 8024ab0:	0089      	lsls	r1, r1, #2
 8024ab2:	440b      	add	r3, r1
 8024ab4:	005b      	lsls	r3, r3, #1
 8024ab6:	b29b      	uxth	r3, r3
 8024ab8:	4413      	add	r3, r2
 8024aba:	b29a      	uxth	r2, r3
 8024abc:	8a3b      	ldrh	r3, [r7, #16]
 8024abe:	3307      	adds	r3, #7
 8024ac0:	4949      	ldr	r1, [pc, #292]	; (8024be8 <ce303_current+0xa14>)
 8024ac2:	5ccb      	ldrb	r3, [r1, r3]
 8024ac4:	b29b      	uxth	r3, r3
 8024ac6:	4413      	add	r3, r2
 8024ac8:	b29b      	uxth	r3, r3
 8024aca:	3b30      	subs	r3, #48	; 0x30
 8024acc:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8024ace:	4b47      	ldr	r3, [pc, #284]	; (8024bec <ce303_current+0xa18>)
 8024ad0:	681b      	ldr	r3, [r3, #0]
 8024ad2:	f04f 31ff 	mov.w	r1, #4294967295
 8024ad6:	4618      	mov	r0, r3
 8024ad8:	f7f4 fbe6 	bl	80192a8 <osMutexWait>
				fm25v02_write(2*CE_303_CURRENT_A_REG, ((uint8_t)(temp>>8)) );
 8024adc:	89fb      	ldrh	r3, [r7, #14]
 8024ade:	0a1b      	lsrs	r3, r3, #8
 8024ae0:	b29b      	uxth	r3, r3
 8024ae2:	b2db      	uxtb	r3, r3
 8024ae4:	4619      	mov	r1, r3
 8024ae6:	f242 003e 	movw	r0, #8254	; 0x203e
 8024aea:	f005 ffcf 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_A_REG+1, ((uint8_t)(temp&0x00FF)) );
 8024aee:	89fb      	ldrh	r3, [r7, #14]
 8024af0:	b2db      	uxtb	r3, r3
 8024af2:	4619      	mov	r1, r3
 8024af4:	f242 003f 	movw	r0, #8255	; 0x203f
 8024af8:	f005 ffc8 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_MIL_A_REG, ((uint8_t)(temp_mil>>8)) );
 8024afc:	8afb      	ldrh	r3, [r7, #22]
 8024afe:	0a1b      	lsrs	r3, r3, #8
 8024b00:	b29b      	uxth	r3, r3
 8024b02:	b2db      	uxtb	r3, r3
 8024b04:	4619      	mov	r1, r3
 8024b06:	f242 0044 	movw	r0, #8260	; 0x2044
 8024b0a:	f005 ffbf 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_MIL_A_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 8024b0e:	8afb      	ldrh	r3, [r7, #22]
 8024b10:	b2db      	uxtb	r3, r3
 8024b12:	4619      	mov	r1, r3
 8024b14:	f242 0045 	movw	r0, #8261	; 0x2045
 8024b18:	f005 ffb8 	bl	802aa8c <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8024b1c:	4b33      	ldr	r3, [pc, #204]	; (8024bec <ce303_current+0xa18>)
 8024b1e:	681b      	ldr	r3, [r3, #0]
 8024b20:	4618      	mov	r0, r3
 8024b22:	f7f4 fc0f 	bl	8019344 <osMutexRelease>
				status_registers.ce303_current_a_reg = temp;
 8024b26:	4a32      	ldr	r2, [pc, #200]	; (8024bf0 <ce303_current+0xa1c>)
 8024b28:	89fb      	ldrh	r3, [r7, #14]
 8024b2a:	87d3      	strh	r3, [r2, #62]	; 0x3e
				status_registers.ce303_current_mil_a_reg = temp_mil;
 8024b2c:	4a30      	ldr	r2, [pc, #192]	; (8024bf0 <ce303_current+0xa1c>)
 8024b2e:	8afb      	ldrh	r3, [r7, #22]
 8024b30:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
				current_a_state = 1;
 8024b34:	2301      	movs	r3, #1
 8024b36:	757b      	strb	r3, [r7, #21]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 8024b38:	f000 bd66 	b.w	8025608 <ce303_current+0x1434>
			}
		}

		else if( (meter_rx_buffer[i] == 0x28) && (current_a_state==1) && (current_b_state==0) && (current_c_state==0) )
 8024b3c:	8a3b      	ldrh	r3, [r7, #16]
 8024b3e:	4a2a      	ldr	r2, [pc, #168]	; (8024be8 <ce303_current+0xa14>)
 8024b40:	5cd3      	ldrb	r3, [r2, r3]
 8024b42:	2b28      	cmp	r3, #40	; 0x28
 8024b44:	f040 82ae 	bne.w	80250a4 <ce303_current+0xed0>
 8024b48:	7d7b      	ldrb	r3, [r7, #21]
 8024b4a:	2b01      	cmp	r3, #1
 8024b4c:	f040 82aa 	bne.w	80250a4 <ce303_current+0xed0>
 8024b50:	7d3b      	ldrb	r3, [r7, #20]
 8024b52:	2b00      	cmp	r3, #0
 8024b54:	f040 82a6 	bne.w	80250a4 <ce303_current+0xed0>
 8024b58:	7cfb      	ldrb	r3, [r7, #19]
 8024b5a:	2b00      	cmp	r3, #0
 8024b5c:	f040 82a2 	bne.w	80250a4 <ce303_current+0xed0>
		{
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 8024b60:	8a3b      	ldrh	r3, [r7, #16]
 8024b62:	3302      	adds	r3, #2
 8024b64:	4a20      	ldr	r2, [pc, #128]	; (8024be8 <ce303_current+0xa14>)
 8024b66:	5cd3      	ldrb	r3, [r2, r3]
 8024b68:	2b2e      	cmp	r3, #46	; 0x2e
 8024b6a:	f040 80ce 	bne.w	8024d0a <ce303_current+0xb36>
			{
				temp = (uint16_t)(meter_rx_buffer[i+1]-0x30);
 8024b6e:	8a3b      	ldrh	r3, [r7, #16]
 8024b70:	3301      	adds	r3, #1
 8024b72:	4a1d      	ldr	r2, [pc, #116]	; (8024be8 <ce303_current+0xa14>)
 8024b74:	5cd3      	ldrb	r3, [r2, r3]
 8024b76:	b29b      	uxth	r3, r3
 8024b78:	3b30      	subs	r3, #48	; 0x30
 8024b7a:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+4] == 0x29 ) // если 1 разряд после запятой
 8024b7c:	8a3b      	ldrh	r3, [r7, #16]
 8024b7e:	3304      	adds	r3, #4
 8024b80:	4a19      	ldr	r2, [pc, #100]	; (8024be8 <ce303_current+0xa14>)
 8024b82:	5cd3      	ldrb	r3, [r2, r3]
 8024b84:	2b29      	cmp	r3, #41	; 0x29
 8024b86:	d110      	bne.n	8024baa <ce303_current+0x9d6>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+3])-0x30)*100;
 8024b88:	8a3b      	ldrh	r3, [r7, #16]
 8024b8a:	3303      	adds	r3, #3
 8024b8c:	4a16      	ldr	r2, [pc, #88]	; (8024be8 <ce303_current+0xa14>)
 8024b8e:	5cd3      	ldrb	r3, [r2, r3]
 8024b90:	3b30      	subs	r3, #48	; 0x30
 8024b92:	b29b      	uxth	r3, r3
 8024b94:	461a      	mov	r2, r3
 8024b96:	0092      	lsls	r2, r2, #2
 8024b98:	4413      	add	r3, r2
 8024b9a:	461a      	mov	r2, r3
 8024b9c:	0091      	lsls	r1, r2, #2
 8024b9e:	461a      	mov	r2, r3
 8024ba0:	460b      	mov	r3, r1
 8024ba2:	4413      	add	r3, r2
 8024ba4:	009b      	lsls	r3, r3, #2
 8024ba6:	82fb      	strh	r3, [r7, #22]
 8024ba8:	e077      	b.n	8024c9a <ce303_current+0xac6>
				}
				else if( meter_rx_buffer[i+5] == 0x29 ) // если 2 разряда после запятой
 8024baa:	8a3b      	ldrh	r3, [r7, #16]
 8024bac:	3305      	adds	r3, #5
 8024bae:	4a0e      	ldr	r2, [pc, #56]	; (8024be8 <ce303_current+0xa14>)
 8024bb0:	5cd3      	ldrb	r3, [r2, r3]
 8024bb2:	2b29      	cmp	r3, #41	; 0x29
 8024bb4:	d11e      	bne.n	8024bf4 <ce303_current+0xa20>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+3])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+4])-0x30))*10;
 8024bb6:	8a3b      	ldrh	r3, [r7, #16]
 8024bb8:	3303      	adds	r3, #3
 8024bba:	4a0b      	ldr	r2, [pc, #44]	; (8024be8 <ce303_current+0xa14>)
 8024bbc:	5cd3      	ldrb	r3, [r2, r3]
 8024bbe:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8024bc2:	4613      	mov	r3, r2
 8024bc4:	009b      	lsls	r3, r3, #2
 8024bc6:	4413      	add	r3, r2
 8024bc8:	005b      	lsls	r3, r3, #1
 8024bca:	4619      	mov	r1, r3
 8024bcc:	8a3b      	ldrh	r3, [r7, #16]
 8024bce:	3304      	adds	r3, #4
 8024bd0:	4a05      	ldr	r2, [pc, #20]	; (8024be8 <ce303_current+0xa14>)
 8024bd2:	5cd3      	ldrb	r3, [r2, r3]
 8024bd4:	3b30      	subs	r3, #48	; 0x30
 8024bd6:	440b      	add	r3, r1
 8024bd8:	b29b      	uxth	r3, r3
 8024bda:	461a      	mov	r2, r3
 8024bdc:	0092      	lsls	r2, r2, #2
 8024bde:	4413      	add	r3, r2
 8024be0:	005b      	lsls	r3, r3, #1
 8024be2:	82fb      	strh	r3, [r7, #22]
 8024be4:	e059      	b.n	8024c9a <ce303_current+0xac6>
 8024be6:	bf00      	nop
 8024be8:	20009a0c 	.word	0x20009a0c
 8024bec:	20009bb8 	.word	0x20009bb8
 8024bf0:	2000af40 	.word	0x2000af40
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 3 разряда после запятой
 8024bf4:	8a3b      	ldrh	r3, [r7, #16]
 8024bf6:	3306      	adds	r3, #6
 8024bf8:	4ab1      	ldr	r2, [pc, #708]	; (8024ec0 <ce303_current+0xcec>)
 8024bfa:	5cd3      	ldrb	r3, [r2, r3]
 8024bfc:	2b29      	cmp	r3, #41	; 0x29
 8024bfe:	d126      	bne.n	8024c4e <ce303_current+0xa7a>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 8024c00:	8a3b      	ldrh	r3, [r7, #16]
 8024c02:	3303      	adds	r3, #3
 8024c04:	4aae      	ldr	r2, [pc, #696]	; (8024ec0 <ce303_current+0xcec>)
 8024c06:	5cd3      	ldrb	r3, [r2, r3]
 8024c08:	3b30      	subs	r3, #48	; 0x30
 8024c0a:	b29b      	uxth	r3, r3
 8024c0c:	461a      	mov	r2, r3
 8024c0e:	0092      	lsls	r2, r2, #2
 8024c10:	4413      	add	r3, r2
 8024c12:	461a      	mov	r2, r3
 8024c14:	0091      	lsls	r1, r2, #2
 8024c16:	461a      	mov	r2, r3
 8024c18:	460b      	mov	r3, r1
 8024c1a:	4413      	add	r3, r2
 8024c1c:	009b      	lsls	r3, r3, #2
 8024c1e:	b29a      	uxth	r2, r3
 8024c20:	8a3b      	ldrh	r3, [r7, #16]
 8024c22:	3304      	adds	r3, #4
 8024c24:	49a6      	ldr	r1, [pc, #664]	; (8024ec0 <ce303_current+0xcec>)
 8024c26:	5ccb      	ldrb	r3, [r1, r3]
 8024c28:	3b30      	subs	r3, #48	; 0x30
 8024c2a:	b29b      	uxth	r3, r3
 8024c2c:	4619      	mov	r1, r3
 8024c2e:	0089      	lsls	r1, r1, #2
 8024c30:	440b      	add	r3, r1
 8024c32:	005b      	lsls	r3, r3, #1
 8024c34:	b29b      	uxth	r3, r3
 8024c36:	4413      	add	r3, r2
 8024c38:	b29a      	uxth	r2, r3
 8024c3a:	8a3b      	ldrh	r3, [r7, #16]
 8024c3c:	3305      	adds	r3, #5
 8024c3e:	49a0      	ldr	r1, [pc, #640]	; (8024ec0 <ce303_current+0xcec>)
 8024c40:	5ccb      	ldrb	r3, [r1, r3]
 8024c42:	b29b      	uxth	r3, r3
 8024c44:	4413      	add	r3, r2
 8024c46:	b29b      	uxth	r3, r3
 8024c48:	3b30      	subs	r3, #48	; 0x30
 8024c4a:	82fb      	strh	r3, [r7, #22]
 8024c4c:	e025      	b.n	8024c9a <ce303_current+0xac6>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 8024c4e:	8a3b      	ldrh	r3, [r7, #16]
 8024c50:	3303      	adds	r3, #3
 8024c52:	4a9b      	ldr	r2, [pc, #620]	; (8024ec0 <ce303_current+0xcec>)
 8024c54:	5cd3      	ldrb	r3, [r2, r3]
 8024c56:	3b30      	subs	r3, #48	; 0x30
 8024c58:	b29b      	uxth	r3, r3
 8024c5a:	461a      	mov	r2, r3
 8024c5c:	0092      	lsls	r2, r2, #2
 8024c5e:	4413      	add	r3, r2
 8024c60:	461a      	mov	r2, r3
 8024c62:	0091      	lsls	r1, r2, #2
 8024c64:	461a      	mov	r2, r3
 8024c66:	460b      	mov	r3, r1
 8024c68:	4413      	add	r3, r2
 8024c6a:	009b      	lsls	r3, r3, #2
 8024c6c:	b29a      	uxth	r2, r3
 8024c6e:	8a3b      	ldrh	r3, [r7, #16]
 8024c70:	3304      	adds	r3, #4
 8024c72:	4993      	ldr	r1, [pc, #588]	; (8024ec0 <ce303_current+0xcec>)
 8024c74:	5ccb      	ldrb	r3, [r1, r3]
 8024c76:	3b30      	subs	r3, #48	; 0x30
 8024c78:	b29b      	uxth	r3, r3
 8024c7a:	4619      	mov	r1, r3
 8024c7c:	0089      	lsls	r1, r1, #2
 8024c7e:	440b      	add	r3, r1
 8024c80:	005b      	lsls	r3, r3, #1
 8024c82:	b29b      	uxth	r3, r3
 8024c84:	4413      	add	r3, r2
 8024c86:	b29a      	uxth	r2, r3
 8024c88:	8a3b      	ldrh	r3, [r7, #16]
 8024c8a:	3305      	adds	r3, #5
 8024c8c:	498c      	ldr	r1, [pc, #560]	; (8024ec0 <ce303_current+0xcec>)
 8024c8e:	5ccb      	ldrb	r3, [r1, r3]
 8024c90:	b29b      	uxth	r3, r3
 8024c92:	4413      	add	r3, r2
 8024c94:	b29b      	uxth	r3, r3
 8024c96:	3b30      	subs	r3, #48	; 0x30
 8024c98:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8024c9a:	4b8a      	ldr	r3, [pc, #552]	; (8024ec4 <ce303_current+0xcf0>)
 8024c9c:	681b      	ldr	r3, [r3, #0]
 8024c9e:	f04f 31ff 	mov.w	r1, #4294967295
 8024ca2:	4618      	mov	r0, r3
 8024ca4:	f7f4 fb00 	bl	80192a8 <osMutexWait>
				fm25v02_write(2*CE_303_CURRENT_B_REG, ((uint8_t)(temp>>8)) );
 8024ca8:	89fb      	ldrh	r3, [r7, #14]
 8024caa:	0a1b      	lsrs	r3, r3, #8
 8024cac:	b29b      	uxth	r3, r3
 8024cae:	b2db      	uxtb	r3, r3
 8024cb0:	4619      	mov	r1, r3
 8024cb2:	f44f 5001 	mov.w	r0, #8256	; 0x2040
 8024cb6:	f005 fee9 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_B_REG+1, ((uint8_t)(temp&0x00FF)) );
 8024cba:	89fb      	ldrh	r3, [r7, #14]
 8024cbc:	b2db      	uxtb	r3, r3
 8024cbe:	4619      	mov	r1, r3
 8024cc0:	f242 0041 	movw	r0, #8257	; 0x2041
 8024cc4:	f005 fee2 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_MIL_B_REG, ((uint8_t)(temp_mil>>8)) );
 8024cc8:	8afb      	ldrh	r3, [r7, #22]
 8024cca:	0a1b      	lsrs	r3, r3, #8
 8024ccc:	b29b      	uxth	r3, r3
 8024cce:	b2db      	uxtb	r3, r3
 8024cd0:	4619      	mov	r1, r3
 8024cd2:	f242 0046 	movw	r0, #8262	; 0x2046
 8024cd6:	f005 fed9 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_MIL_B_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 8024cda:	8afb      	ldrh	r3, [r7, #22]
 8024cdc:	b2db      	uxtb	r3, r3
 8024cde:	4619      	mov	r1, r3
 8024ce0:	f242 0047 	movw	r0, #8263	; 0x2047
 8024ce4:	f005 fed2 	bl	802aa8c <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8024ce8:	4b76      	ldr	r3, [pc, #472]	; (8024ec4 <ce303_current+0xcf0>)
 8024cea:	681b      	ldr	r3, [r3, #0]
 8024cec:	4618      	mov	r0, r3
 8024cee:	f7f4 fb29 	bl	8019344 <osMutexRelease>
				status_registers.ce303_current_b_reg = temp;
 8024cf2:	4a75      	ldr	r2, [pc, #468]	; (8024ec8 <ce303_current+0xcf4>)
 8024cf4:	89fb      	ldrh	r3, [r7, #14]
 8024cf6:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
				status_registers.ce303_current_mil_b_reg =  temp_mil;
 8024cfa:	4a73      	ldr	r2, [pc, #460]	; (8024ec8 <ce303_current+0xcf4>)
 8024cfc:	8afb      	ldrh	r3, [r7, #22]
 8024cfe:	f8a2 3046 	strh.w	r3, [r2, #70]	; 0x46
				current_b_state = 1;
 8024d02:	2301      	movs	r3, #1
 8024d04:	753b      	strb	r3, [r7, #20]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 8024d06:	f000 bc81 	b.w	802560c <ce303_current+0x1438>
			}
			else if( meter_rx_buffer[i+3] == 0x2E)
 8024d0a:	8a3b      	ldrh	r3, [r7, #16]
 8024d0c:	3303      	adds	r3, #3
 8024d0e:	4a6c      	ldr	r2, [pc, #432]	; (8024ec0 <ce303_current+0xcec>)
 8024d10:	5cd3      	ldrb	r3, [r2, r3]
 8024d12:	2b2e      	cmp	r3, #46	; 0x2e
 8024d14:	f040 80da 	bne.w	8024ecc <ce303_current+0xcf8>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+2])-0x30);
 8024d18:	8a3b      	ldrh	r3, [r7, #16]
 8024d1a:	3301      	adds	r3, #1
 8024d1c:	4a68      	ldr	r2, [pc, #416]	; (8024ec0 <ce303_current+0xcec>)
 8024d1e:	5cd3      	ldrb	r3, [r2, r3]
 8024d20:	3b30      	subs	r3, #48	; 0x30
 8024d22:	b29b      	uxth	r3, r3
 8024d24:	461a      	mov	r2, r3
 8024d26:	0092      	lsls	r2, r2, #2
 8024d28:	4413      	add	r3, r2
 8024d2a:	005b      	lsls	r3, r3, #1
 8024d2c:	b29a      	uxth	r2, r3
 8024d2e:	8a3b      	ldrh	r3, [r7, #16]
 8024d30:	3302      	adds	r3, #2
 8024d32:	4963      	ldr	r1, [pc, #396]	; (8024ec0 <ce303_current+0xcec>)
 8024d34:	5ccb      	ldrb	r3, [r1, r3]
 8024d36:	b29b      	uxth	r3, r3
 8024d38:	4413      	add	r3, r2
 8024d3a:	b29b      	uxth	r3, r3
 8024d3c:	3b30      	subs	r3, #48	; 0x30
 8024d3e:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+5] == 0x29 ) // если 1 разряд после запятой
 8024d40:	8a3b      	ldrh	r3, [r7, #16]
 8024d42:	3305      	adds	r3, #5
 8024d44:	4a5e      	ldr	r2, [pc, #376]	; (8024ec0 <ce303_current+0xcec>)
 8024d46:	5cd3      	ldrb	r3, [r2, r3]
 8024d48:	2b29      	cmp	r3, #41	; 0x29
 8024d4a:	d110      	bne.n	8024d6e <ce303_current+0xb9a>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+4])-0x30)*100;
 8024d4c:	8a3b      	ldrh	r3, [r7, #16]
 8024d4e:	3304      	adds	r3, #4
 8024d50:	4a5b      	ldr	r2, [pc, #364]	; (8024ec0 <ce303_current+0xcec>)
 8024d52:	5cd3      	ldrb	r3, [r2, r3]
 8024d54:	3b30      	subs	r3, #48	; 0x30
 8024d56:	b29b      	uxth	r3, r3
 8024d58:	461a      	mov	r2, r3
 8024d5a:	0092      	lsls	r2, r2, #2
 8024d5c:	4413      	add	r3, r2
 8024d5e:	461a      	mov	r2, r3
 8024d60:	0091      	lsls	r1, r2, #2
 8024d62:	461a      	mov	r2, r3
 8024d64:	460b      	mov	r3, r1
 8024d66:	4413      	add	r3, r2
 8024d68:	009b      	lsls	r3, r3, #2
 8024d6a:	82fb      	strh	r3, [r7, #22]
 8024d6c:	e070      	b.n	8024e50 <ce303_current+0xc7c>
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 2 разряда после запятой
 8024d6e:	8a3b      	ldrh	r3, [r7, #16]
 8024d70:	3306      	adds	r3, #6
 8024d72:	4a53      	ldr	r2, [pc, #332]	; (8024ec0 <ce303_current+0xcec>)
 8024d74:	5cd3      	ldrb	r3, [r2, r3]
 8024d76:	2b29      	cmp	r3, #41	; 0x29
 8024d78:	d117      	bne.n	8024daa <ce303_current+0xbd6>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30))*10;
 8024d7a:	8a3b      	ldrh	r3, [r7, #16]
 8024d7c:	3304      	adds	r3, #4
 8024d7e:	4a50      	ldr	r2, [pc, #320]	; (8024ec0 <ce303_current+0xcec>)
 8024d80:	5cd3      	ldrb	r3, [r2, r3]
 8024d82:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8024d86:	4613      	mov	r3, r2
 8024d88:	009b      	lsls	r3, r3, #2
 8024d8a:	4413      	add	r3, r2
 8024d8c:	005b      	lsls	r3, r3, #1
 8024d8e:	4619      	mov	r1, r3
 8024d90:	8a3b      	ldrh	r3, [r7, #16]
 8024d92:	3305      	adds	r3, #5
 8024d94:	4a4a      	ldr	r2, [pc, #296]	; (8024ec0 <ce303_current+0xcec>)
 8024d96:	5cd3      	ldrb	r3, [r2, r3]
 8024d98:	3b30      	subs	r3, #48	; 0x30
 8024d9a:	440b      	add	r3, r1
 8024d9c:	b29b      	uxth	r3, r3
 8024d9e:	461a      	mov	r2, r3
 8024da0:	0092      	lsls	r2, r2, #2
 8024da2:	4413      	add	r3, r2
 8024da4:	005b      	lsls	r3, r3, #1
 8024da6:	82fb      	strh	r3, [r7, #22]
 8024da8:	e052      	b.n	8024e50 <ce303_current+0xc7c>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 3 разряда после запятой
 8024daa:	8a3b      	ldrh	r3, [r7, #16]
 8024dac:	3307      	adds	r3, #7
 8024dae:	4a44      	ldr	r2, [pc, #272]	; (8024ec0 <ce303_current+0xcec>)
 8024db0:	5cd3      	ldrb	r3, [r2, r3]
 8024db2:	2b29      	cmp	r3, #41	; 0x29
 8024db4:	d126      	bne.n	8024e04 <ce303_current+0xc30>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 8024db6:	8a3b      	ldrh	r3, [r7, #16]
 8024db8:	3304      	adds	r3, #4
 8024dba:	4a41      	ldr	r2, [pc, #260]	; (8024ec0 <ce303_current+0xcec>)
 8024dbc:	5cd3      	ldrb	r3, [r2, r3]
 8024dbe:	3b30      	subs	r3, #48	; 0x30
 8024dc0:	b29b      	uxth	r3, r3
 8024dc2:	461a      	mov	r2, r3
 8024dc4:	0092      	lsls	r2, r2, #2
 8024dc6:	4413      	add	r3, r2
 8024dc8:	461a      	mov	r2, r3
 8024dca:	0091      	lsls	r1, r2, #2
 8024dcc:	461a      	mov	r2, r3
 8024dce:	460b      	mov	r3, r1
 8024dd0:	4413      	add	r3, r2
 8024dd2:	009b      	lsls	r3, r3, #2
 8024dd4:	b29a      	uxth	r2, r3
 8024dd6:	8a3b      	ldrh	r3, [r7, #16]
 8024dd8:	3305      	adds	r3, #5
 8024dda:	4939      	ldr	r1, [pc, #228]	; (8024ec0 <ce303_current+0xcec>)
 8024ddc:	5ccb      	ldrb	r3, [r1, r3]
 8024dde:	3b30      	subs	r3, #48	; 0x30
 8024de0:	b29b      	uxth	r3, r3
 8024de2:	4619      	mov	r1, r3
 8024de4:	0089      	lsls	r1, r1, #2
 8024de6:	440b      	add	r3, r1
 8024de8:	005b      	lsls	r3, r3, #1
 8024dea:	b29b      	uxth	r3, r3
 8024dec:	4413      	add	r3, r2
 8024dee:	b29a      	uxth	r2, r3
 8024df0:	8a3b      	ldrh	r3, [r7, #16]
 8024df2:	3306      	adds	r3, #6
 8024df4:	4932      	ldr	r1, [pc, #200]	; (8024ec0 <ce303_current+0xcec>)
 8024df6:	5ccb      	ldrb	r3, [r1, r3]
 8024df8:	b29b      	uxth	r3, r3
 8024dfa:	4413      	add	r3, r2
 8024dfc:	b29b      	uxth	r3, r3
 8024dfe:	3b30      	subs	r3, #48	; 0x30
 8024e00:	82fb      	strh	r3, [r7, #22]
 8024e02:	e025      	b.n	8024e50 <ce303_current+0xc7c>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 8024e04:	8a3b      	ldrh	r3, [r7, #16]
 8024e06:	3304      	adds	r3, #4
 8024e08:	4a2d      	ldr	r2, [pc, #180]	; (8024ec0 <ce303_current+0xcec>)
 8024e0a:	5cd3      	ldrb	r3, [r2, r3]
 8024e0c:	3b30      	subs	r3, #48	; 0x30
 8024e0e:	b29b      	uxth	r3, r3
 8024e10:	461a      	mov	r2, r3
 8024e12:	0092      	lsls	r2, r2, #2
 8024e14:	4413      	add	r3, r2
 8024e16:	461a      	mov	r2, r3
 8024e18:	0091      	lsls	r1, r2, #2
 8024e1a:	461a      	mov	r2, r3
 8024e1c:	460b      	mov	r3, r1
 8024e1e:	4413      	add	r3, r2
 8024e20:	009b      	lsls	r3, r3, #2
 8024e22:	b29a      	uxth	r2, r3
 8024e24:	8a3b      	ldrh	r3, [r7, #16]
 8024e26:	3305      	adds	r3, #5
 8024e28:	4925      	ldr	r1, [pc, #148]	; (8024ec0 <ce303_current+0xcec>)
 8024e2a:	5ccb      	ldrb	r3, [r1, r3]
 8024e2c:	3b30      	subs	r3, #48	; 0x30
 8024e2e:	b29b      	uxth	r3, r3
 8024e30:	4619      	mov	r1, r3
 8024e32:	0089      	lsls	r1, r1, #2
 8024e34:	440b      	add	r3, r1
 8024e36:	005b      	lsls	r3, r3, #1
 8024e38:	b29b      	uxth	r3, r3
 8024e3a:	4413      	add	r3, r2
 8024e3c:	b29a      	uxth	r2, r3
 8024e3e:	8a3b      	ldrh	r3, [r7, #16]
 8024e40:	3306      	adds	r3, #6
 8024e42:	491f      	ldr	r1, [pc, #124]	; (8024ec0 <ce303_current+0xcec>)
 8024e44:	5ccb      	ldrb	r3, [r1, r3]
 8024e46:	b29b      	uxth	r3, r3
 8024e48:	4413      	add	r3, r2
 8024e4a:	b29b      	uxth	r3, r3
 8024e4c:	3b30      	subs	r3, #48	; 0x30
 8024e4e:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8024e50:	4b1c      	ldr	r3, [pc, #112]	; (8024ec4 <ce303_current+0xcf0>)
 8024e52:	681b      	ldr	r3, [r3, #0]
 8024e54:	f04f 31ff 	mov.w	r1, #4294967295
 8024e58:	4618      	mov	r0, r3
 8024e5a:	f7f4 fa25 	bl	80192a8 <osMutexWait>
				fm25v02_write(2*CE_303_CURRENT_B_REG, ((uint8_t)(temp>>8)) );
 8024e5e:	89fb      	ldrh	r3, [r7, #14]
 8024e60:	0a1b      	lsrs	r3, r3, #8
 8024e62:	b29b      	uxth	r3, r3
 8024e64:	b2db      	uxtb	r3, r3
 8024e66:	4619      	mov	r1, r3
 8024e68:	f44f 5001 	mov.w	r0, #8256	; 0x2040
 8024e6c:	f005 fe0e 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_B_REG+1, ((uint8_t)(temp&0x00FF)) );
 8024e70:	89fb      	ldrh	r3, [r7, #14]
 8024e72:	b2db      	uxtb	r3, r3
 8024e74:	4619      	mov	r1, r3
 8024e76:	f242 0041 	movw	r0, #8257	; 0x2041
 8024e7a:	f005 fe07 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_MIL_B_REG, ((uint8_t)(temp_mil>>8)) );
 8024e7e:	8afb      	ldrh	r3, [r7, #22]
 8024e80:	0a1b      	lsrs	r3, r3, #8
 8024e82:	b29b      	uxth	r3, r3
 8024e84:	b2db      	uxtb	r3, r3
 8024e86:	4619      	mov	r1, r3
 8024e88:	f242 0046 	movw	r0, #8262	; 0x2046
 8024e8c:	f005 fdfe 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_MIL_B_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 8024e90:	8afb      	ldrh	r3, [r7, #22]
 8024e92:	b2db      	uxtb	r3, r3
 8024e94:	4619      	mov	r1, r3
 8024e96:	f242 0047 	movw	r0, #8263	; 0x2047
 8024e9a:	f005 fdf7 	bl	802aa8c <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8024e9e:	4b09      	ldr	r3, [pc, #36]	; (8024ec4 <ce303_current+0xcf0>)
 8024ea0:	681b      	ldr	r3, [r3, #0]
 8024ea2:	4618      	mov	r0, r3
 8024ea4:	f7f4 fa4e 	bl	8019344 <osMutexRelease>
				status_registers.ce303_current_b_reg = temp;
 8024ea8:	4a07      	ldr	r2, [pc, #28]	; (8024ec8 <ce303_current+0xcf4>)
 8024eaa:	89fb      	ldrh	r3, [r7, #14]
 8024eac:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
				status_registers.ce303_current_mil_b_reg = temp_mil;
 8024eb0:	4a05      	ldr	r2, [pc, #20]	; (8024ec8 <ce303_current+0xcf4>)
 8024eb2:	8afb      	ldrh	r3, [r7, #22]
 8024eb4:	f8a2 3046 	strh.w	r3, [r2, #70]	; 0x46
				current_b_state = 1;
 8024eb8:	2301      	movs	r3, #1
 8024eba:	753b      	strb	r3, [r7, #20]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 8024ebc:	e3a6      	b.n	802560c <ce303_current+0x1438>
 8024ebe:	bf00      	nop
 8024ec0:	20009a0c 	.word	0x20009a0c
 8024ec4:	20009bb8 	.word	0x20009bb8
 8024ec8:	2000af40 	.word	0x2000af40
			}

			else if( meter_rx_buffer[i+4] == 0x2E)
 8024ecc:	8a3b      	ldrh	r3, [r7, #16]
 8024ece:	3304      	adds	r3, #4
 8024ed0:	4a9f      	ldr	r2, [pc, #636]	; (8025150 <ce303_current+0xf7c>)
 8024ed2:	5cd3      	ldrb	r3, [r2, r3]
 8024ed4:	2b2e      	cmp	r3, #46	; 0x2e
 8024ed6:	f040 8399 	bne.w	802560c <ce303_current+0x1438>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+2])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+3])-0x30);
 8024eda:	8a3b      	ldrh	r3, [r7, #16]
 8024edc:	3301      	adds	r3, #1
 8024ede:	4a9c      	ldr	r2, [pc, #624]	; (8025150 <ce303_current+0xf7c>)
 8024ee0:	5cd3      	ldrb	r3, [r2, r3]
 8024ee2:	3b30      	subs	r3, #48	; 0x30
 8024ee4:	b29b      	uxth	r3, r3
 8024ee6:	461a      	mov	r2, r3
 8024ee8:	0092      	lsls	r2, r2, #2
 8024eea:	4413      	add	r3, r2
 8024eec:	461a      	mov	r2, r3
 8024eee:	0091      	lsls	r1, r2, #2
 8024ef0:	461a      	mov	r2, r3
 8024ef2:	460b      	mov	r3, r1
 8024ef4:	4413      	add	r3, r2
 8024ef6:	009b      	lsls	r3, r3, #2
 8024ef8:	b29a      	uxth	r2, r3
 8024efa:	8a3b      	ldrh	r3, [r7, #16]
 8024efc:	3302      	adds	r3, #2
 8024efe:	4994      	ldr	r1, [pc, #592]	; (8025150 <ce303_current+0xf7c>)
 8024f00:	5ccb      	ldrb	r3, [r1, r3]
 8024f02:	3b30      	subs	r3, #48	; 0x30
 8024f04:	b29b      	uxth	r3, r3
 8024f06:	4619      	mov	r1, r3
 8024f08:	0089      	lsls	r1, r1, #2
 8024f0a:	440b      	add	r3, r1
 8024f0c:	005b      	lsls	r3, r3, #1
 8024f0e:	b29b      	uxth	r3, r3
 8024f10:	4413      	add	r3, r2
 8024f12:	b29a      	uxth	r2, r3
 8024f14:	8a3b      	ldrh	r3, [r7, #16]
 8024f16:	3303      	adds	r3, #3
 8024f18:	498d      	ldr	r1, [pc, #564]	; (8025150 <ce303_current+0xf7c>)
 8024f1a:	5ccb      	ldrb	r3, [r1, r3]
 8024f1c:	b29b      	uxth	r3, r3
 8024f1e:	4413      	add	r3, r2
 8024f20:	b29b      	uxth	r3, r3
 8024f22:	3b30      	subs	r3, #48	; 0x30
 8024f24:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+6] == 0x29 ) // если 1 разряд после запятой
 8024f26:	8a3b      	ldrh	r3, [r7, #16]
 8024f28:	3306      	adds	r3, #6
 8024f2a:	4a89      	ldr	r2, [pc, #548]	; (8025150 <ce303_current+0xf7c>)
 8024f2c:	5cd3      	ldrb	r3, [r2, r3]
 8024f2e:	2b29      	cmp	r3, #41	; 0x29
 8024f30:	d110      	bne.n	8024f54 <ce303_current+0xd80>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+5])-0x30)*100;
 8024f32:	8a3b      	ldrh	r3, [r7, #16]
 8024f34:	3305      	adds	r3, #5
 8024f36:	4a86      	ldr	r2, [pc, #536]	; (8025150 <ce303_current+0xf7c>)
 8024f38:	5cd3      	ldrb	r3, [r2, r3]
 8024f3a:	3b30      	subs	r3, #48	; 0x30
 8024f3c:	b29b      	uxth	r3, r3
 8024f3e:	461a      	mov	r2, r3
 8024f40:	0092      	lsls	r2, r2, #2
 8024f42:	4413      	add	r3, r2
 8024f44:	461a      	mov	r2, r3
 8024f46:	0091      	lsls	r1, r2, #2
 8024f48:	461a      	mov	r2, r3
 8024f4a:	460b      	mov	r3, r1
 8024f4c:	4413      	add	r3, r2
 8024f4e:	009b      	lsls	r3, r3, #2
 8024f50:	82fb      	strh	r3, [r7, #22]
 8024f52:	e070      	b.n	8025036 <ce303_current+0xe62>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 2 разряда после запятой
 8024f54:	8a3b      	ldrh	r3, [r7, #16]
 8024f56:	3307      	adds	r3, #7
 8024f58:	4a7d      	ldr	r2, [pc, #500]	; (8025150 <ce303_current+0xf7c>)
 8024f5a:	5cd3      	ldrb	r3, [r2, r3]
 8024f5c:	2b29      	cmp	r3, #41	; 0x29
 8024f5e:	d117      	bne.n	8024f90 <ce303_current+0xdbc>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30))*10;
 8024f60:	8a3b      	ldrh	r3, [r7, #16]
 8024f62:	3305      	adds	r3, #5
 8024f64:	4a7a      	ldr	r2, [pc, #488]	; (8025150 <ce303_current+0xf7c>)
 8024f66:	5cd3      	ldrb	r3, [r2, r3]
 8024f68:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8024f6c:	4613      	mov	r3, r2
 8024f6e:	009b      	lsls	r3, r3, #2
 8024f70:	4413      	add	r3, r2
 8024f72:	005b      	lsls	r3, r3, #1
 8024f74:	4619      	mov	r1, r3
 8024f76:	8a3b      	ldrh	r3, [r7, #16]
 8024f78:	3306      	adds	r3, #6
 8024f7a:	4a75      	ldr	r2, [pc, #468]	; (8025150 <ce303_current+0xf7c>)
 8024f7c:	5cd3      	ldrb	r3, [r2, r3]
 8024f7e:	3b30      	subs	r3, #48	; 0x30
 8024f80:	440b      	add	r3, r1
 8024f82:	b29b      	uxth	r3, r3
 8024f84:	461a      	mov	r2, r3
 8024f86:	0092      	lsls	r2, r2, #2
 8024f88:	4413      	add	r3, r2
 8024f8a:	005b      	lsls	r3, r3, #1
 8024f8c:	82fb      	strh	r3, [r7, #22]
 8024f8e:	e052      	b.n	8025036 <ce303_current+0xe62>
				}
				else if( meter_rx_buffer[i+8] == 0x29 ) // если 3 разряда после запятой
 8024f90:	8a3b      	ldrh	r3, [r7, #16]
 8024f92:	3308      	adds	r3, #8
 8024f94:	4a6e      	ldr	r2, [pc, #440]	; (8025150 <ce303_current+0xf7c>)
 8024f96:	5cd3      	ldrb	r3, [r2, r3]
 8024f98:	2b29      	cmp	r3, #41	; 0x29
 8024f9a:	d126      	bne.n	8024fea <ce303_current+0xe16>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 8024f9c:	8a3b      	ldrh	r3, [r7, #16]
 8024f9e:	3305      	adds	r3, #5
 8024fa0:	4a6b      	ldr	r2, [pc, #428]	; (8025150 <ce303_current+0xf7c>)
 8024fa2:	5cd3      	ldrb	r3, [r2, r3]
 8024fa4:	3b30      	subs	r3, #48	; 0x30
 8024fa6:	b29b      	uxth	r3, r3
 8024fa8:	461a      	mov	r2, r3
 8024faa:	0092      	lsls	r2, r2, #2
 8024fac:	4413      	add	r3, r2
 8024fae:	461a      	mov	r2, r3
 8024fb0:	0091      	lsls	r1, r2, #2
 8024fb2:	461a      	mov	r2, r3
 8024fb4:	460b      	mov	r3, r1
 8024fb6:	4413      	add	r3, r2
 8024fb8:	009b      	lsls	r3, r3, #2
 8024fba:	b29a      	uxth	r2, r3
 8024fbc:	8a3b      	ldrh	r3, [r7, #16]
 8024fbe:	3306      	adds	r3, #6
 8024fc0:	4963      	ldr	r1, [pc, #396]	; (8025150 <ce303_current+0xf7c>)
 8024fc2:	5ccb      	ldrb	r3, [r1, r3]
 8024fc4:	3b30      	subs	r3, #48	; 0x30
 8024fc6:	b29b      	uxth	r3, r3
 8024fc8:	4619      	mov	r1, r3
 8024fca:	0089      	lsls	r1, r1, #2
 8024fcc:	440b      	add	r3, r1
 8024fce:	005b      	lsls	r3, r3, #1
 8024fd0:	b29b      	uxth	r3, r3
 8024fd2:	4413      	add	r3, r2
 8024fd4:	b29a      	uxth	r2, r3
 8024fd6:	8a3b      	ldrh	r3, [r7, #16]
 8024fd8:	3307      	adds	r3, #7
 8024fda:	495d      	ldr	r1, [pc, #372]	; (8025150 <ce303_current+0xf7c>)
 8024fdc:	5ccb      	ldrb	r3, [r1, r3]
 8024fde:	b29b      	uxth	r3, r3
 8024fe0:	4413      	add	r3, r2
 8024fe2:	b29b      	uxth	r3, r3
 8024fe4:	3b30      	subs	r3, #48	; 0x30
 8024fe6:	82fb      	strh	r3, [r7, #22]
 8024fe8:	e025      	b.n	8025036 <ce303_current+0xe62>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 8024fea:	8a3b      	ldrh	r3, [r7, #16]
 8024fec:	3305      	adds	r3, #5
 8024fee:	4a58      	ldr	r2, [pc, #352]	; (8025150 <ce303_current+0xf7c>)
 8024ff0:	5cd3      	ldrb	r3, [r2, r3]
 8024ff2:	3b30      	subs	r3, #48	; 0x30
 8024ff4:	b29b      	uxth	r3, r3
 8024ff6:	461a      	mov	r2, r3
 8024ff8:	0092      	lsls	r2, r2, #2
 8024ffa:	4413      	add	r3, r2
 8024ffc:	461a      	mov	r2, r3
 8024ffe:	0091      	lsls	r1, r2, #2
 8025000:	461a      	mov	r2, r3
 8025002:	460b      	mov	r3, r1
 8025004:	4413      	add	r3, r2
 8025006:	009b      	lsls	r3, r3, #2
 8025008:	b29a      	uxth	r2, r3
 802500a:	8a3b      	ldrh	r3, [r7, #16]
 802500c:	3306      	adds	r3, #6
 802500e:	4950      	ldr	r1, [pc, #320]	; (8025150 <ce303_current+0xf7c>)
 8025010:	5ccb      	ldrb	r3, [r1, r3]
 8025012:	3b30      	subs	r3, #48	; 0x30
 8025014:	b29b      	uxth	r3, r3
 8025016:	4619      	mov	r1, r3
 8025018:	0089      	lsls	r1, r1, #2
 802501a:	440b      	add	r3, r1
 802501c:	005b      	lsls	r3, r3, #1
 802501e:	b29b      	uxth	r3, r3
 8025020:	4413      	add	r3, r2
 8025022:	b29a      	uxth	r2, r3
 8025024:	8a3b      	ldrh	r3, [r7, #16]
 8025026:	3307      	adds	r3, #7
 8025028:	4949      	ldr	r1, [pc, #292]	; (8025150 <ce303_current+0xf7c>)
 802502a:	5ccb      	ldrb	r3, [r1, r3]
 802502c:	b29b      	uxth	r3, r3
 802502e:	4413      	add	r3, r2
 8025030:	b29b      	uxth	r3, r3
 8025032:	3b30      	subs	r3, #48	; 0x30
 8025034:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8025036:	4b47      	ldr	r3, [pc, #284]	; (8025154 <ce303_current+0xf80>)
 8025038:	681b      	ldr	r3, [r3, #0]
 802503a:	f04f 31ff 	mov.w	r1, #4294967295
 802503e:	4618      	mov	r0, r3
 8025040:	f7f4 f932 	bl	80192a8 <osMutexWait>
				fm25v02_write(2*CE_303_CURRENT_B_REG, ((uint8_t)(temp>>8)) );
 8025044:	89fb      	ldrh	r3, [r7, #14]
 8025046:	0a1b      	lsrs	r3, r3, #8
 8025048:	b29b      	uxth	r3, r3
 802504a:	b2db      	uxtb	r3, r3
 802504c:	4619      	mov	r1, r3
 802504e:	f44f 5001 	mov.w	r0, #8256	; 0x2040
 8025052:	f005 fd1b 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_B_REG+1, ((uint8_t)(temp&0x00FF)) );
 8025056:	89fb      	ldrh	r3, [r7, #14]
 8025058:	b2db      	uxtb	r3, r3
 802505a:	4619      	mov	r1, r3
 802505c:	f242 0041 	movw	r0, #8257	; 0x2041
 8025060:	f005 fd14 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_MIL_B_REG, ((uint8_t)(temp_mil>>8)) );
 8025064:	8afb      	ldrh	r3, [r7, #22]
 8025066:	0a1b      	lsrs	r3, r3, #8
 8025068:	b29b      	uxth	r3, r3
 802506a:	b2db      	uxtb	r3, r3
 802506c:	4619      	mov	r1, r3
 802506e:	f242 0046 	movw	r0, #8262	; 0x2046
 8025072:	f005 fd0b 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_MIL_B_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 8025076:	8afb      	ldrh	r3, [r7, #22]
 8025078:	b2db      	uxtb	r3, r3
 802507a:	4619      	mov	r1, r3
 802507c:	f242 0047 	movw	r0, #8263	; 0x2047
 8025080:	f005 fd04 	bl	802aa8c <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8025084:	4b33      	ldr	r3, [pc, #204]	; (8025154 <ce303_current+0xf80>)
 8025086:	681b      	ldr	r3, [r3, #0]
 8025088:	4618      	mov	r0, r3
 802508a:	f7f4 f95b 	bl	8019344 <osMutexRelease>
				status_registers.ce303_current_b_reg = temp;
 802508e:	4a32      	ldr	r2, [pc, #200]	; (8025158 <ce303_current+0xf84>)
 8025090:	89fb      	ldrh	r3, [r7, #14]
 8025092:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
				status_registers.ce303_current_mil_b_reg = temp_mil;
 8025096:	4a30      	ldr	r2, [pc, #192]	; (8025158 <ce303_current+0xf84>)
 8025098:	8afb      	ldrh	r3, [r7, #22]
 802509a:	f8a2 3046 	strh.w	r3, [r2, #70]	; 0x46
				current_b_state = 1;
 802509e:	2301      	movs	r3, #1
 80250a0:	753b      	strb	r3, [r7, #20]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 80250a2:	e2b3      	b.n	802560c <ce303_current+0x1438>
			}
		}

		else if( (meter_rx_buffer[i] == 0x28) && (current_a_state==1) && (current_b_state==1) && (current_c_state==0) )
 80250a4:	8a3b      	ldrh	r3, [r7, #16]
 80250a6:	4a2a      	ldr	r2, [pc, #168]	; (8025150 <ce303_current+0xf7c>)
 80250a8:	5cd3      	ldrb	r3, [r2, r3]
 80250aa:	2b28      	cmp	r3, #40	; 0x28
 80250ac:	f040 82af 	bne.w	802560e <ce303_current+0x143a>
 80250b0:	7d7b      	ldrb	r3, [r7, #21]
 80250b2:	2b01      	cmp	r3, #1
 80250b4:	f040 82ab 	bne.w	802560e <ce303_current+0x143a>
 80250b8:	7d3b      	ldrb	r3, [r7, #20]
 80250ba:	2b01      	cmp	r3, #1
 80250bc:	f040 82a7 	bne.w	802560e <ce303_current+0x143a>
 80250c0:	7cfb      	ldrb	r3, [r7, #19]
 80250c2:	2b00      	cmp	r3, #0
 80250c4:	f040 82a3 	bne.w	802560e <ce303_current+0x143a>
		{
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 80250c8:	8a3b      	ldrh	r3, [r7, #16]
 80250ca:	3302      	adds	r3, #2
 80250cc:	4a20      	ldr	r2, [pc, #128]	; (8025150 <ce303_current+0xf7c>)
 80250ce:	5cd3      	ldrb	r3, [r2, r3]
 80250d0:	2b2e      	cmp	r3, #46	; 0x2e
 80250d2:	f040 80cd 	bne.w	8025270 <ce303_current+0x109c>
			{
				temp = (uint16_t)(meter_rx_buffer[i+1]-0x30);
 80250d6:	8a3b      	ldrh	r3, [r7, #16]
 80250d8:	3301      	adds	r3, #1
 80250da:	4a1d      	ldr	r2, [pc, #116]	; (8025150 <ce303_current+0xf7c>)
 80250dc:	5cd3      	ldrb	r3, [r2, r3]
 80250de:	b29b      	uxth	r3, r3
 80250e0:	3b30      	subs	r3, #48	; 0x30
 80250e2:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+4] == 0x29 ) // если 1 разряд после запятой
 80250e4:	8a3b      	ldrh	r3, [r7, #16]
 80250e6:	3304      	adds	r3, #4
 80250e8:	4a19      	ldr	r2, [pc, #100]	; (8025150 <ce303_current+0xf7c>)
 80250ea:	5cd3      	ldrb	r3, [r2, r3]
 80250ec:	2b29      	cmp	r3, #41	; 0x29
 80250ee:	d110      	bne.n	8025112 <ce303_current+0xf3e>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+3])-0x30)*100;
 80250f0:	8a3b      	ldrh	r3, [r7, #16]
 80250f2:	3303      	adds	r3, #3
 80250f4:	4a16      	ldr	r2, [pc, #88]	; (8025150 <ce303_current+0xf7c>)
 80250f6:	5cd3      	ldrb	r3, [r2, r3]
 80250f8:	3b30      	subs	r3, #48	; 0x30
 80250fa:	b29b      	uxth	r3, r3
 80250fc:	461a      	mov	r2, r3
 80250fe:	0092      	lsls	r2, r2, #2
 8025100:	4413      	add	r3, r2
 8025102:	461a      	mov	r2, r3
 8025104:	0091      	lsls	r1, r2, #2
 8025106:	461a      	mov	r2, r3
 8025108:	460b      	mov	r3, r1
 802510a:	4413      	add	r3, r2
 802510c:	009b      	lsls	r3, r3, #2
 802510e:	82fb      	strh	r3, [r7, #22]
 8025110:	e077      	b.n	8025202 <ce303_current+0x102e>
				}
				else if( meter_rx_buffer[i+5] == 0x29 ) // если 2 разряда после запятой
 8025112:	8a3b      	ldrh	r3, [r7, #16]
 8025114:	3305      	adds	r3, #5
 8025116:	4a0e      	ldr	r2, [pc, #56]	; (8025150 <ce303_current+0xf7c>)
 8025118:	5cd3      	ldrb	r3, [r2, r3]
 802511a:	2b29      	cmp	r3, #41	; 0x29
 802511c:	d11e      	bne.n	802515c <ce303_current+0xf88>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+3])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+4])-0x30))*10;
 802511e:	8a3b      	ldrh	r3, [r7, #16]
 8025120:	3303      	adds	r3, #3
 8025122:	4a0b      	ldr	r2, [pc, #44]	; (8025150 <ce303_current+0xf7c>)
 8025124:	5cd3      	ldrb	r3, [r2, r3]
 8025126:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 802512a:	4613      	mov	r3, r2
 802512c:	009b      	lsls	r3, r3, #2
 802512e:	4413      	add	r3, r2
 8025130:	005b      	lsls	r3, r3, #1
 8025132:	4619      	mov	r1, r3
 8025134:	8a3b      	ldrh	r3, [r7, #16]
 8025136:	3304      	adds	r3, #4
 8025138:	4a05      	ldr	r2, [pc, #20]	; (8025150 <ce303_current+0xf7c>)
 802513a:	5cd3      	ldrb	r3, [r2, r3]
 802513c:	3b30      	subs	r3, #48	; 0x30
 802513e:	440b      	add	r3, r1
 8025140:	b29b      	uxth	r3, r3
 8025142:	461a      	mov	r2, r3
 8025144:	0092      	lsls	r2, r2, #2
 8025146:	4413      	add	r3, r2
 8025148:	005b      	lsls	r3, r3, #1
 802514a:	82fb      	strh	r3, [r7, #22]
 802514c:	e059      	b.n	8025202 <ce303_current+0x102e>
 802514e:	bf00      	nop
 8025150:	20009a0c 	.word	0x20009a0c
 8025154:	20009bb8 	.word	0x20009bb8
 8025158:	2000af40 	.word	0x2000af40
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 3 разряда после запятой
 802515c:	8a3b      	ldrh	r3, [r7, #16]
 802515e:	3306      	adds	r3, #6
 8025160:	4ab0      	ldr	r2, [pc, #704]	; (8025424 <ce303_current+0x1250>)
 8025162:	5cd3      	ldrb	r3, [r2, r3]
 8025164:	2b29      	cmp	r3, #41	; 0x29
 8025166:	d126      	bne.n	80251b6 <ce303_current+0xfe2>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 8025168:	8a3b      	ldrh	r3, [r7, #16]
 802516a:	3303      	adds	r3, #3
 802516c:	4aad      	ldr	r2, [pc, #692]	; (8025424 <ce303_current+0x1250>)
 802516e:	5cd3      	ldrb	r3, [r2, r3]
 8025170:	3b30      	subs	r3, #48	; 0x30
 8025172:	b29b      	uxth	r3, r3
 8025174:	461a      	mov	r2, r3
 8025176:	0092      	lsls	r2, r2, #2
 8025178:	4413      	add	r3, r2
 802517a:	461a      	mov	r2, r3
 802517c:	0091      	lsls	r1, r2, #2
 802517e:	461a      	mov	r2, r3
 8025180:	460b      	mov	r3, r1
 8025182:	4413      	add	r3, r2
 8025184:	009b      	lsls	r3, r3, #2
 8025186:	b29a      	uxth	r2, r3
 8025188:	8a3b      	ldrh	r3, [r7, #16]
 802518a:	3304      	adds	r3, #4
 802518c:	49a5      	ldr	r1, [pc, #660]	; (8025424 <ce303_current+0x1250>)
 802518e:	5ccb      	ldrb	r3, [r1, r3]
 8025190:	3b30      	subs	r3, #48	; 0x30
 8025192:	b29b      	uxth	r3, r3
 8025194:	4619      	mov	r1, r3
 8025196:	0089      	lsls	r1, r1, #2
 8025198:	440b      	add	r3, r1
 802519a:	005b      	lsls	r3, r3, #1
 802519c:	b29b      	uxth	r3, r3
 802519e:	4413      	add	r3, r2
 80251a0:	b29a      	uxth	r2, r3
 80251a2:	8a3b      	ldrh	r3, [r7, #16]
 80251a4:	3305      	adds	r3, #5
 80251a6:	499f      	ldr	r1, [pc, #636]	; (8025424 <ce303_current+0x1250>)
 80251a8:	5ccb      	ldrb	r3, [r1, r3]
 80251aa:	b29b      	uxth	r3, r3
 80251ac:	4413      	add	r3, r2
 80251ae:	b29b      	uxth	r3, r3
 80251b0:	3b30      	subs	r3, #48	; 0x30
 80251b2:	82fb      	strh	r3, [r7, #22]
 80251b4:	e025      	b.n	8025202 <ce303_current+0x102e>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 80251b6:	8a3b      	ldrh	r3, [r7, #16]
 80251b8:	3303      	adds	r3, #3
 80251ba:	4a9a      	ldr	r2, [pc, #616]	; (8025424 <ce303_current+0x1250>)
 80251bc:	5cd3      	ldrb	r3, [r2, r3]
 80251be:	3b30      	subs	r3, #48	; 0x30
 80251c0:	b29b      	uxth	r3, r3
 80251c2:	461a      	mov	r2, r3
 80251c4:	0092      	lsls	r2, r2, #2
 80251c6:	4413      	add	r3, r2
 80251c8:	461a      	mov	r2, r3
 80251ca:	0091      	lsls	r1, r2, #2
 80251cc:	461a      	mov	r2, r3
 80251ce:	460b      	mov	r3, r1
 80251d0:	4413      	add	r3, r2
 80251d2:	009b      	lsls	r3, r3, #2
 80251d4:	b29a      	uxth	r2, r3
 80251d6:	8a3b      	ldrh	r3, [r7, #16]
 80251d8:	3304      	adds	r3, #4
 80251da:	4992      	ldr	r1, [pc, #584]	; (8025424 <ce303_current+0x1250>)
 80251dc:	5ccb      	ldrb	r3, [r1, r3]
 80251de:	3b30      	subs	r3, #48	; 0x30
 80251e0:	b29b      	uxth	r3, r3
 80251e2:	4619      	mov	r1, r3
 80251e4:	0089      	lsls	r1, r1, #2
 80251e6:	440b      	add	r3, r1
 80251e8:	005b      	lsls	r3, r3, #1
 80251ea:	b29b      	uxth	r3, r3
 80251ec:	4413      	add	r3, r2
 80251ee:	b29a      	uxth	r2, r3
 80251f0:	8a3b      	ldrh	r3, [r7, #16]
 80251f2:	3305      	adds	r3, #5
 80251f4:	498b      	ldr	r1, [pc, #556]	; (8025424 <ce303_current+0x1250>)
 80251f6:	5ccb      	ldrb	r3, [r1, r3]
 80251f8:	b29b      	uxth	r3, r3
 80251fa:	4413      	add	r3, r2
 80251fc:	b29b      	uxth	r3, r3
 80251fe:	3b30      	subs	r3, #48	; 0x30
 8025200:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8025202:	4b89      	ldr	r3, [pc, #548]	; (8025428 <ce303_current+0x1254>)
 8025204:	681b      	ldr	r3, [r3, #0]
 8025206:	f04f 31ff 	mov.w	r1, #4294967295
 802520a:	4618      	mov	r0, r3
 802520c:	f7f4 f84c 	bl	80192a8 <osMutexWait>
				fm25v02_write(2*CE_303_CURRENT_C_REG, ((uint8_t)(temp>>8)) );
 8025210:	89fb      	ldrh	r3, [r7, #14]
 8025212:	0a1b      	lsrs	r3, r3, #8
 8025214:	b29b      	uxth	r3, r3
 8025216:	b2db      	uxtb	r3, r3
 8025218:	4619      	mov	r1, r3
 802521a:	f242 0042 	movw	r0, #8258	; 0x2042
 802521e:	f005 fc35 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_C_REG+1, ((uint8_t)(temp&0x00FF)) );
 8025222:	89fb      	ldrh	r3, [r7, #14]
 8025224:	b2db      	uxtb	r3, r3
 8025226:	4619      	mov	r1, r3
 8025228:	f242 0043 	movw	r0, #8259	; 0x2043
 802522c:	f005 fc2e 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_MIL_C_REG, ((uint8_t)(temp_mil>>8)) );
 8025230:	8afb      	ldrh	r3, [r7, #22]
 8025232:	0a1b      	lsrs	r3, r3, #8
 8025234:	b29b      	uxth	r3, r3
 8025236:	b2db      	uxtb	r3, r3
 8025238:	4619      	mov	r1, r3
 802523a:	f242 0048 	movw	r0, #8264	; 0x2048
 802523e:	f005 fc25 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_MIL_C_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 8025242:	8afb      	ldrh	r3, [r7, #22]
 8025244:	b2db      	uxtb	r3, r3
 8025246:	4619      	mov	r1, r3
 8025248:	f242 0049 	movw	r0, #8265	; 0x2049
 802524c:	f005 fc1e 	bl	802aa8c <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8025250:	4b75      	ldr	r3, [pc, #468]	; (8025428 <ce303_current+0x1254>)
 8025252:	681b      	ldr	r3, [r3, #0]
 8025254:	4618      	mov	r0, r3
 8025256:	f7f4 f875 	bl	8019344 <osMutexRelease>
				status_registers.ce303_current_c_reg = temp;
 802525a:	4a74      	ldr	r2, [pc, #464]	; (802542c <ce303_current+0x1258>)
 802525c:	89fb      	ldrh	r3, [r7, #14]
 802525e:	f8a2 3042 	strh.w	r3, [r2, #66]	; 0x42
				status_registers.ce303_current_mil_c_reg = temp_mil;
 8025262:	4a72      	ldr	r2, [pc, #456]	; (802542c <ce303_current+0x1258>)
 8025264:	8afb      	ldrh	r3, [r7, #22]
 8025266:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
				current_c_state = 1;
 802526a:	2301      	movs	r3, #1
 802526c:	74fb      	strb	r3, [r7, #19]
 802526e:	e1ce      	b.n	802560e <ce303_current+0x143a>
			}
			else if( meter_rx_buffer[i+3] == 0x2E)
 8025270:	8a3b      	ldrh	r3, [r7, #16]
 8025272:	3303      	adds	r3, #3
 8025274:	4a6b      	ldr	r2, [pc, #428]	; (8025424 <ce303_current+0x1250>)
 8025276:	5cd3      	ldrb	r3, [r2, r3]
 8025278:	2b2e      	cmp	r3, #46	; 0x2e
 802527a:	f040 80d9 	bne.w	8025430 <ce303_current+0x125c>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+2])-0x30);
 802527e:	8a3b      	ldrh	r3, [r7, #16]
 8025280:	3301      	adds	r3, #1
 8025282:	4a68      	ldr	r2, [pc, #416]	; (8025424 <ce303_current+0x1250>)
 8025284:	5cd3      	ldrb	r3, [r2, r3]
 8025286:	3b30      	subs	r3, #48	; 0x30
 8025288:	b29b      	uxth	r3, r3
 802528a:	461a      	mov	r2, r3
 802528c:	0092      	lsls	r2, r2, #2
 802528e:	4413      	add	r3, r2
 8025290:	005b      	lsls	r3, r3, #1
 8025292:	b29a      	uxth	r2, r3
 8025294:	8a3b      	ldrh	r3, [r7, #16]
 8025296:	3302      	adds	r3, #2
 8025298:	4962      	ldr	r1, [pc, #392]	; (8025424 <ce303_current+0x1250>)
 802529a:	5ccb      	ldrb	r3, [r1, r3]
 802529c:	b29b      	uxth	r3, r3
 802529e:	4413      	add	r3, r2
 80252a0:	b29b      	uxth	r3, r3
 80252a2:	3b30      	subs	r3, #48	; 0x30
 80252a4:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+5] == 0x29 ) // если 1 разряд после запятой
 80252a6:	8a3b      	ldrh	r3, [r7, #16]
 80252a8:	3305      	adds	r3, #5
 80252aa:	4a5e      	ldr	r2, [pc, #376]	; (8025424 <ce303_current+0x1250>)
 80252ac:	5cd3      	ldrb	r3, [r2, r3]
 80252ae:	2b29      	cmp	r3, #41	; 0x29
 80252b0:	d110      	bne.n	80252d4 <ce303_current+0x1100>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+4])-0x30)*100;
 80252b2:	8a3b      	ldrh	r3, [r7, #16]
 80252b4:	3304      	adds	r3, #4
 80252b6:	4a5b      	ldr	r2, [pc, #364]	; (8025424 <ce303_current+0x1250>)
 80252b8:	5cd3      	ldrb	r3, [r2, r3]
 80252ba:	3b30      	subs	r3, #48	; 0x30
 80252bc:	b29b      	uxth	r3, r3
 80252be:	461a      	mov	r2, r3
 80252c0:	0092      	lsls	r2, r2, #2
 80252c2:	4413      	add	r3, r2
 80252c4:	461a      	mov	r2, r3
 80252c6:	0091      	lsls	r1, r2, #2
 80252c8:	461a      	mov	r2, r3
 80252ca:	460b      	mov	r3, r1
 80252cc:	4413      	add	r3, r2
 80252ce:	009b      	lsls	r3, r3, #2
 80252d0:	82fb      	strh	r3, [r7, #22]
 80252d2:	e070      	b.n	80253b6 <ce303_current+0x11e2>
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 2 разряда после запятой
 80252d4:	8a3b      	ldrh	r3, [r7, #16]
 80252d6:	3306      	adds	r3, #6
 80252d8:	4a52      	ldr	r2, [pc, #328]	; (8025424 <ce303_current+0x1250>)
 80252da:	5cd3      	ldrb	r3, [r2, r3]
 80252dc:	2b29      	cmp	r3, #41	; 0x29
 80252de:	d117      	bne.n	8025310 <ce303_current+0x113c>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30))*10;
 80252e0:	8a3b      	ldrh	r3, [r7, #16]
 80252e2:	3304      	adds	r3, #4
 80252e4:	4a4f      	ldr	r2, [pc, #316]	; (8025424 <ce303_current+0x1250>)
 80252e6:	5cd3      	ldrb	r3, [r2, r3]
 80252e8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80252ec:	4613      	mov	r3, r2
 80252ee:	009b      	lsls	r3, r3, #2
 80252f0:	4413      	add	r3, r2
 80252f2:	005b      	lsls	r3, r3, #1
 80252f4:	4619      	mov	r1, r3
 80252f6:	8a3b      	ldrh	r3, [r7, #16]
 80252f8:	3305      	adds	r3, #5
 80252fa:	4a4a      	ldr	r2, [pc, #296]	; (8025424 <ce303_current+0x1250>)
 80252fc:	5cd3      	ldrb	r3, [r2, r3]
 80252fe:	3b30      	subs	r3, #48	; 0x30
 8025300:	440b      	add	r3, r1
 8025302:	b29b      	uxth	r3, r3
 8025304:	461a      	mov	r2, r3
 8025306:	0092      	lsls	r2, r2, #2
 8025308:	4413      	add	r3, r2
 802530a:	005b      	lsls	r3, r3, #1
 802530c:	82fb      	strh	r3, [r7, #22]
 802530e:	e052      	b.n	80253b6 <ce303_current+0x11e2>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 3 разряда после запятой
 8025310:	8a3b      	ldrh	r3, [r7, #16]
 8025312:	3307      	adds	r3, #7
 8025314:	4a43      	ldr	r2, [pc, #268]	; (8025424 <ce303_current+0x1250>)
 8025316:	5cd3      	ldrb	r3, [r2, r3]
 8025318:	2b29      	cmp	r3, #41	; 0x29
 802531a:	d126      	bne.n	802536a <ce303_current+0x1196>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 802531c:	8a3b      	ldrh	r3, [r7, #16]
 802531e:	3304      	adds	r3, #4
 8025320:	4a40      	ldr	r2, [pc, #256]	; (8025424 <ce303_current+0x1250>)
 8025322:	5cd3      	ldrb	r3, [r2, r3]
 8025324:	3b30      	subs	r3, #48	; 0x30
 8025326:	b29b      	uxth	r3, r3
 8025328:	461a      	mov	r2, r3
 802532a:	0092      	lsls	r2, r2, #2
 802532c:	4413      	add	r3, r2
 802532e:	461a      	mov	r2, r3
 8025330:	0091      	lsls	r1, r2, #2
 8025332:	461a      	mov	r2, r3
 8025334:	460b      	mov	r3, r1
 8025336:	4413      	add	r3, r2
 8025338:	009b      	lsls	r3, r3, #2
 802533a:	b29a      	uxth	r2, r3
 802533c:	8a3b      	ldrh	r3, [r7, #16]
 802533e:	3305      	adds	r3, #5
 8025340:	4938      	ldr	r1, [pc, #224]	; (8025424 <ce303_current+0x1250>)
 8025342:	5ccb      	ldrb	r3, [r1, r3]
 8025344:	3b30      	subs	r3, #48	; 0x30
 8025346:	b29b      	uxth	r3, r3
 8025348:	4619      	mov	r1, r3
 802534a:	0089      	lsls	r1, r1, #2
 802534c:	440b      	add	r3, r1
 802534e:	005b      	lsls	r3, r3, #1
 8025350:	b29b      	uxth	r3, r3
 8025352:	4413      	add	r3, r2
 8025354:	b29a      	uxth	r2, r3
 8025356:	8a3b      	ldrh	r3, [r7, #16]
 8025358:	3306      	adds	r3, #6
 802535a:	4932      	ldr	r1, [pc, #200]	; (8025424 <ce303_current+0x1250>)
 802535c:	5ccb      	ldrb	r3, [r1, r3]
 802535e:	b29b      	uxth	r3, r3
 8025360:	4413      	add	r3, r2
 8025362:	b29b      	uxth	r3, r3
 8025364:	3b30      	subs	r3, #48	; 0x30
 8025366:	82fb      	strh	r3, [r7, #22]
 8025368:	e025      	b.n	80253b6 <ce303_current+0x11e2>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 802536a:	8a3b      	ldrh	r3, [r7, #16]
 802536c:	3304      	adds	r3, #4
 802536e:	4a2d      	ldr	r2, [pc, #180]	; (8025424 <ce303_current+0x1250>)
 8025370:	5cd3      	ldrb	r3, [r2, r3]
 8025372:	3b30      	subs	r3, #48	; 0x30
 8025374:	b29b      	uxth	r3, r3
 8025376:	461a      	mov	r2, r3
 8025378:	0092      	lsls	r2, r2, #2
 802537a:	4413      	add	r3, r2
 802537c:	461a      	mov	r2, r3
 802537e:	0091      	lsls	r1, r2, #2
 8025380:	461a      	mov	r2, r3
 8025382:	460b      	mov	r3, r1
 8025384:	4413      	add	r3, r2
 8025386:	009b      	lsls	r3, r3, #2
 8025388:	b29a      	uxth	r2, r3
 802538a:	8a3b      	ldrh	r3, [r7, #16]
 802538c:	3305      	adds	r3, #5
 802538e:	4925      	ldr	r1, [pc, #148]	; (8025424 <ce303_current+0x1250>)
 8025390:	5ccb      	ldrb	r3, [r1, r3]
 8025392:	3b30      	subs	r3, #48	; 0x30
 8025394:	b29b      	uxth	r3, r3
 8025396:	4619      	mov	r1, r3
 8025398:	0089      	lsls	r1, r1, #2
 802539a:	440b      	add	r3, r1
 802539c:	005b      	lsls	r3, r3, #1
 802539e:	b29b      	uxth	r3, r3
 80253a0:	4413      	add	r3, r2
 80253a2:	b29a      	uxth	r2, r3
 80253a4:	8a3b      	ldrh	r3, [r7, #16]
 80253a6:	3306      	adds	r3, #6
 80253a8:	491e      	ldr	r1, [pc, #120]	; (8025424 <ce303_current+0x1250>)
 80253aa:	5ccb      	ldrb	r3, [r1, r3]
 80253ac:	b29b      	uxth	r3, r3
 80253ae:	4413      	add	r3, r2
 80253b0:	b29b      	uxth	r3, r3
 80253b2:	3b30      	subs	r3, #48	; 0x30
 80253b4:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 80253b6:	4b1c      	ldr	r3, [pc, #112]	; (8025428 <ce303_current+0x1254>)
 80253b8:	681b      	ldr	r3, [r3, #0]
 80253ba:	f04f 31ff 	mov.w	r1, #4294967295
 80253be:	4618      	mov	r0, r3
 80253c0:	f7f3 ff72 	bl	80192a8 <osMutexWait>
				fm25v02_write(2*CE_303_CURRENT_C_REG, ((uint8_t)(temp>>8)) );
 80253c4:	89fb      	ldrh	r3, [r7, #14]
 80253c6:	0a1b      	lsrs	r3, r3, #8
 80253c8:	b29b      	uxth	r3, r3
 80253ca:	b2db      	uxtb	r3, r3
 80253cc:	4619      	mov	r1, r3
 80253ce:	f242 0042 	movw	r0, #8258	; 0x2042
 80253d2:	f005 fb5b 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_C_REG+1, ((uint8_t)(temp&0x00FF)) );
 80253d6:	89fb      	ldrh	r3, [r7, #14]
 80253d8:	b2db      	uxtb	r3, r3
 80253da:	4619      	mov	r1, r3
 80253dc:	f242 0043 	movw	r0, #8259	; 0x2043
 80253e0:	f005 fb54 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_MIL_C_REG, ((uint8_t)(temp_mil>>8)) );
 80253e4:	8afb      	ldrh	r3, [r7, #22]
 80253e6:	0a1b      	lsrs	r3, r3, #8
 80253e8:	b29b      	uxth	r3, r3
 80253ea:	b2db      	uxtb	r3, r3
 80253ec:	4619      	mov	r1, r3
 80253ee:	f242 0048 	movw	r0, #8264	; 0x2048
 80253f2:	f005 fb4b 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_MIL_C_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 80253f6:	8afb      	ldrh	r3, [r7, #22]
 80253f8:	b2db      	uxtb	r3, r3
 80253fa:	4619      	mov	r1, r3
 80253fc:	f242 0049 	movw	r0, #8265	; 0x2049
 8025400:	f005 fb44 	bl	802aa8c <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8025404:	4b08      	ldr	r3, [pc, #32]	; (8025428 <ce303_current+0x1254>)
 8025406:	681b      	ldr	r3, [r3, #0]
 8025408:	4618      	mov	r0, r3
 802540a:	f7f3 ff9b 	bl	8019344 <osMutexRelease>
				status_registers.ce303_current_c_reg = temp;
 802540e:	4a07      	ldr	r2, [pc, #28]	; (802542c <ce303_current+0x1258>)
 8025410:	89fb      	ldrh	r3, [r7, #14]
 8025412:	f8a2 3042 	strh.w	r3, [r2, #66]	; 0x42
				status_registers.ce303_current_mil_c_reg = temp_mil;
 8025416:	4a05      	ldr	r2, [pc, #20]	; (802542c <ce303_current+0x1258>)
 8025418:	8afb      	ldrh	r3, [r7, #22]
 802541a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
				current_c_state = 1;
 802541e:	2301      	movs	r3, #1
 8025420:	74fb      	strb	r3, [r7, #19]
 8025422:	e0f4      	b.n	802560e <ce303_current+0x143a>
 8025424:	20009a0c 	.word	0x20009a0c
 8025428:	20009bb8 	.word	0x20009bb8
 802542c:	2000af40 	.word	0x2000af40
			}

			else if( meter_rx_buffer[i+4] == 0x2E)
 8025430:	8a3b      	ldrh	r3, [r7, #16]
 8025432:	3304      	adds	r3, #4
 8025434:	4a85      	ldr	r2, [pc, #532]	; (802564c <ce303_current+0x1478>)
 8025436:	5cd3      	ldrb	r3, [r2, r3]
 8025438:	2b2e      	cmp	r3, #46	; 0x2e
 802543a:	f040 80e8 	bne.w	802560e <ce303_current+0x143a>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+2])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+3])-0x30);
 802543e:	8a3b      	ldrh	r3, [r7, #16]
 8025440:	3301      	adds	r3, #1
 8025442:	4a82      	ldr	r2, [pc, #520]	; (802564c <ce303_current+0x1478>)
 8025444:	5cd3      	ldrb	r3, [r2, r3]
 8025446:	3b30      	subs	r3, #48	; 0x30
 8025448:	b29b      	uxth	r3, r3
 802544a:	461a      	mov	r2, r3
 802544c:	0092      	lsls	r2, r2, #2
 802544e:	4413      	add	r3, r2
 8025450:	461a      	mov	r2, r3
 8025452:	0091      	lsls	r1, r2, #2
 8025454:	461a      	mov	r2, r3
 8025456:	460b      	mov	r3, r1
 8025458:	4413      	add	r3, r2
 802545a:	009b      	lsls	r3, r3, #2
 802545c:	b29a      	uxth	r2, r3
 802545e:	8a3b      	ldrh	r3, [r7, #16]
 8025460:	3302      	adds	r3, #2
 8025462:	497a      	ldr	r1, [pc, #488]	; (802564c <ce303_current+0x1478>)
 8025464:	5ccb      	ldrb	r3, [r1, r3]
 8025466:	3b30      	subs	r3, #48	; 0x30
 8025468:	b29b      	uxth	r3, r3
 802546a:	4619      	mov	r1, r3
 802546c:	0089      	lsls	r1, r1, #2
 802546e:	440b      	add	r3, r1
 8025470:	005b      	lsls	r3, r3, #1
 8025472:	b29b      	uxth	r3, r3
 8025474:	4413      	add	r3, r2
 8025476:	b29a      	uxth	r2, r3
 8025478:	8a3b      	ldrh	r3, [r7, #16]
 802547a:	3303      	adds	r3, #3
 802547c:	4973      	ldr	r1, [pc, #460]	; (802564c <ce303_current+0x1478>)
 802547e:	5ccb      	ldrb	r3, [r1, r3]
 8025480:	b29b      	uxth	r3, r3
 8025482:	4413      	add	r3, r2
 8025484:	b29b      	uxth	r3, r3
 8025486:	3b30      	subs	r3, #48	; 0x30
 8025488:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+6] == 0x29 ) // если 1 разряд после запятой
 802548a:	8a3b      	ldrh	r3, [r7, #16]
 802548c:	3306      	adds	r3, #6
 802548e:	4a6f      	ldr	r2, [pc, #444]	; (802564c <ce303_current+0x1478>)
 8025490:	5cd3      	ldrb	r3, [r2, r3]
 8025492:	2b29      	cmp	r3, #41	; 0x29
 8025494:	d110      	bne.n	80254b8 <ce303_current+0x12e4>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+5])-0x30)*100;
 8025496:	8a3b      	ldrh	r3, [r7, #16]
 8025498:	3305      	adds	r3, #5
 802549a:	4a6c      	ldr	r2, [pc, #432]	; (802564c <ce303_current+0x1478>)
 802549c:	5cd3      	ldrb	r3, [r2, r3]
 802549e:	3b30      	subs	r3, #48	; 0x30
 80254a0:	b29b      	uxth	r3, r3
 80254a2:	461a      	mov	r2, r3
 80254a4:	0092      	lsls	r2, r2, #2
 80254a6:	4413      	add	r3, r2
 80254a8:	461a      	mov	r2, r3
 80254aa:	0091      	lsls	r1, r2, #2
 80254ac:	461a      	mov	r2, r3
 80254ae:	460b      	mov	r3, r1
 80254b0:	4413      	add	r3, r2
 80254b2:	009b      	lsls	r3, r3, #2
 80254b4:	82fb      	strh	r3, [r7, #22]
 80254b6:	e070      	b.n	802559a <ce303_current+0x13c6>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 2 разряда после запятой
 80254b8:	8a3b      	ldrh	r3, [r7, #16]
 80254ba:	3307      	adds	r3, #7
 80254bc:	4a63      	ldr	r2, [pc, #396]	; (802564c <ce303_current+0x1478>)
 80254be:	5cd3      	ldrb	r3, [r2, r3]
 80254c0:	2b29      	cmp	r3, #41	; 0x29
 80254c2:	d117      	bne.n	80254f4 <ce303_current+0x1320>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30))*10;
 80254c4:	8a3b      	ldrh	r3, [r7, #16]
 80254c6:	3305      	adds	r3, #5
 80254c8:	4a60      	ldr	r2, [pc, #384]	; (802564c <ce303_current+0x1478>)
 80254ca:	5cd3      	ldrb	r3, [r2, r3]
 80254cc:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80254d0:	4613      	mov	r3, r2
 80254d2:	009b      	lsls	r3, r3, #2
 80254d4:	4413      	add	r3, r2
 80254d6:	005b      	lsls	r3, r3, #1
 80254d8:	4619      	mov	r1, r3
 80254da:	8a3b      	ldrh	r3, [r7, #16]
 80254dc:	3306      	adds	r3, #6
 80254de:	4a5b      	ldr	r2, [pc, #364]	; (802564c <ce303_current+0x1478>)
 80254e0:	5cd3      	ldrb	r3, [r2, r3]
 80254e2:	3b30      	subs	r3, #48	; 0x30
 80254e4:	440b      	add	r3, r1
 80254e6:	b29b      	uxth	r3, r3
 80254e8:	461a      	mov	r2, r3
 80254ea:	0092      	lsls	r2, r2, #2
 80254ec:	4413      	add	r3, r2
 80254ee:	005b      	lsls	r3, r3, #1
 80254f0:	82fb      	strh	r3, [r7, #22]
 80254f2:	e052      	b.n	802559a <ce303_current+0x13c6>
				}
				else if( meter_rx_buffer[i+8] == 0x29 ) // если 3 разряда после запятой
 80254f4:	8a3b      	ldrh	r3, [r7, #16]
 80254f6:	3308      	adds	r3, #8
 80254f8:	4a54      	ldr	r2, [pc, #336]	; (802564c <ce303_current+0x1478>)
 80254fa:	5cd3      	ldrb	r3, [r2, r3]
 80254fc:	2b29      	cmp	r3, #41	; 0x29
 80254fe:	d126      	bne.n	802554e <ce303_current+0x137a>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 8025500:	8a3b      	ldrh	r3, [r7, #16]
 8025502:	3305      	adds	r3, #5
 8025504:	4a51      	ldr	r2, [pc, #324]	; (802564c <ce303_current+0x1478>)
 8025506:	5cd3      	ldrb	r3, [r2, r3]
 8025508:	3b30      	subs	r3, #48	; 0x30
 802550a:	b29b      	uxth	r3, r3
 802550c:	461a      	mov	r2, r3
 802550e:	0092      	lsls	r2, r2, #2
 8025510:	4413      	add	r3, r2
 8025512:	461a      	mov	r2, r3
 8025514:	0091      	lsls	r1, r2, #2
 8025516:	461a      	mov	r2, r3
 8025518:	460b      	mov	r3, r1
 802551a:	4413      	add	r3, r2
 802551c:	009b      	lsls	r3, r3, #2
 802551e:	b29a      	uxth	r2, r3
 8025520:	8a3b      	ldrh	r3, [r7, #16]
 8025522:	3306      	adds	r3, #6
 8025524:	4949      	ldr	r1, [pc, #292]	; (802564c <ce303_current+0x1478>)
 8025526:	5ccb      	ldrb	r3, [r1, r3]
 8025528:	3b30      	subs	r3, #48	; 0x30
 802552a:	b29b      	uxth	r3, r3
 802552c:	4619      	mov	r1, r3
 802552e:	0089      	lsls	r1, r1, #2
 8025530:	440b      	add	r3, r1
 8025532:	005b      	lsls	r3, r3, #1
 8025534:	b29b      	uxth	r3, r3
 8025536:	4413      	add	r3, r2
 8025538:	b29a      	uxth	r2, r3
 802553a:	8a3b      	ldrh	r3, [r7, #16]
 802553c:	3307      	adds	r3, #7
 802553e:	4943      	ldr	r1, [pc, #268]	; (802564c <ce303_current+0x1478>)
 8025540:	5ccb      	ldrb	r3, [r1, r3]
 8025542:	b29b      	uxth	r3, r3
 8025544:	4413      	add	r3, r2
 8025546:	b29b      	uxth	r3, r3
 8025548:	3b30      	subs	r3, #48	; 0x30
 802554a:	82fb      	strh	r3, [r7, #22]
 802554c:	e025      	b.n	802559a <ce303_current+0x13c6>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 802554e:	8a3b      	ldrh	r3, [r7, #16]
 8025550:	3305      	adds	r3, #5
 8025552:	4a3e      	ldr	r2, [pc, #248]	; (802564c <ce303_current+0x1478>)
 8025554:	5cd3      	ldrb	r3, [r2, r3]
 8025556:	3b30      	subs	r3, #48	; 0x30
 8025558:	b29b      	uxth	r3, r3
 802555a:	461a      	mov	r2, r3
 802555c:	0092      	lsls	r2, r2, #2
 802555e:	4413      	add	r3, r2
 8025560:	461a      	mov	r2, r3
 8025562:	0091      	lsls	r1, r2, #2
 8025564:	461a      	mov	r2, r3
 8025566:	460b      	mov	r3, r1
 8025568:	4413      	add	r3, r2
 802556a:	009b      	lsls	r3, r3, #2
 802556c:	b29a      	uxth	r2, r3
 802556e:	8a3b      	ldrh	r3, [r7, #16]
 8025570:	3306      	adds	r3, #6
 8025572:	4936      	ldr	r1, [pc, #216]	; (802564c <ce303_current+0x1478>)
 8025574:	5ccb      	ldrb	r3, [r1, r3]
 8025576:	3b30      	subs	r3, #48	; 0x30
 8025578:	b29b      	uxth	r3, r3
 802557a:	4619      	mov	r1, r3
 802557c:	0089      	lsls	r1, r1, #2
 802557e:	440b      	add	r3, r1
 8025580:	005b      	lsls	r3, r3, #1
 8025582:	b29b      	uxth	r3, r3
 8025584:	4413      	add	r3, r2
 8025586:	b29a      	uxth	r2, r3
 8025588:	8a3b      	ldrh	r3, [r7, #16]
 802558a:	3307      	adds	r3, #7
 802558c:	492f      	ldr	r1, [pc, #188]	; (802564c <ce303_current+0x1478>)
 802558e:	5ccb      	ldrb	r3, [r1, r3]
 8025590:	b29b      	uxth	r3, r3
 8025592:	4413      	add	r3, r2
 8025594:	b29b      	uxth	r3, r3
 8025596:	3b30      	subs	r3, #48	; 0x30
 8025598:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 802559a:	4b2d      	ldr	r3, [pc, #180]	; (8025650 <ce303_current+0x147c>)
 802559c:	681b      	ldr	r3, [r3, #0]
 802559e:	f04f 31ff 	mov.w	r1, #4294967295
 80255a2:	4618      	mov	r0, r3
 80255a4:	f7f3 fe80 	bl	80192a8 <osMutexWait>
				fm25v02_write(2*CE_303_CURRENT_C_REG, ((uint8_t)(temp>>8)) );
 80255a8:	89fb      	ldrh	r3, [r7, #14]
 80255aa:	0a1b      	lsrs	r3, r3, #8
 80255ac:	b29b      	uxth	r3, r3
 80255ae:	b2db      	uxtb	r3, r3
 80255b0:	4619      	mov	r1, r3
 80255b2:	f242 0042 	movw	r0, #8258	; 0x2042
 80255b6:	f005 fa69 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_C_REG+1, ((uint8_t)(temp&0x00FF)) );
 80255ba:	89fb      	ldrh	r3, [r7, #14]
 80255bc:	b2db      	uxtb	r3, r3
 80255be:	4619      	mov	r1, r3
 80255c0:	f242 0043 	movw	r0, #8259	; 0x2043
 80255c4:	f005 fa62 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_MIL_C_REG, ((uint8_t)(temp_mil>>8)) );
 80255c8:	8afb      	ldrh	r3, [r7, #22]
 80255ca:	0a1b      	lsrs	r3, r3, #8
 80255cc:	b29b      	uxth	r3, r3
 80255ce:	b2db      	uxtb	r3, r3
 80255d0:	4619      	mov	r1, r3
 80255d2:	f242 0048 	movw	r0, #8264	; 0x2048
 80255d6:	f005 fa59 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_MIL_C_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 80255da:	8afb      	ldrh	r3, [r7, #22]
 80255dc:	b2db      	uxtb	r3, r3
 80255de:	4619      	mov	r1, r3
 80255e0:	f242 0049 	movw	r0, #8265	; 0x2049
 80255e4:	f005 fa52 	bl	802aa8c <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 80255e8:	4b19      	ldr	r3, [pc, #100]	; (8025650 <ce303_current+0x147c>)
 80255ea:	681b      	ldr	r3, [r3, #0]
 80255ec:	4618      	mov	r0, r3
 80255ee:	f7f3 fea9 	bl	8019344 <osMutexRelease>
				status_registers.ce303_current_c_reg = temp;
 80255f2:	4a18      	ldr	r2, [pc, #96]	; (8025654 <ce303_current+0x1480>)
 80255f4:	89fb      	ldrh	r3, [r7, #14]
 80255f6:	f8a2 3042 	strh.w	r3, [r2, #66]	; 0x42
				status_registers.ce303_current_mil_c_reg = temp_mil;
 80255fa:	4a16      	ldr	r2, [pc, #88]	; (8025654 <ce303_current+0x1480>)
 80255fc:	8afb      	ldrh	r3, [r7, #22]
 80255fe:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
				current_c_state = 1;
 8025602:	2301      	movs	r3, #1
 8025604:	74fb      	strb	r3, [r7, #19]
 8025606:	e002      	b.n	802560e <ce303_current+0x143a>
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 8025608:	bf00      	nop
 802560a:	e000      	b.n	802560e <ce303_current+0x143a>
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 802560c:	bf00      	nop
	for(uint16_t i=0; i<256; i++)
 802560e:	8a3b      	ldrh	r3, [r7, #16]
 8025610:	3301      	adds	r3, #1
 8025612:	823b      	strh	r3, [r7, #16]
 8025614:	8a3b      	ldrh	r3, [r7, #16]
 8025616:	2bff      	cmp	r3, #255	; 0xff
 8025618:	f67e afd3 	bls.w	80245c2 <ce303_current+0x3ee>
			}
		}

	}

	meter_rx_number = 0;
 802561c:	4b0e      	ldr	r3, [pc, #56]	; (8025658 <ce303_current+0x1484>)
 802561e:	2200      	movs	r2, #0
 8025620:	701a      	strb	r2, [r3, #0]
	meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 8025622:	f7fd fb71 	bl	8022d08 <meter_rx_buffer_clear>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 8025626:	2201      	movs	r2, #1
 8025628:	f44f 6180 	mov.w	r1, #1024	; 0x400
 802562c:	480b      	ldr	r0, [pc, #44]	; (802565c <ce303_current+0x1488>)
 802562e:	f7ef f92f 	bl	8014890 <HAL_GPIO_WritePin>
	HAL_UART_Transmit_DMA(&huart6, &end_buf[0], 5); // передаем команду
 8025632:	2205      	movs	r2, #5
 8025634:	490a      	ldr	r1, [pc, #40]	; (8025660 <ce303_current+0x148c>)
 8025636:	480b      	ldr	r0, [pc, #44]	; (8025664 <ce303_current+0x1490>)
 8025638:	f7f2 fbf6 	bl	8017e28 <HAL_UART_Transmit_DMA>
	HAL_Delay(1000);
 802563c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8025640:	f7ed fc42 	bl	8012ec8 <HAL_Delay>

}
 8025644:	bf00      	nop
 8025646:	3718      	adds	r7, #24
 8025648:	46bd      	mov	sp, r7
 802564a:	bd80      	pop	{r7, pc}
 802564c:	20009a0c 	.word	0x20009a0c
 8025650:	20009bb8 	.word	0x20009bb8
 8025654:	2000af40 	.word	0x2000af40
 8025658:	20000865 	.word	0x20000865
 802565c:	40021800 	.word	0x40021800
 8025660:	20000038 	.word	0x20000038
 8025664:	20009dc4 	.word	0x20009dc4

08025668 <ce303_power>:

void ce303_power (uint8_t meter_id)
{
 8025668:	b580      	push	{r7, lr}
 802566a:	b086      	sub	sp, #24
 802566c:	af00      	add	r7, sp, #0
 802566e:	4603      	mov	r3, r0
 8025670:	71fb      	strb	r3, [r7, #7]
	uint16_t temp_mil;
	uint8_t power_a_state; // переменные состояния прочтения значений мощности ( если переменная равна 0, то значение мощности не прочитано, если 1 - значение прочитанно )
	uint8_t power_b_state;
	uint8_t power_c_state;

	if( (meter_id>99)&&(meter_id<1000) )
 8025672:	79fb      	ldrb	r3, [r7, #7]
 8025674:	2b63      	cmp	r3, #99	; 0x63
 8025676:	d962      	bls.n	802573e <ce303_power+0xd6>
	{
		start_buf[0] = 0x2F;
 8025678:	4b9d      	ldr	r3, [pc, #628]	; (80258f0 <ce303_power+0x288>)
 802567a:	222f      	movs	r2, #47	; 0x2f
 802567c:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 802567e:	4b9c      	ldr	r3, [pc, #624]	; (80258f0 <ce303_power+0x288>)
 8025680:	223f      	movs	r2, #63	; 0x3f
 8025682:	705a      	strb	r2, [r3, #1]
		start_buf[2] = (meter_id/100) + 0x30;
 8025684:	79fb      	ldrb	r3, [r7, #7]
 8025686:	4a9b      	ldr	r2, [pc, #620]	; (80258f4 <ce303_power+0x28c>)
 8025688:	fba2 2303 	umull	r2, r3, r2, r3
 802568c:	095b      	lsrs	r3, r3, #5
 802568e:	b2db      	uxtb	r3, r3
 8025690:	3330      	adds	r3, #48	; 0x30
 8025692:	b2da      	uxtb	r2, r3
 8025694:	4b96      	ldr	r3, [pc, #600]	; (80258f0 <ce303_power+0x288>)
 8025696:	709a      	strb	r2, [r3, #2]
		start_buf[3] = ((meter_id - (meter_id/100)*100)/10) + 0x30;
 8025698:	79fa      	ldrb	r2, [r7, #7]
 802569a:	79fb      	ldrb	r3, [r7, #7]
 802569c:	4995      	ldr	r1, [pc, #596]	; (80258f4 <ce303_power+0x28c>)
 802569e:	fba1 1303 	umull	r1, r3, r1, r3
 80256a2:	095b      	lsrs	r3, r3, #5
 80256a4:	b2db      	uxtb	r3, r3
 80256a6:	4619      	mov	r1, r3
 80256a8:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80256ac:	fb03 f301 	mul.w	r3, r3, r1
 80256b0:	4413      	add	r3, r2
 80256b2:	4a91      	ldr	r2, [pc, #580]	; (80258f8 <ce303_power+0x290>)
 80256b4:	fb82 1203 	smull	r1, r2, r2, r3
 80256b8:	1092      	asrs	r2, r2, #2
 80256ba:	17db      	asrs	r3, r3, #31
 80256bc:	1ad3      	subs	r3, r2, r3
 80256be:	b2db      	uxtb	r3, r3
 80256c0:	3330      	adds	r3, #48	; 0x30
 80256c2:	b2da      	uxtb	r2, r3
 80256c4:	4b8a      	ldr	r3, [pc, #552]	; (80258f0 <ce303_power+0x288>)
 80256c6:	70da      	strb	r2, [r3, #3]
		start_buf[4] = ((meter_id - ((meter_id/100)*100)) - (((meter_id - ((meter_id/100)*100))/10)*10)) + 0x30 ;
 80256c8:	79fa      	ldrb	r2, [r7, #7]
 80256ca:	79fb      	ldrb	r3, [r7, #7]
 80256cc:	4989      	ldr	r1, [pc, #548]	; (80258f4 <ce303_power+0x28c>)
 80256ce:	fba1 1303 	umull	r1, r3, r1, r3
 80256d2:	095b      	lsrs	r3, r3, #5
 80256d4:	b2db      	uxtb	r3, r3
 80256d6:	4619      	mov	r1, r3
 80256d8:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80256dc:	fb03 f301 	mul.w	r3, r3, r1
 80256e0:	441a      	add	r2, r3
 80256e2:	4b85      	ldr	r3, [pc, #532]	; (80258f8 <ce303_power+0x290>)
 80256e4:	fb83 1302 	smull	r1, r3, r3, r2
 80256e8:	1099      	asrs	r1, r3, #2
 80256ea:	17d3      	asrs	r3, r2, #31
 80256ec:	1ac9      	subs	r1, r1, r3
 80256ee:	460b      	mov	r3, r1
 80256f0:	009b      	lsls	r3, r3, #2
 80256f2:	440b      	add	r3, r1
 80256f4:	005b      	lsls	r3, r3, #1
 80256f6:	1ad1      	subs	r1, r2, r3
 80256f8:	b2cb      	uxtb	r3, r1
 80256fa:	3330      	adds	r3, #48	; 0x30
 80256fc:	b2da      	uxtb	r2, r3
 80256fe:	4b7c      	ldr	r3, [pc, #496]	; (80258f0 <ce303_power+0x288>)
 8025700:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x21;
 8025702:	4b7b      	ldr	r3, [pc, #492]	; (80258f0 <ce303_power+0x288>)
 8025704:	2221      	movs	r2, #33	; 0x21
 8025706:	715a      	strb	r2, [r3, #5]
		start_buf[6] = 0x0D;
 8025708:	4b79      	ldr	r3, [pc, #484]	; (80258f0 <ce303_power+0x288>)
 802570a:	220d      	movs	r2, #13
 802570c:	719a      	strb	r2, [r3, #6]
		start_buf[7] = 0x0A;
 802570e:	4b78      	ldr	r3, [pc, #480]	; (80258f0 <ce303_power+0x288>)
 8025710:	220a      	movs	r2, #10
 8025712:	71da      	strb	r2, [r3, #7]

		meter_rx_number = 0;
 8025714:	4b79      	ldr	r3, [pc, #484]	; (80258fc <ce303_power+0x294>)
 8025716:	2200      	movs	r2, #0
 8025718:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 802571a:	f7fd faf5 	bl	8022d08 <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 802571e:	2201      	movs	r2, #1
 8025720:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8025724:	4876      	ldr	r0, [pc, #472]	; (8025900 <ce303_power+0x298>)
 8025726:	f7ef f8b3 	bl	8014890 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 8); // передаем команду
 802572a:	2208      	movs	r2, #8
 802572c:	4970      	ldr	r1, [pc, #448]	; (80258f0 <ce303_power+0x288>)
 802572e:	4875      	ldr	r0, [pc, #468]	; (8025904 <ce303_power+0x29c>)
 8025730:	f7f2 fb7a 	bl	8017e28 <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 8025734:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8025738:	f7ed fbc6 	bl	8012ec8 <HAL_Delay>
 802573c:	e072      	b.n	8025824 <ce303_power+0x1bc>

	}
	else if( (meter_id>9)&&(meter_id<100) )
 802573e:	79fb      	ldrb	r3, [r7, #7]
 8025740:	2b09      	cmp	r3, #9
 8025742:	d944      	bls.n	80257ce <ce303_power+0x166>
 8025744:	79fb      	ldrb	r3, [r7, #7]
 8025746:	2b63      	cmp	r3, #99	; 0x63
 8025748:	d841      	bhi.n	80257ce <ce303_power+0x166>
	{
		start_buf[0] = 0x2F;
 802574a:	4b69      	ldr	r3, [pc, #420]	; (80258f0 <ce303_power+0x288>)
 802574c:	222f      	movs	r2, #47	; 0x2f
 802574e:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 8025750:	4b67      	ldr	r3, [pc, #412]	; (80258f0 <ce303_power+0x288>)
 8025752:	223f      	movs	r2, #63	; 0x3f
 8025754:	705a      	strb	r2, [r3, #1]
		start_buf[2] = (meter_id/10) + 0x30;
 8025756:	79fb      	ldrb	r3, [r7, #7]
 8025758:	4a6b      	ldr	r2, [pc, #428]	; (8025908 <ce303_power+0x2a0>)
 802575a:	fba2 2303 	umull	r2, r3, r2, r3
 802575e:	08db      	lsrs	r3, r3, #3
 8025760:	b2db      	uxtb	r3, r3
 8025762:	3330      	adds	r3, #48	; 0x30
 8025764:	b2da      	uxtb	r2, r3
 8025766:	4b62      	ldr	r3, [pc, #392]	; (80258f0 <ce303_power+0x288>)
 8025768:	709a      	strb	r2, [r3, #2]
		start_buf[3] = (meter_id - ((meter_id/10)*10)) + 0x30;
 802576a:	79fb      	ldrb	r3, [r7, #7]
 802576c:	4a66      	ldr	r2, [pc, #408]	; (8025908 <ce303_power+0x2a0>)
 802576e:	fba2 2303 	umull	r2, r3, r2, r3
 8025772:	08db      	lsrs	r3, r3, #3
 8025774:	b2db      	uxtb	r3, r3
 8025776:	461a      	mov	r2, r3
 8025778:	0152      	lsls	r2, r2, #5
 802577a:	1ad2      	subs	r2, r2, r3
 802577c:	0092      	lsls	r2, r2, #2
 802577e:	1ad3      	subs	r3, r2, r3
 8025780:	005b      	lsls	r3, r3, #1
 8025782:	b2da      	uxtb	r2, r3
 8025784:	79fb      	ldrb	r3, [r7, #7]
 8025786:	4413      	add	r3, r2
 8025788:	b2db      	uxtb	r3, r3
 802578a:	3330      	adds	r3, #48	; 0x30
 802578c:	b2da      	uxtb	r2, r3
 802578e:	4b58      	ldr	r3, [pc, #352]	; (80258f0 <ce303_power+0x288>)
 8025790:	70da      	strb	r2, [r3, #3]
		start_buf[4] = 0x21;
 8025792:	4b57      	ldr	r3, [pc, #348]	; (80258f0 <ce303_power+0x288>)
 8025794:	2221      	movs	r2, #33	; 0x21
 8025796:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x0D;
 8025798:	4b55      	ldr	r3, [pc, #340]	; (80258f0 <ce303_power+0x288>)
 802579a:	220d      	movs	r2, #13
 802579c:	715a      	strb	r2, [r3, #5]
		start_buf[6] = 0x0A;
 802579e:	4b54      	ldr	r3, [pc, #336]	; (80258f0 <ce303_power+0x288>)
 80257a0:	220a      	movs	r2, #10
 80257a2:	719a      	strb	r2, [r3, #6]

		meter_rx_number = 0;
 80257a4:	4b55      	ldr	r3, [pc, #340]	; (80258fc <ce303_power+0x294>)
 80257a6:	2200      	movs	r2, #0
 80257a8:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 80257aa:	f7fd faad 	bl	8022d08 <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 80257ae:	2201      	movs	r2, #1
 80257b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80257b4:	4852      	ldr	r0, [pc, #328]	; (8025900 <ce303_power+0x298>)
 80257b6:	f7ef f86b 	bl	8014890 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 7); // передаем команду
 80257ba:	2207      	movs	r2, #7
 80257bc:	494c      	ldr	r1, [pc, #304]	; (80258f0 <ce303_power+0x288>)
 80257be:	4851      	ldr	r0, [pc, #324]	; (8025904 <ce303_power+0x29c>)
 80257c0:	f7f2 fb32 	bl	8017e28 <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 80257c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80257c8:	f7ed fb7e 	bl	8012ec8 <HAL_Delay>
 80257cc:	e02a      	b.n	8025824 <ce303_power+0x1bc>

	}
	else if( (meter_id>=0)&&(meter_id<10) )
 80257ce:	79fb      	ldrb	r3, [r7, #7]
 80257d0:	2b09      	cmp	r3, #9
 80257d2:	d827      	bhi.n	8025824 <ce303_power+0x1bc>
	{
		start_buf[0] = 0x2F;
 80257d4:	4b46      	ldr	r3, [pc, #280]	; (80258f0 <ce303_power+0x288>)
 80257d6:	222f      	movs	r2, #47	; 0x2f
 80257d8:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 80257da:	4b45      	ldr	r3, [pc, #276]	; (80258f0 <ce303_power+0x288>)
 80257dc:	223f      	movs	r2, #63	; 0x3f
 80257de:	705a      	strb	r2, [r3, #1]
		start_buf[2] = meter_id + 0x30;
 80257e0:	79fb      	ldrb	r3, [r7, #7]
 80257e2:	3330      	adds	r3, #48	; 0x30
 80257e4:	b2da      	uxtb	r2, r3
 80257e6:	4b42      	ldr	r3, [pc, #264]	; (80258f0 <ce303_power+0x288>)
 80257e8:	709a      	strb	r2, [r3, #2]
		start_buf[3] = 0x21;
 80257ea:	4b41      	ldr	r3, [pc, #260]	; (80258f0 <ce303_power+0x288>)
 80257ec:	2221      	movs	r2, #33	; 0x21
 80257ee:	70da      	strb	r2, [r3, #3]
		start_buf[4] = 0x0D;
 80257f0:	4b3f      	ldr	r3, [pc, #252]	; (80258f0 <ce303_power+0x288>)
 80257f2:	220d      	movs	r2, #13
 80257f4:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x0A;
 80257f6:	4b3e      	ldr	r3, [pc, #248]	; (80258f0 <ce303_power+0x288>)
 80257f8:	220a      	movs	r2, #10
 80257fa:	715a      	strb	r2, [r3, #5]

		meter_rx_number = 0;
 80257fc:	4b3f      	ldr	r3, [pc, #252]	; (80258fc <ce303_power+0x294>)
 80257fe:	2200      	movs	r2, #0
 8025800:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 8025802:	f7fd fa81 	bl	8022d08 <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 8025806:	2201      	movs	r2, #1
 8025808:	f44f 6180 	mov.w	r1, #1024	; 0x400
 802580c:	483c      	ldr	r0, [pc, #240]	; (8025900 <ce303_power+0x298>)
 802580e:	f7ef f83f 	bl	8014890 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 6); // передаем команду
 8025812:	2206      	movs	r2, #6
 8025814:	4936      	ldr	r1, [pc, #216]	; (80258f0 <ce303_power+0x288>)
 8025816:	483b      	ldr	r0, [pc, #236]	; (8025904 <ce303_power+0x29c>)
 8025818:	f7f2 fb06 	bl	8017e28 <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 802581c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8025820:	f7ed fb52 	bl	8012ec8 <HAL_Delay>
	}


	if( (meter_id>99)&&(meter_id<1000) )
 8025824:	79fb      	ldrb	r3, [r7, #7]
 8025826:	2b63      	cmp	r3, #99	; 0x63
 8025828:	d970      	bls.n	802590c <ce303_power+0x2a4>
	{
		start_buf[0] = 0x2F;
 802582a:	4b31      	ldr	r3, [pc, #196]	; (80258f0 <ce303_power+0x288>)
 802582c:	222f      	movs	r2, #47	; 0x2f
 802582e:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 8025830:	4b2f      	ldr	r3, [pc, #188]	; (80258f0 <ce303_power+0x288>)
 8025832:	223f      	movs	r2, #63	; 0x3f
 8025834:	705a      	strb	r2, [r3, #1]
		start_buf[2] = (meter_id/100) + 0x30;
 8025836:	79fb      	ldrb	r3, [r7, #7]
 8025838:	4a2e      	ldr	r2, [pc, #184]	; (80258f4 <ce303_power+0x28c>)
 802583a:	fba2 2303 	umull	r2, r3, r2, r3
 802583e:	095b      	lsrs	r3, r3, #5
 8025840:	b2db      	uxtb	r3, r3
 8025842:	3330      	adds	r3, #48	; 0x30
 8025844:	b2da      	uxtb	r2, r3
 8025846:	4b2a      	ldr	r3, [pc, #168]	; (80258f0 <ce303_power+0x288>)
 8025848:	709a      	strb	r2, [r3, #2]
		start_buf[3] = ((meter_id - (meter_id/100)*100)/10) + 0x30;
 802584a:	79fa      	ldrb	r2, [r7, #7]
 802584c:	79fb      	ldrb	r3, [r7, #7]
 802584e:	4929      	ldr	r1, [pc, #164]	; (80258f4 <ce303_power+0x28c>)
 8025850:	fba1 1303 	umull	r1, r3, r1, r3
 8025854:	095b      	lsrs	r3, r3, #5
 8025856:	b2db      	uxtb	r3, r3
 8025858:	4619      	mov	r1, r3
 802585a:	f06f 0363 	mvn.w	r3, #99	; 0x63
 802585e:	fb03 f301 	mul.w	r3, r3, r1
 8025862:	4413      	add	r3, r2
 8025864:	4a24      	ldr	r2, [pc, #144]	; (80258f8 <ce303_power+0x290>)
 8025866:	fb82 1203 	smull	r1, r2, r2, r3
 802586a:	1092      	asrs	r2, r2, #2
 802586c:	17db      	asrs	r3, r3, #31
 802586e:	1ad3      	subs	r3, r2, r3
 8025870:	b2db      	uxtb	r3, r3
 8025872:	3330      	adds	r3, #48	; 0x30
 8025874:	b2da      	uxtb	r2, r3
 8025876:	4b1e      	ldr	r3, [pc, #120]	; (80258f0 <ce303_power+0x288>)
 8025878:	70da      	strb	r2, [r3, #3]
		start_buf[4] = ((meter_id - ((meter_id/100)*100)) - (((meter_id - ((meter_id/100)*100))/10)*10)) + 0x30 ;
 802587a:	79fa      	ldrb	r2, [r7, #7]
 802587c:	79fb      	ldrb	r3, [r7, #7]
 802587e:	491d      	ldr	r1, [pc, #116]	; (80258f4 <ce303_power+0x28c>)
 8025880:	fba1 1303 	umull	r1, r3, r1, r3
 8025884:	095b      	lsrs	r3, r3, #5
 8025886:	b2db      	uxtb	r3, r3
 8025888:	4619      	mov	r1, r3
 802588a:	f06f 0363 	mvn.w	r3, #99	; 0x63
 802588e:	fb03 f301 	mul.w	r3, r3, r1
 8025892:	441a      	add	r2, r3
 8025894:	4b18      	ldr	r3, [pc, #96]	; (80258f8 <ce303_power+0x290>)
 8025896:	fb83 1302 	smull	r1, r3, r3, r2
 802589a:	1099      	asrs	r1, r3, #2
 802589c:	17d3      	asrs	r3, r2, #31
 802589e:	1ac9      	subs	r1, r1, r3
 80258a0:	460b      	mov	r3, r1
 80258a2:	009b      	lsls	r3, r3, #2
 80258a4:	440b      	add	r3, r1
 80258a6:	005b      	lsls	r3, r3, #1
 80258a8:	1ad1      	subs	r1, r2, r3
 80258aa:	b2cb      	uxtb	r3, r1
 80258ac:	3330      	adds	r3, #48	; 0x30
 80258ae:	b2da      	uxtb	r2, r3
 80258b0:	4b0f      	ldr	r3, [pc, #60]	; (80258f0 <ce303_power+0x288>)
 80258b2:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x21;
 80258b4:	4b0e      	ldr	r3, [pc, #56]	; (80258f0 <ce303_power+0x288>)
 80258b6:	2221      	movs	r2, #33	; 0x21
 80258b8:	715a      	strb	r2, [r3, #5]
		start_buf[6] = 0x0D;
 80258ba:	4b0d      	ldr	r3, [pc, #52]	; (80258f0 <ce303_power+0x288>)
 80258bc:	220d      	movs	r2, #13
 80258be:	719a      	strb	r2, [r3, #6]
		start_buf[7] = 0x0A;
 80258c0:	4b0b      	ldr	r3, [pc, #44]	; (80258f0 <ce303_power+0x288>)
 80258c2:	220a      	movs	r2, #10
 80258c4:	71da      	strb	r2, [r3, #7]

		meter_rx_number = 0;
 80258c6:	4b0d      	ldr	r3, [pc, #52]	; (80258fc <ce303_power+0x294>)
 80258c8:	2200      	movs	r2, #0
 80258ca:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 80258cc:	f7fd fa1c 	bl	8022d08 <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 80258d0:	2201      	movs	r2, #1
 80258d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80258d6:	480a      	ldr	r0, [pc, #40]	; (8025900 <ce303_power+0x298>)
 80258d8:	f7ee ffda 	bl	8014890 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 8); // передаем команду
 80258dc:	2208      	movs	r2, #8
 80258de:	4904      	ldr	r1, [pc, #16]	; (80258f0 <ce303_power+0x288>)
 80258e0:	4808      	ldr	r0, [pc, #32]	; (8025904 <ce303_power+0x29c>)
 80258e2:	f7f2 faa1 	bl	8017e28 <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 80258e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80258ea:	f7ed faed 	bl	8012ec8 <HAL_Delay>
 80258ee:	e080      	b.n	80259f2 <ce303_power+0x38a>
 80258f0:	20000018 	.word	0x20000018
 80258f4:	51eb851f 	.word	0x51eb851f
 80258f8:	66666667 	.word	0x66666667
 80258fc:	20000865 	.word	0x20000865
 8025900:	40021800 	.word	0x40021800
 8025904:	20009dc4 	.word	0x20009dc4
 8025908:	cccccccd 	.word	0xcccccccd

	}
	else if( (meter_id>9)&&(meter_id<100) )
 802590c:	79fb      	ldrb	r3, [r7, #7]
 802590e:	2b09      	cmp	r3, #9
 8025910:	d944      	bls.n	802599c <ce303_power+0x334>
 8025912:	79fb      	ldrb	r3, [r7, #7]
 8025914:	2b63      	cmp	r3, #99	; 0x63
 8025916:	d841      	bhi.n	802599c <ce303_power+0x334>
	{
		start_buf[0] = 0x2F;
 8025918:	4b90      	ldr	r3, [pc, #576]	; (8025b5c <ce303_power+0x4f4>)
 802591a:	222f      	movs	r2, #47	; 0x2f
 802591c:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 802591e:	4b8f      	ldr	r3, [pc, #572]	; (8025b5c <ce303_power+0x4f4>)
 8025920:	223f      	movs	r2, #63	; 0x3f
 8025922:	705a      	strb	r2, [r3, #1]
		start_buf[2] = (meter_id/10) + 0x30;
 8025924:	79fb      	ldrb	r3, [r7, #7]
 8025926:	4a8e      	ldr	r2, [pc, #568]	; (8025b60 <ce303_power+0x4f8>)
 8025928:	fba2 2303 	umull	r2, r3, r2, r3
 802592c:	08db      	lsrs	r3, r3, #3
 802592e:	b2db      	uxtb	r3, r3
 8025930:	3330      	adds	r3, #48	; 0x30
 8025932:	b2da      	uxtb	r2, r3
 8025934:	4b89      	ldr	r3, [pc, #548]	; (8025b5c <ce303_power+0x4f4>)
 8025936:	709a      	strb	r2, [r3, #2]
		start_buf[3] = (meter_id - ((meter_id/10)*10)) + 0x30;
 8025938:	79fb      	ldrb	r3, [r7, #7]
 802593a:	4a89      	ldr	r2, [pc, #548]	; (8025b60 <ce303_power+0x4f8>)
 802593c:	fba2 2303 	umull	r2, r3, r2, r3
 8025940:	08db      	lsrs	r3, r3, #3
 8025942:	b2db      	uxtb	r3, r3
 8025944:	461a      	mov	r2, r3
 8025946:	0152      	lsls	r2, r2, #5
 8025948:	1ad2      	subs	r2, r2, r3
 802594a:	0092      	lsls	r2, r2, #2
 802594c:	1ad3      	subs	r3, r2, r3
 802594e:	005b      	lsls	r3, r3, #1
 8025950:	b2da      	uxtb	r2, r3
 8025952:	79fb      	ldrb	r3, [r7, #7]
 8025954:	4413      	add	r3, r2
 8025956:	b2db      	uxtb	r3, r3
 8025958:	3330      	adds	r3, #48	; 0x30
 802595a:	b2da      	uxtb	r2, r3
 802595c:	4b7f      	ldr	r3, [pc, #508]	; (8025b5c <ce303_power+0x4f4>)
 802595e:	70da      	strb	r2, [r3, #3]
		start_buf[4] = 0x21;
 8025960:	4b7e      	ldr	r3, [pc, #504]	; (8025b5c <ce303_power+0x4f4>)
 8025962:	2221      	movs	r2, #33	; 0x21
 8025964:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x0D;
 8025966:	4b7d      	ldr	r3, [pc, #500]	; (8025b5c <ce303_power+0x4f4>)
 8025968:	220d      	movs	r2, #13
 802596a:	715a      	strb	r2, [r3, #5]
		start_buf[6] = 0x0A;
 802596c:	4b7b      	ldr	r3, [pc, #492]	; (8025b5c <ce303_power+0x4f4>)
 802596e:	220a      	movs	r2, #10
 8025970:	719a      	strb	r2, [r3, #6]

		meter_rx_number = 0;
 8025972:	4b7c      	ldr	r3, [pc, #496]	; (8025b64 <ce303_power+0x4fc>)
 8025974:	2200      	movs	r2, #0
 8025976:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 8025978:	f7fd f9c6 	bl	8022d08 <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 802597c:	2201      	movs	r2, #1
 802597e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8025982:	4879      	ldr	r0, [pc, #484]	; (8025b68 <ce303_power+0x500>)
 8025984:	f7ee ff84 	bl	8014890 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 7); // передаем команду
 8025988:	2207      	movs	r2, #7
 802598a:	4974      	ldr	r1, [pc, #464]	; (8025b5c <ce303_power+0x4f4>)
 802598c:	4877      	ldr	r0, [pc, #476]	; (8025b6c <ce303_power+0x504>)
 802598e:	f7f2 fa4b 	bl	8017e28 <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 8025992:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8025996:	f7ed fa97 	bl	8012ec8 <HAL_Delay>
 802599a:	e02a      	b.n	80259f2 <ce303_power+0x38a>

	}
	else if( (meter_id>=0)&&(meter_id<10) )
 802599c:	79fb      	ldrb	r3, [r7, #7]
 802599e:	2b09      	cmp	r3, #9
 80259a0:	d827      	bhi.n	80259f2 <ce303_power+0x38a>
	{
		start_buf[0] = 0x2F;
 80259a2:	4b6e      	ldr	r3, [pc, #440]	; (8025b5c <ce303_power+0x4f4>)
 80259a4:	222f      	movs	r2, #47	; 0x2f
 80259a6:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 80259a8:	4b6c      	ldr	r3, [pc, #432]	; (8025b5c <ce303_power+0x4f4>)
 80259aa:	223f      	movs	r2, #63	; 0x3f
 80259ac:	705a      	strb	r2, [r3, #1]
		start_buf[2] = meter_id + 0x30;
 80259ae:	79fb      	ldrb	r3, [r7, #7]
 80259b0:	3330      	adds	r3, #48	; 0x30
 80259b2:	b2da      	uxtb	r2, r3
 80259b4:	4b69      	ldr	r3, [pc, #420]	; (8025b5c <ce303_power+0x4f4>)
 80259b6:	709a      	strb	r2, [r3, #2]
		start_buf[3] = 0x21;
 80259b8:	4b68      	ldr	r3, [pc, #416]	; (8025b5c <ce303_power+0x4f4>)
 80259ba:	2221      	movs	r2, #33	; 0x21
 80259bc:	70da      	strb	r2, [r3, #3]
		start_buf[4] = 0x0D;
 80259be:	4b67      	ldr	r3, [pc, #412]	; (8025b5c <ce303_power+0x4f4>)
 80259c0:	220d      	movs	r2, #13
 80259c2:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x0A;
 80259c4:	4b65      	ldr	r3, [pc, #404]	; (8025b5c <ce303_power+0x4f4>)
 80259c6:	220a      	movs	r2, #10
 80259c8:	715a      	strb	r2, [r3, #5]

		meter_rx_number = 0;
 80259ca:	4b66      	ldr	r3, [pc, #408]	; (8025b64 <ce303_power+0x4fc>)
 80259cc:	2200      	movs	r2, #0
 80259ce:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 80259d0:	f7fd f99a 	bl	8022d08 <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 80259d4:	2201      	movs	r2, #1
 80259d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80259da:	4863      	ldr	r0, [pc, #396]	; (8025b68 <ce303_power+0x500>)
 80259dc:	f7ee ff58 	bl	8014890 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 6); // передаем команду
 80259e0:	2206      	movs	r2, #6
 80259e2:	495e      	ldr	r1, [pc, #376]	; (8025b5c <ce303_power+0x4f4>)
 80259e4:	4861      	ldr	r0, [pc, #388]	; (8025b6c <ce303_power+0x504>)
 80259e6:	f7f2 fa1f 	bl	8017e28 <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 80259ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80259ee:	f7ed fa6b 	bl	8012ec8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
	HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 6); // передаем команду
	HAL_Delay(1000); // ждем
	*/

	meter_rx_number = 0;
 80259f2:	4b5c      	ldr	r3, [pc, #368]	; (8025b64 <ce303_power+0x4fc>)
 80259f4:	2200      	movs	r2, #0
 80259f6:	701a      	strb	r2, [r3, #0]
	meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 80259f8:	f7fd f986 	bl	8022d08 <meter_rx_buffer_clear>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 80259fc:	2201      	movs	r2, #1
 80259fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8025a02:	4859      	ldr	r0, [pc, #356]	; (8025b68 <ce303_power+0x500>)
 8025a04:	f7ee ff44 	bl	8014890 <HAL_GPIO_WritePin>
	HAL_UART_Transmit_DMA(&huart6, &password_buf[0], 6); // передаем команду
 8025a08:	2206      	movs	r2, #6
 8025a0a:	4959      	ldr	r1, [pc, #356]	; (8025b70 <ce303_power+0x508>)
 8025a0c:	4857      	ldr	r0, [pc, #348]	; (8025b6c <ce303_power+0x504>)
 8025a0e:	f7f2 fa0b 	bl	8017e28 <HAL_UART_Transmit_DMA>
	HAL_Delay(1000);
 8025a12:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8025a16:	f7ed fa57 	bl	8012ec8 <HAL_Delay>

	meter_rx_number = 0;
 8025a1a:	4b52      	ldr	r3, [pc, #328]	; (8025b64 <ce303_power+0x4fc>)
 8025a1c:	2200      	movs	r2, #0
 8025a1e:	701a      	strb	r2, [r3, #0]
	meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 8025a20:	f7fd f972 	bl	8022d08 <meter_rx_buffer_clear>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 8025a24:	2201      	movs	r2, #1
 8025a26:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8025a2a:	484f      	ldr	r0, [pc, #316]	; (8025b68 <ce303_power+0x500>)
 8025a2c:	f7ee ff30 	bl	8014890 <HAL_GPIO_WritePin>
	HAL_UART_Transmit_DMA(&huart6, &power_buf[0], 13); // передаем команду
 8025a30:	220d      	movs	r2, #13
 8025a32:	4950      	ldr	r1, [pc, #320]	; (8025b74 <ce303_power+0x50c>)
 8025a34:	484d      	ldr	r0, [pc, #308]	; (8025b6c <ce303_power+0x504>)
 8025a36:	f7f2 f9f7 	bl	8017e28 <HAL_UART_Transmit_DMA>
	HAL_Delay(1000);
 8025a3a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8025a3e:	f7ed fa43 	bl	8012ec8 <HAL_Delay>

	power_a_state = 0; // обнуляем переменные состояния прочтения мощщности перед их прочтением
 8025a42:	2300      	movs	r3, #0
 8025a44:	757b      	strb	r3, [r7, #21]
	power_b_state = 0;
 8025a46:	2300      	movs	r3, #0
 8025a48:	753b      	strb	r3, [r7, #20]
	power_c_state = 0;
 8025a4a:	2300      	movs	r3, #0
 8025a4c:	74fb      	strb	r3, [r7, #19]

	for(uint16_t i=0; i<256; i++)
 8025a4e:	2300      	movs	r3, #0
 8025a50:	823b      	strh	r3, [r7, #16]
 8025a52:	f001 b82b 	b.w	8026aac <ce303_power+0x1444>
	{

		if( (meter_rx_buffer[i] == 0x28) && (power_a_state==0) && (power_b_state==0) && (power_c_state==0) ) // 0х28 означает символ "(" в ASCII таблице
 8025a56:	8a3b      	ldrh	r3, [r7, #16]
 8025a58:	4a47      	ldr	r2, [pc, #284]	; (8025b78 <ce303_power+0x510>)
 8025a5a:	5cd3      	ldrb	r3, [r2, r3]
 8025a5c:	2b28      	cmp	r3, #40	; 0x28
 8025a5e:	f040 82ba 	bne.w	8025fd6 <ce303_power+0x96e>
 8025a62:	7d7b      	ldrb	r3, [r7, #21]
 8025a64:	2b00      	cmp	r3, #0
 8025a66:	f040 82b6 	bne.w	8025fd6 <ce303_power+0x96e>
 8025a6a:	7d3b      	ldrb	r3, [r7, #20]
 8025a6c:	2b00      	cmp	r3, #0
 8025a6e:	f040 82b2 	bne.w	8025fd6 <ce303_power+0x96e>
 8025a72:	7cfb      	ldrb	r3, [r7, #19]
 8025a74:	2b00      	cmp	r3, #0
 8025a76:	f040 82ae 	bne.w	8025fd6 <ce303_power+0x96e>
		{
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 8025a7a:	8a3b      	ldrh	r3, [r7, #16]
 8025a7c:	3302      	adds	r3, #2
 8025a7e:	4a3e      	ldr	r2, [pc, #248]	; (8025b78 <ce303_power+0x510>)
 8025a80:	5cd3      	ldrb	r3, [r2, r3]
 8025a82:	2b2e      	cmp	r3, #46	; 0x2e
 8025a84:	f040 80d8 	bne.w	8025c38 <ce303_power+0x5d0>
			{
				temp = (uint16_t)(meter_rx_buffer[i+1]-0x30);
 8025a88:	8a3b      	ldrh	r3, [r7, #16]
 8025a8a:	3301      	adds	r3, #1
 8025a8c:	4a3a      	ldr	r2, [pc, #232]	; (8025b78 <ce303_power+0x510>)
 8025a8e:	5cd3      	ldrb	r3, [r2, r3]
 8025a90:	b29b      	uxth	r3, r3
 8025a92:	3b30      	subs	r3, #48	; 0x30
 8025a94:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+4] == 0x29 ) // если 1 разряд после запятой
 8025a96:	8a3b      	ldrh	r3, [r7, #16]
 8025a98:	3304      	adds	r3, #4
 8025a9a:	4a37      	ldr	r2, [pc, #220]	; (8025b78 <ce303_power+0x510>)
 8025a9c:	5cd3      	ldrb	r3, [r2, r3]
 8025a9e:	2b29      	cmp	r3, #41	; 0x29
 8025aa0:	d110      	bne.n	8025ac4 <ce303_power+0x45c>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+3])-0x30)*100;
 8025aa2:	8a3b      	ldrh	r3, [r7, #16]
 8025aa4:	3303      	adds	r3, #3
 8025aa6:	4a34      	ldr	r2, [pc, #208]	; (8025b78 <ce303_power+0x510>)
 8025aa8:	5cd3      	ldrb	r3, [r2, r3]
 8025aaa:	3b30      	subs	r3, #48	; 0x30
 8025aac:	b29b      	uxth	r3, r3
 8025aae:	461a      	mov	r2, r3
 8025ab0:	0092      	lsls	r2, r2, #2
 8025ab2:	4413      	add	r3, r2
 8025ab4:	461a      	mov	r2, r3
 8025ab6:	0091      	lsls	r1, r2, #2
 8025ab8:	461a      	mov	r2, r3
 8025aba:	460b      	mov	r3, r1
 8025abc:	4413      	add	r3, r2
 8025abe:	009b      	lsls	r3, r3, #2
 8025ac0:	82fb      	strh	r3, [r7, #22]
 8025ac2:	e081      	b.n	8025bc8 <ce303_power+0x560>
				}
				else if( meter_rx_buffer[i+5] == 0x29 ) // если 2 разряда после запятой
 8025ac4:	8a3b      	ldrh	r3, [r7, #16]
 8025ac6:	3305      	adds	r3, #5
 8025ac8:	4a2b      	ldr	r2, [pc, #172]	; (8025b78 <ce303_power+0x510>)
 8025aca:	5cd3      	ldrb	r3, [r2, r3]
 8025acc:	2b29      	cmp	r3, #41	; 0x29
 8025ace:	d117      	bne.n	8025b00 <ce303_power+0x498>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+3])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+4])-0x30))*10;
 8025ad0:	8a3b      	ldrh	r3, [r7, #16]
 8025ad2:	3303      	adds	r3, #3
 8025ad4:	4a28      	ldr	r2, [pc, #160]	; (8025b78 <ce303_power+0x510>)
 8025ad6:	5cd3      	ldrb	r3, [r2, r3]
 8025ad8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8025adc:	4613      	mov	r3, r2
 8025ade:	009b      	lsls	r3, r3, #2
 8025ae0:	4413      	add	r3, r2
 8025ae2:	005b      	lsls	r3, r3, #1
 8025ae4:	4619      	mov	r1, r3
 8025ae6:	8a3b      	ldrh	r3, [r7, #16]
 8025ae8:	3304      	adds	r3, #4
 8025aea:	4a23      	ldr	r2, [pc, #140]	; (8025b78 <ce303_power+0x510>)
 8025aec:	5cd3      	ldrb	r3, [r2, r3]
 8025aee:	3b30      	subs	r3, #48	; 0x30
 8025af0:	440b      	add	r3, r1
 8025af2:	b29b      	uxth	r3, r3
 8025af4:	461a      	mov	r2, r3
 8025af6:	0092      	lsls	r2, r2, #2
 8025af8:	4413      	add	r3, r2
 8025afa:	005b      	lsls	r3, r3, #1
 8025afc:	82fb      	strh	r3, [r7, #22]
 8025afe:	e063      	b.n	8025bc8 <ce303_power+0x560>
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 3 разряда после запятой
 8025b00:	8a3b      	ldrh	r3, [r7, #16]
 8025b02:	3306      	adds	r3, #6
 8025b04:	4a1c      	ldr	r2, [pc, #112]	; (8025b78 <ce303_power+0x510>)
 8025b06:	5cd3      	ldrb	r3, [r2, r3]
 8025b08:	2b29      	cmp	r3, #41	; 0x29
 8025b0a:	d137      	bne.n	8025b7c <ce303_power+0x514>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 8025b0c:	8a3b      	ldrh	r3, [r7, #16]
 8025b0e:	3303      	adds	r3, #3
 8025b10:	4a19      	ldr	r2, [pc, #100]	; (8025b78 <ce303_power+0x510>)
 8025b12:	5cd3      	ldrb	r3, [r2, r3]
 8025b14:	3b30      	subs	r3, #48	; 0x30
 8025b16:	b29b      	uxth	r3, r3
 8025b18:	461a      	mov	r2, r3
 8025b1a:	0092      	lsls	r2, r2, #2
 8025b1c:	4413      	add	r3, r2
 8025b1e:	461a      	mov	r2, r3
 8025b20:	0091      	lsls	r1, r2, #2
 8025b22:	461a      	mov	r2, r3
 8025b24:	460b      	mov	r3, r1
 8025b26:	4413      	add	r3, r2
 8025b28:	009b      	lsls	r3, r3, #2
 8025b2a:	b29a      	uxth	r2, r3
 8025b2c:	8a3b      	ldrh	r3, [r7, #16]
 8025b2e:	3304      	adds	r3, #4
 8025b30:	4911      	ldr	r1, [pc, #68]	; (8025b78 <ce303_power+0x510>)
 8025b32:	5ccb      	ldrb	r3, [r1, r3]
 8025b34:	3b30      	subs	r3, #48	; 0x30
 8025b36:	b29b      	uxth	r3, r3
 8025b38:	4619      	mov	r1, r3
 8025b3a:	0089      	lsls	r1, r1, #2
 8025b3c:	440b      	add	r3, r1
 8025b3e:	005b      	lsls	r3, r3, #1
 8025b40:	b29b      	uxth	r3, r3
 8025b42:	4413      	add	r3, r2
 8025b44:	b29a      	uxth	r2, r3
 8025b46:	8a3b      	ldrh	r3, [r7, #16]
 8025b48:	3305      	adds	r3, #5
 8025b4a:	490b      	ldr	r1, [pc, #44]	; (8025b78 <ce303_power+0x510>)
 8025b4c:	5ccb      	ldrb	r3, [r1, r3]
 8025b4e:	b29b      	uxth	r3, r3
 8025b50:	4413      	add	r3, r2
 8025b52:	b29b      	uxth	r3, r3
 8025b54:	3b30      	subs	r3, #48	; 0x30
 8025b56:	82fb      	strh	r3, [r7, #22]
 8025b58:	e036      	b.n	8025bc8 <ce303_power+0x560>
 8025b5a:	bf00      	nop
 8025b5c:	20000018 	.word	0x20000018
 8025b60:	cccccccd 	.word	0xcccccccd
 8025b64:	20000865 	.word	0x20000865
 8025b68:	40021800 	.word	0x40021800
 8025b6c:	20009dc4 	.word	0x20009dc4
 8025b70:	20000020 	.word	0x20000020
 8025b74:	20000050 	.word	0x20000050
 8025b78:	20009a0c 	.word	0x20009a0c
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 8025b7c:	8a3b      	ldrh	r3, [r7, #16]
 8025b7e:	3303      	adds	r3, #3
 8025b80:	4a9b      	ldr	r2, [pc, #620]	; (8025df0 <ce303_power+0x788>)
 8025b82:	5cd3      	ldrb	r3, [r2, r3]
 8025b84:	3b30      	subs	r3, #48	; 0x30
 8025b86:	b29b      	uxth	r3, r3
 8025b88:	461a      	mov	r2, r3
 8025b8a:	0092      	lsls	r2, r2, #2
 8025b8c:	4413      	add	r3, r2
 8025b8e:	461a      	mov	r2, r3
 8025b90:	0091      	lsls	r1, r2, #2
 8025b92:	461a      	mov	r2, r3
 8025b94:	460b      	mov	r3, r1
 8025b96:	4413      	add	r3, r2
 8025b98:	009b      	lsls	r3, r3, #2
 8025b9a:	b29a      	uxth	r2, r3
 8025b9c:	8a3b      	ldrh	r3, [r7, #16]
 8025b9e:	3304      	adds	r3, #4
 8025ba0:	4993      	ldr	r1, [pc, #588]	; (8025df0 <ce303_power+0x788>)
 8025ba2:	5ccb      	ldrb	r3, [r1, r3]
 8025ba4:	3b30      	subs	r3, #48	; 0x30
 8025ba6:	b29b      	uxth	r3, r3
 8025ba8:	4619      	mov	r1, r3
 8025baa:	0089      	lsls	r1, r1, #2
 8025bac:	440b      	add	r3, r1
 8025bae:	005b      	lsls	r3, r3, #1
 8025bb0:	b29b      	uxth	r3, r3
 8025bb2:	4413      	add	r3, r2
 8025bb4:	b29a      	uxth	r2, r3
 8025bb6:	8a3b      	ldrh	r3, [r7, #16]
 8025bb8:	3305      	adds	r3, #5
 8025bba:	498d      	ldr	r1, [pc, #564]	; (8025df0 <ce303_power+0x788>)
 8025bbc:	5ccb      	ldrb	r3, [r1, r3]
 8025bbe:	b29b      	uxth	r3, r3
 8025bc0:	4413      	add	r3, r2
 8025bc2:	b29b      	uxth	r3, r3
 8025bc4:	3b30      	subs	r3, #48	; 0x30
 8025bc6:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8025bc8:	4b8a      	ldr	r3, [pc, #552]	; (8025df4 <ce303_power+0x78c>)
 8025bca:	681b      	ldr	r3, [r3, #0]
 8025bcc:	f04f 31ff 	mov.w	r1, #4294967295
 8025bd0:	4618      	mov	r0, r3
 8025bd2:	f7f3 fb69 	bl	80192a8 <osMutexWait>
				fm25v02_write(2*CE_303_POWER_A_REG, ((uint8_t)(temp>>8)) );
 8025bd6:	89fb      	ldrh	r3, [r7, #14]
 8025bd8:	0a1b      	lsrs	r3, r3, #8
 8025bda:	b29b      	uxth	r3, r3
 8025bdc:	b2db      	uxtb	r3, r3
 8025bde:	4619      	mov	r1, r3
 8025be0:	f242 0056 	movw	r0, #8278	; 0x2056
 8025be4:	f004 ff52 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_A_REG+1, ((uint8_t)(temp&0x00FF)) );
 8025be8:	89fb      	ldrh	r3, [r7, #14]
 8025bea:	b2db      	uxtb	r3, r3
 8025bec:	4619      	mov	r1, r3
 8025bee:	f242 0057 	movw	r0, #8279	; 0x2057
 8025bf2:	f004 ff4b 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_MIL_A_REG, ((uint8_t)(temp_mil>>8)) );
 8025bf6:	8afb      	ldrh	r3, [r7, #22]
 8025bf8:	0a1b      	lsrs	r3, r3, #8
 8025bfa:	b29b      	uxth	r3, r3
 8025bfc:	b2db      	uxtb	r3, r3
 8025bfe:	4619      	mov	r1, r3
 8025c00:	f242 005c 	movw	r0, #8284	; 0x205c
 8025c04:	f004 ff42 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_MIL_A_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 8025c08:	8afb      	ldrh	r3, [r7, #22]
 8025c0a:	b2db      	uxtb	r3, r3
 8025c0c:	4619      	mov	r1, r3
 8025c0e:	f242 005d 	movw	r0, #8285	; 0x205d
 8025c12:	f004 ff3b 	bl	802aa8c <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8025c16:	4b77      	ldr	r3, [pc, #476]	; (8025df4 <ce303_power+0x78c>)
 8025c18:	681b      	ldr	r3, [r3, #0]
 8025c1a:	4618      	mov	r0, r3
 8025c1c:	f7f3 fb92 	bl	8019344 <osMutexRelease>
				status_registers.ce303_power_a_reg = temp;
 8025c20:	4a75      	ldr	r2, [pc, #468]	; (8025df8 <ce303_power+0x790>)
 8025c22:	89fb      	ldrh	r3, [r7, #14]
 8025c24:	f8a2 3056 	strh.w	r3, [r2, #86]	; 0x56
				status_registers.ce303_power_mil_a_reg =  temp_mil;
 8025c28:	4a73      	ldr	r2, [pc, #460]	; (8025df8 <ce303_power+0x790>)
 8025c2a:	8afb      	ldrh	r3, [r7, #22]
 8025c2c:	f8a2 305c 	strh.w	r3, [r2, #92]	; 0x5c
				power_a_state = 1;
 8025c30:	2301      	movs	r3, #1
 8025c32:	757b      	strb	r3, [r7, #21]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 8025c34:	f000 bf34 	b.w	8026aa0 <ce303_power+0x1438>
			}
			else if( meter_rx_buffer[i+3] == 0x2E)
 8025c38:	8a3b      	ldrh	r3, [r7, #16]
 8025c3a:	3303      	adds	r3, #3
 8025c3c:	4a6c      	ldr	r2, [pc, #432]	; (8025df0 <ce303_power+0x788>)
 8025c3e:	5cd3      	ldrb	r3, [r2, r3]
 8025c40:	2b2e      	cmp	r3, #46	; 0x2e
 8025c42:	f040 80db 	bne.w	8025dfc <ce303_power+0x794>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+2])-0x30);
 8025c46:	8a3b      	ldrh	r3, [r7, #16]
 8025c48:	3301      	adds	r3, #1
 8025c4a:	4a69      	ldr	r2, [pc, #420]	; (8025df0 <ce303_power+0x788>)
 8025c4c:	5cd3      	ldrb	r3, [r2, r3]
 8025c4e:	3b30      	subs	r3, #48	; 0x30
 8025c50:	b29b      	uxth	r3, r3
 8025c52:	461a      	mov	r2, r3
 8025c54:	0092      	lsls	r2, r2, #2
 8025c56:	4413      	add	r3, r2
 8025c58:	005b      	lsls	r3, r3, #1
 8025c5a:	b29a      	uxth	r2, r3
 8025c5c:	8a3b      	ldrh	r3, [r7, #16]
 8025c5e:	3302      	adds	r3, #2
 8025c60:	4963      	ldr	r1, [pc, #396]	; (8025df0 <ce303_power+0x788>)
 8025c62:	5ccb      	ldrb	r3, [r1, r3]
 8025c64:	b29b      	uxth	r3, r3
 8025c66:	4413      	add	r3, r2
 8025c68:	b29b      	uxth	r3, r3
 8025c6a:	3b30      	subs	r3, #48	; 0x30
 8025c6c:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+5] == 0x29 ) // если 1 разряд после запятой
 8025c6e:	8a3b      	ldrh	r3, [r7, #16]
 8025c70:	3305      	adds	r3, #5
 8025c72:	4a5f      	ldr	r2, [pc, #380]	; (8025df0 <ce303_power+0x788>)
 8025c74:	5cd3      	ldrb	r3, [r2, r3]
 8025c76:	2b29      	cmp	r3, #41	; 0x29
 8025c78:	d110      	bne.n	8025c9c <ce303_power+0x634>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+4])-0x30)*100;
 8025c7a:	8a3b      	ldrh	r3, [r7, #16]
 8025c7c:	3304      	adds	r3, #4
 8025c7e:	4a5c      	ldr	r2, [pc, #368]	; (8025df0 <ce303_power+0x788>)
 8025c80:	5cd3      	ldrb	r3, [r2, r3]
 8025c82:	3b30      	subs	r3, #48	; 0x30
 8025c84:	b29b      	uxth	r3, r3
 8025c86:	461a      	mov	r2, r3
 8025c88:	0092      	lsls	r2, r2, #2
 8025c8a:	4413      	add	r3, r2
 8025c8c:	461a      	mov	r2, r3
 8025c8e:	0091      	lsls	r1, r2, #2
 8025c90:	461a      	mov	r2, r3
 8025c92:	460b      	mov	r3, r1
 8025c94:	4413      	add	r3, r2
 8025c96:	009b      	lsls	r3, r3, #2
 8025c98:	82fb      	strh	r3, [r7, #22]
 8025c9a:	e070      	b.n	8025d7e <ce303_power+0x716>
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 2 разряда после запятой
 8025c9c:	8a3b      	ldrh	r3, [r7, #16]
 8025c9e:	3306      	adds	r3, #6
 8025ca0:	4a53      	ldr	r2, [pc, #332]	; (8025df0 <ce303_power+0x788>)
 8025ca2:	5cd3      	ldrb	r3, [r2, r3]
 8025ca4:	2b29      	cmp	r3, #41	; 0x29
 8025ca6:	d117      	bne.n	8025cd8 <ce303_power+0x670>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30))*10;
 8025ca8:	8a3b      	ldrh	r3, [r7, #16]
 8025caa:	3304      	adds	r3, #4
 8025cac:	4a50      	ldr	r2, [pc, #320]	; (8025df0 <ce303_power+0x788>)
 8025cae:	5cd3      	ldrb	r3, [r2, r3]
 8025cb0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8025cb4:	4613      	mov	r3, r2
 8025cb6:	009b      	lsls	r3, r3, #2
 8025cb8:	4413      	add	r3, r2
 8025cba:	005b      	lsls	r3, r3, #1
 8025cbc:	4619      	mov	r1, r3
 8025cbe:	8a3b      	ldrh	r3, [r7, #16]
 8025cc0:	3305      	adds	r3, #5
 8025cc2:	4a4b      	ldr	r2, [pc, #300]	; (8025df0 <ce303_power+0x788>)
 8025cc4:	5cd3      	ldrb	r3, [r2, r3]
 8025cc6:	3b30      	subs	r3, #48	; 0x30
 8025cc8:	440b      	add	r3, r1
 8025cca:	b29b      	uxth	r3, r3
 8025ccc:	461a      	mov	r2, r3
 8025cce:	0092      	lsls	r2, r2, #2
 8025cd0:	4413      	add	r3, r2
 8025cd2:	005b      	lsls	r3, r3, #1
 8025cd4:	82fb      	strh	r3, [r7, #22]
 8025cd6:	e052      	b.n	8025d7e <ce303_power+0x716>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 3 разряда после запятой
 8025cd8:	8a3b      	ldrh	r3, [r7, #16]
 8025cda:	3307      	adds	r3, #7
 8025cdc:	4a44      	ldr	r2, [pc, #272]	; (8025df0 <ce303_power+0x788>)
 8025cde:	5cd3      	ldrb	r3, [r2, r3]
 8025ce0:	2b29      	cmp	r3, #41	; 0x29
 8025ce2:	d126      	bne.n	8025d32 <ce303_power+0x6ca>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 8025ce4:	8a3b      	ldrh	r3, [r7, #16]
 8025ce6:	3304      	adds	r3, #4
 8025ce8:	4a41      	ldr	r2, [pc, #260]	; (8025df0 <ce303_power+0x788>)
 8025cea:	5cd3      	ldrb	r3, [r2, r3]
 8025cec:	3b30      	subs	r3, #48	; 0x30
 8025cee:	b29b      	uxth	r3, r3
 8025cf0:	461a      	mov	r2, r3
 8025cf2:	0092      	lsls	r2, r2, #2
 8025cf4:	4413      	add	r3, r2
 8025cf6:	461a      	mov	r2, r3
 8025cf8:	0091      	lsls	r1, r2, #2
 8025cfa:	461a      	mov	r2, r3
 8025cfc:	460b      	mov	r3, r1
 8025cfe:	4413      	add	r3, r2
 8025d00:	009b      	lsls	r3, r3, #2
 8025d02:	b29a      	uxth	r2, r3
 8025d04:	8a3b      	ldrh	r3, [r7, #16]
 8025d06:	3305      	adds	r3, #5
 8025d08:	4939      	ldr	r1, [pc, #228]	; (8025df0 <ce303_power+0x788>)
 8025d0a:	5ccb      	ldrb	r3, [r1, r3]
 8025d0c:	3b30      	subs	r3, #48	; 0x30
 8025d0e:	b29b      	uxth	r3, r3
 8025d10:	4619      	mov	r1, r3
 8025d12:	0089      	lsls	r1, r1, #2
 8025d14:	440b      	add	r3, r1
 8025d16:	005b      	lsls	r3, r3, #1
 8025d18:	b29b      	uxth	r3, r3
 8025d1a:	4413      	add	r3, r2
 8025d1c:	b29a      	uxth	r2, r3
 8025d1e:	8a3b      	ldrh	r3, [r7, #16]
 8025d20:	3306      	adds	r3, #6
 8025d22:	4933      	ldr	r1, [pc, #204]	; (8025df0 <ce303_power+0x788>)
 8025d24:	5ccb      	ldrb	r3, [r1, r3]
 8025d26:	b29b      	uxth	r3, r3
 8025d28:	4413      	add	r3, r2
 8025d2a:	b29b      	uxth	r3, r3
 8025d2c:	3b30      	subs	r3, #48	; 0x30
 8025d2e:	82fb      	strh	r3, [r7, #22]
 8025d30:	e025      	b.n	8025d7e <ce303_power+0x716>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 8025d32:	8a3b      	ldrh	r3, [r7, #16]
 8025d34:	3304      	adds	r3, #4
 8025d36:	4a2e      	ldr	r2, [pc, #184]	; (8025df0 <ce303_power+0x788>)
 8025d38:	5cd3      	ldrb	r3, [r2, r3]
 8025d3a:	3b30      	subs	r3, #48	; 0x30
 8025d3c:	b29b      	uxth	r3, r3
 8025d3e:	461a      	mov	r2, r3
 8025d40:	0092      	lsls	r2, r2, #2
 8025d42:	4413      	add	r3, r2
 8025d44:	461a      	mov	r2, r3
 8025d46:	0091      	lsls	r1, r2, #2
 8025d48:	461a      	mov	r2, r3
 8025d4a:	460b      	mov	r3, r1
 8025d4c:	4413      	add	r3, r2
 8025d4e:	009b      	lsls	r3, r3, #2
 8025d50:	b29a      	uxth	r2, r3
 8025d52:	8a3b      	ldrh	r3, [r7, #16]
 8025d54:	3305      	adds	r3, #5
 8025d56:	4926      	ldr	r1, [pc, #152]	; (8025df0 <ce303_power+0x788>)
 8025d58:	5ccb      	ldrb	r3, [r1, r3]
 8025d5a:	3b30      	subs	r3, #48	; 0x30
 8025d5c:	b29b      	uxth	r3, r3
 8025d5e:	4619      	mov	r1, r3
 8025d60:	0089      	lsls	r1, r1, #2
 8025d62:	440b      	add	r3, r1
 8025d64:	005b      	lsls	r3, r3, #1
 8025d66:	b29b      	uxth	r3, r3
 8025d68:	4413      	add	r3, r2
 8025d6a:	b29a      	uxth	r2, r3
 8025d6c:	8a3b      	ldrh	r3, [r7, #16]
 8025d6e:	3306      	adds	r3, #6
 8025d70:	491f      	ldr	r1, [pc, #124]	; (8025df0 <ce303_power+0x788>)
 8025d72:	5ccb      	ldrb	r3, [r1, r3]
 8025d74:	b29b      	uxth	r3, r3
 8025d76:	4413      	add	r3, r2
 8025d78:	b29b      	uxth	r3, r3
 8025d7a:	3b30      	subs	r3, #48	; 0x30
 8025d7c:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8025d7e:	4b1d      	ldr	r3, [pc, #116]	; (8025df4 <ce303_power+0x78c>)
 8025d80:	681b      	ldr	r3, [r3, #0]
 8025d82:	f04f 31ff 	mov.w	r1, #4294967295
 8025d86:	4618      	mov	r0, r3
 8025d88:	f7f3 fa8e 	bl	80192a8 <osMutexWait>
				fm25v02_write(2*CE_303_POWER_A_REG, ((uint8_t)(temp>>8)) );
 8025d8c:	89fb      	ldrh	r3, [r7, #14]
 8025d8e:	0a1b      	lsrs	r3, r3, #8
 8025d90:	b29b      	uxth	r3, r3
 8025d92:	b2db      	uxtb	r3, r3
 8025d94:	4619      	mov	r1, r3
 8025d96:	f242 0056 	movw	r0, #8278	; 0x2056
 8025d9a:	f004 fe77 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_A_REG+1, ((uint8_t)(temp&0x00FF)) );
 8025d9e:	89fb      	ldrh	r3, [r7, #14]
 8025da0:	b2db      	uxtb	r3, r3
 8025da2:	4619      	mov	r1, r3
 8025da4:	f242 0057 	movw	r0, #8279	; 0x2057
 8025da8:	f004 fe70 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_MIL_A_REG, ((uint8_t)(temp_mil>>8)) );
 8025dac:	8afb      	ldrh	r3, [r7, #22]
 8025dae:	0a1b      	lsrs	r3, r3, #8
 8025db0:	b29b      	uxth	r3, r3
 8025db2:	b2db      	uxtb	r3, r3
 8025db4:	4619      	mov	r1, r3
 8025db6:	f242 005c 	movw	r0, #8284	; 0x205c
 8025dba:	f004 fe67 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_MIL_A_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 8025dbe:	8afb      	ldrh	r3, [r7, #22]
 8025dc0:	b2db      	uxtb	r3, r3
 8025dc2:	4619      	mov	r1, r3
 8025dc4:	f242 005d 	movw	r0, #8285	; 0x205d
 8025dc8:	f004 fe60 	bl	802aa8c <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8025dcc:	4b09      	ldr	r3, [pc, #36]	; (8025df4 <ce303_power+0x78c>)
 8025dce:	681b      	ldr	r3, [r3, #0]
 8025dd0:	4618      	mov	r0, r3
 8025dd2:	f7f3 fab7 	bl	8019344 <osMutexRelease>
				status_registers.ce303_power_a_reg = temp;
 8025dd6:	4a08      	ldr	r2, [pc, #32]	; (8025df8 <ce303_power+0x790>)
 8025dd8:	89fb      	ldrh	r3, [r7, #14]
 8025dda:	f8a2 3056 	strh.w	r3, [r2, #86]	; 0x56
				status_registers.ce303_power_mil_a_reg = temp_mil;
 8025dde:	4a06      	ldr	r2, [pc, #24]	; (8025df8 <ce303_power+0x790>)
 8025de0:	8afb      	ldrh	r3, [r7, #22]
 8025de2:	f8a2 305c 	strh.w	r3, [r2, #92]	; 0x5c
				power_a_state = 1;
 8025de6:	2301      	movs	r3, #1
 8025de8:	757b      	strb	r3, [r7, #21]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 8025dea:	f000 be59 	b.w	8026aa0 <ce303_power+0x1438>
 8025dee:	bf00      	nop
 8025df0:	20009a0c 	.word	0x20009a0c
 8025df4:	20009bb8 	.word	0x20009bb8
 8025df8:	2000af40 	.word	0x2000af40
			}

			else if( meter_rx_buffer[i+4] == 0x2E)
 8025dfc:	8a3b      	ldrh	r3, [r7, #16]
 8025dfe:	3304      	adds	r3, #4
 8025e00:	4a9f      	ldr	r2, [pc, #636]	; (8026080 <ce303_power+0xa18>)
 8025e02:	5cd3      	ldrb	r3, [r2, r3]
 8025e04:	2b2e      	cmp	r3, #46	; 0x2e
 8025e06:	f040 864b 	bne.w	8026aa0 <ce303_power+0x1438>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+2])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+3])-0x30);
 8025e0a:	8a3b      	ldrh	r3, [r7, #16]
 8025e0c:	3301      	adds	r3, #1
 8025e0e:	4a9c      	ldr	r2, [pc, #624]	; (8026080 <ce303_power+0xa18>)
 8025e10:	5cd3      	ldrb	r3, [r2, r3]
 8025e12:	3b30      	subs	r3, #48	; 0x30
 8025e14:	b29b      	uxth	r3, r3
 8025e16:	461a      	mov	r2, r3
 8025e18:	0092      	lsls	r2, r2, #2
 8025e1a:	4413      	add	r3, r2
 8025e1c:	461a      	mov	r2, r3
 8025e1e:	0091      	lsls	r1, r2, #2
 8025e20:	461a      	mov	r2, r3
 8025e22:	460b      	mov	r3, r1
 8025e24:	4413      	add	r3, r2
 8025e26:	009b      	lsls	r3, r3, #2
 8025e28:	b29a      	uxth	r2, r3
 8025e2a:	8a3b      	ldrh	r3, [r7, #16]
 8025e2c:	3302      	adds	r3, #2
 8025e2e:	4994      	ldr	r1, [pc, #592]	; (8026080 <ce303_power+0xa18>)
 8025e30:	5ccb      	ldrb	r3, [r1, r3]
 8025e32:	3b30      	subs	r3, #48	; 0x30
 8025e34:	b29b      	uxth	r3, r3
 8025e36:	4619      	mov	r1, r3
 8025e38:	0089      	lsls	r1, r1, #2
 8025e3a:	440b      	add	r3, r1
 8025e3c:	005b      	lsls	r3, r3, #1
 8025e3e:	b29b      	uxth	r3, r3
 8025e40:	4413      	add	r3, r2
 8025e42:	b29a      	uxth	r2, r3
 8025e44:	8a3b      	ldrh	r3, [r7, #16]
 8025e46:	3303      	adds	r3, #3
 8025e48:	498d      	ldr	r1, [pc, #564]	; (8026080 <ce303_power+0xa18>)
 8025e4a:	5ccb      	ldrb	r3, [r1, r3]
 8025e4c:	b29b      	uxth	r3, r3
 8025e4e:	4413      	add	r3, r2
 8025e50:	b29b      	uxth	r3, r3
 8025e52:	3b30      	subs	r3, #48	; 0x30
 8025e54:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+6] == 0x29 ) // если 1 разряд после запятой
 8025e56:	8a3b      	ldrh	r3, [r7, #16]
 8025e58:	3306      	adds	r3, #6
 8025e5a:	4a89      	ldr	r2, [pc, #548]	; (8026080 <ce303_power+0xa18>)
 8025e5c:	5cd3      	ldrb	r3, [r2, r3]
 8025e5e:	2b29      	cmp	r3, #41	; 0x29
 8025e60:	d110      	bne.n	8025e84 <ce303_power+0x81c>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+5])-0x30)*100;
 8025e62:	8a3b      	ldrh	r3, [r7, #16]
 8025e64:	3305      	adds	r3, #5
 8025e66:	4a86      	ldr	r2, [pc, #536]	; (8026080 <ce303_power+0xa18>)
 8025e68:	5cd3      	ldrb	r3, [r2, r3]
 8025e6a:	3b30      	subs	r3, #48	; 0x30
 8025e6c:	b29b      	uxth	r3, r3
 8025e6e:	461a      	mov	r2, r3
 8025e70:	0092      	lsls	r2, r2, #2
 8025e72:	4413      	add	r3, r2
 8025e74:	461a      	mov	r2, r3
 8025e76:	0091      	lsls	r1, r2, #2
 8025e78:	461a      	mov	r2, r3
 8025e7a:	460b      	mov	r3, r1
 8025e7c:	4413      	add	r3, r2
 8025e7e:	009b      	lsls	r3, r3, #2
 8025e80:	82fb      	strh	r3, [r7, #22]
 8025e82:	e070      	b.n	8025f66 <ce303_power+0x8fe>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 2 разряда после запятой
 8025e84:	8a3b      	ldrh	r3, [r7, #16]
 8025e86:	3307      	adds	r3, #7
 8025e88:	4a7d      	ldr	r2, [pc, #500]	; (8026080 <ce303_power+0xa18>)
 8025e8a:	5cd3      	ldrb	r3, [r2, r3]
 8025e8c:	2b29      	cmp	r3, #41	; 0x29
 8025e8e:	d117      	bne.n	8025ec0 <ce303_power+0x858>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30))*10;
 8025e90:	8a3b      	ldrh	r3, [r7, #16]
 8025e92:	3305      	adds	r3, #5
 8025e94:	4a7a      	ldr	r2, [pc, #488]	; (8026080 <ce303_power+0xa18>)
 8025e96:	5cd3      	ldrb	r3, [r2, r3]
 8025e98:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8025e9c:	4613      	mov	r3, r2
 8025e9e:	009b      	lsls	r3, r3, #2
 8025ea0:	4413      	add	r3, r2
 8025ea2:	005b      	lsls	r3, r3, #1
 8025ea4:	4619      	mov	r1, r3
 8025ea6:	8a3b      	ldrh	r3, [r7, #16]
 8025ea8:	3306      	adds	r3, #6
 8025eaa:	4a75      	ldr	r2, [pc, #468]	; (8026080 <ce303_power+0xa18>)
 8025eac:	5cd3      	ldrb	r3, [r2, r3]
 8025eae:	3b30      	subs	r3, #48	; 0x30
 8025eb0:	440b      	add	r3, r1
 8025eb2:	b29b      	uxth	r3, r3
 8025eb4:	461a      	mov	r2, r3
 8025eb6:	0092      	lsls	r2, r2, #2
 8025eb8:	4413      	add	r3, r2
 8025eba:	005b      	lsls	r3, r3, #1
 8025ebc:	82fb      	strh	r3, [r7, #22]
 8025ebe:	e052      	b.n	8025f66 <ce303_power+0x8fe>
				}
				else if( meter_rx_buffer[i+8] == 0x29 ) // если 3 разряда после запятой
 8025ec0:	8a3b      	ldrh	r3, [r7, #16]
 8025ec2:	3308      	adds	r3, #8
 8025ec4:	4a6e      	ldr	r2, [pc, #440]	; (8026080 <ce303_power+0xa18>)
 8025ec6:	5cd3      	ldrb	r3, [r2, r3]
 8025ec8:	2b29      	cmp	r3, #41	; 0x29
 8025eca:	d126      	bne.n	8025f1a <ce303_power+0x8b2>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 8025ecc:	8a3b      	ldrh	r3, [r7, #16]
 8025ece:	3305      	adds	r3, #5
 8025ed0:	4a6b      	ldr	r2, [pc, #428]	; (8026080 <ce303_power+0xa18>)
 8025ed2:	5cd3      	ldrb	r3, [r2, r3]
 8025ed4:	3b30      	subs	r3, #48	; 0x30
 8025ed6:	b29b      	uxth	r3, r3
 8025ed8:	461a      	mov	r2, r3
 8025eda:	0092      	lsls	r2, r2, #2
 8025edc:	4413      	add	r3, r2
 8025ede:	461a      	mov	r2, r3
 8025ee0:	0091      	lsls	r1, r2, #2
 8025ee2:	461a      	mov	r2, r3
 8025ee4:	460b      	mov	r3, r1
 8025ee6:	4413      	add	r3, r2
 8025ee8:	009b      	lsls	r3, r3, #2
 8025eea:	b29a      	uxth	r2, r3
 8025eec:	8a3b      	ldrh	r3, [r7, #16]
 8025eee:	3306      	adds	r3, #6
 8025ef0:	4963      	ldr	r1, [pc, #396]	; (8026080 <ce303_power+0xa18>)
 8025ef2:	5ccb      	ldrb	r3, [r1, r3]
 8025ef4:	3b30      	subs	r3, #48	; 0x30
 8025ef6:	b29b      	uxth	r3, r3
 8025ef8:	4619      	mov	r1, r3
 8025efa:	0089      	lsls	r1, r1, #2
 8025efc:	440b      	add	r3, r1
 8025efe:	005b      	lsls	r3, r3, #1
 8025f00:	b29b      	uxth	r3, r3
 8025f02:	4413      	add	r3, r2
 8025f04:	b29a      	uxth	r2, r3
 8025f06:	8a3b      	ldrh	r3, [r7, #16]
 8025f08:	3307      	adds	r3, #7
 8025f0a:	495d      	ldr	r1, [pc, #372]	; (8026080 <ce303_power+0xa18>)
 8025f0c:	5ccb      	ldrb	r3, [r1, r3]
 8025f0e:	b29b      	uxth	r3, r3
 8025f10:	4413      	add	r3, r2
 8025f12:	b29b      	uxth	r3, r3
 8025f14:	3b30      	subs	r3, #48	; 0x30
 8025f16:	82fb      	strh	r3, [r7, #22]
 8025f18:	e025      	b.n	8025f66 <ce303_power+0x8fe>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 8025f1a:	8a3b      	ldrh	r3, [r7, #16]
 8025f1c:	3305      	adds	r3, #5
 8025f1e:	4a58      	ldr	r2, [pc, #352]	; (8026080 <ce303_power+0xa18>)
 8025f20:	5cd3      	ldrb	r3, [r2, r3]
 8025f22:	3b30      	subs	r3, #48	; 0x30
 8025f24:	b29b      	uxth	r3, r3
 8025f26:	461a      	mov	r2, r3
 8025f28:	0092      	lsls	r2, r2, #2
 8025f2a:	4413      	add	r3, r2
 8025f2c:	461a      	mov	r2, r3
 8025f2e:	0091      	lsls	r1, r2, #2
 8025f30:	461a      	mov	r2, r3
 8025f32:	460b      	mov	r3, r1
 8025f34:	4413      	add	r3, r2
 8025f36:	009b      	lsls	r3, r3, #2
 8025f38:	b29a      	uxth	r2, r3
 8025f3a:	8a3b      	ldrh	r3, [r7, #16]
 8025f3c:	3306      	adds	r3, #6
 8025f3e:	4950      	ldr	r1, [pc, #320]	; (8026080 <ce303_power+0xa18>)
 8025f40:	5ccb      	ldrb	r3, [r1, r3]
 8025f42:	3b30      	subs	r3, #48	; 0x30
 8025f44:	b29b      	uxth	r3, r3
 8025f46:	4619      	mov	r1, r3
 8025f48:	0089      	lsls	r1, r1, #2
 8025f4a:	440b      	add	r3, r1
 8025f4c:	005b      	lsls	r3, r3, #1
 8025f4e:	b29b      	uxth	r3, r3
 8025f50:	4413      	add	r3, r2
 8025f52:	b29a      	uxth	r2, r3
 8025f54:	8a3b      	ldrh	r3, [r7, #16]
 8025f56:	3307      	adds	r3, #7
 8025f58:	4949      	ldr	r1, [pc, #292]	; (8026080 <ce303_power+0xa18>)
 8025f5a:	5ccb      	ldrb	r3, [r1, r3]
 8025f5c:	b29b      	uxth	r3, r3
 8025f5e:	4413      	add	r3, r2
 8025f60:	b29b      	uxth	r3, r3
 8025f62:	3b30      	subs	r3, #48	; 0x30
 8025f64:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8025f66:	4b47      	ldr	r3, [pc, #284]	; (8026084 <ce303_power+0xa1c>)
 8025f68:	681b      	ldr	r3, [r3, #0]
 8025f6a:	f04f 31ff 	mov.w	r1, #4294967295
 8025f6e:	4618      	mov	r0, r3
 8025f70:	f7f3 f99a 	bl	80192a8 <osMutexWait>
				fm25v02_write(2*CE_303_POWER_A_REG, ((uint8_t)(temp>>8)) );
 8025f74:	89fb      	ldrh	r3, [r7, #14]
 8025f76:	0a1b      	lsrs	r3, r3, #8
 8025f78:	b29b      	uxth	r3, r3
 8025f7a:	b2db      	uxtb	r3, r3
 8025f7c:	4619      	mov	r1, r3
 8025f7e:	f242 0056 	movw	r0, #8278	; 0x2056
 8025f82:	f004 fd83 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_A_REG+1, ((uint8_t)(temp&0x00FF)) );
 8025f86:	89fb      	ldrh	r3, [r7, #14]
 8025f88:	b2db      	uxtb	r3, r3
 8025f8a:	4619      	mov	r1, r3
 8025f8c:	f242 0057 	movw	r0, #8279	; 0x2057
 8025f90:	f004 fd7c 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_MIL_A_REG, ((uint8_t)(temp_mil>>8)) );
 8025f94:	8afb      	ldrh	r3, [r7, #22]
 8025f96:	0a1b      	lsrs	r3, r3, #8
 8025f98:	b29b      	uxth	r3, r3
 8025f9a:	b2db      	uxtb	r3, r3
 8025f9c:	4619      	mov	r1, r3
 8025f9e:	f242 005c 	movw	r0, #8284	; 0x205c
 8025fa2:	f004 fd73 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_MIL_A_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 8025fa6:	8afb      	ldrh	r3, [r7, #22]
 8025fa8:	b2db      	uxtb	r3, r3
 8025faa:	4619      	mov	r1, r3
 8025fac:	f242 005d 	movw	r0, #8285	; 0x205d
 8025fb0:	f004 fd6c 	bl	802aa8c <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8025fb4:	4b33      	ldr	r3, [pc, #204]	; (8026084 <ce303_power+0xa1c>)
 8025fb6:	681b      	ldr	r3, [r3, #0]
 8025fb8:	4618      	mov	r0, r3
 8025fba:	f7f3 f9c3 	bl	8019344 <osMutexRelease>
				status_registers.ce303_power_a_reg = temp;
 8025fbe:	4a32      	ldr	r2, [pc, #200]	; (8026088 <ce303_power+0xa20>)
 8025fc0:	89fb      	ldrh	r3, [r7, #14]
 8025fc2:	f8a2 3056 	strh.w	r3, [r2, #86]	; 0x56
				status_registers.ce303_power_mil_a_reg = temp_mil;
 8025fc6:	4a30      	ldr	r2, [pc, #192]	; (8026088 <ce303_power+0xa20>)
 8025fc8:	8afb      	ldrh	r3, [r7, #22]
 8025fca:	f8a2 305c 	strh.w	r3, [r2, #92]	; 0x5c
				power_a_state = 1;
 8025fce:	2301      	movs	r3, #1
 8025fd0:	757b      	strb	r3, [r7, #21]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 8025fd2:	f000 bd65 	b.w	8026aa0 <ce303_power+0x1438>
			}
		}

		else if( (meter_rx_buffer[i] == 0x28) && (power_a_state==1) && (power_b_state==0) && (power_c_state==0) )
 8025fd6:	8a3b      	ldrh	r3, [r7, #16]
 8025fd8:	4a29      	ldr	r2, [pc, #164]	; (8026080 <ce303_power+0xa18>)
 8025fda:	5cd3      	ldrb	r3, [r2, r3]
 8025fdc:	2b28      	cmp	r3, #40	; 0x28
 8025fde:	f040 82ad 	bne.w	802653c <ce303_power+0xed4>
 8025fe2:	7d7b      	ldrb	r3, [r7, #21]
 8025fe4:	2b01      	cmp	r3, #1
 8025fe6:	f040 82a9 	bne.w	802653c <ce303_power+0xed4>
 8025fea:	7d3b      	ldrb	r3, [r7, #20]
 8025fec:	2b00      	cmp	r3, #0
 8025fee:	f040 82a5 	bne.w	802653c <ce303_power+0xed4>
 8025ff2:	7cfb      	ldrb	r3, [r7, #19]
 8025ff4:	2b00      	cmp	r3, #0
 8025ff6:	f040 82a1 	bne.w	802653c <ce303_power+0xed4>
		{
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 8025ffa:	8a3b      	ldrh	r3, [r7, #16]
 8025ffc:	3302      	adds	r3, #2
 8025ffe:	4a20      	ldr	r2, [pc, #128]	; (8026080 <ce303_power+0xa18>)
 8026000:	5cd3      	ldrb	r3, [r2, r3]
 8026002:	2b2e      	cmp	r3, #46	; 0x2e
 8026004:	f040 80cd 	bne.w	80261a2 <ce303_power+0xb3a>
			{
				temp = (uint16_t)(meter_rx_buffer[i+1]-0x30);
 8026008:	8a3b      	ldrh	r3, [r7, #16]
 802600a:	3301      	adds	r3, #1
 802600c:	4a1c      	ldr	r2, [pc, #112]	; (8026080 <ce303_power+0xa18>)
 802600e:	5cd3      	ldrb	r3, [r2, r3]
 8026010:	b29b      	uxth	r3, r3
 8026012:	3b30      	subs	r3, #48	; 0x30
 8026014:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+4] == 0x29 ) // если 1 разряд после запятой
 8026016:	8a3b      	ldrh	r3, [r7, #16]
 8026018:	3304      	adds	r3, #4
 802601a:	4a19      	ldr	r2, [pc, #100]	; (8026080 <ce303_power+0xa18>)
 802601c:	5cd3      	ldrb	r3, [r2, r3]
 802601e:	2b29      	cmp	r3, #41	; 0x29
 8026020:	d110      	bne.n	8026044 <ce303_power+0x9dc>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+3])-0x30)*100;
 8026022:	8a3b      	ldrh	r3, [r7, #16]
 8026024:	3303      	adds	r3, #3
 8026026:	4a16      	ldr	r2, [pc, #88]	; (8026080 <ce303_power+0xa18>)
 8026028:	5cd3      	ldrb	r3, [r2, r3]
 802602a:	3b30      	subs	r3, #48	; 0x30
 802602c:	b29b      	uxth	r3, r3
 802602e:	461a      	mov	r2, r3
 8026030:	0092      	lsls	r2, r2, #2
 8026032:	4413      	add	r3, r2
 8026034:	461a      	mov	r2, r3
 8026036:	0091      	lsls	r1, r2, #2
 8026038:	461a      	mov	r2, r3
 802603a:	460b      	mov	r3, r1
 802603c:	4413      	add	r3, r2
 802603e:	009b      	lsls	r3, r3, #2
 8026040:	82fb      	strh	r3, [r7, #22]
 8026042:	e076      	b.n	8026132 <ce303_power+0xaca>
				}
				else if( meter_rx_buffer[i+5] == 0x29 ) // если 2 разряда после запятой
 8026044:	8a3b      	ldrh	r3, [r7, #16]
 8026046:	3305      	adds	r3, #5
 8026048:	4a0d      	ldr	r2, [pc, #52]	; (8026080 <ce303_power+0xa18>)
 802604a:	5cd3      	ldrb	r3, [r2, r3]
 802604c:	2b29      	cmp	r3, #41	; 0x29
 802604e:	d11d      	bne.n	802608c <ce303_power+0xa24>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+3])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+4])-0x30))*10;
 8026050:	8a3b      	ldrh	r3, [r7, #16]
 8026052:	3303      	adds	r3, #3
 8026054:	4a0a      	ldr	r2, [pc, #40]	; (8026080 <ce303_power+0xa18>)
 8026056:	5cd3      	ldrb	r3, [r2, r3]
 8026058:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 802605c:	4613      	mov	r3, r2
 802605e:	009b      	lsls	r3, r3, #2
 8026060:	4413      	add	r3, r2
 8026062:	005b      	lsls	r3, r3, #1
 8026064:	4619      	mov	r1, r3
 8026066:	8a3b      	ldrh	r3, [r7, #16]
 8026068:	3304      	adds	r3, #4
 802606a:	4a05      	ldr	r2, [pc, #20]	; (8026080 <ce303_power+0xa18>)
 802606c:	5cd3      	ldrb	r3, [r2, r3]
 802606e:	3b30      	subs	r3, #48	; 0x30
 8026070:	440b      	add	r3, r1
 8026072:	b29b      	uxth	r3, r3
 8026074:	461a      	mov	r2, r3
 8026076:	0092      	lsls	r2, r2, #2
 8026078:	4413      	add	r3, r2
 802607a:	005b      	lsls	r3, r3, #1
 802607c:	82fb      	strh	r3, [r7, #22]
 802607e:	e058      	b.n	8026132 <ce303_power+0xaca>
 8026080:	20009a0c 	.word	0x20009a0c
 8026084:	20009bb8 	.word	0x20009bb8
 8026088:	2000af40 	.word	0x2000af40
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 3 разряда после запятой
 802608c:	8a3b      	ldrh	r3, [r7, #16]
 802608e:	3306      	adds	r3, #6
 8026090:	4ab1      	ldr	r2, [pc, #708]	; (8026358 <ce303_power+0xcf0>)
 8026092:	5cd3      	ldrb	r3, [r2, r3]
 8026094:	2b29      	cmp	r3, #41	; 0x29
 8026096:	d126      	bne.n	80260e6 <ce303_power+0xa7e>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 8026098:	8a3b      	ldrh	r3, [r7, #16]
 802609a:	3303      	adds	r3, #3
 802609c:	4aae      	ldr	r2, [pc, #696]	; (8026358 <ce303_power+0xcf0>)
 802609e:	5cd3      	ldrb	r3, [r2, r3]
 80260a0:	3b30      	subs	r3, #48	; 0x30
 80260a2:	b29b      	uxth	r3, r3
 80260a4:	461a      	mov	r2, r3
 80260a6:	0092      	lsls	r2, r2, #2
 80260a8:	4413      	add	r3, r2
 80260aa:	461a      	mov	r2, r3
 80260ac:	0091      	lsls	r1, r2, #2
 80260ae:	461a      	mov	r2, r3
 80260b0:	460b      	mov	r3, r1
 80260b2:	4413      	add	r3, r2
 80260b4:	009b      	lsls	r3, r3, #2
 80260b6:	b29a      	uxth	r2, r3
 80260b8:	8a3b      	ldrh	r3, [r7, #16]
 80260ba:	3304      	adds	r3, #4
 80260bc:	49a6      	ldr	r1, [pc, #664]	; (8026358 <ce303_power+0xcf0>)
 80260be:	5ccb      	ldrb	r3, [r1, r3]
 80260c0:	3b30      	subs	r3, #48	; 0x30
 80260c2:	b29b      	uxth	r3, r3
 80260c4:	4619      	mov	r1, r3
 80260c6:	0089      	lsls	r1, r1, #2
 80260c8:	440b      	add	r3, r1
 80260ca:	005b      	lsls	r3, r3, #1
 80260cc:	b29b      	uxth	r3, r3
 80260ce:	4413      	add	r3, r2
 80260d0:	b29a      	uxth	r2, r3
 80260d2:	8a3b      	ldrh	r3, [r7, #16]
 80260d4:	3305      	adds	r3, #5
 80260d6:	49a0      	ldr	r1, [pc, #640]	; (8026358 <ce303_power+0xcf0>)
 80260d8:	5ccb      	ldrb	r3, [r1, r3]
 80260da:	b29b      	uxth	r3, r3
 80260dc:	4413      	add	r3, r2
 80260de:	b29b      	uxth	r3, r3
 80260e0:	3b30      	subs	r3, #48	; 0x30
 80260e2:	82fb      	strh	r3, [r7, #22]
 80260e4:	e025      	b.n	8026132 <ce303_power+0xaca>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 80260e6:	8a3b      	ldrh	r3, [r7, #16]
 80260e8:	3303      	adds	r3, #3
 80260ea:	4a9b      	ldr	r2, [pc, #620]	; (8026358 <ce303_power+0xcf0>)
 80260ec:	5cd3      	ldrb	r3, [r2, r3]
 80260ee:	3b30      	subs	r3, #48	; 0x30
 80260f0:	b29b      	uxth	r3, r3
 80260f2:	461a      	mov	r2, r3
 80260f4:	0092      	lsls	r2, r2, #2
 80260f6:	4413      	add	r3, r2
 80260f8:	461a      	mov	r2, r3
 80260fa:	0091      	lsls	r1, r2, #2
 80260fc:	461a      	mov	r2, r3
 80260fe:	460b      	mov	r3, r1
 8026100:	4413      	add	r3, r2
 8026102:	009b      	lsls	r3, r3, #2
 8026104:	b29a      	uxth	r2, r3
 8026106:	8a3b      	ldrh	r3, [r7, #16]
 8026108:	3304      	adds	r3, #4
 802610a:	4993      	ldr	r1, [pc, #588]	; (8026358 <ce303_power+0xcf0>)
 802610c:	5ccb      	ldrb	r3, [r1, r3]
 802610e:	3b30      	subs	r3, #48	; 0x30
 8026110:	b29b      	uxth	r3, r3
 8026112:	4619      	mov	r1, r3
 8026114:	0089      	lsls	r1, r1, #2
 8026116:	440b      	add	r3, r1
 8026118:	005b      	lsls	r3, r3, #1
 802611a:	b29b      	uxth	r3, r3
 802611c:	4413      	add	r3, r2
 802611e:	b29a      	uxth	r2, r3
 8026120:	8a3b      	ldrh	r3, [r7, #16]
 8026122:	3305      	adds	r3, #5
 8026124:	498c      	ldr	r1, [pc, #560]	; (8026358 <ce303_power+0xcf0>)
 8026126:	5ccb      	ldrb	r3, [r1, r3]
 8026128:	b29b      	uxth	r3, r3
 802612a:	4413      	add	r3, r2
 802612c:	b29b      	uxth	r3, r3
 802612e:	3b30      	subs	r3, #48	; 0x30
 8026130:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8026132:	4b8a      	ldr	r3, [pc, #552]	; (802635c <ce303_power+0xcf4>)
 8026134:	681b      	ldr	r3, [r3, #0]
 8026136:	f04f 31ff 	mov.w	r1, #4294967295
 802613a:	4618      	mov	r0, r3
 802613c:	f7f3 f8b4 	bl	80192a8 <osMutexWait>
				fm25v02_write(2*CE_303_POWER_B_REG, ((uint8_t)(temp>>8)) );
 8026140:	89fb      	ldrh	r3, [r7, #14]
 8026142:	0a1b      	lsrs	r3, r3, #8
 8026144:	b29b      	uxth	r3, r3
 8026146:	b2db      	uxtb	r3, r3
 8026148:	4619      	mov	r1, r3
 802614a:	f242 0058 	movw	r0, #8280	; 0x2058
 802614e:	f004 fc9d 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_B_REG+1, ((uint8_t)(temp&0x00FF)) );
 8026152:	89fb      	ldrh	r3, [r7, #14]
 8026154:	b2db      	uxtb	r3, r3
 8026156:	4619      	mov	r1, r3
 8026158:	f242 0059 	movw	r0, #8281	; 0x2059
 802615c:	f004 fc96 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_MIL_B_REG, ((uint8_t)(temp_mil>>8)) );
 8026160:	8afb      	ldrh	r3, [r7, #22]
 8026162:	0a1b      	lsrs	r3, r3, #8
 8026164:	b29b      	uxth	r3, r3
 8026166:	b2db      	uxtb	r3, r3
 8026168:	4619      	mov	r1, r3
 802616a:	f242 005e 	movw	r0, #8286	; 0x205e
 802616e:	f004 fc8d 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_MIL_B_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 8026172:	8afb      	ldrh	r3, [r7, #22]
 8026174:	b2db      	uxtb	r3, r3
 8026176:	4619      	mov	r1, r3
 8026178:	f242 005f 	movw	r0, #8287	; 0x205f
 802617c:	f004 fc86 	bl	802aa8c <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8026180:	4b76      	ldr	r3, [pc, #472]	; (802635c <ce303_power+0xcf4>)
 8026182:	681b      	ldr	r3, [r3, #0]
 8026184:	4618      	mov	r0, r3
 8026186:	f7f3 f8dd 	bl	8019344 <osMutexRelease>
				status_registers.ce303_power_b_reg = temp;
 802618a:	4a75      	ldr	r2, [pc, #468]	; (8026360 <ce303_power+0xcf8>)
 802618c:	89fb      	ldrh	r3, [r7, #14]
 802618e:	f8a2 3058 	strh.w	r3, [r2, #88]	; 0x58
				status_registers.ce303_power_mil_b_reg =  temp_mil;
 8026192:	4a73      	ldr	r2, [pc, #460]	; (8026360 <ce303_power+0xcf8>)
 8026194:	8afb      	ldrh	r3, [r7, #22]
 8026196:	f8a2 305e 	strh.w	r3, [r2, #94]	; 0x5e
				power_b_state = 1;
 802619a:	2301      	movs	r3, #1
 802619c:	753b      	strb	r3, [r7, #20]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 802619e:	f000 bc81 	b.w	8026aa4 <ce303_power+0x143c>
			}
			else if( meter_rx_buffer[i+3] == 0x2E)
 80261a2:	8a3b      	ldrh	r3, [r7, #16]
 80261a4:	3303      	adds	r3, #3
 80261a6:	4a6c      	ldr	r2, [pc, #432]	; (8026358 <ce303_power+0xcf0>)
 80261a8:	5cd3      	ldrb	r3, [r2, r3]
 80261aa:	2b2e      	cmp	r3, #46	; 0x2e
 80261ac:	f040 80da 	bne.w	8026364 <ce303_power+0xcfc>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+2])-0x30);
 80261b0:	8a3b      	ldrh	r3, [r7, #16]
 80261b2:	3301      	adds	r3, #1
 80261b4:	4a68      	ldr	r2, [pc, #416]	; (8026358 <ce303_power+0xcf0>)
 80261b6:	5cd3      	ldrb	r3, [r2, r3]
 80261b8:	3b30      	subs	r3, #48	; 0x30
 80261ba:	b29b      	uxth	r3, r3
 80261bc:	461a      	mov	r2, r3
 80261be:	0092      	lsls	r2, r2, #2
 80261c0:	4413      	add	r3, r2
 80261c2:	005b      	lsls	r3, r3, #1
 80261c4:	b29a      	uxth	r2, r3
 80261c6:	8a3b      	ldrh	r3, [r7, #16]
 80261c8:	3302      	adds	r3, #2
 80261ca:	4963      	ldr	r1, [pc, #396]	; (8026358 <ce303_power+0xcf0>)
 80261cc:	5ccb      	ldrb	r3, [r1, r3]
 80261ce:	b29b      	uxth	r3, r3
 80261d0:	4413      	add	r3, r2
 80261d2:	b29b      	uxth	r3, r3
 80261d4:	3b30      	subs	r3, #48	; 0x30
 80261d6:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+5] == 0x29 ) // если 1 разряд после запятой
 80261d8:	8a3b      	ldrh	r3, [r7, #16]
 80261da:	3305      	adds	r3, #5
 80261dc:	4a5e      	ldr	r2, [pc, #376]	; (8026358 <ce303_power+0xcf0>)
 80261de:	5cd3      	ldrb	r3, [r2, r3]
 80261e0:	2b29      	cmp	r3, #41	; 0x29
 80261e2:	d110      	bne.n	8026206 <ce303_power+0xb9e>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+4])-0x30)*100;
 80261e4:	8a3b      	ldrh	r3, [r7, #16]
 80261e6:	3304      	adds	r3, #4
 80261e8:	4a5b      	ldr	r2, [pc, #364]	; (8026358 <ce303_power+0xcf0>)
 80261ea:	5cd3      	ldrb	r3, [r2, r3]
 80261ec:	3b30      	subs	r3, #48	; 0x30
 80261ee:	b29b      	uxth	r3, r3
 80261f0:	461a      	mov	r2, r3
 80261f2:	0092      	lsls	r2, r2, #2
 80261f4:	4413      	add	r3, r2
 80261f6:	461a      	mov	r2, r3
 80261f8:	0091      	lsls	r1, r2, #2
 80261fa:	461a      	mov	r2, r3
 80261fc:	460b      	mov	r3, r1
 80261fe:	4413      	add	r3, r2
 8026200:	009b      	lsls	r3, r3, #2
 8026202:	82fb      	strh	r3, [r7, #22]
 8026204:	e070      	b.n	80262e8 <ce303_power+0xc80>
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 2 разряда после запятой
 8026206:	8a3b      	ldrh	r3, [r7, #16]
 8026208:	3306      	adds	r3, #6
 802620a:	4a53      	ldr	r2, [pc, #332]	; (8026358 <ce303_power+0xcf0>)
 802620c:	5cd3      	ldrb	r3, [r2, r3]
 802620e:	2b29      	cmp	r3, #41	; 0x29
 8026210:	d117      	bne.n	8026242 <ce303_power+0xbda>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30))*10;
 8026212:	8a3b      	ldrh	r3, [r7, #16]
 8026214:	3304      	adds	r3, #4
 8026216:	4a50      	ldr	r2, [pc, #320]	; (8026358 <ce303_power+0xcf0>)
 8026218:	5cd3      	ldrb	r3, [r2, r3]
 802621a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 802621e:	4613      	mov	r3, r2
 8026220:	009b      	lsls	r3, r3, #2
 8026222:	4413      	add	r3, r2
 8026224:	005b      	lsls	r3, r3, #1
 8026226:	4619      	mov	r1, r3
 8026228:	8a3b      	ldrh	r3, [r7, #16]
 802622a:	3305      	adds	r3, #5
 802622c:	4a4a      	ldr	r2, [pc, #296]	; (8026358 <ce303_power+0xcf0>)
 802622e:	5cd3      	ldrb	r3, [r2, r3]
 8026230:	3b30      	subs	r3, #48	; 0x30
 8026232:	440b      	add	r3, r1
 8026234:	b29b      	uxth	r3, r3
 8026236:	461a      	mov	r2, r3
 8026238:	0092      	lsls	r2, r2, #2
 802623a:	4413      	add	r3, r2
 802623c:	005b      	lsls	r3, r3, #1
 802623e:	82fb      	strh	r3, [r7, #22]
 8026240:	e052      	b.n	80262e8 <ce303_power+0xc80>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 3 разряда после запятой
 8026242:	8a3b      	ldrh	r3, [r7, #16]
 8026244:	3307      	adds	r3, #7
 8026246:	4a44      	ldr	r2, [pc, #272]	; (8026358 <ce303_power+0xcf0>)
 8026248:	5cd3      	ldrb	r3, [r2, r3]
 802624a:	2b29      	cmp	r3, #41	; 0x29
 802624c:	d126      	bne.n	802629c <ce303_power+0xc34>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 802624e:	8a3b      	ldrh	r3, [r7, #16]
 8026250:	3304      	adds	r3, #4
 8026252:	4a41      	ldr	r2, [pc, #260]	; (8026358 <ce303_power+0xcf0>)
 8026254:	5cd3      	ldrb	r3, [r2, r3]
 8026256:	3b30      	subs	r3, #48	; 0x30
 8026258:	b29b      	uxth	r3, r3
 802625a:	461a      	mov	r2, r3
 802625c:	0092      	lsls	r2, r2, #2
 802625e:	4413      	add	r3, r2
 8026260:	461a      	mov	r2, r3
 8026262:	0091      	lsls	r1, r2, #2
 8026264:	461a      	mov	r2, r3
 8026266:	460b      	mov	r3, r1
 8026268:	4413      	add	r3, r2
 802626a:	009b      	lsls	r3, r3, #2
 802626c:	b29a      	uxth	r2, r3
 802626e:	8a3b      	ldrh	r3, [r7, #16]
 8026270:	3305      	adds	r3, #5
 8026272:	4939      	ldr	r1, [pc, #228]	; (8026358 <ce303_power+0xcf0>)
 8026274:	5ccb      	ldrb	r3, [r1, r3]
 8026276:	3b30      	subs	r3, #48	; 0x30
 8026278:	b29b      	uxth	r3, r3
 802627a:	4619      	mov	r1, r3
 802627c:	0089      	lsls	r1, r1, #2
 802627e:	440b      	add	r3, r1
 8026280:	005b      	lsls	r3, r3, #1
 8026282:	b29b      	uxth	r3, r3
 8026284:	4413      	add	r3, r2
 8026286:	b29a      	uxth	r2, r3
 8026288:	8a3b      	ldrh	r3, [r7, #16]
 802628a:	3306      	adds	r3, #6
 802628c:	4932      	ldr	r1, [pc, #200]	; (8026358 <ce303_power+0xcf0>)
 802628e:	5ccb      	ldrb	r3, [r1, r3]
 8026290:	b29b      	uxth	r3, r3
 8026292:	4413      	add	r3, r2
 8026294:	b29b      	uxth	r3, r3
 8026296:	3b30      	subs	r3, #48	; 0x30
 8026298:	82fb      	strh	r3, [r7, #22]
 802629a:	e025      	b.n	80262e8 <ce303_power+0xc80>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 802629c:	8a3b      	ldrh	r3, [r7, #16]
 802629e:	3304      	adds	r3, #4
 80262a0:	4a2d      	ldr	r2, [pc, #180]	; (8026358 <ce303_power+0xcf0>)
 80262a2:	5cd3      	ldrb	r3, [r2, r3]
 80262a4:	3b30      	subs	r3, #48	; 0x30
 80262a6:	b29b      	uxth	r3, r3
 80262a8:	461a      	mov	r2, r3
 80262aa:	0092      	lsls	r2, r2, #2
 80262ac:	4413      	add	r3, r2
 80262ae:	461a      	mov	r2, r3
 80262b0:	0091      	lsls	r1, r2, #2
 80262b2:	461a      	mov	r2, r3
 80262b4:	460b      	mov	r3, r1
 80262b6:	4413      	add	r3, r2
 80262b8:	009b      	lsls	r3, r3, #2
 80262ba:	b29a      	uxth	r2, r3
 80262bc:	8a3b      	ldrh	r3, [r7, #16]
 80262be:	3305      	adds	r3, #5
 80262c0:	4925      	ldr	r1, [pc, #148]	; (8026358 <ce303_power+0xcf0>)
 80262c2:	5ccb      	ldrb	r3, [r1, r3]
 80262c4:	3b30      	subs	r3, #48	; 0x30
 80262c6:	b29b      	uxth	r3, r3
 80262c8:	4619      	mov	r1, r3
 80262ca:	0089      	lsls	r1, r1, #2
 80262cc:	440b      	add	r3, r1
 80262ce:	005b      	lsls	r3, r3, #1
 80262d0:	b29b      	uxth	r3, r3
 80262d2:	4413      	add	r3, r2
 80262d4:	b29a      	uxth	r2, r3
 80262d6:	8a3b      	ldrh	r3, [r7, #16]
 80262d8:	3306      	adds	r3, #6
 80262da:	491f      	ldr	r1, [pc, #124]	; (8026358 <ce303_power+0xcf0>)
 80262dc:	5ccb      	ldrb	r3, [r1, r3]
 80262de:	b29b      	uxth	r3, r3
 80262e0:	4413      	add	r3, r2
 80262e2:	b29b      	uxth	r3, r3
 80262e4:	3b30      	subs	r3, #48	; 0x30
 80262e6:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 80262e8:	4b1c      	ldr	r3, [pc, #112]	; (802635c <ce303_power+0xcf4>)
 80262ea:	681b      	ldr	r3, [r3, #0]
 80262ec:	f04f 31ff 	mov.w	r1, #4294967295
 80262f0:	4618      	mov	r0, r3
 80262f2:	f7f2 ffd9 	bl	80192a8 <osMutexWait>
				fm25v02_write(2*CE_303_POWER_B_REG, ((uint8_t)(temp>>8)) );
 80262f6:	89fb      	ldrh	r3, [r7, #14]
 80262f8:	0a1b      	lsrs	r3, r3, #8
 80262fa:	b29b      	uxth	r3, r3
 80262fc:	b2db      	uxtb	r3, r3
 80262fe:	4619      	mov	r1, r3
 8026300:	f242 0058 	movw	r0, #8280	; 0x2058
 8026304:	f004 fbc2 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_B_REG+1, ((uint8_t)(temp&0x00FF)) );
 8026308:	89fb      	ldrh	r3, [r7, #14]
 802630a:	b2db      	uxtb	r3, r3
 802630c:	4619      	mov	r1, r3
 802630e:	f242 0059 	movw	r0, #8281	; 0x2059
 8026312:	f004 fbbb 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_MIL_B_REG, ((uint8_t)(temp_mil>>8)) );
 8026316:	8afb      	ldrh	r3, [r7, #22]
 8026318:	0a1b      	lsrs	r3, r3, #8
 802631a:	b29b      	uxth	r3, r3
 802631c:	b2db      	uxtb	r3, r3
 802631e:	4619      	mov	r1, r3
 8026320:	f242 005e 	movw	r0, #8286	; 0x205e
 8026324:	f004 fbb2 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_MIL_B_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 8026328:	8afb      	ldrh	r3, [r7, #22]
 802632a:	b2db      	uxtb	r3, r3
 802632c:	4619      	mov	r1, r3
 802632e:	f242 005f 	movw	r0, #8287	; 0x205f
 8026332:	f004 fbab 	bl	802aa8c <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8026336:	4b09      	ldr	r3, [pc, #36]	; (802635c <ce303_power+0xcf4>)
 8026338:	681b      	ldr	r3, [r3, #0]
 802633a:	4618      	mov	r0, r3
 802633c:	f7f3 f802 	bl	8019344 <osMutexRelease>
				status_registers.ce303_power_b_reg = temp;
 8026340:	4a07      	ldr	r2, [pc, #28]	; (8026360 <ce303_power+0xcf8>)
 8026342:	89fb      	ldrh	r3, [r7, #14]
 8026344:	f8a2 3058 	strh.w	r3, [r2, #88]	; 0x58
				status_registers.ce303_power_mil_b_reg = temp_mil;
 8026348:	4a05      	ldr	r2, [pc, #20]	; (8026360 <ce303_power+0xcf8>)
 802634a:	8afb      	ldrh	r3, [r7, #22]
 802634c:	f8a2 305e 	strh.w	r3, [r2, #94]	; 0x5e
				power_b_state = 1;
 8026350:	2301      	movs	r3, #1
 8026352:	753b      	strb	r3, [r7, #20]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 8026354:	e3a6      	b.n	8026aa4 <ce303_power+0x143c>
 8026356:	bf00      	nop
 8026358:	20009a0c 	.word	0x20009a0c
 802635c:	20009bb8 	.word	0x20009bb8
 8026360:	2000af40 	.word	0x2000af40
			}

			else if( meter_rx_buffer[i+4] == 0x2E)
 8026364:	8a3b      	ldrh	r3, [r7, #16]
 8026366:	3304      	adds	r3, #4
 8026368:	4a9f      	ldr	r2, [pc, #636]	; (80265e8 <ce303_power+0xf80>)
 802636a:	5cd3      	ldrb	r3, [r2, r3]
 802636c:	2b2e      	cmp	r3, #46	; 0x2e
 802636e:	f040 8399 	bne.w	8026aa4 <ce303_power+0x143c>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+2])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+3])-0x30);
 8026372:	8a3b      	ldrh	r3, [r7, #16]
 8026374:	3301      	adds	r3, #1
 8026376:	4a9c      	ldr	r2, [pc, #624]	; (80265e8 <ce303_power+0xf80>)
 8026378:	5cd3      	ldrb	r3, [r2, r3]
 802637a:	3b30      	subs	r3, #48	; 0x30
 802637c:	b29b      	uxth	r3, r3
 802637e:	461a      	mov	r2, r3
 8026380:	0092      	lsls	r2, r2, #2
 8026382:	4413      	add	r3, r2
 8026384:	461a      	mov	r2, r3
 8026386:	0091      	lsls	r1, r2, #2
 8026388:	461a      	mov	r2, r3
 802638a:	460b      	mov	r3, r1
 802638c:	4413      	add	r3, r2
 802638e:	009b      	lsls	r3, r3, #2
 8026390:	b29a      	uxth	r2, r3
 8026392:	8a3b      	ldrh	r3, [r7, #16]
 8026394:	3302      	adds	r3, #2
 8026396:	4994      	ldr	r1, [pc, #592]	; (80265e8 <ce303_power+0xf80>)
 8026398:	5ccb      	ldrb	r3, [r1, r3]
 802639a:	3b30      	subs	r3, #48	; 0x30
 802639c:	b29b      	uxth	r3, r3
 802639e:	4619      	mov	r1, r3
 80263a0:	0089      	lsls	r1, r1, #2
 80263a2:	440b      	add	r3, r1
 80263a4:	005b      	lsls	r3, r3, #1
 80263a6:	b29b      	uxth	r3, r3
 80263a8:	4413      	add	r3, r2
 80263aa:	b29a      	uxth	r2, r3
 80263ac:	8a3b      	ldrh	r3, [r7, #16]
 80263ae:	3303      	adds	r3, #3
 80263b0:	498d      	ldr	r1, [pc, #564]	; (80265e8 <ce303_power+0xf80>)
 80263b2:	5ccb      	ldrb	r3, [r1, r3]
 80263b4:	b29b      	uxth	r3, r3
 80263b6:	4413      	add	r3, r2
 80263b8:	b29b      	uxth	r3, r3
 80263ba:	3b30      	subs	r3, #48	; 0x30
 80263bc:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+6] == 0x29 ) // если 1 разряд после запятой
 80263be:	8a3b      	ldrh	r3, [r7, #16]
 80263c0:	3306      	adds	r3, #6
 80263c2:	4a89      	ldr	r2, [pc, #548]	; (80265e8 <ce303_power+0xf80>)
 80263c4:	5cd3      	ldrb	r3, [r2, r3]
 80263c6:	2b29      	cmp	r3, #41	; 0x29
 80263c8:	d110      	bne.n	80263ec <ce303_power+0xd84>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+5])-0x30)*100;
 80263ca:	8a3b      	ldrh	r3, [r7, #16]
 80263cc:	3305      	adds	r3, #5
 80263ce:	4a86      	ldr	r2, [pc, #536]	; (80265e8 <ce303_power+0xf80>)
 80263d0:	5cd3      	ldrb	r3, [r2, r3]
 80263d2:	3b30      	subs	r3, #48	; 0x30
 80263d4:	b29b      	uxth	r3, r3
 80263d6:	461a      	mov	r2, r3
 80263d8:	0092      	lsls	r2, r2, #2
 80263da:	4413      	add	r3, r2
 80263dc:	461a      	mov	r2, r3
 80263de:	0091      	lsls	r1, r2, #2
 80263e0:	461a      	mov	r2, r3
 80263e2:	460b      	mov	r3, r1
 80263e4:	4413      	add	r3, r2
 80263e6:	009b      	lsls	r3, r3, #2
 80263e8:	82fb      	strh	r3, [r7, #22]
 80263ea:	e070      	b.n	80264ce <ce303_power+0xe66>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 2 разряда после запятой
 80263ec:	8a3b      	ldrh	r3, [r7, #16]
 80263ee:	3307      	adds	r3, #7
 80263f0:	4a7d      	ldr	r2, [pc, #500]	; (80265e8 <ce303_power+0xf80>)
 80263f2:	5cd3      	ldrb	r3, [r2, r3]
 80263f4:	2b29      	cmp	r3, #41	; 0x29
 80263f6:	d117      	bne.n	8026428 <ce303_power+0xdc0>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30))*10;
 80263f8:	8a3b      	ldrh	r3, [r7, #16]
 80263fa:	3305      	adds	r3, #5
 80263fc:	4a7a      	ldr	r2, [pc, #488]	; (80265e8 <ce303_power+0xf80>)
 80263fe:	5cd3      	ldrb	r3, [r2, r3]
 8026400:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8026404:	4613      	mov	r3, r2
 8026406:	009b      	lsls	r3, r3, #2
 8026408:	4413      	add	r3, r2
 802640a:	005b      	lsls	r3, r3, #1
 802640c:	4619      	mov	r1, r3
 802640e:	8a3b      	ldrh	r3, [r7, #16]
 8026410:	3306      	adds	r3, #6
 8026412:	4a75      	ldr	r2, [pc, #468]	; (80265e8 <ce303_power+0xf80>)
 8026414:	5cd3      	ldrb	r3, [r2, r3]
 8026416:	3b30      	subs	r3, #48	; 0x30
 8026418:	440b      	add	r3, r1
 802641a:	b29b      	uxth	r3, r3
 802641c:	461a      	mov	r2, r3
 802641e:	0092      	lsls	r2, r2, #2
 8026420:	4413      	add	r3, r2
 8026422:	005b      	lsls	r3, r3, #1
 8026424:	82fb      	strh	r3, [r7, #22]
 8026426:	e052      	b.n	80264ce <ce303_power+0xe66>
				}
				else if( meter_rx_buffer[i+8] == 0x29 ) // если 3 разряда после запятой
 8026428:	8a3b      	ldrh	r3, [r7, #16]
 802642a:	3308      	adds	r3, #8
 802642c:	4a6e      	ldr	r2, [pc, #440]	; (80265e8 <ce303_power+0xf80>)
 802642e:	5cd3      	ldrb	r3, [r2, r3]
 8026430:	2b29      	cmp	r3, #41	; 0x29
 8026432:	d126      	bne.n	8026482 <ce303_power+0xe1a>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 8026434:	8a3b      	ldrh	r3, [r7, #16]
 8026436:	3305      	adds	r3, #5
 8026438:	4a6b      	ldr	r2, [pc, #428]	; (80265e8 <ce303_power+0xf80>)
 802643a:	5cd3      	ldrb	r3, [r2, r3]
 802643c:	3b30      	subs	r3, #48	; 0x30
 802643e:	b29b      	uxth	r3, r3
 8026440:	461a      	mov	r2, r3
 8026442:	0092      	lsls	r2, r2, #2
 8026444:	4413      	add	r3, r2
 8026446:	461a      	mov	r2, r3
 8026448:	0091      	lsls	r1, r2, #2
 802644a:	461a      	mov	r2, r3
 802644c:	460b      	mov	r3, r1
 802644e:	4413      	add	r3, r2
 8026450:	009b      	lsls	r3, r3, #2
 8026452:	b29a      	uxth	r2, r3
 8026454:	8a3b      	ldrh	r3, [r7, #16]
 8026456:	3306      	adds	r3, #6
 8026458:	4963      	ldr	r1, [pc, #396]	; (80265e8 <ce303_power+0xf80>)
 802645a:	5ccb      	ldrb	r3, [r1, r3]
 802645c:	3b30      	subs	r3, #48	; 0x30
 802645e:	b29b      	uxth	r3, r3
 8026460:	4619      	mov	r1, r3
 8026462:	0089      	lsls	r1, r1, #2
 8026464:	440b      	add	r3, r1
 8026466:	005b      	lsls	r3, r3, #1
 8026468:	b29b      	uxth	r3, r3
 802646a:	4413      	add	r3, r2
 802646c:	b29a      	uxth	r2, r3
 802646e:	8a3b      	ldrh	r3, [r7, #16]
 8026470:	3307      	adds	r3, #7
 8026472:	495d      	ldr	r1, [pc, #372]	; (80265e8 <ce303_power+0xf80>)
 8026474:	5ccb      	ldrb	r3, [r1, r3]
 8026476:	b29b      	uxth	r3, r3
 8026478:	4413      	add	r3, r2
 802647a:	b29b      	uxth	r3, r3
 802647c:	3b30      	subs	r3, #48	; 0x30
 802647e:	82fb      	strh	r3, [r7, #22]
 8026480:	e025      	b.n	80264ce <ce303_power+0xe66>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 8026482:	8a3b      	ldrh	r3, [r7, #16]
 8026484:	3305      	adds	r3, #5
 8026486:	4a58      	ldr	r2, [pc, #352]	; (80265e8 <ce303_power+0xf80>)
 8026488:	5cd3      	ldrb	r3, [r2, r3]
 802648a:	3b30      	subs	r3, #48	; 0x30
 802648c:	b29b      	uxth	r3, r3
 802648e:	461a      	mov	r2, r3
 8026490:	0092      	lsls	r2, r2, #2
 8026492:	4413      	add	r3, r2
 8026494:	461a      	mov	r2, r3
 8026496:	0091      	lsls	r1, r2, #2
 8026498:	461a      	mov	r2, r3
 802649a:	460b      	mov	r3, r1
 802649c:	4413      	add	r3, r2
 802649e:	009b      	lsls	r3, r3, #2
 80264a0:	b29a      	uxth	r2, r3
 80264a2:	8a3b      	ldrh	r3, [r7, #16]
 80264a4:	3306      	adds	r3, #6
 80264a6:	4950      	ldr	r1, [pc, #320]	; (80265e8 <ce303_power+0xf80>)
 80264a8:	5ccb      	ldrb	r3, [r1, r3]
 80264aa:	3b30      	subs	r3, #48	; 0x30
 80264ac:	b29b      	uxth	r3, r3
 80264ae:	4619      	mov	r1, r3
 80264b0:	0089      	lsls	r1, r1, #2
 80264b2:	440b      	add	r3, r1
 80264b4:	005b      	lsls	r3, r3, #1
 80264b6:	b29b      	uxth	r3, r3
 80264b8:	4413      	add	r3, r2
 80264ba:	b29a      	uxth	r2, r3
 80264bc:	8a3b      	ldrh	r3, [r7, #16]
 80264be:	3307      	adds	r3, #7
 80264c0:	4949      	ldr	r1, [pc, #292]	; (80265e8 <ce303_power+0xf80>)
 80264c2:	5ccb      	ldrb	r3, [r1, r3]
 80264c4:	b29b      	uxth	r3, r3
 80264c6:	4413      	add	r3, r2
 80264c8:	b29b      	uxth	r3, r3
 80264ca:	3b30      	subs	r3, #48	; 0x30
 80264cc:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 80264ce:	4b47      	ldr	r3, [pc, #284]	; (80265ec <ce303_power+0xf84>)
 80264d0:	681b      	ldr	r3, [r3, #0]
 80264d2:	f04f 31ff 	mov.w	r1, #4294967295
 80264d6:	4618      	mov	r0, r3
 80264d8:	f7f2 fee6 	bl	80192a8 <osMutexWait>
				fm25v02_write(2*CE_303_POWER_B_REG, ((uint8_t)(temp>>8)) );
 80264dc:	89fb      	ldrh	r3, [r7, #14]
 80264de:	0a1b      	lsrs	r3, r3, #8
 80264e0:	b29b      	uxth	r3, r3
 80264e2:	b2db      	uxtb	r3, r3
 80264e4:	4619      	mov	r1, r3
 80264e6:	f242 0058 	movw	r0, #8280	; 0x2058
 80264ea:	f004 facf 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_B_REG+1, ((uint8_t)(temp&0x00FF)) );
 80264ee:	89fb      	ldrh	r3, [r7, #14]
 80264f0:	b2db      	uxtb	r3, r3
 80264f2:	4619      	mov	r1, r3
 80264f4:	f242 0059 	movw	r0, #8281	; 0x2059
 80264f8:	f004 fac8 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_MIL_B_REG, ((uint8_t)(temp_mil>>8)) );
 80264fc:	8afb      	ldrh	r3, [r7, #22]
 80264fe:	0a1b      	lsrs	r3, r3, #8
 8026500:	b29b      	uxth	r3, r3
 8026502:	b2db      	uxtb	r3, r3
 8026504:	4619      	mov	r1, r3
 8026506:	f242 005e 	movw	r0, #8286	; 0x205e
 802650a:	f004 fabf 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_MIL_B_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 802650e:	8afb      	ldrh	r3, [r7, #22]
 8026510:	b2db      	uxtb	r3, r3
 8026512:	4619      	mov	r1, r3
 8026514:	f242 005f 	movw	r0, #8287	; 0x205f
 8026518:	f004 fab8 	bl	802aa8c <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 802651c:	4b33      	ldr	r3, [pc, #204]	; (80265ec <ce303_power+0xf84>)
 802651e:	681b      	ldr	r3, [r3, #0]
 8026520:	4618      	mov	r0, r3
 8026522:	f7f2 ff0f 	bl	8019344 <osMutexRelease>
				status_registers.ce303_power_b_reg = temp;
 8026526:	4a32      	ldr	r2, [pc, #200]	; (80265f0 <ce303_power+0xf88>)
 8026528:	89fb      	ldrh	r3, [r7, #14]
 802652a:	f8a2 3058 	strh.w	r3, [r2, #88]	; 0x58
				status_registers.ce303_power_mil_b_reg = temp_mil;
 802652e:	4a30      	ldr	r2, [pc, #192]	; (80265f0 <ce303_power+0xf88>)
 8026530:	8afb      	ldrh	r3, [r7, #22]
 8026532:	f8a2 305e 	strh.w	r3, [r2, #94]	; 0x5e
				power_b_state = 1;
 8026536:	2301      	movs	r3, #1
 8026538:	753b      	strb	r3, [r7, #20]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 802653a:	e2b3      	b.n	8026aa4 <ce303_power+0x143c>
			}
		}

		else if( (meter_rx_buffer[i] == 0x28) && (power_a_state==1) && (power_b_state==1) && (power_c_state==0) )
 802653c:	8a3b      	ldrh	r3, [r7, #16]
 802653e:	4a2a      	ldr	r2, [pc, #168]	; (80265e8 <ce303_power+0xf80>)
 8026540:	5cd3      	ldrb	r3, [r2, r3]
 8026542:	2b28      	cmp	r3, #40	; 0x28
 8026544:	f040 82af 	bne.w	8026aa6 <ce303_power+0x143e>
 8026548:	7d7b      	ldrb	r3, [r7, #21]
 802654a:	2b01      	cmp	r3, #1
 802654c:	f040 82ab 	bne.w	8026aa6 <ce303_power+0x143e>
 8026550:	7d3b      	ldrb	r3, [r7, #20]
 8026552:	2b01      	cmp	r3, #1
 8026554:	f040 82a7 	bne.w	8026aa6 <ce303_power+0x143e>
 8026558:	7cfb      	ldrb	r3, [r7, #19]
 802655a:	2b00      	cmp	r3, #0
 802655c:	f040 82a3 	bne.w	8026aa6 <ce303_power+0x143e>
		{
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 8026560:	8a3b      	ldrh	r3, [r7, #16]
 8026562:	3302      	adds	r3, #2
 8026564:	4a20      	ldr	r2, [pc, #128]	; (80265e8 <ce303_power+0xf80>)
 8026566:	5cd3      	ldrb	r3, [r2, r3]
 8026568:	2b2e      	cmp	r3, #46	; 0x2e
 802656a:	f040 80cd 	bne.w	8026708 <ce303_power+0x10a0>
			{
				temp = (uint16_t)(meter_rx_buffer[i+1]-0x30);
 802656e:	8a3b      	ldrh	r3, [r7, #16]
 8026570:	3301      	adds	r3, #1
 8026572:	4a1d      	ldr	r2, [pc, #116]	; (80265e8 <ce303_power+0xf80>)
 8026574:	5cd3      	ldrb	r3, [r2, r3]
 8026576:	b29b      	uxth	r3, r3
 8026578:	3b30      	subs	r3, #48	; 0x30
 802657a:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+4] == 0x29 ) // если 1 разряд после запятой
 802657c:	8a3b      	ldrh	r3, [r7, #16]
 802657e:	3304      	adds	r3, #4
 8026580:	4a19      	ldr	r2, [pc, #100]	; (80265e8 <ce303_power+0xf80>)
 8026582:	5cd3      	ldrb	r3, [r2, r3]
 8026584:	2b29      	cmp	r3, #41	; 0x29
 8026586:	d110      	bne.n	80265aa <ce303_power+0xf42>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+3])-0x30)*100;
 8026588:	8a3b      	ldrh	r3, [r7, #16]
 802658a:	3303      	adds	r3, #3
 802658c:	4a16      	ldr	r2, [pc, #88]	; (80265e8 <ce303_power+0xf80>)
 802658e:	5cd3      	ldrb	r3, [r2, r3]
 8026590:	3b30      	subs	r3, #48	; 0x30
 8026592:	b29b      	uxth	r3, r3
 8026594:	461a      	mov	r2, r3
 8026596:	0092      	lsls	r2, r2, #2
 8026598:	4413      	add	r3, r2
 802659a:	461a      	mov	r2, r3
 802659c:	0091      	lsls	r1, r2, #2
 802659e:	461a      	mov	r2, r3
 80265a0:	460b      	mov	r3, r1
 80265a2:	4413      	add	r3, r2
 80265a4:	009b      	lsls	r3, r3, #2
 80265a6:	82fb      	strh	r3, [r7, #22]
 80265a8:	e077      	b.n	802669a <ce303_power+0x1032>
				}
				else if( meter_rx_buffer[i+5] == 0x29 ) // если 2 разряда после запятой
 80265aa:	8a3b      	ldrh	r3, [r7, #16]
 80265ac:	3305      	adds	r3, #5
 80265ae:	4a0e      	ldr	r2, [pc, #56]	; (80265e8 <ce303_power+0xf80>)
 80265b0:	5cd3      	ldrb	r3, [r2, r3]
 80265b2:	2b29      	cmp	r3, #41	; 0x29
 80265b4:	d11e      	bne.n	80265f4 <ce303_power+0xf8c>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+3])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+4])-0x30))*10;
 80265b6:	8a3b      	ldrh	r3, [r7, #16]
 80265b8:	3303      	adds	r3, #3
 80265ba:	4a0b      	ldr	r2, [pc, #44]	; (80265e8 <ce303_power+0xf80>)
 80265bc:	5cd3      	ldrb	r3, [r2, r3]
 80265be:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80265c2:	4613      	mov	r3, r2
 80265c4:	009b      	lsls	r3, r3, #2
 80265c6:	4413      	add	r3, r2
 80265c8:	005b      	lsls	r3, r3, #1
 80265ca:	4619      	mov	r1, r3
 80265cc:	8a3b      	ldrh	r3, [r7, #16]
 80265ce:	3304      	adds	r3, #4
 80265d0:	4a05      	ldr	r2, [pc, #20]	; (80265e8 <ce303_power+0xf80>)
 80265d2:	5cd3      	ldrb	r3, [r2, r3]
 80265d4:	3b30      	subs	r3, #48	; 0x30
 80265d6:	440b      	add	r3, r1
 80265d8:	b29b      	uxth	r3, r3
 80265da:	461a      	mov	r2, r3
 80265dc:	0092      	lsls	r2, r2, #2
 80265de:	4413      	add	r3, r2
 80265e0:	005b      	lsls	r3, r3, #1
 80265e2:	82fb      	strh	r3, [r7, #22]
 80265e4:	e059      	b.n	802669a <ce303_power+0x1032>
 80265e6:	bf00      	nop
 80265e8:	20009a0c 	.word	0x20009a0c
 80265ec:	20009bb8 	.word	0x20009bb8
 80265f0:	2000af40 	.word	0x2000af40
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 3 разряда после запятой
 80265f4:	8a3b      	ldrh	r3, [r7, #16]
 80265f6:	3306      	adds	r3, #6
 80265f8:	4ab0      	ldr	r2, [pc, #704]	; (80268bc <ce303_power+0x1254>)
 80265fa:	5cd3      	ldrb	r3, [r2, r3]
 80265fc:	2b29      	cmp	r3, #41	; 0x29
 80265fe:	d126      	bne.n	802664e <ce303_power+0xfe6>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 8026600:	8a3b      	ldrh	r3, [r7, #16]
 8026602:	3303      	adds	r3, #3
 8026604:	4aad      	ldr	r2, [pc, #692]	; (80268bc <ce303_power+0x1254>)
 8026606:	5cd3      	ldrb	r3, [r2, r3]
 8026608:	3b30      	subs	r3, #48	; 0x30
 802660a:	b29b      	uxth	r3, r3
 802660c:	461a      	mov	r2, r3
 802660e:	0092      	lsls	r2, r2, #2
 8026610:	4413      	add	r3, r2
 8026612:	461a      	mov	r2, r3
 8026614:	0091      	lsls	r1, r2, #2
 8026616:	461a      	mov	r2, r3
 8026618:	460b      	mov	r3, r1
 802661a:	4413      	add	r3, r2
 802661c:	009b      	lsls	r3, r3, #2
 802661e:	b29a      	uxth	r2, r3
 8026620:	8a3b      	ldrh	r3, [r7, #16]
 8026622:	3304      	adds	r3, #4
 8026624:	49a5      	ldr	r1, [pc, #660]	; (80268bc <ce303_power+0x1254>)
 8026626:	5ccb      	ldrb	r3, [r1, r3]
 8026628:	3b30      	subs	r3, #48	; 0x30
 802662a:	b29b      	uxth	r3, r3
 802662c:	4619      	mov	r1, r3
 802662e:	0089      	lsls	r1, r1, #2
 8026630:	440b      	add	r3, r1
 8026632:	005b      	lsls	r3, r3, #1
 8026634:	b29b      	uxth	r3, r3
 8026636:	4413      	add	r3, r2
 8026638:	b29a      	uxth	r2, r3
 802663a:	8a3b      	ldrh	r3, [r7, #16]
 802663c:	3305      	adds	r3, #5
 802663e:	499f      	ldr	r1, [pc, #636]	; (80268bc <ce303_power+0x1254>)
 8026640:	5ccb      	ldrb	r3, [r1, r3]
 8026642:	b29b      	uxth	r3, r3
 8026644:	4413      	add	r3, r2
 8026646:	b29b      	uxth	r3, r3
 8026648:	3b30      	subs	r3, #48	; 0x30
 802664a:	82fb      	strh	r3, [r7, #22]
 802664c:	e025      	b.n	802669a <ce303_power+0x1032>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 802664e:	8a3b      	ldrh	r3, [r7, #16]
 8026650:	3303      	adds	r3, #3
 8026652:	4a9a      	ldr	r2, [pc, #616]	; (80268bc <ce303_power+0x1254>)
 8026654:	5cd3      	ldrb	r3, [r2, r3]
 8026656:	3b30      	subs	r3, #48	; 0x30
 8026658:	b29b      	uxth	r3, r3
 802665a:	461a      	mov	r2, r3
 802665c:	0092      	lsls	r2, r2, #2
 802665e:	4413      	add	r3, r2
 8026660:	461a      	mov	r2, r3
 8026662:	0091      	lsls	r1, r2, #2
 8026664:	461a      	mov	r2, r3
 8026666:	460b      	mov	r3, r1
 8026668:	4413      	add	r3, r2
 802666a:	009b      	lsls	r3, r3, #2
 802666c:	b29a      	uxth	r2, r3
 802666e:	8a3b      	ldrh	r3, [r7, #16]
 8026670:	3304      	adds	r3, #4
 8026672:	4992      	ldr	r1, [pc, #584]	; (80268bc <ce303_power+0x1254>)
 8026674:	5ccb      	ldrb	r3, [r1, r3]
 8026676:	3b30      	subs	r3, #48	; 0x30
 8026678:	b29b      	uxth	r3, r3
 802667a:	4619      	mov	r1, r3
 802667c:	0089      	lsls	r1, r1, #2
 802667e:	440b      	add	r3, r1
 8026680:	005b      	lsls	r3, r3, #1
 8026682:	b29b      	uxth	r3, r3
 8026684:	4413      	add	r3, r2
 8026686:	b29a      	uxth	r2, r3
 8026688:	8a3b      	ldrh	r3, [r7, #16]
 802668a:	3305      	adds	r3, #5
 802668c:	498b      	ldr	r1, [pc, #556]	; (80268bc <ce303_power+0x1254>)
 802668e:	5ccb      	ldrb	r3, [r1, r3]
 8026690:	b29b      	uxth	r3, r3
 8026692:	4413      	add	r3, r2
 8026694:	b29b      	uxth	r3, r3
 8026696:	3b30      	subs	r3, #48	; 0x30
 8026698:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 802669a:	4b89      	ldr	r3, [pc, #548]	; (80268c0 <ce303_power+0x1258>)
 802669c:	681b      	ldr	r3, [r3, #0]
 802669e:	f04f 31ff 	mov.w	r1, #4294967295
 80266a2:	4618      	mov	r0, r3
 80266a4:	f7f2 fe00 	bl	80192a8 <osMutexWait>
				fm25v02_write(2*CE_303_POWER_C_REG, ((uint8_t)(temp>>8)) );
 80266a8:	89fb      	ldrh	r3, [r7, #14]
 80266aa:	0a1b      	lsrs	r3, r3, #8
 80266ac:	b29b      	uxth	r3, r3
 80266ae:	b2db      	uxtb	r3, r3
 80266b0:	4619      	mov	r1, r3
 80266b2:	f242 005a 	movw	r0, #8282	; 0x205a
 80266b6:	f004 f9e9 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_C_REG+1, ((uint8_t)(temp&0x00FF)) );
 80266ba:	89fb      	ldrh	r3, [r7, #14]
 80266bc:	b2db      	uxtb	r3, r3
 80266be:	4619      	mov	r1, r3
 80266c0:	f242 005b 	movw	r0, #8283	; 0x205b
 80266c4:	f004 f9e2 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_MIL_C_REG, ((uint8_t)(temp_mil>>8)) );
 80266c8:	8afb      	ldrh	r3, [r7, #22]
 80266ca:	0a1b      	lsrs	r3, r3, #8
 80266cc:	b29b      	uxth	r3, r3
 80266ce:	b2db      	uxtb	r3, r3
 80266d0:	4619      	mov	r1, r3
 80266d2:	f242 0060 	movw	r0, #8288	; 0x2060
 80266d6:	f004 f9d9 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_MIL_C_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 80266da:	8afb      	ldrh	r3, [r7, #22]
 80266dc:	b2db      	uxtb	r3, r3
 80266de:	4619      	mov	r1, r3
 80266e0:	f242 0061 	movw	r0, #8289	; 0x2061
 80266e4:	f004 f9d2 	bl	802aa8c <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 80266e8:	4b75      	ldr	r3, [pc, #468]	; (80268c0 <ce303_power+0x1258>)
 80266ea:	681b      	ldr	r3, [r3, #0]
 80266ec:	4618      	mov	r0, r3
 80266ee:	f7f2 fe29 	bl	8019344 <osMutexRelease>
				status_registers.ce303_power_c_reg = temp;
 80266f2:	4a74      	ldr	r2, [pc, #464]	; (80268c4 <ce303_power+0x125c>)
 80266f4:	89fb      	ldrh	r3, [r7, #14]
 80266f6:	f8a2 305a 	strh.w	r3, [r2, #90]	; 0x5a
				status_registers.ce303_power_mil_c_reg = temp_mil;
 80266fa:	4a72      	ldr	r2, [pc, #456]	; (80268c4 <ce303_power+0x125c>)
 80266fc:	8afb      	ldrh	r3, [r7, #22]
 80266fe:	f8a2 3060 	strh.w	r3, [r2, #96]	; 0x60
				power_c_state = 1;
 8026702:	2301      	movs	r3, #1
 8026704:	74fb      	strb	r3, [r7, #19]
 8026706:	e1ce      	b.n	8026aa6 <ce303_power+0x143e>
			}
			else if( meter_rx_buffer[i+3] == 0x2E)
 8026708:	8a3b      	ldrh	r3, [r7, #16]
 802670a:	3303      	adds	r3, #3
 802670c:	4a6b      	ldr	r2, [pc, #428]	; (80268bc <ce303_power+0x1254>)
 802670e:	5cd3      	ldrb	r3, [r2, r3]
 8026710:	2b2e      	cmp	r3, #46	; 0x2e
 8026712:	f040 80d9 	bne.w	80268c8 <ce303_power+0x1260>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+2])-0x30);
 8026716:	8a3b      	ldrh	r3, [r7, #16]
 8026718:	3301      	adds	r3, #1
 802671a:	4a68      	ldr	r2, [pc, #416]	; (80268bc <ce303_power+0x1254>)
 802671c:	5cd3      	ldrb	r3, [r2, r3]
 802671e:	3b30      	subs	r3, #48	; 0x30
 8026720:	b29b      	uxth	r3, r3
 8026722:	461a      	mov	r2, r3
 8026724:	0092      	lsls	r2, r2, #2
 8026726:	4413      	add	r3, r2
 8026728:	005b      	lsls	r3, r3, #1
 802672a:	b29a      	uxth	r2, r3
 802672c:	8a3b      	ldrh	r3, [r7, #16]
 802672e:	3302      	adds	r3, #2
 8026730:	4962      	ldr	r1, [pc, #392]	; (80268bc <ce303_power+0x1254>)
 8026732:	5ccb      	ldrb	r3, [r1, r3]
 8026734:	b29b      	uxth	r3, r3
 8026736:	4413      	add	r3, r2
 8026738:	b29b      	uxth	r3, r3
 802673a:	3b30      	subs	r3, #48	; 0x30
 802673c:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+5] == 0x29 ) // если 1 разряд после запятой
 802673e:	8a3b      	ldrh	r3, [r7, #16]
 8026740:	3305      	adds	r3, #5
 8026742:	4a5e      	ldr	r2, [pc, #376]	; (80268bc <ce303_power+0x1254>)
 8026744:	5cd3      	ldrb	r3, [r2, r3]
 8026746:	2b29      	cmp	r3, #41	; 0x29
 8026748:	d110      	bne.n	802676c <ce303_power+0x1104>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+4])-0x30)*100;
 802674a:	8a3b      	ldrh	r3, [r7, #16]
 802674c:	3304      	adds	r3, #4
 802674e:	4a5b      	ldr	r2, [pc, #364]	; (80268bc <ce303_power+0x1254>)
 8026750:	5cd3      	ldrb	r3, [r2, r3]
 8026752:	3b30      	subs	r3, #48	; 0x30
 8026754:	b29b      	uxth	r3, r3
 8026756:	461a      	mov	r2, r3
 8026758:	0092      	lsls	r2, r2, #2
 802675a:	4413      	add	r3, r2
 802675c:	461a      	mov	r2, r3
 802675e:	0091      	lsls	r1, r2, #2
 8026760:	461a      	mov	r2, r3
 8026762:	460b      	mov	r3, r1
 8026764:	4413      	add	r3, r2
 8026766:	009b      	lsls	r3, r3, #2
 8026768:	82fb      	strh	r3, [r7, #22]
 802676a:	e070      	b.n	802684e <ce303_power+0x11e6>
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 2 разряда после запятой
 802676c:	8a3b      	ldrh	r3, [r7, #16]
 802676e:	3306      	adds	r3, #6
 8026770:	4a52      	ldr	r2, [pc, #328]	; (80268bc <ce303_power+0x1254>)
 8026772:	5cd3      	ldrb	r3, [r2, r3]
 8026774:	2b29      	cmp	r3, #41	; 0x29
 8026776:	d117      	bne.n	80267a8 <ce303_power+0x1140>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30))*10;
 8026778:	8a3b      	ldrh	r3, [r7, #16]
 802677a:	3304      	adds	r3, #4
 802677c:	4a4f      	ldr	r2, [pc, #316]	; (80268bc <ce303_power+0x1254>)
 802677e:	5cd3      	ldrb	r3, [r2, r3]
 8026780:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8026784:	4613      	mov	r3, r2
 8026786:	009b      	lsls	r3, r3, #2
 8026788:	4413      	add	r3, r2
 802678a:	005b      	lsls	r3, r3, #1
 802678c:	4619      	mov	r1, r3
 802678e:	8a3b      	ldrh	r3, [r7, #16]
 8026790:	3305      	adds	r3, #5
 8026792:	4a4a      	ldr	r2, [pc, #296]	; (80268bc <ce303_power+0x1254>)
 8026794:	5cd3      	ldrb	r3, [r2, r3]
 8026796:	3b30      	subs	r3, #48	; 0x30
 8026798:	440b      	add	r3, r1
 802679a:	b29b      	uxth	r3, r3
 802679c:	461a      	mov	r2, r3
 802679e:	0092      	lsls	r2, r2, #2
 80267a0:	4413      	add	r3, r2
 80267a2:	005b      	lsls	r3, r3, #1
 80267a4:	82fb      	strh	r3, [r7, #22]
 80267a6:	e052      	b.n	802684e <ce303_power+0x11e6>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 3 разряда после запятой
 80267a8:	8a3b      	ldrh	r3, [r7, #16]
 80267aa:	3307      	adds	r3, #7
 80267ac:	4a43      	ldr	r2, [pc, #268]	; (80268bc <ce303_power+0x1254>)
 80267ae:	5cd3      	ldrb	r3, [r2, r3]
 80267b0:	2b29      	cmp	r3, #41	; 0x29
 80267b2:	d126      	bne.n	8026802 <ce303_power+0x119a>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 80267b4:	8a3b      	ldrh	r3, [r7, #16]
 80267b6:	3304      	adds	r3, #4
 80267b8:	4a40      	ldr	r2, [pc, #256]	; (80268bc <ce303_power+0x1254>)
 80267ba:	5cd3      	ldrb	r3, [r2, r3]
 80267bc:	3b30      	subs	r3, #48	; 0x30
 80267be:	b29b      	uxth	r3, r3
 80267c0:	461a      	mov	r2, r3
 80267c2:	0092      	lsls	r2, r2, #2
 80267c4:	4413      	add	r3, r2
 80267c6:	461a      	mov	r2, r3
 80267c8:	0091      	lsls	r1, r2, #2
 80267ca:	461a      	mov	r2, r3
 80267cc:	460b      	mov	r3, r1
 80267ce:	4413      	add	r3, r2
 80267d0:	009b      	lsls	r3, r3, #2
 80267d2:	b29a      	uxth	r2, r3
 80267d4:	8a3b      	ldrh	r3, [r7, #16]
 80267d6:	3305      	adds	r3, #5
 80267d8:	4938      	ldr	r1, [pc, #224]	; (80268bc <ce303_power+0x1254>)
 80267da:	5ccb      	ldrb	r3, [r1, r3]
 80267dc:	3b30      	subs	r3, #48	; 0x30
 80267de:	b29b      	uxth	r3, r3
 80267e0:	4619      	mov	r1, r3
 80267e2:	0089      	lsls	r1, r1, #2
 80267e4:	440b      	add	r3, r1
 80267e6:	005b      	lsls	r3, r3, #1
 80267e8:	b29b      	uxth	r3, r3
 80267ea:	4413      	add	r3, r2
 80267ec:	b29a      	uxth	r2, r3
 80267ee:	8a3b      	ldrh	r3, [r7, #16]
 80267f0:	3306      	adds	r3, #6
 80267f2:	4932      	ldr	r1, [pc, #200]	; (80268bc <ce303_power+0x1254>)
 80267f4:	5ccb      	ldrb	r3, [r1, r3]
 80267f6:	b29b      	uxth	r3, r3
 80267f8:	4413      	add	r3, r2
 80267fa:	b29b      	uxth	r3, r3
 80267fc:	3b30      	subs	r3, #48	; 0x30
 80267fe:	82fb      	strh	r3, [r7, #22]
 8026800:	e025      	b.n	802684e <ce303_power+0x11e6>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 8026802:	8a3b      	ldrh	r3, [r7, #16]
 8026804:	3304      	adds	r3, #4
 8026806:	4a2d      	ldr	r2, [pc, #180]	; (80268bc <ce303_power+0x1254>)
 8026808:	5cd3      	ldrb	r3, [r2, r3]
 802680a:	3b30      	subs	r3, #48	; 0x30
 802680c:	b29b      	uxth	r3, r3
 802680e:	461a      	mov	r2, r3
 8026810:	0092      	lsls	r2, r2, #2
 8026812:	4413      	add	r3, r2
 8026814:	461a      	mov	r2, r3
 8026816:	0091      	lsls	r1, r2, #2
 8026818:	461a      	mov	r2, r3
 802681a:	460b      	mov	r3, r1
 802681c:	4413      	add	r3, r2
 802681e:	009b      	lsls	r3, r3, #2
 8026820:	b29a      	uxth	r2, r3
 8026822:	8a3b      	ldrh	r3, [r7, #16]
 8026824:	3305      	adds	r3, #5
 8026826:	4925      	ldr	r1, [pc, #148]	; (80268bc <ce303_power+0x1254>)
 8026828:	5ccb      	ldrb	r3, [r1, r3]
 802682a:	3b30      	subs	r3, #48	; 0x30
 802682c:	b29b      	uxth	r3, r3
 802682e:	4619      	mov	r1, r3
 8026830:	0089      	lsls	r1, r1, #2
 8026832:	440b      	add	r3, r1
 8026834:	005b      	lsls	r3, r3, #1
 8026836:	b29b      	uxth	r3, r3
 8026838:	4413      	add	r3, r2
 802683a:	b29a      	uxth	r2, r3
 802683c:	8a3b      	ldrh	r3, [r7, #16]
 802683e:	3306      	adds	r3, #6
 8026840:	491e      	ldr	r1, [pc, #120]	; (80268bc <ce303_power+0x1254>)
 8026842:	5ccb      	ldrb	r3, [r1, r3]
 8026844:	b29b      	uxth	r3, r3
 8026846:	4413      	add	r3, r2
 8026848:	b29b      	uxth	r3, r3
 802684a:	3b30      	subs	r3, #48	; 0x30
 802684c:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 802684e:	4b1c      	ldr	r3, [pc, #112]	; (80268c0 <ce303_power+0x1258>)
 8026850:	681b      	ldr	r3, [r3, #0]
 8026852:	f04f 31ff 	mov.w	r1, #4294967295
 8026856:	4618      	mov	r0, r3
 8026858:	f7f2 fd26 	bl	80192a8 <osMutexWait>
				fm25v02_write(2*CE_303_POWER_C_REG, ((uint8_t)(temp>>8)) );
 802685c:	89fb      	ldrh	r3, [r7, #14]
 802685e:	0a1b      	lsrs	r3, r3, #8
 8026860:	b29b      	uxth	r3, r3
 8026862:	b2db      	uxtb	r3, r3
 8026864:	4619      	mov	r1, r3
 8026866:	f242 005a 	movw	r0, #8282	; 0x205a
 802686a:	f004 f90f 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_C_REG+1, ((uint8_t)(temp&0x00FF)) );
 802686e:	89fb      	ldrh	r3, [r7, #14]
 8026870:	b2db      	uxtb	r3, r3
 8026872:	4619      	mov	r1, r3
 8026874:	f242 005b 	movw	r0, #8283	; 0x205b
 8026878:	f004 f908 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_MIL_C_REG, ((uint8_t)(temp_mil>>8)) );
 802687c:	8afb      	ldrh	r3, [r7, #22]
 802687e:	0a1b      	lsrs	r3, r3, #8
 8026880:	b29b      	uxth	r3, r3
 8026882:	b2db      	uxtb	r3, r3
 8026884:	4619      	mov	r1, r3
 8026886:	f242 0060 	movw	r0, #8288	; 0x2060
 802688a:	f004 f8ff 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_MIL_C_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 802688e:	8afb      	ldrh	r3, [r7, #22]
 8026890:	b2db      	uxtb	r3, r3
 8026892:	4619      	mov	r1, r3
 8026894:	f242 0061 	movw	r0, #8289	; 0x2061
 8026898:	f004 f8f8 	bl	802aa8c <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 802689c:	4b08      	ldr	r3, [pc, #32]	; (80268c0 <ce303_power+0x1258>)
 802689e:	681b      	ldr	r3, [r3, #0]
 80268a0:	4618      	mov	r0, r3
 80268a2:	f7f2 fd4f 	bl	8019344 <osMutexRelease>
				status_registers.ce303_power_c_reg = temp;
 80268a6:	4a07      	ldr	r2, [pc, #28]	; (80268c4 <ce303_power+0x125c>)
 80268a8:	89fb      	ldrh	r3, [r7, #14]
 80268aa:	f8a2 305a 	strh.w	r3, [r2, #90]	; 0x5a
				status_registers.ce303_power_mil_c_reg = temp_mil;
 80268ae:	4a05      	ldr	r2, [pc, #20]	; (80268c4 <ce303_power+0x125c>)
 80268b0:	8afb      	ldrh	r3, [r7, #22]
 80268b2:	f8a2 3060 	strh.w	r3, [r2, #96]	; 0x60
				power_c_state = 1;
 80268b6:	2301      	movs	r3, #1
 80268b8:	74fb      	strb	r3, [r7, #19]
 80268ba:	e0f4      	b.n	8026aa6 <ce303_power+0x143e>
 80268bc:	20009a0c 	.word	0x20009a0c
 80268c0:	20009bb8 	.word	0x20009bb8
 80268c4:	2000af40 	.word	0x2000af40
			}

			else if( meter_rx_buffer[i+4] == 0x2E)
 80268c8:	8a3b      	ldrh	r3, [r7, #16]
 80268ca:	3304      	adds	r3, #4
 80268cc:	4a85      	ldr	r2, [pc, #532]	; (8026ae4 <ce303_power+0x147c>)
 80268ce:	5cd3      	ldrb	r3, [r2, r3]
 80268d0:	2b2e      	cmp	r3, #46	; 0x2e
 80268d2:	f040 80e8 	bne.w	8026aa6 <ce303_power+0x143e>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+2])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+3])-0x30);
 80268d6:	8a3b      	ldrh	r3, [r7, #16]
 80268d8:	3301      	adds	r3, #1
 80268da:	4a82      	ldr	r2, [pc, #520]	; (8026ae4 <ce303_power+0x147c>)
 80268dc:	5cd3      	ldrb	r3, [r2, r3]
 80268de:	3b30      	subs	r3, #48	; 0x30
 80268e0:	b29b      	uxth	r3, r3
 80268e2:	461a      	mov	r2, r3
 80268e4:	0092      	lsls	r2, r2, #2
 80268e6:	4413      	add	r3, r2
 80268e8:	461a      	mov	r2, r3
 80268ea:	0091      	lsls	r1, r2, #2
 80268ec:	461a      	mov	r2, r3
 80268ee:	460b      	mov	r3, r1
 80268f0:	4413      	add	r3, r2
 80268f2:	009b      	lsls	r3, r3, #2
 80268f4:	b29a      	uxth	r2, r3
 80268f6:	8a3b      	ldrh	r3, [r7, #16]
 80268f8:	3302      	adds	r3, #2
 80268fa:	497a      	ldr	r1, [pc, #488]	; (8026ae4 <ce303_power+0x147c>)
 80268fc:	5ccb      	ldrb	r3, [r1, r3]
 80268fe:	3b30      	subs	r3, #48	; 0x30
 8026900:	b29b      	uxth	r3, r3
 8026902:	4619      	mov	r1, r3
 8026904:	0089      	lsls	r1, r1, #2
 8026906:	440b      	add	r3, r1
 8026908:	005b      	lsls	r3, r3, #1
 802690a:	b29b      	uxth	r3, r3
 802690c:	4413      	add	r3, r2
 802690e:	b29a      	uxth	r2, r3
 8026910:	8a3b      	ldrh	r3, [r7, #16]
 8026912:	3303      	adds	r3, #3
 8026914:	4973      	ldr	r1, [pc, #460]	; (8026ae4 <ce303_power+0x147c>)
 8026916:	5ccb      	ldrb	r3, [r1, r3]
 8026918:	b29b      	uxth	r3, r3
 802691a:	4413      	add	r3, r2
 802691c:	b29b      	uxth	r3, r3
 802691e:	3b30      	subs	r3, #48	; 0x30
 8026920:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+6] == 0x29 ) // если 1 разряд после запятой
 8026922:	8a3b      	ldrh	r3, [r7, #16]
 8026924:	3306      	adds	r3, #6
 8026926:	4a6f      	ldr	r2, [pc, #444]	; (8026ae4 <ce303_power+0x147c>)
 8026928:	5cd3      	ldrb	r3, [r2, r3]
 802692a:	2b29      	cmp	r3, #41	; 0x29
 802692c:	d110      	bne.n	8026950 <ce303_power+0x12e8>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+5])-0x30)*100;
 802692e:	8a3b      	ldrh	r3, [r7, #16]
 8026930:	3305      	adds	r3, #5
 8026932:	4a6c      	ldr	r2, [pc, #432]	; (8026ae4 <ce303_power+0x147c>)
 8026934:	5cd3      	ldrb	r3, [r2, r3]
 8026936:	3b30      	subs	r3, #48	; 0x30
 8026938:	b29b      	uxth	r3, r3
 802693a:	461a      	mov	r2, r3
 802693c:	0092      	lsls	r2, r2, #2
 802693e:	4413      	add	r3, r2
 8026940:	461a      	mov	r2, r3
 8026942:	0091      	lsls	r1, r2, #2
 8026944:	461a      	mov	r2, r3
 8026946:	460b      	mov	r3, r1
 8026948:	4413      	add	r3, r2
 802694a:	009b      	lsls	r3, r3, #2
 802694c:	82fb      	strh	r3, [r7, #22]
 802694e:	e070      	b.n	8026a32 <ce303_power+0x13ca>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 2 разряда после запятой
 8026950:	8a3b      	ldrh	r3, [r7, #16]
 8026952:	3307      	adds	r3, #7
 8026954:	4a63      	ldr	r2, [pc, #396]	; (8026ae4 <ce303_power+0x147c>)
 8026956:	5cd3      	ldrb	r3, [r2, r3]
 8026958:	2b29      	cmp	r3, #41	; 0x29
 802695a:	d117      	bne.n	802698c <ce303_power+0x1324>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30))*10;
 802695c:	8a3b      	ldrh	r3, [r7, #16]
 802695e:	3305      	adds	r3, #5
 8026960:	4a60      	ldr	r2, [pc, #384]	; (8026ae4 <ce303_power+0x147c>)
 8026962:	5cd3      	ldrb	r3, [r2, r3]
 8026964:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8026968:	4613      	mov	r3, r2
 802696a:	009b      	lsls	r3, r3, #2
 802696c:	4413      	add	r3, r2
 802696e:	005b      	lsls	r3, r3, #1
 8026970:	4619      	mov	r1, r3
 8026972:	8a3b      	ldrh	r3, [r7, #16]
 8026974:	3306      	adds	r3, #6
 8026976:	4a5b      	ldr	r2, [pc, #364]	; (8026ae4 <ce303_power+0x147c>)
 8026978:	5cd3      	ldrb	r3, [r2, r3]
 802697a:	3b30      	subs	r3, #48	; 0x30
 802697c:	440b      	add	r3, r1
 802697e:	b29b      	uxth	r3, r3
 8026980:	461a      	mov	r2, r3
 8026982:	0092      	lsls	r2, r2, #2
 8026984:	4413      	add	r3, r2
 8026986:	005b      	lsls	r3, r3, #1
 8026988:	82fb      	strh	r3, [r7, #22]
 802698a:	e052      	b.n	8026a32 <ce303_power+0x13ca>
				}
				else if( meter_rx_buffer[i+8] == 0x29 ) // если 3 разряда после запятой
 802698c:	8a3b      	ldrh	r3, [r7, #16]
 802698e:	3308      	adds	r3, #8
 8026990:	4a54      	ldr	r2, [pc, #336]	; (8026ae4 <ce303_power+0x147c>)
 8026992:	5cd3      	ldrb	r3, [r2, r3]
 8026994:	2b29      	cmp	r3, #41	; 0x29
 8026996:	d126      	bne.n	80269e6 <ce303_power+0x137e>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 8026998:	8a3b      	ldrh	r3, [r7, #16]
 802699a:	3305      	adds	r3, #5
 802699c:	4a51      	ldr	r2, [pc, #324]	; (8026ae4 <ce303_power+0x147c>)
 802699e:	5cd3      	ldrb	r3, [r2, r3]
 80269a0:	3b30      	subs	r3, #48	; 0x30
 80269a2:	b29b      	uxth	r3, r3
 80269a4:	461a      	mov	r2, r3
 80269a6:	0092      	lsls	r2, r2, #2
 80269a8:	4413      	add	r3, r2
 80269aa:	461a      	mov	r2, r3
 80269ac:	0091      	lsls	r1, r2, #2
 80269ae:	461a      	mov	r2, r3
 80269b0:	460b      	mov	r3, r1
 80269b2:	4413      	add	r3, r2
 80269b4:	009b      	lsls	r3, r3, #2
 80269b6:	b29a      	uxth	r2, r3
 80269b8:	8a3b      	ldrh	r3, [r7, #16]
 80269ba:	3306      	adds	r3, #6
 80269bc:	4949      	ldr	r1, [pc, #292]	; (8026ae4 <ce303_power+0x147c>)
 80269be:	5ccb      	ldrb	r3, [r1, r3]
 80269c0:	3b30      	subs	r3, #48	; 0x30
 80269c2:	b29b      	uxth	r3, r3
 80269c4:	4619      	mov	r1, r3
 80269c6:	0089      	lsls	r1, r1, #2
 80269c8:	440b      	add	r3, r1
 80269ca:	005b      	lsls	r3, r3, #1
 80269cc:	b29b      	uxth	r3, r3
 80269ce:	4413      	add	r3, r2
 80269d0:	b29a      	uxth	r2, r3
 80269d2:	8a3b      	ldrh	r3, [r7, #16]
 80269d4:	3307      	adds	r3, #7
 80269d6:	4943      	ldr	r1, [pc, #268]	; (8026ae4 <ce303_power+0x147c>)
 80269d8:	5ccb      	ldrb	r3, [r1, r3]
 80269da:	b29b      	uxth	r3, r3
 80269dc:	4413      	add	r3, r2
 80269de:	b29b      	uxth	r3, r3
 80269e0:	3b30      	subs	r3, #48	; 0x30
 80269e2:	82fb      	strh	r3, [r7, #22]
 80269e4:	e025      	b.n	8026a32 <ce303_power+0x13ca>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 80269e6:	8a3b      	ldrh	r3, [r7, #16]
 80269e8:	3305      	adds	r3, #5
 80269ea:	4a3e      	ldr	r2, [pc, #248]	; (8026ae4 <ce303_power+0x147c>)
 80269ec:	5cd3      	ldrb	r3, [r2, r3]
 80269ee:	3b30      	subs	r3, #48	; 0x30
 80269f0:	b29b      	uxth	r3, r3
 80269f2:	461a      	mov	r2, r3
 80269f4:	0092      	lsls	r2, r2, #2
 80269f6:	4413      	add	r3, r2
 80269f8:	461a      	mov	r2, r3
 80269fa:	0091      	lsls	r1, r2, #2
 80269fc:	461a      	mov	r2, r3
 80269fe:	460b      	mov	r3, r1
 8026a00:	4413      	add	r3, r2
 8026a02:	009b      	lsls	r3, r3, #2
 8026a04:	b29a      	uxth	r2, r3
 8026a06:	8a3b      	ldrh	r3, [r7, #16]
 8026a08:	3306      	adds	r3, #6
 8026a0a:	4936      	ldr	r1, [pc, #216]	; (8026ae4 <ce303_power+0x147c>)
 8026a0c:	5ccb      	ldrb	r3, [r1, r3]
 8026a0e:	3b30      	subs	r3, #48	; 0x30
 8026a10:	b29b      	uxth	r3, r3
 8026a12:	4619      	mov	r1, r3
 8026a14:	0089      	lsls	r1, r1, #2
 8026a16:	440b      	add	r3, r1
 8026a18:	005b      	lsls	r3, r3, #1
 8026a1a:	b29b      	uxth	r3, r3
 8026a1c:	4413      	add	r3, r2
 8026a1e:	b29a      	uxth	r2, r3
 8026a20:	8a3b      	ldrh	r3, [r7, #16]
 8026a22:	3307      	adds	r3, #7
 8026a24:	492f      	ldr	r1, [pc, #188]	; (8026ae4 <ce303_power+0x147c>)
 8026a26:	5ccb      	ldrb	r3, [r1, r3]
 8026a28:	b29b      	uxth	r3, r3
 8026a2a:	4413      	add	r3, r2
 8026a2c:	b29b      	uxth	r3, r3
 8026a2e:	3b30      	subs	r3, #48	; 0x30
 8026a30:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8026a32:	4b2d      	ldr	r3, [pc, #180]	; (8026ae8 <ce303_power+0x1480>)
 8026a34:	681b      	ldr	r3, [r3, #0]
 8026a36:	f04f 31ff 	mov.w	r1, #4294967295
 8026a3a:	4618      	mov	r0, r3
 8026a3c:	f7f2 fc34 	bl	80192a8 <osMutexWait>
				fm25v02_write(2*CE_303_POWER_C_REG, ((uint8_t)(temp>>8)) );
 8026a40:	89fb      	ldrh	r3, [r7, #14]
 8026a42:	0a1b      	lsrs	r3, r3, #8
 8026a44:	b29b      	uxth	r3, r3
 8026a46:	b2db      	uxtb	r3, r3
 8026a48:	4619      	mov	r1, r3
 8026a4a:	f242 005a 	movw	r0, #8282	; 0x205a
 8026a4e:	f004 f81d 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_C_REG+1, ((uint8_t)(temp&0x00FF)) );
 8026a52:	89fb      	ldrh	r3, [r7, #14]
 8026a54:	b2db      	uxtb	r3, r3
 8026a56:	4619      	mov	r1, r3
 8026a58:	f242 005b 	movw	r0, #8283	; 0x205b
 8026a5c:	f004 f816 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_MIL_C_REG, ((uint8_t)(temp_mil>>8)) );
 8026a60:	8afb      	ldrh	r3, [r7, #22]
 8026a62:	0a1b      	lsrs	r3, r3, #8
 8026a64:	b29b      	uxth	r3, r3
 8026a66:	b2db      	uxtb	r3, r3
 8026a68:	4619      	mov	r1, r3
 8026a6a:	f242 0060 	movw	r0, #8288	; 0x2060
 8026a6e:	f004 f80d 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_MIL_C_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 8026a72:	8afb      	ldrh	r3, [r7, #22]
 8026a74:	b2db      	uxtb	r3, r3
 8026a76:	4619      	mov	r1, r3
 8026a78:	f242 0061 	movw	r0, #8289	; 0x2061
 8026a7c:	f004 f806 	bl	802aa8c <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8026a80:	4b19      	ldr	r3, [pc, #100]	; (8026ae8 <ce303_power+0x1480>)
 8026a82:	681b      	ldr	r3, [r3, #0]
 8026a84:	4618      	mov	r0, r3
 8026a86:	f7f2 fc5d 	bl	8019344 <osMutexRelease>
				status_registers.ce303_power_c_reg = temp;
 8026a8a:	4a18      	ldr	r2, [pc, #96]	; (8026aec <ce303_power+0x1484>)
 8026a8c:	89fb      	ldrh	r3, [r7, #14]
 8026a8e:	f8a2 305a 	strh.w	r3, [r2, #90]	; 0x5a
				status_registers.ce303_power_mil_c_reg = temp_mil;
 8026a92:	4a16      	ldr	r2, [pc, #88]	; (8026aec <ce303_power+0x1484>)
 8026a94:	8afb      	ldrh	r3, [r7, #22]
 8026a96:	f8a2 3060 	strh.w	r3, [r2, #96]	; 0x60
				power_c_state = 1;
 8026a9a:	2301      	movs	r3, #1
 8026a9c:	74fb      	strb	r3, [r7, #19]
 8026a9e:	e002      	b.n	8026aa6 <ce303_power+0x143e>
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 8026aa0:	bf00      	nop
 8026aa2:	e000      	b.n	8026aa6 <ce303_power+0x143e>
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 8026aa4:	bf00      	nop
	for(uint16_t i=0; i<256; i++)
 8026aa6:	8a3b      	ldrh	r3, [r7, #16]
 8026aa8:	3301      	adds	r3, #1
 8026aaa:	823b      	strh	r3, [r7, #16]
 8026aac:	8a3b      	ldrh	r3, [r7, #16]
 8026aae:	2bff      	cmp	r3, #255	; 0xff
 8026ab0:	f67e afd1 	bls.w	8025a56 <ce303_power+0x3ee>
			}
		}

	}

	meter_rx_number = 0;
 8026ab4:	4b0e      	ldr	r3, [pc, #56]	; (8026af0 <ce303_power+0x1488>)
 8026ab6:	2200      	movs	r2, #0
 8026ab8:	701a      	strb	r2, [r3, #0]
	meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 8026aba:	f7fc f925 	bl	8022d08 <meter_rx_buffer_clear>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 8026abe:	2201      	movs	r2, #1
 8026ac0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8026ac4:	480b      	ldr	r0, [pc, #44]	; (8026af4 <ce303_power+0x148c>)
 8026ac6:	f7ed fee3 	bl	8014890 <HAL_GPIO_WritePin>
	HAL_UART_Transmit_DMA(&huart6, &end_buf[0], 5); // передаем команду
 8026aca:	2205      	movs	r2, #5
 8026acc:	490a      	ldr	r1, [pc, #40]	; (8026af8 <ce303_power+0x1490>)
 8026ace:	480b      	ldr	r0, [pc, #44]	; (8026afc <ce303_power+0x1494>)
 8026ad0:	f7f1 f9aa 	bl	8017e28 <HAL_UART_Transmit_DMA>
	HAL_Delay(1000);
 8026ad4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8026ad8:	f7ec f9f6 	bl	8012ec8 <HAL_Delay>

}
 8026adc:	bf00      	nop
 8026ade:	3718      	adds	r7, #24
 8026ae0:	46bd      	mov	sp, r7
 8026ae2:	bd80      	pop	{r7, pc}
 8026ae4:	20009a0c 	.word	0x20009a0c
 8026ae8:	20009bb8 	.word	0x20009bb8
 8026aec:	2000af40 	.word	0x2000af40
 8026af0:	20000865 	.word	0x20000865
 8026af4:	40021800 	.word	0x40021800
 8026af8:	20000038 	.word	0x20000038
 8026afc:	20009dc4 	.word	0x20009dc4

08026b00 <ce303_tarif>:

void ce303_tarif (uint8_t meter_id)
{
 8026b00:	b580      	push	{r7, lr}
 8026b02:	b086      	sub	sp, #24
 8026b04:	af00      	add	r7, sp, #0
 8026b06:	4603      	mov	r3, r0
 8026b08:	71fb      	strb	r3, [r7, #7]
	uint8_t tarif_2_state;
	uint8_t tarif_3_state;
	uint8_t tarif_4_state;
	uint8_t tarif_5_state;

	if( (meter_id>99)&&(meter_id<1000) )
 8026b0a:	79fb      	ldrb	r3, [r7, #7]
 8026b0c:	2b63      	cmp	r3, #99	; 0x63
 8026b0e:	d962      	bls.n	8026bd6 <ce303_tarif+0xd6>
	{
		start_buf[0] = 0x2F;
 8026b10:	4b9d      	ldr	r3, [pc, #628]	; (8026d88 <ce303_tarif+0x288>)
 8026b12:	222f      	movs	r2, #47	; 0x2f
 8026b14:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 8026b16:	4b9c      	ldr	r3, [pc, #624]	; (8026d88 <ce303_tarif+0x288>)
 8026b18:	223f      	movs	r2, #63	; 0x3f
 8026b1a:	705a      	strb	r2, [r3, #1]
		start_buf[2] = (meter_id/100) + 0x30;
 8026b1c:	79fb      	ldrb	r3, [r7, #7]
 8026b1e:	4a9b      	ldr	r2, [pc, #620]	; (8026d8c <ce303_tarif+0x28c>)
 8026b20:	fba2 2303 	umull	r2, r3, r2, r3
 8026b24:	095b      	lsrs	r3, r3, #5
 8026b26:	b2db      	uxtb	r3, r3
 8026b28:	3330      	adds	r3, #48	; 0x30
 8026b2a:	b2da      	uxtb	r2, r3
 8026b2c:	4b96      	ldr	r3, [pc, #600]	; (8026d88 <ce303_tarif+0x288>)
 8026b2e:	709a      	strb	r2, [r3, #2]
		start_buf[3] = ((meter_id - (meter_id/100)*100)/10) + 0x30;
 8026b30:	79fa      	ldrb	r2, [r7, #7]
 8026b32:	79fb      	ldrb	r3, [r7, #7]
 8026b34:	4995      	ldr	r1, [pc, #596]	; (8026d8c <ce303_tarif+0x28c>)
 8026b36:	fba1 1303 	umull	r1, r3, r1, r3
 8026b3a:	095b      	lsrs	r3, r3, #5
 8026b3c:	b2db      	uxtb	r3, r3
 8026b3e:	4619      	mov	r1, r3
 8026b40:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8026b44:	fb03 f301 	mul.w	r3, r3, r1
 8026b48:	4413      	add	r3, r2
 8026b4a:	4a91      	ldr	r2, [pc, #580]	; (8026d90 <ce303_tarif+0x290>)
 8026b4c:	fb82 1203 	smull	r1, r2, r2, r3
 8026b50:	1092      	asrs	r2, r2, #2
 8026b52:	17db      	asrs	r3, r3, #31
 8026b54:	1ad3      	subs	r3, r2, r3
 8026b56:	b2db      	uxtb	r3, r3
 8026b58:	3330      	adds	r3, #48	; 0x30
 8026b5a:	b2da      	uxtb	r2, r3
 8026b5c:	4b8a      	ldr	r3, [pc, #552]	; (8026d88 <ce303_tarif+0x288>)
 8026b5e:	70da      	strb	r2, [r3, #3]
		start_buf[4] = ((meter_id - ((meter_id/100)*100)) - (((meter_id - ((meter_id/100)*100))/10)*10)) + 0x30 ;
 8026b60:	79fa      	ldrb	r2, [r7, #7]
 8026b62:	79fb      	ldrb	r3, [r7, #7]
 8026b64:	4989      	ldr	r1, [pc, #548]	; (8026d8c <ce303_tarif+0x28c>)
 8026b66:	fba1 1303 	umull	r1, r3, r1, r3
 8026b6a:	095b      	lsrs	r3, r3, #5
 8026b6c:	b2db      	uxtb	r3, r3
 8026b6e:	4619      	mov	r1, r3
 8026b70:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8026b74:	fb03 f301 	mul.w	r3, r3, r1
 8026b78:	441a      	add	r2, r3
 8026b7a:	4b85      	ldr	r3, [pc, #532]	; (8026d90 <ce303_tarif+0x290>)
 8026b7c:	fb83 1302 	smull	r1, r3, r3, r2
 8026b80:	1099      	asrs	r1, r3, #2
 8026b82:	17d3      	asrs	r3, r2, #31
 8026b84:	1ac9      	subs	r1, r1, r3
 8026b86:	460b      	mov	r3, r1
 8026b88:	009b      	lsls	r3, r3, #2
 8026b8a:	440b      	add	r3, r1
 8026b8c:	005b      	lsls	r3, r3, #1
 8026b8e:	1ad1      	subs	r1, r2, r3
 8026b90:	b2cb      	uxtb	r3, r1
 8026b92:	3330      	adds	r3, #48	; 0x30
 8026b94:	b2da      	uxtb	r2, r3
 8026b96:	4b7c      	ldr	r3, [pc, #496]	; (8026d88 <ce303_tarif+0x288>)
 8026b98:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x21;
 8026b9a:	4b7b      	ldr	r3, [pc, #492]	; (8026d88 <ce303_tarif+0x288>)
 8026b9c:	2221      	movs	r2, #33	; 0x21
 8026b9e:	715a      	strb	r2, [r3, #5]
		start_buf[6] = 0x0D;
 8026ba0:	4b79      	ldr	r3, [pc, #484]	; (8026d88 <ce303_tarif+0x288>)
 8026ba2:	220d      	movs	r2, #13
 8026ba4:	719a      	strb	r2, [r3, #6]
		start_buf[7] = 0x0A;
 8026ba6:	4b78      	ldr	r3, [pc, #480]	; (8026d88 <ce303_tarif+0x288>)
 8026ba8:	220a      	movs	r2, #10
 8026baa:	71da      	strb	r2, [r3, #7]

		meter_rx_number = 0;
 8026bac:	4b79      	ldr	r3, [pc, #484]	; (8026d94 <ce303_tarif+0x294>)
 8026bae:	2200      	movs	r2, #0
 8026bb0:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 8026bb2:	f7fc f8a9 	bl	8022d08 <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 8026bb6:	2201      	movs	r2, #1
 8026bb8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8026bbc:	4876      	ldr	r0, [pc, #472]	; (8026d98 <ce303_tarif+0x298>)
 8026bbe:	f7ed fe67 	bl	8014890 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 8); // передаем команду
 8026bc2:	2208      	movs	r2, #8
 8026bc4:	4970      	ldr	r1, [pc, #448]	; (8026d88 <ce303_tarif+0x288>)
 8026bc6:	4875      	ldr	r0, [pc, #468]	; (8026d9c <ce303_tarif+0x29c>)
 8026bc8:	f7f1 f92e 	bl	8017e28 <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 8026bcc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8026bd0:	f7ec f97a 	bl	8012ec8 <HAL_Delay>
 8026bd4:	e072      	b.n	8026cbc <ce303_tarif+0x1bc>

	}
	else if( (meter_id>9)&&(meter_id<100) )
 8026bd6:	79fb      	ldrb	r3, [r7, #7]
 8026bd8:	2b09      	cmp	r3, #9
 8026bda:	d944      	bls.n	8026c66 <ce303_tarif+0x166>
 8026bdc:	79fb      	ldrb	r3, [r7, #7]
 8026bde:	2b63      	cmp	r3, #99	; 0x63
 8026be0:	d841      	bhi.n	8026c66 <ce303_tarif+0x166>
	{
		start_buf[0] = 0x2F;
 8026be2:	4b69      	ldr	r3, [pc, #420]	; (8026d88 <ce303_tarif+0x288>)
 8026be4:	222f      	movs	r2, #47	; 0x2f
 8026be6:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 8026be8:	4b67      	ldr	r3, [pc, #412]	; (8026d88 <ce303_tarif+0x288>)
 8026bea:	223f      	movs	r2, #63	; 0x3f
 8026bec:	705a      	strb	r2, [r3, #1]
		start_buf[2] = (meter_id/10) + 0x30;
 8026bee:	79fb      	ldrb	r3, [r7, #7]
 8026bf0:	4a6b      	ldr	r2, [pc, #428]	; (8026da0 <ce303_tarif+0x2a0>)
 8026bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8026bf6:	08db      	lsrs	r3, r3, #3
 8026bf8:	b2db      	uxtb	r3, r3
 8026bfa:	3330      	adds	r3, #48	; 0x30
 8026bfc:	b2da      	uxtb	r2, r3
 8026bfe:	4b62      	ldr	r3, [pc, #392]	; (8026d88 <ce303_tarif+0x288>)
 8026c00:	709a      	strb	r2, [r3, #2]
		start_buf[3] = (meter_id - ((meter_id/10)*10)) + 0x30;
 8026c02:	79fb      	ldrb	r3, [r7, #7]
 8026c04:	4a66      	ldr	r2, [pc, #408]	; (8026da0 <ce303_tarif+0x2a0>)
 8026c06:	fba2 2303 	umull	r2, r3, r2, r3
 8026c0a:	08db      	lsrs	r3, r3, #3
 8026c0c:	b2db      	uxtb	r3, r3
 8026c0e:	461a      	mov	r2, r3
 8026c10:	0152      	lsls	r2, r2, #5
 8026c12:	1ad2      	subs	r2, r2, r3
 8026c14:	0092      	lsls	r2, r2, #2
 8026c16:	1ad3      	subs	r3, r2, r3
 8026c18:	005b      	lsls	r3, r3, #1
 8026c1a:	b2da      	uxtb	r2, r3
 8026c1c:	79fb      	ldrb	r3, [r7, #7]
 8026c1e:	4413      	add	r3, r2
 8026c20:	b2db      	uxtb	r3, r3
 8026c22:	3330      	adds	r3, #48	; 0x30
 8026c24:	b2da      	uxtb	r2, r3
 8026c26:	4b58      	ldr	r3, [pc, #352]	; (8026d88 <ce303_tarif+0x288>)
 8026c28:	70da      	strb	r2, [r3, #3]
		start_buf[4] = 0x21;
 8026c2a:	4b57      	ldr	r3, [pc, #348]	; (8026d88 <ce303_tarif+0x288>)
 8026c2c:	2221      	movs	r2, #33	; 0x21
 8026c2e:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x0D;
 8026c30:	4b55      	ldr	r3, [pc, #340]	; (8026d88 <ce303_tarif+0x288>)
 8026c32:	220d      	movs	r2, #13
 8026c34:	715a      	strb	r2, [r3, #5]
		start_buf[6] = 0x0A;
 8026c36:	4b54      	ldr	r3, [pc, #336]	; (8026d88 <ce303_tarif+0x288>)
 8026c38:	220a      	movs	r2, #10
 8026c3a:	719a      	strb	r2, [r3, #6]

		meter_rx_number = 0;
 8026c3c:	4b55      	ldr	r3, [pc, #340]	; (8026d94 <ce303_tarif+0x294>)
 8026c3e:	2200      	movs	r2, #0
 8026c40:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 8026c42:	f7fc f861 	bl	8022d08 <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 8026c46:	2201      	movs	r2, #1
 8026c48:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8026c4c:	4852      	ldr	r0, [pc, #328]	; (8026d98 <ce303_tarif+0x298>)
 8026c4e:	f7ed fe1f 	bl	8014890 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 7); // передаем команду
 8026c52:	2207      	movs	r2, #7
 8026c54:	494c      	ldr	r1, [pc, #304]	; (8026d88 <ce303_tarif+0x288>)
 8026c56:	4851      	ldr	r0, [pc, #324]	; (8026d9c <ce303_tarif+0x29c>)
 8026c58:	f7f1 f8e6 	bl	8017e28 <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 8026c5c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8026c60:	f7ec f932 	bl	8012ec8 <HAL_Delay>
 8026c64:	e02a      	b.n	8026cbc <ce303_tarif+0x1bc>

	}
	else if( (meter_id>=0)&&(meter_id<10) )
 8026c66:	79fb      	ldrb	r3, [r7, #7]
 8026c68:	2b09      	cmp	r3, #9
 8026c6a:	d827      	bhi.n	8026cbc <ce303_tarif+0x1bc>
	{
		start_buf[0] = 0x2F;
 8026c6c:	4b46      	ldr	r3, [pc, #280]	; (8026d88 <ce303_tarif+0x288>)
 8026c6e:	222f      	movs	r2, #47	; 0x2f
 8026c70:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 8026c72:	4b45      	ldr	r3, [pc, #276]	; (8026d88 <ce303_tarif+0x288>)
 8026c74:	223f      	movs	r2, #63	; 0x3f
 8026c76:	705a      	strb	r2, [r3, #1]
		start_buf[2] = meter_id + 0x30;
 8026c78:	79fb      	ldrb	r3, [r7, #7]
 8026c7a:	3330      	adds	r3, #48	; 0x30
 8026c7c:	b2da      	uxtb	r2, r3
 8026c7e:	4b42      	ldr	r3, [pc, #264]	; (8026d88 <ce303_tarif+0x288>)
 8026c80:	709a      	strb	r2, [r3, #2]
		start_buf[3] = 0x21;
 8026c82:	4b41      	ldr	r3, [pc, #260]	; (8026d88 <ce303_tarif+0x288>)
 8026c84:	2221      	movs	r2, #33	; 0x21
 8026c86:	70da      	strb	r2, [r3, #3]
		start_buf[4] = 0x0D;
 8026c88:	4b3f      	ldr	r3, [pc, #252]	; (8026d88 <ce303_tarif+0x288>)
 8026c8a:	220d      	movs	r2, #13
 8026c8c:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x0A;
 8026c8e:	4b3e      	ldr	r3, [pc, #248]	; (8026d88 <ce303_tarif+0x288>)
 8026c90:	220a      	movs	r2, #10
 8026c92:	715a      	strb	r2, [r3, #5]

		meter_rx_number = 0;
 8026c94:	4b3f      	ldr	r3, [pc, #252]	; (8026d94 <ce303_tarif+0x294>)
 8026c96:	2200      	movs	r2, #0
 8026c98:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 8026c9a:	f7fc f835 	bl	8022d08 <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 8026c9e:	2201      	movs	r2, #1
 8026ca0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8026ca4:	483c      	ldr	r0, [pc, #240]	; (8026d98 <ce303_tarif+0x298>)
 8026ca6:	f7ed fdf3 	bl	8014890 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 6); // передаем команду
 8026caa:	2206      	movs	r2, #6
 8026cac:	4936      	ldr	r1, [pc, #216]	; (8026d88 <ce303_tarif+0x288>)
 8026cae:	483b      	ldr	r0, [pc, #236]	; (8026d9c <ce303_tarif+0x29c>)
 8026cb0:	f7f1 f8ba 	bl	8017e28 <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 8026cb4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8026cb8:	f7ec f906 	bl	8012ec8 <HAL_Delay>
	}

	if( (meter_id>99)&&(meter_id<1000) )
 8026cbc:	79fb      	ldrb	r3, [r7, #7]
 8026cbe:	2b63      	cmp	r3, #99	; 0x63
 8026cc0:	d970      	bls.n	8026da4 <ce303_tarif+0x2a4>
	{
		start_buf[0] = 0x2F;
 8026cc2:	4b31      	ldr	r3, [pc, #196]	; (8026d88 <ce303_tarif+0x288>)
 8026cc4:	222f      	movs	r2, #47	; 0x2f
 8026cc6:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 8026cc8:	4b2f      	ldr	r3, [pc, #188]	; (8026d88 <ce303_tarif+0x288>)
 8026cca:	223f      	movs	r2, #63	; 0x3f
 8026ccc:	705a      	strb	r2, [r3, #1]
		start_buf[2] = (meter_id/100) + 0x30;
 8026cce:	79fb      	ldrb	r3, [r7, #7]
 8026cd0:	4a2e      	ldr	r2, [pc, #184]	; (8026d8c <ce303_tarif+0x28c>)
 8026cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8026cd6:	095b      	lsrs	r3, r3, #5
 8026cd8:	b2db      	uxtb	r3, r3
 8026cda:	3330      	adds	r3, #48	; 0x30
 8026cdc:	b2da      	uxtb	r2, r3
 8026cde:	4b2a      	ldr	r3, [pc, #168]	; (8026d88 <ce303_tarif+0x288>)
 8026ce0:	709a      	strb	r2, [r3, #2]
		start_buf[3] = ((meter_id - (meter_id/100)*100)/10) + 0x30;
 8026ce2:	79fa      	ldrb	r2, [r7, #7]
 8026ce4:	79fb      	ldrb	r3, [r7, #7]
 8026ce6:	4929      	ldr	r1, [pc, #164]	; (8026d8c <ce303_tarif+0x28c>)
 8026ce8:	fba1 1303 	umull	r1, r3, r1, r3
 8026cec:	095b      	lsrs	r3, r3, #5
 8026cee:	b2db      	uxtb	r3, r3
 8026cf0:	4619      	mov	r1, r3
 8026cf2:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8026cf6:	fb03 f301 	mul.w	r3, r3, r1
 8026cfa:	4413      	add	r3, r2
 8026cfc:	4a24      	ldr	r2, [pc, #144]	; (8026d90 <ce303_tarif+0x290>)
 8026cfe:	fb82 1203 	smull	r1, r2, r2, r3
 8026d02:	1092      	asrs	r2, r2, #2
 8026d04:	17db      	asrs	r3, r3, #31
 8026d06:	1ad3      	subs	r3, r2, r3
 8026d08:	b2db      	uxtb	r3, r3
 8026d0a:	3330      	adds	r3, #48	; 0x30
 8026d0c:	b2da      	uxtb	r2, r3
 8026d0e:	4b1e      	ldr	r3, [pc, #120]	; (8026d88 <ce303_tarif+0x288>)
 8026d10:	70da      	strb	r2, [r3, #3]
		start_buf[4] = ((meter_id - ((meter_id/100)*100)) - (((meter_id - ((meter_id/100)*100))/10)*10)) + 0x30 ;
 8026d12:	79fa      	ldrb	r2, [r7, #7]
 8026d14:	79fb      	ldrb	r3, [r7, #7]
 8026d16:	491d      	ldr	r1, [pc, #116]	; (8026d8c <ce303_tarif+0x28c>)
 8026d18:	fba1 1303 	umull	r1, r3, r1, r3
 8026d1c:	095b      	lsrs	r3, r3, #5
 8026d1e:	b2db      	uxtb	r3, r3
 8026d20:	4619      	mov	r1, r3
 8026d22:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8026d26:	fb03 f301 	mul.w	r3, r3, r1
 8026d2a:	441a      	add	r2, r3
 8026d2c:	4b18      	ldr	r3, [pc, #96]	; (8026d90 <ce303_tarif+0x290>)
 8026d2e:	fb83 1302 	smull	r1, r3, r3, r2
 8026d32:	1099      	asrs	r1, r3, #2
 8026d34:	17d3      	asrs	r3, r2, #31
 8026d36:	1ac9      	subs	r1, r1, r3
 8026d38:	460b      	mov	r3, r1
 8026d3a:	009b      	lsls	r3, r3, #2
 8026d3c:	440b      	add	r3, r1
 8026d3e:	005b      	lsls	r3, r3, #1
 8026d40:	1ad1      	subs	r1, r2, r3
 8026d42:	b2cb      	uxtb	r3, r1
 8026d44:	3330      	adds	r3, #48	; 0x30
 8026d46:	b2da      	uxtb	r2, r3
 8026d48:	4b0f      	ldr	r3, [pc, #60]	; (8026d88 <ce303_tarif+0x288>)
 8026d4a:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x21;
 8026d4c:	4b0e      	ldr	r3, [pc, #56]	; (8026d88 <ce303_tarif+0x288>)
 8026d4e:	2221      	movs	r2, #33	; 0x21
 8026d50:	715a      	strb	r2, [r3, #5]
		start_buf[6] = 0x0D;
 8026d52:	4b0d      	ldr	r3, [pc, #52]	; (8026d88 <ce303_tarif+0x288>)
 8026d54:	220d      	movs	r2, #13
 8026d56:	719a      	strb	r2, [r3, #6]
		start_buf[7] = 0x0A;
 8026d58:	4b0b      	ldr	r3, [pc, #44]	; (8026d88 <ce303_tarif+0x288>)
 8026d5a:	220a      	movs	r2, #10
 8026d5c:	71da      	strb	r2, [r3, #7]

		meter_rx_number = 0;
 8026d5e:	4b0d      	ldr	r3, [pc, #52]	; (8026d94 <ce303_tarif+0x294>)
 8026d60:	2200      	movs	r2, #0
 8026d62:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 8026d64:	f7fb ffd0 	bl	8022d08 <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 8026d68:	2201      	movs	r2, #1
 8026d6a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8026d6e:	480a      	ldr	r0, [pc, #40]	; (8026d98 <ce303_tarif+0x298>)
 8026d70:	f7ed fd8e 	bl	8014890 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 8); // передаем команду
 8026d74:	2208      	movs	r2, #8
 8026d76:	4904      	ldr	r1, [pc, #16]	; (8026d88 <ce303_tarif+0x288>)
 8026d78:	4808      	ldr	r0, [pc, #32]	; (8026d9c <ce303_tarif+0x29c>)
 8026d7a:	f7f1 f855 	bl	8017e28 <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 8026d7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8026d82:	f7ec f8a1 	bl	8012ec8 <HAL_Delay>
 8026d86:	e080      	b.n	8026e8a <ce303_tarif+0x38a>
 8026d88:	20000018 	.word	0x20000018
 8026d8c:	51eb851f 	.word	0x51eb851f
 8026d90:	66666667 	.word	0x66666667
 8026d94:	20000865 	.word	0x20000865
 8026d98:	40021800 	.word	0x40021800
 8026d9c:	20009dc4 	.word	0x20009dc4
 8026da0:	cccccccd 	.word	0xcccccccd

	}
	else if( (meter_id>9)&&(meter_id<100) )
 8026da4:	79fb      	ldrb	r3, [r7, #7]
 8026da6:	2b09      	cmp	r3, #9
 8026da8:	d944      	bls.n	8026e34 <ce303_tarif+0x334>
 8026daa:	79fb      	ldrb	r3, [r7, #7]
 8026dac:	2b63      	cmp	r3, #99	; 0x63
 8026dae:	d841      	bhi.n	8026e34 <ce303_tarif+0x334>
	{
		start_buf[0] = 0x2F;
 8026db0:	4b98      	ldr	r3, [pc, #608]	; (8027014 <ce303_tarif+0x514>)
 8026db2:	222f      	movs	r2, #47	; 0x2f
 8026db4:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 8026db6:	4b97      	ldr	r3, [pc, #604]	; (8027014 <ce303_tarif+0x514>)
 8026db8:	223f      	movs	r2, #63	; 0x3f
 8026dba:	705a      	strb	r2, [r3, #1]
		start_buf[2] = (meter_id/10) + 0x30;
 8026dbc:	79fb      	ldrb	r3, [r7, #7]
 8026dbe:	4a96      	ldr	r2, [pc, #600]	; (8027018 <ce303_tarif+0x518>)
 8026dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8026dc4:	08db      	lsrs	r3, r3, #3
 8026dc6:	b2db      	uxtb	r3, r3
 8026dc8:	3330      	adds	r3, #48	; 0x30
 8026dca:	b2da      	uxtb	r2, r3
 8026dcc:	4b91      	ldr	r3, [pc, #580]	; (8027014 <ce303_tarif+0x514>)
 8026dce:	709a      	strb	r2, [r3, #2]
		start_buf[3] = (meter_id - ((meter_id/10)*10)) + 0x30;
 8026dd0:	79fb      	ldrb	r3, [r7, #7]
 8026dd2:	4a91      	ldr	r2, [pc, #580]	; (8027018 <ce303_tarif+0x518>)
 8026dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8026dd8:	08db      	lsrs	r3, r3, #3
 8026dda:	b2db      	uxtb	r3, r3
 8026ddc:	461a      	mov	r2, r3
 8026dde:	0152      	lsls	r2, r2, #5
 8026de0:	1ad2      	subs	r2, r2, r3
 8026de2:	0092      	lsls	r2, r2, #2
 8026de4:	1ad3      	subs	r3, r2, r3
 8026de6:	005b      	lsls	r3, r3, #1
 8026de8:	b2da      	uxtb	r2, r3
 8026dea:	79fb      	ldrb	r3, [r7, #7]
 8026dec:	4413      	add	r3, r2
 8026dee:	b2db      	uxtb	r3, r3
 8026df0:	3330      	adds	r3, #48	; 0x30
 8026df2:	b2da      	uxtb	r2, r3
 8026df4:	4b87      	ldr	r3, [pc, #540]	; (8027014 <ce303_tarif+0x514>)
 8026df6:	70da      	strb	r2, [r3, #3]
		start_buf[4] = 0x21;
 8026df8:	4b86      	ldr	r3, [pc, #536]	; (8027014 <ce303_tarif+0x514>)
 8026dfa:	2221      	movs	r2, #33	; 0x21
 8026dfc:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x0D;
 8026dfe:	4b85      	ldr	r3, [pc, #532]	; (8027014 <ce303_tarif+0x514>)
 8026e00:	220d      	movs	r2, #13
 8026e02:	715a      	strb	r2, [r3, #5]
		start_buf[6] = 0x0A;
 8026e04:	4b83      	ldr	r3, [pc, #524]	; (8027014 <ce303_tarif+0x514>)
 8026e06:	220a      	movs	r2, #10
 8026e08:	719a      	strb	r2, [r3, #6]

		meter_rx_number = 0;
 8026e0a:	4b84      	ldr	r3, [pc, #528]	; (802701c <ce303_tarif+0x51c>)
 8026e0c:	2200      	movs	r2, #0
 8026e0e:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 8026e10:	f7fb ff7a 	bl	8022d08 <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 8026e14:	2201      	movs	r2, #1
 8026e16:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8026e1a:	4881      	ldr	r0, [pc, #516]	; (8027020 <ce303_tarif+0x520>)
 8026e1c:	f7ed fd38 	bl	8014890 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 7); // передаем команду
 8026e20:	2207      	movs	r2, #7
 8026e22:	497c      	ldr	r1, [pc, #496]	; (8027014 <ce303_tarif+0x514>)
 8026e24:	487f      	ldr	r0, [pc, #508]	; (8027024 <ce303_tarif+0x524>)
 8026e26:	f7f0 ffff 	bl	8017e28 <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 8026e2a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8026e2e:	f7ec f84b 	bl	8012ec8 <HAL_Delay>
 8026e32:	e02a      	b.n	8026e8a <ce303_tarif+0x38a>

	}
	else if( (meter_id>=0)&&(meter_id<10) )
 8026e34:	79fb      	ldrb	r3, [r7, #7]
 8026e36:	2b09      	cmp	r3, #9
 8026e38:	d827      	bhi.n	8026e8a <ce303_tarif+0x38a>
	{
		start_buf[0] = 0x2F;
 8026e3a:	4b76      	ldr	r3, [pc, #472]	; (8027014 <ce303_tarif+0x514>)
 8026e3c:	222f      	movs	r2, #47	; 0x2f
 8026e3e:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 8026e40:	4b74      	ldr	r3, [pc, #464]	; (8027014 <ce303_tarif+0x514>)
 8026e42:	223f      	movs	r2, #63	; 0x3f
 8026e44:	705a      	strb	r2, [r3, #1]
		start_buf[2] = meter_id + 0x30;
 8026e46:	79fb      	ldrb	r3, [r7, #7]
 8026e48:	3330      	adds	r3, #48	; 0x30
 8026e4a:	b2da      	uxtb	r2, r3
 8026e4c:	4b71      	ldr	r3, [pc, #452]	; (8027014 <ce303_tarif+0x514>)
 8026e4e:	709a      	strb	r2, [r3, #2]
		start_buf[3] = 0x21;
 8026e50:	4b70      	ldr	r3, [pc, #448]	; (8027014 <ce303_tarif+0x514>)
 8026e52:	2221      	movs	r2, #33	; 0x21
 8026e54:	70da      	strb	r2, [r3, #3]
		start_buf[4] = 0x0D;
 8026e56:	4b6f      	ldr	r3, [pc, #444]	; (8027014 <ce303_tarif+0x514>)
 8026e58:	220d      	movs	r2, #13
 8026e5a:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x0A;
 8026e5c:	4b6d      	ldr	r3, [pc, #436]	; (8027014 <ce303_tarif+0x514>)
 8026e5e:	220a      	movs	r2, #10
 8026e60:	715a      	strb	r2, [r3, #5]

		meter_rx_number = 0;
 8026e62:	4b6e      	ldr	r3, [pc, #440]	; (802701c <ce303_tarif+0x51c>)
 8026e64:	2200      	movs	r2, #0
 8026e66:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 8026e68:	f7fb ff4e 	bl	8022d08 <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 8026e6c:	2201      	movs	r2, #1
 8026e6e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8026e72:	486b      	ldr	r0, [pc, #428]	; (8027020 <ce303_tarif+0x520>)
 8026e74:	f7ed fd0c 	bl	8014890 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 6); // передаем команду
 8026e78:	2206      	movs	r2, #6
 8026e7a:	4966      	ldr	r1, [pc, #408]	; (8027014 <ce303_tarif+0x514>)
 8026e7c:	4869      	ldr	r0, [pc, #420]	; (8027024 <ce303_tarif+0x524>)
 8026e7e:	f7f0 ffd3 	bl	8017e28 <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 8026e82:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8026e86:	f7ec f81f 	bl	8012ec8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
	HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 6); // передаем команду
	HAL_Delay(1000); // ждем
	*/

	meter_rx_number = 0;
 8026e8a:	4b64      	ldr	r3, [pc, #400]	; (802701c <ce303_tarif+0x51c>)
 8026e8c:	2200      	movs	r2, #0
 8026e8e:	701a      	strb	r2, [r3, #0]
	meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 8026e90:	f7fb ff3a 	bl	8022d08 <meter_rx_buffer_clear>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 8026e94:	2201      	movs	r2, #1
 8026e96:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8026e9a:	4861      	ldr	r0, [pc, #388]	; (8027020 <ce303_tarif+0x520>)
 8026e9c:	f7ed fcf8 	bl	8014890 <HAL_GPIO_WritePin>
	HAL_UART_Transmit_DMA(&huart6, &password_buf[0], 6); // передаем команду
 8026ea0:	2206      	movs	r2, #6
 8026ea2:	4961      	ldr	r1, [pc, #388]	; (8027028 <ce303_tarif+0x528>)
 8026ea4:	485f      	ldr	r0, [pc, #380]	; (8027024 <ce303_tarif+0x524>)
 8026ea6:	f7f0 ffbf 	bl	8017e28 <HAL_UART_Transmit_DMA>
	HAL_Delay(1000);
 8026eaa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8026eae:	f7ec f80b 	bl	8012ec8 <HAL_Delay>

	meter_rx_number = 0;
 8026eb2:	4b5a      	ldr	r3, [pc, #360]	; (802701c <ce303_tarif+0x51c>)
 8026eb4:	2200      	movs	r2, #0
 8026eb6:	701a      	strb	r2, [r3, #0]
	meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 8026eb8:	f7fb ff26 	bl	8022d08 <meter_rx_buffer_clear>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 8026ebc:	2201      	movs	r2, #1
 8026ebe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8026ec2:	4857      	ldr	r0, [pc, #348]	; (8027020 <ce303_tarif+0x520>)
 8026ec4:	f7ed fce4 	bl	8014890 <HAL_GPIO_WritePin>
	HAL_UART_Transmit_DMA(&huart6, &tarif_buf[0], 13); // передаем команду
 8026ec8:	220d      	movs	r2, #13
 8026eca:	4958      	ldr	r1, [pc, #352]	; (802702c <ce303_tarif+0x52c>)
 8026ecc:	4855      	ldr	r0, [pc, #340]	; (8027024 <ce303_tarif+0x524>)
 8026ece:	f7f0 ffab 	bl	8017e28 <HAL_UART_Transmit_DMA>
	HAL_Delay(1000);
 8026ed2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8026ed6:	f7eb fff7 	bl	8012ec8 <HAL_Delay>

	tarif_general_state = 0; // обнуляем переменные состояния прочтения мощщности перед их прочтением
 8026eda:	2300      	movs	r3, #0
 8026edc:	757b      	strb	r3, [r7, #21]
	tarif_1_state = 0;
 8026ede:	2300      	movs	r3, #0
 8026ee0:	753b      	strb	r3, [r7, #20]
	tarif_2_state = 0;
 8026ee2:	2300      	movs	r3, #0
 8026ee4:	74fb      	strb	r3, [r7, #19]
	tarif_3_state = 0;
 8026ee6:	2300      	movs	r3, #0
 8026ee8:	74bb      	strb	r3, [r7, #18]
	tarif_4_state = 0;
 8026eea:	2300      	movs	r3, #0
 8026eec:	73fb      	strb	r3, [r7, #15]
	tarif_5_state = 0;
 8026eee:	2300      	movs	r3, #0
 8026ef0:	73bb      	strb	r3, [r7, #14]

	for(uint16_t i=0; i<256; i++)
 8026ef2:	2300      	movs	r3, #0
 8026ef4:	823b      	strh	r3, [r7, #16]
 8026ef6:	f002 b814 	b.w	8028f22 <ce303_tarif+0x2422>
	{
		if( (meter_rx_buffer[i] == 0x28) && (tarif_general_state==0) && (tarif_1_state==0) && (tarif_2_state==0) && (tarif_3_state==0) && (tarif_4_state==0) && (tarif_5_state==0) ) // 0х28 означает символ "(" в ASCII таблице
 8026efa:	8a3b      	ldrh	r3, [r7, #16]
 8026efc:	4a4c      	ldr	r2, [pc, #304]	; (8027030 <ce303_tarif+0x530>)
 8026efe:	5cd3      	ldrb	r3, [r2, r3]
 8026f00:	2b28      	cmp	r3, #40	; 0x28
 8026f02:	f040 8400 	bne.w	8027706 <ce303_tarif+0xc06>
 8026f06:	7d7b      	ldrb	r3, [r7, #21]
 8026f08:	2b00      	cmp	r3, #0
 8026f0a:	f040 83fc 	bne.w	8027706 <ce303_tarif+0xc06>
 8026f0e:	7d3b      	ldrb	r3, [r7, #20]
 8026f10:	2b00      	cmp	r3, #0
 8026f12:	f040 83f8 	bne.w	8027706 <ce303_tarif+0xc06>
 8026f16:	7cfb      	ldrb	r3, [r7, #19]
 8026f18:	2b00      	cmp	r3, #0
 8026f1a:	f040 83f4 	bne.w	8027706 <ce303_tarif+0xc06>
 8026f1e:	7cbb      	ldrb	r3, [r7, #18]
 8026f20:	2b00      	cmp	r3, #0
 8026f22:	f040 83f0 	bne.w	8027706 <ce303_tarif+0xc06>
 8026f26:	7bfb      	ldrb	r3, [r7, #15]
 8026f28:	2b00      	cmp	r3, #0
 8026f2a:	f040 83ec 	bne.w	8027706 <ce303_tarif+0xc06>
 8026f2e:	7bbb      	ldrb	r3, [r7, #14]
 8026f30:	2b00      	cmp	r3, #0
 8026f32:	f040 83e8 	bne.w	8027706 <ce303_tarif+0xc06>
		{
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице, 1 цифра перед запятой
 8026f36:	8a3b      	ldrh	r3, [r7, #16]
 8026f38:	3302      	adds	r3, #2
 8026f3a:	4a3d      	ldr	r2, [pc, #244]	; (8027030 <ce303_tarif+0x530>)
 8026f3c:	5cd3      	ldrb	r3, [r2, r3]
 8026f3e:	2b2e      	cmp	r3, #46	; 0x2e
 8026f40:	f040 80ec 	bne.w	802711c <ce303_tarif+0x61c>
			{
				temp = (uint32_t)(meter_rx_buffer[i+1]-0x30);
 8026f44:	8a3b      	ldrh	r3, [r7, #16]
 8026f46:	3301      	adds	r3, #1
 8026f48:	4a39      	ldr	r2, [pc, #228]	; (8027030 <ce303_tarif+0x530>)
 8026f4a:	5cd3      	ldrb	r3, [r2, r3]
 8026f4c:	3b30      	subs	r3, #48	; 0x30
 8026f4e:	60bb      	str	r3, [r7, #8]

				if( meter_rx_buffer[i+4] == 0x29 ) // если 1 разряд после запятой
 8026f50:	8a3b      	ldrh	r3, [r7, #16]
 8026f52:	3304      	adds	r3, #4
 8026f54:	4a36      	ldr	r2, [pc, #216]	; (8027030 <ce303_tarif+0x530>)
 8026f56:	5cd3      	ldrb	r3, [r2, r3]
 8026f58:	2b29      	cmp	r3, #41	; 0x29
 8026f5a:	d110      	bne.n	8026f7e <ce303_tarif+0x47e>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+3])-0x30)*100;
 8026f5c:	8a3b      	ldrh	r3, [r7, #16]
 8026f5e:	3303      	adds	r3, #3
 8026f60:	4a33      	ldr	r2, [pc, #204]	; (8027030 <ce303_tarif+0x530>)
 8026f62:	5cd3      	ldrb	r3, [r2, r3]
 8026f64:	3b30      	subs	r3, #48	; 0x30
 8026f66:	b29b      	uxth	r3, r3
 8026f68:	461a      	mov	r2, r3
 8026f6a:	0092      	lsls	r2, r2, #2
 8026f6c:	4413      	add	r3, r2
 8026f6e:	461a      	mov	r2, r3
 8026f70:	0091      	lsls	r1, r2, #2
 8026f72:	461a      	mov	r2, r3
 8026f74:	460b      	mov	r3, r1
 8026f76:	4413      	add	r3, r2
 8026f78:	009b      	lsls	r3, r3, #2
 8026f7a:	82fb      	strh	r3, [r7, #22]
 8026f7c:	e080      	b.n	8027080 <ce303_tarif+0x580>
				}
				else if( meter_rx_buffer[i+5] == 0x29 ) // если 2 разряда после запятой
 8026f7e:	8a3b      	ldrh	r3, [r7, #16]
 8026f80:	3305      	adds	r3, #5
 8026f82:	4a2b      	ldr	r2, [pc, #172]	; (8027030 <ce303_tarif+0x530>)
 8026f84:	5cd3      	ldrb	r3, [r2, r3]
 8026f86:	2b29      	cmp	r3, #41	; 0x29
 8026f88:	d117      	bne.n	8026fba <ce303_tarif+0x4ba>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+3])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+4])-0x30))*10;
 8026f8a:	8a3b      	ldrh	r3, [r7, #16]
 8026f8c:	3303      	adds	r3, #3
 8026f8e:	4a28      	ldr	r2, [pc, #160]	; (8027030 <ce303_tarif+0x530>)
 8026f90:	5cd3      	ldrb	r3, [r2, r3]
 8026f92:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8026f96:	4613      	mov	r3, r2
 8026f98:	009b      	lsls	r3, r3, #2
 8026f9a:	4413      	add	r3, r2
 8026f9c:	005b      	lsls	r3, r3, #1
 8026f9e:	4619      	mov	r1, r3
 8026fa0:	8a3b      	ldrh	r3, [r7, #16]
 8026fa2:	3304      	adds	r3, #4
 8026fa4:	4a22      	ldr	r2, [pc, #136]	; (8027030 <ce303_tarif+0x530>)
 8026fa6:	5cd3      	ldrb	r3, [r2, r3]
 8026fa8:	3b30      	subs	r3, #48	; 0x30
 8026faa:	440b      	add	r3, r1
 8026fac:	b29b      	uxth	r3, r3
 8026fae:	461a      	mov	r2, r3
 8026fb0:	0092      	lsls	r2, r2, #2
 8026fb2:	4413      	add	r3, r2
 8026fb4:	005b      	lsls	r3, r3, #1
 8026fb6:	82fb      	strh	r3, [r7, #22]
 8026fb8:	e062      	b.n	8027080 <ce303_tarif+0x580>
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 3 разряда после запятой
 8026fba:	8a3b      	ldrh	r3, [r7, #16]
 8026fbc:	3306      	adds	r3, #6
 8026fbe:	4a1c      	ldr	r2, [pc, #112]	; (8027030 <ce303_tarif+0x530>)
 8026fc0:	5cd3      	ldrb	r3, [r2, r3]
 8026fc2:	2b29      	cmp	r3, #41	; 0x29
 8026fc4:	d136      	bne.n	8027034 <ce303_tarif+0x534>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 8026fc6:	8a3b      	ldrh	r3, [r7, #16]
 8026fc8:	3303      	adds	r3, #3
 8026fca:	4a19      	ldr	r2, [pc, #100]	; (8027030 <ce303_tarif+0x530>)
 8026fcc:	5cd3      	ldrb	r3, [r2, r3]
 8026fce:	3b30      	subs	r3, #48	; 0x30
 8026fd0:	b29b      	uxth	r3, r3
 8026fd2:	461a      	mov	r2, r3
 8026fd4:	0092      	lsls	r2, r2, #2
 8026fd6:	4413      	add	r3, r2
 8026fd8:	461a      	mov	r2, r3
 8026fda:	0091      	lsls	r1, r2, #2
 8026fdc:	461a      	mov	r2, r3
 8026fde:	460b      	mov	r3, r1
 8026fe0:	4413      	add	r3, r2
 8026fe2:	009b      	lsls	r3, r3, #2
 8026fe4:	b29a      	uxth	r2, r3
 8026fe6:	8a3b      	ldrh	r3, [r7, #16]
 8026fe8:	3304      	adds	r3, #4
 8026fea:	4911      	ldr	r1, [pc, #68]	; (8027030 <ce303_tarif+0x530>)
 8026fec:	5ccb      	ldrb	r3, [r1, r3]
 8026fee:	3b30      	subs	r3, #48	; 0x30
 8026ff0:	b29b      	uxth	r3, r3
 8026ff2:	4619      	mov	r1, r3
 8026ff4:	0089      	lsls	r1, r1, #2
 8026ff6:	440b      	add	r3, r1
 8026ff8:	005b      	lsls	r3, r3, #1
 8026ffa:	b29b      	uxth	r3, r3
 8026ffc:	4413      	add	r3, r2
 8026ffe:	b29a      	uxth	r2, r3
 8027000:	8a3b      	ldrh	r3, [r7, #16]
 8027002:	3305      	adds	r3, #5
 8027004:	490a      	ldr	r1, [pc, #40]	; (8027030 <ce303_tarif+0x530>)
 8027006:	5ccb      	ldrb	r3, [r1, r3]
 8027008:	b29b      	uxth	r3, r3
 802700a:	4413      	add	r3, r2
 802700c:	b29b      	uxth	r3, r3
 802700e:	3b30      	subs	r3, #48	; 0x30
 8027010:	82fb      	strh	r3, [r7, #22]
 8027012:	e035      	b.n	8027080 <ce303_tarif+0x580>
 8027014:	20000018 	.word	0x20000018
 8027018:	cccccccd 	.word	0xcccccccd
 802701c:	20000865 	.word	0x20000865
 8027020:	40021800 	.word	0x40021800
 8027024:	20009dc4 	.word	0x20009dc4
 8027028:	20000020 	.word	0x20000020
 802702c:	20000060 	.word	0x20000060
 8027030:	20009a0c 	.word	0x20009a0c
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 8027034:	8a3b      	ldrh	r3, [r7, #16]
 8027036:	3303      	adds	r3, #3
 8027038:	4ab0      	ldr	r2, [pc, #704]	; (80272fc <ce303_tarif+0x7fc>)
 802703a:	5cd3      	ldrb	r3, [r2, r3]
 802703c:	3b30      	subs	r3, #48	; 0x30
 802703e:	b29b      	uxth	r3, r3
 8027040:	461a      	mov	r2, r3
 8027042:	0092      	lsls	r2, r2, #2
 8027044:	4413      	add	r3, r2
 8027046:	461a      	mov	r2, r3
 8027048:	0091      	lsls	r1, r2, #2
 802704a:	461a      	mov	r2, r3
 802704c:	460b      	mov	r3, r1
 802704e:	4413      	add	r3, r2
 8027050:	009b      	lsls	r3, r3, #2
 8027052:	b29a      	uxth	r2, r3
 8027054:	8a3b      	ldrh	r3, [r7, #16]
 8027056:	3304      	adds	r3, #4
 8027058:	49a8      	ldr	r1, [pc, #672]	; (80272fc <ce303_tarif+0x7fc>)
 802705a:	5ccb      	ldrb	r3, [r1, r3]
 802705c:	3b30      	subs	r3, #48	; 0x30
 802705e:	b29b      	uxth	r3, r3
 8027060:	4619      	mov	r1, r3
 8027062:	0089      	lsls	r1, r1, #2
 8027064:	440b      	add	r3, r1
 8027066:	005b      	lsls	r3, r3, #1
 8027068:	b29b      	uxth	r3, r3
 802706a:	4413      	add	r3, r2
 802706c:	b29a      	uxth	r2, r3
 802706e:	8a3b      	ldrh	r3, [r7, #16]
 8027070:	3305      	adds	r3, #5
 8027072:	49a2      	ldr	r1, [pc, #648]	; (80272fc <ce303_tarif+0x7fc>)
 8027074:	5ccb      	ldrb	r3, [r1, r3]
 8027076:	b29b      	uxth	r3, r3
 8027078:	4413      	add	r3, r2
 802707a:	b29b      	uxth	r3, r3
 802707c:	3b30      	subs	r3, #48	; 0x30
 802707e:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8027080:	4b9f      	ldr	r3, [pc, #636]	; (8027300 <ce303_tarif+0x800>)
 8027082:	681b      	ldr	r3, [r3, #0]
 8027084:	f04f 31ff 	mov.w	r1, #4294967295
 8027088:	4618      	mov	r0, r3
 802708a:	f7f2 f90d 	bl	80192a8 <osMutexWait>
				fm25v02_write(2*CE_303_TOTAL_POWER_H_REG, ((uint8_t)(temp>>24)) );
 802708e:	68bb      	ldr	r3, [r7, #8]
 8027090:	0e1b      	lsrs	r3, r3, #24
 8027092:	b2db      	uxtb	r3, r3
 8027094:	4619      	mov	r1, r3
 8027096:	f242 0082 	movw	r0, #8322	; 0x2082
 802709a:	f003 fcf7 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_H_REG+1, ((uint8_t)(temp>>16)) );
 802709e:	68bb      	ldr	r3, [r7, #8]
 80270a0:	0c1b      	lsrs	r3, r3, #16
 80270a2:	b2db      	uxtb	r3, r3
 80270a4:	4619      	mov	r1, r3
 80270a6:	f242 0083 	movw	r0, #8323	; 0x2083
 80270aa:	f003 fcef 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_L_REG, ((uint8_t)(temp>>8)) );
 80270ae:	68bb      	ldr	r3, [r7, #8]
 80270b0:	0a1b      	lsrs	r3, r3, #8
 80270b2:	b2db      	uxtb	r3, r3
 80270b4:	4619      	mov	r1, r3
 80270b6:	f242 0084 	movw	r0, #8324	; 0x2084
 80270ba:	f003 fce7 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_L_REG+1, ((uint8_t)temp) );
 80270be:	68bb      	ldr	r3, [r7, #8]
 80270c0:	b2db      	uxtb	r3, r3
 80270c2:	4619      	mov	r1, r3
 80270c4:	f242 0085 	movw	r0, #8325	; 0x2085
 80270c8:	f003 fce0 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_M_REG, ((uint8_t)(temp_mil>>8)) );
 80270cc:	8afb      	ldrh	r3, [r7, #22]
 80270ce:	0a1b      	lsrs	r3, r3, #8
 80270d0:	b29b      	uxth	r3, r3
 80270d2:	b2db      	uxtb	r3, r3
 80270d4:	4619      	mov	r1, r3
 80270d6:	f242 0086 	movw	r0, #8326	; 0x2086
 80270da:	f003 fcd7 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_M_REG+1, ((uint8_t)(temp_mil)) );
 80270de:	8afb      	ldrh	r3, [r7, #22]
 80270e0:	b2db      	uxtb	r3, r3
 80270e2:	4619      	mov	r1, r3
 80270e4:	f242 0087 	movw	r0, #8327	; 0x2087
 80270e8:	f003 fcd0 	bl	802aa8c <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 80270ec:	4b84      	ldr	r3, [pc, #528]	; (8027300 <ce303_tarif+0x800>)
 80270ee:	681b      	ldr	r3, [r3, #0]
 80270f0:	4618      	mov	r0, r3
 80270f2:	f7f2 f927 	bl	8019344 <osMutexRelease>
				status_registers.ce303_total_power_h_reg = (uint16_t)(temp>>16);
 80270f6:	68bb      	ldr	r3, [r7, #8]
 80270f8:	0c1b      	lsrs	r3, r3, #16
 80270fa:	b29a      	uxth	r2, r3
 80270fc:	4b81      	ldr	r3, [pc, #516]	; (8027304 <ce303_tarif+0x804>)
 80270fe:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
				status_registers.ce303_total_power_l_reg = (uint16_t)temp;
 8027102:	68bb      	ldr	r3, [r7, #8]
 8027104:	b29a      	uxth	r2, r3
 8027106:	4b7f      	ldr	r3, [pc, #508]	; (8027304 <ce303_tarif+0x804>)
 8027108:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
				status_registers.ce303_total_power_m_reg =  temp_mil;
 802710c:	4a7d      	ldr	r2, [pc, #500]	; (8027304 <ce303_tarif+0x804>)
 802710e:	8afb      	ldrh	r3, [r7, #22]
 8027110:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
				tarif_general_state = 1;
 8027114:	2301      	movs	r3, #1
 8027116:	757b      	strb	r3, [r7, #21]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице, 1 цифра перед запятой
 8027118:	f001 befb 	b.w	8028f12 <ce303_tarif+0x2412>

			}

			else if( meter_rx_buffer[i+3] == 0x2E) // 2 цифры перед запятой
 802711c:	8a3b      	ldrh	r3, [r7, #16]
 802711e:	3303      	adds	r3, #3
 8027120:	4a76      	ldr	r2, [pc, #472]	; (80272fc <ce303_tarif+0x7fc>)
 8027122:	5cd3      	ldrb	r3, [r2, r3]
 8027124:	2b2e      	cmp	r3, #46	; 0x2e
 8027126:	f040 80ef 	bne.w	8027308 <ce303_tarif+0x808>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+2])-0x30);
 802712a:	8a3b      	ldrh	r3, [r7, #16]
 802712c:	3301      	adds	r3, #1
 802712e:	4a73      	ldr	r2, [pc, #460]	; (80272fc <ce303_tarif+0x7fc>)
 8027130:	5cd3      	ldrb	r3, [r2, r3]
 8027132:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8027136:	4613      	mov	r3, r2
 8027138:	009b      	lsls	r3, r3, #2
 802713a:	4413      	add	r3, r2
 802713c:	005b      	lsls	r3, r3, #1
 802713e:	4619      	mov	r1, r3
 8027140:	8a3b      	ldrh	r3, [r7, #16]
 8027142:	3302      	adds	r3, #2
 8027144:	4a6d      	ldr	r2, [pc, #436]	; (80272fc <ce303_tarif+0x7fc>)
 8027146:	5cd3      	ldrb	r3, [r2, r3]
 8027148:	3b30      	subs	r3, #48	; 0x30
 802714a:	440b      	add	r3, r1
 802714c:	60bb      	str	r3, [r7, #8]

				if( meter_rx_buffer[i+5] == 0x29 ) // если 1 разряд после запятой
 802714e:	8a3b      	ldrh	r3, [r7, #16]
 8027150:	3305      	adds	r3, #5
 8027152:	4a6a      	ldr	r2, [pc, #424]	; (80272fc <ce303_tarif+0x7fc>)
 8027154:	5cd3      	ldrb	r3, [r2, r3]
 8027156:	2b29      	cmp	r3, #41	; 0x29
 8027158:	d110      	bne.n	802717c <ce303_tarif+0x67c>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+4])-0x30)*100;
 802715a:	8a3b      	ldrh	r3, [r7, #16]
 802715c:	3304      	adds	r3, #4
 802715e:	4a67      	ldr	r2, [pc, #412]	; (80272fc <ce303_tarif+0x7fc>)
 8027160:	5cd3      	ldrb	r3, [r2, r3]
 8027162:	3b30      	subs	r3, #48	; 0x30
 8027164:	b29b      	uxth	r3, r3
 8027166:	461a      	mov	r2, r3
 8027168:	0092      	lsls	r2, r2, #2
 802716a:	4413      	add	r3, r2
 802716c:	461a      	mov	r2, r3
 802716e:	0091      	lsls	r1, r2, #2
 8027170:	461a      	mov	r2, r3
 8027172:	460b      	mov	r3, r1
 8027174:	4413      	add	r3, r2
 8027176:	009b      	lsls	r3, r3, #2
 8027178:	82fb      	strh	r3, [r7, #22]
 802717a:	e070      	b.n	802725e <ce303_tarif+0x75e>
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 2 разряда после запятой
 802717c:	8a3b      	ldrh	r3, [r7, #16]
 802717e:	3306      	adds	r3, #6
 8027180:	4a5e      	ldr	r2, [pc, #376]	; (80272fc <ce303_tarif+0x7fc>)
 8027182:	5cd3      	ldrb	r3, [r2, r3]
 8027184:	2b29      	cmp	r3, #41	; 0x29
 8027186:	d117      	bne.n	80271b8 <ce303_tarif+0x6b8>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30))*10;
 8027188:	8a3b      	ldrh	r3, [r7, #16]
 802718a:	3304      	adds	r3, #4
 802718c:	4a5b      	ldr	r2, [pc, #364]	; (80272fc <ce303_tarif+0x7fc>)
 802718e:	5cd3      	ldrb	r3, [r2, r3]
 8027190:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8027194:	4613      	mov	r3, r2
 8027196:	009b      	lsls	r3, r3, #2
 8027198:	4413      	add	r3, r2
 802719a:	005b      	lsls	r3, r3, #1
 802719c:	4619      	mov	r1, r3
 802719e:	8a3b      	ldrh	r3, [r7, #16]
 80271a0:	3305      	adds	r3, #5
 80271a2:	4a56      	ldr	r2, [pc, #344]	; (80272fc <ce303_tarif+0x7fc>)
 80271a4:	5cd3      	ldrb	r3, [r2, r3]
 80271a6:	3b30      	subs	r3, #48	; 0x30
 80271a8:	440b      	add	r3, r1
 80271aa:	b29b      	uxth	r3, r3
 80271ac:	461a      	mov	r2, r3
 80271ae:	0092      	lsls	r2, r2, #2
 80271b0:	4413      	add	r3, r2
 80271b2:	005b      	lsls	r3, r3, #1
 80271b4:	82fb      	strh	r3, [r7, #22]
 80271b6:	e052      	b.n	802725e <ce303_tarif+0x75e>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 3 разряда после запятой
 80271b8:	8a3b      	ldrh	r3, [r7, #16]
 80271ba:	3307      	adds	r3, #7
 80271bc:	4a4f      	ldr	r2, [pc, #316]	; (80272fc <ce303_tarif+0x7fc>)
 80271be:	5cd3      	ldrb	r3, [r2, r3]
 80271c0:	2b29      	cmp	r3, #41	; 0x29
 80271c2:	d126      	bne.n	8027212 <ce303_tarif+0x712>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 80271c4:	8a3b      	ldrh	r3, [r7, #16]
 80271c6:	3304      	adds	r3, #4
 80271c8:	4a4c      	ldr	r2, [pc, #304]	; (80272fc <ce303_tarif+0x7fc>)
 80271ca:	5cd3      	ldrb	r3, [r2, r3]
 80271cc:	3b30      	subs	r3, #48	; 0x30
 80271ce:	b29b      	uxth	r3, r3
 80271d0:	461a      	mov	r2, r3
 80271d2:	0092      	lsls	r2, r2, #2
 80271d4:	4413      	add	r3, r2
 80271d6:	461a      	mov	r2, r3
 80271d8:	0091      	lsls	r1, r2, #2
 80271da:	461a      	mov	r2, r3
 80271dc:	460b      	mov	r3, r1
 80271de:	4413      	add	r3, r2
 80271e0:	009b      	lsls	r3, r3, #2
 80271e2:	b29a      	uxth	r2, r3
 80271e4:	8a3b      	ldrh	r3, [r7, #16]
 80271e6:	3305      	adds	r3, #5
 80271e8:	4944      	ldr	r1, [pc, #272]	; (80272fc <ce303_tarif+0x7fc>)
 80271ea:	5ccb      	ldrb	r3, [r1, r3]
 80271ec:	3b30      	subs	r3, #48	; 0x30
 80271ee:	b29b      	uxth	r3, r3
 80271f0:	4619      	mov	r1, r3
 80271f2:	0089      	lsls	r1, r1, #2
 80271f4:	440b      	add	r3, r1
 80271f6:	005b      	lsls	r3, r3, #1
 80271f8:	b29b      	uxth	r3, r3
 80271fa:	4413      	add	r3, r2
 80271fc:	b29a      	uxth	r2, r3
 80271fe:	8a3b      	ldrh	r3, [r7, #16]
 8027200:	3306      	adds	r3, #6
 8027202:	493e      	ldr	r1, [pc, #248]	; (80272fc <ce303_tarif+0x7fc>)
 8027204:	5ccb      	ldrb	r3, [r1, r3]
 8027206:	b29b      	uxth	r3, r3
 8027208:	4413      	add	r3, r2
 802720a:	b29b      	uxth	r3, r3
 802720c:	3b30      	subs	r3, #48	; 0x30
 802720e:	82fb      	strh	r3, [r7, #22]
 8027210:	e025      	b.n	802725e <ce303_tarif+0x75e>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 8027212:	8a3b      	ldrh	r3, [r7, #16]
 8027214:	3304      	adds	r3, #4
 8027216:	4a39      	ldr	r2, [pc, #228]	; (80272fc <ce303_tarif+0x7fc>)
 8027218:	5cd3      	ldrb	r3, [r2, r3]
 802721a:	3b30      	subs	r3, #48	; 0x30
 802721c:	b29b      	uxth	r3, r3
 802721e:	461a      	mov	r2, r3
 8027220:	0092      	lsls	r2, r2, #2
 8027222:	4413      	add	r3, r2
 8027224:	461a      	mov	r2, r3
 8027226:	0091      	lsls	r1, r2, #2
 8027228:	461a      	mov	r2, r3
 802722a:	460b      	mov	r3, r1
 802722c:	4413      	add	r3, r2
 802722e:	009b      	lsls	r3, r3, #2
 8027230:	b29a      	uxth	r2, r3
 8027232:	8a3b      	ldrh	r3, [r7, #16]
 8027234:	3305      	adds	r3, #5
 8027236:	4931      	ldr	r1, [pc, #196]	; (80272fc <ce303_tarif+0x7fc>)
 8027238:	5ccb      	ldrb	r3, [r1, r3]
 802723a:	3b30      	subs	r3, #48	; 0x30
 802723c:	b29b      	uxth	r3, r3
 802723e:	4619      	mov	r1, r3
 8027240:	0089      	lsls	r1, r1, #2
 8027242:	440b      	add	r3, r1
 8027244:	005b      	lsls	r3, r3, #1
 8027246:	b29b      	uxth	r3, r3
 8027248:	4413      	add	r3, r2
 802724a:	b29a      	uxth	r2, r3
 802724c:	8a3b      	ldrh	r3, [r7, #16]
 802724e:	3306      	adds	r3, #6
 8027250:	492a      	ldr	r1, [pc, #168]	; (80272fc <ce303_tarif+0x7fc>)
 8027252:	5ccb      	ldrb	r3, [r1, r3]
 8027254:	b29b      	uxth	r3, r3
 8027256:	4413      	add	r3, r2
 8027258:	b29b      	uxth	r3, r3
 802725a:	3b30      	subs	r3, #48	; 0x30
 802725c:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 802725e:	4b28      	ldr	r3, [pc, #160]	; (8027300 <ce303_tarif+0x800>)
 8027260:	681b      	ldr	r3, [r3, #0]
 8027262:	f04f 31ff 	mov.w	r1, #4294967295
 8027266:	4618      	mov	r0, r3
 8027268:	f7f2 f81e 	bl	80192a8 <osMutexWait>
				fm25v02_write(2*CE_303_TOTAL_POWER_H_REG, ((uint8_t)(temp>>24)) );
 802726c:	68bb      	ldr	r3, [r7, #8]
 802726e:	0e1b      	lsrs	r3, r3, #24
 8027270:	b2db      	uxtb	r3, r3
 8027272:	4619      	mov	r1, r3
 8027274:	f242 0082 	movw	r0, #8322	; 0x2082
 8027278:	f003 fc08 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_H_REG+1, ((uint8_t)(temp>>16)) );
 802727c:	68bb      	ldr	r3, [r7, #8]
 802727e:	0c1b      	lsrs	r3, r3, #16
 8027280:	b2db      	uxtb	r3, r3
 8027282:	4619      	mov	r1, r3
 8027284:	f242 0083 	movw	r0, #8323	; 0x2083
 8027288:	f003 fc00 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_L_REG, ((uint8_t)(temp>>8)) );
 802728c:	68bb      	ldr	r3, [r7, #8]
 802728e:	0a1b      	lsrs	r3, r3, #8
 8027290:	b2db      	uxtb	r3, r3
 8027292:	4619      	mov	r1, r3
 8027294:	f242 0084 	movw	r0, #8324	; 0x2084
 8027298:	f003 fbf8 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_L_REG+1, ((uint8_t)temp) );
 802729c:	68bb      	ldr	r3, [r7, #8]
 802729e:	b2db      	uxtb	r3, r3
 80272a0:	4619      	mov	r1, r3
 80272a2:	f242 0085 	movw	r0, #8325	; 0x2085
 80272a6:	f003 fbf1 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_M_REG, ((uint8_t)(temp_mil>>8)) );
 80272aa:	8afb      	ldrh	r3, [r7, #22]
 80272ac:	0a1b      	lsrs	r3, r3, #8
 80272ae:	b29b      	uxth	r3, r3
 80272b0:	b2db      	uxtb	r3, r3
 80272b2:	4619      	mov	r1, r3
 80272b4:	f242 0086 	movw	r0, #8326	; 0x2086
 80272b8:	f003 fbe8 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_M_REG+1, ((uint8_t)(temp_mil)) );
 80272bc:	8afb      	ldrh	r3, [r7, #22]
 80272be:	b2db      	uxtb	r3, r3
 80272c0:	4619      	mov	r1, r3
 80272c2:	f242 0087 	movw	r0, #8327	; 0x2087
 80272c6:	f003 fbe1 	bl	802aa8c <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 80272ca:	4b0d      	ldr	r3, [pc, #52]	; (8027300 <ce303_tarif+0x800>)
 80272cc:	681b      	ldr	r3, [r3, #0]
 80272ce:	4618      	mov	r0, r3
 80272d0:	f7f2 f838 	bl	8019344 <osMutexRelease>
				status_registers.ce303_total_power_h_reg = (uint16_t)(temp>>16);
 80272d4:	68bb      	ldr	r3, [r7, #8]
 80272d6:	0c1b      	lsrs	r3, r3, #16
 80272d8:	b29a      	uxth	r2, r3
 80272da:	4b0a      	ldr	r3, [pc, #40]	; (8027304 <ce303_tarif+0x804>)
 80272dc:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
				status_registers.ce303_total_power_l_reg = (uint16_t)temp;
 80272e0:	68bb      	ldr	r3, [r7, #8]
 80272e2:	b29a      	uxth	r2, r3
 80272e4:	4b07      	ldr	r3, [pc, #28]	; (8027304 <ce303_tarif+0x804>)
 80272e6:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
				status_registers.ce303_total_power_m_reg =  temp_mil;
 80272ea:	4a06      	ldr	r2, [pc, #24]	; (8027304 <ce303_tarif+0x804>)
 80272ec:	8afb      	ldrh	r3, [r7, #22]
 80272ee:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
				tarif_general_state = 1;
 80272f2:	2301      	movs	r3, #1
 80272f4:	757b      	strb	r3, [r7, #21]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице, 1 цифра перед запятой
 80272f6:	f001 be0c 	b.w	8028f12 <ce303_tarif+0x2412>
 80272fa:	bf00      	nop
 80272fc:	20009a0c 	.word	0x20009a0c
 8027300:	20009bb8 	.word	0x20009bb8
 8027304:	2000af40 	.word	0x2000af40

			}

			else if( meter_rx_buffer[i+4] == 0x2E) // 3 цифры перед запятой
 8027308:	8a3b      	ldrh	r3, [r7, #16]
 802730a:	3304      	adds	r3, #4
 802730c:	4aaa      	ldr	r2, [pc, #680]	; (80275b8 <ce303_tarif+0xab8>)
 802730e:	5cd3      	ldrb	r3, [r2, r3]
 8027310:	2b2e      	cmp	r3, #46	; 0x2e
 8027312:	f040 80f0 	bne.w	80274f6 <ce303_tarif+0x9f6>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+2])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+3])-0x30);
 8027316:	8a3b      	ldrh	r3, [r7, #16]
 8027318:	3301      	adds	r3, #1
 802731a:	4aa7      	ldr	r2, [pc, #668]	; (80275b8 <ce303_tarif+0xab8>)
 802731c:	5cd3      	ldrb	r3, [r2, r3]
 802731e:	3b30      	subs	r3, #48	; 0x30
 8027320:	2264      	movs	r2, #100	; 0x64
 8027322:	fb02 f103 	mul.w	r1, r2, r3
 8027326:	8a3b      	ldrh	r3, [r7, #16]
 8027328:	3302      	adds	r3, #2
 802732a:	4aa3      	ldr	r2, [pc, #652]	; (80275b8 <ce303_tarif+0xab8>)
 802732c:	5cd3      	ldrb	r3, [r2, r3]
 802732e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8027332:	4613      	mov	r3, r2
 8027334:	009b      	lsls	r3, r3, #2
 8027336:	4413      	add	r3, r2
 8027338:	005b      	lsls	r3, r3, #1
 802733a:	18ca      	adds	r2, r1, r3
 802733c:	8a3b      	ldrh	r3, [r7, #16]
 802733e:	3303      	adds	r3, #3
 8027340:	499d      	ldr	r1, [pc, #628]	; (80275b8 <ce303_tarif+0xab8>)
 8027342:	5ccb      	ldrb	r3, [r1, r3]
 8027344:	3b30      	subs	r3, #48	; 0x30
 8027346:	4413      	add	r3, r2
 8027348:	60bb      	str	r3, [r7, #8]

				if( meter_rx_buffer[i+6] == 0x29 ) // если 1 разряд после запятой
 802734a:	8a3b      	ldrh	r3, [r7, #16]
 802734c:	3306      	adds	r3, #6
 802734e:	4a9a      	ldr	r2, [pc, #616]	; (80275b8 <ce303_tarif+0xab8>)
 8027350:	5cd3      	ldrb	r3, [r2, r3]
 8027352:	2b29      	cmp	r3, #41	; 0x29
 8027354:	d110      	bne.n	8027378 <ce303_tarif+0x878>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+5])-0x30)*100;
 8027356:	8a3b      	ldrh	r3, [r7, #16]
 8027358:	3305      	adds	r3, #5
 802735a:	4a97      	ldr	r2, [pc, #604]	; (80275b8 <ce303_tarif+0xab8>)
 802735c:	5cd3      	ldrb	r3, [r2, r3]
 802735e:	3b30      	subs	r3, #48	; 0x30
 8027360:	b29b      	uxth	r3, r3
 8027362:	461a      	mov	r2, r3
 8027364:	0092      	lsls	r2, r2, #2
 8027366:	4413      	add	r3, r2
 8027368:	461a      	mov	r2, r3
 802736a:	0091      	lsls	r1, r2, #2
 802736c:	461a      	mov	r2, r3
 802736e:	460b      	mov	r3, r1
 8027370:	4413      	add	r3, r2
 8027372:	009b      	lsls	r3, r3, #2
 8027374:	82fb      	strh	r3, [r7, #22]
 8027376:	e070      	b.n	802745a <ce303_tarif+0x95a>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 2 разряда после запятой
 8027378:	8a3b      	ldrh	r3, [r7, #16]
 802737a:	3307      	adds	r3, #7
 802737c:	4a8e      	ldr	r2, [pc, #568]	; (80275b8 <ce303_tarif+0xab8>)
 802737e:	5cd3      	ldrb	r3, [r2, r3]
 8027380:	2b29      	cmp	r3, #41	; 0x29
 8027382:	d117      	bne.n	80273b4 <ce303_tarif+0x8b4>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30))*10;
 8027384:	8a3b      	ldrh	r3, [r7, #16]
 8027386:	3305      	adds	r3, #5
 8027388:	4a8b      	ldr	r2, [pc, #556]	; (80275b8 <ce303_tarif+0xab8>)
 802738a:	5cd3      	ldrb	r3, [r2, r3]
 802738c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8027390:	4613      	mov	r3, r2
 8027392:	009b      	lsls	r3, r3, #2
 8027394:	4413      	add	r3, r2
 8027396:	005b      	lsls	r3, r3, #1
 8027398:	4619      	mov	r1, r3
 802739a:	8a3b      	ldrh	r3, [r7, #16]
 802739c:	3306      	adds	r3, #6
 802739e:	4a86      	ldr	r2, [pc, #536]	; (80275b8 <ce303_tarif+0xab8>)
 80273a0:	5cd3      	ldrb	r3, [r2, r3]
 80273a2:	3b30      	subs	r3, #48	; 0x30
 80273a4:	440b      	add	r3, r1
 80273a6:	b29b      	uxth	r3, r3
 80273a8:	461a      	mov	r2, r3
 80273aa:	0092      	lsls	r2, r2, #2
 80273ac:	4413      	add	r3, r2
 80273ae:	005b      	lsls	r3, r3, #1
 80273b0:	82fb      	strh	r3, [r7, #22]
 80273b2:	e052      	b.n	802745a <ce303_tarif+0x95a>
				}
				else if( meter_rx_buffer[i+8] == 0x29 ) // если 3 разряда после запятой
 80273b4:	8a3b      	ldrh	r3, [r7, #16]
 80273b6:	3308      	adds	r3, #8
 80273b8:	4a7f      	ldr	r2, [pc, #508]	; (80275b8 <ce303_tarif+0xab8>)
 80273ba:	5cd3      	ldrb	r3, [r2, r3]
 80273bc:	2b29      	cmp	r3, #41	; 0x29
 80273be:	d126      	bne.n	802740e <ce303_tarif+0x90e>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 80273c0:	8a3b      	ldrh	r3, [r7, #16]
 80273c2:	3305      	adds	r3, #5
 80273c4:	4a7c      	ldr	r2, [pc, #496]	; (80275b8 <ce303_tarif+0xab8>)
 80273c6:	5cd3      	ldrb	r3, [r2, r3]
 80273c8:	3b30      	subs	r3, #48	; 0x30
 80273ca:	b29b      	uxth	r3, r3
 80273cc:	461a      	mov	r2, r3
 80273ce:	0092      	lsls	r2, r2, #2
 80273d0:	4413      	add	r3, r2
 80273d2:	461a      	mov	r2, r3
 80273d4:	0091      	lsls	r1, r2, #2
 80273d6:	461a      	mov	r2, r3
 80273d8:	460b      	mov	r3, r1
 80273da:	4413      	add	r3, r2
 80273dc:	009b      	lsls	r3, r3, #2
 80273de:	b29a      	uxth	r2, r3
 80273e0:	8a3b      	ldrh	r3, [r7, #16]
 80273e2:	3306      	adds	r3, #6
 80273e4:	4974      	ldr	r1, [pc, #464]	; (80275b8 <ce303_tarif+0xab8>)
 80273e6:	5ccb      	ldrb	r3, [r1, r3]
 80273e8:	3b30      	subs	r3, #48	; 0x30
 80273ea:	b29b      	uxth	r3, r3
 80273ec:	4619      	mov	r1, r3
 80273ee:	0089      	lsls	r1, r1, #2
 80273f0:	440b      	add	r3, r1
 80273f2:	005b      	lsls	r3, r3, #1
 80273f4:	b29b      	uxth	r3, r3
 80273f6:	4413      	add	r3, r2
 80273f8:	b29a      	uxth	r2, r3
 80273fa:	8a3b      	ldrh	r3, [r7, #16]
 80273fc:	3307      	adds	r3, #7
 80273fe:	496e      	ldr	r1, [pc, #440]	; (80275b8 <ce303_tarif+0xab8>)
 8027400:	5ccb      	ldrb	r3, [r1, r3]
 8027402:	b29b      	uxth	r3, r3
 8027404:	4413      	add	r3, r2
 8027406:	b29b      	uxth	r3, r3
 8027408:	3b30      	subs	r3, #48	; 0x30
 802740a:	82fb      	strh	r3, [r7, #22]
 802740c:	e025      	b.n	802745a <ce303_tarif+0x95a>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 802740e:	8a3b      	ldrh	r3, [r7, #16]
 8027410:	3305      	adds	r3, #5
 8027412:	4a69      	ldr	r2, [pc, #420]	; (80275b8 <ce303_tarif+0xab8>)
 8027414:	5cd3      	ldrb	r3, [r2, r3]
 8027416:	3b30      	subs	r3, #48	; 0x30
 8027418:	b29b      	uxth	r3, r3
 802741a:	461a      	mov	r2, r3
 802741c:	0092      	lsls	r2, r2, #2
 802741e:	4413      	add	r3, r2
 8027420:	461a      	mov	r2, r3
 8027422:	0091      	lsls	r1, r2, #2
 8027424:	461a      	mov	r2, r3
 8027426:	460b      	mov	r3, r1
 8027428:	4413      	add	r3, r2
 802742a:	009b      	lsls	r3, r3, #2
 802742c:	b29a      	uxth	r2, r3
 802742e:	8a3b      	ldrh	r3, [r7, #16]
 8027430:	3306      	adds	r3, #6
 8027432:	4961      	ldr	r1, [pc, #388]	; (80275b8 <ce303_tarif+0xab8>)
 8027434:	5ccb      	ldrb	r3, [r1, r3]
 8027436:	3b30      	subs	r3, #48	; 0x30
 8027438:	b29b      	uxth	r3, r3
 802743a:	4619      	mov	r1, r3
 802743c:	0089      	lsls	r1, r1, #2
 802743e:	440b      	add	r3, r1
 8027440:	005b      	lsls	r3, r3, #1
 8027442:	b29b      	uxth	r3, r3
 8027444:	4413      	add	r3, r2
 8027446:	b29a      	uxth	r2, r3
 8027448:	8a3b      	ldrh	r3, [r7, #16]
 802744a:	3307      	adds	r3, #7
 802744c:	495a      	ldr	r1, [pc, #360]	; (80275b8 <ce303_tarif+0xab8>)
 802744e:	5ccb      	ldrb	r3, [r1, r3]
 8027450:	b29b      	uxth	r3, r3
 8027452:	4413      	add	r3, r2
 8027454:	b29b      	uxth	r3, r3
 8027456:	3b30      	subs	r3, #48	; 0x30
 8027458:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 802745a:	4b58      	ldr	r3, [pc, #352]	; (80275bc <ce303_tarif+0xabc>)
 802745c:	681b      	ldr	r3, [r3, #0]
 802745e:	f04f 31ff 	mov.w	r1, #4294967295
 8027462:	4618      	mov	r0, r3
 8027464:	f7f1 ff20 	bl	80192a8 <osMutexWait>
				fm25v02_write(2*CE_303_TOTAL_POWER_H_REG, ((uint8_t)(temp>>24)) );
 8027468:	68bb      	ldr	r3, [r7, #8]
 802746a:	0e1b      	lsrs	r3, r3, #24
 802746c:	b2db      	uxtb	r3, r3
 802746e:	4619      	mov	r1, r3
 8027470:	f242 0082 	movw	r0, #8322	; 0x2082
 8027474:	f003 fb0a 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_H_REG+1, ((uint8_t)(temp>>16)) );
 8027478:	68bb      	ldr	r3, [r7, #8]
 802747a:	0c1b      	lsrs	r3, r3, #16
 802747c:	b2db      	uxtb	r3, r3
 802747e:	4619      	mov	r1, r3
 8027480:	f242 0083 	movw	r0, #8323	; 0x2083
 8027484:	f003 fb02 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_L_REG, ((uint8_t)(temp>>8)) );
 8027488:	68bb      	ldr	r3, [r7, #8]
 802748a:	0a1b      	lsrs	r3, r3, #8
 802748c:	b2db      	uxtb	r3, r3
 802748e:	4619      	mov	r1, r3
 8027490:	f242 0084 	movw	r0, #8324	; 0x2084
 8027494:	f003 fafa 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_L_REG+1, ((uint8_t)temp) );
 8027498:	68bb      	ldr	r3, [r7, #8]
 802749a:	b2db      	uxtb	r3, r3
 802749c:	4619      	mov	r1, r3
 802749e:	f242 0085 	movw	r0, #8325	; 0x2085
 80274a2:	f003 faf3 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_M_REG, ((uint8_t)(temp_mil>>8)) );
 80274a6:	8afb      	ldrh	r3, [r7, #22]
 80274a8:	0a1b      	lsrs	r3, r3, #8
 80274aa:	b29b      	uxth	r3, r3
 80274ac:	b2db      	uxtb	r3, r3
 80274ae:	4619      	mov	r1, r3
 80274b0:	f242 0086 	movw	r0, #8326	; 0x2086
 80274b4:	f003 faea 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_M_REG+1, ((uint8_t)(temp_mil)) );
 80274b8:	8afb      	ldrh	r3, [r7, #22]
 80274ba:	b2db      	uxtb	r3, r3
 80274bc:	4619      	mov	r1, r3
 80274be:	f242 0087 	movw	r0, #8327	; 0x2087
 80274c2:	f003 fae3 	bl	802aa8c <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 80274c6:	4b3d      	ldr	r3, [pc, #244]	; (80275bc <ce303_tarif+0xabc>)
 80274c8:	681b      	ldr	r3, [r3, #0]
 80274ca:	4618      	mov	r0, r3
 80274cc:	f7f1 ff3a 	bl	8019344 <osMutexRelease>
				status_registers.ce303_total_power_h_reg = (uint16_t)(temp>>16);
 80274d0:	68bb      	ldr	r3, [r7, #8]
 80274d2:	0c1b      	lsrs	r3, r3, #16
 80274d4:	b29a      	uxth	r2, r3
 80274d6:	4b3a      	ldr	r3, [pc, #232]	; (80275c0 <ce303_tarif+0xac0>)
 80274d8:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
				status_registers.ce303_total_power_l_reg = (uint16_t)temp;
 80274dc:	68bb      	ldr	r3, [r7, #8]
 80274de:	b29a      	uxth	r2, r3
 80274e0:	4b37      	ldr	r3, [pc, #220]	; (80275c0 <ce303_tarif+0xac0>)
 80274e2:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
				status_registers.ce303_total_power_m_reg =  temp_mil;
 80274e6:	4a36      	ldr	r2, [pc, #216]	; (80275c0 <ce303_tarif+0xac0>)
 80274e8:	8afb      	ldrh	r3, [r7, #22]
 80274ea:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
				tarif_general_state = 1;
 80274ee:	2301      	movs	r3, #1
 80274f0:	757b      	strb	r3, [r7, #21]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице, 1 цифра перед запятой
 80274f2:	f001 bd0e 	b.w	8028f12 <ce303_tarif+0x2412>

			}

			else if( meter_rx_buffer[i+5] == 0x2E) // четыре цифры перед запятой
 80274f6:	8a3b      	ldrh	r3, [r7, #16]
 80274f8:	3305      	adds	r3, #5
 80274fa:	4a2f      	ldr	r2, [pc, #188]	; (80275b8 <ce303_tarif+0xab8>)
 80274fc:	5cd3      	ldrb	r3, [r2, r3]
 80274fe:	2b2e      	cmp	r3, #46	; 0x2e
 8027500:	f041 8507 	bne.w	8028f12 <ce303_tarif+0x2412>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+2])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+3])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+4])-0x30);
 8027504:	8a3b      	ldrh	r3, [r7, #16]
 8027506:	3301      	adds	r3, #1
 8027508:	4a2b      	ldr	r2, [pc, #172]	; (80275b8 <ce303_tarif+0xab8>)
 802750a:	5cd3      	ldrb	r3, [r2, r3]
 802750c:	3b30      	subs	r3, #48	; 0x30
 802750e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8027512:	fb02 f203 	mul.w	r2, r2, r3
 8027516:	8a3b      	ldrh	r3, [r7, #16]
 8027518:	3302      	adds	r3, #2
 802751a:	4927      	ldr	r1, [pc, #156]	; (80275b8 <ce303_tarif+0xab8>)
 802751c:	5ccb      	ldrb	r3, [r1, r3]
 802751e:	3b30      	subs	r3, #48	; 0x30
 8027520:	2164      	movs	r1, #100	; 0x64
 8027522:	fb01 f303 	mul.w	r3, r1, r3
 8027526:	18d1      	adds	r1, r2, r3
 8027528:	8a3b      	ldrh	r3, [r7, #16]
 802752a:	3303      	adds	r3, #3
 802752c:	4a22      	ldr	r2, [pc, #136]	; (80275b8 <ce303_tarif+0xab8>)
 802752e:	5cd3      	ldrb	r3, [r2, r3]
 8027530:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8027534:	4613      	mov	r3, r2
 8027536:	009b      	lsls	r3, r3, #2
 8027538:	4413      	add	r3, r2
 802753a:	005b      	lsls	r3, r3, #1
 802753c:	18ca      	adds	r2, r1, r3
 802753e:	8a3b      	ldrh	r3, [r7, #16]
 8027540:	3304      	adds	r3, #4
 8027542:	491d      	ldr	r1, [pc, #116]	; (80275b8 <ce303_tarif+0xab8>)
 8027544:	5ccb      	ldrb	r3, [r1, r3]
 8027546:	3b30      	subs	r3, #48	; 0x30
 8027548:	4413      	add	r3, r2
 802754a:	60bb      	str	r3, [r7, #8]

				if( meter_rx_buffer[i+7] == 0x29 ) // если 1 разряд после запятой
 802754c:	8a3b      	ldrh	r3, [r7, #16]
 802754e:	3307      	adds	r3, #7
 8027550:	4a19      	ldr	r2, [pc, #100]	; (80275b8 <ce303_tarif+0xab8>)
 8027552:	5cd3      	ldrb	r3, [r2, r3]
 8027554:	2b29      	cmp	r3, #41	; 0x29
 8027556:	d110      	bne.n	802757a <ce303_tarif+0xa7a>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+6])-0x30)*100;
 8027558:	8a3b      	ldrh	r3, [r7, #16]
 802755a:	3306      	adds	r3, #6
 802755c:	4a16      	ldr	r2, [pc, #88]	; (80275b8 <ce303_tarif+0xab8>)
 802755e:	5cd3      	ldrb	r3, [r2, r3]
 8027560:	3b30      	subs	r3, #48	; 0x30
 8027562:	b29b      	uxth	r3, r3
 8027564:	461a      	mov	r2, r3
 8027566:	0092      	lsls	r2, r2, #2
 8027568:	4413      	add	r3, r2
 802756a:	461a      	mov	r2, r3
 802756c:	0091      	lsls	r1, r2, #2
 802756e:	461a      	mov	r2, r3
 8027570:	460b      	mov	r3, r1
 8027572:	4413      	add	r3, r2
 8027574:	009b      	lsls	r3, r3, #2
 8027576:	82fb      	strh	r3, [r7, #22]
 8027578:	e077      	b.n	802766a <ce303_tarif+0xb6a>
				}
				else if( meter_rx_buffer[i+8] == 0x29 ) // если 2 разряда после запятой
 802757a:	8a3b      	ldrh	r3, [r7, #16]
 802757c:	3308      	adds	r3, #8
 802757e:	4a0e      	ldr	r2, [pc, #56]	; (80275b8 <ce303_tarif+0xab8>)
 8027580:	5cd3      	ldrb	r3, [r2, r3]
 8027582:	2b29      	cmp	r3, #41	; 0x29
 8027584:	d11e      	bne.n	80275c4 <ce303_tarif+0xac4>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30))*10;
 8027586:	8a3b      	ldrh	r3, [r7, #16]
 8027588:	3306      	adds	r3, #6
 802758a:	4a0b      	ldr	r2, [pc, #44]	; (80275b8 <ce303_tarif+0xab8>)
 802758c:	5cd3      	ldrb	r3, [r2, r3]
 802758e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8027592:	4613      	mov	r3, r2
 8027594:	009b      	lsls	r3, r3, #2
 8027596:	4413      	add	r3, r2
 8027598:	005b      	lsls	r3, r3, #1
 802759a:	4619      	mov	r1, r3
 802759c:	8a3b      	ldrh	r3, [r7, #16]
 802759e:	3307      	adds	r3, #7
 80275a0:	4a05      	ldr	r2, [pc, #20]	; (80275b8 <ce303_tarif+0xab8>)
 80275a2:	5cd3      	ldrb	r3, [r2, r3]
 80275a4:	3b30      	subs	r3, #48	; 0x30
 80275a6:	440b      	add	r3, r1
 80275a8:	b29b      	uxth	r3, r3
 80275aa:	461a      	mov	r2, r3
 80275ac:	0092      	lsls	r2, r2, #2
 80275ae:	4413      	add	r3, r2
 80275b0:	005b      	lsls	r3, r3, #1
 80275b2:	82fb      	strh	r3, [r7, #22]
 80275b4:	e059      	b.n	802766a <ce303_tarif+0xb6a>
 80275b6:	bf00      	nop
 80275b8:	20009a0c 	.word	0x20009a0c
 80275bc:	20009bb8 	.word	0x20009bb8
 80275c0:	2000af40 	.word	0x2000af40
				}
				else if( meter_rx_buffer[i+9] == 0x29 ) // если 3 разряда после запятой
 80275c4:	8a3b      	ldrh	r3, [r7, #16]
 80275c6:	3309      	adds	r3, #9
 80275c8:	4a95      	ldr	r2, [pc, #596]	; (8027820 <ce303_tarif+0xd20>)
 80275ca:	5cd3      	ldrb	r3, [r2, r3]
 80275cc:	2b29      	cmp	r3, #41	; 0x29
 80275ce:	d126      	bne.n	802761e <ce303_tarif+0xb1e>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
 80275d0:	8a3b      	ldrh	r3, [r7, #16]
 80275d2:	3306      	adds	r3, #6
 80275d4:	4a92      	ldr	r2, [pc, #584]	; (8027820 <ce303_tarif+0xd20>)
 80275d6:	5cd3      	ldrb	r3, [r2, r3]
 80275d8:	3b30      	subs	r3, #48	; 0x30
 80275da:	b29b      	uxth	r3, r3
 80275dc:	461a      	mov	r2, r3
 80275de:	0092      	lsls	r2, r2, #2
 80275e0:	4413      	add	r3, r2
 80275e2:	461a      	mov	r2, r3
 80275e4:	0091      	lsls	r1, r2, #2
 80275e6:	461a      	mov	r2, r3
 80275e8:	460b      	mov	r3, r1
 80275ea:	4413      	add	r3, r2
 80275ec:	009b      	lsls	r3, r3, #2
 80275ee:	b29a      	uxth	r2, r3
 80275f0:	8a3b      	ldrh	r3, [r7, #16]
 80275f2:	3307      	adds	r3, #7
 80275f4:	498a      	ldr	r1, [pc, #552]	; (8027820 <ce303_tarif+0xd20>)
 80275f6:	5ccb      	ldrb	r3, [r1, r3]
 80275f8:	3b30      	subs	r3, #48	; 0x30
 80275fa:	b29b      	uxth	r3, r3
 80275fc:	4619      	mov	r1, r3
 80275fe:	0089      	lsls	r1, r1, #2
 8027600:	440b      	add	r3, r1
 8027602:	005b      	lsls	r3, r3, #1
 8027604:	b29b      	uxth	r3, r3
 8027606:	4413      	add	r3, r2
 8027608:	b29a      	uxth	r2, r3
 802760a:	8a3b      	ldrh	r3, [r7, #16]
 802760c:	3308      	adds	r3, #8
 802760e:	4984      	ldr	r1, [pc, #528]	; (8027820 <ce303_tarif+0xd20>)
 8027610:	5ccb      	ldrb	r3, [r1, r3]
 8027612:	b29b      	uxth	r3, r3
 8027614:	4413      	add	r3, r2
 8027616:	b29b      	uxth	r3, r3
 8027618:	3b30      	subs	r3, #48	; 0x30
 802761a:	82fb      	strh	r3, [r7, #22]
 802761c:	e025      	b.n	802766a <ce303_tarif+0xb6a>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
 802761e:	8a3b      	ldrh	r3, [r7, #16]
 8027620:	3306      	adds	r3, #6
 8027622:	4a7f      	ldr	r2, [pc, #508]	; (8027820 <ce303_tarif+0xd20>)
 8027624:	5cd3      	ldrb	r3, [r2, r3]
 8027626:	3b30      	subs	r3, #48	; 0x30
 8027628:	b29b      	uxth	r3, r3
 802762a:	461a      	mov	r2, r3
 802762c:	0092      	lsls	r2, r2, #2
 802762e:	4413      	add	r3, r2
 8027630:	461a      	mov	r2, r3
 8027632:	0091      	lsls	r1, r2, #2
 8027634:	461a      	mov	r2, r3
 8027636:	460b      	mov	r3, r1
 8027638:	4413      	add	r3, r2
 802763a:	009b      	lsls	r3, r3, #2
 802763c:	b29a      	uxth	r2, r3
 802763e:	8a3b      	ldrh	r3, [r7, #16]
 8027640:	3307      	adds	r3, #7
 8027642:	4977      	ldr	r1, [pc, #476]	; (8027820 <ce303_tarif+0xd20>)
 8027644:	5ccb      	ldrb	r3, [r1, r3]
 8027646:	3b30      	subs	r3, #48	; 0x30
 8027648:	b29b      	uxth	r3, r3
 802764a:	4619      	mov	r1, r3
 802764c:	0089      	lsls	r1, r1, #2
 802764e:	440b      	add	r3, r1
 8027650:	005b      	lsls	r3, r3, #1
 8027652:	b29b      	uxth	r3, r3
 8027654:	4413      	add	r3, r2
 8027656:	b29a      	uxth	r2, r3
 8027658:	8a3b      	ldrh	r3, [r7, #16]
 802765a:	3308      	adds	r3, #8
 802765c:	4970      	ldr	r1, [pc, #448]	; (8027820 <ce303_tarif+0xd20>)
 802765e:	5ccb      	ldrb	r3, [r1, r3]
 8027660:	b29b      	uxth	r3, r3
 8027662:	4413      	add	r3, r2
 8027664:	b29b      	uxth	r3, r3
 8027666:	3b30      	subs	r3, #48	; 0x30
 8027668:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 802766a:	4b6e      	ldr	r3, [pc, #440]	; (8027824 <ce303_tarif+0xd24>)
 802766c:	681b      	ldr	r3, [r3, #0]
 802766e:	f04f 31ff 	mov.w	r1, #4294967295
 8027672:	4618      	mov	r0, r3
 8027674:	f7f1 fe18 	bl	80192a8 <osMutexWait>
				fm25v02_write(2*CE_303_TOTAL_POWER_H_REG, ((uint8_t)(temp>>24)) );
 8027678:	68bb      	ldr	r3, [r7, #8]
 802767a:	0e1b      	lsrs	r3, r3, #24
 802767c:	b2db      	uxtb	r3, r3
 802767e:	4619      	mov	r1, r3
 8027680:	f242 0082 	movw	r0, #8322	; 0x2082
 8027684:	f003 fa02 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_H_REG+1, ((uint8_t)(temp>>16)) );
 8027688:	68bb      	ldr	r3, [r7, #8]
 802768a:	0c1b      	lsrs	r3, r3, #16
 802768c:	b2db      	uxtb	r3, r3
 802768e:	4619      	mov	r1, r3
 8027690:	f242 0083 	movw	r0, #8323	; 0x2083
 8027694:	f003 f9fa 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_L_REG, ((uint8_t)(temp>>8)) );
 8027698:	68bb      	ldr	r3, [r7, #8]
 802769a:	0a1b      	lsrs	r3, r3, #8
 802769c:	b2db      	uxtb	r3, r3
 802769e:	4619      	mov	r1, r3
 80276a0:	f242 0084 	movw	r0, #8324	; 0x2084
 80276a4:	f003 f9f2 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_L_REG+1, ((uint8_t)temp) );
 80276a8:	68bb      	ldr	r3, [r7, #8]
 80276aa:	b2db      	uxtb	r3, r3
 80276ac:	4619      	mov	r1, r3
 80276ae:	f242 0085 	movw	r0, #8325	; 0x2085
 80276b2:	f003 f9eb 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_M_REG, ((uint8_t)(temp_mil>>8)) );
 80276b6:	8afb      	ldrh	r3, [r7, #22]
 80276b8:	0a1b      	lsrs	r3, r3, #8
 80276ba:	b29b      	uxth	r3, r3
 80276bc:	b2db      	uxtb	r3, r3
 80276be:	4619      	mov	r1, r3
 80276c0:	f242 0086 	movw	r0, #8326	; 0x2086
 80276c4:	f003 f9e2 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_M_REG+1, ((uint8_t)(temp_mil)) );
 80276c8:	8afb      	ldrh	r3, [r7, #22]
 80276ca:	b2db      	uxtb	r3, r3
 80276cc:	4619      	mov	r1, r3
 80276ce:	f242 0087 	movw	r0, #8327	; 0x2087
 80276d2:	f003 f9db 	bl	802aa8c <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 80276d6:	4b53      	ldr	r3, [pc, #332]	; (8027824 <ce303_tarif+0xd24>)
 80276d8:	681b      	ldr	r3, [r3, #0]
 80276da:	4618      	mov	r0, r3
 80276dc:	f7f1 fe32 	bl	8019344 <osMutexRelease>
				status_registers.ce303_total_power_h_reg = (uint16_t)(temp>>16);
 80276e0:	68bb      	ldr	r3, [r7, #8]
 80276e2:	0c1b      	lsrs	r3, r3, #16
 80276e4:	b29a      	uxth	r2, r3
 80276e6:	4b50      	ldr	r3, [pc, #320]	; (8027828 <ce303_tarif+0xd28>)
 80276e8:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
				status_registers.ce303_total_power_l_reg = (uint16_t)temp;
 80276ec:	68bb      	ldr	r3, [r7, #8]
 80276ee:	b29a      	uxth	r2, r3
 80276f0:	4b4d      	ldr	r3, [pc, #308]	; (8027828 <ce303_tarif+0xd28>)
 80276f2:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
				status_registers.ce303_total_power_m_reg =  temp_mil;
 80276f6:	4a4c      	ldr	r2, [pc, #304]	; (8027828 <ce303_tarif+0xd28>)
 80276f8:	8afb      	ldrh	r3, [r7, #22]
 80276fa:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
				tarif_general_state = 1;
 80276fe:	2301      	movs	r3, #1
 8027700:	757b      	strb	r3, [r7, #21]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице, 1 цифра перед запятой
 8027702:	f001 bc06 	b.w	8028f12 <ce303_tarif+0x2412>

			}

		}

		else if( (meter_rx_buffer[i] == 0x28) && (tarif_general_state==1) && (tarif_1_state==0) && (tarif_2_state==0) && (tarif_3_state==0) && (tarif_4_state==0) && (tarif_5_state==0) ) // 0х28 означает символ "(" в ASCII таблице
 8027706:	8a3b      	ldrh	r3, [r7, #16]
 8027708:	4a45      	ldr	r2, [pc, #276]	; (8027820 <ce303_tarif+0xd20>)
 802770a:	5cd3      	ldrb	r3, [r2, r3]
 802770c:	2b28      	cmp	r3, #40	; 0x28
 802770e:	f040 83f6 	bne.w	8027efe <ce303_tarif+0x13fe>
 8027712:	7d7b      	ldrb	r3, [r7, #21]
 8027714:	2b01      	cmp	r3, #1
 8027716:	f040 83f2 	bne.w	8027efe <ce303_tarif+0x13fe>
 802771a:	7d3b      	ldrb	r3, [r7, #20]
 802771c:	2b00      	cmp	r3, #0
 802771e:	f040 83ee 	bne.w	8027efe <ce303_tarif+0x13fe>
 8027722:	7cfb      	ldrb	r3, [r7, #19]
 8027724:	2b00      	cmp	r3, #0
 8027726:	f040 83ea 	bne.w	8027efe <ce303_tarif+0x13fe>
 802772a:	7cbb      	ldrb	r3, [r7, #18]
 802772c:	2b00      	cmp	r3, #0
 802772e:	f040 83e6 	bne.w	8027efe <ce303_tarif+0x13fe>
 8027732:	7bfb      	ldrb	r3, [r7, #15]
 8027734:	2b00      	cmp	r3, #0
 8027736:	f040 83e2 	bne.w	8027efe <ce303_tarif+0x13fe>
 802773a:	7bbb      	ldrb	r3, [r7, #14]
 802773c:	2b00      	cmp	r3, #0
 802773e:	f040 83de 	bne.w	8027efe <ce303_tarif+0x13fe>
		{
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице, 1 цифра перед запятой
 8027742:	8a3b      	ldrh	r3, [r7, #16]
 8027744:	3302      	adds	r3, #2
 8027746:	4a36      	ldr	r2, [pc, #216]	; (8027820 <ce303_tarif+0xd20>)
 8027748:	5cd3      	ldrb	r3, [r2, r3]
 802774a:	2b2e      	cmp	r3, #46	; 0x2e
 802774c:	f040 80e2 	bne.w	8027914 <ce303_tarif+0xe14>
			{
				temp = (uint32_t)(meter_rx_buffer[i+1]-0x30);
 8027750:	8a3b      	ldrh	r3, [r7, #16]
 8027752:	3301      	adds	r3, #1
 8027754:	4a32      	ldr	r2, [pc, #200]	; (8027820 <ce303_tarif+0xd20>)
 8027756:	5cd3      	ldrb	r3, [r2, r3]
 8027758:	3b30      	subs	r3, #48	; 0x30
 802775a:	60bb      	str	r3, [r7, #8]

				if( meter_rx_buffer[i+4] == 0x29 ) // если 1 разряд после запятой
 802775c:	8a3b      	ldrh	r3, [r7, #16]
 802775e:	3304      	adds	r3, #4
 8027760:	4a2f      	ldr	r2, [pc, #188]	; (8027820 <ce303_tarif+0xd20>)
 8027762:	5cd3      	ldrb	r3, [r2, r3]
 8027764:	2b29      	cmp	r3, #41	; 0x29
 8027766:	d110      	bne.n	802778a <ce303_tarif+0xc8a>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+3])-0x30)*100;
 8027768:	8a3b      	ldrh	r3, [r7, #16]
 802776a:	3303      	adds	r3, #3
 802776c:	4a2c      	ldr	r2, [pc, #176]	; (8027820 <ce303_tarif+0xd20>)
 802776e:	5cd3      	ldrb	r3, [r2, r3]
 8027770:	3b30      	subs	r3, #48	; 0x30
 8027772:	b29b      	uxth	r3, r3
 8027774:	461a      	mov	r2, r3
 8027776:	0092      	lsls	r2, r2, #2
 8027778:	4413      	add	r3, r2
 802777a:	461a      	mov	r2, r3
 802777c:	0091      	lsls	r1, r2, #2
 802777e:	461a      	mov	r2, r3
 8027780:	460b      	mov	r3, r1
 8027782:	4413      	add	r3, r2
 8027784:	009b      	lsls	r3, r3, #2
 8027786:	82fb      	strh	r3, [r7, #22]
 8027788:	e076      	b.n	8027878 <ce303_tarif+0xd78>
				}
				else if( meter_rx_buffer[i+5] == 0x29 ) // если 2 разряда после запятой
 802778a:	8a3b      	ldrh	r3, [r7, #16]
 802778c:	3305      	adds	r3, #5
 802778e:	4a24      	ldr	r2, [pc, #144]	; (8027820 <ce303_tarif+0xd20>)
 8027790:	5cd3      	ldrb	r3, [r2, r3]
 8027792:	2b29      	cmp	r3, #41	; 0x29
 8027794:	d117      	bne.n	80277c6 <ce303_tarif+0xcc6>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+3])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+4])-0x30))*10;
 8027796:	8a3b      	ldrh	r3, [r7, #16]
 8027798:	3303      	adds	r3, #3
 802779a:	4a21      	ldr	r2, [pc, #132]	; (8027820 <ce303_tarif+0xd20>)
 802779c:	5cd3      	ldrb	r3, [r2, r3]
 802779e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80277a2:	4613      	mov	r3, r2
 80277a4:	009b      	lsls	r3, r3, #2
 80277a6:	4413      	add	r3, r2
 80277a8:	005b      	lsls	r3, r3, #1
 80277aa:	4619      	mov	r1, r3
 80277ac:	8a3b      	ldrh	r3, [r7, #16]
 80277ae:	3304      	adds	r3, #4
 80277b0:	4a1b      	ldr	r2, [pc, #108]	; (8027820 <ce303_tarif+0xd20>)
 80277b2:	5cd3      	ldrb	r3, [r2, r3]
 80277b4:	3b30      	subs	r3, #48	; 0x30
 80277b6:	440b      	add	r3, r1
 80277b8:	b29b      	uxth	r3, r3
 80277ba:	461a      	mov	r2, r3
 80277bc:	0092      	lsls	r2, r2, #2
 80277be:	4413      	add	r3, r2
 80277c0:	005b      	lsls	r3, r3, #1
 80277c2:	82fb      	strh	r3, [r7, #22]
 80277c4:	e058      	b.n	8027878 <ce303_tarif+0xd78>
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 3 разряда после запятой
 80277c6:	8a3b      	ldrh	r3, [r7, #16]
 80277c8:	3306      	adds	r3, #6
 80277ca:	4a15      	ldr	r2, [pc, #84]	; (8027820 <ce303_tarif+0xd20>)
 80277cc:	5cd3      	ldrb	r3, [r2, r3]
 80277ce:	2b29      	cmp	r3, #41	; 0x29
 80277d0:	d12c      	bne.n	802782c <ce303_tarif+0xd2c>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 80277d2:	8a3b      	ldrh	r3, [r7, #16]
 80277d4:	3303      	adds	r3, #3
 80277d6:	4a12      	ldr	r2, [pc, #72]	; (8027820 <ce303_tarif+0xd20>)
 80277d8:	5cd3      	ldrb	r3, [r2, r3]
 80277da:	3b30      	subs	r3, #48	; 0x30
 80277dc:	b29b      	uxth	r3, r3
 80277de:	461a      	mov	r2, r3
 80277e0:	0092      	lsls	r2, r2, #2
 80277e2:	4413      	add	r3, r2
 80277e4:	461a      	mov	r2, r3
 80277e6:	0091      	lsls	r1, r2, #2
 80277e8:	461a      	mov	r2, r3
 80277ea:	460b      	mov	r3, r1
 80277ec:	4413      	add	r3, r2
 80277ee:	009b      	lsls	r3, r3, #2
 80277f0:	b29a      	uxth	r2, r3
 80277f2:	8a3b      	ldrh	r3, [r7, #16]
 80277f4:	3304      	adds	r3, #4
 80277f6:	490a      	ldr	r1, [pc, #40]	; (8027820 <ce303_tarif+0xd20>)
 80277f8:	5ccb      	ldrb	r3, [r1, r3]
 80277fa:	3b30      	subs	r3, #48	; 0x30
 80277fc:	b29b      	uxth	r3, r3
 80277fe:	4619      	mov	r1, r3
 8027800:	0089      	lsls	r1, r1, #2
 8027802:	440b      	add	r3, r1
 8027804:	005b      	lsls	r3, r3, #1
 8027806:	b29b      	uxth	r3, r3
 8027808:	4413      	add	r3, r2
 802780a:	b29a      	uxth	r2, r3
 802780c:	8a3b      	ldrh	r3, [r7, #16]
 802780e:	3305      	adds	r3, #5
 8027810:	4903      	ldr	r1, [pc, #12]	; (8027820 <ce303_tarif+0xd20>)
 8027812:	5ccb      	ldrb	r3, [r1, r3]
 8027814:	b29b      	uxth	r3, r3
 8027816:	4413      	add	r3, r2
 8027818:	b29b      	uxth	r3, r3
 802781a:	3b30      	subs	r3, #48	; 0x30
 802781c:	82fb      	strh	r3, [r7, #22]
 802781e:	e02b      	b.n	8027878 <ce303_tarif+0xd78>
 8027820:	20009a0c 	.word	0x20009a0c
 8027824:	20009bb8 	.word	0x20009bb8
 8027828:	2000af40 	.word	0x2000af40
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 802782c:	8a3b      	ldrh	r3, [r7, #16]
 802782e:	3303      	adds	r3, #3
 8027830:	4ab0      	ldr	r2, [pc, #704]	; (8027af4 <ce303_tarif+0xff4>)
 8027832:	5cd3      	ldrb	r3, [r2, r3]
 8027834:	3b30      	subs	r3, #48	; 0x30
 8027836:	b29b      	uxth	r3, r3
 8027838:	461a      	mov	r2, r3
 802783a:	0092      	lsls	r2, r2, #2
 802783c:	4413      	add	r3, r2
 802783e:	461a      	mov	r2, r3
 8027840:	0091      	lsls	r1, r2, #2
 8027842:	461a      	mov	r2, r3
 8027844:	460b      	mov	r3, r1
 8027846:	4413      	add	r3, r2
 8027848:	009b      	lsls	r3, r3, #2
 802784a:	b29a      	uxth	r2, r3
 802784c:	8a3b      	ldrh	r3, [r7, #16]
 802784e:	3304      	adds	r3, #4
 8027850:	49a8      	ldr	r1, [pc, #672]	; (8027af4 <ce303_tarif+0xff4>)
 8027852:	5ccb      	ldrb	r3, [r1, r3]
 8027854:	3b30      	subs	r3, #48	; 0x30
 8027856:	b29b      	uxth	r3, r3
 8027858:	4619      	mov	r1, r3
 802785a:	0089      	lsls	r1, r1, #2
 802785c:	440b      	add	r3, r1
 802785e:	005b      	lsls	r3, r3, #1
 8027860:	b29b      	uxth	r3, r3
 8027862:	4413      	add	r3, r2
 8027864:	b29a      	uxth	r2, r3
 8027866:	8a3b      	ldrh	r3, [r7, #16]
 8027868:	3305      	adds	r3, #5
 802786a:	49a2      	ldr	r1, [pc, #648]	; (8027af4 <ce303_tarif+0xff4>)
 802786c:	5ccb      	ldrb	r3, [r1, r3]
 802786e:	b29b      	uxth	r3, r3
 8027870:	4413      	add	r3, r2
 8027872:	b29b      	uxth	r3, r3
 8027874:	3b30      	subs	r3, #48	; 0x30
 8027876:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8027878:	4b9f      	ldr	r3, [pc, #636]	; (8027af8 <ce303_tarif+0xff8>)
 802787a:	681b      	ldr	r3, [r3, #0]
 802787c:	f04f 31ff 	mov.w	r1, #4294967295
 8027880:	4618      	mov	r0, r3
 8027882:	f7f1 fd11 	bl	80192a8 <osMutexWait>
				fm25v02_write(2*CE_303_TARIF1_POWER_H_REG, ((uint8_t)(temp>>24)) );
 8027886:	68bb      	ldr	r3, [r7, #8]
 8027888:	0e1b      	lsrs	r3, r3, #24
 802788a:	b2db      	uxtb	r3, r3
 802788c:	4619      	mov	r1, r3
 802788e:	f242 0088 	movw	r0, #8328	; 0x2088
 8027892:	f003 f8fb 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_H_REG+1, ((uint8_t)(temp>>16)) );
 8027896:	68bb      	ldr	r3, [r7, #8]
 8027898:	0c1b      	lsrs	r3, r3, #16
 802789a:	b2db      	uxtb	r3, r3
 802789c:	4619      	mov	r1, r3
 802789e:	f242 0089 	movw	r0, #8329	; 0x2089
 80278a2:	f003 f8f3 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_L_REG, ((uint8_t)(temp>>8)) );
 80278a6:	68bb      	ldr	r3, [r7, #8]
 80278a8:	0a1b      	lsrs	r3, r3, #8
 80278aa:	b2db      	uxtb	r3, r3
 80278ac:	4619      	mov	r1, r3
 80278ae:	f242 008a 	movw	r0, #8330	; 0x208a
 80278b2:	f003 f8eb 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_L_REG+1, ((uint8_t)temp) );
 80278b6:	68bb      	ldr	r3, [r7, #8]
 80278b8:	b2db      	uxtb	r3, r3
 80278ba:	4619      	mov	r1, r3
 80278bc:	f242 008b 	movw	r0, #8331	; 0x208b
 80278c0:	f003 f8e4 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_MIL_REG, ((uint8_t)(temp_mil>>8)) );
 80278c4:	8afb      	ldrh	r3, [r7, #22]
 80278c6:	0a1b      	lsrs	r3, r3, #8
 80278c8:	b29b      	uxth	r3, r3
 80278ca:	b2db      	uxtb	r3, r3
 80278cc:	4619      	mov	r1, r3
 80278ce:	f242 008c 	movw	r0, #8332	; 0x208c
 80278d2:	f003 f8db 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_MIL_REG+1, ((uint8_t)(temp_mil)) );
 80278d6:	8afb      	ldrh	r3, [r7, #22]
 80278d8:	b2db      	uxtb	r3, r3
 80278da:	4619      	mov	r1, r3
 80278dc:	f242 008d 	movw	r0, #8333	; 0x208d
 80278e0:	f003 f8d4 	bl	802aa8c <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 80278e4:	4b84      	ldr	r3, [pc, #528]	; (8027af8 <ce303_tarif+0xff8>)
 80278e6:	681b      	ldr	r3, [r3, #0]
 80278e8:	4618      	mov	r0, r3
 80278ea:	f7f1 fd2b 	bl	8019344 <osMutexRelease>
				status_registers.ce303_tarif1_power_h_reg = (uint16_t)(temp>>16);
 80278ee:	68bb      	ldr	r3, [r7, #8]
 80278f0:	0c1b      	lsrs	r3, r3, #16
 80278f2:	b29a      	uxth	r2, r3
 80278f4:	4b81      	ldr	r3, [pc, #516]	; (8027afc <ce303_tarif+0xffc>)
 80278f6:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
				status_registers.ce303_tarif1_power_l_reg = (uint16_t)temp;
 80278fa:	68bb      	ldr	r3, [r7, #8]
 80278fc:	b29a      	uxth	r2, r3
 80278fe:	4b7f      	ldr	r3, [pc, #508]	; (8027afc <ce303_tarif+0xffc>)
 8027900:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
				status_registers.ce303_tarif1_power_mil_reg =  temp_mil;
 8027904:	4a7d      	ldr	r2, [pc, #500]	; (8027afc <ce303_tarif+0xffc>)
 8027906:	8afb      	ldrh	r3, [r7, #22]
 8027908:	f8a2 308c 	strh.w	r3, [r2, #140]	; 0x8c
				tarif_1_state = 1;
 802790c:	2301      	movs	r3, #1
 802790e:	753b      	strb	r3, [r7, #20]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице, 1 цифра перед запятой
 8027910:	f001 bb01 	b.w	8028f16 <ce303_tarif+0x2416>

			}

			else if( meter_rx_buffer[i+3] == 0x2E) // 2 цифры перед запятой
 8027914:	8a3b      	ldrh	r3, [r7, #16]
 8027916:	3303      	adds	r3, #3
 8027918:	4a76      	ldr	r2, [pc, #472]	; (8027af4 <ce303_tarif+0xff4>)
 802791a:	5cd3      	ldrb	r3, [r2, r3]
 802791c:	2b2e      	cmp	r3, #46	; 0x2e
 802791e:	f040 80ef 	bne.w	8027b00 <ce303_tarif+0x1000>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+2])-0x30);
 8027922:	8a3b      	ldrh	r3, [r7, #16]
 8027924:	3301      	adds	r3, #1
 8027926:	4a73      	ldr	r2, [pc, #460]	; (8027af4 <ce303_tarif+0xff4>)
 8027928:	5cd3      	ldrb	r3, [r2, r3]
 802792a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 802792e:	4613      	mov	r3, r2
 8027930:	009b      	lsls	r3, r3, #2
 8027932:	4413      	add	r3, r2
 8027934:	005b      	lsls	r3, r3, #1
 8027936:	4619      	mov	r1, r3
 8027938:	8a3b      	ldrh	r3, [r7, #16]
 802793a:	3302      	adds	r3, #2
 802793c:	4a6d      	ldr	r2, [pc, #436]	; (8027af4 <ce303_tarif+0xff4>)
 802793e:	5cd3      	ldrb	r3, [r2, r3]
 8027940:	3b30      	subs	r3, #48	; 0x30
 8027942:	440b      	add	r3, r1
 8027944:	60bb      	str	r3, [r7, #8]

				if( meter_rx_buffer[i+5] == 0x29 ) // если 1 разряд после запятой
 8027946:	8a3b      	ldrh	r3, [r7, #16]
 8027948:	3305      	adds	r3, #5
 802794a:	4a6a      	ldr	r2, [pc, #424]	; (8027af4 <ce303_tarif+0xff4>)
 802794c:	5cd3      	ldrb	r3, [r2, r3]
 802794e:	2b29      	cmp	r3, #41	; 0x29
 8027950:	d110      	bne.n	8027974 <ce303_tarif+0xe74>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+4])-0x30)*100;
 8027952:	8a3b      	ldrh	r3, [r7, #16]
 8027954:	3304      	adds	r3, #4
 8027956:	4a67      	ldr	r2, [pc, #412]	; (8027af4 <ce303_tarif+0xff4>)
 8027958:	5cd3      	ldrb	r3, [r2, r3]
 802795a:	3b30      	subs	r3, #48	; 0x30
 802795c:	b29b      	uxth	r3, r3
 802795e:	461a      	mov	r2, r3
 8027960:	0092      	lsls	r2, r2, #2
 8027962:	4413      	add	r3, r2
 8027964:	461a      	mov	r2, r3
 8027966:	0091      	lsls	r1, r2, #2
 8027968:	461a      	mov	r2, r3
 802796a:	460b      	mov	r3, r1
 802796c:	4413      	add	r3, r2
 802796e:	009b      	lsls	r3, r3, #2
 8027970:	82fb      	strh	r3, [r7, #22]
 8027972:	e070      	b.n	8027a56 <ce303_tarif+0xf56>
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 2 разряда после запятой
 8027974:	8a3b      	ldrh	r3, [r7, #16]
 8027976:	3306      	adds	r3, #6
 8027978:	4a5e      	ldr	r2, [pc, #376]	; (8027af4 <ce303_tarif+0xff4>)
 802797a:	5cd3      	ldrb	r3, [r2, r3]
 802797c:	2b29      	cmp	r3, #41	; 0x29
 802797e:	d117      	bne.n	80279b0 <ce303_tarif+0xeb0>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30))*10;
 8027980:	8a3b      	ldrh	r3, [r7, #16]
 8027982:	3304      	adds	r3, #4
 8027984:	4a5b      	ldr	r2, [pc, #364]	; (8027af4 <ce303_tarif+0xff4>)
 8027986:	5cd3      	ldrb	r3, [r2, r3]
 8027988:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 802798c:	4613      	mov	r3, r2
 802798e:	009b      	lsls	r3, r3, #2
 8027990:	4413      	add	r3, r2
 8027992:	005b      	lsls	r3, r3, #1
 8027994:	4619      	mov	r1, r3
 8027996:	8a3b      	ldrh	r3, [r7, #16]
 8027998:	3305      	adds	r3, #5
 802799a:	4a56      	ldr	r2, [pc, #344]	; (8027af4 <ce303_tarif+0xff4>)
 802799c:	5cd3      	ldrb	r3, [r2, r3]
 802799e:	3b30      	subs	r3, #48	; 0x30
 80279a0:	440b      	add	r3, r1
 80279a2:	b29b      	uxth	r3, r3
 80279a4:	461a      	mov	r2, r3
 80279a6:	0092      	lsls	r2, r2, #2
 80279a8:	4413      	add	r3, r2
 80279aa:	005b      	lsls	r3, r3, #1
 80279ac:	82fb      	strh	r3, [r7, #22]
 80279ae:	e052      	b.n	8027a56 <ce303_tarif+0xf56>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 3 разряда после запятой
 80279b0:	8a3b      	ldrh	r3, [r7, #16]
 80279b2:	3307      	adds	r3, #7
 80279b4:	4a4f      	ldr	r2, [pc, #316]	; (8027af4 <ce303_tarif+0xff4>)
 80279b6:	5cd3      	ldrb	r3, [r2, r3]
 80279b8:	2b29      	cmp	r3, #41	; 0x29
 80279ba:	d126      	bne.n	8027a0a <ce303_tarif+0xf0a>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 80279bc:	8a3b      	ldrh	r3, [r7, #16]
 80279be:	3304      	adds	r3, #4
 80279c0:	4a4c      	ldr	r2, [pc, #304]	; (8027af4 <ce303_tarif+0xff4>)
 80279c2:	5cd3      	ldrb	r3, [r2, r3]
 80279c4:	3b30      	subs	r3, #48	; 0x30
 80279c6:	b29b      	uxth	r3, r3
 80279c8:	461a      	mov	r2, r3
 80279ca:	0092      	lsls	r2, r2, #2
 80279cc:	4413      	add	r3, r2
 80279ce:	461a      	mov	r2, r3
 80279d0:	0091      	lsls	r1, r2, #2
 80279d2:	461a      	mov	r2, r3
 80279d4:	460b      	mov	r3, r1
 80279d6:	4413      	add	r3, r2
 80279d8:	009b      	lsls	r3, r3, #2
 80279da:	b29a      	uxth	r2, r3
 80279dc:	8a3b      	ldrh	r3, [r7, #16]
 80279de:	3305      	adds	r3, #5
 80279e0:	4944      	ldr	r1, [pc, #272]	; (8027af4 <ce303_tarif+0xff4>)
 80279e2:	5ccb      	ldrb	r3, [r1, r3]
 80279e4:	3b30      	subs	r3, #48	; 0x30
 80279e6:	b29b      	uxth	r3, r3
 80279e8:	4619      	mov	r1, r3
 80279ea:	0089      	lsls	r1, r1, #2
 80279ec:	440b      	add	r3, r1
 80279ee:	005b      	lsls	r3, r3, #1
 80279f0:	b29b      	uxth	r3, r3
 80279f2:	4413      	add	r3, r2
 80279f4:	b29a      	uxth	r2, r3
 80279f6:	8a3b      	ldrh	r3, [r7, #16]
 80279f8:	3306      	adds	r3, #6
 80279fa:	493e      	ldr	r1, [pc, #248]	; (8027af4 <ce303_tarif+0xff4>)
 80279fc:	5ccb      	ldrb	r3, [r1, r3]
 80279fe:	b29b      	uxth	r3, r3
 8027a00:	4413      	add	r3, r2
 8027a02:	b29b      	uxth	r3, r3
 8027a04:	3b30      	subs	r3, #48	; 0x30
 8027a06:	82fb      	strh	r3, [r7, #22]
 8027a08:	e025      	b.n	8027a56 <ce303_tarif+0xf56>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 8027a0a:	8a3b      	ldrh	r3, [r7, #16]
 8027a0c:	3304      	adds	r3, #4
 8027a0e:	4a39      	ldr	r2, [pc, #228]	; (8027af4 <ce303_tarif+0xff4>)
 8027a10:	5cd3      	ldrb	r3, [r2, r3]
 8027a12:	3b30      	subs	r3, #48	; 0x30
 8027a14:	b29b      	uxth	r3, r3
 8027a16:	461a      	mov	r2, r3
 8027a18:	0092      	lsls	r2, r2, #2
 8027a1a:	4413      	add	r3, r2
 8027a1c:	461a      	mov	r2, r3
 8027a1e:	0091      	lsls	r1, r2, #2
 8027a20:	461a      	mov	r2, r3
 8027a22:	460b      	mov	r3, r1
 8027a24:	4413      	add	r3, r2
 8027a26:	009b      	lsls	r3, r3, #2
 8027a28:	b29a      	uxth	r2, r3
 8027a2a:	8a3b      	ldrh	r3, [r7, #16]
 8027a2c:	3305      	adds	r3, #5
 8027a2e:	4931      	ldr	r1, [pc, #196]	; (8027af4 <ce303_tarif+0xff4>)
 8027a30:	5ccb      	ldrb	r3, [r1, r3]
 8027a32:	3b30      	subs	r3, #48	; 0x30
 8027a34:	b29b      	uxth	r3, r3
 8027a36:	4619      	mov	r1, r3
 8027a38:	0089      	lsls	r1, r1, #2
 8027a3a:	440b      	add	r3, r1
 8027a3c:	005b      	lsls	r3, r3, #1
 8027a3e:	b29b      	uxth	r3, r3
 8027a40:	4413      	add	r3, r2
 8027a42:	b29a      	uxth	r2, r3
 8027a44:	8a3b      	ldrh	r3, [r7, #16]
 8027a46:	3306      	adds	r3, #6
 8027a48:	492a      	ldr	r1, [pc, #168]	; (8027af4 <ce303_tarif+0xff4>)
 8027a4a:	5ccb      	ldrb	r3, [r1, r3]
 8027a4c:	b29b      	uxth	r3, r3
 8027a4e:	4413      	add	r3, r2
 8027a50:	b29b      	uxth	r3, r3
 8027a52:	3b30      	subs	r3, #48	; 0x30
 8027a54:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8027a56:	4b28      	ldr	r3, [pc, #160]	; (8027af8 <ce303_tarif+0xff8>)
 8027a58:	681b      	ldr	r3, [r3, #0]
 8027a5a:	f04f 31ff 	mov.w	r1, #4294967295
 8027a5e:	4618      	mov	r0, r3
 8027a60:	f7f1 fc22 	bl	80192a8 <osMutexWait>
				fm25v02_write(2*CE_303_TARIF1_POWER_H_REG, ((uint8_t)(temp>>24)) );
 8027a64:	68bb      	ldr	r3, [r7, #8]
 8027a66:	0e1b      	lsrs	r3, r3, #24
 8027a68:	b2db      	uxtb	r3, r3
 8027a6a:	4619      	mov	r1, r3
 8027a6c:	f242 0088 	movw	r0, #8328	; 0x2088
 8027a70:	f003 f80c 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_H_REG+1, ((uint8_t)(temp>>16)) );
 8027a74:	68bb      	ldr	r3, [r7, #8]
 8027a76:	0c1b      	lsrs	r3, r3, #16
 8027a78:	b2db      	uxtb	r3, r3
 8027a7a:	4619      	mov	r1, r3
 8027a7c:	f242 0089 	movw	r0, #8329	; 0x2089
 8027a80:	f003 f804 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_L_REG, ((uint8_t)(temp>>8)) );
 8027a84:	68bb      	ldr	r3, [r7, #8]
 8027a86:	0a1b      	lsrs	r3, r3, #8
 8027a88:	b2db      	uxtb	r3, r3
 8027a8a:	4619      	mov	r1, r3
 8027a8c:	f242 008a 	movw	r0, #8330	; 0x208a
 8027a90:	f002 fffc 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_L_REG+1, ((uint8_t)temp) );
 8027a94:	68bb      	ldr	r3, [r7, #8]
 8027a96:	b2db      	uxtb	r3, r3
 8027a98:	4619      	mov	r1, r3
 8027a9a:	f242 008b 	movw	r0, #8331	; 0x208b
 8027a9e:	f002 fff5 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_MIL_REG, ((uint8_t)(temp_mil>>8)) );
 8027aa2:	8afb      	ldrh	r3, [r7, #22]
 8027aa4:	0a1b      	lsrs	r3, r3, #8
 8027aa6:	b29b      	uxth	r3, r3
 8027aa8:	b2db      	uxtb	r3, r3
 8027aaa:	4619      	mov	r1, r3
 8027aac:	f242 008c 	movw	r0, #8332	; 0x208c
 8027ab0:	f002 ffec 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_MIL_REG+1, ((uint8_t)(temp_mil)) );
 8027ab4:	8afb      	ldrh	r3, [r7, #22]
 8027ab6:	b2db      	uxtb	r3, r3
 8027ab8:	4619      	mov	r1, r3
 8027aba:	f242 008d 	movw	r0, #8333	; 0x208d
 8027abe:	f002 ffe5 	bl	802aa8c <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8027ac2:	4b0d      	ldr	r3, [pc, #52]	; (8027af8 <ce303_tarif+0xff8>)
 8027ac4:	681b      	ldr	r3, [r3, #0]
 8027ac6:	4618      	mov	r0, r3
 8027ac8:	f7f1 fc3c 	bl	8019344 <osMutexRelease>
				status_registers.ce303_tarif1_power_h_reg = (uint16_t)(temp>>16);
 8027acc:	68bb      	ldr	r3, [r7, #8]
 8027ace:	0c1b      	lsrs	r3, r3, #16
 8027ad0:	b29a      	uxth	r2, r3
 8027ad2:	4b0a      	ldr	r3, [pc, #40]	; (8027afc <ce303_tarif+0xffc>)
 8027ad4:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
				status_registers.ce303_tarif1_power_l_reg = (uint16_t)temp;
 8027ad8:	68bb      	ldr	r3, [r7, #8]
 8027ada:	b29a      	uxth	r2, r3
 8027adc:	4b07      	ldr	r3, [pc, #28]	; (8027afc <ce303_tarif+0xffc>)
 8027ade:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
				status_registers.ce303_tarif1_power_mil_reg =  temp_mil;
 8027ae2:	4a06      	ldr	r2, [pc, #24]	; (8027afc <ce303_tarif+0xffc>)
 8027ae4:	8afb      	ldrh	r3, [r7, #22]
 8027ae6:	f8a2 308c 	strh.w	r3, [r2, #140]	; 0x8c
				tarif_1_state = 1;
 8027aea:	2301      	movs	r3, #1
 8027aec:	753b      	strb	r3, [r7, #20]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице, 1 цифра перед запятой
 8027aee:	f001 ba12 	b.w	8028f16 <ce303_tarif+0x2416>
 8027af2:	bf00      	nop
 8027af4:	20009a0c 	.word	0x20009a0c
 8027af8:	20009bb8 	.word	0x20009bb8
 8027afc:	2000af40 	.word	0x2000af40

			}

			else if( meter_rx_buffer[i+4] == 0x2E) // 3 цифры перед запятой
 8027b00:	8a3b      	ldrh	r3, [r7, #16]
 8027b02:	3304      	adds	r3, #4
 8027b04:	4aaa      	ldr	r2, [pc, #680]	; (8027db0 <ce303_tarif+0x12b0>)
 8027b06:	5cd3      	ldrb	r3, [r2, r3]
 8027b08:	2b2e      	cmp	r3, #46	; 0x2e
 8027b0a:	f040 80f0 	bne.w	8027cee <ce303_tarif+0x11ee>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+2])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+3])-0x30);
 8027b0e:	8a3b      	ldrh	r3, [r7, #16]
 8027b10:	3301      	adds	r3, #1
 8027b12:	4aa7      	ldr	r2, [pc, #668]	; (8027db0 <ce303_tarif+0x12b0>)
 8027b14:	5cd3      	ldrb	r3, [r2, r3]
 8027b16:	3b30      	subs	r3, #48	; 0x30
 8027b18:	2264      	movs	r2, #100	; 0x64
 8027b1a:	fb02 f103 	mul.w	r1, r2, r3
 8027b1e:	8a3b      	ldrh	r3, [r7, #16]
 8027b20:	3302      	adds	r3, #2
 8027b22:	4aa3      	ldr	r2, [pc, #652]	; (8027db0 <ce303_tarif+0x12b0>)
 8027b24:	5cd3      	ldrb	r3, [r2, r3]
 8027b26:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8027b2a:	4613      	mov	r3, r2
 8027b2c:	009b      	lsls	r3, r3, #2
 8027b2e:	4413      	add	r3, r2
 8027b30:	005b      	lsls	r3, r3, #1
 8027b32:	18ca      	adds	r2, r1, r3
 8027b34:	8a3b      	ldrh	r3, [r7, #16]
 8027b36:	3303      	adds	r3, #3
 8027b38:	499d      	ldr	r1, [pc, #628]	; (8027db0 <ce303_tarif+0x12b0>)
 8027b3a:	5ccb      	ldrb	r3, [r1, r3]
 8027b3c:	3b30      	subs	r3, #48	; 0x30
 8027b3e:	4413      	add	r3, r2
 8027b40:	60bb      	str	r3, [r7, #8]

				if( meter_rx_buffer[i+6] == 0x29 ) // если 1 разряд после запятой
 8027b42:	8a3b      	ldrh	r3, [r7, #16]
 8027b44:	3306      	adds	r3, #6
 8027b46:	4a9a      	ldr	r2, [pc, #616]	; (8027db0 <ce303_tarif+0x12b0>)
 8027b48:	5cd3      	ldrb	r3, [r2, r3]
 8027b4a:	2b29      	cmp	r3, #41	; 0x29
 8027b4c:	d110      	bne.n	8027b70 <ce303_tarif+0x1070>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+5])-0x30)*100;
 8027b4e:	8a3b      	ldrh	r3, [r7, #16]
 8027b50:	3305      	adds	r3, #5
 8027b52:	4a97      	ldr	r2, [pc, #604]	; (8027db0 <ce303_tarif+0x12b0>)
 8027b54:	5cd3      	ldrb	r3, [r2, r3]
 8027b56:	3b30      	subs	r3, #48	; 0x30
 8027b58:	b29b      	uxth	r3, r3
 8027b5a:	461a      	mov	r2, r3
 8027b5c:	0092      	lsls	r2, r2, #2
 8027b5e:	4413      	add	r3, r2
 8027b60:	461a      	mov	r2, r3
 8027b62:	0091      	lsls	r1, r2, #2
 8027b64:	461a      	mov	r2, r3
 8027b66:	460b      	mov	r3, r1
 8027b68:	4413      	add	r3, r2
 8027b6a:	009b      	lsls	r3, r3, #2
 8027b6c:	82fb      	strh	r3, [r7, #22]
 8027b6e:	e070      	b.n	8027c52 <ce303_tarif+0x1152>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 2 разряда после запятой
 8027b70:	8a3b      	ldrh	r3, [r7, #16]
 8027b72:	3307      	adds	r3, #7
 8027b74:	4a8e      	ldr	r2, [pc, #568]	; (8027db0 <ce303_tarif+0x12b0>)
 8027b76:	5cd3      	ldrb	r3, [r2, r3]
 8027b78:	2b29      	cmp	r3, #41	; 0x29
 8027b7a:	d117      	bne.n	8027bac <ce303_tarif+0x10ac>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30))*10;
 8027b7c:	8a3b      	ldrh	r3, [r7, #16]
 8027b7e:	3305      	adds	r3, #5
 8027b80:	4a8b      	ldr	r2, [pc, #556]	; (8027db0 <ce303_tarif+0x12b0>)
 8027b82:	5cd3      	ldrb	r3, [r2, r3]
 8027b84:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8027b88:	4613      	mov	r3, r2
 8027b8a:	009b      	lsls	r3, r3, #2
 8027b8c:	4413      	add	r3, r2
 8027b8e:	005b      	lsls	r3, r3, #1
 8027b90:	4619      	mov	r1, r3
 8027b92:	8a3b      	ldrh	r3, [r7, #16]
 8027b94:	3306      	adds	r3, #6
 8027b96:	4a86      	ldr	r2, [pc, #536]	; (8027db0 <ce303_tarif+0x12b0>)
 8027b98:	5cd3      	ldrb	r3, [r2, r3]
 8027b9a:	3b30      	subs	r3, #48	; 0x30
 8027b9c:	440b      	add	r3, r1
 8027b9e:	b29b      	uxth	r3, r3
 8027ba0:	461a      	mov	r2, r3
 8027ba2:	0092      	lsls	r2, r2, #2
 8027ba4:	4413      	add	r3, r2
 8027ba6:	005b      	lsls	r3, r3, #1
 8027ba8:	82fb      	strh	r3, [r7, #22]
 8027baa:	e052      	b.n	8027c52 <ce303_tarif+0x1152>
				}
				else if( meter_rx_buffer[i+8] == 0x29 ) // если 3 разряда после запятой
 8027bac:	8a3b      	ldrh	r3, [r7, #16]
 8027bae:	3308      	adds	r3, #8
 8027bb0:	4a7f      	ldr	r2, [pc, #508]	; (8027db0 <ce303_tarif+0x12b0>)
 8027bb2:	5cd3      	ldrb	r3, [r2, r3]
 8027bb4:	2b29      	cmp	r3, #41	; 0x29
 8027bb6:	d126      	bne.n	8027c06 <ce303_tarif+0x1106>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 8027bb8:	8a3b      	ldrh	r3, [r7, #16]
 8027bba:	3305      	adds	r3, #5
 8027bbc:	4a7c      	ldr	r2, [pc, #496]	; (8027db0 <ce303_tarif+0x12b0>)
 8027bbe:	5cd3      	ldrb	r3, [r2, r3]
 8027bc0:	3b30      	subs	r3, #48	; 0x30
 8027bc2:	b29b      	uxth	r3, r3
 8027bc4:	461a      	mov	r2, r3
 8027bc6:	0092      	lsls	r2, r2, #2
 8027bc8:	4413      	add	r3, r2
 8027bca:	461a      	mov	r2, r3
 8027bcc:	0091      	lsls	r1, r2, #2
 8027bce:	461a      	mov	r2, r3
 8027bd0:	460b      	mov	r3, r1
 8027bd2:	4413      	add	r3, r2
 8027bd4:	009b      	lsls	r3, r3, #2
 8027bd6:	b29a      	uxth	r2, r3
 8027bd8:	8a3b      	ldrh	r3, [r7, #16]
 8027bda:	3306      	adds	r3, #6
 8027bdc:	4974      	ldr	r1, [pc, #464]	; (8027db0 <ce303_tarif+0x12b0>)
 8027bde:	5ccb      	ldrb	r3, [r1, r3]
 8027be0:	3b30      	subs	r3, #48	; 0x30
 8027be2:	b29b      	uxth	r3, r3
 8027be4:	4619      	mov	r1, r3
 8027be6:	0089      	lsls	r1, r1, #2
 8027be8:	440b      	add	r3, r1
 8027bea:	005b      	lsls	r3, r3, #1
 8027bec:	b29b      	uxth	r3, r3
 8027bee:	4413      	add	r3, r2
 8027bf0:	b29a      	uxth	r2, r3
 8027bf2:	8a3b      	ldrh	r3, [r7, #16]
 8027bf4:	3307      	adds	r3, #7
 8027bf6:	496e      	ldr	r1, [pc, #440]	; (8027db0 <ce303_tarif+0x12b0>)
 8027bf8:	5ccb      	ldrb	r3, [r1, r3]
 8027bfa:	b29b      	uxth	r3, r3
 8027bfc:	4413      	add	r3, r2
 8027bfe:	b29b      	uxth	r3, r3
 8027c00:	3b30      	subs	r3, #48	; 0x30
 8027c02:	82fb      	strh	r3, [r7, #22]
 8027c04:	e025      	b.n	8027c52 <ce303_tarif+0x1152>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 8027c06:	8a3b      	ldrh	r3, [r7, #16]
 8027c08:	3305      	adds	r3, #5
 8027c0a:	4a69      	ldr	r2, [pc, #420]	; (8027db0 <ce303_tarif+0x12b0>)
 8027c0c:	5cd3      	ldrb	r3, [r2, r3]
 8027c0e:	3b30      	subs	r3, #48	; 0x30
 8027c10:	b29b      	uxth	r3, r3
 8027c12:	461a      	mov	r2, r3
 8027c14:	0092      	lsls	r2, r2, #2
 8027c16:	4413      	add	r3, r2
 8027c18:	461a      	mov	r2, r3
 8027c1a:	0091      	lsls	r1, r2, #2
 8027c1c:	461a      	mov	r2, r3
 8027c1e:	460b      	mov	r3, r1
 8027c20:	4413      	add	r3, r2
 8027c22:	009b      	lsls	r3, r3, #2
 8027c24:	b29a      	uxth	r2, r3
 8027c26:	8a3b      	ldrh	r3, [r7, #16]
 8027c28:	3306      	adds	r3, #6
 8027c2a:	4961      	ldr	r1, [pc, #388]	; (8027db0 <ce303_tarif+0x12b0>)
 8027c2c:	5ccb      	ldrb	r3, [r1, r3]
 8027c2e:	3b30      	subs	r3, #48	; 0x30
 8027c30:	b29b      	uxth	r3, r3
 8027c32:	4619      	mov	r1, r3
 8027c34:	0089      	lsls	r1, r1, #2
 8027c36:	440b      	add	r3, r1
 8027c38:	005b      	lsls	r3, r3, #1
 8027c3a:	b29b      	uxth	r3, r3
 8027c3c:	4413      	add	r3, r2
 8027c3e:	b29a      	uxth	r2, r3
 8027c40:	8a3b      	ldrh	r3, [r7, #16]
 8027c42:	3307      	adds	r3, #7
 8027c44:	495a      	ldr	r1, [pc, #360]	; (8027db0 <ce303_tarif+0x12b0>)
 8027c46:	5ccb      	ldrb	r3, [r1, r3]
 8027c48:	b29b      	uxth	r3, r3
 8027c4a:	4413      	add	r3, r2
 8027c4c:	b29b      	uxth	r3, r3
 8027c4e:	3b30      	subs	r3, #48	; 0x30
 8027c50:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8027c52:	4b58      	ldr	r3, [pc, #352]	; (8027db4 <ce303_tarif+0x12b4>)
 8027c54:	681b      	ldr	r3, [r3, #0]
 8027c56:	f04f 31ff 	mov.w	r1, #4294967295
 8027c5a:	4618      	mov	r0, r3
 8027c5c:	f7f1 fb24 	bl	80192a8 <osMutexWait>
				fm25v02_write(2*CE_303_TARIF1_POWER_H_REG, ((uint8_t)(temp>>24)) );
 8027c60:	68bb      	ldr	r3, [r7, #8]
 8027c62:	0e1b      	lsrs	r3, r3, #24
 8027c64:	b2db      	uxtb	r3, r3
 8027c66:	4619      	mov	r1, r3
 8027c68:	f242 0088 	movw	r0, #8328	; 0x2088
 8027c6c:	f002 ff0e 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_H_REG+1, ((uint8_t)(temp>>16)) );
 8027c70:	68bb      	ldr	r3, [r7, #8]
 8027c72:	0c1b      	lsrs	r3, r3, #16
 8027c74:	b2db      	uxtb	r3, r3
 8027c76:	4619      	mov	r1, r3
 8027c78:	f242 0089 	movw	r0, #8329	; 0x2089
 8027c7c:	f002 ff06 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_L_REG, ((uint8_t)(temp>>8)) );
 8027c80:	68bb      	ldr	r3, [r7, #8]
 8027c82:	0a1b      	lsrs	r3, r3, #8
 8027c84:	b2db      	uxtb	r3, r3
 8027c86:	4619      	mov	r1, r3
 8027c88:	f242 008a 	movw	r0, #8330	; 0x208a
 8027c8c:	f002 fefe 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_L_REG+1, ((uint8_t)temp) );
 8027c90:	68bb      	ldr	r3, [r7, #8]
 8027c92:	b2db      	uxtb	r3, r3
 8027c94:	4619      	mov	r1, r3
 8027c96:	f242 008b 	movw	r0, #8331	; 0x208b
 8027c9a:	f002 fef7 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_MIL_REG, ((uint8_t)(temp_mil>>8)) );
 8027c9e:	8afb      	ldrh	r3, [r7, #22]
 8027ca0:	0a1b      	lsrs	r3, r3, #8
 8027ca2:	b29b      	uxth	r3, r3
 8027ca4:	b2db      	uxtb	r3, r3
 8027ca6:	4619      	mov	r1, r3
 8027ca8:	f242 008c 	movw	r0, #8332	; 0x208c
 8027cac:	f002 feee 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_MIL_REG+1, ((uint8_t)(temp_mil)) );
 8027cb0:	8afb      	ldrh	r3, [r7, #22]
 8027cb2:	b2db      	uxtb	r3, r3
 8027cb4:	4619      	mov	r1, r3
 8027cb6:	f242 008d 	movw	r0, #8333	; 0x208d
 8027cba:	f002 fee7 	bl	802aa8c <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8027cbe:	4b3d      	ldr	r3, [pc, #244]	; (8027db4 <ce303_tarif+0x12b4>)
 8027cc0:	681b      	ldr	r3, [r3, #0]
 8027cc2:	4618      	mov	r0, r3
 8027cc4:	f7f1 fb3e 	bl	8019344 <osMutexRelease>
				status_registers.ce303_tarif1_power_h_reg = (uint16_t)(temp>>16);
 8027cc8:	68bb      	ldr	r3, [r7, #8]
 8027cca:	0c1b      	lsrs	r3, r3, #16
 8027ccc:	b29a      	uxth	r2, r3
 8027cce:	4b3a      	ldr	r3, [pc, #232]	; (8027db8 <ce303_tarif+0x12b8>)
 8027cd0:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
				status_registers.ce303_tarif1_power_l_reg = (uint16_t)temp;
 8027cd4:	68bb      	ldr	r3, [r7, #8]
 8027cd6:	b29a      	uxth	r2, r3
 8027cd8:	4b37      	ldr	r3, [pc, #220]	; (8027db8 <ce303_tarif+0x12b8>)
 8027cda:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
				status_registers.ce303_tarif1_power_mil_reg =  temp_mil;
 8027cde:	4a36      	ldr	r2, [pc, #216]	; (8027db8 <ce303_tarif+0x12b8>)
 8027ce0:	8afb      	ldrh	r3, [r7, #22]
 8027ce2:	f8a2 308c 	strh.w	r3, [r2, #140]	; 0x8c
				tarif_1_state = 1;
 8027ce6:	2301      	movs	r3, #1
 8027ce8:	753b      	strb	r3, [r7, #20]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице, 1 цифра перед запятой
 8027cea:	f001 b914 	b.w	8028f16 <ce303_tarif+0x2416>

			}

			else if( meter_rx_buffer[i+5] == 0x2E) // четыре цифры перед запятой
 8027cee:	8a3b      	ldrh	r3, [r7, #16]
 8027cf0:	3305      	adds	r3, #5
 8027cf2:	4a2f      	ldr	r2, [pc, #188]	; (8027db0 <ce303_tarif+0x12b0>)
 8027cf4:	5cd3      	ldrb	r3, [r2, r3]
 8027cf6:	2b2e      	cmp	r3, #46	; 0x2e
 8027cf8:	f041 810d 	bne.w	8028f16 <ce303_tarif+0x2416>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+2])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+3])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+4])-0x30);
 8027cfc:	8a3b      	ldrh	r3, [r7, #16]
 8027cfe:	3301      	adds	r3, #1
 8027d00:	4a2b      	ldr	r2, [pc, #172]	; (8027db0 <ce303_tarif+0x12b0>)
 8027d02:	5cd3      	ldrb	r3, [r2, r3]
 8027d04:	3b30      	subs	r3, #48	; 0x30
 8027d06:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8027d0a:	fb02 f203 	mul.w	r2, r2, r3
 8027d0e:	8a3b      	ldrh	r3, [r7, #16]
 8027d10:	3302      	adds	r3, #2
 8027d12:	4927      	ldr	r1, [pc, #156]	; (8027db0 <ce303_tarif+0x12b0>)
 8027d14:	5ccb      	ldrb	r3, [r1, r3]
 8027d16:	3b30      	subs	r3, #48	; 0x30
 8027d18:	2164      	movs	r1, #100	; 0x64
 8027d1a:	fb01 f303 	mul.w	r3, r1, r3
 8027d1e:	18d1      	adds	r1, r2, r3
 8027d20:	8a3b      	ldrh	r3, [r7, #16]
 8027d22:	3303      	adds	r3, #3
 8027d24:	4a22      	ldr	r2, [pc, #136]	; (8027db0 <ce303_tarif+0x12b0>)
 8027d26:	5cd3      	ldrb	r3, [r2, r3]
 8027d28:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8027d2c:	4613      	mov	r3, r2
 8027d2e:	009b      	lsls	r3, r3, #2
 8027d30:	4413      	add	r3, r2
 8027d32:	005b      	lsls	r3, r3, #1
 8027d34:	18ca      	adds	r2, r1, r3
 8027d36:	8a3b      	ldrh	r3, [r7, #16]
 8027d38:	3304      	adds	r3, #4
 8027d3a:	491d      	ldr	r1, [pc, #116]	; (8027db0 <ce303_tarif+0x12b0>)
 8027d3c:	5ccb      	ldrb	r3, [r1, r3]
 8027d3e:	3b30      	subs	r3, #48	; 0x30
 8027d40:	4413      	add	r3, r2
 8027d42:	60bb      	str	r3, [r7, #8]

				if( meter_rx_buffer[i+7] == 0x29 ) // если 1 разряд после запятой
 8027d44:	8a3b      	ldrh	r3, [r7, #16]
 8027d46:	3307      	adds	r3, #7
 8027d48:	4a19      	ldr	r2, [pc, #100]	; (8027db0 <ce303_tarif+0x12b0>)
 8027d4a:	5cd3      	ldrb	r3, [r2, r3]
 8027d4c:	2b29      	cmp	r3, #41	; 0x29
 8027d4e:	d110      	bne.n	8027d72 <ce303_tarif+0x1272>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+6])-0x30)*100;
 8027d50:	8a3b      	ldrh	r3, [r7, #16]
 8027d52:	3306      	adds	r3, #6
 8027d54:	4a16      	ldr	r2, [pc, #88]	; (8027db0 <ce303_tarif+0x12b0>)
 8027d56:	5cd3      	ldrb	r3, [r2, r3]
 8027d58:	3b30      	subs	r3, #48	; 0x30
 8027d5a:	b29b      	uxth	r3, r3
 8027d5c:	461a      	mov	r2, r3
 8027d5e:	0092      	lsls	r2, r2, #2
 8027d60:	4413      	add	r3, r2
 8027d62:	461a      	mov	r2, r3
 8027d64:	0091      	lsls	r1, r2, #2
 8027d66:	461a      	mov	r2, r3
 8027d68:	460b      	mov	r3, r1
 8027d6a:	4413      	add	r3, r2
 8027d6c:	009b      	lsls	r3, r3, #2
 8027d6e:	82fb      	strh	r3, [r7, #22]
 8027d70:	e077      	b.n	8027e62 <ce303_tarif+0x1362>
				}
				else if( meter_rx_buffer[i+8] == 0x29 ) // если 2 разряда после запятой
 8027d72:	8a3b      	ldrh	r3, [r7, #16]
 8027d74:	3308      	adds	r3, #8
 8027d76:	4a0e      	ldr	r2, [pc, #56]	; (8027db0 <ce303_tarif+0x12b0>)
 8027d78:	5cd3      	ldrb	r3, [r2, r3]
 8027d7a:	2b29      	cmp	r3, #41	; 0x29
 8027d7c:	d11e      	bne.n	8027dbc <ce303_tarif+0x12bc>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30))*10;
 8027d7e:	8a3b      	ldrh	r3, [r7, #16]
 8027d80:	3306      	adds	r3, #6
 8027d82:	4a0b      	ldr	r2, [pc, #44]	; (8027db0 <ce303_tarif+0x12b0>)
 8027d84:	5cd3      	ldrb	r3, [r2, r3]
 8027d86:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8027d8a:	4613      	mov	r3, r2
 8027d8c:	009b      	lsls	r3, r3, #2
 8027d8e:	4413      	add	r3, r2
 8027d90:	005b      	lsls	r3, r3, #1
 8027d92:	4619      	mov	r1, r3
 8027d94:	8a3b      	ldrh	r3, [r7, #16]
 8027d96:	3307      	adds	r3, #7
 8027d98:	4a05      	ldr	r2, [pc, #20]	; (8027db0 <ce303_tarif+0x12b0>)
 8027d9a:	5cd3      	ldrb	r3, [r2, r3]
 8027d9c:	3b30      	subs	r3, #48	; 0x30
 8027d9e:	440b      	add	r3, r1
 8027da0:	b29b      	uxth	r3, r3
 8027da2:	461a      	mov	r2, r3
 8027da4:	0092      	lsls	r2, r2, #2
 8027da6:	4413      	add	r3, r2
 8027da8:	005b      	lsls	r3, r3, #1
 8027daa:	82fb      	strh	r3, [r7, #22]
 8027dac:	e059      	b.n	8027e62 <ce303_tarif+0x1362>
 8027dae:	bf00      	nop
 8027db0:	20009a0c 	.word	0x20009a0c
 8027db4:	20009bb8 	.word	0x20009bb8
 8027db8:	2000af40 	.word	0x2000af40
				}
				else if( meter_rx_buffer[i+9] == 0x29 ) // если 3 разряда после запятой
 8027dbc:	8a3b      	ldrh	r3, [r7, #16]
 8027dbe:	3309      	adds	r3, #9
 8027dc0:	4a95      	ldr	r2, [pc, #596]	; (8028018 <ce303_tarif+0x1518>)
 8027dc2:	5cd3      	ldrb	r3, [r2, r3]
 8027dc4:	2b29      	cmp	r3, #41	; 0x29
 8027dc6:	d126      	bne.n	8027e16 <ce303_tarif+0x1316>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
 8027dc8:	8a3b      	ldrh	r3, [r7, #16]
 8027dca:	3306      	adds	r3, #6
 8027dcc:	4a92      	ldr	r2, [pc, #584]	; (8028018 <ce303_tarif+0x1518>)
 8027dce:	5cd3      	ldrb	r3, [r2, r3]
 8027dd0:	3b30      	subs	r3, #48	; 0x30
 8027dd2:	b29b      	uxth	r3, r3
 8027dd4:	461a      	mov	r2, r3
 8027dd6:	0092      	lsls	r2, r2, #2
 8027dd8:	4413      	add	r3, r2
 8027dda:	461a      	mov	r2, r3
 8027ddc:	0091      	lsls	r1, r2, #2
 8027dde:	461a      	mov	r2, r3
 8027de0:	460b      	mov	r3, r1
 8027de2:	4413      	add	r3, r2
 8027de4:	009b      	lsls	r3, r3, #2
 8027de6:	b29a      	uxth	r2, r3
 8027de8:	8a3b      	ldrh	r3, [r7, #16]
 8027dea:	3307      	adds	r3, #7
 8027dec:	498a      	ldr	r1, [pc, #552]	; (8028018 <ce303_tarif+0x1518>)
 8027dee:	5ccb      	ldrb	r3, [r1, r3]
 8027df0:	3b30      	subs	r3, #48	; 0x30
 8027df2:	b29b      	uxth	r3, r3
 8027df4:	4619      	mov	r1, r3
 8027df6:	0089      	lsls	r1, r1, #2
 8027df8:	440b      	add	r3, r1
 8027dfa:	005b      	lsls	r3, r3, #1
 8027dfc:	b29b      	uxth	r3, r3
 8027dfe:	4413      	add	r3, r2
 8027e00:	b29a      	uxth	r2, r3
 8027e02:	8a3b      	ldrh	r3, [r7, #16]
 8027e04:	3308      	adds	r3, #8
 8027e06:	4984      	ldr	r1, [pc, #528]	; (8028018 <ce303_tarif+0x1518>)
 8027e08:	5ccb      	ldrb	r3, [r1, r3]
 8027e0a:	b29b      	uxth	r3, r3
 8027e0c:	4413      	add	r3, r2
 8027e0e:	b29b      	uxth	r3, r3
 8027e10:	3b30      	subs	r3, #48	; 0x30
 8027e12:	82fb      	strh	r3, [r7, #22]
 8027e14:	e025      	b.n	8027e62 <ce303_tarif+0x1362>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
 8027e16:	8a3b      	ldrh	r3, [r7, #16]
 8027e18:	3306      	adds	r3, #6
 8027e1a:	4a7f      	ldr	r2, [pc, #508]	; (8028018 <ce303_tarif+0x1518>)
 8027e1c:	5cd3      	ldrb	r3, [r2, r3]
 8027e1e:	3b30      	subs	r3, #48	; 0x30
 8027e20:	b29b      	uxth	r3, r3
 8027e22:	461a      	mov	r2, r3
 8027e24:	0092      	lsls	r2, r2, #2
 8027e26:	4413      	add	r3, r2
 8027e28:	461a      	mov	r2, r3
 8027e2a:	0091      	lsls	r1, r2, #2
 8027e2c:	461a      	mov	r2, r3
 8027e2e:	460b      	mov	r3, r1
 8027e30:	4413      	add	r3, r2
 8027e32:	009b      	lsls	r3, r3, #2
 8027e34:	b29a      	uxth	r2, r3
 8027e36:	8a3b      	ldrh	r3, [r7, #16]
 8027e38:	3307      	adds	r3, #7
 8027e3a:	4977      	ldr	r1, [pc, #476]	; (8028018 <ce303_tarif+0x1518>)
 8027e3c:	5ccb      	ldrb	r3, [r1, r3]
 8027e3e:	3b30      	subs	r3, #48	; 0x30
 8027e40:	b29b      	uxth	r3, r3
 8027e42:	4619      	mov	r1, r3
 8027e44:	0089      	lsls	r1, r1, #2
 8027e46:	440b      	add	r3, r1
 8027e48:	005b      	lsls	r3, r3, #1
 8027e4a:	b29b      	uxth	r3, r3
 8027e4c:	4413      	add	r3, r2
 8027e4e:	b29a      	uxth	r2, r3
 8027e50:	8a3b      	ldrh	r3, [r7, #16]
 8027e52:	3308      	adds	r3, #8
 8027e54:	4970      	ldr	r1, [pc, #448]	; (8028018 <ce303_tarif+0x1518>)
 8027e56:	5ccb      	ldrb	r3, [r1, r3]
 8027e58:	b29b      	uxth	r3, r3
 8027e5a:	4413      	add	r3, r2
 8027e5c:	b29b      	uxth	r3, r3
 8027e5e:	3b30      	subs	r3, #48	; 0x30
 8027e60:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8027e62:	4b6e      	ldr	r3, [pc, #440]	; (802801c <ce303_tarif+0x151c>)
 8027e64:	681b      	ldr	r3, [r3, #0]
 8027e66:	f04f 31ff 	mov.w	r1, #4294967295
 8027e6a:	4618      	mov	r0, r3
 8027e6c:	f7f1 fa1c 	bl	80192a8 <osMutexWait>
				fm25v02_write(2*CE_303_TARIF1_POWER_H_REG, ((uint8_t)(temp>>24)) );
 8027e70:	68bb      	ldr	r3, [r7, #8]
 8027e72:	0e1b      	lsrs	r3, r3, #24
 8027e74:	b2db      	uxtb	r3, r3
 8027e76:	4619      	mov	r1, r3
 8027e78:	f242 0088 	movw	r0, #8328	; 0x2088
 8027e7c:	f002 fe06 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_H_REG+1, ((uint8_t)(temp>>16)) );
 8027e80:	68bb      	ldr	r3, [r7, #8]
 8027e82:	0c1b      	lsrs	r3, r3, #16
 8027e84:	b2db      	uxtb	r3, r3
 8027e86:	4619      	mov	r1, r3
 8027e88:	f242 0089 	movw	r0, #8329	; 0x2089
 8027e8c:	f002 fdfe 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_L_REG, ((uint8_t)(temp>>8)) );
 8027e90:	68bb      	ldr	r3, [r7, #8]
 8027e92:	0a1b      	lsrs	r3, r3, #8
 8027e94:	b2db      	uxtb	r3, r3
 8027e96:	4619      	mov	r1, r3
 8027e98:	f242 008a 	movw	r0, #8330	; 0x208a
 8027e9c:	f002 fdf6 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_L_REG+1, ((uint8_t)temp) );
 8027ea0:	68bb      	ldr	r3, [r7, #8]
 8027ea2:	b2db      	uxtb	r3, r3
 8027ea4:	4619      	mov	r1, r3
 8027ea6:	f242 008b 	movw	r0, #8331	; 0x208b
 8027eaa:	f002 fdef 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_MIL_REG, ((uint8_t)(temp_mil>>8)) );
 8027eae:	8afb      	ldrh	r3, [r7, #22]
 8027eb0:	0a1b      	lsrs	r3, r3, #8
 8027eb2:	b29b      	uxth	r3, r3
 8027eb4:	b2db      	uxtb	r3, r3
 8027eb6:	4619      	mov	r1, r3
 8027eb8:	f242 008c 	movw	r0, #8332	; 0x208c
 8027ebc:	f002 fde6 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_MIL_REG+1, ((uint8_t)(temp_mil)) );
 8027ec0:	8afb      	ldrh	r3, [r7, #22]
 8027ec2:	b2db      	uxtb	r3, r3
 8027ec4:	4619      	mov	r1, r3
 8027ec6:	f242 008d 	movw	r0, #8333	; 0x208d
 8027eca:	f002 fddf 	bl	802aa8c <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8027ece:	4b53      	ldr	r3, [pc, #332]	; (802801c <ce303_tarif+0x151c>)
 8027ed0:	681b      	ldr	r3, [r3, #0]
 8027ed2:	4618      	mov	r0, r3
 8027ed4:	f7f1 fa36 	bl	8019344 <osMutexRelease>
				status_registers.ce303_tarif1_power_h_reg = (uint16_t)(temp>>16);
 8027ed8:	68bb      	ldr	r3, [r7, #8]
 8027eda:	0c1b      	lsrs	r3, r3, #16
 8027edc:	b29a      	uxth	r2, r3
 8027ede:	4b50      	ldr	r3, [pc, #320]	; (8028020 <ce303_tarif+0x1520>)
 8027ee0:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
				status_registers.ce303_tarif1_power_l_reg = (uint16_t)temp;
 8027ee4:	68bb      	ldr	r3, [r7, #8]
 8027ee6:	b29a      	uxth	r2, r3
 8027ee8:	4b4d      	ldr	r3, [pc, #308]	; (8028020 <ce303_tarif+0x1520>)
 8027eea:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
				status_registers.ce303_tarif1_power_mil_reg =  temp_mil;
 8027eee:	4a4c      	ldr	r2, [pc, #304]	; (8028020 <ce303_tarif+0x1520>)
 8027ef0:	8afb      	ldrh	r3, [r7, #22]
 8027ef2:	f8a2 308c 	strh.w	r3, [r2, #140]	; 0x8c
				tarif_1_state = 1;
 8027ef6:	2301      	movs	r3, #1
 8027ef8:	753b      	strb	r3, [r7, #20]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице, 1 цифра перед запятой
 8027efa:	f001 b80c 	b.w	8028f16 <ce303_tarif+0x2416>

			}

		}

		else if( (meter_rx_buffer[i] == 0x28) && (tarif_general_state==1) && (tarif_1_state==1) && (tarif_2_state==0) && (tarif_3_state==0) && (tarif_4_state==0) && (tarif_5_state==0) ) // 0х28 означает символ "(" в ASCII таблице
 8027efe:	8a3b      	ldrh	r3, [r7, #16]
 8027f00:	4a45      	ldr	r2, [pc, #276]	; (8028018 <ce303_tarif+0x1518>)
 8027f02:	5cd3      	ldrb	r3, [r2, r3]
 8027f04:	2b28      	cmp	r3, #40	; 0x28
 8027f06:	f040 83f6 	bne.w	80286f6 <ce303_tarif+0x1bf6>
 8027f0a:	7d7b      	ldrb	r3, [r7, #21]
 8027f0c:	2b01      	cmp	r3, #1
 8027f0e:	f040 83f2 	bne.w	80286f6 <ce303_tarif+0x1bf6>
 8027f12:	7d3b      	ldrb	r3, [r7, #20]
 8027f14:	2b01      	cmp	r3, #1
 8027f16:	f040 83ee 	bne.w	80286f6 <ce303_tarif+0x1bf6>
 8027f1a:	7cfb      	ldrb	r3, [r7, #19]
 8027f1c:	2b00      	cmp	r3, #0
 8027f1e:	f040 83ea 	bne.w	80286f6 <ce303_tarif+0x1bf6>
 8027f22:	7cbb      	ldrb	r3, [r7, #18]
 8027f24:	2b00      	cmp	r3, #0
 8027f26:	f040 83e6 	bne.w	80286f6 <ce303_tarif+0x1bf6>
 8027f2a:	7bfb      	ldrb	r3, [r7, #15]
 8027f2c:	2b00      	cmp	r3, #0
 8027f2e:	f040 83e2 	bne.w	80286f6 <ce303_tarif+0x1bf6>
 8027f32:	7bbb      	ldrb	r3, [r7, #14]
 8027f34:	2b00      	cmp	r3, #0
 8027f36:	f040 83de 	bne.w	80286f6 <ce303_tarif+0x1bf6>
		{
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице, 1 цифра перед запятой
 8027f3a:	8a3b      	ldrh	r3, [r7, #16]
 8027f3c:	3302      	adds	r3, #2
 8027f3e:	4a36      	ldr	r2, [pc, #216]	; (8028018 <ce303_tarif+0x1518>)
 8027f40:	5cd3      	ldrb	r3, [r2, r3]
 8027f42:	2b2e      	cmp	r3, #46	; 0x2e
 8027f44:	f040 80e2 	bne.w	802810c <ce303_tarif+0x160c>
			{
				temp = (uint32_t)(meter_rx_buffer[i+1]-0x30);
 8027f48:	8a3b      	ldrh	r3, [r7, #16]
 8027f4a:	3301      	adds	r3, #1
 8027f4c:	4a32      	ldr	r2, [pc, #200]	; (8028018 <ce303_tarif+0x1518>)
 8027f4e:	5cd3      	ldrb	r3, [r2, r3]
 8027f50:	3b30      	subs	r3, #48	; 0x30
 8027f52:	60bb      	str	r3, [r7, #8]

				if( meter_rx_buffer[i+4] == 0x29 ) // если 1 разряд после запятой
 8027f54:	8a3b      	ldrh	r3, [r7, #16]
 8027f56:	3304      	adds	r3, #4
 8027f58:	4a2f      	ldr	r2, [pc, #188]	; (8028018 <ce303_tarif+0x1518>)
 8027f5a:	5cd3      	ldrb	r3, [r2, r3]
 8027f5c:	2b29      	cmp	r3, #41	; 0x29
 8027f5e:	d110      	bne.n	8027f82 <ce303_tarif+0x1482>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+3])-0x30)*100;
 8027f60:	8a3b      	ldrh	r3, [r7, #16]
 8027f62:	3303      	adds	r3, #3
 8027f64:	4a2c      	ldr	r2, [pc, #176]	; (8028018 <ce303_tarif+0x1518>)
 8027f66:	5cd3      	ldrb	r3, [r2, r3]
 8027f68:	3b30      	subs	r3, #48	; 0x30
 8027f6a:	b29b      	uxth	r3, r3
 8027f6c:	461a      	mov	r2, r3
 8027f6e:	0092      	lsls	r2, r2, #2
 8027f70:	4413      	add	r3, r2
 8027f72:	461a      	mov	r2, r3
 8027f74:	0091      	lsls	r1, r2, #2
 8027f76:	461a      	mov	r2, r3
 8027f78:	460b      	mov	r3, r1
 8027f7a:	4413      	add	r3, r2
 8027f7c:	009b      	lsls	r3, r3, #2
 8027f7e:	82fb      	strh	r3, [r7, #22]
 8027f80:	e076      	b.n	8028070 <ce303_tarif+0x1570>
				}
				else if( meter_rx_buffer[i+5] == 0x29 ) // если 2 разряда после запятой
 8027f82:	8a3b      	ldrh	r3, [r7, #16]
 8027f84:	3305      	adds	r3, #5
 8027f86:	4a24      	ldr	r2, [pc, #144]	; (8028018 <ce303_tarif+0x1518>)
 8027f88:	5cd3      	ldrb	r3, [r2, r3]
 8027f8a:	2b29      	cmp	r3, #41	; 0x29
 8027f8c:	d117      	bne.n	8027fbe <ce303_tarif+0x14be>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+3])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+4])-0x30))*10;
 8027f8e:	8a3b      	ldrh	r3, [r7, #16]
 8027f90:	3303      	adds	r3, #3
 8027f92:	4a21      	ldr	r2, [pc, #132]	; (8028018 <ce303_tarif+0x1518>)
 8027f94:	5cd3      	ldrb	r3, [r2, r3]
 8027f96:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8027f9a:	4613      	mov	r3, r2
 8027f9c:	009b      	lsls	r3, r3, #2
 8027f9e:	4413      	add	r3, r2
 8027fa0:	005b      	lsls	r3, r3, #1
 8027fa2:	4619      	mov	r1, r3
 8027fa4:	8a3b      	ldrh	r3, [r7, #16]
 8027fa6:	3304      	adds	r3, #4
 8027fa8:	4a1b      	ldr	r2, [pc, #108]	; (8028018 <ce303_tarif+0x1518>)
 8027faa:	5cd3      	ldrb	r3, [r2, r3]
 8027fac:	3b30      	subs	r3, #48	; 0x30
 8027fae:	440b      	add	r3, r1
 8027fb0:	b29b      	uxth	r3, r3
 8027fb2:	461a      	mov	r2, r3
 8027fb4:	0092      	lsls	r2, r2, #2
 8027fb6:	4413      	add	r3, r2
 8027fb8:	005b      	lsls	r3, r3, #1
 8027fba:	82fb      	strh	r3, [r7, #22]
 8027fbc:	e058      	b.n	8028070 <ce303_tarif+0x1570>
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 3 разряда после запятой
 8027fbe:	8a3b      	ldrh	r3, [r7, #16]
 8027fc0:	3306      	adds	r3, #6
 8027fc2:	4a15      	ldr	r2, [pc, #84]	; (8028018 <ce303_tarif+0x1518>)
 8027fc4:	5cd3      	ldrb	r3, [r2, r3]
 8027fc6:	2b29      	cmp	r3, #41	; 0x29
 8027fc8:	d12c      	bne.n	8028024 <ce303_tarif+0x1524>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 8027fca:	8a3b      	ldrh	r3, [r7, #16]
 8027fcc:	3303      	adds	r3, #3
 8027fce:	4a12      	ldr	r2, [pc, #72]	; (8028018 <ce303_tarif+0x1518>)
 8027fd0:	5cd3      	ldrb	r3, [r2, r3]
 8027fd2:	3b30      	subs	r3, #48	; 0x30
 8027fd4:	b29b      	uxth	r3, r3
 8027fd6:	461a      	mov	r2, r3
 8027fd8:	0092      	lsls	r2, r2, #2
 8027fda:	4413      	add	r3, r2
 8027fdc:	461a      	mov	r2, r3
 8027fde:	0091      	lsls	r1, r2, #2
 8027fe0:	461a      	mov	r2, r3
 8027fe2:	460b      	mov	r3, r1
 8027fe4:	4413      	add	r3, r2
 8027fe6:	009b      	lsls	r3, r3, #2
 8027fe8:	b29a      	uxth	r2, r3
 8027fea:	8a3b      	ldrh	r3, [r7, #16]
 8027fec:	3304      	adds	r3, #4
 8027fee:	490a      	ldr	r1, [pc, #40]	; (8028018 <ce303_tarif+0x1518>)
 8027ff0:	5ccb      	ldrb	r3, [r1, r3]
 8027ff2:	3b30      	subs	r3, #48	; 0x30
 8027ff4:	b29b      	uxth	r3, r3
 8027ff6:	4619      	mov	r1, r3
 8027ff8:	0089      	lsls	r1, r1, #2
 8027ffa:	440b      	add	r3, r1
 8027ffc:	005b      	lsls	r3, r3, #1
 8027ffe:	b29b      	uxth	r3, r3
 8028000:	4413      	add	r3, r2
 8028002:	b29a      	uxth	r2, r3
 8028004:	8a3b      	ldrh	r3, [r7, #16]
 8028006:	3305      	adds	r3, #5
 8028008:	4903      	ldr	r1, [pc, #12]	; (8028018 <ce303_tarif+0x1518>)
 802800a:	5ccb      	ldrb	r3, [r1, r3]
 802800c:	b29b      	uxth	r3, r3
 802800e:	4413      	add	r3, r2
 8028010:	b29b      	uxth	r3, r3
 8028012:	3b30      	subs	r3, #48	; 0x30
 8028014:	82fb      	strh	r3, [r7, #22]
 8028016:	e02b      	b.n	8028070 <ce303_tarif+0x1570>
 8028018:	20009a0c 	.word	0x20009a0c
 802801c:	20009bb8 	.word	0x20009bb8
 8028020:	2000af40 	.word	0x2000af40
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 8028024:	8a3b      	ldrh	r3, [r7, #16]
 8028026:	3303      	adds	r3, #3
 8028028:	4ab0      	ldr	r2, [pc, #704]	; (80282ec <ce303_tarif+0x17ec>)
 802802a:	5cd3      	ldrb	r3, [r2, r3]
 802802c:	3b30      	subs	r3, #48	; 0x30
 802802e:	b29b      	uxth	r3, r3
 8028030:	461a      	mov	r2, r3
 8028032:	0092      	lsls	r2, r2, #2
 8028034:	4413      	add	r3, r2
 8028036:	461a      	mov	r2, r3
 8028038:	0091      	lsls	r1, r2, #2
 802803a:	461a      	mov	r2, r3
 802803c:	460b      	mov	r3, r1
 802803e:	4413      	add	r3, r2
 8028040:	009b      	lsls	r3, r3, #2
 8028042:	b29a      	uxth	r2, r3
 8028044:	8a3b      	ldrh	r3, [r7, #16]
 8028046:	3304      	adds	r3, #4
 8028048:	49a8      	ldr	r1, [pc, #672]	; (80282ec <ce303_tarif+0x17ec>)
 802804a:	5ccb      	ldrb	r3, [r1, r3]
 802804c:	3b30      	subs	r3, #48	; 0x30
 802804e:	b29b      	uxth	r3, r3
 8028050:	4619      	mov	r1, r3
 8028052:	0089      	lsls	r1, r1, #2
 8028054:	440b      	add	r3, r1
 8028056:	005b      	lsls	r3, r3, #1
 8028058:	b29b      	uxth	r3, r3
 802805a:	4413      	add	r3, r2
 802805c:	b29a      	uxth	r2, r3
 802805e:	8a3b      	ldrh	r3, [r7, #16]
 8028060:	3305      	adds	r3, #5
 8028062:	49a2      	ldr	r1, [pc, #648]	; (80282ec <ce303_tarif+0x17ec>)
 8028064:	5ccb      	ldrb	r3, [r1, r3]
 8028066:	b29b      	uxth	r3, r3
 8028068:	4413      	add	r3, r2
 802806a:	b29b      	uxth	r3, r3
 802806c:	3b30      	subs	r3, #48	; 0x30
 802806e:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8028070:	4b9f      	ldr	r3, [pc, #636]	; (80282f0 <ce303_tarif+0x17f0>)
 8028072:	681b      	ldr	r3, [r3, #0]
 8028074:	f04f 31ff 	mov.w	r1, #4294967295
 8028078:	4618      	mov	r0, r3
 802807a:	f7f1 f915 	bl	80192a8 <osMutexWait>
				fm25v02_write(2*CE_303_TARIF2_POWER_H_REG, ((uint8_t)(temp>>24)) );
 802807e:	68bb      	ldr	r3, [r7, #8]
 8028080:	0e1b      	lsrs	r3, r3, #24
 8028082:	b2db      	uxtb	r3, r3
 8028084:	4619      	mov	r1, r3
 8028086:	f242 008e 	movw	r0, #8334	; 0x208e
 802808a:	f002 fcff 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_H_REG+1, ((uint8_t)(temp>>16)) );
 802808e:	68bb      	ldr	r3, [r7, #8]
 8028090:	0c1b      	lsrs	r3, r3, #16
 8028092:	b2db      	uxtb	r3, r3
 8028094:	4619      	mov	r1, r3
 8028096:	f242 008f 	movw	r0, #8335	; 0x208f
 802809a:	f002 fcf7 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_L_REG, ((uint8_t)(temp>>8)) );
 802809e:	68bb      	ldr	r3, [r7, #8]
 80280a0:	0a1b      	lsrs	r3, r3, #8
 80280a2:	b2db      	uxtb	r3, r3
 80280a4:	4619      	mov	r1, r3
 80280a6:	f242 0090 	movw	r0, #8336	; 0x2090
 80280aa:	f002 fcef 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_L_REG+1, ((uint8_t)temp) );
 80280ae:	68bb      	ldr	r3, [r7, #8]
 80280b0:	b2db      	uxtb	r3, r3
 80280b2:	4619      	mov	r1, r3
 80280b4:	f242 0091 	movw	r0, #8337	; 0x2091
 80280b8:	f002 fce8 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_MIL_REG, ((uint8_t)(temp_mil>>8)) );
 80280bc:	8afb      	ldrh	r3, [r7, #22]
 80280be:	0a1b      	lsrs	r3, r3, #8
 80280c0:	b29b      	uxth	r3, r3
 80280c2:	b2db      	uxtb	r3, r3
 80280c4:	4619      	mov	r1, r3
 80280c6:	f242 0092 	movw	r0, #8338	; 0x2092
 80280ca:	f002 fcdf 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_MIL_REG+1, ((uint8_t)(temp_mil)) );
 80280ce:	8afb      	ldrh	r3, [r7, #22]
 80280d0:	b2db      	uxtb	r3, r3
 80280d2:	4619      	mov	r1, r3
 80280d4:	f242 0093 	movw	r0, #8339	; 0x2093
 80280d8:	f002 fcd8 	bl	802aa8c <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 80280dc:	4b84      	ldr	r3, [pc, #528]	; (80282f0 <ce303_tarif+0x17f0>)
 80280de:	681b      	ldr	r3, [r3, #0]
 80280e0:	4618      	mov	r0, r3
 80280e2:	f7f1 f92f 	bl	8019344 <osMutexRelease>
				status_registers.ce303_tarif2_power_h_reg = (uint16_t)(temp>>16);
 80280e6:	68bb      	ldr	r3, [r7, #8]
 80280e8:	0c1b      	lsrs	r3, r3, #16
 80280ea:	b29a      	uxth	r2, r3
 80280ec:	4b81      	ldr	r3, [pc, #516]	; (80282f4 <ce303_tarif+0x17f4>)
 80280ee:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
				status_registers.ce303_tarif2_power_l_reg = (uint16_t)temp;
 80280f2:	68bb      	ldr	r3, [r7, #8]
 80280f4:	b29a      	uxth	r2, r3
 80280f6:	4b7f      	ldr	r3, [pc, #508]	; (80282f4 <ce303_tarif+0x17f4>)
 80280f8:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
				status_registers.ce303_tarif2_power_mil_reg =  temp_mil;
 80280fc:	4a7d      	ldr	r2, [pc, #500]	; (80282f4 <ce303_tarif+0x17f4>)
 80280fe:	8afb      	ldrh	r3, [r7, #22]
 8028100:	f8a2 3092 	strh.w	r3, [r2, #146]	; 0x92
				tarif_2_state = 1;
 8028104:	2301      	movs	r3, #1
 8028106:	74fb      	strb	r3, [r7, #19]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице, 1 цифра перед запятой
 8028108:	f000 bf07 	b.w	8028f1a <ce303_tarif+0x241a>

			}

			else if( meter_rx_buffer[i+3] == 0x2E) // 2 цифры перед запятой
 802810c:	8a3b      	ldrh	r3, [r7, #16]
 802810e:	3303      	adds	r3, #3
 8028110:	4a76      	ldr	r2, [pc, #472]	; (80282ec <ce303_tarif+0x17ec>)
 8028112:	5cd3      	ldrb	r3, [r2, r3]
 8028114:	2b2e      	cmp	r3, #46	; 0x2e
 8028116:	f040 80ef 	bne.w	80282f8 <ce303_tarif+0x17f8>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+2])-0x30);
 802811a:	8a3b      	ldrh	r3, [r7, #16]
 802811c:	3301      	adds	r3, #1
 802811e:	4a73      	ldr	r2, [pc, #460]	; (80282ec <ce303_tarif+0x17ec>)
 8028120:	5cd3      	ldrb	r3, [r2, r3]
 8028122:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8028126:	4613      	mov	r3, r2
 8028128:	009b      	lsls	r3, r3, #2
 802812a:	4413      	add	r3, r2
 802812c:	005b      	lsls	r3, r3, #1
 802812e:	4619      	mov	r1, r3
 8028130:	8a3b      	ldrh	r3, [r7, #16]
 8028132:	3302      	adds	r3, #2
 8028134:	4a6d      	ldr	r2, [pc, #436]	; (80282ec <ce303_tarif+0x17ec>)
 8028136:	5cd3      	ldrb	r3, [r2, r3]
 8028138:	3b30      	subs	r3, #48	; 0x30
 802813a:	440b      	add	r3, r1
 802813c:	60bb      	str	r3, [r7, #8]

				if( meter_rx_buffer[i+5] == 0x29 ) // если 1 разряд после запятой
 802813e:	8a3b      	ldrh	r3, [r7, #16]
 8028140:	3305      	adds	r3, #5
 8028142:	4a6a      	ldr	r2, [pc, #424]	; (80282ec <ce303_tarif+0x17ec>)
 8028144:	5cd3      	ldrb	r3, [r2, r3]
 8028146:	2b29      	cmp	r3, #41	; 0x29
 8028148:	d110      	bne.n	802816c <ce303_tarif+0x166c>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+4])-0x30)*100;
 802814a:	8a3b      	ldrh	r3, [r7, #16]
 802814c:	3304      	adds	r3, #4
 802814e:	4a67      	ldr	r2, [pc, #412]	; (80282ec <ce303_tarif+0x17ec>)
 8028150:	5cd3      	ldrb	r3, [r2, r3]
 8028152:	3b30      	subs	r3, #48	; 0x30
 8028154:	b29b      	uxth	r3, r3
 8028156:	461a      	mov	r2, r3
 8028158:	0092      	lsls	r2, r2, #2
 802815a:	4413      	add	r3, r2
 802815c:	461a      	mov	r2, r3
 802815e:	0091      	lsls	r1, r2, #2
 8028160:	461a      	mov	r2, r3
 8028162:	460b      	mov	r3, r1
 8028164:	4413      	add	r3, r2
 8028166:	009b      	lsls	r3, r3, #2
 8028168:	82fb      	strh	r3, [r7, #22]
 802816a:	e070      	b.n	802824e <ce303_tarif+0x174e>
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 2 разряда после запятой
 802816c:	8a3b      	ldrh	r3, [r7, #16]
 802816e:	3306      	adds	r3, #6
 8028170:	4a5e      	ldr	r2, [pc, #376]	; (80282ec <ce303_tarif+0x17ec>)
 8028172:	5cd3      	ldrb	r3, [r2, r3]
 8028174:	2b29      	cmp	r3, #41	; 0x29
 8028176:	d117      	bne.n	80281a8 <ce303_tarif+0x16a8>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30))*10;
 8028178:	8a3b      	ldrh	r3, [r7, #16]
 802817a:	3304      	adds	r3, #4
 802817c:	4a5b      	ldr	r2, [pc, #364]	; (80282ec <ce303_tarif+0x17ec>)
 802817e:	5cd3      	ldrb	r3, [r2, r3]
 8028180:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8028184:	4613      	mov	r3, r2
 8028186:	009b      	lsls	r3, r3, #2
 8028188:	4413      	add	r3, r2
 802818a:	005b      	lsls	r3, r3, #1
 802818c:	4619      	mov	r1, r3
 802818e:	8a3b      	ldrh	r3, [r7, #16]
 8028190:	3305      	adds	r3, #5
 8028192:	4a56      	ldr	r2, [pc, #344]	; (80282ec <ce303_tarif+0x17ec>)
 8028194:	5cd3      	ldrb	r3, [r2, r3]
 8028196:	3b30      	subs	r3, #48	; 0x30
 8028198:	440b      	add	r3, r1
 802819a:	b29b      	uxth	r3, r3
 802819c:	461a      	mov	r2, r3
 802819e:	0092      	lsls	r2, r2, #2
 80281a0:	4413      	add	r3, r2
 80281a2:	005b      	lsls	r3, r3, #1
 80281a4:	82fb      	strh	r3, [r7, #22]
 80281a6:	e052      	b.n	802824e <ce303_tarif+0x174e>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 3 разряда после запятой
 80281a8:	8a3b      	ldrh	r3, [r7, #16]
 80281aa:	3307      	adds	r3, #7
 80281ac:	4a4f      	ldr	r2, [pc, #316]	; (80282ec <ce303_tarif+0x17ec>)
 80281ae:	5cd3      	ldrb	r3, [r2, r3]
 80281b0:	2b29      	cmp	r3, #41	; 0x29
 80281b2:	d126      	bne.n	8028202 <ce303_tarif+0x1702>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 80281b4:	8a3b      	ldrh	r3, [r7, #16]
 80281b6:	3304      	adds	r3, #4
 80281b8:	4a4c      	ldr	r2, [pc, #304]	; (80282ec <ce303_tarif+0x17ec>)
 80281ba:	5cd3      	ldrb	r3, [r2, r3]
 80281bc:	3b30      	subs	r3, #48	; 0x30
 80281be:	b29b      	uxth	r3, r3
 80281c0:	461a      	mov	r2, r3
 80281c2:	0092      	lsls	r2, r2, #2
 80281c4:	4413      	add	r3, r2
 80281c6:	461a      	mov	r2, r3
 80281c8:	0091      	lsls	r1, r2, #2
 80281ca:	461a      	mov	r2, r3
 80281cc:	460b      	mov	r3, r1
 80281ce:	4413      	add	r3, r2
 80281d0:	009b      	lsls	r3, r3, #2
 80281d2:	b29a      	uxth	r2, r3
 80281d4:	8a3b      	ldrh	r3, [r7, #16]
 80281d6:	3305      	adds	r3, #5
 80281d8:	4944      	ldr	r1, [pc, #272]	; (80282ec <ce303_tarif+0x17ec>)
 80281da:	5ccb      	ldrb	r3, [r1, r3]
 80281dc:	3b30      	subs	r3, #48	; 0x30
 80281de:	b29b      	uxth	r3, r3
 80281e0:	4619      	mov	r1, r3
 80281e2:	0089      	lsls	r1, r1, #2
 80281e4:	440b      	add	r3, r1
 80281e6:	005b      	lsls	r3, r3, #1
 80281e8:	b29b      	uxth	r3, r3
 80281ea:	4413      	add	r3, r2
 80281ec:	b29a      	uxth	r2, r3
 80281ee:	8a3b      	ldrh	r3, [r7, #16]
 80281f0:	3306      	adds	r3, #6
 80281f2:	493e      	ldr	r1, [pc, #248]	; (80282ec <ce303_tarif+0x17ec>)
 80281f4:	5ccb      	ldrb	r3, [r1, r3]
 80281f6:	b29b      	uxth	r3, r3
 80281f8:	4413      	add	r3, r2
 80281fa:	b29b      	uxth	r3, r3
 80281fc:	3b30      	subs	r3, #48	; 0x30
 80281fe:	82fb      	strh	r3, [r7, #22]
 8028200:	e025      	b.n	802824e <ce303_tarif+0x174e>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 8028202:	8a3b      	ldrh	r3, [r7, #16]
 8028204:	3304      	adds	r3, #4
 8028206:	4a39      	ldr	r2, [pc, #228]	; (80282ec <ce303_tarif+0x17ec>)
 8028208:	5cd3      	ldrb	r3, [r2, r3]
 802820a:	3b30      	subs	r3, #48	; 0x30
 802820c:	b29b      	uxth	r3, r3
 802820e:	461a      	mov	r2, r3
 8028210:	0092      	lsls	r2, r2, #2
 8028212:	4413      	add	r3, r2
 8028214:	461a      	mov	r2, r3
 8028216:	0091      	lsls	r1, r2, #2
 8028218:	461a      	mov	r2, r3
 802821a:	460b      	mov	r3, r1
 802821c:	4413      	add	r3, r2
 802821e:	009b      	lsls	r3, r3, #2
 8028220:	b29a      	uxth	r2, r3
 8028222:	8a3b      	ldrh	r3, [r7, #16]
 8028224:	3305      	adds	r3, #5
 8028226:	4931      	ldr	r1, [pc, #196]	; (80282ec <ce303_tarif+0x17ec>)
 8028228:	5ccb      	ldrb	r3, [r1, r3]
 802822a:	3b30      	subs	r3, #48	; 0x30
 802822c:	b29b      	uxth	r3, r3
 802822e:	4619      	mov	r1, r3
 8028230:	0089      	lsls	r1, r1, #2
 8028232:	440b      	add	r3, r1
 8028234:	005b      	lsls	r3, r3, #1
 8028236:	b29b      	uxth	r3, r3
 8028238:	4413      	add	r3, r2
 802823a:	b29a      	uxth	r2, r3
 802823c:	8a3b      	ldrh	r3, [r7, #16]
 802823e:	3306      	adds	r3, #6
 8028240:	492a      	ldr	r1, [pc, #168]	; (80282ec <ce303_tarif+0x17ec>)
 8028242:	5ccb      	ldrb	r3, [r1, r3]
 8028244:	b29b      	uxth	r3, r3
 8028246:	4413      	add	r3, r2
 8028248:	b29b      	uxth	r3, r3
 802824a:	3b30      	subs	r3, #48	; 0x30
 802824c:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 802824e:	4b28      	ldr	r3, [pc, #160]	; (80282f0 <ce303_tarif+0x17f0>)
 8028250:	681b      	ldr	r3, [r3, #0]
 8028252:	f04f 31ff 	mov.w	r1, #4294967295
 8028256:	4618      	mov	r0, r3
 8028258:	f7f1 f826 	bl	80192a8 <osMutexWait>
				fm25v02_write(2*CE_303_TARIF2_POWER_H_REG, ((uint8_t)(temp>>24)) );
 802825c:	68bb      	ldr	r3, [r7, #8]
 802825e:	0e1b      	lsrs	r3, r3, #24
 8028260:	b2db      	uxtb	r3, r3
 8028262:	4619      	mov	r1, r3
 8028264:	f242 008e 	movw	r0, #8334	; 0x208e
 8028268:	f002 fc10 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_H_REG+1, ((uint8_t)(temp>>16)) );
 802826c:	68bb      	ldr	r3, [r7, #8]
 802826e:	0c1b      	lsrs	r3, r3, #16
 8028270:	b2db      	uxtb	r3, r3
 8028272:	4619      	mov	r1, r3
 8028274:	f242 008f 	movw	r0, #8335	; 0x208f
 8028278:	f002 fc08 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_L_REG, ((uint8_t)(temp>>8)) );
 802827c:	68bb      	ldr	r3, [r7, #8]
 802827e:	0a1b      	lsrs	r3, r3, #8
 8028280:	b2db      	uxtb	r3, r3
 8028282:	4619      	mov	r1, r3
 8028284:	f242 0090 	movw	r0, #8336	; 0x2090
 8028288:	f002 fc00 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_L_REG+1, ((uint8_t)temp) );
 802828c:	68bb      	ldr	r3, [r7, #8]
 802828e:	b2db      	uxtb	r3, r3
 8028290:	4619      	mov	r1, r3
 8028292:	f242 0091 	movw	r0, #8337	; 0x2091
 8028296:	f002 fbf9 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_MIL_REG, ((uint8_t)(temp_mil>>8)) );
 802829a:	8afb      	ldrh	r3, [r7, #22]
 802829c:	0a1b      	lsrs	r3, r3, #8
 802829e:	b29b      	uxth	r3, r3
 80282a0:	b2db      	uxtb	r3, r3
 80282a2:	4619      	mov	r1, r3
 80282a4:	f242 0092 	movw	r0, #8338	; 0x2092
 80282a8:	f002 fbf0 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_MIL_REG+1, ((uint8_t)(temp_mil)) );
 80282ac:	8afb      	ldrh	r3, [r7, #22]
 80282ae:	b2db      	uxtb	r3, r3
 80282b0:	4619      	mov	r1, r3
 80282b2:	f242 0093 	movw	r0, #8339	; 0x2093
 80282b6:	f002 fbe9 	bl	802aa8c <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 80282ba:	4b0d      	ldr	r3, [pc, #52]	; (80282f0 <ce303_tarif+0x17f0>)
 80282bc:	681b      	ldr	r3, [r3, #0]
 80282be:	4618      	mov	r0, r3
 80282c0:	f7f1 f840 	bl	8019344 <osMutexRelease>
				status_registers.ce303_tarif2_power_h_reg = (uint16_t)(temp>>16);
 80282c4:	68bb      	ldr	r3, [r7, #8]
 80282c6:	0c1b      	lsrs	r3, r3, #16
 80282c8:	b29a      	uxth	r2, r3
 80282ca:	4b0a      	ldr	r3, [pc, #40]	; (80282f4 <ce303_tarif+0x17f4>)
 80282cc:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
				status_registers.ce303_tarif2_power_l_reg = (uint16_t)temp;
 80282d0:	68bb      	ldr	r3, [r7, #8]
 80282d2:	b29a      	uxth	r2, r3
 80282d4:	4b07      	ldr	r3, [pc, #28]	; (80282f4 <ce303_tarif+0x17f4>)
 80282d6:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
				status_registers.ce303_tarif2_power_mil_reg =  temp_mil;
 80282da:	4a06      	ldr	r2, [pc, #24]	; (80282f4 <ce303_tarif+0x17f4>)
 80282dc:	8afb      	ldrh	r3, [r7, #22]
 80282de:	f8a2 3092 	strh.w	r3, [r2, #146]	; 0x92
				tarif_2_state = 1;
 80282e2:	2301      	movs	r3, #1
 80282e4:	74fb      	strb	r3, [r7, #19]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице, 1 цифра перед запятой
 80282e6:	f000 be18 	b.w	8028f1a <ce303_tarif+0x241a>
 80282ea:	bf00      	nop
 80282ec:	20009a0c 	.word	0x20009a0c
 80282f0:	20009bb8 	.word	0x20009bb8
 80282f4:	2000af40 	.word	0x2000af40

			}

			else if( meter_rx_buffer[i+4] == 0x2E) // 3 цифры перед запятой
 80282f8:	8a3b      	ldrh	r3, [r7, #16]
 80282fa:	3304      	adds	r3, #4
 80282fc:	4aaa      	ldr	r2, [pc, #680]	; (80285a8 <ce303_tarif+0x1aa8>)
 80282fe:	5cd3      	ldrb	r3, [r2, r3]
 8028300:	2b2e      	cmp	r3, #46	; 0x2e
 8028302:	f040 80f0 	bne.w	80284e6 <ce303_tarif+0x19e6>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+2])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+3])-0x30);
 8028306:	8a3b      	ldrh	r3, [r7, #16]
 8028308:	3301      	adds	r3, #1
 802830a:	4aa7      	ldr	r2, [pc, #668]	; (80285a8 <ce303_tarif+0x1aa8>)
 802830c:	5cd3      	ldrb	r3, [r2, r3]
 802830e:	3b30      	subs	r3, #48	; 0x30
 8028310:	2264      	movs	r2, #100	; 0x64
 8028312:	fb02 f103 	mul.w	r1, r2, r3
 8028316:	8a3b      	ldrh	r3, [r7, #16]
 8028318:	3302      	adds	r3, #2
 802831a:	4aa3      	ldr	r2, [pc, #652]	; (80285a8 <ce303_tarif+0x1aa8>)
 802831c:	5cd3      	ldrb	r3, [r2, r3]
 802831e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8028322:	4613      	mov	r3, r2
 8028324:	009b      	lsls	r3, r3, #2
 8028326:	4413      	add	r3, r2
 8028328:	005b      	lsls	r3, r3, #1
 802832a:	18ca      	adds	r2, r1, r3
 802832c:	8a3b      	ldrh	r3, [r7, #16]
 802832e:	3303      	adds	r3, #3
 8028330:	499d      	ldr	r1, [pc, #628]	; (80285a8 <ce303_tarif+0x1aa8>)
 8028332:	5ccb      	ldrb	r3, [r1, r3]
 8028334:	3b30      	subs	r3, #48	; 0x30
 8028336:	4413      	add	r3, r2
 8028338:	60bb      	str	r3, [r7, #8]

				if( meter_rx_buffer[i+6] == 0x29 ) // если 1 разряд после запятой
 802833a:	8a3b      	ldrh	r3, [r7, #16]
 802833c:	3306      	adds	r3, #6
 802833e:	4a9a      	ldr	r2, [pc, #616]	; (80285a8 <ce303_tarif+0x1aa8>)
 8028340:	5cd3      	ldrb	r3, [r2, r3]
 8028342:	2b29      	cmp	r3, #41	; 0x29
 8028344:	d110      	bne.n	8028368 <ce303_tarif+0x1868>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+5])-0x30)*100;
 8028346:	8a3b      	ldrh	r3, [r7, #16]
 8028348:	3305      	adds	r3, #5
 802834a:	4a97      	ldr	r2, [pc, #604]	; (80285a8 <ce303_tarif+0x1aa8>)
 802834c:	5cd3      	ldrb	r3, [r2, r3]
 802834e:	3b30      	subs	r3, #48	; 0x30
 8028350:	b29b      	uxth	r3, r3
 8028352:	461a      	mov	r2, r3
 8028354:	0092      	lsls	r2, r2, #2
 8028356:	4413      	add	r3, r2
 8028358:	461a      	mov	r2, r3
 802835a:	0091      	lsls	r1, r2, #2
 802835c:	461a      	mov	r2, r3
 802835e:	460b      	mov	r3, r1
 8028360:	4413      	add	r3, r2
 8028362:	009b      	lsls	r3, r3, #2
 8028364:	82fb      	strh	r3, [r7, #22]
 8028366:	e070      	b.n	802844a <ce303_tarif+0x194a>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 2 разряда после запятой
 8028368:	8a3b      	ldrh	r3, [r7, #16]
 802836a:	3307      	adds	r3, #7
 802836c:	4a8e      	ldr	r2, [pc, #568]	; (80285a8 <ce303_tarif+0x1aa8>)
 802836e:	5cd3      	ldrb	r3, [r2, r3]
 8028370:	2b29      	cmp	r3, #41	; 0x29
 8028372:	d117      	bne.n	80283a4 <ce303_tarif+0x18a4>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30))*10;
 8028374:	8a3b      	ldrh	r3, [r7, #16]
 8028376:	3305      	adds	r3, #5
 8028378:	4a8b      	ldr	r2, [pc, #556]	; (80285a8 <ce303_tarif+0x1aa8>)
 802837a:	5cd3      	ldrb	r3, [r2, r3]
 802837c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8028380:	4613      	mov	r3, r2
 8028382:	009b      	lsls	r3, r3, #2
 8028384:	4413      	add	r3, r2
 8028386:	005b      	lsls	r3, r3, #1
 8028388:	4619      	mov	r1, r3
 802838a:	8a3b      	ldrh	r3, [r7, #16]
 802838c:	3306      	adds	r3, #6
 802838e:	4a86      	ldr	r2, [pc, #536]	; (80285a8 <ce303_tarif+0x1aa8>)
 8028390:	5cd3      	ldrb	r3, [r2, r3]
 8028392:	3b30      	subs	r3, #48	; 0x30
 8028394:	440b      	add	r3, r1
 8028396:	b29b      	uxth	r3, r3
 8028398:	461a      	mov	r2, r3
 802839a:	0092      	lsls	r2, r2, #2
 802839c:	4413      	add	r3, r2
 802839e:	005b      	lsls	r3, r3, #1
 80283a0:	82fb      	strh	r3, [r7, #22]
 80283a2:	e052      	b.n	802844a <ce303_tarif+0x194a>
				}
				else if( meter_rx_buffer[i+8] == 0x29 ) // если 3 разряда после запятой
 80283a4:	8a3b      	ldrh	r3, [r7, #16]
 80283a6:	3308      	adds	r3, #8
 80283a8:	4a7f      	ldr	r2, [pc, #508]	; (80285a8 <ce303_tarif+0x1aa8>)
 80283aa:	5cd3      	ldrb	r3, [r2, r3]
 80283ac:	2b29      	cmp	r3, #41	; 0x29
 80283ae:	d126      	bne.n	80283fe <ce303_tarif+0x18fe>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 80283b0:	8a3b      	ldrh	r3, [r7, #16]
 80283b2:	3305      	adds	r3, #5
 80283b4:	4a7c      	ldr	r2, [pc, #496]	; (80285a8 <ce303_tarif+0x1aa8>)
 80283b6:	5cd3      	ldrb	r3, [r2, r3]
 80283b8:	3b30      	subs	r3, #48	; 0x30
 80283ba:	b29b      	uxth	r3, r3
 80283bc:	461a      	mov	r2, r3
 80283be:	0092      	lsls	r2, r2, #2
 80283c0:	4413      	add	r3, r2
 80283c2:	461a      	mov	r2, r3
 80283c4:	0091      	lsls	r1, r2, #2
 80283c6:	461a      	mov	r2, r3
 80283c8:	460b      	mov	r3, r1
 80283ca:	4413      	add	r3, r2
 80283cc:	009b      	lsls	r3, r3, #2
 80283ce:	b29a      	uxth	r2, r3
 80283d0:	8a3b      	ldrh	r3, [r7, #16]
 80283d2:	3306      	adds	r3, #6
 80283d4:	4974      	ldr	r1, [pc, #464]	; (80285a8 <ce303_tarif+0x1aa8>)
 80283d6:	5ccb      	ldrb	r3, [r1, r3]
 80283d8:	3b30      	subs	r3, #48	; 0x30
 80283da:	b29b      	uxth	r3, r3
 80283dc:	4619      	mov	r1, r3
 80283de:	0089      	lsls	r1, r1, #2
 80283e0:	440b      	add	r3, r1
 80283e2:	005b      	lsls	r3, r3, #1
 80283e4:	b29b      	uxth	r3, r3
 80283e6:	4413      	add	r3, r2
 80283e8:	b29a      	uxth	r2, r3
 80283ea:	8a3b      	ldrh	r3, [r7, #16]
 80283ec:	3307      	adds	r3, #7
 80283ee:	496e      	ldr	r1, [pc, #440]	; (80285a8 <ce303_tarif+0x1aa8>)
 80283f0:	5ccb      	ldrb	r3, [r1, r3]
 80283f2:	b29b      	uxth	r3, r3
 80283f4:	4413      	add	r3, r2
 80283f6:	b29b      	uxth	r3, r3
 80283f8:	3b30      	subs	r3, #48	; 0x30
 80283fa:	82fb      	strh	r3, [r7, #22]
 80283fc:	e025      	b.n	802844a <ce303_tarif+0x194a>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 80283fe:	8a3b      	ldrh	r3, [r7, #16]
 8028400:	3305      	adds	r3, #5
 8028402:	4a69      	ldr	r2, [pc, #420]	; (80285a8 <ce303_tarif+0x1aa8>)
 8028404:	5cd3      	ldrb	r3, [r2, r3]
 8028406:	3b30      	subs	r3, #48	; 0x30
 8028408:	b29b      	uxth	r3, r3
 802840a:	461a      	mov	r2, r3
 802840c:	0092      	lsls	r2, r2, #2
 802840e:	4413      	add	r3, r2
 8028410:	461a      	mov	r2, r3
 8028412:	0091      	lsls	r1, r2, #2
 8028414:	461a      	mov	r2, r3
 8028416:	460b      	mov	r3, r1
 8028418:	4413      	add	r3, r2
 802841a:	009b      	lsls	r3, r3, #2
 802841c:	b29a      	uxth	r2, r3
 802841e:	8a3b      	ldrh	r3, [r7, #16]
 8028420:	3306      	adds	r3, #6
 8028422:	4961      	ldr	r1, [pc, #388]	; (80285a8 <ce303_tarif+0x1aa8>)
 8028424:	5ccb      	ldrb	r3, [r1, r3]
 8028426:	3b30      	subs	r3, #48	; 0x30
 8028428:	b29b      	uxth	r3, r3
 802842a:	4619      	mov	r1, r3
 802842c:	0089      	lsls	r1, r1, #2
 802842e:	440b      	add	r3, r1
 8028430:	005b      	lsls	r3, r3, #1
 8028432:	b29b      	uxth	r3, r3
 8028434:	4413      	add	r3, r2
 8028436:	b29a      	uxth	r2, r3
 8028438:	8a3b      	ldrh	r3, [r7, #16]
 802843a:	3307      	adds	r3, #7
 802843c:	495a      	ldr	r1, [pc, #360]	; (80285a8 <ce303_tarif+0x1aa8>)
 802843e:	5ccb      	ldrb	r3, [r1, r3]
 8028440:	b29b      	uxth	r3, r3
 8028442:	4413      	add	r3, r2
 8028444:	b29b      	uxth	r3, r3
 8028446:	3b30      	subs	r3, #48	; 0x30
 8028448:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 802844a:	4b58      	ldr	r3, [pc, #352]	; (80285ac <ce303_tarif+0x1aac>)
 802844c:	681b      	ldr	r3, [r3, #0]
 802844e:	f04f 31ff 	mov.w	r1, #4294967295
 8028452:	4618      	mov	r0, r3
 8028454:	f7f0 ff28 	bl	80192a8 <osMutexWait>
				fm25v02_write(2*CE_303_TARIF2_POWER_H_REG, ((uint8_t)(temp>>24)) );
 8028458:	68bb      	ldr	r3, [r7, #8]
 802845a:	0e1b      	lsrs	r3, r3, #24
 802845c:	b2db      	uxtb	r3, r3
 802845e:	4619      	mov	r1, r3
 8028460:	f242 008e 	movw	r0, #8334	; 0x208e
 8028464:	f002 fb12 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_H_REG+1, ((uint8_t)(temp>>16)) );
 8028468:	68bb      	ldr	r3, [r7, #8]
 802846a:	0c1b      	lsrs	r3, r3, #16
 802846c:	b2db      	uxtb	r3, r3
 802846e:	4619      	mov	r1, r3
 8028470:	f242 008f 	movw	r0, #8335	; 0x208f
 8028474:	f002 fb0a 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_L_REG, ((uint8_t)(temp>>8)) );
 8028478:	68bb      	ldr	r3, [r7, #8]
 802847a:	0a1b      	lsrs	r3, r3, #8
 802847c:	b2db      	uxtb	r3, r3
 802847e:	4619      	mov	r1, r3
 8028480:	f242 0090 	movw	r0, #8336	; 0x2090
 8028484:	f002 fb02 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_L_REG+1, ((uint8_t)temp) );
 8028488:	68bb      	ldr	r3, [r7, #8]
 802848a:	b2db      	uxtb	r3, r3
 802848c:	4619      	mov	r1, r3
 802848e:	f242 0091 	movw	r0, #8337	; 0x2091
 8028492:	f002 fafb 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_MIL_REG, ((uint8_t)(temp_mil>>8)) );
 8028496:	8afb      	ldrh	r3, [r7, #22]
 8028498:	0a1b      	lsrs	r3, r3, #8
 802849a:	b29b      	uxth	r3, r3
 802849c:	b2db      	uxtb	r3, r3
 802849e:	4619      	mov	r1, r3
 80284a0:	f242 0092 	movw	r0, #8338	; 0x2092
 80284a4:	f002 faf2 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_MIL_REG+1, ((uint8_t)(temp_mil)) );
 80284a8:	8afb      	ldrh	r3, [r7, #22]
 80284aa:	b2db      	uxtb	r3, r3
 80284ac:	4619      	mov	r1, r3
 80284ae:	f242 0093 	movw	r0, #8339	; 0x2093
 80284b2:	f002 faeb 	bl	802aa8c <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 80284b6:	4b3d      	ldr	r3, [pc, #244]	; (80285ac <ce303_tarif+0x1aac>)
 80284b8:	681b      	ldr	r3, [r3, #0]
 80284ba:	4618      	mov	r0, r3
 80284bc:	f7f0 ff42 	bl	8019344 <osMutexRelease>
				status_registers.ce303_tarif2_power_h_reg = (uint16_t)(temp>>16);
 80284c0:	68bb      	ldr	r3, [r7, #8]
 80284c2:	0c1b      	lsrs	r3, r3, #16
 80284c4:	b29a      	uxth	r2, r3
 80284c6:	4b3a      	ldr	r3, [pc, #232]	; (80285b0 <ce303_tarif+0x1ab0>)
 80284c8:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
				status_registers.ce303_tarif2_power_l_reg = (uint16_t)temp;
 80284cc:	68bb      	ldr	r3, [r7, #8]
 80284ce:	b29a      	uxth	r2, r3
 80284d0:	4b37      	ldr	r3, [pc, #220]	; (80285b0 <ce303_tarif+0x1ab0>)
 80284d2:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
				status_registers.ce303_tarif2_power_mil_reg =  temp_mil;
 80284d6:	4a36      	ldr	r2, [pc, #216]	; (80285b0 <ce303_tarif+0x1ab0>)
 80284d8:	8afb      	ldrh	r3, [r7, #22]
 80284da:	f8a2 3092 	strh.w	r3, [r2, #146]	; 0x92
				tarif_2_state = 1;
 80284de:	2301      	movs	r3, #1
 80284e0:	74fb      	strb	r3, [r7, #19]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице, 1 цифра перед запятой
 80284e2:	f000 bd1a 	b.w	8028f1a <ce303_tarif+0x241a>

			}

			else if( meter_rx_buffer[i+5] == 0x2E) // четыре цифры перед запятой
 80284e6:	8a3b      	ldrh	r3, [r7, #16]
 80284e8:	3305      	adds	r3, #5
 80284ea:	4a2f      	ldr	r2, [pc, #188]	; (80285a8 <ce303_tarif+0x1aa8>)
 80284ec:	5cd3      	ldrb	r3, [r2, r3]
 80284ee:	2b2e      	cmp	r3, #46	; 0x2e
 80284f0:	f040 8513 	bne.w	8028f1a <ce303_tarif+0x241a>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+2])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+3])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+4])-0x30);
 80284f4:	8a3b      	ldrh	r3, [r7, #16]
 80284f6:	3301      	adds	r3, #1
 80284f8:	4a2b      	ldr	r2, [pc, #172]	; (80285a8 <ce303_tarif+0x1aa8>)
 80284fa:	5cd3      	ldrb	r3, [r2, r3]
 80284fc:	3b30      	subs	r3, #48	; 0x30
 80284fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8028502:	fb02 f203 	mul.w	r2, r2, r3
 8028506:	8a3b      	ldrh	r3, [r7, #16]
 8028508:	3302      	adds	r3, #2
 802850a:	4927      	ldr	r1, [pc, #156]	; (80285a8 <ce303_tarif+0x1aa8>)
 802850c:	5ccb      	ldrb	r3, [r1, r3]
 802850e:	3b30      	subs	r3, #48	; 0x30
 8028510:	2164      	movs	r1, #100	; 0x64
 8028512:	fb01 f303 	mul.w	r3, r1, r3
 8028516:	18d1      	adds	r1, r2, r3
 8028518:	8a3b      	ldrh	r3, [r7, #16]
 802851a:	3303      	adds	r3, #3
 802851c:	4a22      	ldr	r2, [pc, #136]	; (80285a8 <ce303_tarif+0x1aa8>)
 802851e:	5cd3      	ldrb	r3, [r2, r3]
 8028520:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8028524:	4613      	mov	r3, r2
 8028526:	009b      	lsls	r3, r3, #2
 8028528:	4413      	add	r3, r2
 802852a:	005b      	lsls	r3, r3, #1
 802852c:	18ca      	adds	r2, r1, r3
 802852e:	8a3b      	ldrh	r3, [r7, #16]
 8028530:	3304      	adds	r3, #4
 8028532:	491d      	ldr	r1, [pc, #116]	; (80285a8 <ce303_tarif+0x1aa8>)
 8028534:	5ccb      	ldrb	r3, [r1, r3]
 8028536:	3b30      	subs	r3, #48	; 0x30
 8028538:	4413      	add	r3, r2
 802853a:	60bb      	str	r3, [r7, #8]

				if( meter_rx_buffer[i+7] == 0x29 ) // если 1 разряд после запятой
 802853c:	8a3b      	ldrh	r3, [r7, #16]
 802853e:	3307      	adds	r3, #7
 8028540:	4a19      	ldr	r2, [pc, #100]	; (80285a8 <ce303_tarif+0x1aa8>)
 8028542:	5cd3      	ldrb	r3, [r2, r3]
 8028544:	2b29      	cmp	r3, #41	; 0x29
 8028546:	d110      	bne.n	802856a <ce303_tarif+0x1a6a>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+6])-0x30)*100;
 8028548:	8a3b      	ldrh	r3, [r7, #16]
 802854a:	3306      	adds	r3, #6
 802854c:	4a16      	ldr	r2, [pc, #88]	; (80285a8 <ce303_tarif+0x1aa8>)
 802854e:	5cd3      	ldrb	r3, [r2, r3]
 8028550:	3b30      	subs	r3, #48	; 0x30
 8028552:	b29b      	uxth	r3, r3
 8028554:	461a      	mov	r2, r3
 8028556:	0092      	lsls	r2, r2, #2
 8028558:	4413      	add	r3, r2
 802855a:	461a      	mov	r2, r3
 802855c:	0091      	lsls	r1, r2, #2
 802855e:	461a      	mov	r2, r3
 8028560:	460b      	mov	r3, r1
 8028562:	4413      	add	r3, r2
 8028564:	009b      	lsls	r3, r3, #2
 8028566:	82fb      	strh	r3, [r7, #22]
 8028568:	e077      	b.n	802865a <ce303_tarif+0x1b5a>
				}
				else if( meter_rx_buffer[i+8] == 0x29 ) // если 2 разряда после запятой
 802856a:	8a3b      	ldrh	r3, [r7, #16]
 802856c:	3308      	adds	r3, #8
 802856e:	4a0e      	ldr	r2, [pc, #56]	; (80285a8 <ce303_tarif+0x1aa8>)
 8028570:	5cd3      	ldrb	r3, [r2, r3]
 8028572:	2b29      	cmp	r3, #41	; 0x29
 8028574:	d11e      	bne.n	80285b4 <ce303_tarif+0x1ab4>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30))*10;
 8028576:	8a3b      	ldrh	r3, [r7, #16]
 8028578:	3306      	adds	r3, #6
 802857a:	4a0b      	ldr	r2, [pc, #44]	; (80285a8 <ce303_tarif+0x1aa8>)
 802857c:	5cd3      	ldrb	r3, [r2, r3]
 802857e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8028582:	4613      	mov	r3, r2
 8028584:	009b      	lsls	r3, r3, #2
 8028586:	4413      	add	r3, r2
 8028588:	005b      	lsls	r3, r3, #1
 802858a:	4619      	mov	r1, r3
 802858c:	8a3b      	ldrh	r3, [r7, #16]
 802858e:	3307      	adds	r3, #7
 8028590:	4a05      	ldr	r2, [pc, #20]	; (80285a8 <ce303_tarif+0x1aa8>)
 8028592:	5cd3      	ldrb	r3, [r2, r3]
 8028594:	3b30      	subs	r3, #48	; 0x30
 8028596:	440b      	add	r3, r1
 8028598:	b29b      	uxth	r3, r3
 802859a:	461a      	mov	r2, r3
 802859c:	0092      	lsls	r2, r2, #2
 802859e:	4413      	add	r3, r2
 80285a0:	005b      	lsls	r3, r3, #1
 80285a2:	82fb      	strh	r3, [r7, #22]
 80285a4:	e059      	b.n	802865a <ce303_tarif+0x1b5a>
 80285a6:	bf00      	nop
 80285a8:	20009a0c 	.word	0x20009a0c
 80285ac:	20009bb8 	.word	0x20009bb8
 80285b0:	2000af40 	.word	0x2000af40
				}
				else if( meter_rx_buffer[i+9] == 0x29 ) // если 3 разряда после запятой
 80285b4:	8a3b      	ldrh	r3, [r7, #16]
 80285b6:	3309      	adds	r3, #9
 80285b8:	4a95      	ldr	r2, [pc, #596]	; (8028810 <ce303_tarif+0x1d10>)
 80285ba:	5cd3      	ldrb	r3, [r2, r3]
 80285bc:	2b29      	cmp	r3, #41	; 0x29
 80285be:	d126      	bne.n	802860e <ce303_tarif+0x1b0e>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
 80285c0:	8a3b      	ldrh	r3, [r7, #16]
 80285c2:	3306      	adds	r3, #6
 80285c4:	4a92      	ldr	r2, [pc, #584]	; (8028810 <ce303_tarif+0x1d10>)
 80285c6:	5cd3      	ldrb	r3, [r2, r3]
 80285c8:	3b30      	subs	r3, #48	; 0x30
 80285ca:	b29b      	uxth	r3, r3
 80285cc:	461a      	mov	r2, r3
 80285ce:	0092      	lsls	r2, r2, #2
 80285d0:	4413      	add	r3, r2
 80285d2:	461a      	mov	r2, r3
 80285d4:	0091      	lsls	r1, r2, #2
 80285d6:	461a      	mov	r2, r3
 80285d8:	460b      	mov	r3, r1
 80285da:	4413      	add	r3, r2
 80285dc:	009b      	lsls	r3, r3, #2
 80285de:	b29a      	uxth	r2, r3
 80285e0:	8a3b      	ldrh	r3, [r7, #16]
 80285e2:	3307      	adds	r3, #7
 80285e4:	498a      	ldr	r1, [pc, #552]	; (8028810 <ce303_tarif+0x1d10>)
 80285e6:	5ccb      	ldrb	r3, [r1, r3]
 80285e8:	3b30      	subs	r3, #48	; 0x30
 80285ea:	b29b      	uxth	r3, r3
 80285ec:	4619      	mov	r1, r3
 80285ee:	0089      	lsls	r1, r1, #2
 80285f0:	440b      	add	r3, r1
 80285f2:	005b      	lsls	r3, r3, #1
 80285f4:	b29b      	uxth	r3, r3
 80285f6:	4413      	add	r3, r2
 80285f8:	b29a      	uxth	r2, r3
 80285fa:	8a3b      	ldrh	r3, [r7, #16]
 80285fc:	3308      	adds	r3, #8
 80285fe:	4984      	ldr	r1, [pc, #528]	; (8028810 <ce303_tarif+0x1d10>)
 8028600:	5ccb      	ldrb	r3, [r1, r3]
 8028602:	b29b      	uxth	r3, r3
 8028604:	4413      	add	r3, r2
 8028606:	b29b      	uxth	r3, r3
 8028608:	3b30      	subs	r3, #48	; 0x30
 802860a:	82fb      	strh	r3, [r7, #22]
 802860c:	e025      	b.n	802865a <ce303_tarif+0x1b5a>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
 802860e:	8a3b      	ldrh	r3, [r7, #16]
 8028610:	3306      	adds	r3, #6
 8028612:	4a7f      	ldr	r2, [pc, #508]	; (8028810 <ce303_tarif+0x1d10>)
 8028614:	5cd3      	ldrb	r3, [r2, r3]
 8028616:	3b30      	subs	r3, #48	; 0x30
 8028618:	b29b      	uxth	r3, r3
 802861a:	461a      	mov	r2, r3
 802861c:	0092      	lsls	r2, r2, #2
 802861e:	4413      	add	r3, r2
 8028620:	461a      	mov	r2, r3
 8028622:	0091      	lsls	r1, r2, #2
 8028624:	461a      	mov	r2, r3
 8028626:	460b      	mov	r3, r1
 8028628:	4413      	add	r3, r2
 802862a:	009b      	lsls	r3, r3, #2
 802862c:	b29a      	uxth	r2, r3
 802862e:	8a3b      	ldrh	r3, [r7, #16]
 8028630:	3307      	adds	r3, #7
 8028632:	4977      	ldr	r1, [pc, #476]	; (8028810 <ce303_tarif+0x1d10>)
 8028634:	5ccb      	ldrb	r3, [r1, r3]
 8028636:	3b30      	subs	r3, #48	; 0x30
 8028638:	b29b      	uxth	r3, r3
 802863a:	4619      	mov	r1, r3
 802863c:	0089      	lsls	r1, r1, #2
 802863e:	440b      	add	r3, r1
 8028640:	005b      	lsls	r3, r3, #1
 8028642:	b29b      	uxth	r3, r3
 8028644:	4413      	add	r3, r2
 8028646:	b29a      	uxth	r2, r3
 8028648:	8a3b      	ldrh	r3, [r7, #16]
 802864a:	3308      	adds	r3, #8
 802864c:	4970      	ldr	r1, [pc, #448]	; (8028810 <ce303_tarif+0x1d10>)
 802864e:	5ccb      	ldrb	r3, [r1, r3]
 8028650:	b29b      	uxth	r3, r3
 8028652:	4413      	add	r3, r2
 8028654:	b29b      	uxth	r3, r3
 8028656:	3b30      	subs	r3, #48	; 0x30
 8028658:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 802865a:	4b6e      	ldr	r3, [pc, #440]	; (8028814 <ce303_tarif+0x1d14>)
 802865c:	681b      	ldr	r3, [r3, #0]
 802865e:	f04f 31ff 	mov.w	r1, #4294967295
 8028662:	4618      	mov	r0, r3
 8028664:	f7f0 fe20 	bl	80192a8 <osMutexWait>
				fm25v02_write(2*CE_303_TARIF2_POWER_H_REG, ((uint8_t)(temp>>24)) );
 8028668:	68bb      	ldr	r3, [r7, #8]
 802866a:	0e1b      	lsrs	r3, r3, #24
 802866c:	b2db      	uxtb	r3, r3
 802866e:	4619      	mov	r1, r3
 8028670:	f242 008e 	movw	r0, #8334	; 0x208e
 8028674:	f002 fa0a 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_H_REG+1, ((uint8_t)(temp>>16)) );
 8028678:	68bb      	ldr	r3, [r7, #8]
 802867a:	0c1b      	lsrs	r3, r3, #16
 802867c:	b2db      	uxtb	r3, r3
 802867e:	4619      	mov	r1, r3
 8028680:	f242 008f 	movw	r0, #8335	; 0x208f
 8028684:	f002 fa02 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_L_REG, ((uint8_t)(temp>>8)) );
 8028688:	68bb      	ldr	r3, [r7, #8]
 802868a:	0a1b      	lsrs	r3, r3, #8
 802868c:	b2db      	uxtb	r3, r3
 802868e:	4619      	mov	r1, r3
 8028690:	f242 0090 	movw	r0, #8336	; 0x2090
 8028694:	f002 f9fa 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_L_REG+1, ((uint8_t)temp) );
 8028698:	68bb      	ldr	r3, [r7, #8]
 802869a:	b2db      	uxtb	r3, r3
 802869c:	4619      	mov	r1, r3
 802869e:	f242 0091 	movw	r0, #8337	; 0x2091
 80286a2:	f002 f9f3 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_MIL_REG, ((uint8_t)(temp_mil>>8)) );
 80286a6:	8afb      	ldrh	r3, [r7, #22]
 80286a8:	0a1b      	lsrs	r3, r3, #8
 80286aa:	b29b      	uxth	r3, r3
 80286ac:	b2db      	uxtb	r3, r3
 80286ae:	4619      	mov	r1, r3
 80286b0:	f242 0092 	movw	r0, #8338	; 0x2092
 80286b4:	f002 f9ea 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_MIL_REG+1, ((uint8_t)(temp_mil)) );
 80286b8:	8afb      	ldrh	r3, [r7, #22]
 80286ba:	b2db      	uxtb	r3, r3
 80286bc:	4619      	mov	r1, r3
 80286be:	f242 0093 	movw	r0, #8339	; 0x2093
 80286c2:	f002 f9e3 	bl	802aa8c <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 80286c6:	4b53      	ldr	r3, [pc, #332]	; (8028814 <ce303_tarif+0x1d14>)
 80286c8:	681b      	ldr	r3, [r3, #0]
 80286ca:	4618      	mov	r0, r3
 80286cc:	f7f0 fe3a 	bl	8019344 <osMutexRelease>
				status_registers.ce303_tarif2_power_h_reg = (uint16_t)(temp>>16);
 80286d0:	68bb      	ldr	r3, [r7, #8]
 80286d2:	0c1b      	lsrs	r3, r3, #16
 80286d4:	b29a      	uxth	r2, r3
 80286d6:	4b50      	ldr	r3, [pc, #320]	; (8028818 <ce303_tarif+0x1d18>)
 80286d8:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
				status_registers.ce303_tarif2_power_l_reg = (uint16_t)temp;
 80286dc:	68bb      	ldr	r3, [r7, #8]
 80286de:	b29a      	uxth	r2, r3
 80286e0:	4b4d      	ldr	r3, [pc, #308]	; (8028818 <ce303_tarif+0x1d18>)
 80286e2:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
				status_registers.ce303_tarif2_power_mil_reg =  temp_mil;
 80286e6:	4a4c      	ldr	r2, [pc, #304]	; (8028818 <ce303_tarif+0x1d18>)
 80286e8:	8afb      	ldrh	r3, [r7, #22]
 80286ea:	f8a2 3092 	strh.w	r3, [r2, #146]	; 0x92
				tarif_2_state = 1;
 80286ee:	2301      	movs	r3, #1
 80286f0:	74fb      	strb	r3, [r7, #19]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице, 1 цифра перед запятой
 80286f2:	f000 bc12 	b.w	8028f1a <ce303_tarif+0x241a>

			}
		}

		else if( (meter_rx_buffer[i] == 0x28) && (tarif_general_state==1) && (tarif_1_state==1) && (tarif_2_state==1) && (tarif_3_state==0) && (tarif_4_state==0) && (tarif_5_state==0) ) // 0х28 означает символ "(" в ASCII таблице
 80286f6:	8a3b      	ldrh	r3, [r7, #16]
 80286f8:	4a45      	ldr	r2, [pc, #276]	; (8028810 <ce303_tarif+0x1d10>)
 80286fa:	5cd3      	ldrb	r3, [r2, r3]
 80286fc:	2b28      	cmp	r3, #40	; 0x28
 80286fe:	f040 840d 	bne.w	8028f1c <ce303_tarif+0x241c>
 8028702:	7d7b      	ldrb	r3, [r7, #21]
 8028704:	2b01      	cmp	r3, #1
 8028706:	f040 8409 	bne.w	8028f1c <ce303_tarif+0x241c>
 802870a:	7d3b      	ldrb	r3, [r7, #20]
 802870c:	2b01      	cmp	r3, #1
 802870e:	f040 8405 	bne.w	8028f1c <ce303_tarif+0x241c>
 8028712:	7cfb      	ldrb	r3, [r7, #19]
 8028714:	2b01      	cmp	r3, #1
 8028716:	f040 8401 	bne.w	8028f1c <ce303_tarif+0x241c>
 802871a:	7cbb      	ldrb	r3, [r7, #18]
 802871c:	2b00      	cmp	r3, #0
 802871e:	f040 83fd 	bne.w	8028f1c <ce303_tarif+0x241c>
 8028722:	7bfb      	ldrb	r3, [r7, #15]
 8028724:	2b00      	cmp	r3, #0
 8028726:	f040 83f9 	bne.w	8028f1c <ce303_tarif+0x241c>
 802872a:	7bbb      	ldrb	r3, [r7, #14]
 802872c:	2b00      	cmp	r3, #0
 802872e:	f040 83d9 	bne.w	8028ee4 <ce303_tarif+0x23e4>
		{
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице, 1 цифра перед запятой
 8028732:	8a3b      	ldrh	r3, [r7, #16]
 8028734:	3302      	adds	r3, #2
 8028736:	4a36      	ldr	r2, [pc, #216]	; (8028810 <ce303_tarif+0x1d10>)
 8028738:	5cd3      	ldrb	r3, [r2, r3]
 802873a:	2b2e      	cmp	r3, #46	; 0x2e
 802873c:	f040 80e1 	bne.w	8028902 <ce303_tarif+0x1e02>
			{
				temp = (uint32_t)(meter_rx_buffer[i+1]-0x30);
 8028740:	8a3b      	ldrh	r3, [r7, #16]
 8028742:	3301      	adds	r3, #1
 8028744:	4a32      	ldr	r2, [pc, #200]	; (8028810 <ce303_tarif+0x1d10>)
 8028746:	5cd3      	ldrb	r3, [r2, r3]
 8028748:	3b30      	subs	r3, #48	; 0x30
 802874a:	60bb      	str	r3, [r7, #8]

				if( meter_rx_buffer[i+4] == 0x29 ) // если 1 разряд после запятой
 802874c:	8a3b      	ldrh	r3, [r7, #16]
 802874e:	3304      	adds	r3, #4
 8028750:	4a2f      	ldr	r2, [pc, #188]	; (8028810 <ce303_tarif+0x1d10>)
 8028752:	5cd3      	ldrb	r3, [r2, r3]
 8028754:	2b29      	cmp	r3, #41	; 0x29
 8028756:	d110      	bne.n	802877a <ce303_tarif+0x1c7a>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+3])-0x30)*100;
 8028758:	8a3b      	ldrh	r3, [r7, #16]
 802875a:	3303      	adds	r3, #3
 802875c:	4a2c      	ldr	r2, [pc, #176]	; (8028810 <ce303_tarif+0x1d10>)
 802875e:	5cd3      	ldrb	r3, [r2, r3]
 8028760:	3b30      	subs	r3, #48	; 0x30
 8028762:	b29b      	uxth	r3, r3
 8028764:	461a      	mov	r2, r3
 8028766:	0092      	lsls	r2, r2, #2
 8028768:	4413      	add	r3, r2
 802876a:	461a      	mov	r2, r3
 802876c:	0091      	lsls	r1, r2, #2
 802876e:	461a      	mov	r2, r3
 8028770:	460b      	mov	r3, r1
 8028772:	4413      	add	r3, r2
 8028774:	009b      	lsls	r3, r3, #2
 8028776:	82fb      	strh	r3, [r7, #22]
 8028778:	e076      	b.n	8028868 <ce303_tarif+0x1d68>
				}
				else if( meter_rx_buffer[i+5] == 0x29 ) // если 2 разряда после запятой
 802877a:	8a3b      	ldrh	r3, [r7, #16]
 802877c:	3305      	adds	r3, #5
 802877e:	4a24      	ldr	r2, [pc, #144]	; (8028810 <ce303_tarif+0x1d10>)
 8028780:	5cd3      	ldrb	r3, [r2, r3]
 8028782:	2b29      	cmp	r3, #41	; 0x29
 8028784:	d117      	bne.n	80287b6 <ce303_tarif+0x1cb6>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+3])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+4])-0x30))*10;
 8028786:	8a3b      	ldrh	r3, [r7, #16]
 8028788:	3303      	adds	r3, #3
 802878a:	4a21      	ldr	r2, [pc, #132]	; (8028810 <ce303_tarif+0x1d10>)
 802878c:	5cd3      	ldrb	r3, [r2, r3]
 802878e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8028792:	4613      	mov	r3, r2
 8028794:	009b      	lsls	r3, r3, #2
 8028796:	4413      	add	r3, r2
 8028798:	005b      	lsls	r3, r3, #1
 802879a:	4619      	mov	r1, r3
 802879c:	8a3b      	ldrh	r3, [r7, #16]
 802879e:	3304      	adds	r3, #4
 80287a0:	4a1b      	ldr	r2, [pc, #108]	; (8028810 <ce303_tarif+0x1d10>)
 80287a2:	5cd3      	ldrb	r3, [r2, r3]
 80287a4:	3b30      	subs	r3, #48	; 0x30
 80287a6:	440b      	add	r3, r1
 80287a8:	b29b      	uxth	r3, r3
 80287aa:	461a      	mov	r2, r3
 80287ac:	0092      	lsls	r2, r2, #2
 80287ae:	4413      	add	r3, r2
 80287b0:	005b      	lsls	r3, r3, #1
 80287b2:	82fb      	strh	r3, [r7, #22]
 80287b4:	e058      	b.n	8028868 <ce303_tarif+0x1d68>
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 3 разряда после запятой
 80287b6:	8a3b      	ldrh	r3, [r7, #16]
 80287b8:	3306      	adds	r3, #6
 80287ba:	4a15      	ldr	r2, [pc, #84]	; (8028810 <ce303_tarif+0x1d10>)
 80287bc:	5cd3      	ldrb	r3, [r2, r3]
 80287be:	2b29      	cmp	r3, #41	; 0x29
 80287c0:	d12c      	bne.n	802881c <ce303_tarif+0x1d1c>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 80287c2:	8a3b      	ldrh	r3, [r7, #16]
 80287c4:	3303      	adds	r3, #3
 80287c6:	4a12      	ldr	r2, [pc, #72]	; (8028810 <ce303_tarif+0x1d10>)
 80287c8:	5cd3      	ldrb	r3, [r2, r3]
 80287ca:	3b30      	subs	r3, #48	; 0x30
 80287cc:	b29b      	uxth	r3, r3
 80287ce:	461a      	mov	r2, r3
 80287d0:	0092      	lsls	r2, r2, #2
 80287d2:	4413      	add	r3, r2
 80287d4:	461a      	mov	r2, r3
 80287d6:	0091      	lsls	r1, r2, #2
 80287d8:	461a      	mov	r2, r3
 80287da:	460b      	mov	r3, r1
 80287dc:	4413      	add	r3, r2
 80287de:	009b      	lsls	r3, r3, #2
 80287e0:	b29a      	uxth	r2, r3
 80287e2:	8a3b      	ldrh	r3, [r7, #16]
 80287e4:	3304      	adds	r3, #4
 80287e6:	490a      	ldr	r1, [pc, #40]	; (8028810 <ce303_tarif+0x1d10>)
 80287e8:	5ccb      	ldrb	r3, [r1, r3]
 80287ea:	3b30      	subs	r3, #48	; 0x30
 80287ec:	b29b      	uxth	r3, r3
 80287ee:	4619      	mov	r1, r3
 80287f0:	0089      	lsls	r1, r1, #2
 80287f2:	440b      	add	r3, r1
 80287f4:	005b      	lsls	r3, r3, #1
 80287f6:	b29b      	uxth	r3, r3
 80287f8:	4413      	add	r3, r2
 80287fa:	b29a      	uxth	r2, r3
 80287fc:	8a3b      	ldrh	r3, [r7, #16]
 80287fe:	3305      	adds	r3, #5
 8028800:	4903      	ldr	r1, [pc, #12]	; (8028810 <ce303_tarif+0x1d10>)
 8028802:	5ccb      	ldrb	r3, [r1, r3]
 8028804:	b29b      	uxth	r3, r3
 8028806:	4413      	add	r3, r2
 8028808:	b29b      	uxth	r3, r3
 802880a:	3b30      	subs	r3, #48	; 0x30
 802880c:	82fb      	strh	r3, [r7, #22]
 802880e:	e02b      	b.n	8028868 <ce303_tarif+0x1d68>
 8028810:	20009a0c 	.word	0x20009a0c
 8028814:	20009bb8 	.word	0x20009bb8
 8028818:	2000af40 	.word	0x2000af40
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 802881c:	8a3b      	ldrh	r3, [r7, #16]
 802881e:	3303      	adds	r3, #3
 8028820:	4aaf      	ldr	r2, [pc, #700]	; (8028ae0 <ce303_tarif+0x1fe0>)
 8028822:	5cd3      	ldrb	r3, [r2, r3]
 8028824:	3b30      	subs	r3, #48	; 0x30
 8028826:	b29b      	uxth	r3, r3
 8028828:	461a      	mov	r2, r3
 802882a:	0092      	lsls	r2, r2, #2
 802882c:	4413      	add	r3, r2
 802882e:	461a      	mov	r2, r3
 8028830:	0091      	lsls	r1, r2, #2
 8028832:	461a      	mov	r2, r3
 8028834:	460b      	mov	r3, r1
 8028836:	4413      	add	r3, r2
 8028838:	009b      	lsls	r3, r3, #2
 802883a:	b29a      	uxth	r2, r3
 802883c:	8a3b      	ldrh	r3, [r7, #16]
 802883e:	3304      	adds	r3, #4
 8028840:	49a7      	ldr	r1, [pc, #668]	; (8028ae0 <ce303_tarif+0x1fe0>)
 8028842:	5ccb      	ldrb	r3, [r1, r3]
 8028844:	3b30      	subs	r3, #48	; 0x30
 8028846:	b29b      	uxth	r3, r3
 8028848:	4619      	mov	r1, r3
 802884a:	0089      	lsls	r1, r1, #2
 802884c:	440b      	add	r3, r1
 802884e:	005b      	lsls	r3, r3, #1
 8028850:	b29b      	uxth	r3, r3
 8028852:	4413      	add	r3, r2
 8028854:	b29a      	uxth	r2, r3
 8028856:	8a3b      	ldrh	r3, [r7, #16]
 8028858:	3305      	adds	r3, #5
 802885a:	49a1      	ldr	r1, [pc, #644]	; (8028ae0 <ce303_tarif+0x1fe0>)
 802885c:	5ccb      	ldrb	r3, [r1, r3]
 802885e:	b29b      	uxth	r3, r3
 8028860:	4413      	add	r3, r2
 8028862:	b29b      	uxth	r3, r3
 8028864:	3b30      	subs	r3, #48	; 0x30
 8028866:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8028868:	4b9e      	ldr	r3, [pc, #632]	; (8028ae4 <ce303_tarif+0x1fe4>)
 802886a:	681b      	ldr	r3, [r3, #0]
 802886c:	f04f 31ff 	mov.w	r1, #4294967295
 8028870:	4618      	mov	r0, r3
 8028872:	f7f0 fd19 	bl	80192a8 <osMutexWait>
				fm25v02_write(2*CE_303_TARIF3_POWER_H_REG, ((uint8_t)(temp>>24)) );
 8028876:	68bb      	ldr	r3, [r7, #8]
 8028878:	0e1b      	lsrs	r3, r3, #24
 802887a:	b2db      	uxtb	r3, r3
 802887c:	4619      	mov	r1, r3
 802887e:	f242 0094 	movw	r0, #8340	; 0x2094
 8028882:	f002 f903 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_H_REG+1, ((uint8_t)(temp>>16)) );
 8028886:	68bb      	ldr	r3, [r7, #8]
 8028888:	0c1b      	lsrs	r3, r3, #16
 802888a:	b2db      	uxtb	r3, r3
 802888c:	4619      	mov	r1, r3
 802888e:	f242 0095 	movw	r0, #8341	; 0x2095
 8028892:	f002 f8fb 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_L_REG, ((uint8_t)(temp>>8)) );
 8028896:	68bb      	ldr	r3, [r7, #8]
 8028898:	0a1b      	lsrs	r3, r3, #8
 802889a:	b2db      	uxtb	r3, r3
 802889c:	4619      	mov	r1, r3
 802889e:	f242 0096 	movw	r0, #8342	; 0x2096
 80288a2:	f002 f8f3 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_L_REG+1, ((uint8_t)temp) );
 80288a6:	68bb      	ldr	r3, [r7, #8]
 80288a8:	b2db      	uxtb	r3, r3
 80288aa:	4619      	mov	r1, r3
 80288ac:	f242 0097 	movw	r0, #8343	; 0x2097
 80288b0:	f002 f8ec 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_MIL_REG, ((uint8_t)(temp_mil>>8)) );
 80288b4:	8afb      	ldrh	r3, [r7, #22]
 80288b6:	0a1b      	lsrs	r3, r3, #8
 80288b8:	b29b      	uxth	r3, r3
 80288ba:	b2db      	uxtb	r3, r3
 80288bc:	4619      	mov	r1, r3
 80288be:	f242 0098 	movw	r0, #8344	; 0x2098
 80288c2:	f002 f8e3 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_MIL_REG+1, ((uint8_t)(temp_mil)) );
 80288c6:	8afb      	ldrh	r3, [r7, #22]
 80288c8:	b2db      	uxtb	r3, r3
 80288ca:	4619      	mov	r1, r3
 80288cc:	f242 0099 	movw	r0, #8345	; 0x2099
 80288d0:	f002 f8dc 	bl	802aa8c <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 80288d4:	4b83      	ldr	r3, [pc, #524]	; (8028ae4 <ce303_tarif+0x1fe4>)
 80288d6:	681b      	ldr	r3, [r3, #0]
 80288d8:	4618      	mov	r0, r3
 80288da:	f7f0 fd33 	bl	8019344 <osMutexRelease>
				status_registers.ce303_tarif3_power_h_reg = (uint16_t)(temp>>16);
 80288de:	68bb      	ldr	r3, [r7, #8]
 80288e0:	0c1b      	lsrs	r3, r3, #16
 80288e2:	b29a      	uxth	r2, r3
 80288e4:	4b80      	ldr	r3, [pc, #512]	; (8028ae8 <ce303_tarif+0x1fe8>)
 80288e6:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
				status_registers.ce303_tarif3_power_l_reg = (uint16_t)temp;
 80288ea:	68bb      	ldr	r3, [r7, #8]
 80288ec:	b29a      	uxth	r2, r3
 80288ee:	4b7e      	ldr	r3, [pc, #504]	; (8028ae8 <ce303_tarif+0x1fe8>)
 80288f0:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
				status_registers.ce303_tarif3_power_mil_reg =  temp_mil;
 80288f4:	4a7c      	ldr	r2, [pc, #496]	; (8028ae8 <ce303_tarif+0x1fe8>)
 80288f6:	8afb      	ldrh	r3, [r7, #22]
 80288f8:	f8a2 3098 	strh.w	r3, [r2, #152]	; 0x98
				tarif_3_state = 1;
 80288fc:	2301      	movs	r3, #1
 80288fe:	74bb      	strb	r3, [r7, #18]
 8028900:	e30c      	b.n	8028f1c <ce303_tarif+0x241c>

			}

			else if( meter_rx_buffer[i+3] == 0x2E) // 2 цифры перед запятой
 8028902:	8a3b      	ldrh	r3, [r7, #16]
 8028904:	3303      	adds	r3, #3
 8028906:	4a76      	ldr	r2, [pc, #472]	; (8028ae0 <ce303_tarif+0x1fe0>)
 8028908:	5cd3      	ldrb	r3, [r2, r3]
 802890a:	2b2e      	cmp	r3, #46	; 0x2e
 802890c:	f040 80ee 	bne.w	8028aec <ce303_tarif+0x1fec>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+2])-0x30);
 8028910:	8a3b      	ldrh	r3, [r7, #16]
 8028912:	3301      	adds	r3, #1
 8028914:	4a72      	ldr	r2, [pc, #456]	; (8028ae0 <ce303_tarif+0x1fe0>)
 8028916:	5cd3      	ldrb	r3, [r2, r3]
 8028918:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 802891c:	4613      	mov	r3, r2
 802891e:	009b      	lsls	r3, r3, #2
 8028920:	4413      	add	r3, r2
 8028922:	005b      	lsls	r3, r3, #1
 8028924:	4619      	mov	r1, r3
 8028926:	8a3b      	ldrh	r3, [r7, #16]
 8028928:	3302      	adds	r3, #2
 802892a:	4a6d      	ldr	r2, [pc, #436]	; (8028ae0 <ce303_tarif+0x1fe0>)
 802892c:	5cd3      	ldrb	r3, [r2, r3]
 802892e:	3b30      	subs	r3, #48	; 0x30
 8028930:	440b      	add	r3, r1
 8028932:	60bb      	str	r3, [r7, #8]

				if( meter_rx_buffer[i+5] == 0x29 ) // если 1 разряд после запятой
 8028934:	8a3b      	ldrh	r3, [r7, #16]
 8028936:	3305      	adds	r3, #5
 8028938:	4a69      	ldr	r2, [pc, #420]	; (8028ae0 <ce303_tarif+0x1fe0>)
 802893a:	5cd3      	ldrb	r3, [r2, r3]
 802893c:	2b29      	cmp	r3, #41	; 0x29
 802893e:	d110      	bne.n	8028962 <ce303_tarif+0x1e62>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+4])-0x30)*100;
 8028940:	8a3b      	ldrh	r3, [r7, #16]
 8028942:	3304      	adds	r3, #4
 8028944:	4a66      	ldr	r2, [pc, #408]	; (8028ae0 <ce303_tarif+0x1fe0>)
 8028946:	5cd3      	ldrb	r3, [r2, r3]
 8028948:	3b30      	subs	r3, #48	; 0x30
 802894a:	b29b      	uxth	r3, r3
 802894c:	461a      	mov	r2, r3
 802894e:	0092      	lsls	r2, r2, #2
 8028950:	4413      	add	r3, r2
 8028952:	461a      	mov	r2, r3
 8028954:	0091      	lsls	r1, r2, #2
 8028956:	461a      	mov	r2, r3
 8028958:	460b      	mov	r3, r1
 802895a:	4413      	add	r3, r2
 802895c:	009b      	lsls	r3, r3, #2
 802895e:	82fb      	strh	r3, [r7, #22]
 8028960:	e070      	b.n	8028a44 <ce303_tarif+0x1f44>
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 2 разряда после запятой
 8028962:	8a3b      	ldrh	r3, [r7, #16]
 8028964:	3306      	adds	r3, #6
 8028966:	4a5e      	ldr	r2, [pc, #376]	; (8028ae0 <ce303_tarif+0x1fe0>)
 8028968:	5cd3      	ldrb	r3, [r2, r3]
 802896a:	2b29      	cmp	r3, #41	; 0x29
 802896c:	d117      	bne.n	802899e <ce303_tarif+0x1e9e>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30))*10;
 802896e:	8a3b      	ldrh	r3, [r7, #16]
 8028970:	3304      	adds	r3, #4
 8028972:	4a5b      	ldr	r2, [pc, #364]	; (8028ae0 <ce303_tarif+0x1fe0>)
 8028974:	5cd3      	ldrb	r3, [r2, r3]
 8028976:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 802897a:	4613      	mov	r3, r2
 802897c:	009b      	lsls	r3, r3, #2
 802897e:	4413      	add	r3, r2
 8028980:	005b      	lsls	r3, r3, #1
 8028982:	4619      	mov	r1, r3
 8028984:	8a3b      	ldrh	r3, [r7, #16]
 8028986:	3305      	adds	r3, #5
 8028988:	4a55      	ldr	r2, [pc, #340]	; (8028ae0 <ce303_tarif+0x1fe0>)
 802898a:	5cd3      	ldrb	r3, [r2, r3]
 802898c:	3b30      	subs	r3, #48	; 0x30
 802898e:	440b      	add	r3, r1
 8028990:	b29b      	uxth	r3, r3
 8028992:	461a      	mov	r2, r3
 8028994:	0092      	lsls	r2, r2, #2
 8028996:	4413      	add	r3, r2
 8028998:	005b      	lsls	r3, r3, #1
 802899a:	82fb      	strh	r3, [r7, #22]
 802899c:	e052      	b.n	8028a44 <ce303_tarif+0x1f44>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 3 разряда после запятой
 802899e:	8a3b      	ldrh	r3, [r7, #16]
 80289a0:	3307      	adds	r3, #7
 80289a2:	4a4f      	ldr	r2, [pc, #316]	; (8028ae0 <ce303_tarif+0x1fe0>)
 80289a4:	5cd3      	ldrb	r3, [r2, r3]
 80289a6:	2b29      	cmp	r3, #41	; 0x29
 80289a8:	d126      	bne.n	80289f8 <ce303_tarif+0x1ef8>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 80289aa:	8a3b      	ldrh	r3, [r7, #16]
 80289ac:	3304      	adds	r3, #4
 80289ae:	4a4c      	ldr	r2, [pc, #304]	; (8028ae0 <ce303_tarif+0x1fe0>)
 80289b0:	5cd3      	ldrb	r3, [r2, r3]
 80289b2:	3b30      	subs	r3, #48	; 0x30
 80289b4:	b29b      	uxth	r3, r3
 80289b6:	461a      	mov	r2, r3
 80289b8:	0092      	lsls	r2, r2, #2
 80289ba:	4413      	add	r3, r2
 80289bc:	461a      	mov	r2, r3
 80289be:	0091      	lsls	r1, r2, #2
 80289c0:	461a      	mov	r2, r3
 80289c2:	460b      	mov	r3, r1
 80289c4:	4413      	add	r3, r2
 80289c6:	009b      	lsls	r3, r3, #2
 80289c8:	b29a      	uxth	r2, r3
 80289ca:	8a3b      	ldrh	r3, [r7, #16]
 80289cc:	3305      	adds	r3, #5
 80289ce:	4944      	ldr	r1, [pc, #272]	; (8028ae0 <ce303_tarif+0x1fe0>)
 80289d0:	5ccb      	ldrb	r3, [r1, r3]
 80289d2:	3b30      	subs	r3, #48	; 0x30
 80289d4:	b29b      	uxth	r3, r3
 80289d6:	4619      	mov	r1, r3
 80289d8:	0089      	lsls	r1, r1, #2
 80289da:	440b      	add	r3, r1
 80289dc:	005b      	lsls	r3, r3, #1
 80289de:	b29b      	uxth	r3, r3
 80289e0:	4413      	add	r3, r2
 80289e2:	b29a      	uxth	r2, r3
 80289e4:	8a3b      	ldrh	r3, [r7, #16]
 80289e6:	3306      	adds	r3, #6
 80289e8:	493d      	ldr	r1, [pc, #244]	; (8028ae0 <ce303_tarif+0x1fe0>)
 80289ea:	5ccb      	ldrb	r3, [r1, r3]
 80289ec:	b29b      	uxth	r3, r3
 80289ee:	4413      	add	r3, r2
 80289f0:	b29b      	uxth	r3, r3
 80289f2:	3b30      	subs	r3, #48	; 0x30
 80289f4:	82fb      	strh	r3, [r7, #22]
 80289f6:	e025      	b.n	8028a44 <ce303_tarif+0x1f44>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 80289f8:	8a3b      	ldrh	r3, [r7, #16]
 80289fa:	3304      	adds	r3, #4
 80289fc:	4a38      	ldr	r2, [pc, #224]	; (8028ae0 <ce303_tarif+0x1fe0>)
 80289fe:	5cd3      	ldrb	r3, [r2, r3]
 8028a00:	3b30      	subs	r3, #48	; 0x30
 8028a02:	b29b      	uxth	r3, r3
 8028a04:	461a      	mov	r2, r3
 8028a06:	0092      	lsls	r2, r2, #2
 8028a08:	4413      	add	r3, r2
 8028a0a:	461a      	mov	r2, r3
 8028a0c:	0091      	lsls	r1, r2, #2
 8028a0e:	461a      	mov	r2, r3
 8028a10:	460b      	mov	r3, r1
 8028a12:	4413      	add	r3, r2
 8028a14:	009b      	lsls	r3, r3, #2
 8028a16:	b29a      	uxth	r2, r3
 8028a18:	8a3b      	ldrh	r3, [r7, #16]
 8028a1a:	3305      	adds	r3, #5
 8028a1c:	4930      	ldr	r1, [pc, #192]	; (8028ae0 <ce303_tarif+0x1fe0>)
 8028a1e:	5ccb      	ldrb	r3, [r1, r3]
 8028a20:	3b30      	subs	r3, #48	; 0x30
 8028a22:	b29b      	uxth	r3, r3
 8028a24:	4619      	mov	r1, r3
 8028a26:	0089      	lsls	r1, r1, #2
 8028a28:	440b      	add	r3, r1
 8028a2a:	005b      	lsls	r3, r3, #1
 8028a2c:	b29b      	uxth	r3, r3
 8028a2e:	4413      	add	r3, r2
 8028a30:	b29a      	uxth	r2, r3
 8028a32:	8a3b      	ldrh	r3, [r7, #16]
 8028a34:	3306      	adds	r3, #6
 8028a36:	492a      	ldr	r1, [pc, #168]	; (8028ae0 <ce303_tarif+0x1fe0>)
 8028a38:	5ccb      	ldrb	r3, [r1, r3]
 8028a3a:	b29b      	uxth	r3, r3
 8028a3c:	4413      	add	r3, r2
 8028a3e:	b29b      	uxth	r3, r3
 8028a40:	3b30      	subs	r3, #48	; 0x30
 8028a42:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8028a44:	4b27      	ldr	r3, [pc, #156]	; (8028ae4 <ce303_tarif+0x1fe4>)
 8028a46:	681b      	ldr	r3, [r3, #0]
 8028a48:	f04f 31ff 	mov.w	r1, #4294967295
 8028a4c:	4618      	mov	r0, r3
 8028a4e:	f7f0 fc2b 	bl	80192a8 <osMutexWait>
				fm25v02_write(2*CE_303_TARIF3_POWER_H_REG, ((uint8_t)(temp>>24)) );
 8028a52:	68bb      	ldr	r3, [r7, #8]
 8028a54:	0e1b      	lsrs	r3, r3, #24
 8028a56:	b2db      	uxtb	r3, r3
 8028a58:	4619      	mov	r1, r3
 8028a5a:	f242 0094 	movw	r0, #8340	; 0x2094
 8028a5e:	f002 f815 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_H_REG+1, ((uint8_t)(temp>>16)) );
 8028a62:	68bb      	ldr	r3, [r7, #8]
 8028a64:	0c1b      	lsrs	r3, r3, #16
 8028a66:	b2db      	uxtb	r3, r3
 8028a68:	4619      	mov	r1, r3
 8028a6a:	f242 0095 	movw	r0, #8341	; 0x2095
 8028a6e:	f002 f80d 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_L_REG, ((uint8_t)(temp>>8)) );
 8028a72:	68bb      	ldr	r3, [r7, #8]
 8028a74:	0a1b      	lsrs	r3, r3, #8
 8028a76:	b2db      	uxtb	r3, r3
 8028a78:	4619      	mov	r1, r3
 8028a7a:	f242 0096 	movw	r0, #8342	; 0x2096
 8028a7e:	f002 f805 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_L_REG+1, ((uint8_t)temp) );
 8028a82:	68bb      	ldr	r3, [r7, #8]
 8028a84:	b2db      	uxtb	r3, r3
 8028a86:	4619      	mov	r1, r3
 8028a88:	f242 0097 	movw	r0, #8343	; 0x2097
 8028a8c:	f001 fffe 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_MIL_REG, ((uint8_t)(temp_mil>>8)) );
 8028a90:	8afb      	ldrh	r3, [r7, #22]
 8028a92:	0a1b      	lsrs	r3, r3, #8
 8028a94:	b29b      	uxth	r3, r3
 8028a96:	b2db      	uxtb	r3, r3
 8028a98:	4619      	mov	r1, r3
 8028a9a:	f242 0098 	movw	r0, #8344	; 0x2098
 8028a9e:	f001 fff5 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_MIL_REG+1, ((uint8_t)(temp_mil)) );
 8028aa2:	8afb      	ldrh	r3, [r7, #22]
 8028aa4:	b2db      	uxtb	r3, r3
 8028aa6:	4619      	mov	r1, r3
 8028aa8:	f242 0099 	movw	r0, #8345	; 0x2099
 8028aac:	f001 ffee 	bl	802aa8c <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8028ab0:	4b0c      	ldr	r3, [pc, #48]	; (8028ae4 <ce303_tarif+0x1fe4>)
 8028ab2:	681b      	ldr	r3, [r3, #0]
 8028ab4:	4618      	mov	r0, r3
 8028ab6:	f7f0 fc45 	bl	8019344 <osMutexRelease>
				status_registers.ce303_tarif3_power_h_reg = (uint16_t)(temp>>16);
 8028aba:	68bb      	ldr	r3, [r7, #8]
 8028abc:	0c1b      	lsrs	r3, r3, #16
 8028abe:	b29a      	uxth	r2, r3
 8028ac0:	4b09      	ldr	r3, [pc, #36]	; (8028ae8 <ce303_tarif+0x1fe8>)
 8028ac2:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
				status_registers.ce303_tarif3_power_l_reg = (uint16_t)temp;
 8028ac6:	68bb      	ldr	r3, [r7, #8]
 8028ac8:	b29a      	uxth	r2, r3
 8028aca:	4b07      	ldr	r3, [pc, #28]	; (8028ae8 <ce303_tarif+0x1fe8>)
 8028acc:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
				status_registers.ce303_tarif3_power_mil_reg =  temp_mil;
 8028ad0:	4a05      	ldr	r2, [pc, #20]	; (8028ae8 <ce303_tarif+0x1fe8>)
 8028ad2:	8afb      	ldrh	r3, [r7, #22]
 8028ad4:	f8a2 3098 	strh.w	r3, [r2, #152]	; 0x98
				tarif_3_state = 1;
 8028ad8:	2301      	movs	r3, #1
 8028ada:	74bb      	strb	r3, [r7, #18]
 8028adc:	e21e      	b.n	8028f1c <ce303_tarif+0x241c>
 8028ade:	bf00      	nop
 8028ae0:	20009a0c 	.word	0x20009a0c
 8028ae4:	20009bb8 	.word	0x20009bb8
 8028ae8:	2000af40 	.word	0x2000af40

			}

			else if( meter_rx_buffer[i+4] == 0x2E) // 3 цифры перед запятой
 8028aec:	8a3b      	ldrh	r3, [r7, #16]
 8028aee:	3304      	adds	r3, #4
 8028af0:	4aa9      	ldr	r2, [pc, #676]	; (8028d98 <ce303_tarif+0x2298>)
 8028af2:	5cd3      	ldrb	r3, [r2, r3]
 8028af4:	2b2e      	cmp	r3, #46	; 0x2e
 8028af6:	f040 80ef 	bne.w	8028cd8 <ce303_tarif+0x21d8>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+2])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+3])-0x30);
 8028afa:	8a3b      	ldrh	r3, [r7, #16]
 8028afc:	3301      	adds	r3, #1
 8028afe:	4aa6      	ldr	r2, [pc, #664]	; (8028d98 <ce303_tarif+0x2298>)
 8028b00:	5cd3      	ldrb	r3, [r2, r3]
 8028b02:	3b30      	subs	r3, #48	; 0x30
 8028b04:	2264      	movs	r2, #100	; 0x64
 8028b06:	fb02 f103 	mul.w	r1, r2, r3
 8028b0a:	8a3b      	ldrh	r3, [r7, #16]
 8028b0c:	3302      	adds	r3, #2
 8028b0e:	4aa2      	ldr	r2, [pc, #648]	; (8028d98 <ce303_tarif+0x2298>)
 8028b10:	5cd3      	ldrb	r3, [r2, r3]
 8028b12:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8028b16:	4613      	mov	r3, r2
 8028b18:	009b      	lsls	r3, r3, #2
 8028b1a:	4413      	add	r3, r2
 8028b1c:	005b      	lsls	r3, r3, #1
 8028b1e:	18ca      	adds	r2, r1, r3
 8028b20:	8a3b      	ldrh	r3, [r7, #16]
 8028b22:	3303      	adds	r3, #3
 8028b24:	499c      	ldr	r1, [pc, #624]	; (8028d98 <ce303_tarif+0x2298>)
 8028b26:	5ccb      	ldrb	r3, [r1, r3]
 8028b28:	3b30      	subs	r3, #48	; 0x30
 8028b2a:	4413      	add	r3, r2
 8028b2c:	60bb      	str	r3, [r7, #8]

				if( meter_rx_buffer[i+6] == 0x29 ) // если 1 разряд после запятой
 8028b2e:	8a3b      	ldrh	r3, [r7, #16]
 8028b30:	3306      	adds	r3, #6
 8028b32:	4a99      	ldr	r2, [pc, #612]	; (8028d98 <ce303_tarif+0x2298>)
 8028b34:	5cd3      	ldrb	r3, [r2, r3]
 8028b36:	2b29      	cmp	r3, #41	; 0x29
 8028b38:	d110      	bne.n	8028b5c <ce303_tarif+0x205c>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+5])-0x30)*100;
 8028b3a:	8a3b      	ldrh	r3, [r7, #16]
 8028b3c:	3305      	adds	r3, #5
 8028b3e:	4a96      	ldr	r2, [pc, #600]	; (8028d98 <ce303_tarif+0x2298>)
 8028b40:	5cd3      	ldrb	r3, [r2, r3]
 8028b42:	3b30      	subs	r3, #48	; 0x30
 8028b44:	b29b      	uxth	r3, r3
 8028b46:	461a      	mov	r2, r3
 8028b48:	0092      	lsls	r2, r2, #2
 8028b4a:	4413      	add	r3, r2
 8028b4c:	461a      	mov	r2, r3
 8028b4e:	0091      	lsls	r1, r2, #2
 8028b50:	461a      	mov	r2, r3
 8028b52:	460b      	mov	r3, r1
 8028b54:	4413      	add	r3, r2
 8028b56:	009b      	lsls	r3, r3, #2
 8028b58:	82fb      	strh	r3, [r7, #22]
 8028b5a:	e070      	b.n	8028c3e <ce303_tarif+0x213e>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 2 разряда после запятой
 8028b5c:	8a3b      	ldrh	r3, [r7, #16]
 8028b5e:	3307      	adds	r3, #7
 8028b60:	4a8d      	ldr	r2, [pc, #564]	; (8028d98 <ce303_tarif+0x2298>)
 8028b62:	5cd3      	ldrb	r3, [r2, r3]
 8028b64:	2b29      	cmp	r3, #41	; 0x29
 8028b66:	d117      	bne.n	8028b98 <ce303_tarif+0x2098>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30))*10;
 8028b68:	8a3b      	ldrh	r3, [r7, #16]
 8028b6a:	3305      	adds	r3, #5
 8028b6c:	4a8a      	ldr	r2, [pc, #552]	; (8028d98 <ce303_tarif+0x2298>)
 8028b6e:	5cd3      	ldrb	r3, [r2, r3]
 8028b70:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8028b74:	4613      	mov	r3, r2
 8028b76:	009b      	lsls	r3, r3, #2
 8028b78:	4413      	add	r3, r2
 8028b7a:	005b      	lsls	r3, r3, #1
 8028b7c:	4619      	mov	r1, r3
 8028b7e:	8a3b      	ldrh	r3, [r7, #16]
 8028b80:	3306      	adds	r3, #6
 8028b82:	4a85      	ldr	r2, [pc, #532]	; (8028d98 <ce303_tarif+0x2298>)
 8028b84:	5cd3      	ldrb	r3, [r2, r3]
 8028b86:	3b30      	subs	r3, #48	; 0x30
 8028b88:	440b      	add	r3, r1
 8028b8a:	b29b      	uxth	r3, r3
 8028b8c:	461a      	mov	r2, r3
 8028b8e:	0092      	lsls	r2, r2, #2
 8028b90:	4413      	add	r3, r2
 8028b92:	005b      	lsls	r3, r3, #1
 8028b94:	82fb      	strh	r3, [r7, #22]
 8028b96:	e052      	b.n	8028c3e <ce303_tarif+0x213e>
				}
				else if( meter_rx_buffer[i+8] == 0x29 ) // если 3 разряда после запятой
 8028b98:	8a3b      	ldrh	r3, [r7, #16]
 8028b9a:	3308      	adds	r3, #8
 8028b9c:	4a7e      	ldr	r2, [pc, #504]	; (8028d98 <ce303_tarif+0x2298>)
 8028b9e:	5cd3      	ldrb	r3, [r2, r3]
 8028ba0:	2b29      	cmp	r3, #41	; 0x29
 8028ba2:	d126      	bne.n	8028bf2 <ce303_tarif+0x20f2>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 8028ba4:	8a3b      	ldrh	r3, [r7, #16]
 8028ba6:	3305      	adds	r3, #5
 8028ba8:	4a7b      	ldr	r2, [pc, #492]	; (8028d98 <ce303_tarif+0x2298>)
 8028baa:	5cd3      	ldrb	r3, [r2, r3]
 8028bac:	3b30      	subs	r3, #48	; 0x30
 8028bae:	b29b      	uxth	r3, r3
 8028bb0:	461a      	mov	r2, r3
 8028bb2:	0092      	lsls	r2, r2, #2
 8028bb4:	4413      	add	r3, r2
 8028bb6:	461a      	mov	r2, r3
 8028bb8:	0091      	lsls	r1, r2, #2
 8028bba:	461a      	mov	r2, r3
 8028bbc:	460b      	mov	r3, r1
 8028bbe:	4413      	add	r3, r2
 8028bc0:	009b      	lsls	r3, r3, #2
 8028bc2:	b29a      	uxth	r2, r3
 8028bc4:	8a3b      	ldrh	r3, [r7, #16]
 8028bc6:	3306      	adds	r3, #6
 8028bc8:	4973      	ldr	r1, [pc, #460]	; (8028d98 <ce303_tarif+0x2298>)
 8028bca:	5ccb      	ldrb	r3, [r1, r3]
 8028bcc:	3b30      	subs	r3, #48	; 0x30
 8028bce:	b29b      	uxth	r3, r3
 8028bd0:	4619      	mov	r1, r3
 8028bd2:	0089      	lsls	r1, r1, #2
 8028bd4:	440b      	add	r3, r1
 8028bd6:	005b      	lsls	r3, r3, #1
 8028bd8:	b29b      	uxth	r3, r3
 8028bda:	4413      	add	r3, r2
 8028bdc:	b29a      	uxth	r2, r3
 8028bde:	8a3b      	ldrh	r3, [r7, #16]
 8028be0:	3307      	adds	r3, #7
 8028be2:	496d      	ldr	r1, [pc, #436]	; (8028d98 <ce303_tarif+0x2298>)
 8028be4:	5ccb      	ldrb	r3, [r1, r3]
 8028be6:	b29b      	uxth	r3, r3
 8028be8:	4413      	add	r3, r2
 8028bea:	b29b      	uxth	r3, r3
 8028bec:	3b30      	subs	r3, #48	; 0x30
 8028bee:	82fb      	strh	r3, [r7, #22]
 8028bf0:	e025      	b.n	8028c3e <ce303_tarif+0x213e>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 8028bf2:	8a3b      	ldrh	r3, [r7, #16]
 8028bf4:	3305      	adds	r3, #5
 8028bf6:	4a68      	ldr	r2, [pc, #416]	; (8028d98 <ce303_tarif+0x2298>)
 8028bf8:	5cd3      	ldrb	r3, [r2, r3]
 8028bfa:	3b30      	subs	r3, #48	; 0x30
 8028bfc:	b29b      	uxth	r3, r3
 8028bfe:	461a      	mov	r2, r3
 8028c00:	0092      	lsls	r2, r2, #2
 8028c02:	4413      	add	r3, r2
 8028c04:	461a      	mov	r2, r3
 8028c06:	0091      	lsls	r1, r2, #2
 8028c08:	461a      	mov	r2, r3
 8028c0a:	460b      	mov	r3, r1
 8028c0c:	4413      	add	r3, r2
 8028c0e:	009b      	lsls	r3, r3, #2
 8028c10:	b29a      	uxth	r2, r3
 8028c12:	8a3b      	ldrh	r3, [r7, #16]
 8028c14:	3306      	adds	r3, #6
 8028c16:	4960      	ldr	r1, [pc, #384]	; (8028d98 <ce303_tarif+0x2298>)
 8028c18:	5ccb      	ldrb	r3, [r1, r3]
 8028c1a:	3b30      	subs	r3, #48	; 0x30
 8028c1c:	b29b      	uxth	r3, r3
 8028c1e:	4619      	mov	r1, r3
 8028c20:	0089      	lsls	r1, r1, #2
 8028c22:	440b      	add	r3, r1
 8028c24:	005b      	lsls	r3, r3, #1
 8028c26:	b29b      	uxth	r3, r3
 8028c28:	4413      	add	r3, r2
 8028c2a:	b29a      	uxth	r2, r3
 8028c2c:	8a3b      	ldrh	r3, [r7, #16]
 8028c2e:	3307      	adds	r3, #7
 8028c30:	4959      	ldr	r1, [pc, #356]	; (8028d98 <ce303_tarif+0x2298>)
 8028c32:	5ccb      	ldrb	r3, [r1, r3]
 8028c34:	b29b      	uxth	r3, r3
 8028c36:	4413      	add	r3, r2
 8028c38:	b29b      	uxth	r3, r3
 8028c3a:	3b30      	subs	r3, #48	; 0x30
 8028c3c:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8028c3e:	4b57      	ldr	r3, [pc, #348]	; (8028d9c <ce303_tarif+0x229c>)
 8028c40:	681b      	ldr	r3, [r3, #0]
 8028c42:	f04f 31ff 	mov.w	r1, #4294967295
 8028c46:	4618      	mov	r0, r3
 8028c48:	f7f0 fb2e 	bl	80192a8 <osMutexWait>
				fm25v02_write(2*CE_303_TARIF3_POWER_H_REG, ((uint8_t)(temp>>24)) );
 8028c4c:	68bb      	ldr	r3, [r7, #8]
 8028c4e:	0e1b      	lsrs	r3, r3, #24
 8028c50:	b2db      	uxtb	r3, r3
 8028c52:	4619      	mov	r1, r3
 8028c54:	f242 0094 	movw	r0, #8340	; 0x2094
 8028c58:	f001 ff18 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_H_REG+1, ((uint8_t)(temp>>16)) );
 8028c5c:	68bb      	ldr	r3, [r7, #8]
 8028c5e:	0c1b      	lsrs	r3, r3, #16
 8028c60:	b2db      	uxtb	r3, r3
 8028c62:	4619      	mov	r1, r3
 8028c64:	f242 0095 	movw	r0, #8341	; 0x2095
 8028c68:	f001 ff10 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_L_REG, ((uint8_t)(temp>>8)) );
 8028c6c:	68bb      	ldr	r3, [r7, #8]
 8028c6e:	0a1b      	lsrs	r3, r3, #8
 8028c70:	b2db      	uxtb	r3, r3
 8028c72:	4619      	mov	r1, r3
 8028c74:	f242 0096 	movw	r0, #8342	; 0x2096
 8028c78:	f001 ff08 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_L_REG+1, ((uint8_t)temp) );
 8028c7c:	68bb      	ldr	r3, [r7, #8]
 8028c7e:	b2db      	uxtb	r3, r3
 8028c80:	4619      	mov	r1, r3
 8028c82:	f242 0097 	movw	r0, #8343	; 0x2097
 8028c86:	f001 ff01 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_MIL_REG, ((uint8_t)(temp_mil>>8)) );
 8028c8a:	8afb      	ldrh	r3, [r7, #22]
 8028c8c:	0a1b      	lsrs	r3, r3, #8
 8028c8e:	b29b      	uxth	r3, r3
 8028c90:	b2db      	uxtb	r3, r3
 8028c92:	4619      	mov	r1, r3
 8028c94:	f242 0098 	movw	r0, #8344	; 0x2098
 8028c98:	f001 fef8 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_MIL_REG+1, ((uint8_t)(temp_mil)) );
 8028c9c:	8afb      	ldrh	r3, [r7, #22]
 8028c9e:	b2db      	uxtb	r3, r3
 8028ca0:	4619      	mov	r1, r3
 8028ca2:	f242 0099 	movw	r0, #8345	; 0x2099
 8028ca6:	f001 fef1 	bl	802aa8c <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8028caa:	4b3c      	ldr	r3, [pc, #240]	; (8028d9c <ce303_tarif+0x229c>)
 8028cac:	681b      	ldr	r3, [r3, #0]
 8028cae:	4618      	mov	r0, r3
 8028cb0:	f7f0 fb48 	bl	8019344 <osMutexRelease>
				status_registers.ce303_tarif3_power_h_reg = (uint16_t)(temp>>16);
 8028cb4:	68bb      	ldr	r3, [r7, #8]
 8028cb6:	0c1b      	lsrs	r3, r3, #16
 8028cb8:	b29a      	uxth	r2, r3
 8028cba:	4b39      	ldr	r3, [pc, #228]	; (8028da0 <ce303_tarif+0x22a0>)
 8028cbc:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
				status_registers.ce303_tarif3_power_l_reg = (uint16_t)temp;
 8028cc0:	68bb      	ldr	r3, [r7, #8]
 8028cc2:	b29a      	uxth	r2, r3
 8028cc4:	4b36      	ldr	r3, [pc, #216]	; (8028da0 <ce303_tarif+0x22a0>)
 8028cc6:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
				status_registers.ce303_tarif3_power_mil_reg =  temp_mil;
 8028cca:	4a35      	ldr	r2, [pc, #212]	; (8028da0 <ce303_tarif+0x22a0>)
 8028ccc:	8afb      	ldrh	r3, [r7, #22]
 8028cce:	f8a2 3098 	strh.w	r3, [r2, #152]	; 0x98
				tarif_3_state = 1;
 8028cd2:	2301      	movs	r3, #1
 8028cd4:	74bb      	strb	r3, [r7, #18]
 8028cd6:	e121      	b.n	8028f1c <ce303_tarif+0x241c>

			}

			else if( meter_rx_buffer[i+5] == 0x2E) // четыре цифры перед запятой
 8028cd8:	8a3b      	ldrh	r3, [r7, #16]
 8028cda:	3305      	adds	r3, #5
 8028cdc:	4a2e      	ldr	r2, [pc, #184]	; (8028d98 <ce303_tarif+0x2298>)
 8028cde:	5cd3      	ldrb	r3, [r2, r3]
 8028ce0:	2b2e      	cmp	r3, #46	; 0x2e
 8028ce2:	f040 811b 	bne.w	8028f1c <ce303_tarif+0x241c>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+2])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+3])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+4])-0x30);
 8028ce6:	8a3b      	ldrh	r3, [r7, #16]
 8028ce8:	3301      	adds	r3, #1
 8028cea:	4a2b      	ldr	r2, [pc, #172]	; (8028d98 <ce303_tarif+0x2298>)
 8028cec:	5cd3      	ldrb	r3, [r2, r3]
 8028cee:	3b30      	subs	r3, #48	; 0x30
 8028cf0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8028cf4:	fb02 f203 	mul.w	r2, r2, r3
 8028cf8:	8a3b      	ldrh	r3, [r7, #16]
 8028cfa:	3302      	adds	r3, #2
 8028cfc:	4926      	ldr	r1, [pc, #152]	; (8028d98 <ce303_tarif+0x2298>)
 8028cfe:	5ccb      	ldrb	r3, [r1, r3]
 8028d00:	3b30      	subs	r3, #48	; 0x30
 8028d02:	2164      	movs	r1, #100	; 0x64
 8028d04:	fb01 f303 	mul.w	r3, r1, r3
 8028d08:	18d1      	adds	r1, r2, r3
 8028d0a:	8a3b      	ldrh	r3, [r7, #16]
 8028d0c:	3303      	adds	r3, #3
 8028d0e:	4a22      	ldr	r2, [pc, #136]	; (8028d98 <ce303_tarif+0x2298>)
 8028d10:	5cd3      	ldrb	r3, [r2, r3]
 8028d12:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8028d16:	4613      	mov	r3, r2
 8028d18:	009b      	lsls	r3, r3, #2
 8028d1a:	4413      	add	r3, r2
 8028d1c:	005b      	lsls	r3, r3, #1
 8028d1e:	18ca      	adds	r2, r1, r3
 8028d20:	8a3b      	ldrh	r3, [r7, #16]
 8028d22:	3304      	adds	r3, #4
 8028d24:	491c      	ldr	r1, [pc, #112]	; (8028d98 <ce303_tarif+0x2298>)
 8028d26:	5ccb      	ldrb	r3, [r1, r3]
 8028d28:	3b30      	subs	r3, #48	; 0x30
 8028d2a:	4413      	add	r3, r2
 8028d2c:	60bb      	str	r3, [r7, #8]

				if( meter_rx_buffer[i+7] == 0x29 ) // если 1 разряд после запятой
 8028d2e:	8a3b      	ldrh	r3, [r7, #16]
 8028d30:	3307      	adds	r3, #7
 8028d32:	4a19      	ldr	r2, [pc, #100]	; (8028d98 <ce303_tarif+0x2298>)
 8028d34:	5cd3      	ldrb	r3, [r2, r3]
 8028d36:	2b29      	cmp	r3, #41	; 0x29
 8028d38:	d110      	bne.n	8028d5c <ce303_tarif+0x225c>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+6])-0x30)*100;
 8028d3a:	8a3b      	ldrh	r3, [r7, #16]
 8028d3c:	3306      	adds	r3, #6
 8028d3e:	4a16      	ldr	r2, [pc, #88]	; (8028d98 <ce303_tarif+0x2298>)
 8028d40:	5cd3      	ldrb	r3, [r2, r3]
 8028d42:	3b30      	subs	r3, #48	; 0x30
 8028d44:	b29b      	uxth	r3, r3
 8028d46:	461a      	mov	r2, r3
 8028d48:	0092      	lsls	r2, r2, #2
 8028d4a:	4413      	add	r3, r2
 8028d4c:	461a      	mov	r2, r3
 8028d4e:	0091      	lsls	r1, r2, #2
 8028d50:	461a      	mov	r2, r3
 8028d52:	460b      	mov	r3, r1
 8028d54:	4413      	add	r3, r2
 8028d56:	009b      	lsls	r3, r3, #2
 8028d58:	82fb      	strh	r3, [r7, #22]
 8028d5a:	e076      	b.n	8028e4a <ce303_tarif+0x234a>
				}
				else if( meter_rx_buffer[i+8] == 0x29 ) // если 2 разряда после запятой
 8028d5c:	8a3b      	ldrh	r3, [r7, #16]
 8028d5e:	3308      	adds	r3, #8
 8028d60:	4a0d      	ldr	r2, [pc, #52]	; (8028d98 <ce303_tarif+0x2298>)
 8028d62:	5cd3      	ldrb	r3, [r2, r3]
 8028d64:	2b29      	cmp	r3, #41	; 0x29
 8028d66:	d11d      	bne.n	8028da4 <ce303_tarif+0x22a4>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30))*10;
 8028d68:	8a3b      	ldrh	r3, [r7, #16]
 8028d6a:	3306      	adds	r3, #6
 8028d6c:	4a0a      	ldr	r2, [pc, #40]	; (8028d98 <ce303_tarif+0x2298>)
 8028d6e:	5cd3      	ldrb	r3, [r2, r3]
 8028d70:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8028d74:	4613      	mov	r3, r2
 8028d76:	009b      	lsls	r3, r3, #2
 8028d78:	4413      	add	r3, r2
 8028d7a:	005b      	lsls	r3, r3, #1
 8028d7c:	4619      	mov	r1, r3
 8028d7e:	8a3b      	ldrh	r3, [r7, #16]
 8028d80:	3307      	adds	r3, #7
 8028d82:	4a05      	ldr	r2, [pc, #20]	; (8028d98 <ce303_tarif+0x2298>)
 8028d84:	5cd3      	ldrb	r3, [r2, r3]
 8028d86:	3b30      	subs	r3, #48	; 0x30
 8028d88:	440b      	add	r3, r1
 8028d8a:	b29b      	uxth	r3, r3
 8028d8c:	461a      	mov	r2, r3
 8028d8e:	0092      	lsls	r2, r2, #2
 8028d90:	4413      	add	r3, r2
 8028d92:	005b      	lsls	r3, r3, #1
 8028d94:	82fb      	strh	r3, [r7, #22]
 8028d96:	e058      	b.n	8028e4a <ce303_tarif+0x234a>
 8028d98:	20009a0c 	.word	0x20009a0c
 8028d9c:	20009bb8 	.word	0x20009bb8
 8028da0:	2000af40 	.word	0x2000af40
				}
				else if( meter_rx_buffer[i+9] == 0x29 ) // если 3 разряда после запятой
 8028da4:	8a3b      	ldrh	r3, [r7, #16]
 8028da6:	3309      	adds	r3, #9
 8028da8:	4a6c      	ldr	r2, [pc, #432]	; (8028f5c <ce303_tarif+0x245c>)
 8028daa:	5cd3      	ldrb	r3, [r2, r3]
 8028dac:	2b29      	cmp	r3, #41	; 0x29
 8028dae:	d126      	bne.n	8028dfe <ce303_tarif+0x22fe>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
 8028db0:	8a3b      	ldrh	r3, [r7, #16]
 8028db2:	3306      	adds	r3, #6
 8028db4:	4a69      	ldr	r2, [pc, #420]	; (8028f5c <ce303_tarif+0x245c>)
 8028db6:	5cd3      	ldrb	r3, [r2, r3]
 8028db8:	3b30      	subs	r3, #48	; 0x30
 8028dba:	b29b      	uxth	r3, r3
 8028dbc:	461a      	mov	r2, r3
 8028dbe:	0092      	lsls	r2, r2, #2
 8028dc0:	4413      	add	r3, r2
 8028dc2:	461a      	mov	r2, r3
 8028dc4:	0091      	lsls	r1, r2, #2
 8028dc6:	461a      	mov	r2, r3
 8028dc8:	460b      	mov	r3, r1
 8028dca:	4413      	add	r3, r2
 8028dcc:	009b      	lsls	r3, r3, #2
 8028dce:	b29a      	uxth	r2, r3
 8028dd0:	8a3b      	ldrh	r3, [r7, #16]
 8028dd2:	3307      	adds	r3, #7
 8028dd4:	4961      	ldr	r1, [pc, #388]	; (8028f5c <ce303_tarif+0x245c>)
 8028dd6:	5ccb      	ldrb	r3, [r1, r3]
 8028dd8:	3b30      	subs	r3, #48	; 0x30
 8028dda:	b29b      	uxth	r3, r3
 8028ddc:	4619      	mov	r1, r3
 8028dde:	0089      	lsls	r1, r1, #2
 8028de0:	440b      	add	r3, r1
 8028de2:	005b      	lsls	r3, r3, #1
 8028de4:	b29b      	uxth	r3, r3
 8028de6:	4413      	add	r3, r2
 8028de8:	b29a      	uxth	r2, r3
 8028dea:	8a3b      	ldrh	r3, [r7, #16]
 8028dec:	3308      	adds	r3, #8
 8028dee:	495b      	ldr	r1, [pc, #364]	; (8028f5c <ce303_tarif+0x245c>)
 8028df0:	5ccb      	ldrb	r3, [r1, r3]
 8028df2:	b29b      	uxth	r3, r3
 8028df4:	4413      	add	r3, r2
 8028df6:	b29b      	uxth	r3, r3
 8028df8:	3b30      	subs	r3, #48	; 0x30
 8028dfa:	82fb      	strh	r3, [r7, #22]
 8028dfc:	e025      	b.n	8028e4a <ce303_tarif+0x234a>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
 8028dfe:	8a3b      	ldrh	r3, [r7, #16]
 8028e00:	3306      	adds	r3, #6
 8028e02:	4a56      	ldr	r2, [pc, #344]	; (8028f5c <ce303_tarif+0x245c>)
 8028e04:	5cd3      	ldrb	r3, [r2, r3]
 8028e06:	3b30      	subs	r3, #48	; 0x30
 8028e08:	b29b      	uxth	r3, r3
 8028e0a:	461a      	mov	r2, r3
 8028e0c:	0092      	lsls	r2, r2, #2
 8028e0e:	4413      	add	r3, r2
 8028e10:	461a      	mov	r2, r3
 8028e12:	0091      	lsls	r1, r2, #2
 8028e14:	461a      	mov	r2, r3
 8028e16:	460b      	mov	r3, r1
 8028e18:	4413      	add	r3, r2
 8028e1a:	009b      	lsls	r3, r3, #2
 8028e1c:	b29a      	uxth	r2, r3
 8028e1e:	8a3b      	ldrh	r3, [r7, #16]
 8028e20:	3307      	adds	r3, #7
 8028e22:	494e      	ldr	r1, [pc, #312]	; (8028f5c <ce303_tarif+0x245c>)
 8028e24:	5ccb      	ldrb	r3, [r1, r3]
 8028e26:	3b30      	subs	r3, #48	; 0x30
 8028e28:	b29b      	uxth	r3, r3
 8028e2a:	4619      	mov	r1, r3
 8028e2c:	0089      	lsls	r1, r1, #2
 8028e2e:	440b      	add	r3, r1
 8028e30:	005b      	lsls	r3, r3, #1
 8028e32:	b29b      	uxth	r3, r3
 8028e34:	4413      	add	r3, r2
 8028e36:	b29a      	uxth	r2, r3
 8028e38:	8a3b      	ldrh	r3, [r7, #16]
 8028e3a:	3308      	adds	r3, #8
 8028e3c:	4947      	ldr	r1, [pc, #284]	; (8028f5c <ce303_tarif+0x245c>)
 8028e3e:	5ccb      	ldrb	r3, [r1, r3]
 8028e40:	b29b      	uxth	r3, r3
 8028e42:	4413      	add	r3, r2
 8028e44:	b29b      	uxth	r3, r3
 8028e46:	3b30      	subs	r3, #48	; 0x30
 8028e48:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8028e4a:	4b45      	ldr	r3, [pc, #276]	; (8028f60 <ce303_tarif+0x2460>)
 8028e4c:	681b      	ldr	r3, [r3, #0]
 8028e4e:	f04f 31ff 	mov.w	r1, #4294967295
 8028e52:	4618      	mov	r0, r3
 8028e54:	f7f0 fa28 	bl	80192a8 <osMutexWait>
				fm25v02_write(2*CE_303_TARIF3_POWER_H_REG, ((uint8_t)(temp>>24)) );
 8028e58:	68bb      	ldr	r3, [r7, #8]
 8028e5a:	0e1b      	lsrs	r3, r3, #24
 8028e5c:	b2db      	uxtb	r3, r3
 8028e5e:	4619      	mov	r1, r3
 8028e60:	f242 0094 	movw	r0, #8340	; 0x2094
 8028e64:	f001 fe12 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_H_REG+1, ((uint8_t)(temp>>16)) );
 8028e68:	68bb      	ldr	r3, [r7, #8]
 8028e6a:	0c1b      	lsrs	r3, r3, #16
 8028e6c:	b2db      	uxtb	r3, r3
 8028e6e:	4619      	mov	r1, r3
 8028e70:	f242 0095 	movw	r0, #8341	; 0x2095
 8028e74:	f001 fe0a 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_L_REG, ((uint8_t)(temp>>8)) );
 8028e78:	68bb      	ldr	r3, [r7, #8]
 8028e7a:	0a1b      	lsrs	r3, r3, #8
 8028e7c:	b2db      	uxtb	r3, r3
 8028e7e:	4619      	mov	r1, r3
 8028e80:	f242 0096 	movw	r0, #8342	; 0x2096
 8028e84:	f001 fe02 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_L_REG+1, ((uint8_t)temp) );
 8028e88:	68bb      	ldr	r3, [r7, #8]
 8028e8a:	b2db      	uxtb	r3, r3
 8028e8c:	4619      	mov	r1, r3
 8028e8e:	f242 0097 	movw	r0, #8343	; 0x2097
 8028e92:	f001 fdfb 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_MIL_REG, ((uint8_t)(temp_mil>>8)) );
 8028e96:	8afb      	ldrh	r3, [r7, #22]
 8028e98:	0a1b      	lsrs	r3, r3, #8
 8028e9a:	b29b      	uxth	r3, r3
 8028e9c:	b2db      	uxtb	r3, r3
 8028e9e:	4619      	mov	r1, r3
 8028ea0:	f242 0098 	movw	r0, #8344	; 0x2098
 8028ea4:	f001 fdf2 	bl	802aa8c <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_MIL_REG+1, ((uint8_t)(temp_mil)) );
 8028ea8:	8afb      	ldrh	r3, [r7, #22]
 8028eaa:	b2db      	uxtb	r3, r3
 8028eac:	4619      	mov	r1, r3
 8028eae:	f242 0099 	movw	r0, #8345	; 0x2099
 8028eb2:	f001 fdeb 	bl	802aa8c <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8028eb6:	4b2a      	ldr	r3, [pc, #168]	; (8028f60 <ce303_tarif+0x2460>)
 8028eb8:	681b      	ldr	r3, [r3, #0]
 8028eba:	4618      	mov	r0, r3
 8028ebc:	f7f0 fa42 	bl	8019344 <osMutexRelease>
				status_registers.ce303_tarif3_power_h_reg = (uint16_t)(temp>>16);
 8028ec0:	68bb      	ldr	r3, [r7, #8]
 8028ec2:	0c1b      	lsrs	r3, r3, #16
 8028ec4:	b29a      	uxth	r2, r3
 8028ec6:	4b27      	ldr	r3, [pc, #156]	; (8028f64 <ce303_tarif+0x2464>)
 8028ec8:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
				status_registers.ce303_tarif3_power_l_reg = (uint16_t)temp;
 8028ecc:	68bb      	ldr	r3, [r7, #8]
 8028ece:	b29a      	uxth	r2, r3
 8028ed0:	4b24      	ldr	r3, [pc, #144]	; (8028f64 <ce303_tarif+0x2464>)
 8028ed2:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
				status_registers.ce303_tarif3_power_mil_reg =  temp_mil;
 8028ed6:	4a23      	ldr	r2, [pc, #140]	; (8028f64 <ce303_tarif+0x2464>)
 8028ed8:	8afb      	ldrh	r3, [r7, #22]
 8028eda:	f8a2 3098 	strh.w	r3, [r2, #152]	; 0x98
				tarif_3_state = 1;
 8028ede:	2301      	movs	r3, #1
 8028ee0:	74bb      	strb	r3, [r7, #18]
 8028ee2:	e01b      	b.n	8028f1c <ce303_tarif+0x241c>

			}
		}

		else if( (meter_rx_buffer[i] == 0x28) && (tarif_general_state==1) && (tarif_1_state==1) && (tarif_2_state==1) && (tarif_3_state==1) && (tarif_4_state==0) && (tarif_5_state==0) ) // 0х28 означает символ "(" в ASCII таблице
 8028ee4:	8a3b      	ldrh	r3, [r7, #16]
 8028ee6:	4a1d      	ldr	r2, [pc, #116]	; (8028f5c <ce303_tarif+0x245c>)
 8028ee8:	5cd3      	ldrb	r3, [r2, r3]
 8028eea:	2b28      	cmp	r3, #40	; 0x28
 8028eec:	d116      	bne.n	8028f1c <ce303_tarif+0x241c>
 8028eee:	7d7b      	ldrb	r3, [r7, #21]
 8028ef0:	2b01      	cmp	r3, #1
 8028ef2:	d113      	bne.n	8028f1c <ce303_tarif+0x241c>
 8028ef4:	7d3b      	ldrb	r3, [r7, #20]
 8028ef6:	2b01      	cmp	r3, #1
 8028ef8:	d110      	bne.n	8028f1c <ce303_tarif+0x241c>
 8028efa:	7cfb      	ldrb	r3, [r7, #19]
 8028efc:	2b01      	cmp	r3, #1
 8028efe:	d10d      	bne.n	8028f1c <ce303_tarif+0x241c>
 8028f00:	7cbb      	ldrb	r3, [r7, #18]
 8028f02:	2b01      	cmp	r3, #1
 8028f04:	d10a      	bne.n	8028f1c <ce303_tarif+0x241c>
 8028f06:	7bfb      	ldrb	r3, [r7, #15]
 8028f08:	2b00      	cmp	r3, #0
 8028f0a:	d107      	bne.n	8028f1c <ce303_tarif+0x241c>
 8028f0c:	7bbb      	ldrb	r3, [r7, #14]
 8028f0e:	2b00      	cmp	r3, #0
 8028f10:	e004      	b.n	8028f1c <ce303_tarif+0x241c>
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице, 1 цифра перед запятой
 8028f12:	bf00      	nop
 8028f14:	e002      	b.n	8028f1c <ce303_tarif+0x241c>
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице, 1 цифра перед запятой
 8028f16:	bf00      	nop
 8028f18:	e000      	b.n	8028f1c <ce303_tarif+0x241c>
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице, 1 цифра перед запятой
 8028f1a:	bf00      	nop
	for(uint16_t i=0; i<256; i++)
 8028f1c:	8a3b      	ldrh	r3, [r7, #16]
 8028f1e:	3301      	adds	r3, #1
 8028f20:	823b      	strh	r3, [r7, #16]
 8028f22:	8a3b      	ldrh	r3, [r7, #16]
 8028f24:	2bff      	cmp	r3, #255	; 0xff
 8028f26:	f67d afe8 	bls.w	8026efa <ce303_tarif+0x3fa>

		}

	}

	meter_rx_number = 0;
 8028f2a:	4b0f      	ldr	r3, [pc, #60]	; (8028f68 <ce303_tarif+0x2468>)
 8028f2c:	2200      	movs	r2, #0
 8028f2e:	701a      	strb	r2, [r3, #0]
	meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 8028f30:	f7f9 feea 	bl	8022d08 <meter_rx_buffer_clear>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 8028f34:	2201      	movs	r2, #1
 8028f36:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8028f3a:	480c      	ldr	r0, [pc, #48]	; (8028f6c <ce303_tarif+0x246c>)
 8028f3c:	f7eb fca8 	bl	8014890 <HAL_GPIO_WritePin>
	HAL_UART_Transmit_DMA(&huart6, &end_buf[0], 5); // передаем команду
 8028f40:	2205      	movs	r2, #5
 8028f42:	490b      	ldr	r1, [pc, #44]	; (8028f70 <ce303_tarif+0x2470>)
 8028f44:	480b      	ldr	r0, [pc, #44]	; (8028f74 <ce303_tarif+0x2474>)
 8028f46:	f7ee ff6f 	bl	8017e28 <HAL_UART_Transmit_DMA>
	HAL_Delay(1000);
 8028f4a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8028f4e:	f7e9 ffbb 	bl	8012ec8 <HAL_Delay>

}
 8028f52:	bf00      	nop
 8028f54:	3718      	adds	r7, #24
 8028f56:	46bd      	mov	sp, r7
 8028f58:	bd80      	pop	{r7, pc}
 8028f5a:	bf00      	nop
 8028f5c:	20009a0c 	.word	0x20009a0c
 8028f60:	20009bb8 	.word	0x20009bb8
 8028f64:	2000af40 	.word	0x2000af40
 8028f68:	20000865 	.word	0x20000865
 8028f6c:	40021800 	.word	0x40021800
 8028f70:	20000038 	.word	0x20000038
 8028f74:	20009dc4 	.word	0x20009dc4

08028f78 <LED1_A2_ON>:

extern uint8_t spi_buf[4];

//---- Первая цифра---------------------------------------
void LED1_A2_ON(void)
{
 8028f78:	b480      	push	{r7}
 8028f7a:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
	spi_buf[3] = spi_buf[3] & 0xF7;
 8028f7c:	4b05      	ldr	r3, [pc, #20]	; (8028f94 <LED1_A2_ON+0x1c>)
 8028f7e:	78db      	ldrb	r3, [r3, #3]
 8028f80:	f023 0308 	bic.w	r3, r3, #8
 8028f84:	b2da      	uxtb	r2, r3
 8028f86:	4b03      	ldr	r3, [pc, #12]	; (8028f94 <LED1_A2_ON+0x1c>)
 8028f88:	70da      	strb	r2, [r3, #3]
}
 8028f8a:	bf00      	nop
 8028f8c:	46bd      	mov	sp, r7
 8028f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028f92:	4770      	bx	lr
 8028f94:	20009f48 	.word	0x20009f48

08028f98 <LED1_A2_OFF>:

void LED1_A2_OFF(void)
{
 8028f98:	b480      	push	{r7}
 8028f9a:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
	spi_buf[3] = spi_buf[3] | 0x08;
 8028f9c:	4b05      	ldr	r3, [pc, #20]	; (8028fb4 <LED1_A2_OFF+0x1c>)
 8028f9e:	78db      	ldrb	r3, [r3, #3]
 8028fa0:	f043 0308 	orr.w	r3, r3, #8
 8028fa4:	b2da      	uxtb	r2, r3
 8028fa6:	4b03      	ldr	r3, [pc, #12]	; (8028fb4 <LED1_A2_OFF+0x1c>)
 8028fa8:	70da      	strb	r2, [r3, #3]
}
 8028faa:	bf00      	nop
 8028fac:	46bd      	mov	sp, r7
 8028fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028fb2:	4770      	bx	lr
 8028fb4:	20009f48 	.word	0x20009f48

08028fb8 <LED1_B2_ON>:

void LED1_B2_ON(void)
{
 8028fb8:	b480      	push	{r7}
 8028fba:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
	spi_buf[3] = spi_buf[3] & 0xEF;
 8028fbc:	4b05      	ldr	r3, [pc, #20]	; (8028fd4 <LED1_B2_ON+0x1c>)
 8028fbe:	78db      	ldrb	r3, [r3, #3]
 8028fc0:	f023 0310 	bic.w	r3, r3, #16
 8028fc4:	b2da      	uxtb	r2, r3
 8028fc6:	4b03      	ldr	r3, [pc, #12]	; (8028fd4 <LED1_B2_ON+0x1c>)
 8028fc8:	70da      	strb	r2, [r3, #3]
}
 8028fca:	bf00      	nop
 8028fcc:	46bd      	mov	sp, r7
 8028fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028fd2:	4770      	bx	lr
 8028fd4:	20009f48 	.word	0x20009f48

08028fd8 <LED1_B2_OFF>:

void LED1_B2_OFF(void)
{
 8028fd8:	b480      	push	{r7}
 8028fda:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
	spi_buf[3] = spi_buf[3] | 0x10;
 8028fdc:	4b05      	ldr	r3, [pc, #20]	; (8028ff4 <LED1_B2_OFF+0x1c>)
 8028fde:	78db      	ldrb	r3, [r3, #3]
 8028fe0:	f043 0310 	orr.w	r3, r3, #16
 8028fe4:	b2da      	uxtb	r2, r3
 8028fe6:	4b03      	ldr	r3, [pc, #12]	; (8028ff4 <LED1_B2_OFF+0x1c>)
 8028fe8:	70da      	strb	r2, [r3, #3]
}
 8028fea:	bf00      	nop
 8028fec:	46bd      	mov	sp, r7
 8028fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028ff2:	4770      	bx	lr
 8028ff4:	20009f48 	.word	0x20009f48

08028ff8 <LED1_C2_ON>:

void LED1_C2_ON(void)
{
 8028ff8:	b480      	push	{r7}
 8028ffa:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);
	spi_buf[3] = spi_buf[3] & 0xDF;
 8028ffc:	4b05      	ldr	r3, [pc, #20]	; (8029014 <LED1_C2_ON+0x1c>)
 8028ffe:	78db      	ldrb	r3, [r3, #3]
 8029000:	f023 0320 	bic.w	r3, r3, #32
 8029004:	b2da      	uxtb	r2, r3
 8029006:	4b03      	ldr	r3, [pc, #12]	; (8029014 <LED1_C2_ON+0x1c>)
 8029008:	70da      	strb	r2, [r3, #3]
}
 802900a:	bf00      	nop
 802900c:	46bd      	mov	sp, r7
 802900e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029012:	4770      	bx	lr
 8029014:	20009f48 	.word	0x20009f48

08029018 <LED1_C2_OFF>:

void LED1_C2_OFF(void)
{
 8029018:	b480      	push	{r7}
 802901a:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
	spi_buf[3] = spi_buf[3] | 0x20;
 802901c:	4b05      	ldr	r3, [pc, #20]	; (8029034 <LED1_C2_OFF+0x1c>)
 802901e:	78db      	ldrb	r3, [r3, #3]
 8029020:	f043 0320 	orr.w	r3, r3, #32
 8029024:	b2da      	uxtb	r2, r3
 8029026:	4b03      	ldr	r3, [pc, #12]	; (8029034 <LED1_C2_OFF+0x1c>)
 8029028:	70da      	strb	r2, [r3, #3]
}
 802902a:	bf00      	nop
 802902c:	46bd      	mov	sp, r7
 802902e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029032:	4770      	bx	lr
 8029034:	20009f48 	.word	0x20009f48

08029038 <LED1_D2_ON>:

void LED1_D2_ON(void)
{
 8029038:	b480      	push	{r7}
 802903a:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
	spi_buf[3] = spi_buf[3] & 0xFE;
 802903c:	4b05      	ldr	r3, [pc, #20]	; (8029054 <LED1_D2_ON+0x1c>)
 802903e:	78db      	ldrb	r3, [r3, #3]
 8029040:	f023 0301 	bic.w	r3, r3, #1
 8029044:	b2da      	uxtb	r2, r3
 8029046:	4b03      	ldr	r3, [pc, #12]	; (8029054 <LED1_D2_ON+0x1c>)
 8029048:	70da      	strb	r2, [r3, #3]
}
 802904a:	bf00      	nop
 802904c:	46bd      	mov	sp, r7
 802904e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029052:	4770      	bx	lr
 8029054:	20009f48 	.word	0x20009f48

08029058 <LED1_D2_OFF>:

void LED1_D2_OFF(void)
{
 8029058:	b480      	push	{r7}
 802905a:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
	spi_buf[3] = spi_buf[3] | 0x01;
 802905c:	4b05      	ldr	r3, [pc, #20]	; (8029074 <LED1_D2_OFF+0x1c>)
 802905e:	78db      	ldrb	r3, [r3, #3]
 8029060:	f043 0301 	orr.w	r3, r3, #1
 8029064:	b2da      	uxtb	r2, r3
 8029066:	4b03      	ldr	r3, [pc, #12]	; (8029074 <LED1_D2_OFF+0x1c>)
 8029068:	70da      	strb	r2, [r3, #3]
}
 802906a:	bf00      	nop
 802906c:	46bd      	mov	sp, r7
 802906e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029072:	4770      	bx	lr
 8029074:	20009f48 	.word	0x20009f48

08029078 <LED1_E2_ON>:

void LED1_E2_ON(void)
{
 8029078:	b480      	push	{r7}
 802907a:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
	spi_buf[3] = spi_buf[3] & 0xFD;
 802907c:	4b05      	ldr	r3, [pc, #20]	; (8029094 <LED1_E2_ON+0x1c>)
 802907e:	78db      	ldrb	r3, [r3, #3]
 8029080:	f023 0302 	bic.w	r3, r3, #2
 8029084:	b2da      	uxtb	r2, r3
 8029086:	4b03      	ldr	r3, [pc, #12]	; (8029094 <LED1_E2_ON+0x1c>)
 8029088:	70da      	strb	r2, [r3, #3]
}
 802908a:	bf00      	nop
 802908c:	46bd      	mov	sp, r7
 802908e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029092:	4770      	bx	lr
 8029094:	20009f48 	.word	0x20009f48

08029098 <LED1_E2_OFF>:

void LED1_E2_OFF(void)
{
 8029098:	b480      	push	{r7}
 802909a:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
	spi_buf[3] = spi_buf[3] | 0x02;
 802909c:	4b05      	ldr	r3, [pc, #20]	; (80290b4 <LED1_E2_OFF+0x1c>)
 802909e:	78db      	ldrb	r3, [r3, #3]
 80290a0:	f043 0302 	orr.w	r3, r3, #2
 80290a4:	b2da      	uxtb	r2, r3
 80290a6:	4b03      	ldr	r3, [pc, #12]	; (80290b4 <LED1_E2_OFF+0x1c>)
 80290a8:	70da      	strb	r2, [r3, #3]
}
 80290aa:	bf00      	nop
 80290ac:	46bd      	mov	sp, r7
 80290ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80290b2:	4770      	bx	lr
 80290b4:	20009f48 	.word	0x20009f48

080290b8 <LED1_F2_ON>:

void LED1_F2_ON(void)
{
 80290b8:	b480      	push	{r7}
 80290ba:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_SET);
	spi_buf[3] = spi_buf[3] & 0xFB;
 80290bc:	4b05      	ldr	r3, [pc, #20]	; (80290d4 <LED1_F2_ON+0x1c>)
 80290be:	78db      	ldrb	r3, [r3, #3]
 80290c0:	f023 0304 	bic.w	r3, r3, #4
 80290c4:	b2da      	uxtb	r2, r3
 80290c6:	4b03      	ldr	r3, [pc, #12]	; (80290d4 <LED1_F2_ON+0x1c>)
 80290c8:	70da      	strb	r2, [r3, #3]
}
 80290ca:	bf00      	nop
 80290cc:	46bd      	mov	sp, r7
 80290ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80290d2:	4770      	bx	lr
 80290d4:	20009f48 	.word	0x20009f48

080290d8 <LED1_F2_OFF>:

void LED1_F2_OFF(void)
{
 80290d8:	b480      	push	{r7}
 80290da:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_RESET);
	spi_buf[3] = spi_buf[3] | 0x04;
 80290dc:	4b05      	ldr	r3, [pc, #20]	; (80290f4 <LED1_F2_OFF+0x1c>)
 80290de:	78db      	ldrb	r3, [r3, #3]
 80290e0:	f043 0304 	orr.w	r3, r3, #4
 80290e4:	b2da      	uxtb	r2, r3
 80290e6:	4b03      	ldr	r3, [pc, #12]	; (80290f4 <LED1_F2_OFF+0x1c>)
 80290e8:	70da      	strb	r2, [r3, #3]
}
 80290ea:	bf00      	nop
 80290ec:	46bd      	mov	sp, r7
 80290ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80290f2:	4770      	bx	lr
 80290f4:	20009f48 	.word	0x20009f48

080290f8 <LED1_G2_ON>:

void LED1_G2_ON(void)
{
 80290f8:	b480      	push	{r7}
 80290fa:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
	spi_buf[3] = spi_buf[3] & 0xBF;
 80290fc:	4b05      	ldr	r3, [pc, #20]	; (8029114 <LED1_G2_ON+0x1c>)
 80290fe:	78db      	ldrb	r3, [r3, #3]
 8029100:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8029104:	b2da      	uxtb	r2, r3
 8029106:	4b03      	ldr	r3, [pc, #12]	; (8029114 <LED1_G2_ON+0x1c>)
 8029108:	70da      	strb	r2, [r3, #3]
}
 802910a:	bf00      	nop
 802910c:	46bd      	mov	sp, r7
 802910e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029112:	4770      	bx	lr
 8029114:	20009f48 	.word	0x20009f48

08029118 <LED1_G2_OFF>:

void LED1_G2_OFF(void)
{
 8029118:	b480      	push	{r7}
 802911a:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
	spi_buf[3] = spi_buf[3] | 0x40;
 802911c:	4b05      	ldr	r3, [pc, #20]	; (8029134 <LED1_G2_OFF+0x1c>)
 802911e:	78db      	ldrb	r3, [r3, #3]
 8029120:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8029124:	b2da      	uxtb	r2, r3
 8029126:	4b03      	ldr	r3, [pc, #12]	; (8029134 <LED1_G2_OFF+0x1c>)
 8029128:	70da      	strb	r2, [r3, #3]
}
 802912a:	bf00      	nop
 802912c:	46bd      	mov	sp, r7
 802912e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029132:	4770      	bx	lr
 8029134:	20009f48 	.word	0x20009f48

08029138 <LED1_A1_ON>:
//---------------------------------------------------------


//---- Вторая цифра---------------------------------------
void LED1_A1_ON(void)
{
 8029138:	b480      	push	{r7}
 802913a:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
	spi_buf[2] = spi_buf[2] & 0xF7;
 802913c:	4b05      	ldr	r3, [pc, #20]	; (8029154 <LED1_A1_ON+0x1c>)
 802913e:	789b      	ldrb	r3, [r3, #2]
 8029140:	f023 0308 	bic.w	r3, r3, #8
 8029144:	b2da      	uxtb	r2, r3
 8029146:	4b03      	ldr	r3, [pc, #12]	; (8029154 <LED1_A1_ON+0x1c>)
 8029148:	709a      	strb	r2, [r3, #2]
}
 802914a:	bf00      	nop
 802914c:	46bd      	mov	sp, r7
 802914e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029152:	4770      	bx	lr
 8029154:	20009f48 	.word	0x20009f48

08029158 <LED1_A1_OFF>:

void LED1_A1_OFF(void)
{
 8029158:	b480      	push	{r7}
 802915a:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
	spi_buf[2] = spi_buf[2] | 0x08;
 802915c:	4b05      	ldr	r3, [pc, #20]	; (8029174 <LED1_A1_OFF+0x1c>)
 802915e:	789b      	ldrb	r3, [r3, #2]
 8029160:	f043 0308 	orr.w	r3, r3, #8
 8029164:	b2da      	uxtb	r2, r3
 8029166:	4b03      	ldr	r3, [pc, #12]	; (8029174 <LED1_A1_OFF+0x1c>)
 8029168:	709a      	strb	r2, [r3, #2]
}
 802916a:	bf00      	nop
 802916c:	46bd      	mov	sp, r7
 802916e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029172:	4770      	bx	lr
 8029174:	20009f48 	.word	0x20009f48

08029178 <LED1_B1_ON>:

void LED1_B1_ON(void)
{
 8029178:	b480      	push	{r7}
 802917a:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
	spi_buf[2] = spi_buf[2] & 0xEF;
 802917c:	4b05      	ldr	r3, [pc, #20]	; (8029194 <LED1_B1_ON+0x1c>)
 802917e:	789b      	ldrb	r3, [r3, #2]
 8029180:	f023 0310 	bic.w	r3, r3, #16
 8029184:	b2da      	uxtb	r2, r3
 8029186:	4b03      	ldr	r3, [pc, #12]	; (8029194 <LED1_B1_ON+0x1c>)
 8029188:	709a      	strb	r2, [r3, #2]
}
 802918a:	bf00      	nop
 802918c:	46bd      	mov	sp, r7
 802918e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029192:	4770      	bx	lr
 8029194:	20009f48 	.word	0x20009f48

08029198 <LED1_B1_OFF>:

void LED1_B1_OFF(void)
{
 8029198:	b480      	push	{r7}
 802919a:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
	spi_buf[2] = spi_buf[2] | 0x10;
 802919c:	4b05      	ldr	r3, [pc, #20]	; (80291b4 <LED1_B1_OFF+0x1c>)
 802919e:	789b      	ldrb	r3, [r3, #2]
 80291a0:	f043 0310 	orr.w	r3, r3, #16
 80291a4:	b2da      	uxtb	r2, r3
 80291a6:	4b03      	ldr	r3, [pc, #12]	; (80291b4 <LED1_B1_OFF+0x1c>)
 80291a8:	709a      	strb	r2, [r3, #2]
}
 80291aa:	bf00      	nop
 80291ac:	46bd      	mov	sp, r7
 80291ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80291b2:	4770      	bx	lr
 80291b4:	20009f48 	.word	0x20009f48

080291b8 <LED1_C1_ON>:

void LED1_C1_ON(void)
{
 80291b8:	b480      	push	{r7}
 80291ba:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
	spi_buf[2] = spi_buf[2] & 0xDF;
 80291bc:	4b05      	ldr	r3, [pc, #20]	; (80291d4 <LED1_C1_ON+0x1c>)
 80291be:	789b      	ldrb	r3, [r3, #2]
 80291c0:	f023 0320 	bic.w	r3, r3, #32
 80291c4:	b2da      	uxtb	r2, r3
 80291c6:	4b03      	ldr	r3, [pc, #12]	; (80291d4 <LED1_C1_ON+0x1c>)
 80291c8:	709a      	strb	r2, [r3, #2]
}
 80291ca:	bf00      	nop
 80291cc:	46bd      	mov	sp, r7
 80291ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80291d2:	4770      	bx	lr
 80291d4:	20009f48 	.word	0x20009f48

080291d8 <LED1_C1_OFF>:

void LED1_C1_OFF(void)
{
 80291d8:	b480      	push	{r7}
 80291da:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
	spi_buf[2] = spi_buf[2] | 0x20;
 80291dc:	4b05      	ldr	r3, [pc, #20]	; (80291f4 <LED1_C1_OFF+0x1c>)
 80291de:	789b      	ldrb	r3, [r3, #2]
 80291e0:	f043 0320 	orr.w	r3, r3, #32
 80291e4:	b2da      	uxtb	r2, r3
 80291e6:	4b03      	ldr	r3, [pc, #12]	; (80291f4 <LED1_C1_OFF+0x1c>)
 80291e8:	709a      	strb	r2, [r3, #2]
}
 80291ea:	bf00      	nop
 80291ec:	46bd      	mov	sp, r7
 80291ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80291f2:	4770      	bx	lr
 80291f4:	20009f48 	.word	0x20009f48

080291f8 <LED1_D1_ON>:

void LED1_D1_ON(void)
{
 80291f8:	b480      	push	{r7}
 80291fa:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
	spi_buf[2] = spi_buf[2] & 0xFE;
 80291fc:	4b05      	ldr	r3, [pc, #20]	; (8029214 <LED1_D1_ON+0x1c>)
 80291fe:	789b      	ldrb	r3, [r3, #2]
 8029200:	f023 0301 	bic.w	r3, r3, #1
 8029204:	b2da      	uxtb	r2, r3
 8029206:	4b03      	ldr	r3, [pc, #12]	; (8029214 <LED1_D1_ON+0x1c>)
 8029208:	709a      	strb	r2, [r3, #2]
}
 802920a:	bf00      	nop
 802920c:	46bd      	mov	sp, r7
 802920e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029212:	4770      	bx	lr
 8029214:	20009f48 	.word	0x20009f48

08029218 <LED1_D1_OFF>:

void LED1_D1_OFF(void)
{
 8029218:	b480      	push	{r7}
 802921a:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
	spi_buf[2] = spi_buf[2] | 0x01;
 802921c:	4b05      	ldr	r3, [pc, #20]	; (8029234 <LED1_D1_OFF+0x1c>)
 802921e:	789b      	ldrb	r3, [r3, #2]
 8029220:	f043 0301 	orr.w	r3, r3, #1
 8029224:	b2da      	uxtb	r2, r3
 8029226:	4b03      	ldr	r3, [pc, #12]	; (8029234 <LED1_D1_OFF+0x1c>)
 8029228:	709a      	strb	r2, [r3, #2]
}
 802922a:	bf00      	nop
 802922c:	46bd      	mov	sp, r7
 802922e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029232:	4770      	bx	lr
 8029234:	20009f48 	.word	0x20009f48

08029238 <LED1_E1_ON>:

void LED1_E1_ON(void)
{
 8029238:	b480      	push	{r7}
 802923a:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
	spi_buf[2] = spi_buf[2] & 0xFD;
 802923c:	4b05      	ldr	r3, [pc, #20]	; (8029254 <LED1_E1_ON+0x1c>)
 802923e:	789b      	ldrb	r3, [r3, #2]
 8029240:	f023 0302 	bic.w	r3, r3, #2
 8029244:	b2da      	uxtb	r2, r3
 8029246:	4b03      	ldr	r3, [pc, #12]	; (8029254 <LED1_E1_ON+0x1c>)
 8029248:	709a      	strb	r2, [r3, #2]
}
 802924a:	bf00      	nop
 802924c:	46bd      	mov	sp, r7
 802924e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029252:	4770      	bx	lr
 8029254:	20009f48 	.word	0x20009f48

08029258 <LED1_E1_OFF>:

void LED1_E1_OFF(void)
{
 8029258:	b480      	push	{r7}
 802925a:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
	spi_buf[2] = spi_buf[2] | 0x02;
 802925c:	4b05      	ldr	r3, [pc, #20]	; (8029274 <LED1_E1_OFF+0x1c>)
 802925e:	789b      	ldrb	r3, [r3, #2]
 8029260:	f043 0302 	orr.w	r3, r3, #2
 8029264:	b2da      	uxtb	r2, r3
 8029266:	4b03      	ldr	r3, [pc, #12]	; (8029274 <LED1_E1_OFF+0x1c>)
 8029268:	709a      	strb	r2, [r3, #2]
}
 802926a:	bf00      	nop
 802926c:	46bd      	mov	sp, r7
 802926e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029272:	4770      	bx	lr
 8029274:	20009f48 	.word	0x20009f48

08029278 <LED1_F1_ON>:

void LED1_F1_ON(void)
{
 8029278:	b480      	push	{r7}
 802927a:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
	spi_buf[2] = spi_buf[2] & 0xFB;
 802927c:	4b05      	ldr	r3, [pc, #20]	; (8029294 <LED1_F1_ON+0x1c>)
 802927e:	789b      	ldrb	r3, [r3, #2]
 8029280:	f023 0304 	bic.w	r3, r3, #4
 8029284:	b2da      	uxtb	r2, r3
 8029286:	4b03      	ldr	r3, [pc, #12]	; (8029294 <LED1_F1_ON+0x1c>)
 8029288:	709a      	strb	r2, [r3, #2]
}
 802928a:	bf00      	nop
 802928c:	46bd      	mov	sp, r7
 802928e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029292:	4770      	bx	lr
 8029294:	20009f48 	.word	0x20009f48

08029298 <LED1_F1_OFF>:

void LED1_F1_OFF(void)
{
 8029298:	b480      	push	{r7}
 802929a:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
	spi_buf[2] = spi_buf[2] | 0x04;
 802929c:	4b05      	ldr	r3, [pc, #20]	; (80292b4 <LED1_F1_OFF+0x1c>)
 802929e:	789b      	ldrb	r3, [r3, #2]
 80292a0:	f043 0304 	orr.w	r3, r3, #4
 80292a4:	b2da      	uxtb	r2, r3
 80292a6:	4b03      	ldr	r3, [pc, #12]	; (80292b4 <LED1_F1_OFF+0x1c>)
 80292a8:	709a      	strb	r2, [r3, #2]
}
 80292aa:	bf00      	nop
 80292ac:	46bd      	mov	sp, r7
 80292ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80292b2:	4770      	bx	lr
 80292b4:	20009f48 	.word	0x20009f48

080292b8 <LED1_G1_ON>:

void LED1_G1_ON(void)
{
 80292b8:	b480      	push	{r7}
 80292ba:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
	spi_buf[2] = spi_buf[2] & 0xBF;
 80292bc:	4b05      	ldr	r3, [pc, #20]	; (80292d4 <LED1_G1_ON+0x1c>)
 80292be:	789b      	ldrb	r3, [r3, #2]
 80292c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80292c4:	b2da      	uxtb	r2, r3
 80292c6:	4b03      	ldr	r3, [pc, #12]	; (80292d4 <LED1_G1_ON+0x1c>)
 80292c8:	709a      	strb	r2, [r3, #2]
}
 80292ca:	bf00      	nop
 80292cc:	46bd      	mov	sp, r7
 80292ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80292d2:	4770      	bx	lr
 80292d4:	20009f48 	.word	0x20009f48

080292d8 <LED1_G1_OFF>:

void LED1_G1_OFF(void)
{
 80292d8:	b480      	push	{r7}
 80292da:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
	spi_buf[2] = spi_buf[2] | 0x40;
 80292dc:	4b05      	ldr	r3, [pc, #20]	; (80292f4 <LED1_G1_OFF+0x1c>)
 80292de:	789b      	ldrb	r3, [r3, #2]
 80292e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80292e4:	b2da      	uxtb	r2, r3
 80292e6:	4b03      	ldr	r3, [pc, #12]	; (80292f4 <LED1_G1_OFF+0x1c>)
 80292e8:	709a      	strb	r2, [r3, #2]
}
 80292ea:	bf00      	nop
 80292ec:	46bd      	mov	sp, r7
 80292ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80292f2:	4770      	bx	lr
 80292f4:	20009f48 	.word	0x20009f48

080292f8 <LED2_A2_ON>:
//---------------------------------------------------------

//---- третья цифра---------------------------------------
void LED2_A2_ON(void)
{
 80292f8:	b480      	push	{r7}
 80292fa:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
	spi_buf[1] = spi_buf[1] & 0xF7;
 80292fc:	4b05      	ldr	r3, [pc, #20]	; (8029314 <LED2_A2_ON+0x1c>)
 80292fe:	785b      	ldrb	r3, [r3, #1]
 8029300:	f023 0308 	bic.w	r3, r3, #8
 8029304:	b2da      	uxtb	r2, r3
 8029306:	4b03      	ldr	r3, [pc, #12]	; (8029314 <LED2_A2_ON+0x1c>)
 8029308:	705a      	strb	r2, [r3, #1]
}
 802930a:	bf00      	nop
 802930c:	46bd      	mov	sp, r7
 802930e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029312:	4770      	bx	lr
 8029314:	20009f48 	.word	0x20009f48

08029318 <LED2_A2_OFF>:

void LED2_A2_OFF(void)
{
 8029318:	b480      	push	{r7}
 802931a:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
	spi_buf[1] = spi_buf[1] | 0x08;
 802931c:	4b05      	ldr	r3, [pc, #20]	; (8029334 <LED2_A2_OFF+0x1c>)
 802931e:	785b      	ldrb	r3, [r3, #1]
 8029320:	f043 0308 	orr.w	r3, r3, #8
 8029324:	b2da      	uxtb	r2, r3
 8029326:	4b03      	ldr	r3, [pc, #12]	; (8029334 <LED2_A2_OFF+0x1c>)
 8029328:	705a      	strb	r2, [r3, #1]
}
 802932a:	bf00      	nop
 802932c:	46bd      	mov	sp, r7
 802932e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029332:	4770      	bx	lr
 8029334:	20009f48 	.word	0x20009f48

08029338 <LED2_B2_ON>:

void LED2_B2_ON(void)
{
 8029338:	b480      	push	{r7}
 802933a:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
	spi_buf[1] = spi_buf[1] & 0xEF;
 802933c:	4b05      	ldr	r3, [pc, #20]	; (8029354 <LED2_B2_ON+0x1c>)
 802933e:	785b      	ldrb	r3, [r3, #1]
 8029340:	f023 0310 	bic.w	r3, r3, #16
 8029344:	b2da      	uxtb	r2, r3
 8029346:	4b03      	ldr	r3, [pc, #12]	; (8029354 <LED2_B2_ON+0x1c>)
 8029348:	705a      	strb	r2, [r3, #1]
}
 802934a:	bf00      	nop
 802934c:	46bd      	mov	sp, r7
 802934e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029352:	4770      	bx	lr
 8029354:	20009f48 	.word	0x20009f48

08029358 <LED2_B2_OFF>:

void LED2_B2_OFF(void)
{
 8029358:	b480      	push	{r7}
 802935a:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
	spi_buf[1] = spi_buf[1] | 0x10;
 802935c:	4b05      	ldr	r3, [pc, #20]	; (8029374 <LED2_B2_OFF+0x1c>)
 802935e:	785b      	ldrb	r3, [r3, #1]
 8029360:	f043 0310 	orr.w	r3, r3, #16
 8029364:	b2da      	uxtb	r2, r3
 8029366:	4b03      	ldr	r3, [pc, #12]	; (8029374 <LED2_B2_OFF+0x1c>)
 8029368:	705a      	strb	r2, [r3, #1]
}
 802936a:	bf00      	nop
 802936c:	46bd      	mov	sp, r7
 802936e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029372:	4770      	bx	lr
 8029374:	20009f48 	.word	0x20009f48

08029378 <LED2_C2_ON>:

void LED2_C2_ON(void)
{
 8029378:	b480      	push	{r7}
 802937a:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
	spi_buf[1] = spi_buf[1] & 0xDF;
 802937c:	4b05      	ldr	r3, [pc, #20]	; (8029394 <LED2_C2_ON+0x1c>)
 802937e:	785b      	ldrb	r3, [r3, #1]
 8029380:	f023 0320 	bic.w	r3, r3, #32
 8029384:	b2da      	uxtb	r2, r3
 8029386:	4b03      	ldr	r3, [pc, #12]	; (8029394 <LED2_C2_ON+0x1c>)
 8029388:	705a      	strb	r2, [r3, #1]
}
 802938a:	bf00      	nop
 802938c:	46bd      	mov	sp, r7
 802938e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029392:	4770      	bx	lr
 8029394:	20009f48 	.word	0x20009f48

08029398 <LED2_C2_OFF>:

void LED2_C2_OFF(void)
{
 8029398:	b480      	push	{r7}
 802939a:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
	spi_buf[1] = spi_buf[1] | 0x20;
 802939c:	4b05      	ldr	r3, [pc, #20]	; (80293b4 <LED2_C2_OFF+0x1c>)
 802939e:	785b      	ldrb	r3, [r3, #1]
 80293a0:	f043 0320 	orr.w	r3, r3, #32
 80293a4:	b2da      	uxtb	r2, r3
 80293a6:	4b03      	ldr	r3, [pc, #12]	; (80293b4 <LED2_C2_OFF+0x1c>)
 80293a8:	705a      	strb	r2, [r3, #1]
}
 80293aa:	bf00      	nop
 80293ac:	46bd      	mov	sp, r7
 80293ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80293b2:	4770      	bx	lr
 80293b4:	20009f48 	.word	0x20009f48

080293b8 <LED2_D2_ON>:

void LED2_D2_ON(void)
{
 80293b8:	b480      	push	{r7}
 80293ba:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
	spi_buf[1] = spi_buf[1] & 0xFE;
 80293bc:	4b05      	ldr	r3, [pc, #20]	; (80293d4 <LED2_D2_ON+0x1c>)
 80293be:	785b      	ldrb	r3, [r3, #1]
 80293c0:	f023 0301 	bic.w	r3, r3, #1
 80293c4:	b2da      	uxtb	r2, r3
 80293c6:	4b03      	ldr	r3, [pc, #12]	; (80293d4 <LED2_D2_ON+0x1c>)
 80293c8:	705a      	strb	r2, [r3, #1]
}
 80293ca:	bf00      	nop
 80293cc:	46bd      	mov	sp, r7
 80293ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80293d2:	4770      	bx	lr
 80293d4:	20009f48 	.word	0x20009f48

080293d8 <LED2_D2_OFF>:

void LED2_D2_OFF(void)
{
 80293d8:	b480      	push	{r7}
 80293da:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
	spi_buf[1] = spi_buf[1] | 0x01;
 80293dc:	4b05      	ldr	r3, [pc, #20]	; (80293f4 <LED2_D2_OFF+0x1c>)
 80293de:	785b      	ldrb	r3, [r3, #1]
 80293e0:	f043 0301 	orr.w	r3, r3, #1
 80293e4:	b2da      	uxtb	r2, r3
 80293e6:	4b03      	ldr	r3, [pc, #12]	; (80293f4 <LED2_D2_OFF+0x1c>)
 80293e8:	705a      	strb	r2, [r3, #1]
}
 80293ea:	bf00      	nop
 80293ec:	46bd      	mov	sp, r7
 80293ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80293f2:	4770      	bx	lr
 80293f4:	20009f48 	.word	0x20009f48

080293f8 <LED2_E2_ON>:

void LED2_E2_ON(void)
{
 80293f8:	b480      	push	{r7}
 80293fa:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);
	spi_buf[1] = spi_buf[1] & 0xFD;
 80293fc:	4b05      	ldr	r3, [pc, #20]	; (8029414 <LED2_E2_ON+0x1c>)
 80293fe:	785b      	ldrb	r3, [r3, #1]
 8029400:	f023 0302 	bic.w	r3, r3, #2
 8029404:	b2da      	uxtb	r2, r3
 8029406:	4b03      	ldr	r3, [pc, #12]	; (8029414 <LED2_E2_ON+0x1c>)
 8029408:	705a      	strb	r2, [r3, #1]
}
 802940a:	bf00      	nop
 802940c:	46bd      	mov	sp, r7
 802940e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029412:	4770      	bx	lr
 8029414:	20009f48 	.word	0x20009f48

08029418 <LED2_E2_OFF>:

void LED2_E2_OFF(void)
{
 8029418:	b480      	push	{r7}
 802941a:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);
	spi_buf[1] = spi_buf[1] | 0x02;
 802941c:	4b05      	ldr	r3, [pc, #20]	; (8029434 <LED2_E2_OFF+0x1c>)
 802941e:	785b      	ldrb	r3, [r3, #1]
 8029420:	f043 0302 	orr.w	r3, r3, #2
 8029424:	b2da      	uxtb	r2, r3
 8029426:	4b03      	ldr	r3, [pc, #12]	; (8029434 <LED2_E2_OFF+0x1c>)
 8029428:	705a      	strb	r2, [r3, #1]
}
 802942a:	bf00      	nop
 802942c:	46bd      	mov	sp, r7
 802942e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029432:	4770      	bx	lr
 8029434:	20009f48 	.word	0x20009f48

08029438 <LED2_F2_ON>:

void LED2_F2_ON(void)
{
 8029438:	b480      	push	{r7}
 802943a:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
	spi_buf[1] = spi_buf[1] & 0xFB;
 802943c:	4b05      	ldr	r3, [pc, #20]	; (8029454 <LED2_F2_ON+0x1c>)
 802943e:	785b      	ldrb	r3, [r3, #1]
 8029440:	f023 0304 	bic.w	r3, r3, #4
 8029444:	b2da      	uxtb	r2, r3
 8029446:	4b03      	ldr	r3, [pc, #12]	; (8029454 <LED2_F2_ON+0x1c>)
 8029448:	705a      	strb	r2, [r3, #1]
}
 802944a:	bf00      	nop
 802944c:	46bd      	mov	sp, r7
 802944e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029452:	4770      	bx	lr
 8029454:	20009f48 	.word	0x20009f48

08029458 <LED2_F2_OFF>:

void LED2_F2_OFF(void)
{
 8029458:	b480      	push	{r7}
 802945a:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
	spi_buf[1] = spi_buf[1] | 0x04;
 802945c:	4b05      	ldr	r3, [pc, #20]	; (8029474 <LED2_F2_OFF+0x1c>)
 802945e:	785b      	ldrb	r3, [r3, #1]
 8029460:	f043 0304 	orr.w	r3, r3, #4
 8029464:	b2da      	uxtb	r2, r3
 8029466:	4b03      	ldr	r3, [pc, #12]	; (8029474 <LED2_F2_OFF+0x1c>)
 8029468:	705a      	strb	r2, [r3, #1]
}
 802946a:	bf00      	nop
 802946c:	46bd      	mov	sp, r7
 802946e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029472:	4770      	bx	lr
 8029474:	20009f48 	.word	0x20009f48

08029478 <LED2_G2_ON>:

void LED2_G2_ON(void)
{
 8029478:	b480      	push	{r7}
 802947a:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
	spi_buf[1] = spi_buf[1] & 0xBF;
 802947c:	4b05      	ldr	r3, [pc, #20]	; (8029494 <LED2_G2_ON+0x1c>)
 802947e:	785b      	ldrb	r3, [r3, #1]
 8029480:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8029484:	b2da      	uxtb	r2, r3
 8029486:	4b03      	ldr	r3, [pc, #12]	; (8029494 <LED2_G2_ON+0x1c>)
 8029488:	705a      	strb	r2, [r3, #1]
}
 802948a:	bf00      	nop
 802948c:	46bd      	mov	sp, r7
 802948e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029492:	4770      	bx	lr
 8029494:	20009f48 	.word	0x20009f48

08029498 <LED2_G2_OFF>:

void LED2_G2_OFF(void)
{
 8029498:	b480      	push	{r7}
 802949a:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
	spi_buf[1] = spi_buf[1] | 0x40;
 802949c:	4b05      	ldr	r3, [pc, #20]	; (80294b4 <LED2_G2_OFF+0x1c>)
 802949e:	785b      	ldrb	r3, [r3, #1]
 80294a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80294a4:	b2da      	uxtb	r2, r3
 80294a6:	4b03      	ldr	r3, [pc, #12]	; (80294b4 <LED2_G2_OFF+0x1c>)
 80294a8:	705a      	strb	r2, [r3, #1]
}
 80294aa:	bf00      	nop
 80294ac:	46bd      	mov	sp, r7
 80294ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80294b2:	4770      	bx	lr
 80294b4:	20009f48 	.word	0x20009f48

080294b8 <LED2_A1_ON>:
//---------------------------------------------------------

//---- четвертая цифра---------------------------------------
void LED2_A1_ON(void)
{
 80294b8:	b480      	push	{r7}
 80294ba:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
	spi_buf[0] = spi_buf[0] & 0xF7;
 80294bc:	4b05      	ldr	r3, [pc, #20]	; (80294d4 <LED2_A1_ON+0x1c>)
 80294be:	781b      	ldrb	r3, [r3, #0]
 80294c0:	f023 0308 	bic.w	r3, r3, #8
 80294c4:	b2da      	uxtb	r2, r3
 80294c6:	4b03      	ldr	r3, [pc, #12]	; (80294d4 <LED2_A1_ON+0x1c>)
 80294c8:	701a      	strb	r2, [r3, #0]
}
 80294ca:	bf00      	nop
 80294cc:	46bd      	mov	sp, r7
 80294ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80294d2:	4770      	bx	lr
 80294d4:	20009f48 	.word	0x20009f48

080294d8 <LED2_A1_OFF>:

void LED2_A1_OFF(void)
{
 80294d8:	b480      	push	{r7}
 80294da:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
	spi_buf[0] = spi_buf[0] | 0x08;
 80294dc:	4b05      	ldr	r3, [pc, #20]	; (80294f4 <LED2_A1_OFF+0x1c>)
 80294de:	781b      	ldrb	r3, [r3, #0]
 80294e0:	f043 0308 	orr.w	r3, r3, #8
 80294e4:	b2da      	uxtb	r2, r3
 80294e6:	4b03      	ldr	r3, [pc, #12]	; (80294f4 <LED2_A1_OFF+0x1c>)
 80294e8:	701a      	strb	r2, [r3, #0]
}
 80294ea:	bf00      	nop
 80294ec:	46bd      	mov	sp, r7
 80294ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80294f2:	4770      	bx	lr
 80294f4:	20009f48 	.word	0x20009f48

080294f8 <LED2_B1_ON>:

void LED2_B1_ON(void)
{
 80294f8:	b480      	push	{r7}
 80294fa:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
	spi_buf[0] = spi_buf[0] & 0xEF;
 80294fc:	4b05      	ldr	r3, [pc, #20]	; (8029514 <LED2_B1_ON+0x1c>)
 80294fe:	781b      	ldrb	r3, [r3, #0]
 8029500:	f023 0310 	bic.w	r3, r3, #16
 8029504:	b2da      	uxtb	r2, r3
 8029506:	4b03      	ldr	r3, [pc, #12]	; (8029514 <LED2_B1_ON+0x1c>)
 8029508:	701a      	strb	r2, [r3, #0]
}
 802950a:	bf00      	nop
 802950c:	46bd      	mov	sp, r7
 802950e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029512:	4770      	bx	lr
 8029514:	20009f48 	.word	0x20009f48

08029518 <LED2_B1_OFF>:

void LED2_B1_OFF(void)
{
 8029518:	b480      	push	{r7}
 802951a:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
	spi_buf[0] = spi_buf[0] | 0x10;
 802951c:	4b05      	ldr	r3, [pc, #20]	; (8029534 <LED2_B1_OFF+0x1c>)
 802951e:	781b      	ldrb	r3, [r3, #0]
 8029520:	f043 0310 	orr.w	r3, r3, #16
 8029524:	b2da      	uxtb	r2, r3
 8029526:	4b03      	ldr	r3, [pc, #12]	; (8029534 <LED2_B1_OFF+0x1c>)
 8029528:	701a      	strb	r2, [r3, #0]
}
 802952a:	bf00      	nop
 802952c:	46bd      	mov	sp, r7
 802952e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029532:	4770      	bx	lr
 8029534:	20009f48 	.word	0x20009f48

08029538 <LED2_C1_ON>:

void LED2_C1_ON(void)
{
 8029538:	b480      	push	{r7}
 802953a:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_SET);
	spi_buf[0] = spi_buf[0] & 0xDF;
 802953c:	4b05      	ldr	r3, [pc, #20]	; (8029554 <LED2_C1_ON+0x1c>)
 802953e:	781b      	ldrb	r3, [r3, #0]
 8029540:	f023 0320 	bic.w	r3, r3, #32
 8029544:	b2da      	uxtb	r2, r3
 8029546:	4b03      	ldr	r3, [pc, #12]	; (8029554 <LED2_C1_ON+0x1c>)
 8029548:	701a      	strb	r2, [r3, #0]
}
 802954a:	bf00      	nop
 802954c:	46bd      	mov	sp, r7
 802954e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029552:	4770      	bx	lr
 8029554:	20009f48 	.word	0x20009f48

08029558 <LED2_C1_OFF>:

void LED2_C1_OFF(void)
{
 8029558:	b480      	push	{r7}
 802955a:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_RESET);
	spi_buf[0] = spi_buf[0] | 0x20;
 802955c:	4b05      	ldr	r3, [pc, #20]	; (8029574 <LED2_C1_OFF+0x1c>)
 802955e:	781b      	ldrb	r3, [r3, #0]
 8029560:	f043 0320 	orr.w	r3, r3, #32
 8029564:	b2da      	uxtb	r2, r3
 8029566:	4b03      	ldr	r3, [pc, #12]	; (8029574 <LED2_C1_OFF+0x1c>)
 8029568:	701a      	strb	r2, [r3, #0]
}
 802956a:	bf00      	nop
 802956c:	46bd      	mov	sp, r7
 802956e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029572:	4770      	bx	lr
 8029574:	20009f48 	.word	0x20009f48

08029578 <LED2_D1_ON>:

void LED2_D1_ON(void)
{
 8029578:	b480      	push	{r7}
 802957a:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, GPIO_PIN_SET);
	spi_buf[0] = spi_buf[0] & 0xFE;
 802957c:	4b05      	ldr	r3, [pc, #20]	; (8029594 <LED2_D1_ON+0x1c>)
 802957e:	781b      	ldrb	r3, [r3, #0]
 8029580:	f023 0301 	bic.w	r3, r3, #1
 8029584:	b2da      	uxtb	r2, r3
 8029586:	4b03      	ldr	r3, [pc, #12]	; (8029594 <LED2_D1_ON+0x1c>)
 8029588:	701a      	strb	r2, [r3, #0]
}
 802958a:	bf00      	nop
 802958c:	46bd      	mov	sp, r7
 802958e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029592:	4770      	bx	lr
 8029594:	20009f48 	.word	0x20009f48

08029598 <LED2_D1_OFF>:

void LED2_D1_OFF(void)
{
 8029598:	b480      	push	{r7}
 802959a:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, GPIO_PIN_RESET);
	spi_buf[0] = spi_buf[0] | 0x01;
 802959c:	4b05      	ldr	r3, [pc, #20]	; (80295b4 <LED2_D1_OFF+0x1c>)
 802959e:	781b      	ldrb	r3, [r3, #0]
 80295a0:	f043 0301 	orr.w	r3, r3, #1
 80295a4:	b2da      	uxtb	r2, r3
 80295a6:	4b03      	ldr	r3, [pc, #12]	; (80295b4 <LED2_D1_OFF+0x1c>)
 80295a8:	701a      	strb	r2, [r3, #0]
}
 80295aa:	bf00      	nop
 80295ac:	46bd      	mov	sp, r7
 80295ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80295b2:	4770      	bx	lr
 80295b4:	20009f48 	.word	0x20009f48

080295b8 <LED2_E1_ON>:

void LED2_E1_ON(void)
{
 80295b8:	b480      	push	{r7}
 80295ba:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOG, GPIO_PIN_4, GPIO_PIN_SET);
	spi_buf[0] = spi_buf[0] & 0xFD;
 80295bc:	4b05      	ldr	r3, [pc, #20]	; (80295d4 <LED2_E1_ON+0x1c>)
 80295be:	781b      	ldrb	r3, [r3, #0]
 80295c0:	f023 0302 	bic.w	r3, r3, #2
 80295c4:	b2da      	uxtb	r2, r3
 80295c6:	4b03      	ldr	r3, [pc, #12]	; (80295d4 <LED2_E1_ON+0x1c>)
 80295c8:	701a      	strb	r2, [r3, #0]
}
 80295ca:	bf00      	nop
 80295cc:	46bd      	mov	sp, r7
 80295ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80295d2:	4770      	bx	lr
 80295d4:	20009f48 	.word	0x20009f48

080295d8 <LED2_E1_OFF>:

void LED2_E1_OFF(void)
{
 80295d8:	b480      	push	{r7}
 80295da:	af00      	add	r7, sp, #0
	//AL_GPIO_WritePin(GPIOG, GPIO_PIN_4, GPIO_PIN_RESET);
	spi_buf[0] = spi_buf[0] | 0x02;
 80295dc:	4b05      	ldr	r3, [pc, #20]	; (80295f4 <LED2_E1_OFF+0x1c>)
 80295de:	781b      	ldrb	r3, [r3, #0]
 80295e0:	f043 0302 	orr.w	r3, r3, #2
 80295e4:	b2da      	uxtb	r2, r3
 80295e6:	4b03      	ldr	r3, [pc, #12]	; (80295f4 <LED2_E1_OFF+0x1c>)
 80295e8:	701a      	strb	r2, [r3, #0]
}
 80295ea:	bf00      	nop
 80295ec:	46bd      	mov	sp, r7
 80295ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80295f2:	4770      	bx	lr
 80295f4:	20009f48 	.word	0x20009f48

080295f8 <LED2_F1_ON>:

void LED2_F1_ON(void)
{
 80295f8:	b480      	push	{r7}
 80295fa:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, GPIO_PIN_SET);
	spi_buf[0] = spi_buf[0] & 0xFB;
 80295fc:	4b05      	ldr	r3, [pc, #20]	; (8029614 <LED2_F1_ON+0x1c>)
 80295fe:	781b      	ldrb	r3, [r3, #0]
 8029600:	f023 0304 	bic.w	r3, r3, #4
 8029604:	b2da      	uxtb	r2, r3
 8029606:	4b03      	ldr	r3, [pc, #12]	; (8029614 <LED2_F1_ON+0x1c>)
 8029608:	701a      	strb	r2, [r3, #0]
}
 802960a:	bf00      	nop
 802960c:	46bd      	mov	sp, r7
 802960e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029612:	4770      	bx	lr
 8029614:	20009f48 	.word	0x20009f48

08029618 <LED2_F1_OFF>:

void LED2_F1_OFF(void)
{
 8029618:	b480      	push	{r7}
 802961a:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, GPIO_PIN_RESET);
	spi_buf[0] = spi_buf[0] | 0x04;
 802961c:	4b05      	ldr	r3, [pc, #20]	; (8029634 <LED2_F1_OFF+0x1c>)
 802961e:	781b      	ldrb	r3, [r3, #0]
 8029620:	f043 0304 	orr.w	r3, r3, #4
 8029624:	b2da      	uxtb	r2, r3
 8029626:	4b03      	ldr	r3, [pc, #12]	; (8029634 <LED2_F1_OFF+0x1c>)
 8029628:	701a      	strb	r2, [r3, #0]
}
 802962a:	bf00      	nop
 802962c:	46bd      	mov	sp, r7
 802962e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029632:	4770      	bx	lr
 8029634:	20009f48 	.word	0x20009f48

08029638 <LED2_G1_ON>:

void LED2_G1_ON(void)
{
 8029638:	b480      	push	{r7}
 802963a:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_SET);
	spi_buf[0] = spi_buf[0] & 0xBF;
 802963c:	4b05      	ldr	r3, [pc, #20]	; (8029654 <LED2_G1_ON+0x1c>)
 802963e:	781b      	ldrb	r3, [r3, #0]
 8029640:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8029644:	b2da      	uxtb	r2, r3
 8029646:	4b03      	ldr	r3, [pc, #12]	; (8029654 <LED2_G1_ON+0x1c>)
 8029648:	701a      	strb	r2, [r3, #0]
}
 802964a:	bf00      	nop
 802964c:	46bd      	mov	sp, r7
 802964e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029652:	4770      	bx	lr
 8029654:	20009f48 	.word	0x20009f48

08029658 <LED2_G1_OFF>:

void LED2_G1_OFF(void)
{
 8029658:	b480      	push	{r7}
 802965a:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
	spi_buf[0] = spi_buf[0] | 0x40;
 802965c:	4b05      	ldr	r3, [pc, #20]	; (8029674 <LED2_G1_OFF+0x1c>)
 802965e:	781b      	ldrb	r3, [r3, #0]
 8029660:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8029664:	b2da      	uxtb	r2, r3
 8029666:	4b03      	ldr	r3, [pc, #12]	; (8029674 <LED2_G1_OFF+0x1c>)
 8029668:	701a      	strb	r2, [r3, #0]
}
 802966a:	bf00      	nop
 802966c:	46bd      	mov	sp, r7
 802966e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029672:	4770      	bx	lr
 8029674:	20009f48 	.word	0x20009f48

08029678 <dig1_set_0>:
//---------------------------------------------------------


//----Управление первой цифрой-----------------------------
void dig1_set_0(void)
{
 8029678:	b580      	push	{r7, lr}
 802967a:	af00      	add	r7, sp, #0
	LED1_A2_ON();
 802967c:	f7ff fc7c 	bl	8028f78 <LED1_A2_ON>
	LED1_B2_ON();
 8029680:	f7ff fc9a 	bl	8028fb8 <LED1_B2_ON>
	LED1_C2_ON();
 8029684:	f7ff fcb8 	bl	8028ff8 <LED1_C2_ON>
	LED1_D2_ON();
 8029688:	f7ff fcd6 	bl	8029038 <LED1_D2_ON>
	LED1_E2_ON();
 802968c:	f7ff fcf4 	bl	8029078 <LED1_E2_ON>
	LED1_F2_ON();
 8029690:	f7ff fd12 	bl	80290b8 <LED1_F2_ON>
	LED1_G2_OFF();
 8029694:	f7ff fd40 	bl	8029118 <LED1_G2_OFF>
}
 8029698:	bf00      	nop
 802969a:	bd80      	pop	{r7, pc}

0802969c <dig1_set_1>:

void dig1_set_1(void)
{
 802969c:	b580      	push	{r7, lr}
 802969e:	af00      	add	r7, sp, #0
	LED1_A2_OFF();
 80296a0:	f7ff fc7a 	bl	8028f98 <LED1_A2_OFF>
	LED1_B2_OFF();
 80296a4:	f7ff fc98 	bl	8028fd8 <LED1_B2_OFF>
	LED1_C2_OFF();
 80296a8:	f7ff fcb6 	bl	8029018 <LED1_C2_OFF>
	LED1_D2_OFF();
 80296ac:	f7ff fcd4 	bl	8029058 <LED1_D2_OFF>
	LED1_E2_ON();
 80296b0:	f7ff fce2 	bl	8029078 <LED1_E2_ON>
	LED1_F2_ON();
 80296b4:	f7ff fd00 	bl	80290b8 <LED1_F2_ON>
	LED1_G2_OFF();
 80296b8:	f7ff fd2e 	bl	8029118 <LED1_G2_OFF>
}
 80296bc:	bf00      	nop
 80296be:	bd80      	pop	{r7, pc}

080296c0 <dig1_set_2>:

void dig1_set_2(void)
{
 80296c0:	b580      	push	{r7, lr}
 80296c2:	af00      	add	r7, sp, #0
	LED1_A2_ON();
 80296c4:	f7ff fc58 	bl	8028f78 <LED1_A2_ON>
	LED1_B2_ON();
 80296c8:	f7ff fc76 	bl	8028fb8 <LED1_B2_ON>
	LED1_C2_OFF();
 80296cc:	f7ff fca4 	bl	8029018 <LED1_C2_OFF>
	LED1_D2_ON();
 80296d0:	f7ff fcb2 	bl	8029038 <LED1_D2_ON>
	LED1_E2_ON();
 80296d4:	f7ff fcd0 	bl	8029078 <LED1_E2_ON>
	LED1_F2_OFF();
 80296d8:	f7ff fcfe 	bl	80290d8 <LED1_F2_OFF>
	LED1_G2_ON();
 80296dc:	f7ff fd0c 	bl	80290f8 <LED1_G2_ON>
}
 80296e0:	bf00      	nop
 80296e2:	bd80      	pop	{r7, pc}

080296e4 <dig1_set_3>:

void dig1_set_3(void)
{
 80296e4:	b580      	push	{r7, lr}
 80296e6:	af00      	add	r7, sp, #0
	LED1_A2_ON();
 80296e8:	f7ff fc46 	bl	8028f78 <LED1_A2_ON>
	LED1_B2_OFF();
 80296ec:	f7ff fc74 	bl	8028fd8 <LED1_B2_OFF>
	LED1_C2_OFF();
 80296f0:	f7ff fc92 	bl	8029018 <LED1_C2_OFF>
	LED1_D2_ON();
 80296f4:	f7ff fca0 	bl	8029038 <LED1_D2_ON>
	LED1_E2_ON();
 80296f8:	f7ff fcbe 	bl	8029078 <LED1_E2_ON>
	LED1_F2_ON();
 80296fc:	f7ff fcdc 	bl	80290b8 <LED1_F2_ON>
	LED1_G2_ON();
 8029700:	f7ff fcfa 	bl	80290f8 <LED1_G2_ON>
}
 8029704:	bf00      	nop
 8029706:	bd80      	pop	{r7, pc}

08029708 <dig1_set_4>:

void dig1_set_4(void)
{
 8029708:	b580      	push	{r7, lr}
 802970a:	af00      	add	r7, sp, #0
	LED1_A2_OFF();
 802970c:	f7ff fc44 	bl	8028f98 <LED1_A2_OFF>
	LED1_B2_OFF();
 8029710:	f7ff fc62 	bl	8028fd8 <LED1_B2_OFF>
	LED1_C2_ON();
 8029714:	f7ff fc70 	bl	8028ff8 <LED1_C2_ON>
	LED1_D2_OFF();
 8029718:	f7ff fc9e 	bl	8029058 <LED1_D2_OFF>
	LED1_E2_ON();
 802971c:	f7ff fcac 	bl	8029078 <LED1_E2_ON>
	LED1_F2_ON();
 8029720:	f7ff fcca 	bl	80290b8 <LED1_F2_ON>
	LED1_G2_ON();
 8029724:	f7ff fce8 	bl	80290f8 <LED1_G2_ON>
}
 8029728:	bf00      	nop
 802972a:	bd80      	pop	{r7, pc}

0802972c <dig1_set_5>:

void dig1_set_5(void)
{
 802972c:	b580      	push	{r7, lr}
 802972e:	af00      	add	r7, sp, #0
	LED1_A2_ON();
 8029730:	f7ff fc22 	bl	8028f78 <LED1_A2_ON>
	LED1_B2_OFF();
 8029734:	f7ff fc50 	bl	8028fd8 <LED1_B2_OFF>
	LED1_C2_ON();
 8029738:	f7ff fc5e 	bl	8028ff8 <LED1_C2_ON>
	LED1_D2_ON();
 802973c:	f7ff fc7c 	bl	8029038 <LED1_D2_ON>
	LED1_E2_OFF();
 8029740:	f7ff fcaa 	bl	8029098 <LED1_E2_OFF>
	LED1_F2_ON();
 8029744:	f7ff fcb8 	bl	80290b8 <LED1_F2_ON>
	LED1_G2_ON();
 8029748:	f7ff fcd6 	bl	80290f8 <LED1_G2_ON>
}
 802974c:	bf00      	nop
 802974e:	bd80      	pop	{r7, pc}

08029750 <dig1_set_6>:

void dig1_set_6(void)
{
 8029750:	b580      	push	{r7, lr}
 8029752:	af00      	add	r7, sp, #0
	LED1_A2_ON();
 8029754:	f7ff fc10 	bl	8028f78 <LED1_A2_ON>
	LED1_B2_ON();
 8029758:	f7ff fc2e 	bl	8028fb8 <LED1_B2_ON>
	LED1_C2_ON();
 802975c:	f7ff fc4c 	bl	8028ff8 <LED1_C2_ON>
	LED1_D2_ON();
 8029760:	f7ff fc6a 	bl	8029038 <LED1_D2_ON>
	LED1_E2_OFF();
 8029764:	f7ff fc98 	bl	8029098 <LED1_E2_OFF>
	LED1_F2_ON();
 8029768:	f7ff fca6 	bl	80290b8 <LED1_F2_ON>
	LED1_G2_ON();
 802976c:	f7ff fcc4 	bl	80290f8 <LED1_G2_ON>
}
 8029770:	bf00      	nop
 8029772:	bd80      	pop	{r7, pc}

08029774 <dig1_set_7>:

void dig1_set_7(void)
{
 8029774:	b580      	push	{r7, lr}
 8029776:	af00      	add	r7, sp, #0
	LED1_A2_OFF();
 8029778:	f7ff fc0e 	bl	8028f98 <LED1_A2_OFF>
	LED1_B2_OFF();
 802977c:	f7ff fc2c 	bl	8028fd8 <LED1_B2_OFF>
	LED1_C2_OFF();
 8029780:	f7ff fc4a 	bl	8029018 <LED1_C2_OFF>
	LED1_D2_ON();
 8029784:	f7ff fc58 	bl	8029038 <LED1_D2_ON>
	LED1_E2_ON();
 8029788:	f7ff fc76 	bl	8029078 <LED1_E2_ON>
	LED1_F2_ON();
 802978c:	f7ff fc94 	bl	80290b8 <LED1_F2_ON>
	LED1_G2_OFF();
 8029790:	f7ff fcc2 	bl	8029118 <LED1_G2_OFF>
}
 8029794:	bf00      	nop
 8029796:	bd80      	pop	{r7, pc}

08029798 <dig1_set_8>:

void dig1_set_8(void)
{
 8029798:	b580      	push	{r7, lr}
 802979a:	af00      	add	r7, sp, #0
	LED1_A2_ON();
 802979c:	f7ff fbec 	bl	8028f78 <LED1_A2_ON>
	LED1_B2_ON();
 80297a0:	f7ff fc0a 	bl	8028fb8 <LED1_B2_ON>
	LED1_C2_ON();
 80297a4:	f7ff fc28 	bl	8028ff8 <LED1_C2_ON>
	LED1_D2_ON();
 80297a8:	f7ff fc46 	bl	8029038 <LED1_D2_ON>
	LED1_E2_ON();
 80297ac:	f7ff fc64 	bl	8029078 <LED1_E2_ON>
	LED1_F2_ON();
 80297b0:	f7ff fc82 	bl	80290b8 <LED1_F2_ON>
	LED1_G2_ON();
 80297b4:	f7ff fca0 	bl	80290f8 <LED1_G2_ON>
}
 80297b8:	bf00      	nop
 80297ba:	bd80      	pop	{r7, pc}

080297bc <dig1_set_9>:

void dig1_set_9(void)
{
 80297bc:	b580      	push	{r7, lr}
 80297be:	af00      	add	r7, sp, #0
	LED1_A2_ON();
 80297c0:	f7ff fbda 	bl	8028f78 <LED1_A2_ON>
	LED1_B2_OFF();
 80297c4:	f7ff fc08 	bl	8028fd8 <LED1_B2_OFF>
	LED1_C2_ON();
 80297c8:	f7ff fc16 	bl	8028ff8 <LED1_C2_ON>
	LED1_D2_ON();
 80297cc:	f7ff fc34 	bl	8029038 <LED1_D2_ON>
	LED1_E2_ON();
 80297d0:	f7ff fc52 	bl	8029078 <LED1_E2_ON>
	LED1_F2_ON();
 80297d4:	f7ff fc70 	bl	80290b8 <LED1_F2_ON>
	LED1_G2_ON();
 80297d8:	f7ff fc8e 	bl	80290f8 <LED1_G2_ON>
}
 80297dc:	bf00      	nop
 80297de:	bd80      	pop	{r7, pc}

080297e0 <dig1_set_off>:

void dig1_set_off(void)
{
 80297e0:	b580      	push	{r7, lr}
 80297e2:	af00      	add	r7, sp, #0
	LED1_A2_OFF();
 80297e4:	f7ff fbd8 	bl	8028f98 <LED1_A2_OFF>
	LED1_B2_OFF();
 80297e8:	f7ff fbf6 	bl	8028fd8 <LED1_B2_OFF>
	LED1_C2_OFF();
 80297ec:	f7ff fc14 	bl	8029018 <LED1_C2_OFF>
	LED1_D2_OFF();
 80297f0:	f7ff fc32 	bl	8029058 <LED1_D2_OFF>
	LED1_E2_OFF();
 80297f4:	f7ff fc50 	bl	8029098 <LED1_E2_OFF>
	LED1_F2_OFF();
 80297f8:	f7ff fc6e 	bl	80290d8 <LED1_F2_OFF>
	LED1_G2_OFF();
 80297fc:	f7ff fc8c 	bl	8029118 <LED1_G2_OFF>
}
 8029800:	bf00      	nop
 8029802:	bd80      	pop	{r7, pc}

08029804 <dig2_set_0>:
//-----------------------------------------------------------


//----Управление второй цифрой-----------------------------
void dig2_set_0(void)
{
 8029804:	b580      	push	{r7, lr}
 8029806:	af00      	add	r7, sp, #0
	LED1_A1_ON();
 8029808:	f7ff fc96 	bl	8029138 <LED1_A1_ON>
	LED1_B1_ON();
 802980c:	f7ff fcb4 	bl	8029178 <LED1_B1_ON>
	LED1_C1_ON();
 8029810:	f7ff fcd2 	bl	80291b8 <LED1_C1_ON>
	LED1_D1_ON();
 8029814:	f7ff fcf0 	bl	80291f8 <LED1_D1_ON>
	LED1_E1_ON();
 8029818:	f7ff fd0e 	bl	8029238 <LED1_E1_ON>
	LED1_F1_ON();
 802981c:	f7ff fd2c 	bl	8029278 <LED1_F1_ON>
	LED1_G1_OFF();
 8029820:	f7ff fd5a 	bl	80292d8 <LED1_G1_OFF>
}
 8029824:	bf00      	nop
 8029826:	bd80      	pop	{r7, pc}

08029828 <dig2_set_1>:

void dig2_set_1(void)
{
 8029828:	b580      	push	{r7, lr}
 802982a:	af00      	add	r7, sp, #0
	LED1_A1_OFF();
 802982c:	f7ff fc94 	bl	8029158 <LED1_A1_OFF>
	LED1_B1_OFF();
 8029830:	f7ff fcb2 	bl	8029198 <LED1_B1_OFF>
	LED1_C1_OFF();
 8029834:	f7ff fcd0 	bl	80291d8 <LED1_C1_OFF>
	LED1_D1_OFF();
 8029838:	f7ff fcee 	bl	8029218 <LED1_D1_OFF>
	LED1_E1_ON();
 802983c:	f7ff fcfc 	bl	8029238 <LED1_E1_ON>
	LED1_F1_ON();
 8029840:	f7ff fd1a 	bl	8029278 <LED1_F1_ON>
	LED1_G1_OFF();
 8029844:	f7ff fd48 	bl	80292d8 <LED1_G1_OFF>
}
 8029848:	bf00      	nop
 802984a:	bd80      	pop	{r7, pc}

0802984c <dig2_set_2>:

void dig2_set_2(void)
{
 802984c:	b580      	push	{r7, lr}
 802984e:	af00      	add	r7, sp, #0
	LED1_A1_ON();
 8029850:	f7ff fc72 	bl	8029138 <LED1_A1_ON>
	LED1_B1_ON();
 8029854:	f7ff fc90 	bl	8029178 <LED1_B1_ON>
	LED1_C1_OFF();
 8029858:	f7ff fcbe 	bl	80291d8 <LED1_C1_OFF>
	LED1_D1_ON();
 802985c:	f7ff fccc 	bl	80291f8 <LED1_D1_ON>
	LED1_E1_ON();
 8029860:	f7ff fcea 	bl	8029238 <LED1_E1_ON>
	LED1_F1_OFF();
 8029864:	f7ff fd18 	bl	8029298 <LED1_F1_OFF>
	LED1_G1_ON();
 8029868:	f7ff fd26 	bl	80292b8 <LED1_G1_ON>
}
 802986c:	bf00      	nop
 802986e:	bd80      	pop	{r7, pc}

08029870 <dig2_set_3>:

void dig2_set_3(void)
{
 8029870:	b580      	push	{r7, lr}
 8029872:	af00      	add	r7, sp, #0
	LED1_A1_ON();
 8029874:	f7ff fc60 	bl	8029138 <LED1_A1_ON>
	LED1_B1_OFF();
 8029878:	f7ff fc8e 	bl	8029198 <LED1_B1_OFF>
	LED1_C1_OFF();
 802987c:	f7ff fcac 	bl	80291d8 <LED1_C1_OFF>
	LED1_D1_ON();
 8029880:	f7ff fcba 	bl	80291f8 <LED1_D1_ON>
	LED1_E1_ON();
 8029884:	f7ff fcd8 	bl	8029238 <LED1_E1_ON>
	LED1_F1_ON();
 8029888:	f7ff fcf6 	bl	8029278 <LED1_F1_ON>
	LED1_G1_ON();
 802988c:	f7ff fd14 	bl	80292b8 <LED1_G1_ON>
}
 8029890:	bf00      	nop
 8029892:	bd80      	pop	{r7, pc}

08029894 <dig2_set_4>:

void dig2_set_4(void)
{
 8029894:	b580      	push	{r7, lr}
 8029896:	af00      	add	r7, sp, #0
	LED1_A1_OFF();
 8029898:	f7ff fc5e 	bl	8029158 <LED1_A1_OFF>
	LED1_B1_OFF();
 802989c:	f7ff fc7c 	bl	8029198 <LED1_B1_OFF>
	LED1_C1_ON();
 80298a0:	f7ff fc8a 	bl	80291b8 <LED1_C1_ON>
	LED1_D1_OFF();
 80298a4:	f7ff fcb8 	bl	8029218 <LED1_D1_OFF>
	LED1_E1_ON();
 80298a8:	f7ff fcc6 	bl	8029238 <LED1_E1_ON>
	LED1_F1_ON();
 80298ac:	f7ff fce4 	bl	8029278 <LED1_F1_ON>
	LED1_G1_ON();
 80298b0:	f7ff fd02 	bl	80292b8 <LED1_G1_ON>
}
 80298b4:	bf00      	nop
 80298b6:	bd80      	pop	{r7, pc}

080298b8 <dig2_set_5>:

void dig2_set_5(void)
{
 80298b8:	b580      	push	{r7, lr}
 80298ba:	af00      	add	r7, sp, #0
	LED1_A1_ON();
 80298bc:	f7ff fc3c 	bl	8029138 <LED1_A1_ON>
	LED1_B1_OFF();
 80298c0:	f7ff fc6a 	bl	8029198 <LED1_B1_OFF>
	LED1_C1_ON();
 80298c4:	f7ff fc78 	bl	80291b8 <LED1_C1_ON>
	LED1_D1_ON();
 80298c8:	f7ff fc96 	bl	80291f8 <LED1_D1_ON>
	LED1_E1_OFF();
 80298cc:	f7ff fcc4 	bl	8029258 <LED1_E1_OFF>
	LED1_F1_ON();
 80298d0:	f7ff fcd2 	bl	8029278 <LED1_F1_ON>
	LED1_G1_ON();
 80298d4:	f7ff fcf0 	bl	80292b8 <LED1_G1_ON>
}
 80298d8:	bf00      	nop
 80298da:	bd80      	pop	{r7, pc}

080298dc <dig2_set_6>:

void dig2_set_6(void)
{
 80298dc:	b580      	push	{r7, lr}
 80298de:	af00      	add	r7, sp, #0
	LED1_A1_ON();
 80298e0:	f7ff fc2a 	bl	8029138 <LED1_A1_ON>
	LED1_B1_ON();
 80298e4:	f7ff fc48 	bl	8029178 <LED1_B1_ON>
	LED1_C1_ON();
 80298e8:	f7ff fc66 	bl	80291b8 <LED1_C1_ON>
	LED1_D1_ON();
 80298ec:	f7ff fc84 	bl	80291f8 <LED1_D1_ON>
	LED1_E1_OFF();
 80298f0:	f7ff fcb2 	bl	8029258 <LED1_E1_OFF>
	LED1_F1_ON();
 80298f4:	f7ff fcc0 	bl	8029278 <LED1_F1_ON>
	LED1_G1_ON();
 80298f8:	f7ff fcde 	bl	80292b8 <LED1_G1_ON>
}
 80298fc:	bf00      	nop
 80298fe:	bd80      	pop	{r7, pc}

08029900 <dig2_set_7>:

void dig2_set_7(void)
{
 8029900:	b580      	push	{r7, lr}
 8029902:	af00      	add	r7, sp, #0
	LED1_A1_OFF();
 8029904:	f7ff fc28 	bl	8029158 <LED1_A1_OFF>
	LED1_B1_OFF();
 8029908:	f7ff fc46 	bl	8029198 <LED1_B1_OFF>
	LED1_C1_OFF();
 802990c:	f7ff fc64 	bl	80291d8 <LED1_C1_OFF>
	LED1_D1_ON();
 8029910:	f7ff fc72 	bl	80291f8 <LED1_D1_ON>
	LED1_E1_ON();
 8029914:	f7ff fc90 	bl	8029238 <LED1_E1_ON>
	LED1_F1_ON();
 8029918:	f7ff fcae 	bl	8029278 <LED1_F1_ON>
	LED1_G1_OFF();
 802991c:	f7ff fcdc 	bl	80292d8 <LED1_G1_OFF>
}
 8029920:	bf00      	nop
 8029922:	bd80      	pop	{r7, pc}

08029924 <dig2_set_8>:

void dig2_set_8(void)
{
 8029924:	b580      	push	{r7, lr}
 8029926:	af00      	add	r7, sp, #0
	LED1_A1_ON();
 8029928:	f7ff fc06 	bl	8029138 <LED1_A1_ON>
	LED1_B1_ON();
 802992c:	f7ff fc24 	bl	8029178 <LED1_B1_ON>
	LED1_C1_ON();
 8029930:	f7ff fc42 	bl	80291b8 <LED1_C1_ON>
	LED1_D1_ON();
 8029934:	f7ff fc60 	bl	80291f8 <LED1_D1_ON>
	LED1_E1_ON();
 8029938:	f7ff fc7e 	bl	8029238 <LED1_E1_ON>
	LED1_F1_ON();
 802993c:	f7ff fc9c 	bl	8029278 <LED1_F1_ON>
	LED1_G1_ON();
 8029940:	f7ff fcba 	bl	80292b8 <LED1_G1_ON>
}
 8029944:	bf00      	nop
 8029946:	bd80      	pop	{r7, pc}

08029948 <dig2_set_9>:

void dig2_set_9(void)
{
 8029948:	b580      	push	{r7, lr}
 802994a:	af00      	add	r7, sp, #0
	LED1_A1_ON();
 802994c:	f7ff fbf4 	bl	8029138 <LED1_A1_ON>
	LED1_B1_OFF();
 8029950:	f7ff fc22 	bl	8029198 <LED1_B1_OFF>
	LED1_C1_ON();
 8029954:	f7ff fc30 	bl	80291b8 <LED1_C1_ON>
	LED1_D1_ON();
 8029958:	f7ff fc4e 	bl	80291f8 <LED1_D1_ON>
	LED1_E1_ON();
 802995c:	f7ff fc6c 	bl	8029238 <LED1_E1_ON>
	LED1_F1_ON();
 8029960:	f7ff fc8a 	bl	8029278 <LED1_F1_ON>
	LED1_G1_ON();
 8029964:	f7ff fca8 	bl	80292b8 <LED1_G1_ON>
}
 8029968:	bf00      	nop
 802996a:	bd80      	pop	{r7, pc}

0802996c <dig3_set_0>:
}
//-----------------------------------------------------------

//----Управление третьей цифрой-----------------------------
void dig3_set_0(void)
{
 802996c:	b580      	push	{r7, lr}
 802996e:	af00      	add	r7, sp, #0
	LED2_A2_ON();
 8029970:	f7ff fcc2 	bl	80292f8 <LED2_A2_ON>
	LED2_B2_ON();
 8029974:	f7ff fce0 	bl	8029338 <LED2_B2_ON>
	LED2_C2_ON();
 8029978:	f7ff fcfe 	bl	8029378 <LED2_C2_ON>
	LED2_D2_ON();
 802997c:	f7ff fd1c 	bl	80293b8 <LED2_D2_ON>
	LED2_E2_ON();
 8029980:	f7ff fd3a 	bl	80293f8 <LED2_E2_ON>
	LED2_F2_ON();
 8029984:	f7ff fd58 	bl	8029438 <LED2_F2_ON>
	LED2_G2_OFF();
 8029988:	f7ff fd86 	bl	8029498 <LED2_G2_OFF>
}
 802998c:	bf00      	nop
 802998e:	bd80      	pop	{r7, pc}

08029990 <dig3_set_1>:

void dig3_set_1(void)
{
 8029990:	b580      	push	{r7, lr}
 8029992:	af00      	add	r7, sp, #0
	LED2_A2_OFF();
 8029994:	f7ff fcc0 	bl	8029318 <LED2_A2_OFF>
	LED2_B2_OFF();
 8029998:	f7ff fcde 	bl	8029358 <LED2_B2_OFF>
	LED2_C2_OFF();
 802999c:	f7ff fcfc 	bl	8029398 <LED2_C2_OFF>
	LED2_D2_OFF();
 80299a0:	f7ff fd1a 	bl	80293d8 <LED2_D2_OFF>
	LED2_E2_ON();
 80299a4:	f7ff fd28 	bl	80293f8 <LED2_E2_ON>
	LED2_F2_ON();
 80299a8:	f7ff fd46 	bl	8029438 <LED2_F2_ON>
	LED2_G2_OFF();
 80299ac:	f7ff fd74 	bl	8029498 <LED2_G2_OFF>
}
 80299b0:	bf00      	nop
 80299b2:	bd80      	pop	{r7, pc}

080299b4 <dig3_set_2>:

void dig3_set_2(void)
{
 80299b4:	b580      	push	{r7, lr}
 80299b6:	af00      	add	r7, sp, #0
	LED2_A2_ON();
 80299b8:	f7ff fc9e 	bl	80292f8 <LED2_A2_ON>
	LED2_B2_ON();
 80299bc:	f7ff fcbc 	bl	8029338 <LED2_B2_ON>
	LED2_C2_OFF();
 80299c0:	f7ff fcea 	bl	8029398 <LED2_C2_OFF>
	LED2_D2_ON();
 80299c4:	f7ff fcf8 	bl	80293b8 <LED2_D2_ON>
	LED2_E2_ON();
 80299c8:	f7ff fd16 	bl	80293f8 <LED2_E2_ON>
	LED2_F2_OFF();
 80299cc:	f7ff fd44 	bl	8029458 <LED2_F2_OFF>
	LED2_G2_ON();
 80299d0:	f7ff fd52 	bl	8029478 <LED2_G2_ON>
}
 80299d4:	bf00      	nop
 80299d6:	bd80      	pop	{r7, pc}

080299d8 <dig3_set_3>:

void dig3_set_3(void)
{
 80299d8:	b580      	push	{r7, lr}
 80299da:	af00      	add	r7, sp, #0
	LED2_A2_ON();
 80299dc:	f7ff fc8c 	bl	80292f8 <LED2_A2_ON>
	LED2_B2_OFF();
 80299e0:	f7ff fcba 	bl	8029358 <LED2_B2_OFF>
	LED2_C2_OFF();
 80299e4:	f7ff fcd8 	bl	8029398 <LED2_C2_OFF>
	LED2_D2_ON();
 80299e8:	f7ff fce6 	bl	80293b8 <LED2_D2_ON>
	LED2_E2_ON();
 80299ec:	f7ff fd04 	bl	80293f8 <LED2_E2_ON>
	LED2_F2_ON();
 80299f0:	f7ff fd22 	bl	8029438 <LED2_F2_ON>
	LED2_G2_ON();
 80299f4:	f7ff fd40 	bl	8029478 <LED2_G2_ON>
}
 80299f8:	bf00      	nop
 80299fa:	bd80      	pop	{r7, pc}

080299fc <dig3_set_4>:

void dig3_set_4(void)
{
 80299fc:	b580      	push	{r7, lr}
 80299fe:	af00      	add	r7, sp, #0
	LED2_A2_OFF();
 8029a00:	f7ff fc8a 	bl	8029318 <LED2_A2_OFF>
	LED2_B2_OFF();
 8029a04:	f7ff fca8 	bl	8029358 <LED2_B2_OFF>
	LED2_C2_ON();
 8029a08:	f7ff fcb6 	bl	8029378 <LED2_C2_ON>
	LED2_D2_OFF();
 8029a0c:	f7ff fce4 	bl	80293d8 <LED2_D2_OFF>
	LED2_E2_ON();
 8029a10:	f7ff fcf2 	bl	80293f8 <LED2_E2_ON>
	LED2_F2_ON();
 8029a14:	f7ff fd10 	bl	8029438 <LED2_F2_ON>
	LED2_G2_ON();
 8029a18:	f7ff fd2e 	bl	8029478 <LED2_G2_ON>
}
 8029a1c:	bf00      	nop
 8029a1e:	bd80      	pop	{r7, pc}

08029a20 <dig3_set_5>:

void dig3_set_5(void)
{
 8029a20:	b580      	push	{r7, lr}
 8029a22:	af00      	add	r7, sp, #0
	LED2_A2_ON();
 8029a24:	f7ff fc68 	bl	80292f8 <LED2_A2_ON>
	LED2_B2_OFF();
 8029a28:	f7ff fc96 	bl	8029358 <LED2_B2_OFF>
	LED2_C2_ON();
 8029a2c:	f7ff fca4 	bl	8029378 <LED2_C2_ON>
	LED2_D2_ON();
 8029a30:	f7ff fcc2 	bl	80293b8 <LED2_D2_ON>
	LED2_E2_OFF();
 8029a34:	f7ff fcf0 	bl	8029418 <LED2_E2_OFF>
	LED2_F2_ON();
 8029a38:	f7ff fcfe 	bl	8029438 <LED2_F2_ON>
	LED2_G2_ON();
 8029a3c:	f7ff fd1c 	bl	8029478 <LED2_G2_ON>
}
 8029a40:	bf00      	nop
 8029a42:	bd80      	pop	{r7, pc}

08029a44 <dig3_set_6>:

void dig3_set_6(void)
{
 8029a44:	b580      	push	{r7, lr}
 8029a46:	af00      	add	r7, sp, #0
	LED2_A2_ON();
 8029a48:	f7ff fc56 	bl	80292f8 <LED2_A2_ON>
	LED2_B2_ON();
 8029a4c:	f7ff fc74 	bl	8029338 <LED2_B2_ON>
	LED2_C2_ON();
 8029a50:	f7ff fc92 	bl	8029378 <LED2_C2_ON>
	LED2_D2_ON();
 8029a54:	f7ff fcb0 	bl	80293b8 <LED2_D2_ON>
	LED2_E2_OFF();
 8029a58:	f7ff fcde 	bl	8029418 <LED2_E2_OFF>
	LED2_F2_ON();
 8029a5c:	f7ff fcec 	bl	8029438 <LED2_F2_ON>
	LED2_G2_ON();
 8029a60:	f7ff fd0a 	bl	8029478 <LED2_G2_ON>
}
 8029a64:	bf00      	nop
 8029a66:	bd80      	pop	{r7, pc}

08029a68 <dig3_set_7>:

void dig3_set_7(void)
{
 8029a68:	b580      	push	{r7, lr}
 8029a6a:	af00      	add	r7, sp, #0
	LED2_A2_OFF();
 8029a6c:	f7ff fc54 	bl	8029318 <LED2_A2_OFF>
	LED2_B2_OFF();
 8029a70:	f7ff fc72 	bl	8029358 <LED2_B2_OFF>
	LED2_C2_OFF();
 8029a74:	f7ff fc90 	bl	8029398 <LED2_C2_OFF>
	LED2_D2_ON();
 8029a78:	f7ff fc9e 	bl	80293b8 <LED2_D2_ON>
	LED2_E2_ON();
 8029a7c:	f7ff fcbc 	bl	80293f8 <LED2_E2_ON>
	LED2_F2_ON();
 8029a80:	f7ff fcda 	bl	8029438 <LED2_F2_ON>
	LED2_G2_OFF();
 8029a84:	f7ff fd08 	bl	8029498 <LED2_G2_OFF>
}
 8029a88:	bf00      	nop
 8029a8a:	bd80      	pop	{r7, pc}

08029a8c <dig3_set_8>:

void dig3_set_8(void)
{
 8029a8c:	b580      	push	{r7, lr}
 8029a8e:	af00      	add	r7, sp, #0
	LED2_A2_ON();
 8029a90:	f7ff fc32 	bl	80292f8 <LED2_A2_ON>
	LED2_B2_ON();
 8029a94:	f7ff fc50 	bl	8029338 <LED2_B2_ON>
	LED2_C2_ON();
 8029a98:	f7ff fc6e 	bl	8029378 <LED2_C2_ON>
	LED2_D2_ON();
 8029a9c:	f7ff fc8c 	bl	80293b8 <LED2_D2_ON>
	LED2_E2_ON();
 8029aa0:	f7ff fcaa 	bl	80293f8 <LED2_E2_ON>
	LED2_F2_ON();
 8029aa4:	f7ff fcc8 	bl	8029438 <LED2_F2_ON>
	LED2_G2_ON();
 8029aa8:	f7ff fce6 	bl	8029478 <LED2_G2_ON>
}
 8029aac:	bf00      	nop
 8029aae:	bd80      	pop	{r7, pc}

08029ab0 <dig3_set_9>:

void dig3_set_9(void)
{
 8029ab0:	b580      	push	{r7, lr}
 8029ab2:	af00      	add	r7, sp, #0
	LED2_A2_ON();
 8029ab4:	f7ff fc20 	bl	80292f8 <LED2_A2_ON>
	LED2_B2_OFF();
 8029ab8:	f7ff fc4e 	bl	8029358 <LED2_B2_OFF>
	LED2_C2_ON();
 8029abc:	f7ff fc5c 	bl	8029378 <LED2_C2_ON>
	LED2_D2_ON();
 8029ac0:	f7ff fc7a 	bl	80293b8 <LED2_D2_ON>
	LED2_E2_ON();
 8029ac4:	f7ff fc98 	bl	80293f8 <LED2_E2_ON>
	LED2_F2_ON();
 8029ac8:	f7ff fcb6 	bl	8029438 <LED2_F2_ON>
	LED2_G2_ON();
 8029acc:	f7ff fcd4 	bl	8029478 <LED2_G2_ON>
}
 8029ad0:	bf00      	nop
 8029ad2:	bd80      	pop	{r7, pc}

08029ad4 <dig4_set_0>:
}
//-----------------------------------------------------------

//----Управление четвертой цифрой-----------------------------
void dig4_set_0(void)
{
 8029ad4:	b580      	push	{r7, lr}
 8029ad6:	af00      	add	r7, sp, #0
	LED2_A1_ON();
 8029ad8:	f7ff fcee 	bl	80294b8 <LED2_A1_ON>
	LED2_B1_ON();
 8029adc:	f7ff fd0c 	bl	80294f8 <LED2_B1_ON>
	LED2_C1_ON();
 8029ae0:	f7ff fd2a 	bl	8029538 <LED2_C1_ON>
	LED2_D1_ON();
 8029ae4:	f7ff fd48 	bl	8029578 <LED2_D1_ON>
	LED2_E1_ON();
 8029ae8:	f7ff fd66 	bl	80295b8 <LED2_E1_ON>
	LED2_F1_ON();
 8029aec:	f7ff fd84 	bl	80295f8 <LED2_F1_ON>
	LED2_G1_OFF();
 8029af0:	f7ff fdb2 	bl	8029658 <LED2_G1_OFF>
}
 8029af4:	bf00      	nop
 8029af6:	bd80      	pop	{r7, pc}

08029af8 <dig4_set_1>:

void dig4_set_1(void)
{
 8029af8:	b580      	push	{r7, lr}
 8029afa:	af00      	add	r7, sp, #0
	LED2_A1_OFF();
 8029afc:	f7ff fcec 	bl	80294d8 <LED2_A1_OFF>
	LED2_B1_OFF();
 8029b00:	f7ff fd0a 	bl	8029518 <LED2_B1_OFF>
	LED2_C1_OFF();
 8029b04:	f7ff fd28 	bl	8029558 <LED2_C1_OFF>
	LED2_D1_OFF();
 8029b08:	f7ff fd46 	bl	8029598 <LED2_D1_OFF>
	LED2_E1_ON();
 8029b0c:	f7ff fd54 	bl	80295b8 <LED2_E1_ON>
	LED2_F1_ON();
 8029b10:	f7ff fd72 	bl	80295f8 <LED2_F1_ON>
	LED2_G1_OFF();
 8029b14:	f7ff fda0 	bl	8029658 <LED2_G1_OFF>
}
 8029b18:	bf00      	nop
 8029b1a:	bd80      	pop	{r7, pc}

08029b1c <dig4_set_2>:

void dig4_set_2(void)
{
 8029b1c:	b580      	push	{r7, lr}
 8029b1e:	af00      	add	r7, sp, #0
	LED2_A1_ON();
 8029b20:	f7ff fcca 	bl	80294b8 <LED2_A1_ON>
	LED2_B1_ON();
 8029b24:	f7ff fce8 	bl	80294f8 <LED2_B1_ON>
	LED2_C1_OFF();
 8029b28:	f7ff fd16 	bl	8029558 <LED2_C1_OFF>
	LED2_D1_ON();
 8029b2c:	f7ff fd24 	bl	8029578 <LED2_D1_ON>
	LED2_E1_ON();
 8029b30:	f7ff fd42 	bl	80295b8 <LED2_E1_ON>
	LED2_F1_OFF();
 8029b34:	f7ff fd70 	bl	8029618 <LED2_F1_OFF>
	LED2_G1_ON();
 8029b38:	f7ff fd7e 	bl	8029638 <LED2_G1_ON>
}
 8029b3c:	bf00      	nop
 8029b3e:	bd80      	pop	{r7, pc}

08029b40 <dig4_set_3>:

void dig4_set_3(void)
{
 8029b40:	b580      	push	{r7, lr}
 8029b42:	af00      	add	r7, sp, #0
	LED2_A1_ON();
 8029b44:	f7ff fcb8 	bl	80294b8 <LED2_A1_ON>
	LED2_B1_OFF();
 8029b48:	f7ff fce6 	bl	8029518 <LED2_B1_OFF>
	LED2_C1_OFF();
 8029b4c:	f7ff fd04 	bl	8029558 <LED2_C1_OFF>
	LED2_D1_ON();
 8029b50:	f7ff fd12 	bl	8029578 <LED2_D1_ON>
	LED2_E1_ON();
 8029b54:	f7ff fd30 	bl	80295b8 <LED2_E1_ON>
	LED2_F1_ON();
 8029b58:	f7ff fd4e 	bl	80295f8 <LED2_F1_ON>
	LED2_G1_ON();
 8029b5c:	f7ff fd6c 	bl	8029638 <LED2_G1_ON>
}
 8029b60:	bf00      	nop
 8029b62:	bd80      	pop	{r7, pc}

08029b64 <dig4_set_4>:

void dig4_set_4(void)
{
 8029b64:	b580      	push	{r7, lr}
 8029b66:	af00      	add	r7, sp, #0
	LED2_A1_OFF();
 8029b68:	f7ff fcb6 	bl	80294d8 <LED2_A1_OFF>
	LED2_B1_OFF();
 8029b6c:	f7ff fcd4 	bl	8029518 <LED2_B1_OFF>
	LED2_C1_ON();
 8029b70:	f7ff fce2 	bl	8029538 <LED2_C1_ON>
	LED2_D1_OFF();
 8029b74:	f7ff fd10 	bl	8029598 <LED2_D1_OFF>
	LED2_E1_ON();
 8029b78:	f7ff fd1e 	bl	80295b8 <LED2_E1_ON>
	LED2_F1_ON();
 8029b7c:	f7ff fd3c 	bl	80295f8 <LED2_F1_ON>
	LED2_G1_ON();
 8029b80:	f7ff fd5a 	bl	8029638 <LED2_G1_ON>
}
 8029b84:	bf00      	nop
 8029b86:	bd80      	pop	{r7, pc}

08029b88 <dig4_set_5>:

void dig4_set_5(void)
{
 8029b88:	b580      	push	{r7, lr}
 8029b8a:	af00      	add	r7, sp, #0
	LED2_A1_ON();
 8029b8c:	f7ff fc94 	bl	80294b8 <LED2_A1_ON>
	LED2_B1_OFF();
 8029b90:	f7ff fcc2 	bl	8029518 <LED2_B1_OFF>
	LED2_C1_ON();
 8029b94:	f7ff fcd0 	bl	8029538 <LED2_C1_ON>
	LED2_D1_ON();
 8029b98:	f7ff fcee 	bl	8029578 <LED2_D1_ON>
	LED2_E1_OFF();
 8029b9c:	f7ff fd1c 	bl	80295d8 <LED2_E1_OFF>
	LED2_F1_ON();
 8029ba0:	f7ff fd2a 	bl	80295f8 <LED2_F1_ON>
	LED2_G1_ON();
 8029ba4:	f7ff fd48 	bl	8029638 <LED2_G1_ON>
}
 8029ba8:	bf00      	nop
 8029baa:	bd80      	pop	{r7, pc}

08029bac <dig4_set_6>:

void dig4_set_6(void)
{
 8029bac:	b580      	push	{r7, lr}
 8029bae:	af00      	add	r7, sp, #0
	LED2_A1_ON();
 8029bb0:	f7ff fc82 	bl	80294b8 <LED2_A1_ON>
	LED2_B1_ON();
 8029bb4:	f7ff fca0 	bl	80294f8 <LED2_B1_ON>
	LED2_C1_ON();
 8029bb8:	f7ff fcbe 	bl	8029538 <LED2_C1_ON>
	LED2_D1_ON();
 8029bbc:	f7ff fcdc 	bl	8029578 <LED2_D1_ON>
	LED2_E1_OFF();
 8029bc0:	f7ff fd0a 	bl	80295d8 <LED2_E1_OFF>
	LED2_F1_ON();
 8029bc4:	f7ff fd18 	bl	80295f8 <LED2_F1_ON>
	LED2_G1_ON();
 8029bc8:	f7ff fd36 	bl	8029638 <LED2_G1_ON>
}
 8029bcc:	bf00      	nop
 8029bce:	bd80      	pop	{r7, pc}

08029bd0 <dig4_set_7>:

void dig4_set_7(void)
{
 8029bd0:	b580      	push	{r7, lr}
 8029bd2:	af00      	add	r7, sp, #0
	LED2_A1_OFF();
 8029bd4:	f7ff fc80 	bl	80294d8 <LED2_A1_OFF>
	LED2_B1_OFF();
 8029bd8:	f7ff fc9e 	bl	8029518 <LED2_B1_OFF>
	LED2_C1_OFF();
 8029bdc:	f7ff fcbc 	bl	8029558 <LED2_C1_OFF>
	LED2_D1_ON();
 8029be0:	f7ff fcca 	bl	8029578 <LED2_D1_ON>
	LED2_E1_ON();
 8029be4:	f7ff fce8 	bl	80295b8 <LED2_E1_ON>
	LED2_F1_ON();
 8029be8:	f7ff fd06 	bl	80295f8 <LED2_F1_ON>
	LED2_G1_OFF();
 8029bec:	f7ff fd34 	bl	8029658 <LED2_G1_OFF>
}
 8029bf0:	bf00      	nop
 8029bf2:	bd80      	pop	{r7, pc}

08029bf4 <dig4_set_8>:

void dig4_set_8(void)
{
 8029bf4:	b580      	push	{r7, lr}
 8029bf6:	af00      	add	r7, sp, #0
	LED2_A1_ON();
 8029bf8:	f7ff fc5e 	bl	80294b8 <LED2_A1_ON>
	LED2_B1_ON();
 8029bfc:	f7ff fc7c 	bl	80294f8 <LED2_B1_ON>
	LED2_C1_ON();
 8029c00:	f7ff fc9a 	bl	8029538 <LED2_C1_ON>
	LED2_D1_ON();
 8029c04:	f7ff fcb8 	bl	8029578 <LED2_D1_ON>
	LED2_E1_ON();
 8029c08:	f7ff fcd6 	bl	80295b8 <LED2_E1_ON>
	LED2_F1_ON();
 8029c0c:	f7ff fcf4 	bl	80295f8 <LED2_F1_ON>
	LED2_G1_ON();
 8029c10:	f7ff fd12 	bl	8029638 <LED2_G1_ON>
}
 8029c14:	bf00      	nop
 8029c16:	bd80      	pop	{r7, pc}

08029c18 <dig4_set_9>:

void dig4_set_9(void)
{
 8029c18:	b580      	push	{r7, lr}
 8029c1a:	af00      	add	r7, sp, #0
	LED2_A1_ON();
 8029c1c:	f7ff fc4c 	bl	80294b8 <LED2_A1_ON>
	LED2_B1_OFF();
 8029c20:	f7ff fc7a 	bl	8029518 <LED2_B1_OFF>
	LED2_C1_ON();
 8029c24:	f7ff fc88 	bl	8029538 <LED2_C1_ON>
	LED2_D1_ON();
 8029c28:	f7ff fca6 	bl	8029578 <LED2_D1_ON>
	LED2_E1_ON();
 8029c2c:	f7ff fcc4 	bl	80295b8 <LED2_E1_ON>
	LED2_F1_ON();
 8029c30:	f7ff fce2 	bl	80295f8 <LED2_F1_ON>
	LED2_G1_ON();
 8029c34:	f7ff fd00 	bl	8029638 <LED2_G1_ON>
}
 8029c38:	bf00      	nop
 8029c3a:	bd80      	pop	{r7, pc}

08029c3c <dig1_set_y>:
	LED1_F2_OFF();
	LED1_G2_OFF();
}

void dig1_set_y(void)
{
 8029c3c:	b580      	push	{r7, lr}
 8029c3e:	af00      	add	r7, sp, #0
	LED1_A2_ON();
 8029c40:	f7ff f99a 	bl	8028f78 <LED1_A2_ON>
	LED1_B2_OFF();
 8029c44:	f7ff f9c8 	bl	8028fd8 <LED1_B2_OFF>
	LED1_C2_ON();
 8029c48:	f7ff f9d6 	bl	8028ff8 <LED1_C2_ON>
	LED1_D2_OFF();
 8029c4c:	f7ff fa04 	bl	8029058 <LED1_D2_OFF>
	LED1_E2_ON();
 8029c50:	f7ff fa12 	bl	8029078 <LED1_E2_ON>
	LED1_F2_ON();
 8029c54:	f7ff fa30 	bl	80290b8 <LED1_F2_ON>
	LED1_G2_ON();
 8029c58:	f7ff fa4e 	bl	80290f8 <LED1_G2_ON>
}
 8029c5c:	bf00      	nop
 8029c5e:	bd80      	pop	{r7, pc}

08029c60 <dig1_set_a>:

void dig1_set_a(void)
{
 8029c60:	b580      	push	{r7, lr}
 8029c62:	af00      	add	r7, sp, #0
	LED1_A2_OFF();
 8029c64:	f7ff f998 	bl	8028f98 <LED1_A2_OFF>
	LED1_B2_ON();
 8029c68:	f7ff f9a6 	bl	8028fb8 <LED1_B2_ON>
	LED1_C2_ON();
 8029c6c:	f7ff f9c4 	bl	8028ff8 <LED1_C2_ON>
	LED1_D2_ON();
 8029c70:	f7ff f9e2 	bl	8029038 <LED1_D2_ON>
	LED1_E2_ON();
 8029c74:	f7ff fa00 	bl	8029078 <LED1_E2_ON>
	LED1_F2_ON();
 8029c78:	f7ff fa1e 	bl	80290b8 <LED1_F2_ON>
	LED1_G2_ON();
 8029c7c:	f7ff fa3c 	bl	80290f8 <LED1_G2_ON>
}
 8029c80:	bf00      	nop
 8029c82:	bd80      	pop	{r7, pc}

08029c84 <dig1_set_p>:

void dig1_set_p(void)
{
 8029c84:	b580      	push	{r7, lr}
 8029c86:	af00      	add	r7, sp, #0
	LED1_A2_OFF();
 8029c88:	f7ff f986 	bl	8028f98 <LED1_A2_OFF>
	LED1_B2_ON();
 8029c8c:	f7ff f994 	bl	8028fb8 <LED1_B2_ON>
	LED1_C2_ON();
 8029c90:	f7ff f9b2 	bl	8028ff8 <LED1_C2_ON>
	LED1_D2_ON();
 8029c94:	f7ff f9d0 	bl	8029038 <LED1_D2_ON>
	LED1_E2_ON();
 8029c98:	f7ff f9ee 	bl	8029078 <LED1_E2_ON>
	LED1_F2_OFF();
 8029c9c:	f7ff fa1c 	bl	80290d8 <LED1_F2_OFF>
	LED1_G2_ON();
 8029ca0:	f7ff fa2a 	bl	80290f8 <LED1_G2_ON>
}
 8029ca4:	bf00      	nop
 8029ca6:	bd80      	pop	{r7, pc}

08029ca8 <dig1_set_dash>:

void dig1_set_dash(void)
{
 8029ca8:	b580      	push	{r7, lr}
 8029caa:	af00      	add	r7, sp, #0
	LED1_A2_OFF();
 8029cac:	f7ff f974 	bl	8028f98 <LED1_A2_OFF>
	LED1_B2_OFF();
 8029cb0:	f7ff f992 	bl	8028fd8 <LED1_B2_OFF>
	LED1_C2_OFF();
 8029cb4:	f7ff f9b0 	bl	8029018 <LED1_C2_OFF>
	LED1_D2_OFF();
 8029cb8:	f7ff f9ce 	bl	8029058 <LED1_D2_OFF>
	LED1_E2_OFF();
 8029cbc:	f7ff f9ec 	bl	8029098 <LED1_E2_OFF>
	LED1_F2_OFF();
 8029cc0:	f7ff fa0a 	bl	80290d8 <LED1_F2_OFF>
	LED1_G2_ON();
 8029cc4:	f7ff fa18 	bl	80290f8 <LED1_G2_ON>
}
 8029cc8:	bf00      	nop
 8029cca:	bd80      	pop	{r7, pc}

08029ccc <dig1_set_b>:

void dig1_set_b(void)
{
 8029ccc:	b580      	push	{r7, lr}
 8029cce:	af00      	add	r7, sp, #0
	LED1_A2_ON();
 8029cd0:	f7ff f952 	bl	8028f78 <LED1_A2_ON>
	LED1_B2_ON();
 8029cd4:	f7ff f970 	bl	8028fb8 <LED1_B2_ON>
	LED1_C2_ON();
 8029cd8:	f7ff f98e 	bl	8028ff8 <LED1_C2_ON>
	LED1_D2_OFF();
 8029cdc:	f7ff f9bc 	bl	8029058 <LED1_D2_OFF>
	LED1_E2_OFF();
 8029ce0:	f7ff f9da 	bl	8029098 <LED1_E2_OFF>
	LED1_F2_ON();
 8029ce4:	f7ff f9e8 	bl	80290b8 <LED1_F2_ON>
	LED1_G2_ON();
 8029ce8:	f7ff fa06 	bl	80290f8 <LED1_G2_ON>
}
 8029cec:	bf00      	nop
 8029cee:	bd80      	pop	{r7, pc}

08029cf0 <dig1_set>:



void dig1_set(uint8_t number) // установка 3 цифры
{
 8029cf0:	b580      	push	{r7, lr}
 8029cf2:	b082      	sub	sp, #8
 8029cf4:	af00      	add	r7, sp, #0
 8029cf6:	4603      	mov	r3, r0
 8029cf8:	71fb      	strb	r3, [r7, #7]
	if(number == 0)
 8029cfa:	79fb      	ldrb	r3, [r7, #7]
 8029cfc:	2b00      	cmp	r3, #0
 8029cfe:	d102      	bne.n	8029d06 <dig1_set+0x16>
	{
		dig1_set_0();
 8029d00:	f7ff fcba 	bl	8029678 <dig1_set_0>
	}
	else if(number == 9)
	{
		dig1_set_9();
	}
}
 8029d04:	e034      	b.n	8029d70 <dig1_set+0x80>
	else if(number == 1)
 8029d06:	79fb      	ldrb	r3, [r7, #7]
 8029d08:	2b01      	cmp	r3, #1
 8029d0a:	d102      	bne.n	8029d12 <dig1_set+0x22>
		dig1_set_1();
 8029d0c:	f7ff fcc6 	bl	802969c <dig1_set_1>
}
 8029d10:	e02e      	b.n	8029d70 <dig1_set+0x80>
	else if(number == 2)
 8029d12:	79fb      	ldrb	r3, [r7, #7]
 8029d14:	2b02      	cmp	r3, #2
 8029d16:	d102      	bne.n	8029d1e <dig1_set+0x2e>
		dig1_set_2();
 8029d18:	f7ff fcd2 	bl	80296c0 <dig1_set_2>
}
 8029d1c:	e028      	b.n	8029d70 <dig1_set+0x80>
	else if(number == 3)
 8029d1e:	79fb      	ldrb	r3, [r7, #7]
 8029d20:	2b03      	cmp	r3, #3
 8029d22:	d102      	bne.n	8029d2a <dig1_set+0x3a>
		dig1_set_3();
 8029d24:	f7ff fcde 	bl	80296e4 <dig1_set_3>
}
 8029d28:	e022      	b.n	8029d70 <dig1_set+0x80>
	else if(number == 4)
 8029d2a:	79fb      	ldrb	r3, [r7, #7]
 8029d2c:	2b04      	cmp	r3, #4
 8029d2e:	d102      	bne.n	8029d36 <dig1_set+0x46>
		dig1_set_4();
 8029d30:	f7ff fcea 	bl	8029708 <dig1_set_4>
}
 8029d34:	e01c      	b.n	8029d70 <dig1_set+0x80>
	else if(number == 5)
 8029d36:	79fb      	ldrb	r3, [r7, #7]
 8029d38:	2b05      	cmp	r3, #5
 8029d3a:	d102      	bne.n	8029d42 <dig1_set+0x52>
		dig1_set_5();
 8029d3c:	f7ff fcf6 	bl	802972c <dig1_set_5>
}
 8029d40:	e016      	b.n	8029d70 <dig1_set+0x80>
	else if(number == 6)
 8029d42:	79fb      	ldrb	r3, [r7, #7]
 8029d44:	2b06      	cmp	r3, #6
 8029d46:	d102      	bne.n	8029d4e <dig1_set+0x5e>
		dig1_set_6();
 8029d48:	f7ff fd02 	bl	8029750 <dig1_set_6>
}
 8029d4c:	e010      	b.n	8029d70 <dig1_set+0x80>
	else if(number == 7)
 8029d4e:	79fb      	ldrb	r3, [r7, #7]
 8029d50:	2b07      	cmp	r3, #7
 8029d52:	d102      	bne.n	8029d5a <dig1_set+0x6a>
		dig1_set_7();
 8029d54:	f7ff fd0e 	bl	8029774 <dig1_set_7>
}
 8029d58:	e00a      	b.n	8029d70 <dig1_set+0x80>
	else if(number == 8)
 8029d5a:	79fb      	ldrb	r3, [r7, #7]
 8029d5c:	2b08      	cmp	r3, #8
 8029d5e:	d102      	bne.n	8029d66 <dig1_set+0x76>
		dig1_set_8();
 8029d60:	f7ff fd1a 	bl	8029798 <dig1_set_8>
}
 8029d64:	e004      	b.n	8029d70 <dig1_set+0x80>
	else if(number == 9)
 8029d66:	79fb      	ldrb	r3, [r7, #7]
 8029d68:	2b09      	cmp	r3, #9
 8029d6a:	d101      	bne.n	8029d70 <dig1_set+0x80>
		dig1_set_9();
 8029d6c:	f7ff fd26 	bl	80297bc <dig1_set_9>
}
 8029d70:	bf00      	nop
 8029d72:	3708      	adds	r7, #8
 8029d74:	46bd      	mov	sp, r7
 8029d76:	bd80      	pop	{r7, pc}

08029d78 <dig2_set>:

void dig2_set(uint8_t number) // установка 3 цифры
{
 8029d78:	b580      	push	{r7, lr}
 8029d7a:	b082      	sub	sp, #8
 8029d7c:	af00      	add	r7, sp, #0
 8029d7e:	4603      	mov	r3, r0
 8029d80:	71fb      	strb	r3, [r7, #7]
	if(number == 0)
 8029d82:	79fb      	ldrb	r3, [r7, #7]
 8029d84:	2b00      	cmp	r3, #0
 8029d86:	d102      	bne.n	8029d8e <dig2_set+0x16>
	{
		dig2_set_0();
 8029d88:	f7ff fd3c 	bl	8029804 <dig2_set_0>
	}
	else if(number == 9)
	{
		dig2_set_9();
	}
}
 8029d8c:	e034      	b.n	8029df8 <dig2_set+0x80>
	else if(number == 1)
 8029d8e:	79fb      	ldrb	r3, [r7, #7]
 8029d90:	2b01      	cmp	r3, #1
 8029d92:	d102      	bne.n	8029d9a <dig2_set+0x22>
		dig2_set_1();
 8029d94:	f7ff fd48 	bl	8029828 <dig2_set_1>
}
 8029d98:	e02e      	b.n	8029df8 <dig2_set+0x80>
	else if(number == 2)
 8029d9a:	79fb      	ldrb	r3, [r7, #7]
 8029d9c:	2b02      	cmp	r3, #2
 8029d9e:	d102      	bne.n	8029da6 <dig2_set+0x2e>
		dig2_set_2();
 8029da0:	f7ff fd54 	bl	802984c <dig2_set_2>
}
 8029da4:	e028      	b.n	8029df8 <dig2_set+0x80>
	else if(number == 3)
 8029da6:	79fb      	ldrb	r3, [r7, #7]
 8029da8:	2b03      	cmp	r3, #3
 8029daa:	d102      	bne.n	8029db2 <dig2_set+0x3a>
		dig2_set_3();
 8029dac:	f7ff fd60 	bl	8029870 <dig2_set_3>
}
 8029db0:	e022      	b.n	8029df8 <dig2_set+0x80>
	else if(number == 4)
 8029db2:	79fb      	ldrb	r3, [r7, #7]
 8029db4:	2b04      	cmp	r3, #4
 8029db6:	d102      	bne.n	8029dbe <dig2_set+0x46>
		dig2_set_4();
 8029db8:	f7ff fd6c 	bl	8029894 <dig2_set_4>
}
 8029dbc:	e01c      	b.n	8029df8 <dig2_set+0x80>
	else if(number == 5)
 8029dbe:	79fb      	ldrb	r3, [r7, #7]
 8029dc0:	2b05      	cmp	r3, #5
 8029dc2:	d102      	bne.n	8029dca <dig2_set+0x52>
		dig2_set_5();
 8029dc4:	f7ff fd78 	bl	80298b8 <dig2_set_5>
}
 8029dc8:	e016      	b.n	8029df8 <dig2_set+0x80>
	else if(number == 6)
 8029dca:	79fb      	ldrb	r3, [r7, #7]
 8029dcc:	2b06      	cmp	r3, #6
 8029dce:	d102      	bne.n	8029dd6 <dig2_set+0x5e>
		dig2_set_6();
 8029dd0:	f7ff fd84 	bl	80298dc <dig2_set_6>
}
 8029dd4:	e010      	b.n	8029df8 <dig2_set+0x80>
	else if(number == 7)
 8029dd6:	79fb      	ldrb	r3, [r7, #7]
 8029dd8:	2b07      	cmp	r3, #7
 8029dda:	d102      	bne.n	8029de2 <dig2_set+0x6a>
		dig2_set_7();
 8029ddc:	f7ff fd90 	bl	8029900 <dig2_set_7>
}
 8029de0:	e00a      	b.n	8029df8 <dig2_set+0x80>
	else if(number == 8)
 8029de2:	79fb      	ldrb	r3, [r7, #7]
 8029de4:	2b08      	cmp	r3, #8
 8029de6:	d102      	bne.n	8029dee <dig2_set+0x76>
		dig2_set_8();
 8029de8:	f7ff fd9c 	bl	8029924 <dig2_set_8>
}
 8029dec:	e004      	b.n	8029df8 <dig2_set+0x80>
	else if(number == 9)
 8029dee:	79fb      	ldrb	r3, [r7, #7]
 8029df0:	2b09      	cmp	r3, #9
 8029df2:	d101      	bne.n	8029df8 <dig2_set+0x80>
		dig2_set_9();
 8029df4:	f7ff fda8 	bl	8029948 <dig2_set_9>
}
 8029df8:	bf00      	nop
 8029dfa:	3708      	adds	r7, #8
 8029dfc:	46bd      	mov	sp, r7
 8029dfe:	bd80      	pop	{r7, pc}

08029e00 <dig3_set>:

void dig3_set(uint8_t number) // установка 3 цифры
{
 8029e00:	b580      	push	{r7, lr}
 8029e02:	b082      	sub	sp, #8
 8029e04:	af00      	add	r7, sp, #0
 8029e06:	4603      	mov	r3, r0
 8029e08:	71fb      	strb	r3, [r7, #7]
	if(number == 0)
 8029e0a:	79fb      	ldrb	r3, [r7, #7]
 8029e0c:	2b00      	cmp	r3, #0
 8029e0e:	d102      	bne.n	8029e16 <dig3_set+0x16>
	{
		dig3_set_0();
 8029e10:	f7ff fdac 	bl	802996c <dig3_set_0>
	}
	else if(number == 9)
	{
		dig3_set_9();
	}
}
 8029e14:	e034      	b.n	8029e80 <dig3_set+0x80>
	else if(number == 1)
 8029e16:	79fb      	ldrb	r3, [r7, #7]
 8029e18:	2b01      	cmp	r3, #1
 8029e1a:	d102      	bne.n	8029e22 <dig3_set+0x22>
		dig3_set_1();
 8029e1c:	f7ff fdb8 	bl	8029990 <dig3_set_1>
}
 8029e20:	e02e      	b.n	8029e80 <dig3_set+0x80>
	else if(number == 2)
 8029e22:	79fb      	ldrb	r3, [r7, #7]
 8029e24:	2b02      	cmp	r3, #2
 8029e26:	d102      	bne.n	8029e2e <dig3_set+0x2e>
		dig3_set_2();
 8029e28:	f7ff fdc4 	bl	80299b4 <dig3_set_2>
}
 8029e2c:	e028      	b.n	8029e80 <dig3_set+0x80>
	else if(number == 3)
 8029e2e:	79fb      	ldrb	r3, [r7, #7]
 8029e30:	2b03      	cmp	r3, #3
 8029e32:	d102      	bne.n	8029e3a <dig3_set+0x3a>
		dig3_set_3();
 8029e34:	f7ff fdd0 	bl	80299d8 <dig3_set_3>
}
 8029e38:	e022      	b.n	8029e80 <dig3_set+0x80>
	else if(number == 4)
 8029e3a:	79fb      	ldrb	r3, [r7, #7]
 8029e3c:	2b04      	cmp	r3, #4
 8029e3e:	d102      	bne.n	8029e46 <dig3_set+0x46>
		dig3_set_4();
 8029e40:	f7ff fddc 	bl	80299fc <dig3_set_4>
}
 8029e44:	e01c      	b.n	8029e80 <dig3_set+0x80>
	else if(number == 5)
 8029e46:	79fb      	ldrb	r3, [r7, #7]
 8029e48:	2b05      	cmp	r3, #5
 8029e4a:	d102      	bne.n	8029e52 <dig3_set+0x52>
		dig3_set_5();
 8029e4c:	f7ff fde8 	bl	8029a20 <dig3_set_5>
}
 8029e50:	e016      	b.n	8029e80 <dig3_set+0x80>
	else if(number == 6)
 8029e52:	79fb      	ldrb	r3, [r7, #7]
 8029e54:	2b06      	cmp	r3, #6
 8029e56:	d102      	bne.n	8029e5e <dig3_set+0x5e>
		dig3_set_6();
 8029e58:	f7ff fdf4 	bl	8029a44 <dig3_set_6>
}
 8029e5c:	e010      	b.n	8029e80 <dig3_set+0x80>
	else if(number == 7)
 8029e5e:	79fb      	ldrb	r3, [r7, #7]
 8029e60:	2b07      	cmp	r3, #7
 8029e62:	d102      	bne.n	8029e6a <dig3_set+0x6a>
		dig3_set_7();
 8029e64:	f7ff fe00 	bl	8029a68 <dig3_set_7>
}
 8029e68:	e00a      	b.n	8029e80 <dig3_set+0x80>
	else if(number == 8)
 8029e6a:	79fb      	ldrb	r3, [r7, #7]
 8029e6c:	2b08      	cmp	r3, #8
 8029e6e:	d102      	bne.n	8029e76 <dig3_set+0x76>
		dig3_set_8();
 8029e70:	f7ff fe0c 	bl	8029a8c <dig3_set_8>
}
 8029e74:	e004      	b.n	8029e80 <dig3_set+0x80>
	else if(number == 9)
 8029e76:	79fb      	ldrb	r3, [r7, #7]
 8029e78:	2b09      	cmp	r3, #9
 8029e7a:	d101      	bne.n	8029e80 <dig3_set+0x80>
		dig3_set_9();
 8029e7c:	f7ff fe18 	bl	8029ab0 <dig3_set_9>
}
 8029e80:	bf00      	nop
 8029e82:	3708      	adds	r7, #8
 8029e84:	46bd      	mov	sp, r7
 8029e86:	bd80      	pop	{r7, pc}

08029e88 <dig4_set>:

void dig4_set(uint8_t number) // установка 4 цифры
{
 8029e88:	b580      	push	{r7, lr}
 8029e8a:	b082      	sub	sp, #8
 8029e8c:	af00      	add	r7, sp, #0
 8029e8e:	4603      	mov	r3, r0
 8029e90:	71fb      	strb	r3, [r7, #7]
	if(number == 0)
 8029e92:	79fb      	ldrb	r3, [r7, #7]
 8029e94:	2b00      	cmp	r3, #0
 8029e96:	d102      	bne.n	8029e9e <dig4_set+0x16>
	{
		dig4_set_0();
 8029e98:	f7ff fe1c 	bl	8029ad4 <dig4_set_0>
	}
	else if(number == 9)
	{
		dig4_set_9();
	}
}
 8029e9c:	e034      	b.n	8029f08 <dig4_set+0x80>
	else if(number == 1)
 8029e9e:	79fb      	ldrb	r3, [r7, #7]
 8029ea0:	2b01      	cmp	r3, #1
 8029ea2:	d102      	bne.n	8029eaa <dig4_set+0x22>
		dig4_set_1();
 8029ea4:	f7ff fe28 	bl	8029af8 <dig4_set_1>
}
 8029ea8:	e02e      	b.n	8029f08 <dig4_set+0x80>
	else if(number == 2)
 8029eaa:	79fb      	ldrb	r3, [r7, #7]
 8029eac:	2b02      	cmp	r3, #2
 8029eae:	d102      	bne.n	8029eb6 <dig4_set+0x2e>
		dig4_set_2();
 8029eb0:	f7ff fe34 	bl	8029b1c <dig4_set_2>
}
 8029eb4:	e028      	b.n	8029f08 <dig4_set+0x80>
	else if(number == 3)
 8029eb6:	79fb      	ldrb	r3, [r7, #7]
 8029eb8:	2b03      	cmp	r3, #3
 8029eba:	d102      	bne.n	8029ec2 <dig4_set+0x3a>
		dig4_set_3();
 8029ebc:	f7ff fe40 	bl	8029b40 <dig4_set_3>
}
 8029ec0:	e022      	b.n	8029f08 <dig4_set+0x80>
	else if(number == 4)
 8029ec2:	79fb      	ldrb	r3, [r7, #7]
 8029ec4:	2b04      	cmp	r3, #4
 8029ec6:	d102      	bne.n	8029ece <dig4_set+0x46>
		dig4_set_4();
 8029ec8:	f7ff fe4c 	bl	8029b64 <dig4_set_4>
}
 8029ecc:	e01c      	b.n	8029f08 <dig4_set+0x80>
	else if(number == 5)
 8029ece:	79fb      	ldrb	r3, [r7, #7]
 8029ed0:	2b05      	cmp	r3, #5
 8029ed2:	d102      	bne.n	8029eda <dig4_set+0x52>
		dig4_set_5();
 8029ed4:	f7ff fe58 	bl	8029b88 <dig4_set_5>
}
 8029ed8:	e016      	b.n	8029f08 <dig4_set+0x80>
	else if(number == 6)
 8029eda:	79fb      	ldrb	r3, [r7, #7]
 8029edc:	2b06      	cmp	r3, #6
 8029ede:	d102      	bne.n	8029ee6 <dig4_set+0x5e>
		dig4_set_6();
 8029ee0:	f7ff fe64 	bl	8029bac <dig4_set_6>
}
 8029ee4:	e010      	b.n	8029f08 <dig4_set+0x80>
	else if(number == 7)
 8029ee6:	79fb      	ldrb	r3, [r7, #7]
 8029ee8:	2b07      	cmp	r3, #7
 8029eea:	d102      	bne.n	8029ef2 <dig4_set+0x6a>
		dig4_set_7();
 8029eec:	f7ff fe70 	bl	8029bd0 <dig4_set_7>
}
 8029ef0:	e00a      	b.n	8029f08 <dig4_set+0x80>
	else if(number == 8)
 8029ef2:	79fb      	ldrb	r3, [r7, #7]
 8029ef4:	2b08      	cmp	r3, #8
 8029ef6:	d102      	bne.n	8029efe <dig4_set+0x76>
		dig4_set_8();
 8029ef8:	f7ff fe7c 	bl	8029bf4 <dig4_set_8>
}
 8029efc:	e004      	b.n	8029f08 <dig4_set+0x80>
	else if(number == 9)
 8029efe:	79fb      	ldrb	r3, [r7, #7]
 8029f00:	2b09      	cmp	r3, #9
 8029f02:	d101      	bne.n	8029f08 <dig4_set+0x80>
		dig4_set_9();
 8029f04:	f7ff fe88 	bl	8029c18 <dig4_set_9>
}
 8029f08:	bf00      	nop
 8029f0a:	3708      	adds	r7, #8
 8029f0c:	46bd      	mov	sp, r7
 8029f0e:	bd80      	pop	{r7, pc}

08029f10 <minute_display>:


void minute_display(uint8_t minute) // установка минут на дисплее
{
 8029f10:	b580      	push	{r7, lr}
 8029f12:	b082      	sub	sp, #8
 8029f14:	af00      	add	r7, sp, #0
 8029f16:	4603      	mov	r3, r0
 8029f18:	71fb      	strb	r3, [r7, #7]
	dig3_set(minute/10);
 8029f1a:	79fb      	ldrb	r3, [r7, #7]
 8029f1c:	4a0c      	ldr	r2, [pc, #48]	; (8029f50 <minute_display+0x40>)
 8029f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8029f22:	08db      	lsrs	r3, r3, #3
 8029f24:	b2db      	uxtb	r3, r3
 8029f26:	4618      	mov	r0, r3
 8029f28:	f7ff ff6a 	bl	8029e00 <dig3_set>
	dig4_set(minute%10);
 8029f2c:	79fa      	ldrb	r2, [r7, #7]
 8029f2e:	4b08      	ldr	r3, [pc, #32]	; (8029f50 <minute_display+0x40>)
 8029f30:	fba3 1302 	umull	r1, r3, r3, r2
 8029f34:	08d9      	lsrs	r1, r3, #3
 8029f36:	460b      	mov	r3, r1
 8029f38:	009b      	lsls	r3, r3, #2
 8029f3a:	440b      	add	r3, r1
 8029f3c:	005b      	lsls	r3, r3, #1
 8029f3e:	1ad3      	subs	r3, r2, r3
 8029f40:	b2db      	uxtb	r3, r3
 8029f42:	4618      	mov	r0, r3
 8029f44:	f7ff ffa0 	bl	8029e88 <dig4_set>
}
 8029f48:	bf00      	nop
 8029f4a:	3708      	adds	r7, #8
 8029f4c:	46bd      	mov	sp, r7
 8029f4e:	bd80      	pop	{r7, pc}
 8029f50:	cccccccd 	.word	0xcccccccd

08029f54 <hour_display>:

void hour_display(uint8_t hour) // установка минут на дисплее
{
 8029f54:	b580      	push	{r7, lr}
 8029f56:	b082      	sub	sp, #8
 8029f58:	af00      	add	r7, sp, #0
 8029f5a:	4603      	mov	r3, r0
 8029f5c:	71fb      	strb	r3, [r7, #7]
	dig1_set(hour/10);
 8029f5e:	79fb      	ldrb	r3, [r7, #7]
 8029f60:	4a0c      	ldr	r2, [pc, #48]	; (8029f94 <hour_display+0x40>)
 8029f62:	fba2 2303 	umull	r2, r3, r2, r3
 8029f66:	08db      	lsrs	r3, r3, #3
 8029f68:	b2db      	uxtb	r3, r3
 8029f6a:	4618      	mov	r0, r3
 8029f6c:	f7ff fec0 	bl	8029cf0 <dig1_set>
	dig2_set(hour%10);
 8029f70:	79fa      	ldrb	r2, [r7, #7]
 8029f72:	4b08      	ldr	r3, [pc, #32]	; (8029f94 <hour_display+0x40>)
 8029f74:	fba3 1302 	umull	r1, r3, r3, r2
 8029f78:	08d9      	lsrs	r1, r3, #3
 8029f7a:	460b      	mov	r3, r1
 8029f7c:	009b      	lsls	r3, r3, #2
 8029f7e:	440b      	add	r3, r1
 8029f80:	005b      	lsls	r3, r3, #1
 8029f82:	1ad3      	subs	r3, r2, r3
 8029f84:	b2db      	uxtb	r3, r3
 8029f86:	4618      	mov	r0, r3
 8029f88:	f7ff fef6 	bl	8029d78 <dig2_set>
}
 8029f8c:	bf00      	nop
 8029f8e:	3708      	adds	r7, #8
 8029f90:	46bd      	mov	sp, r7
 8029f92:	bd80      	pop	{r7, pc}
 8029f94:	cccccccd 	.word	0xcccccccd

08029f98 <status_register_display>:

void status_register_display(uint16_t register_number) // функция отрисовки статусного регистра АХХХ на дисплее
{
 8029f98:	b580      	push	{r7, lr}
 8029f9a:	b082      	sub	sp, #8
 8029f9c:	af00      	add	r7, sp, #0
 8029f9e:	4603      	mov	r3, r0
 8029fa0:	80fb      	strh	r3, [r7, #6]
	dig1_set_p();
 8029fa2:	f7ff fe6f 	bl	8029c84 <dig1_set_p>

	switch( (register_number/100)%10 )
 8029fa6:	88fb      	ldrh	r3, [r7, #6]
 8029fa8:	4a69      	ldr	r2, [pc, #420]	; (802a150 <status_register_display+0x1b8>)
 8029faa:	fba2 2303 	umull	r2, r3, r2, r3
 8029fae:	095b      	lsrs	r3, r3, #5
 8029fb0:	b29a      	uxth	r2, r3
 8029fb2:	4b68      	ldr	r3, [pc, #416]	; (802a154 <status_register_display+0x1bc>)
 8029fb4:	fba3 1302 	umull	r1, r3, r3, r2
 8029fb8:	08d9      	lsrs	r1, r3, #3
 8029fba:	460b      	mov	r3, r1
 8029fbc:	009b      	lsls	r3, r3, #2
 8029fbe:	440b      	add	r3, r1
 8029fc0:	005b      	lsls	r3, r3, #1
 8029fc2:	1ad3      	subs	r3, r2, r3
 8029fc4:	b29b      	uxth	r3, r3
 8029fc6:	2b09      	cmp	r3, #9
 8029fc8:	d834      	bhi.n	802a034 <status_register_display+0x9c>
 8029fca:	a201      	add	r2, pc, #4	; (adr r2, 8029fd0 <status_register_display+0x38>)
 8029fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8029fd0:	08029ff9 	.word	0x08029ff9
 8029fd4:	08029fff 	.word	0x08029fff
 8029fd8:	0802a005 	.word	0x0802a005
 8029fdc:	0802a00b 	.word	0x0802a00b
 8029fe0:	0802a011 	.word	0x0802a011
 8029fe4:	0802a017 	.word	0x0802a017
 8029fe8:	0802a01d 	.word	0x0802a01d
 8029fec:	0802a023 	.word	0x0802a023
 8029ff0:	0802a029 	.word	0x0802a029
 8029ff4:	0802a02f 	.word	0x0802a02f
	{
		case 0:

			dig2_set_0();
 8029ff8:	f7ff fc04 	bl	8029804 <dig2_set_0>

		break;
 8029ffc:	e01a      	b.n	802a034 <status_register_display+0x9c>

		case 1:

			dig2_set_1();
 8029ffe:	f7ff fc13 	bl	8029828 <dig2_set_1>

		break;
 802a002:	e017      	b.n	802a034 <status_register_display+0x9c>

		case 2:

			dig2_set_2();
 802a004:	f7ff fc22 	bl	802984c <dig2_set_2>

		break;
 802a008:	e014      	b.n	802a034 <status_register_display+0x9c>

		case 3:

			dig2_set_3();
 802a00a:	f7ff fc31 	bl	8029870 <dig2_set_3>

		break;
 802a00e:	e011      	b.n	802a034 <status_register_display+0x9c>

		case 4:

			dig2_set_4();
 802a010:	f7ff fc40 	bl	8029894 <dig2_set_4>

		break;
 802a014:	e00e      	b.n	802a034 <status_register_display+0x9c>

		case 5:

			dig2_set_5();
 802a016:	f7ff fc4f 	bl	80298b8 <dig2_set_5>

		break;
 802a01a:	e00b      	b.n	802a034 <status_register_display+0x9c>

		case 6:

			dig2_set_6();
 802a01c:	f7ff fc5e 	bl	80298dc <dig2_set_6>

		break;
 802a020:	e008      	b.n	802a034 <status_register_display+0x9c>

		case 7:

			dig2_set_7();
 802a022:	f7ff fc6d 	bl	8029900 <dig2_set_7>

		break;
 802a026:	e005      	b.n	802a034 <status_register_display+0x9c>

		case 8:

			dig2_set_8();
 802a028:	f7ff fc7c 	bl	8029924 <dig2_set_8>

		break;
 802a02c:	e002      	b.n	802a034 <status_register_display+0x9c>

		case 9:

			dig2_set_9();
 802a02e:	f7ff fc8b 	bl	8029948 <dig2_set_9>

		break;
 802a032:	bf00      	nop

	}

	switch( (register_number/10)%10 )
 802a034:	88fb      	ldrh	r3, [r7, #6]
 802a036:	4a47      	ldr	r2, [pc, #284]	; (802a154 <status_register_display+0x1bc>)
 802a038:	fba2 2303 	umull	r2, r3, r2, r3
 802a03c:	08db      	lsrs	r3, r3, #3
 802a03e:	b29a      	uxth	r2, r3
 802a040:	4b44      	ldr	r3, [pc, #272]	; (802a154 <status_register_display+0x1bc>)
 802a042:	fba3 1302 	umull	r1, r3, r3, r2
 802a046:	08d9      	lsrs	r1, r3, #3
 802a048:	460b      	mov	r3, r1
 802a04a:	009b      	lsls	r3, r3, #2
 802a04c:	440b      	add	r3, r1
 802a04e:	005b      	lsls	r3, r3, #1
 802a050:	1ad3      	subs	r3, r2, r3
 802a052:	b29b      	uxth	r3, r3
 802a054:	2b09      	cmp	r3, #9
 802a056:	d835      	bhi.n	802a0c4 <status_register_display+0x12c>
 802a058:	a201      	add	r2, pc, #4	; (adr r2, 802a060 <status_register_display+0xc8>)
 802a05a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802a05e:	bf00      	nop
 802a060:	0802a089 	.word	0x0802a089
 802a064:	0802a08f 	.word	0x0802a08f
 802a068:	0802a095 	.word	0x0802a095
 802a06c:	0802a09b 	.word	0x0802a09b
 802a070:	0802a0a1 	.word	0x0802a0a1
 802a074:	0802a0a7 	.word	0x0802a0a7
 802a078:	0802a0ad 	.word	0x0802a0ad
 802a07c:	0802a0b3 	.word	0x0802a0b3
 802a080:	0802a0b9 	.word	0x0802a0b9
 802a084:	0802a0bf 	.word	0x0802a0bf
	{
		case 0:

			dig3_set_0();
 802a088:	f7ff fc70 	bl	802996c <dig3_set_0>

		break;
 802a08c:	e01a      	b.n	802a0c4 <status_register_display+0x12c>

		case 1:

			dig3_set_1();
 802a08e:	f7ff fc7f 	bl	8029990 <dig3_set_1>

		break;
 802a092:	e017      	b.n	802a0c4 <status_register_display+0x12c>

		case 2:

			dig3_set_2();
 802a094:	f7ff fc8e 	bl	80299b4 <dig3_set_2>

		break;
 802a098:	e014      	b.n	802a0c4 <status_register_display+0x12c>

		case 3:

			dig3_set_3();
 802a09a:	f7ff fc9d 	bl	80299d8 <dig3_set_3>

		break;
 802a09e:	e011      	b.n	802a0c4 <status_register_display+0x12c>

		case 4:

			dig3_set_4();
 802a0a0:	f7ff fcac 	bl	80299fc <dig3_set_4>

		break;
 802a0a4:	e00e      	b.n	802a0c4 <status_register_display+0x12c>

		case 5:

			dig3_set_5();
 802a0a6:	f7ff fcbb 	bl	8029a20 <dig3_set_5>

		break;
 802a0aa:	e00b      	b.n	802a0c4 <status_register_display+0x12c>

		case 6:

			dig3_set_6();
 802a0ac:	f7ff fcca 	bl	8029a44 <dig3_set_6>

		break;
 802a0b0:	e008      	b.n	802a0c4 <status_register_display+0x12c>

		case 7:

			dig3_set_7();
 802a0b2:	f7ff fcd9 	bl	8029a68 <dig3_set_7>

		break;
 802a0b6:	e005      	b.n	802a0c4 <status_register_display+0x12c>

		case 8:

			dig3_set_8();
 802a0b8:	f7ff fce8 	bl	8029a8c <dig3_set_8>

		break;
 802a0bc:	e002      	b.n	802a0c4 <status_register_display+0x12c>

		case 9:

			dig3_set_9();
 802a0be:	f7ff fcf7 	bl	8029ab0 <dig3_set_9>

		break;
 802a0c2:	bf00      	nop

	}

	switch( register_number%10 )
 802a0c4:	88fa      	ldrh	r2, [r7, #6]
 802a0c6:	4b23      	ldr	r3, [pc, #140]	; (802a154 <status_register_display+0x1bc>)
 802a0c8:	fba3 1302 	umull	r1, r3, r3, r2
 802a0cc:	08d9      	lsrs	r1, r3, #3
 802a0ce:	460b      	mov	r3, r1
 802a0d0:	009b      	lsls	r3, r3, #2
 802a0d2:	440b      	add	r3, r1
 802a0d4:	005b      	lsls	r3, r3, #1
 802a0d6:	1ad3      	subs	r3, r2, r3
 802a0d8:	b29b      	uxth	r3, r3
 802a0da:	2b09      	cmp	r3, #9
 802a0dc:	d834      	bhi.n	802a148 <status_register_display+0x1b0>
 802a0de:	a201      	add	r2, pc, #4	; (adr r2, 802a0e4 <status_register_display+0x14c>)
 802a0e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802a0e4:	0802a10d 	.word	0x0802a10d
 802a0e8:	0802a113 	.word	0x0802a113
 802a0ec:	0802a119 	.word	0x0802a119
 802a0f0:	0802a11f 	.word	0x0802a11f
 802a0f4:	0802a125 	.word	0x0802a125
 802a0f8:	0802a12b 	.word	0x0802a12b
 802a0fc:	0802a131 	.word	0x0802a131
 802a100:	0802a137 	.word	0x0802a137
 802a104:	0802a13d 	.word	0x0802a13d
 802a108:	0802a143 	.word	0x0802a143
	{
		case 0:

			dig4_set_0();
 802a10c:	f7ff fce2 	bl	8029ad4 <dig4_set_0>

		break;
 802a110:	e01a      	b.n	802a148 <status_register_display+0x1b0>

		case 1:

			dig4_set_1();
 802a112:	f7ff fcf1 	bl	8029af8 <dig4_set_1>

		break;
 802a116:	e017      	b.n	802a148 <status_register_display+0x1b0>

		case 2:

			dig4_set_2();
 802a118:	f7ff fd00 	bl	8029b1c <dig4_set_2>

		break;
 802a11c:	e014      	b.n	802a148 <status_register_display+0x1b0>

		case 3:

			dig4_set_3();
 802a11e:	f7ff fd0f 	bl	8029b40 <dig4_set_3>

		break;
 802a122:	e011      	b.n	802a148 <status_register_display+0x1b0>

		case 4:

			dig4_set_4();
 802a124:	f7ff fd1e 	bl	8029b64 <dig4_set_4>

		break;
 802a128:	e00e      	b.n	802a148 <status_register_display+0x1b0>

		case 5:

			dig4_set_5();
 802a12a:	f7ff fd2d 	bl	8029b88 <dig4_set_5>

		break;
 802a12e:	e00b      	b.n	802a148 <status_register_display+0x1b0>

		case 6:

			dig4_set_6();
 802a130:	f7ff fd3c 	bl	8029bac <dig4_set_6>

		break;
 802a134:	e008      	b.n	802a148 <status_register_display+0x1b0>

		case 7:

			dig4_set_7();
 802a136:	f7ff fd4b 	bl	8029bd0 <dig4_set_7>

		break;
 802a13a:	e005      	b.n	802a148 <status_register_display+0x1b0>

		case 8:

			dig4_set_8();
 802a13c:	f7ff fd5a 	bl	8029bf4 <dig4_set_8>

		break;
 802a140:	e002      	b.n	802a148 <status_register_display+0x1b0>

		case 9:

			dig4_set_9();
 802a142:	f7ff fd69 	bl	8029c18 <dig4_set_9>

		break;
 802a146:	bf00      	nop

	}


}
 802a148:	bf00      	nop
 802a14a:	3708      	adds	r7, #8
 802a14c:	46bd      	mov	sp, r7
 802a14e:	bd80      	pop	{r7, pc}
 802a150:	51eb851f 	.word	0x51eb851f
 802a154:	cccccccd 	.word	0xcccccccd

0802a158 <control_register_display>:

void control_register_display(uint16_t register_number) // функция отрисовки статусного регистра АХХХ на дисплее
{
 802a158:	b580      	push	{r7, lr}
 802a15a:	b082      	sub	sp, #8
 802a15c:	af00      	add	r7, sp, #0
 802a15e:	4603      	mov	r3, r0
 802a160:	80fb      	strh	r3, [r7, #6]
	dig1_set_y();
 802a162:	f7ff fd6b 	bl	8029c3c <dig1_set_y>

	switch( (register_number/100)%10 )
 802a166:	88fb      	ldrh	r3, [r7, #6]
 802a168:	4a69      	ldr	r2, [pc, #420]	; (802a310 <control_register_display+0x1b8>)
 802a16a:	fba2 2303 	umull	r2, r3, r2, r3
 802a16e:	095b      	lsrs	r3, r3, #5
 802a170:	b29a      	uxth	r2, r3
 802a172:	4b68      	ldr	r3, [pc, #416]	; (802a314 <control_register_display+0x1bc>)
 802a174:	fba3 1302 	umull	r1, r3, r3, r2
 802a178:	08d9      	lsrs	r1, r3, #3
 802a17a:	460b      	mov	r3, r1
 802a17c:	009b      	lsls	r3, r3, #2
 802a17e:	440b      	add	r3, r1
 802a180:	005b      	lsls	r3, r3, #1
 802a182:	1ad3      	subs	r3, r2, r3
 802a184:	b29b      	uxth	r3, r3
 802a186:	2b09      	cmp	r3, #9
 802a188:	d834      	bhi.n	802a1f4 <control_register_display+0x9c>
 802a18a:	a201      	add	r2, pc, #4	; (adr r2, 802a190 <control_register_display+0x38>)
 802a18c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802a190:	0802a1b9 	.word	0x0802a1b9
 802a194:	0802a1bf 	.word	0x0802a1bf
 802a198:	0802a1c5 	.word	0x0802a1c5
 802a19c:	0802a1cb 	.word	0x0802a1cb
 802a1a0:	0802a1d1 	.word	0x0802a1d1
 802a1a4:	0802a1d7 	.word	0x0802a1d7
 802a1a8:	0802a1dd 	.word	0x0802a1dd
 802a1ac:	0802a1e3 	.word	0x0802a1e3
 802a1b0:	0802a1e9 	.word	0x0802a1e9
 802a1b4:	0802a1ef 	.word	0x0802a1ef
	{
		case 0:

			dig2_set_0();
 802a1b8:	f7ff fb24 	bl	8029804 <dig2_set_0>

		break;
 802a1bc:	e01a      	b.n	802a1f4 <control_register_display+0x9c>

		case 1:

			dig2_set_1();
 802a1be:	f7ff fb33 	bl	8029828 <dig2_set_1>

		break;
 802a1c2:	e017      	b.n	802a1f4 <control_register_display+0x9c>

		case 2:

			dig2_set_2();
 802a1c4:	f7ff fb42 	bl	802984c <dig2_set_2>

		break;
 802a1c8:	e014      	b.n	802a1f4 <control_register_display+0x9c>

		case 3:

			dig2_set_3();
 802a1ca:	f7ff fb51 	bl	8029870 <dig2_set_3>

		break;
 802a1ce:	e011      	b.n	802a1f4 <control_register_display+0x9c>

		case 4:

			dig2_set_4();
 802a1d0:	f7ff fb60 	bl	8029894 <dig2_set_4>

		break;
 802a1d4:	e00e      	b.n	802a1f4 <control_register_display+0x9c>

		case 5:

			dig2_set_5();
 802a1d6:	f7ff fb6f 	bl	80298b8 <dig2_set_5>

		break;
 802a1da:	e00b      	b.n	802a1f4 <control_register_display+0x9c>

		case 6:

			dig2_set_6();
 802a1dc:	f7ff fb7e 	bl	80298dc <dig2_set_6>

		break;
 802a1e0:	e008      	b.n	802a1f4 <control_register_display+0x9c>

		case 7:

			dig2_set_7();
 802a1e2:	f7ff fb8d 	bl	8029900 <dig2_set_7>

		break;
 802a1e6:	e005      	b.n	802a1f4 <control_register_display+0x9c>

		case 8:

			dig2_set_8();
 802a1e8:	f7ff fb9c 	bl	8029924 <dig2_set_8>

		break;
 802a1ec:	e002      	b.n	802a1f4 <control_register_display+0x9c>

		case 9:

			dig2_set_9();
 802a1ee:	f7ff fbab 	bl	8029948 <dig2_set_9>

		break;
 802a1f2:	bf00      	nop

	}

	switch( (register_number/10)%10 )
 802a1f4:	88fb      	ldrh	r3, [r7, #6]
 802a1f6:	4a47      	ldr	r2, [pc, #284]	; (802a314 <control_register_display+0x1bc>)
 802a1f8:	fba2 2303 	umull	r2, r3, r2, r3
 802a1fc:	08db      	lsrs	r3, r3, #3
 802a1fe:	b29a      	uxth	r2, r3
 802a200:	4b44      	ldr	r3, [pc, #272]	; (802a314 <control_register_display+0x1bc>)
 802a202:	fba3 1302 	umull	r1, r3, r3, r2
 802a206:	08d9      	lsrs	r1, r3, #3
 802a208:	460b      	mov	r3, r1
 802a20a:	009b      	lsls	r3, r3, #2
 802a20c:	440b      	add	r3, r1
 802a20e:	005b      	lsls	r3, r3, #1
 802a210:	1ad3      	subs	r3, r2, r3
 802a212:	b29b      	uxth	r3, r3
 802a214:	2b09      	cmp	r3, #9
 802a216:	d835      	bhi.n	802a284 <control_register_display+0x12c>
 802a218:	a201      	add	r2, pc, #4	; (adr r2, 802a220 <control_register_display+0xc8>)
 802a21a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802a21e:	bf00      	nop
 802a220:	0802a249 	.word	0x0802a249
 802a224:	0802a24f 	.word	0x0802a24f
 802a228:	0802a255 	.word	0x0802a255
 802a22c:	0802a25b 	.word	0x0802a25b
 802a230:	0802a261 	.word	0x0802a261
 802a234:	0802a267 	.word	0x0802a267
 802a238:	0802a26d 	.word	0x0802a26d
 802a23c:	0802a273 	.word	0x0802a273
 802a240:	0802a279 	.word	0x0802a279
 802a244:	0802a27f 	.word	0x0802a27f
	{
		case 0:

			dig3_set_0();
 802a248:	f7ff fb90 	bl	802996c <dig3_set_0>

		break;
 802a24c:	e01a      	b.n	802a284 <control_register_display+0x12c>

		case 1:

			dig3_set_1();
 802a24e:	f7ff fb9f 	bl	8029990 <dig3_set_1>

		break;
 802a252:	e017      	b.n	802a284 <control_register_display+0x12c>

		case 2:

			dig3_set_2();
 802a254:	f7ff fbae 	bl	80299b4 <dig3_set_2>

		break;
 802a258:	e014      	b.n	802a284 <control_register_display+0x12c>

		case 3:

			dig3_set_3();
 802a25a:	f7ff fbbd 	bl	80299d8 <dig3_set_3>

		break;
 802a25e:	e011      	b.n	802a284 <control_register_display+0x12c>

		case 4:

			dig3_set_4();
 802a260:	f7ff fbcc 	bl	80299fc <dig3_set_4>

		break;
 802a264:	e00e      	b.n	802a284 <control_register_display+0x12c>

		case 5:

			dig3_set_5();
 802a266:	f7ff fbdb 	bl	8029a20 <dig3_set_5>

		break;
 802a26a:	e00b      	b.n	802a284 <control_register_display+0x12c>

		case 6:

			dig3_set_6();
 802a26c:	f7ff fbea 	bl	8029a44 <dig3_set_6>

		break;
 802a270:	e008      	b.n	802a284 <control_register_display+0x12c>

		case 7:

			dig3_set_7();
 802a272:	f7ff fbf9 	bl	8029a68 <dig3_set_7>

		break;
 802a276:	e005      	b.n	802a284 <control_register_display+0x12c>

		case 8:

			dig3_set_8();
 802a278:	f7ff fc08 	bl	8029a8c <dig3_set_8>

		break;
 802a27c:	e002      	b.n	802a284 <control_register_display+0x12c>

		case 9:

			dig3_set_9();
 802a27e:	f7ff fc17 	bl	8029ab0 <dig3_set_9>

		break;
 802a282:	bf00      	nop

	}

	switch( register_number%10 )
 802a284:	88fa      	ldrh	r2, [r7, #6]
 802a286:	4b23      	ldr	r3, [pc, #140]	; (802a314 <control_register_display+0x1bc>)
 802a288:	fba3 1302 	umull	r1, r3, r3, r2
 802a28c:	08d9      	lsrs	r1, r3, #3
 802a28e:	460b      	mov	r3, r1
 802a290:	009b      	lsls	r3, r3, #2
 802a292:	440b      	add	r3, r1
 802a294:	005b      	lsls	r3, r3, #1
 802a296:	1ad3      	subs	r3, r2, r3
 802a298:	b29b      	uxth	r3, r3
 802a29a:	2b09      	cmp	r3, #9
 802a29c:	d834      	bhi.n	802a308 <control_register_display+0x1b0>
 802a29e:	a201      	add	r2, pc, #4	; (adr r2, 802a2a4 <control_register_display+0x14c>)
 802a2a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802a2a4:	0802a2cd 	.word	0x0802a2cd
 802a2a8:	0802a2d3 	.word	0x0802a2d3
 802a2ac:	0802a2d9 	.word	0x0802a2d9
 802a2b0:	0802a2df 	.word	0x0802a2df
 802a2b4:	0802a2e5 	.word	0x0802a2e5
 802a2b8:	0802a2eb 	.word	0x0802a2eb
 802a2bc:	0802a2f1 	.word	0x0802a2f1
 802a2c0:	0802a2f7 	.word	0x0802a2f7
 802a2c4:	0802a2fd 	.word	0x0802a2fd
 802a2c8:	0802a303 	.word	0x0802a303
	{
		case 0:

			dig4_set_0();
 802a2cc:	f7ff fc02 	bl	8029ad4 <dig4_set_0>

		break;
 802a2d0:	e01a      	b.n	802a308 <control_register_display+0x1b0>

		case 1:

			dig4_set_1();
 802a2d2:	f7ff fc11 	bl	8029af8 <dig4_set_1>

		break;
 802a2d6:	e017      	b.n	802a308 <control_register_display+0x1b0>

		case 2:

			dig4_set_2();
 802a2d8:	f7ff fc20 	bl	8029b1c <dig4_set_2>

		break;
 802a2dc:	e014      	b.n	802a308 <control_register_display+0x1b0>

		case 3:

			dig4_set_3();
 802a2de:	f7ff fc2f 	bl	8029b40 <dig4_set_3>

		break;
 802a2e2:	e011      	b.n	802a308 <control_register_display+0x1b0>

		case 4:

			dig4_set_4();
 802a2e4:	f7ff fc3e 	bl	8029b64 <dig4_set_4>

		break;
 802a2e8:	e00e      	b.n	802a308 <control_register_display+0x1b0>

		case 5:

			dig4_set_5();
 802a2ea:	f7ff fc4d 	bl	8029b88 <dig4_set_5>

		break;
 802a2ee:	e00b      	b.n	802a308 <control_register_display+0x1b0>

		case 6:

			dig4_set_6();
 802a2f0:	f7ff fc5c 	bl	8029bac <dig4_set_6>

		break;
 802a2f4:	e008      	b.n	802a308 <control_register_display+0x1b0>

		case 7:

			dig4_set_7();
 802a2f6:	f7ff fc6b 	bl	8029bd0 <dig4_set_7>

		break;
 802a2fa:	e005      	b.n	802a308 <control_register_display+0x1b0>

		case 8:

			dig4_set_8();
 802a2fc:	f7ff fc7a 	bl	8029bf4 <dig4_set_8>

		break;
 802a300:	e002      	b.n	802a308 <control_register_display+0x1b0>

		case 9:

			dig4_set_9();
 802a302:	f7ff fc89 	bl	8029c18 <dig4_set_9>

		break;
 802a306:	bf00      	nop

	}


}
 802a308:	bf00      	nop
 802a30a:	3708      	adds	r7, #8
 802a30c:	46bd      	mov	sp, r7
 802a30e:	bd80      	pop	{r7, pc}
 802a310:	51eb851f 	.word	0x51eb851f
 802a314:	cccccccd 	.word	0xcccccccd

0802a318 <number_display>:

void number_display(uint8_t number)
{
 802a318:	b580      	push	{r7, lr}
 802a31a:	b082      	sub	sp, #8
 802a31c:	af00      	add	r7, sp, #0
 802a31e:	4603      	mov	r3, r0
 802a320:	71fb      	strb	r3, [r7, #7]
	dig1_set_off();
 802a322:	f7ff fa5d 	bl	80297e0 <dig1_set_off>

	switch( (number/100)%10 )
 802a326:	79fb      	ldrb	r3, [r7, #7]
 802a328:	4a69      	ldr	r2, [pc, #420]	; (802a4d0 <number_display+0x1b8>)
 802a32a:	fba2 2303 	umull	r2, r3, r2, r3
 802a32e:	095b      	lsrs	r3, r3, #5
 802a330:	b2da      	uxtb	r2, r3
 802a332:	4b68      	ldr	r3, [pc, #416]	; (802a4d4 <number_display+0x1bc>)
 802a334:	fba3 1302 	umull	r1, r3, r3, r2
 802a338:	08d9      	lsrs	r1, r3, #3
 802a33a:	460b      	mov	r3, r1
 802a33c:	009b      	lsls	r3, r3, #2
 802a33e:	440b      	add	r3, r1
 802a340:	005b      	lsls	r3, r3, #1
 802a342:	1ad3      	subs	r3, r2, r3
 802a344:	b2db      	uxtb	r3, r3
 802a346:	2b09      	cmp	r3, #9
 802a348:	d834      	bhi.n	802a3b4 <number_display+0x9c>
 802a34a:	a201      	add	r2, pc, #4	; (adr r2, 802a350 <number_display+0x38>)
 802a34c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802a350:	0802a379 	.word	0x0802a379
 802a354:	0802a37f 	.word	0x0802a37f
 802a358:	0802a385 	.word	0x0802a385
 802a35c:	0802a38b 	.word	0x0802a38b
 802a360:	0802a391 	.word	0x0802a391
 802a364:	0802a397 	.word	0x0802a397
 802a368:	0802a39d 	.word	0x0802a39d
 802a36c:	0802a3a3 	.word	0x0802a3a3
 802a370:	0802a3a9 	.word	0x0802a3a9
 802a374:	0802a3af 	.word	0x0802a3af
	{
		case 0:

			dig2_set_0();
 802a378:	f7ff fa44 	bl	8029804 <dig2_set_0>

		break;
 802a37c:	e01a      	b.n	802a3b4 <number_display+0x9c>

		case 1:

			dig2_set_1();
 802a37e:	f7ff fa53 	bl	8029828 <dig2_set_1>

		break;
 802a382:	e017      	b.n	802a3b4 <number_display+0x9c>

		case 2:

			dig2_set_2();
 802a384:	f7ff fa62 	bl	802984c <dig2_set_2>

		break;
 802a388:	e014      	b.n	802a3b4 <number_display+0x9c>

		case 3:

			dig2_set_3();
 802a38a:	f7ff fa71 	bl	8029870 <dig2_set_3>

		break;
 802a38e:	e011      	b.n	802a3b4 <number_display+0x9c>

		case 4:

			dig2_set_4();
 802a390:	f7ff fa80 	bl	8029894 <dig2_set_4>

		break;
 802a394:	e00e      	b.n	802a3b4 <number_display+0x9c>

		case 5:

			dig2_set_5();
 802a396:	f7ff fa8f 	bl	80298b8 <dig2_set_5>

		break;
 802a39a:	e00b      	b.n	802a3b4 <number_display+0x9c>

		case 6:

			dig2_set_6();
 802a39c:	f7ff fa9e 	bl	80298dc <dig2_set_6>

		break;
 802a3a0:	e008      	b.n	802a3b4 <number_display+0x9c>

		case 7:

			dig2_set_7();
 802a3a2:	f7ff faad 	bl	8029900 <dig2_set_7>

		break;
 802a3a6:	e005      	b.n	802a3b4 <number_display+0x9c>

		case 8:

			dig2_set_8();
 802a3a8:	f7ff fabc 	bl	8029924 <dig2_set_8>

		break;
 802a3ac:	e002      	b.n	802a3b4 <number_display+0x9c>

		case 9:

			dig2_set_9();
 802a3ae:	f7ff facb 	bl	8029948 <dig2_set_9>

		break;
 802a3b2:	bf00      	nop

	}

	switch( (number/10)%10 )
 802a3b4:	79fb      	ldrb	r3, [r7, #7]
 802a3b6:	4a47      	ldr	r2, [pc, #284]	; (802a4d4 <number_display+0x1bc>)
 802a3b8:	fba2 2303 	umull	r2, r3, r2, r3
 802a3bc:	08db      	lsrs	r3, r3, #3
 802a3be:	b2da      	uxtb	r2, r3
 802a3c0:	4b44      	ldr	r3, [pc, #272]	; (802a4d4 <number_display+0x1bc>)
 802a3c2:	fba3 1302 	umull	r1, r3, r3, r2
 802a3c6:	08d9      	lsrs	r1, r3, #3
 802a3c8:	460b      	mov	r3, r1
 802a3ca:	009b      	lsls	r3, r3, #2
 802a3cc:	440b      	add	r3, r1
 802a3ce:	005b      	lsls	r3, r3, #1
 802a3d0:	1ad3      	subs	r3, r2, r3
 802a3d2:	b2db      	uxtb	r3, r3
 802a3d4:	2b09      	cmp	r3, #9
 802a3d6:	d835      	bhi.n	802a444 <number_display+0x12c>
 802a3d8:	a201      	add	r2, pc, #4	; (adr r2, 802a3e0 <number_display+0xc8>)
 802a3da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802a3de:	bf00      	nop
 802a3e0:	0802a409 	.word	0x0802a409
 802a3e4:	0802a40f 	.word	0x0802a40f
 802a3e8:	0802a415 	.word	0x0802a415
 802a3ec:	0802a41b 	.word	0x0802a41b
 802a3f0:	0802a421 	.word	0x0802a421
 802a3f4:	0802a427 	.word	0x0802a427
 802a3f8:	0802a42d 	.word	0x0802a42d
 802a3fc:	0802a433 	.word	0x0802a433
 802a400:	0802a439 	.word	0x0802a439
 802a404:	0802a43f 	.word	0x0802a43f
	{
		case 0:

			dig3_set_0();
 802a408:	f7ff fab0 	bl	802996c <dig3_set_0>

		break;
 802a40c:	e01a      	b.n	802a444 <number_display+0x12c>

		case 1:

			dig3_set_1();
 802a40e:	f7ff fabf 	bl	8029990 <dig3_set_1>

		break;
 802a412:	e017      	b.n	802a444 <number_display+0x12c>

		case 2:

			dig3_set_2();
 802a414:	f7ff face 	bl	80299b4 <dig3_set_2>

		break;
 802a418:	e014      	b.n	802a444 <number_display+0x12c>

		case 3:

			dig3_set_3();
 802a41a:	f7ff fadd 	bl	80299d8 <dig3_set_3>

		break;
 802a41e:	e011      	b.n	802a444 <number_display+0x12c>

		case 4:

			dig3_set_4();
 802a420:	f7ff faec 	bl	80299fc <dig3_set_4>

		break;
 802a424:	e00e      	b.n	802a444 <number_display+0x12c>

		case 5:

			dig3_set_5();
 802a426:	f7ff fafb 	bl	8029a20 <dig3_set_5>

		break;
 802a42a:	e00b      	b.n	802a444 <number_display+0x12c>

		case 6:

			dig3_set_6();
 802a42c:	f7ff fb0a 	bl	8029a44 <dig3_set_6>

		break;
 802a430:	e008      	b.n	802a444 <number_display+0x12c>

		case 7:

			dig3_set_7();
 802a432:	f7ff fb19 	bl	8029a68 <dig3_set_7>

		break;
 802a436:	e005      	b.n	802a444 <number_display+0x12c>

		case 8:

			dig3_set_8();
 802a438:	f7ff fb28 	bl	8029a8c <dig3_set_8>

		break;
 802a43c:	e002      	b.n	802a444 <number_display+0x12c>

		case 9:

			dig3_set_9();
 802a43e:	f7ff fb37 	bl	8029ab0 <dig3_set_9>

		break;
 802a442:	bf00      	nop

	}

	switch( number%10 )
 802a444:	79fa      	ldrb	r2, [r7, #7]
 802a446:	4b23      	ldr	r3, [pc, #140]	; (802a4d4 <number_display+0x1bc>)
 802a448:	fba3 1302 	umull	r1, r3, r3, r2
 802a44c:	08d9      	lsrs	r1, r3, #3
 802a44e:	460b      	mov	r3, r1
 802a450:	009b      	lsls	r3, r3, #2
 802a452:	440b      	add	r3, r1
 802a454:	005b      	lsls	r3, r3, #1
 802a456:	1ad3      	subs	r3, r2, r3
 802a458:	b2db      	uxtb	r3, r3
 802a45a:	2b09      	cmp	r3, #9
 802a45c:	d834      	bhi.n	802a4c8 <number_display+0x1b0>
 802a45e:	a201      	add	r2, pc, #4	; (adr r2, 802a464 <number_display+0x14c>)
 802a460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802a464:	0802a48d 	.word	0x0802a48d
 802a468:	0802a493 	.word	0x0802a493
 802a46c:	0802a499 	.word	0x0802a499
 802a470:	0802a49f 	.word	0x0802a49f
 802a474:	0802a4a5 	.word	0x0802a4a5
 802a478:	0802a4ab 	.word	0x0802a4ab
 802a47c:	0802a4b1 	.word	0x0802a4b1
 802a480:	0802a4b7 	.word	0x0802a4b7
 802a484:	0802a4bd 	.word	0x0802a4bd
 802a488:	0802a4c3 	.word	0x0802a4c3
	{
		case 0:

			dig4_set_0();
 802a48c:	f7ff fb22 	bl	8029ad4 <dig4_set_0>

		break;
 802a490:	e01a      	b.n	802a4c8 <number_display+0x1b0>

		case 1:

			dig4_set_1();
 802a492:	f7ff fb31 	bl	8029af8 <dig4_set_1>

		break;
 802a496:	e017      	b.n	802a4c8 <number_display+0x1b0>

		case 2:

			dig4_set_2();
 802a498:	f7ff fb40 	bl	8029b1c <dig4_set_2>

		break;
 802a49c:	e014      	b.n	802a4c8 <number_display+0x1b0>

		case 3:

			dig4_set_3();
 802a49e:	f7ff fb4f 	bl	8029b40 <dig4_set_3>

		break;
 802a4a2:	e011      	b.n	802a4c8 <number_display+0x1b0>

		case 4:

			dig4_set_4();
 802a4a4:	f7ff fb5e 	bl	8029b64 <dig4_set_4>

		break;
 802a4a8:	e00e      	b.n	802a4c8 <number_display+0x1b0>

		case 5:

			dig4_set_5();
 802a4aa:	f7ff fb6d 	bl	8029b88 <dig4_set_5>

		break;
 802a4ae:	e00b      	b.n	802a4c8 <number_display+0x1b0>

		case 6:

			dig4_set_6();
 802a4b0:	f7ff fb7c 	bl	8029bac <dig4_set_6>

		break;
 802a4b4:	e008      	b.n	802a4c8 <number_display+0x1b0>

		case 7:

			dig4_set_7();
 802a4b6:	f7ff fb8b 	bl	8029bd0 <dig4_set_7>

		break;
 802a4ba:	e005      	b.n	802a4c8 <number_display+0x1b0>

		case 8:

			dig4_set_8();
 802a4bc:	f7ff fb9a 	bl	8029bf4 <dig4_set_8>

		break;
 802a4c0:	e002      	b.n	802a4c8 <number_display+0x1b0>

		case 9:

			dig4_set_9();
 802a4c2:	f7ff fba9 	bl	8029c18 <dig4_set_9>

		break;
 802a4c6:	bf00      	nop

	}
}
 802a4c8:	bf00      	nop
 802a4ca:	3708      	adds	r7, #8
 802a4cc:	46bd      	mov	sp, r7
 802a4ce:	bd80      	pop	{r7, pc}
 802a4d0:	51eb851f 	.word	0x51eb851f
 802a4d4:	cccccccd 	.word	0xcccccccd

0802a4d8 <number_change_display>:

void number_change_display(uint8_t number)
{
 802a4d8:	b580      	push	{r7, lr}
 802a4da:	b082      	sub	sp, #8
 802a4dc:	af00      	add	r7, sp, #0
 802a4de:	4603      	mov	r3, r0
 802a4e0:	71fb      	strb	r3, [r7, #7]
	dig1_set_dash();
 802a4e2:	f7ff fbe1 	bl	8029ca8 <dig1_set_dash>

	switch( (number/100)%10 )
 802a4e6:	79fb      	ldrb	r3, [r7, #7]
 802a4e8:	4a69      	ldr	r2, [pc, #420]	; (802a690 <number_change_display+0x1b8>)
 802a4ea:	fba2 2303 	umull	r2, r3, r2, r3
 802a4ee:	095b      	lsrs	r3, r3, #5
 802a4f0:	b2da      	uxtb	r2, r3
 802a4f2:	4b68      	ldr	r3, [pc, #416]	; (802a694 <number_change_display+0x1bc>)
 802a4f4:	fba3 1302 	umull	r1, r3, r3, r2
 802a4f8:	08d9      	lsrs	r1, r3, #3
 802a4fa:	460b      	mov	r3, r1
 802a4fc:	009b      	lsls	r3, r3, #2
 802a4fe:	440b      	add	r3, r1
 802a500:	005b      	lsls	r3, r3, #1
 802a502:	1ad3      	subs	r3, r2, r3
 802a504:	b2db      	uxtb	r3, r3
 802a506:	2b09      	cmp	r3, #9
 802a508:	d834      	bhi.n	802a574 <number_change_display+0x9c>
 802a50a:	a201      	add	r2, pc, #4	; (adr r2, 802a510 <number_change_display+0x38>)
 802a50c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802a510:	0802a539 	.word	0x0802a539
 802a514:	0802a53f 	.word	0x0802a53f
 802a518:	0802a545 	.word	0x0802a545
 802a51c:	0802a54b 	.word	0x0802a54b
 802a520:	0802a551 	.word	0x0802a551
 802a524:	0802a557 	.word	0x0802a557
 802a528:	0802a55d 	.word	0x0802a55d
 802a52c:	0802a563 	.word	0x0802a563
 802a530:	0802a569 	.word	0x0802a569
 802a534:	0802a56f 	.word	0x0802a56f
	{
		case 0:

			dig2_set_0();
 802a538:	f7ff f964 	bl	8029804 <dig2_set_0>

		break;
 802a53c:	e01a      	b.n	802a574 <number_change_display+0x9c>

		case 1:

			dig2_set_1();
 802a53e:	f7ff f973 	bl	8029828 <dig2_set_1>

		break;
 802a542:	e017      	b.n	802a574 <number_change_display+0x9c>

		case 2:

			dig2_set_2();
 802a544:	f7ff f982 	bl	802984c <dig2_set_2>

		break;
 802a548:	e014      	b.n	802a574 <number_change_display+0x9c>

		case 3:

			dig2_set_3();
 802a54a:	f7ff f991 	bl	8029870 <dig2_set_3>

		break;
 802a54e:	e011      	b.n	802a574 <number_change_display+0x9c>

		case 4:

			dig2_set_4();
 802a550:	f7ff f9a0 	bl	8029894 <dig2_set_4>

		break;
 802a554:	e00e      	b.n	802a574 <number_change_display+0x9c>

		case 5:

			dig2_set_5();
 802a556:	f7ff f9af 	bl	80298b8 <dig2_set_5>

		break;
 802a55a:	e00b      	b.n	802a574 <number_change_display+0x9c>

		case 6:

			dig2_set_6();
 802a55c:	f7ff f9be 	bl	80298dc <dig2_set_6>

		break;
 802a560:	e008      	b.n	802a574 <number_change_display+0x9c>

		case 7:

			dig2_set_7();
 802a562:	f7ff f9cd 	bl	8029900 <dig2_set_7>

		break;
 802a566:	e005      	b.n	802a574 <number_change_display+0x9c>

		case 8:

			dig2_set_8();
 802a568:	f7ff f9dc 	bl	8029924 <dig2_set_8>

		break;
 802a56c:	e002      	b.n	802a574 <number_change_display+0x9c>

		case 9:

			dig2_set_9();
 802a56e:	f7ff f9eb 	bl	8029948 <dig2_set_9>

		break;
 802a572:	bf00      	nop

	}

	switch( (number/10)%10 )
 802a574:	79fb      	ldrb	r3, [r7, #7]
 802a576:	4a47      	ldr	r2, [pc, #284]	; (802a694 <number_change_display+0x1bc>)
 802a578:	fba2 2303 	umull	r2, r3, r2, r3
 802a57c:	08db      	lsrs	r3, r3, #3
 802a57e:	b2da      	uxtb	r2, r3
 802a580:	4b44      	ldr	r3, [pc, #272]	; (802a694 <number_change_display+0x1bc>)
 802a582:	fba3 1302 	umull	r1, r3, r3, r2
 802a586:	08d9      	lsrs	r1, r3, #3
 802a588:	460b      	mov	r3, r1
 802a58a:	009b      	lsls	r3, r3, #2
 802a58c:	440b      	add	r3, r1
 802a58e:	005b      	lsls	r3, r3, #1
 802a590:	1ad3      	subs	r3, r2, r3
 802a592:	b2db      	uxtb	r3, r3
 802a594:	2b09      	cmp	r3, #9
 802a596:	d835      	bhi.n	802a604 <number_change_display+0x12c>
 802a598:	a201      	add	r2, pc, #4	; (adr r2, 802a5a0 <number_change_display+0xc8>)
 802a59a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802a59e:	bf00      	nop
 802a5a0:	0802a5c9 	.word	0x0802a5c9
 802a5a4:	0802a5cf 	.word	0x0802a5cf
 802a5a8:	0802a5d5 	.word	0x0802a5d5
 802a5ac:	0802a5db 	.word	0x0802a5db
 802a5b0:	0802a5e1 	.word	0x0802a5e1
 802a5b4:	0802a5e7 	.word	0x0802a5e7
 802a5b8:	0802a5ed 	.word	0x0802a5ed
 802a5bc:	0802a5f3 	.word	0x0802a5f3
 802a5c0:	0802a5f9 	.word	0x0802a5f9
 802a5c4:	0802a5ff 	.word	0x0802a5ff
	{
		case 0:

			dig3_set_0();
 802a5c8:	f7ff f9d0 	bl	802996c <dig3_set_0>

		break;
 802a5cc:	e01a      	b.n	802a604 <number_change_display+0x12c>

		case 1:

			dig3_set_1();
 802a5ce:	f7ff f9df 	bl	8029990 <dig3_set_1>

		break;
 802a5d2:	e017      	b.n	802a604 <number_change_display+0x12c>

		case 2:

			dig3_set_2();
 802a5d4:	f7ff f9ee 	bl	80299b4 <dig3_set_2>

		break;
 802a5d8:	e014      	b.n	802a604 <number_change_display+0x12c>

		case 3:

			dig3_set_3();
 802a5da:	f7ff f9fd 	bl	80299d8 <dig3_set_3>

		break;
 802a5de:	e011      	b.n	802a604 <number_change_display+0x12c>

		case 4:

			dig3_set_4();
 802a5e0:	f7ff fa0c 	bl	80299fc <dig3_set_4>

		break;
 802a5e4:	e00e      	b.n	802a604 <number_change_display+0x12c>

		case 5:

			dig3_set_5();
 802a5e6:	f7ff fa1b 	bl	8029a20 <dig3_set_5>

		break;
 802a5ea:	e00b      	b.n	802a604 <number_change_display+0x12c>

		case 6:

			dig3_set_6();
 802a5ec:	f7ff fa2a 	bl	8029a44 <dig3_set_6>

		break;
 802a5f0:	e008      	b.n	802a604 <number_change_display+0x12c>

		case 7:

			dig3_set_7();
 802a5f2:	f7ff fa39 	bl	8029a68 <dig3_set_7>

		break;
 802a5f6:	e005      	b.n	802a604 <number_change_display+0x12c>

		case 8:

			dig3_set_8();
 802a5f8:	f7ff fa48 	bl	8029a8c <dig3_set_8>

		break;
 802a5fc:	e002      	b.n	802a604 <number_change_display+0x12c>

		case 9:

			dig3_set_9();
 802a5fe:	f7ff fa57 	bl	8029ab0 <dig3_set_9>

		break;
 802a602:	bf00      	nop

	}

	switch( number%10 )
 802a604:	79fa      	ldrb	r2, [r7, #7]
 802a606:	4b23      	ldr	r3, [pc, #140]	; (802a694 <number_change_display+0x1bc>)
 802a608:	fba3 1302 	umull	r1, r3, r3, r2
 802a60c:	08d9      	lsrs	r1, r3, #3
 802a60e:	460b      	mov	r3, r1
 802a610:	009b      	lsls	r3, r3, #2
 802a612:	440b      	add	r3, r1
 802a614:	005b      	lsls	r3, r3, #1
 802a616:	1ad3      	subs	r3, r2, r3
 802a618:	b2db      	uxtb	r3, r3
 802a61a:	2b09      	cmp	r3, #9
 802a61c:	d834      	bhi.n	802a688 <number_change_display+0x1b0>
 802a61e:	a201      	add	r2, pc, #4	; (adr r2, 802a624 <number_change_display+0x14c>)
 802a620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802a624:	0802a64d 	.word	0x0802a64d
 802a628:	0802a653 	.word	0x0802a653
 802a62c:	0802a659 	.word	0x0802a659
 802a630:	0802a65f 	.word	0x0802a65f
 802a634:	0802a665 	.word	0x0802a665
 802a638:	0802a66b 	.word	0x0802a66b
 802a63c:	0802a671 	.word	0x0802a671
 802a640:	0802a677 	.word	0x0802a677
 802a644:	0802a67d 	.word	0x0802a67d
 802a648:	0802a683 	.word	0x0802a683
	{
		case 0:

			dig4_set_0();
 802a64c:	f7ff fa42 	bl	8029ad4 <dig4_set_0>

		break;
 802a650:	e01a      	b.n	802a688 <number_change_display+0x1b0>

		case 1:

			dig4_set_1();
 802a652:	f7ff fa51 	bl	8029af8 <dig4_set_1>

		break;
 802a656:	e017      	b.n	802a688 <number_change_display+0x1b0>

		case 2:

			dig4_set_2();
 802a658:	f7ff fa60 	bl	8029b1c <dig4_set_2>

		break;
 802a65c:	e014      	b.n	802a688 <number_change_display+0x1b0>

		case 3:

			dig4_set_3();
 802a65e:	f7ff fa6f 	bl	8029b40 <dig4_set_3>

		break;
 802a662:	e011      	b.n	802a688 <number_change_display+0x1b0>

		case 4:

			dig4_set_4();
 802a664:	f7ff fa7e 	bl	8029b64 <dig4_set_4>

		break;
 802a668:	e00e      	b.n	802a688 <number_change_display+0x1b0>

		case 5:

			dig4_set_5();
 802a66a:	f7ff fa8d 	bl	8029b88 <dig4_set_5>

		break;
 802a66e:	e00b      	b.n	802a688 <number_change_display+0x1b0>

		case 6:

			dig4_set_6();
 802a670:	f7ff fa9c 	bl	8029bac <dig4_set_6>

		break;
 802a674:	e008      	b.n	802a688 <number_change_display+0x1b0>

		case 7:

			dig4_set_7();
 802a676:	f7ff faab 	bl	8029bd0 <dig4_set_7>

		break;
 802a67a:	e005      	b.n	802a688 <number_change_display+0x1b0>

		case 8:

			dig4_set_8();
 802a67c:	f7ff faba 	bl	8029bf4 <dig4_set_8>

		break;
 802a680:	e002      	b.n	802a688 <number_change_display+0x1b0>

		case 9:

			dig4_set_9();
 802a682:	f7ff fac9 	bl	8029c18 <dig4_set_9>

		break;
 802a686:	bf00      	nop

	}
}
 802a688:	bf00      	nop
 802a68a:	3708      	adds	r7, #8
 802a68c:	46bd      	mov	sp, r7
 802a68e:	bd80      	pop	{r7, pc}
 802a690:	51eb851f 	.word	0x51eb851f
 802a694:	cccccccd 	.word	0xcccccccd

0802a698 <ibutton_a_register_display>:

void ibutton_a_register_display(uint16_t register_number) // функция отрисовки I-button регистра группы А на дисплее
{
 802a698:	b580      	push	{r7, lr}
 802a69a:	b082      	sub	sp, #8
 802a69c:	af00      	add	r7, sp, #0
 802a69e:	4603      	mov	r3, r0
 802a6a0:	80fb      	strh	r3, [r7, #6]
	dig1_set_a();
 802a6a2:	f7ff fadd 	bl	8029c60 <dig1_set_a>

	switch( (register_number/100)%10 )
 802a6a6:	88fb      	ldrh	r3, [r7, #6]
 802a6a8:	4a69      	ldr	r2, [pc, #420]	; (802a850 <ibutton_a_register_display+0x1b8>)
 802a6aa:	fba2 2303 	umull	r2, r3, r2, r3
 802a6ae:	095b      	lsrs	r3, r3, #5
 802a6b0:	b29a      	uxth	r2, r3
 802a6b2:	4b68      	ldr	r3, [pc, #416]	; (802a854 <ibutton_a_register_display+0x1bc>)
 802a6b4:	fba3 1302 	umull	r1, r3, r3, r2
 802a6b8:	08d9      	lsrs	r1, r3, #3
 802a6ba:	460b      	mov	r3, r1
 802a6bc:	009b      	lsls	r3, r3, #2
 802a6be:	440b      	add	r3, r1
 802a6c0:	005b      	lsls	r3, r3, #1
 802a6c2:	1ad3      	subs	r3, r2, r3
 802a6c4:	b29b      	uxth	r3, r3
 802a6c6:	2b09      	cmp	r3, #9
 802a6c8:	d834      	bhi.n	802a734 <ibutton_a_register_display+0x9c>
 802a6ca:	a201      	add	r2, pc, #4	; (adr r2, 802a6d0 <ibutton_a_register_display+0x38>)
 802a6cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802a6d0:	0802a6f9 	.word	0x0802a6f9
 802a6d4:	0802a6ff 	.word	0x0802a6ff
 802a6d8:	0802a705 	.word	0x0802a705
 802a6dc:	0802a70b 	.word	0x0802a70b
 802a6e0:	0802a711 	.word	0x0802a711
 802a6e4:	0802a717 	.word	0x0802a717
 802a6e8:	0802a71d 	.word	0x0802a71d
 802a6ec:	0802a723 	.word	0x0802a723
 802a6f0:	0802a729 	.word	0x0802a729
 802a6f4:	0802a72f 	.word	0x0802a72f
	{
		case 0:

			dig2_set_0();
 802a6f8:	f7ff f884 	bl	8029804 <dig2_set_0>

		break;
 802a6fc:	e01a      	b.n	802a734 <ibutton_a_register_display+0x9c>

		case 1:

			dig2_set_1();
 802a6fe:	f7ff f893 	bl	8029828 <dig2_set_1>

		break;
 802a702:	e017      	b.n	802a734 <ibutton_a_register_display+0x9c>

		case 2:

			dig2_set_2();
 802a704:	f7ff f8a2 	bl	802984c <dig2_set_2>

		break;
 802a708:	e014      	b.n	802a734 <ibutton_a_register_display+0x9c>

		case 3:

			dig2_set_3();
 802a70a:	f7ff f8b1 	bl	8029870 <dig2_set_3>

		break;
 802a70e:	e011      	b.n	802a734 <ibutton_a_register_display+0x9c>

		case 4:

			dig2_set_4();
 802a710:	f7ff f8c0 	bl	8029894 <dig2_set_4>

		break;
 802a714:	e00e      	b.n	802a734 <ibutton_a_register_display+0x9c>

		case 5:

			dig2_set_5();
 802a716:	f7ff f8cf 	bl	80298b8 <dig2_set_5>

		break;
 802a71a:	e00b      	b.n	802a734 <ibutton_a_register_display+0x9c>

		case 6:

			dig2_set_6();
 802a71c:	f7ff f8de 	bl	80298dc <dig2_set_6>

		break;
 802a720:	e008      	b.n	802a734 <ibutton_a_register_display+0x9c>

		case 7:

			dig2_set_7();
 802a722:	f7ff f8ed 	bl	8029900 <dig2_set_7>

		break;
 802a726:	e005      	b.n	802a734 <ibutton_a_register_display+0x9c>

		case 8:

			dig2_set_8();
 802a728:	f7ff f8fc 	bl	8029924 <dig2_set_8>

		break;
 802a72c:	e002      	b.n	802a734 <ibutton_a_register_display+0x9c>

		case 9:

			dig2_set_9();
 802a72e:	f7ff f90b 	bl	8029948 <dig2_set_9>

		break;
 802a732:	bf00      	nop

	}

	switch( (register_number/10)%10 )
 802a734:	88fb      	ldrh	r3, [r7, #6]
 802a736:	4a47      	ldr	r2, [pc, #284]	; (802a854 <ibutton_a_register_display+0x1bc>)
 802a738:	fba2 2303 	umull	r2, r3, r2, r3
 802a73c:	08db      	lsrs	r3, r3, #3
 802a73e:	b29a      	uxth	r2, r3
 802a740:	4b44      	ldr	r3, [pc, #272]	; (802a854 <ibutton_a_register_display+0x1bc>)
 802a742:	fba3 1302 	umull	r1, r3, r3, r2
 802a746:	08d9      	lsrs	r1, r3, #3
 802a748:	460b      	mov	r3, r1
 802a74a:	009b      	lsls	r3, r3, #2
 802a74c:	440b      	add	r3, r1
 802a74e:	005b      	lsls	r3, r3, #1
 802a750:	1ad3      	subs	r3, r2, r3
 802a752:	b29b      	uxth	r3, r3
 802a754:	2b09      	cmp	r3, #9
 802a756:	d835      	bhi.n	802a7c4 <ibutton_a_register_display+0x12c>
 802a758:	a201      	add	r2, pc, #4	; (adr r2, 802a760 <ibutton_a_register_display+0xc8>)
 802a75a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802a75e:	bf00      	nop
 802a760:	0802a789 	.word	0x0802a789
 802a764:	0802a78f 	.word	0x0802a78f
 802a768:	0802a795 	.word	0x0802a795
 802a76c:	0802a79b 	.word	0x0802a79b
 802a770:	0802a7a1 	.word	0x0802a7a1
 802a774:	0802a7a7 	.word	0x0802a7a7
 802a778:	0802a7ad 	.word	0x0802a7ad
 802a77c:	0802a7b3 	.word	0x0802a7b3
 802a780:	0802a7b9 	.word	0x0802a7b9
 802a784:	0802a7bf 	.word	0x0802a7bf
	{
		case 0:

			dig3_set_0();
 802a788:	f7ff f8f0 	bl	802996c <dig3_set_0>

		break;
 802a78c:	e01a      	b.n	802a7c4 <ibutton_a_register_display+0x12c>

		case 1:

			dig3_set_1();
 802a78e:	f7ff f8ff 	bl	8029990 <dig3_set_1>

		break;
 802a792:	e017      	b.n	802a7c4 <ibutton_a_register_display+0x12c>

		case 2:

			dig3_set_2();
 802a794:	f7ff f90e 	bl	80299b4 <dig3_set_2>

		break;
 802a798:	e014      	b.n	802a7c4 <ibutton_a_register_display+0x12c>

		case 3:

			dig3_set_3();
 802a79a:	f7ff f91d 	bl	80299d8 <dig3_set_3>

		break;
 802a79e:	e011      	b.n	802a7c4 <ibutton_a_register_display+0x12c>

		case 4:

			dig3_set_4();
 802a7a0:	f7ff f92c 	bl	80299fc <dig3_set_4>

		break;
 802a7a4:	e00e      	b.n	802a7c4 <ibutton_a_register_display+0x12c>

		case 5:

			dig3_set_5();
 802a7a6:	f7ff f93b 	bl	8029a20 <dig3_set_5>

		break;
 802a7aa:	e00b      	b.n	802a7c4 <ibutton_a_register_display+0x12c>

		case 6:

			dig3_set_6();
 802a7ac:	f7ff f94a 	bl	8029a44 <dig3_set_6>

		break;
 802a7b0:	e008      	b.n	802a7c4 <ibutton_a_register_display+0x12c>

		case 7:

			dig3_set_7();
 802a7b2:	f7ff f959 	bl	8029a68 <dig3_set_7>

		break;
 802a7b6:	e005      	b.n	802a7c4 <ibutton_a_register_display+0x12c>

		case 8:

			dig3_set_8();
 802a7b8:	f7ff f968 	bl	8029a8c <dig3_set_8>

		break;
 802a7bc:	e002      	b.n	802a7c4 <ibutton_a_register_display+0x12c>

		case 9:

			dig3_set_9();
 802a7be:	f7ff f977 	bl	8029ab0 <dig3_set_9>

		break;
 802a7c2:	bf00      	nop

	}

	switch( register_number%10 )
 802a7c4:	88fa      	ldrh	r2, [r7, #6]
 802a7c6:	4b23      	ldr	r3, [pc, #140]	; (802a854 <ibutton_a_register_display+0x1bc>)
 802a7c8:	fba3 1302 	umull	r1, r3, r3, r2
 802a7cc:	08d9      	lsrs	r1, r3, #3
 802a7ce:	460b      	mov	r3, r1
 802a7d0:	009b      	lsls	r3, r3, #2
 802a7d2:	440b      	add	r3, r1
 802a7d4:	005b      	lsls	r3, r3, #1
 802a7d6:	1ad3      	subs	r3, r2, r3
 802a7d8:	b29b      	uxth	r3, r3
 802a7da:	2b09      	cmp	r3, #9
 802a7dc:	d834      	bhi.n	802a848 <ibutton_a_register_display+0x1b0>
 802a7de:	a201      	add	r2, pc, #4	; (adr r2, 802a7e4 <ibutton_a_register_display+0x14c>)
 802a7e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802a7e4:	0802a80d 	.word	0x0802a80d
 802a7e8:	0802a813 	.word	0x0802a813
 802a7ec:	0802a819 	.word	0x0802a819
 802a7f0:	0802a81f 	.word	0x0802a81f
 802a7f4:	0802a825 	.word	0x0802a825
 802a7f8:	0802a82b 	.word	0x0802a82b
 802a7fc:	0802a831 	.word	0x0802a831
 802a800:	0802a837 	.word	0x0802a837
 802a804:	0802a83d 	.word	0x0802a83d
 802a808:	0802a843 	.word	0x0802a843
	{
		case 0:

			dig4_set_0();
 802a80c:	f7ff f962 	bl	8029ad4 <dig4_set_0>

		break;
 802a810:	e01a      	b.n	802a848 <ibutton_a_register_display+0x1b0>

		case 1:

			dig4_set_1();
 802a812:	f7ff f971 	bl	8029af8 <dig4_set_1>

		break;
 802a816:	e017      	b.n	802a848 <ibutton_a_register_display+0x1b0>

		case 2:

			dig4_set_2();
 802a818:	f7ff f980 	bl	8029b1c <dig4_set_2>

		break;
 802a81c:	e014      	b.n	802a848 <ibutton_a_register_display+0x1b0>

		case 3:

			dig4_set_3();
 802a81e:	f7ff f98f 	bl	8029b40 <dig4_set_3>

		break;
 802a822:	e011      	b.n	802a848 <ibutton_a_register_display+0x1b0>

		case 4:

			dig4_set_4();
 802a824:	f7ff f99e 	bl	8029b64 <dig4_set_4>

		break;
 802a828:	e00e      	b.n	802a848 <ibutton_a_register_display+0x1b0>

		case 5:

			dig4_set_5();
 802a82a:	f7ff f9ad 	bl	8029b88 <dig4_set_5>

		break;
 802a82e:	e00b      	b.n	802a848 <ibutton_a_register_display+0x1b0>

		case 6:

			dig4_set_6();
 802a830:	f7ff f9bc 	bl	8029bac <dig4_set_6>

		break;
 802a834:	e008      	b.n	802a848 <ibutton_a_register_display+0x1b0>

		case 7:

			dig4_set_7();
 802a836:	f7ff f9cb 	bl	8029bd0 <dig4_set_7>

		break;
 802a83a:	e005      	b.n	802a848 <ibutton_a_register_display+0x1b0>

		case 8:

			dig4_set_8();
 802a83c:	f7ff f9da 	bl	8029bf4 <dig4_set_8>

		break;
 802a840:	e002      	b.n	802a848 <ibutton_a_register_display+0x1b0>

		case 9:

			dig4_set_9();
 802a842:	f7ff f9e9 	bl	8029c18 <dig4_set_9>

		break;
 802a846:	bf00      	nop

	}


}
 802a848:	bf00      	nop
 802a84a:	3708      	adds	r7, #8
 802a84c:	46bd      	mov	sp, r7
 802a84e:	bd80      	pop	{r7, pc}
 802a850:	51eb851f 	.word	0x51eb851f
 802a854:	cccccccd 	.word	0xcccccccd

0802a858 <ibutton_b_register_display>:

void ibutton_b_register_display(uint16_t register_number) // функция отрисовки I-button регистра группы В на дисплее
{
 802a858:	b580      	push	{r7, lr}
 802a85a:	b082      	sub	sp, #8
 802a85c:	af00      	add	r7, sp, #0
 802a85e:	4603      	mov	r3, r0
 802a860:	80fb      	strh	r3, [r7, #6]
	dig1_set_b();
 802a862:	f7ff fa33 	bl	8029ccc <dig1_set_b>

	switch( (register_number/100)%10 )
 802a866:	88fb      	ldrh	r3, [r7, #6]
 802a868:	4a69      	ldr	r2, [pc, #420]	; (802aa10 <ibutton_b_register_display+0x1b8>)
 802a86a:	fba2 2303 	umull	r2, r3, r2, r3
 802a86e:	095b      	lsrs	r3, r3, #5
 802a870:	b29a      	uxth	r2, r3
 802a872:	4b68      	ldr	r3, [pc, #416]	; (802aa14 <ibutton_b_register_display+0x1bc>)
 802a874:	fba3 1302 	umull	r1, r3, r3, r2
 802a878:	08d9      	lsrs	r1, r3, #3
 802a87a:	460b      	mov	r3, r1
 802a87c:	009b      	lsls	r3, r3, #2
 802a87e:	440b      	add	r3, r1
 802a880:	005b      	lsls	r3, r3, #1
 802a882:	1ad3      	subs	r3, r2, r3
 802a884:	b29b      	uxth	r3, r3
 802a886:	2b09      	cmp	r3, #9
 802a888:	d834      	bhi.n	802a8f4 <ibutton_b_register_display+0x9c>
 802a88a:	a201      	add	r2, pc, #4	; (adr r2, 802a890 <ibutton_b_register_display+0x38>)
 802a88c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802a890:	0802a8b9 	.word	0x0802a8b9
 802a894:	0802a8bf 	.word	0x0802a8bf
 802a898:	0802a8c5 	.word	0x0802a8c5
 802a89c:	0802a8cb 	.word	0x0802a8cb
 802a8a0:	0802a8d1 	.word	0x0802a8d1
 802a8a4:	0802a8d7 	.word	0x0802a8d7
 802a8a8:	0802a8dd 	.word	0x0802a8dd
 802a8ac:	0802a8e3 	.word	0x0802a8e3
 802a8b0:	0802a8e9 	.word	0x0802a8e9
 802a8b4:	0802a8ef 	.word	0x0802a8ef
	{
		case 0:

			dig2_set_0();
 802a8b8:	f7fe ffa4 	bl	8029804 <dig2_set_0>

		break;
 802a8bc:	e01a      	b.n	802a8f4 <ibutton_b_register_display+0x9c>

		case 1:

			dig2_set_1();
 802a8be:	f7fe ffb3 	bl	8029828 <dig2_set_1>

		break;
 802a8c2:	e017      	b.n	802a8f4 <ibutton_b_register_display+0x9c>

		case 2:

			dig2_set_2();
 802a8c4:	f7fe ffc2 	bl	802984c <dig2_set_2>

		break;
 802a8c8:	e014      	b.n	802a8f4 <ibutton_b_register_display+0x9c>

		case 3:

			dig2_set_3();
 802a8ca:	f7fe ffd1 	bl	8029870 <dig2_set_3>

		break;
 802a8ce:	e011      	b.n	802a8f4 <ibutton_b_register_display+0x9c>

		case 4:

			dig2_set_4();
 802a8d0:	f7fe ffe0 	bl	8029894 <dig2_set_4>

		break;
 802a8d4:	e00e      	b.n	802a8f4 <ibutton_b_register_display+0x9c>

		case 5:

			dig2_set_5();
 802a8d6:	f7fe ffef 	bl	80298b8 <dig2_set_5>

		break;
 802a8da:	e00b      	b.n	802a8f4 <ibutton_b_register_display+0x9c>

		case 6:

			dig2_set_6();
 802a8dc:	f7fe fffe 	bl	80298dc <dig2_set_6>

		break;
 802a8e0:	e008      	b.n	802a8f4 <ibutton_b_register_display+0x9c>

		case 7:

			dig2_set_7();
 802a8e2:	f7ff f80d 	bl	8029900 <dig2_set_7>

		break;
 802a8e6:	e005      	b.n	802a8f4 <ibutton_b_register_display+0x9c>

		case 8:

			dig2_set_8();
 802a8e8:	f7ff f81c 	bl	8029924 <dig2_set_8>

		break;
 802a8ec:	e002      	b.n	802a8f4 <ibutton_b_register_display+0x9c>

		case 9:

			dig2_set_9();
 802a8ee:	f7ff f82b 	bl	8029948 <dig2_set_9>

		break;
 802a8f2:	bf00      	nop

	}

	switch( (register_number/10)%10 )
 802a8f4:	88fb      	ldrh	r3, [r7, #6]
 802a8f6:	4a47      	ldr	r2, [pc, #284]	; (802aa14 <ibutton_b_register_display+0x1bc>)
 802a8f8:	fba2 2303 	umull	r2, r3, r2, r3
 802a8fc:	08db      	lsrs	r3, r3, #3
 802a8fe:	b29a      	uxth	r2, r3
 802a900:	4b44      	ldr	r3, [pc, #272]	; (802aa14 <ibutton_b_register_display+0x1bc>)
 802a902:	fba3 1302 	umull	r1, r3, r3, r2
 802a906:	08d9      	lsrs	r1, r3, #3
 802a908:	460b      	mov	r3, r1
 802a90a:	009b      	lsls	r3, r3, #2
 802a90c:	440b      	add	r3, r1
 802a90e:	005b      	lsls	r3, r3, #1
 802a910:	1ad3      	subs	r3, r2, r3
 802a912:	b29b      	uxth	r3, r3
 802a914:	2b09      	cmp	r3, #9
 802a916:	d835      	bhi.n	802a984 <ibutton_b_register_display+0x12c>
 802a918:	a201      	add	r2, pc, #4	; (adr r2, 802a920 <ibutton_b_register_display+0xc8>)
 802a91a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802a91e:	bf00      	nop
 802a920:	0802a949 	.word	0x0802a949
 802a924:	0802a94f 	.word	0x0802a94f
 802a928:	0802a955 	.word	0x0802a955
 802a92c:	0802a95b 	.word	0x0802a95b
 802a930:	0802a961 	.word	0x0802a961
 802a934:	0802a967 	.word	0x0802a967
 802a938:	0802a96d 	.word	0x0802a96d
 802a93c:	0802a973 	.word	0x0802a973
 802a940:	0802a979 	.word	0x0802a979
 802a944:	0802a97f 	.word	0x0802a97f
	{
		case 0:

			dig3_set_0();
 802a948:	f7ff f810 	bl	802996c <dig3_set_0>

		break;
 802a94c:	e01a      	b.n	802a984 <ibutton_b_register_display+0x12c>

		case 1:

			dig3_set_1();
 802a94e:	f7ff f81f 	bl	8029990 <dig3_set_1>

		break;
 802a952:	e017      	b.n	802a984 <ibutton_b_register_display+0x12c>

		case 2:

			dig3_set_2();
 802a954:	f7ff f82e 	bl	80299b4 <dig3_set_2>

		break;
 802a958:	e014      	b.n	802a984 <ibutton_b_register_display+0x12c>

		case 3:

			dig3_set_3();
 802a95a:	f7ff f83d 	bl	80299d8 <dig3_set_3>

		break;
 802a95e:	e011      	b.n	802a984 <ibutton_b_register_display+0x12c>

		case 4:

			dig3_set_4();
 802a960:	f7ff f84c 	bl	80299fc <dig3_set_4>

		break;
 802a964:	e00e      	b.n	802a984 <ibutton_b_register_display+0x12c>

		case 5:

			dig3_set_5();
 802a966:	f7ff f85b 	bl	8029a20 <dig3_set_5>

		break;
 802a96a:	e00b      	b.n	802a984 <ibutton_b_register_display+0x12c>

		case 6:

			dig3_set_6();
 802a96c:	f7ff f86a 	bl	8029a44 <dig3_set_6>

		break;
 802a970:	e008      	b.n	802a984 <ibutton_b_register_display+0x12c>

		case 7:

			dig3_set_7();
 802a972:	f7ff f879 	bl	8029a68 <dig3_set_7>

		break;
 802a976:	e005      	b.n	802a984 <ibutton_b_register_display+0x12c>

		case 8:

			dig3_set_8();
 802a978:	f7ff f888 	bl	8029a8c <dig3_set_8>

		break;
 802a97c:	e002      	b.n	802a984 <ibutton_b_register_display+0x12c>

		case 9:

			dig3_set_9();
 802a97e:	f7ff f897 	bl	8029ab0 <dig3_set_9>

		break;
 802a982:	bf00      	nop

	}

	switch( register_number%10 )
 802a984:	88fa      	ldrh	r2, [r7, #6]
 802a986:	4b23      	ldr	r3, [pc, #140]	; (802aa14 <ibutton_b_register_display+0x1bc>)
 802a988:	fba3 1302 	umull	r1, r3, r3, r2
 802a98c:	08d9      	lsrs	r1, r3, #3
 802a98e:	460b      	mov	r3, r1
 802a990:	009b      	lsls	r3, r3, #2
 802a992:	440b      	add	r3, r1
 802a994:	005b      	lsls	r3, r3, #1
 802a996:	1ad3      	subs	r3, r2, r3
 802a998:	b29b      	uxth	r3, r3
 802a99a:	2b09      	cmp	r3, #9
 802a99c:	d834      	bhi.n	802aa08 <ibutton_b_register_display+0x1b0>
 802a99e:	a201      	add	r2, pc, #4	; (adr r2, 802a9a4 <ibutton_b_register_display+0x14c>)
 802a9a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802a9a4:	0802a9cd 	.word	0x0802a9cd
 802a9a8:	0802a9d3 	.word	0x0802a9d3
 802a9ac:	0802a9d9 	.word	0x0802a9d9
 802a9b0:	0802a9df 	.word	0x0802a9df
 802a9b4:	0802a9e5 	.word	0x0802a9e5
 802a9b8:	0802a9eb 	.word	0x0802a9eb
 802a9bc:	0802a9f1 	.word	0x0802a9f1
 802a9c0:	0802a9f7 	.word	0x0802a9f7
 802a9c4:	0802a9fd 	.word	0x0802a9fd
 802a9c8:	0802aa03 	.word	0x0802aa03
	{
		case 0:

			dig4_set_0();
 802a9cc:	f7ff f882 	bl	8029ad4 <dig4_set_0>

		break;
 802a9d0:	e01a      	b.n	802aa08 <ibutton_b_register_display+0x1b0>

		case 1:

			dig4_set_1();
 802a9d2:	f7ff f891 	bl	8029af8 <dig4_set_1>

		break;
 802a9d6:	e017      	b.n	802aa08 <ibutton_b_register_display+0x1b0>

		case 2:

			dig4_set_2();
 802a9d8:	f7ff f8a0 	bl	8029b1c <dig4_set_2>

		break;
 802a9dc:	e014      	b.n	802aa08 <ibutton_b_register_display+0x1b0>

		case 3:

			dig4_set_3();
 802a9de:	f7ff f8af 	bl	8029b40 <dig4_set_3>

		break;
 802a9e2:	e011      	b.n	802aa08 <ibutton_b_register_display+0x1b0>

		case 4:

			dig4_set_4();
 802a9e4:	f7ff f8be 	bl	8029b64 <dig4_set_4>

		break;
 802a9e8:	e00e      	b.n	802aa08 <ibutton_b_register_display+0x1b0>

		case 5:

			dig4_set_5();
 802a9ea:	f7ff f8cd 	bl	8029b88 <dig4_set_5>

		break;
 802a9ee:	e00b      	b.n	802aa08 <ibutton_b_register_display+0x1b0>

		case 6:

			dig4_set_6();
 802a9f0:	f7ff f8dc 	bl	8029bac <dig4_set_6>

		break;
 802a9f4:	e008      	b.n	802aa08 <ibutton_b_register_display+0x1b0>

		case 7:

			dig4_set_7();
 802a9f6:	f7ff f8eb 	bl	8029bd0 <dig4_set_7>

		break;
 802a9fa:	e005      	b.n	802aa08 <ibutton_b_register_display+0x1b0>

		case 8:

			dig4_set_8();
 802a9fc:	f7ff f8fa 	bl	8029bf4 <dig4_set_8>

		break;
 802aa00:	e002      	b.n	802aa08 <ibutton_b_register_display+0x1b0>

		case 9:

			dig4_set_9();
 802aa02:	f7ff f909 	bl	8029c18 <dig4_set_9>

		break;
 802aa06:	bf00      	nop

	}


}
 802aa08:	bf00      	nop
 802aa0a:	3708      	adds	r7, #8
 802aa0c:	46bd      	mov	sp, r7
 802aa0e:	bd80      	pop	{r7, pc}
 802aa10:	51eb851f 	.word	0x51eb851f
 802aa14:	cccccccd 	.word	0xcccccccd

0802aa18 <fm25v02_read>:
	}
	return temp_id;
}

void fm25v02_read (uint16_t address, uint8_t* data)
{
 802aa18:	b580      	push	{r7, lr}
 802aa1a:	b084      	sub	sp, #16
 802aa1c:	af00      	add	r7, sp, #0
 802aa1e:	4603      	mov	r3, r0
 802aa20:	6039      	str	r1, [r7, #0]
 802aa22:	80fb      	strh	r3, [r7, #6]
	uint8_t data_out[3];
	data_out[0]= READ;
 802aa24:	2303      	movs	r3, #3
 802aa26:	733b      	strb	r3, [r7, #12]
	data_out[1]= (uint8_t)((address>>8)&0x00FF);
 802aa28:	88fb      	ldrh	r3, [r7, #6]
 802aa2a:	0a1b      	lsrs	r3, r3, #8
 802aa2c:	b29b      	uxth	r3, r3
 802aa2e:	b2db      	uxtb	r3, r3
 802aa30:	737b      	strb	r3, [r7, #13]
	data_out[2]= (uint8_t)(address&0x00FF);
 802aa32:	88fb      	ldrh	r3, [r7, #6]
 802aa34:	b2db      	uxtb	r3, r3
 802aa36:	73bb      	strb	r3, [r7, #14]
	FM25V02_CS_ON();
 802aa38:	2200      	movs	r2, #0
 802aa3a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 802aa3e:	4811      	ldr	r0, [pc, #68]	; (802aa84 <fm25v02_read+0x6c>)
 802aa40:	f7e9 ff26 	bl	8014890 <HAL_GPIO_WritePin>

	while( HAL_SPI_Transmit(&hspi2, &data_out[0], 3, 10) != HAL_OK ) {}
 802aa44:	bf00      	nop
 802aa46:	f107 010c 	add.w	r1, r7, #12
 802aa4a:	230a      	movs	r3, #10
 802aa4c:	2203      	movs	r2, #3
 802aa4e:	480e      	ldr	r0, [pc, #56]	; (802aa88 <fm25v02_read+0x70>)
 802aa50:	f7eb fffb 	bl	8016a4a <HAL_SPI_Transmit>
 802aa54:	4603      	mov	r3, r0
 802aa56:	2b00      	cmp	r3, #0
 802aa58:	d1f5      	bne.n	802aa46 <fm25v02_read+0x2e>
	while( HAL_SPI_Receive(&hspi2, data, 1, 10) != HAL_OK ) {}
 802aa5a:	bf00      	nop
 802aa5c:	230a      	movs	r3, #10
 802aa5e:	2201      	movs	r2, #1
 802aa60:	6839      	ldr	r1, [r7, #0]
 802aa62:	4809      	ldr	r0, [pc, #36]	; (802aa88 <fm25v02_read+0x70>)
 802aa64:	f7ec f92d 	bl	8016cc2 <HAL_SPI_Receive>
 802aa68:	4603      	mov	r3, r0
 802aa6a:	2b00      	cmp	r3, #0
 802aa6c:	d1f6      	bne.n	802aa5c <fm25v02_read+0x44>
	FM25V02_CS_OFF();
 802aa6e:	2201      	movs	r2, #1
 802aa70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 802aa74:	4803      	ldr	r0, [pc, #12]	; (802aa84 <fm25v02_read+0x6c>)
 802aa76:	f7e9 ff0b 	bl	8014890 <HAL_GPIO_WritePin>
}
 802aa7a:	bf00      	nop
 802aa7c:	3710      	adds	r7, #16
 802aa7e:	46bd      	mov	sp, r7
 802aa80:	bd80      	pop	{r7, pc}
 802aa82:	bf00      	nop
 802aa84:	40020400 	.word	0x40020400
 802aa88:	2000819c 	.word	0x2000819c

0802aa8c <fm25v02_write>:

void fm25v02_write (uint16_t address, uint8_t data)
{
 802aa8c:	b580      	push	{r7, lr}
 802aa8e:	b084      	sub	sp, #16
 802aa90:	af00      	add	r7, sp, #0
 802aa92:	4603      	mov	r3, r0
 802aa94:	460a      	mov	r2, r1
 802aa96:	80fb      	strh	r3, [r7, #6]
 802aa98:	4613      	mov	r3, r2
 802aa9a:	717b      	strb	r3, [r7, #5]
	uint8_t data_out[4];
	data_out[0]= WREN;
 802aa9c:	2306      	movs	r3, #6
 802aa9e:	733b      	strb	r3, [r7, #12]
	FM25V02_CS_ON();
 802aaa0:	2200      	movs	r2, #0
 802aaa2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 802aaa6:	481d      	ldr	r0, [pc, #116]	; (802ab1c <fm25v02_write+0x90>)
 802aaa8:	f7e9 fef2 	bl	8014890 <HAL_GPIO_WritePin>
	while( HAL_SPI_Transmit(&hspi2, &data_out[0], 1, 10) != HAL_OK ) {}
 802aaac:	bf00      	nop
 802aaae:	f107 010c 	add.w	r1, r7, #12
 802aab2:	230a      	movs	r3, #10
 802aab4:	2201      	movs	r2, #1
 802aab6:	481a      	ldr	r0, [pc, #104]	; (802ab20 <fm25v02_write+0x94>)
 802aab8:	f7eb ffc7 	bl	8016a4a <HAL_SPI_Transmit>
 802aabc:	4603      	mov	r3, r0
 802aabe:	2b00      	cmp	r3, #0
 802aac0:	d1f5      	bne.n	802aaae <fm25v02_write+0x22>
	FM25V02_CS_OFF();
 802aac2:	2201      	movs	r2, #1
 802aac4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 802aac8:	4814      	ldr	r0, [pc, #80]	; (802ab1c <fm25v02_write+0x90>)
 802aaca:	f7e9 fee1 	bl	8014890 <HAL_GPIO_WritePin>
	data_out[0]= WRITE;
 802aace:	2302      	movs	r3, #2
 802aad0:	733b      	strb	r3, [r7, #12]
	data_out[1]= (uint8_t)((address>>8)&0x00FF);
 802aad2:	88fb      	ldrh	r3, [r7, #6]
 802aad4:	0a1b      	lsrs	r3, r3, #8
 802aad6:	b29b      	uxth	r3, r3
 802aad8:	b2db      	uxtb	r3, r3
 802aada:	737b      	strb	r3, [r7, #13]
	data_out[2]= (uint8_t)(address&0x00FF);
 802aadc:	88fb      	ldrh	r3, [r7, #6]
 802aade:	b2db      	uxtb	r3, r3
 802aae0:	73bb      	strb	r3, [r7, #14]
	data_out[3]= data;
 802aae2:	797b      	ldrb	r3, [r7, #5]
 802aae4:	73fb      	strb	r3, [r7, #15]
	FM25V02_CS_ON();
 802aae6:	2200      	movs	r2, #0
 802aae8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 802aaec:	480b      	ldr	r0, [pc, #44]	; (802ab1c <fm25v02_write+0x90>)
 802aaee:	f7e9 fecf 	bl	8014890 <HAL_GPIO_WritePin>
	while( HAL_SPI_Transmit(&hspi2, &data_out[0], 4, 10) != HAL_OK ) {}
 802aaf2:	bf00      	nop
 802aaf4:	f107 010c 	add.w	r1, r7, #12
 802aaf8:	230a      	movs	r3, #10
 802aafa:	2204      	movs	r2, #4
 802aafc:	4808      	ldr	r0, [pc, #32]	; (802ab20 <fm25v02_write+0x94>)
 802aafe:	f7eb ffa4 	bl	8016a4a <HAL_SPI_Transmit>
 802ab02:	4603      	mov	r3, r0
 802ab04:	2b00      	cmp	r3, #0
 802ab06:	d1f5      	bne.n	802aaf4 <fm25v02_write+0x68>
	FM25V02_CS_OFF();
 802ab08:	2201      	movs	r2, #1
 802ab0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 802ab0e:	4803      	ldr	r0, [pc, #12]	; (802ab1c <fm25v02_write+0x90>)
 802ab10:	f7e9 febe 	bl	8014890 <HAL_GPIO_WritePin>
}
 802ab14:	bf00      	nop
 802ab16:	3710      	adds	r7, #16
 802ab18:	46bd      	mov	sp, r7
 802ab1a:	bd80      	pop	{r7, pc}
 802ab1c:	40020400 	.word	0x40020400
 802ab20:	2000819c 	.word	0x2000819c

0802ab24 <fm25v02_fast_write>:

uint8_t fm25v02_fast_write (uint16_t address, uint8_t* data, uint16_t Size)
{
 802ab24:	b580      	push	{r7, lr}
 802ab26:	b084      	sub	sp, #16
 802ab28:	af00      	add	r7, sp, #0
 802ab2a:	4603      	mov	r3, r0
 802ab2c:	6039      	str	r1, [r7, #0]
 802ab2e:	80fb      	strh	r3, [r7, #6]
 802ab30:	4613      	mov	r3, r2
 802ab32:	80bb      	strh	r3, [r7, #4]
	for(uint8_t i=0; i<Size; i++)
 802ab34:	2300      	movs	r3, #0
 802ab36:	73fb      	strb	r3, [r7, #15]
 802ab38:	e00e      	b.n	802ab58 <fm25v02_fast_write+0x34>
	{
		fm25v02_write(address+i, *(data+i));
 802ab3a:	7bfb      	ldrb	r3, [r7, #15]
 802ab3c:	b29a      	uxth	r2, r3
 802ab3e:	88fb      	ldrh	r3, [r7, #6]
 802ab40:	4413      	add	r3, r2
 802ab42:	b298      	uxth	r0, r3
 802ab44:	7bfb      	ldrb	r3, [r7, #15]
 802ab46:	683a      	ldr	r2, [r7, #0]
 802ab48:	4413      	add	r3, r2
 802ab4a:	781b      	ldrb	r3, [r3, #0]
 802ab4c:	4619      	mov	r1, r3
 802ab4e:	f7ff ff9d 	bl	802aa8c <fm25v02_write>
	for(uint8_t i=0; i<Size; i++)
 802ab52:	7bfb      	ldrb	r3, [r7, #15]
 802ab54:	3301      	adds	r3, #1
 802ab56:	73fb      	strb	r3, [r7, #15]
 802ab58:	7bfb      	ldrb	r3, [r7, #15]
 802ab5a:	b29b      	uxth	r3, r3
 802ab5c:	88ba      	ldrh	r2, [r7, #4]
 802ab5e:	429a      	cmp	r2, r3
 802ab60:	d8eb      	bhi.n	802ab3a <fm25v02_fast_write+0x16>
	}
	return 0;
 802ab62:	2300      	movs	r3, #0
}
 802ab64:	4618      	mov	r0, r3
 802ab66:	3710      	adds	r7, #16
 802ab68:	46bd      	mov	sp, r7
 802ab6a:	bd80      	pop	{r7, pc}

0802ab6c <fm25v02_fast_read>:

HAL_StatusTypeDef fm25v02_fast_read (uint16_t address, uint8_t* data, uint16_t Size)
{
 802ab6c:	b580      	push	{r7, lr}
 802ab6e:	b084      	sub	sp, #16
 802ab70:	af00      	add	r7, sp, #0
 802ab72:	4603      	mov	r3, r0
 802ab74:	6039      	str	r1, [r7, #0]
 802ab76:	80fb      	strh	r3, [r7, #6]
 802ab78:	4613      	mov	r3, r2
 802ab7a:	80bb      	strh	r3, [r7, #4]
	uint8_t data_out[4];
	data_out[0]= FSTRD;
 802ab7c:	230b      	movs	r3, #11
 802ab7e:	733b      	strb	r3, [r7, #12]
	data_out[1]= (uint8_t)((address>>8)&0x00FF);
 802ab80:	88fb      	ldrh	r3, [r7, #6]
 802ab82:	0a1b      	lsrs	r3, r3, #8
 802ab84:	b29b      	uxth	r3, r3
 802ab86:	b2db      	uxtb	r3, r3
 802ab88:	737b      	strb	r3, [r7, #13]
	data_out[2]= (uint8_t)(address&0x00FF);
 802ab8a:	88fb      	ldrh	r3, [r7, #6]
 802ab8c:	b2db      	uxtb	r3, r3
 802ab8e:	73bb      	strb	r3, [r7, #14]
	data_out[3]= 0xFF;
 802ab90:	23ff      	movs	r3, #255	; 0xff
 802ab92:	73fb      	strb	r3, [r7, #15]
	FM25V02_CS_ON();
 802ab94:	2200      	movs	r2, #0
 802ab96:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 802ab9a:	4811      	ldr	r0, [pc, #68]	; (802abe0 <fm25v02_fast_read+0x74>)
 802ab9c:	f7e9 fe78 	bl	8014890 <HAL_GPIO_WritePin>

	while( HAL_SPI_Transmit(&hspi2, &data_out[0], 4, 10) != HAL_OK ) {}
 802aba0:	bf00      	nop
 802aba2:	f107 010c 	add.w	r1, r7, #12
 802aba6:	230a      	movs	r3, #10
 802aba8:	2204      	movs	r2, #4
 802abaa:	480e      	ldr	r0, [pc, #56]	; (802abe4 <fm25v02_fast_read+0x78>)
 802abac:	f7eb ff4d 	bl	8016a4a <HAL_SPI_Transmit>
 802abb0:	4603      	mov	r3, r0
 802abb2:	2b00      	cmp	r3, #0
 802abb4:	d1f5      	bne.n	802aba2 <fm25v02_fast_read+0x36>
	while( HAL_SPI_Receive(&hspi2, data, Size, 10) != HAL_OK ) {}
 802abb6:	bf00      	nop
 802abb8:	88ba      	ldrh	r2, [r7, #4]
 802abba:	230a      	movs	r3, #10
 802abbc:	6839      	ldr	r1, [r7, #0]
 802abbe:	4809      	ldr	r0, [pc, #36]	; (802abe4 <fm25v02_fast_read+0x78>)
 802abc0:	f7ec f87f 	bl	8016cc2 <HAL_SPI_Receive>
 802abc4:	4603      	mov	r3, r0
 802abc6:	2b00      	cmp	r3, #0
 802abc8:	d1f6      	bne.n	802abb8 <fm25v02_fast_read+0x4c>
	FM25V02_CS_OFF();
 802abca:	2201      	movs	r2, #1
 802abcc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 802abd0:	4803      	ldr	r0, [pc, #12]	; (802abe0 <fm25v02_fast_read+0x74>)
 802abd2:	f7e9 fe5d 	bl	8014890 <HAL_GPIO_WritePin>
	return HAL_OK;
 802abd6:	2300      	movs	r3, #0
}
 802abd8:	4618      	mov	r0, r3
 802abda:	3710      	adds	r7, #16
 802abdc:	46bd      	mov	sp, r7
 802abde:	bd80      	pop	{r7, pc}
 802abe0:	40020400 	.word	0x40020400
 802abe4:	2000819c 	.word	0x2000819c

0802abe8 <BUZ_ON>:


//---функции включения и отключения светодиодов, зуммера и транзистора охранного светодиода-----------------

void BUZ_ON(void) // включение зуммера
{
 802abe8:	b580      	push	{r7, lr}
 802abea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 802abec:	2201      	movs	r2, #1
 802abee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 802abf2:	4802      	ldr	r0, [pc, #8]	; (802abfc <BUZ_ON+0x14>)
 802abf4:	f7e9 fe4c 	bl	8014890 <HAL_GPIO_WritePin>
}
 802abf8:	bf00      	nop
 802abfa:	bd80      	pop	{r7, pc}
 802abfc:	40020c00 	.word	0x40020c00

0802ac00 <BUZ_OFF>:

void BUZ_OFF(void) // выключение зуммера
{
 802ac00:	b580      	push	{r7, lr}
 802ac02:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 802ac04:	2200      	movs	r2, #0
 802ac06:	f44f 6180 	mov.w	r1, #1024	; 0x400
 802ac0a:	4802      	ldr	r0, [pc, #8]	; (802ac14 <BUZ_OFF+0x14>)
 802ac0c:	f7e9 fe40 	bl	8014890 <HAL_GPIO_WritePin>
}
 802ac10:	bf00      	nop
 802ac12:	bd80      	pop	{r7, pc}
 802ac14:	40020c00 	.word	0x40020c00

0802ac18 <LED_VD4_ON>:
{
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
}

void LED_VD4_ON(void) // включение светодиода VD4
{
 802ac18:	b480      	push	{r7}
 802ac1a:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOI, GPIO_PIN_8, GPIO_PIN_SET);
}
 802ac1c:	bf00      	nop
 802ac1e:	46bd      	mov	sp, r7
 802ac20:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ac24:	4770      	bx	lr

0802ac26 <LED_VD4_OFF>:

void LED_VD4_OFF(void) // выключение светодиода VD4
{
 802ac26:	b480      	push	{r7}
 802ac28:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOI, GPIO_PIN_8, GPIO_PIN_RESET);
}
 802ac2a:	bf00      	nop
 802ac2c:	46bd      	mov	sp, r7
 802ac2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ac32:	4770      	bx	lr

0802ac34 <LED1_OFF>:
{
	//HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_6);
}

void LED1_OFF(void) // выключение светодиода LED1
{
 802ac34:	b580      	push	{r7, lr}
 802ac36:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 802ac38:	2200      	movs	r2, #0
 802ac3a:	2120      	movs	r1, #32
 802ac3c:	4802      	ldr	r0, [pc, #8]	; (802ac48 <LED1_OFF+0x14>)
 802ac3e:	f7e9 fe27 	bl	8014890 <HAL_GPIO_WritePin>
}
 802ac42:	bf00      	nop
 802ac44:	bd80      	pop	{r7, pc}
 802ac46:	bf00      	nop
 802ac48:	40020400 	.word	0x40020400

0802ac4c <LED1_ON>:

void LED1_ON(void) // включение светодиода LED1
{
 802ac4c:	b580      	push	{r7, lr}
 802ac4e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 802ac50:	2201      	movs	r2, #1
 802ac52:	2120      	movs	r1, #32
 802ac54:	4802      	ldr	r0, [pc, #8]	; (802ac60 <LED1_ON+0x14>)
 802ac56:	f7e9 fe1b 	bl	8014890 <HAL_GPIO_WritePin>
}
 802ac5a:	bf00      	nop
 802ac5c:	bd80      	pop	{r7, pc}
 802ac5e:	bf00      	nop
 802ac60:	40020400 	.word	0x40020400

0802ac64 <LED2_OFF>:

void LED2_OFF(void) // выключение светодиода LED2
{
 802ac64:	b580      	push	{r7, lr}
 802ac66:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 802ac68:	2200      	movs	r2, #0
 802ac6a:	2102      	movs	r1, #2
 802ac6c:	4802      	ldr	r0, [pc, #8]	; (802ac78 <LED2_OFF+0x14>)
 802ac6e:	f7e9 fe0f 	bl	8014890 <HAL_GPIO_WritePin>
}
 802ac72:	bf00      	nop
 802ac74:	bd80      	pop	{r7, pc}
 802ac76:	bf00      	nop
 802ac78:	40021000 	.word	0x40021000

0802ac7c <LED2_ON>:

void LED2_ON(void) // включение светодиода LED2
{
 802ac7c:	b580      	push	{r7, lr}
 802ac7e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
 802ac80:	2201      	movs	r2, #1
 802ac82:	2102      	movs	r1, #2
 802ac84:	4802      	ldr	r0, [pc, #8]	; (802ac90 <LED2_ON+0x14>)
 802ac86:	f7e9 fe03 	bl	8014890 <HAL_GPIO_WritePin>
}
 802ac8a:	bf00      	nop
 802ac8c:	bd80      	pop	{r7, pc}
 802ac8e:	bf00      	nop
 802ac90:	40021000 	.word	0x40021000

0802ac94 <LED3_OFF>:

void LED3_OFF(void) // выключение светодиода LED3
{
 802ac94:	b580      	push	{r7, lr}
 802ac96:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_RESET);
 802ac98:	2200      	movs	r2, #0
 802ac9a:	2120      	movs	r1, #32
 802ac9c:	4802      	ldr	r0, [pc, #8]	; (802aca8 <LED3_OFF+0x14>)
 802ac9e:	f7e9 fdf7 	bl	8014890 <HAL_GPIO_WritePin>
}
 802aca2:	bf00      	nop
 802aca4:	bd80      	pop	{r7, pc}
 802aca6:	bf00      	nop
 802aca8:	40021000 	.word	0x40021000

0802acac <LED3_ON>:

void LED3_ON(void) // включение светодиода LED3
{
 802acac:	b580      	push	{r7, lr}
 802acae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_SET);
 802acb0:	2201      	movs	r2, #1
 802acb2:	2120      	movs	r1, #32
 802acb4:	4802      	ldr	r0, [pc, #8]	; (802acc0 <LED3_ON+0x14>)
 802acb6:	f7e9 fdeb 	bl	8014890 <HAL_GPIO_WritePin>
}
 802acba:	bf00      	nop
 802acbc:	bd80      	pop	{r7, pc}
 802acbe:	bf00      	nop
 802acc0:	40021000 	.word	0x40021000

0802acc4 <LED4_OFF>:

void LED4_OFF(void) // выключение светодиода LED4
{
 802acc4:	b580      	push	{r7, lr}
 802acc6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);
 802acc8:	2200      	movs	r2, #0
 802acca:	2140      	movs	r1, #64	; 0x40
 802accc:	4802      	ldr	r0, [pc, #8]	; (802acd8 <LED4_OFF+0x14>)
 802acce:	f7e9 fddf 	bl	8014890 <HAL_GPIO_WritePin>
}
 802acd2:	bf00      	nop
 802acd4:	bd80      	pop	{r7, pc}
 802acd6:	bf00      	nop
 802acd8:	40021000 	.word	0x40021000

0802acdc <LED4_ON>:

void LED4_ON(void) // включение светодиода LED4
{
 802acdc:	b580      	push	{r7, lr}
 802acde:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_SET);
 802ace0:	2201      	movs	r2, #1
 802ace2:	2140      	movs	r1, #64	; 0x40
 802ace4:	4802      	ldr	r0, [pc, #8]	; (802acf0 <LED4_ON+0x14>)
 802ace6:	f7e9 fdd3 	bl	8014890 <HAL_GPIO_WritePin>
}
 802acea:	bf00      	nop
 802acec:	bd80      	pop	{r7, pc}
 802acee:	bf00      	nop
 802acf0:	40021000 	.word	0x40021000

0802acf4 <LED5_OFF>:

void LED5_OFF(void) // выключение светодиода LED5
{
 802acf4:	b580      	push	{r7, lr}
 802acf6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 802acf8:	2200      	movs	r2, #0
 802acfa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 802acfe:	4802      	ldr	r0, [pc, #8]	; (802ad08 <LED5_OFF+0x14>)
 802ad00:	f7e9 fdc6 	bl	8014890 <HAL_GPIO_WritePin>
}
 802ad04:	bf00      	nop
 802ad06:	bd80      	pop	{r7, pc}
 802ad08:	40020800 	.word	0x40020800

0802ad0c <LED5_ON>:

void LED5_ON(void) // включение светодиода LED5
{
 802ad0c:	b580      	push	{r7, lr}
 802ad0e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 802ad10:	2201      	movs	r2, #1
 802ad12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 802ad16:	4802      	ldr	r0, [pc, #8]	; (802ad20 <LED5_ON+0x14>)
 802ad18:	f7e9 fdba 	bl	8014890 <HAL_GPIO_WritePin>
}
 802ad1c:	bf00      	nop
 802ad1e:	bd80      	pop	{r7, pc}
 802ad20:	40020800 	.word	0x40020800

0802ad24 <LED6_OFF>:

void LED6_OFF(void) // выключение светодиода LED6
{
 802ad24:	b580      	push	{r7, lr}
 802ad26:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 802ad28:	2200      	movs	r2, #0
 802ad2a:	2102      	movs	r1, #2
 802ad2c:	4802      	ldr	r0, [pc, #8]	; (802ad38 <LED6_OFF+0x14>)
 802ad2e:	f7e9 fdaf 	bl	8014890 <HAL_GPIO_WritePin>
}
 802ad32:	bf00      	nop
 802ad34:	bd80      	pop	{r7, pc}
 802ad36:	bf00      	nop
 802ad38:	40020800 	.word	0x40020800

0802ad3c <LED6_ON>:

void LED6_ON(void) // включение светодиода LED6
{
 802ad3c:	b580      	push	{r7, lr}
 802ad3e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 802ad40:	2201      	movs	r2, #1
 802ad42:	2102      	movs	r1, #2
 802ad44:	4802      	ldr	r0, [pc, #8]	; (802ad50 <LED6_ON+0x14>)
 802ad46:	f7e9 fda3 	bl	8014890 <HAL_GPIO_WritePin>
}
 802ad4a:	bf00      	nop
 802ad4c:	bd80      	pop	{r7, pc}
 802ad4e:	bf00      	nop
 802ad50:	40020800 	.word	0x40020800

0802ad54 <LED7_OFF>:

void LED7_OFF(void) // выключение светодиода LED7
{
 802ad54:	b580      	push	{r7, lr}
 802ad56:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 802ad58:	2200      	movs	r2, #0
 802ad5a:	2101      	movs	r1, #1
 802ad5c:	4802      	ldr	r0, [pc, #8]	; (802ad68 <LED7_OFF+0x14>)
 802ad5e:	f7e9 fd97 	bl	8014890 <HAL_GPIO_WritePin>
}
 802ad62:	bf00      	nop
 802ad64:	bd80      	pop	{r7, pc}
 802ad66:	bf00      	nop
 802ad68:	40020000 	.word	0x40020000

0802ad6c <LED7_ON>:

void LED7_ON(void) // вклюдченище светодиода LED7
{
 802ad6c:	b580      	push	{r7, lr}
 802ad6e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 802ad70:	2201      	movs	r2, #1
 802ad72:	2101      	movs	r1, #1
 802ad74:	4802      	ldr	r0, [pc, #8]	; (802ad80 <LED7_ON+0x14>)
 802ad76:	f7e9 fd8b 	bl	8014890 <HAL_GPIO_WritePin>
}
 802ad7a:	bf00      	nop
 802ad7c:	bd80      	pop	{r7, pc}
 802ad7e:	bf00      	nop
 802ad80:	40020000 	.word	0x40020000

0802ad84 <LED8_OFF>:

void LED8_OFF(void) // выключение светодиода LED8
{
 802ad84:	b580      	push	{r7, lr}
 802ad86:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 802ad88:	2200      	movs	r2, #0
 802ad8a:	2102      	movs	r1, #2
 802ad8c:	4802      	ldr	r0, [pc, #8]	; (802ad98 <LED8_OFF+0x14>)
 802ad8e:	f7e9 fd7f 	bl	8014890 <HAL_GPIO_WritePin>
}
 802ad92:	bf00      	nop
 802ad94:	bd80      	pop	{r7, pc}
 802ad96:	bf00      	nop
 802ad98:	40020000 	.word	0x40020000

0802ad9c <LED8_ON>:

void LED8_ON(void) // включение светодиода LED8
{
 802ad9c:	b580      	push	{r7, lr}
 802ad9e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 802ada0:	2201      	movs	r2, #1
 802ada2:	2102      	movs	r1, #2
 802ada4:	4802      	ldr	r0, [pc, #8]	; (802adb0 <LED8_ON+0x14>)
 802ada6:	f7e9 fd73 	bl	8014890 <HAL_GPIO_WritePin>
}
 802adaa:	bf00      	nop
 802adac:	bd80      	pop	{r7, pc}
 802adae:	bf00      	nop
 802adb0:	40020000 	.word	0x40020000

0802adb4 <LED2_TOGGLE>:
{
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
}

void LED2_TOGGLE(void) // переключение светодиода LED2
{
 802adb4:	b580      	push	{r7, lr}
 802adb6:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1);
 802adb8:	2102      	movs	r1, #2
 802adba:	4802      	ldr	r0, [pc, #8]	; (802adc4 <LED2_TOGGLE+0x10>)
 802adbc:	f7e9 fd81 	bl	80148c2 <HAL_GPIO_TogglePin>
}
 802adc0:	bf00      	nop
 802adc2:	bd80      	pop	{r7, pc}
 802adc4:	40021000 	.word	0x40021000

0802adc8 <PHASE_A_ON>:

//-------------------------------------------------------------------------------------------------------

//---функции включения и отключения фаз-----------------
void PHASE_A_ON(void)
{
 802adc8:	b580      	push	{r7, lr}
 802adca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET);
 802adcc:	2201      	movs	r2, #1
 802adce:	2110      	movs	r1, #16
 802add0:	4802      	ldr	r0, [pc, #8]	; (802addc <PHASE_A_ON+0x14>)
 802add2:	f7e9 fd5d 	bl	8014890 <HAL_GPIO_WritePin>
}
 802add6:	bf00      	nop
 802add8:	bd80      	pop	{r7, pc}
 802adda:	bf00      	nop
 802addc:	40021000 	.word	0x40021000

0802ade0 <PHASE_A_OFF>:

void PHASE_A_OFF(void)
{
 802ade0:	b580      	push	{r7, lr}
 802ade2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 802ade4:	2200      	movs	r2, #0
 802ade6:	2110      	movs	r1, #16
 802ade8:	4802      	ldr	r0, [pc, #8]	; (802adf4 <PHASE_A_OFF+0x14>)
 802adea:	f7e9 fd51 	bl	8014890 <HAL_GPIO_WritePin>
}
 802adee:	bf00      	nop
 802adf0:	bd80      	pop	{r7, pc}
 802adf2:	bf00      	nop
 802adf4:	40021000 	.word	0x40021000

0802adf8 <PHASE_B_ON>:

void PHASE_B_ON(void)
{
 802adf8:	b580      	push	{r7, lr}
 802adfa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 802adfc:	2201      	movs	r2, #1
 802adfe:	2108      	movs	r1, #8
 802ae00:	4802      	ldr	r0, [pc, #8]	; (802ae0c <PHASE_B_ON+0x14>)
 802ae02:	f7e9 fd45 	bl	8014890 <HAL_GPIO_WritePin>
}
 802ae06:	bf00      	nop
 802ae08:	bd80      	pop	{r7, pc}
 802ae0a:	bf00      	nop
 802ae0c:	40021000 	.word	0x40021000

0802ae10 <PHASE_B_OFF>:

void PHASE_B_OFF(void)
{
 802ae10:	b580      	push	{r7, lr}
 802ae12:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 802ae14:	2200      	movs	r2, #0
 802ae16:	2108      	movs	r1, #8
 802ae18:	4802      	ldr	r0, [pc, #8]	; (802ae24 <PHASE_B_OFF+0x14>)
 802ae1a:	f7e9 fd39 	bl	8014890 <HAL_GPIO_WritePin>
}
 802ae1e:	bf00      	nop
 802ae20:	bd80      	pop	{r7, pc}
 802ae22:	bf00      	nop
 802ae24:	40021000 	.word	0x40021000

0802ae28 <PHASE_C_ON>:

void PHASE_C_ON(void)
{
 802ae28:	b580      	push	{r7, lr}
 802ae2a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_SET);
 802ae2c:	2201      	movs	r2, #1
 802ae2e:	2104      	movs	r1, #4
 802ae30:	4802      	ldr	r0, [pc, #8]	; (802ae3c <PHASE_C_ON+0x14>)
 802ae32:	f7e9 fd2d 	bl	8014890 <HAL_GPIO_WritePin>
}
 802ae36:	bf00      	nop
 802ae38:	bd80      	pop	{r7, pc}
 802ae3a:	bf00      	nop
 802ae3c:	40021000 	.word	0x40021000

0802ae40 <PHASE_C_OFF>:

void PHASE_C_OFF(void)
{
 802ae40:	b580      	push	{r7, lr}
 802ae42:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
 802ae44:	2200      	movs	r2, #0
 802ae46:	2104      	movs	r1, #4
 802ae48:	4802      	ldr	r0, [pc, #8]	; (802ae54 <PHASE_C_OFF+0x14>)
 802ae4a:	f7e9 fd21 	bl	8014890 <HAL_GPIO_WritePin>
}
 802ae4e:	bf00      	nop
 802ae50:	bd80      	pop	{r7, pc}
 802ae52:	bf00      	nop
 802ae54:	40021000 	.word	0x40021000

0802ae58 <find_str>:

//uint8_t send_ok[] = "SEND OK\r\n";
uint8_t send_ok[] = "SEND OK";

uint8_t find_str(uint8_t* buf_in, uint16_t buf_in_len, uint8_t* buf_search, uint16_t buf_search_len)
{
 802ae58:	b480      	push	{r7}
 802ae5a:	b087      	sub	sp, #28
 802ae5c:	af00      	add	r7, sp, #0
 802ae5e:	60f8      	str	r0, [r7, #12]
 802ae60:	607a      	str	r2, [r7, #4]
 802ae62:	461a      	mov	r2, r3
 802ae64:	460b      	mov	r3, r1
 802ae66:	817b      	strh	r3, [r7, #10]
 802ae68:	4613      	mov	r3, r2
 802ae6a:	813b      	strh	r3, [r7, #8]
	uint8_t j=0;
 802ae6c:	2300      	movs	r3, #0
 802ae6e:	75fb      	strb	r3, [r7, #23]

	for(uint8_t i=0; i<buf_in_len; i++)
 802ae70:	2300      	movs	r3, #0
 802ae72:	75bb      	strb	r3, [r7, #22]
 802ae74:	e018      	b.n	802aea8 <find_str+0x50>
	{
		if( *( buf_in+i ) == *(buf_search+j) )
 802ae76:	7dbb      	ldrb	r3, [r7, #22]
 802ae78:	68fa      	ldr	r2, [r7, #12]
 802ae7a:	4413      	add	r3, r2
 802ae7c:	781a      	ldrb	r2, [r3, #0]
 802ae7e:	7dfb      	ldrb	r3, [r7, #23]
 802ae80:	6879      	ldr	r1, [r7, #4]
 802ae82:	440b      	add	r3, r1
 802ae84:	781b      	ldrb	r3, [r3, #0]
 802ae86:	429a      	cmp	r2, r3
 802ae88:	d109      	bne.n	802ae9e <find_str+0x46>
		{
			j++;
 802ae8a:	7dfb      	ldrb	r3, [r7, #23]
 802ae8c:	3301      	adds	r3, #1
 802ae8e:	75fb      	strb	r3, [r7, #23]
			if(j>=buf_search_len)
 802ae90:	7dfb      	ldrb	r3, [r7, #23]
 802ae92:	b29b      	uxth	r3, r3
 802ae94:	893a      	ldrh	r2, [r7, #8]
 802ae96:	429a      	cmp	r2, r3
 802ae98:	d803      	bhi.n	802aea2 <find_str+0x4a>
			{
				return 1;
 802ae9a:	2301      	movs	r3, #1
 802ae9c:	e00a      	b.n	802aeb4 <find_str+0x5c>
			}
		}
		else
		{
			j=0;
 802ae9e:	2300      	movs	r3, #0
 802aea0:	75fb      	strb	r3, [r7, #23]
	for(uint8_t i=0; i<buf_in_len; i++)
 802aea2:	7dbb      	ldrb	r3, [r7, #22]
 802aea4:	3301      	adds	r3, #1
 802aea6:	75bb      	strb	r3, [r7, #22]
 802aea8:	7dbb      	ldrb	r3, [r7, #22]
 802aeaa:	b29b      	uxth	r3, r3
 802aeac:	897a      	ldrh	r2, [r7, #10]
 802aeae:	429a      	cmp	r2, r3
 802aeb0:	d8e1      	bhi.n	802ae76 <find_str+0x1e>
		}
	}

	return 0;
 802aeb2:	2300      	movs	r3, #0
}
 802aeb4:	4618      	mov	r0, r3
 802aeb6:	371c      	adds	r7, #28
 802aeb8:	46bd      	mov	sp, r7
 802aeba:	f85d 7b04 	ldr.w	r7, [sp], #4
 802aebe:	4770      	bx	lr

0802aec0 <m95_power_on>:

void m95_power_on(void) // функция включения питания
{
 802aec0:	b580      	push	{r7, lr}
 802aec2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 802aec4:	2200      	movs	r2, #0
 802aec6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 802aeca:	480c      	ldr	r0, [pc, #48]	; (802aefc <m95_power_on+0x3c>)
 802aecc:	f7e9 fce0 	bl	8014890 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 802aed0:	2064      	movs	r0, #100	; 0x64
 802aed2:	f7e7 fff9 	bl	8012ec8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
 802aed6:	2201      	movs	r2, #1
 802aed8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 802aedc:	4807      	ldr	r0, [pc, #28]	; (802aefc <m95_power_on+0x3c>)
 802aede:	f7e9 fcd7 	bl	8014890 <HAL_GPIO_WritePin>
	HAL_Delay(1100);
 802aee2:	f240 404c 	movw	r0, #1100	; 0x44c
 802aee6:	f7e7 ffef 	bl	8012ec8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 802aeea:	2200      	movs	r2, #0
 802aeec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 802aef0:	4802      	ldr	r0, [pc, #8]	; (802aefc <m95_power_on+0x3c>)
 802aef2:	f7e9 fccd 	bl	8014890 <HAL_GPIO_WritePin>
}
 802aef6:	bf00      	nop
 802aef8:	bd80      	pop	{r7, pc}
 802aefa:	bf00      	nop
 802aefc:	40021000 	.word	0x40021000

0802af00 <m95_power_off>:

void m95_power_off(void)
{
 802af00:	b580      	push	{r7, lr}
 802af02:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 802af04:	2200      	movs	r2, #0
 802af06:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 802af0a:	480c      	ldr	r0, [pc, #48]	; (802af3c <m95_power_off+0x3c>)
 802af0c:	f7e9 fcc0 	bl	8014890 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 802af10:	2064      	movs	r0, #100	; 0x64
 802af12:	f7e7 ffd9 	bl	8012ec8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
 802af16:	2201      	movs	r2, #1
 802af18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 802af1c:	4807      	ldr	r0, [pc, #28]	; (802af3c <m95_power_off+0x3c>)
 802af1e:	f7e9 fcb7 	bl	8014890 <HAL_GPIO_WritePin>
	HAL_Delay(1100);
 802af22:	f240 404c 	movw	r0, #1100	; 0x44c
 802af26:	f7e7 ffcf 	bl	8012ec8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 802af2a:	2200      	movs	r2, #0
 802af2c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 802af30:	4802      	ldr	r0, [pc, #8]	; (802af3c <m95_power_off+0x3c>)
 802af32:	f7e9 fcad 	bl	8014890 <HAL_GPIO_WritePin>
}
 802af36:	bf00      	nop
 802af38:	bd80      	pop	{r7, pc}
 802af3a:	bf00      	nop
 802af3c:	40021000 	.word	0x40021000

0802af40 <modem_rx_buffer_clear>:



void modem_rx_buffer_clear (void)
{
 802af40:	b480      	push	{r7}
 802af42:	b083      	sub	sp, #12
 802af44:	af00      	add	r7, sp, #0
	for(uint16_t i=0; i<256; i++)
 802af46:	2300      	movs	r3, #0
 802af48:	80fb      	strh	r3, [r7, #6]
 802af4a:	e006      	b.n	802af5a <modem_rx_buffer_clear+0x1a>
	{
		modem_rx_buffer[i] = 0;
 802af4c:	88fb      	ldrh	r3, [r7, #6]
 802af4e:	4a08      	ldr	r2, [pc, #32]	; (802af70 <modem_rx_buffer_clear+0x30>)
 802af50:	2100      	movs	r1, #0
 802af52:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i=0; i<256; i++)
 802af54:	88fb      	ldrh	r3, [r7, #6]
 802af56:	3301      	adds	r3, #1
 802af58:	80fb      	strh	r3, [r7, #6]
 802af5a:	88fb      	ldrh	r3, [r7, #6]
 802af5c:	2bff      	cmp	r3, #255	; 0xff
 802af5e:	d9f5      	bls.n	802af4c <modem_rx_buffer_clear+0xc>
	}
}
 802af60:	bf00      	nop
 802af62:	bf00      	nop
 802af64:	370c      	adds	r7, #12
 802af66:	46bd      	mov	sp, r7
 802af68:	f85d 7b04 	ldr.w	r7, [sp], #4
 802af6c:	4770      	bx	lr
 802af6e:	bf00      	nop
 802af70:	20009cc4 	.word	0x20009cc4

0802af74 <ATE0>:

uint8_t ATE0 (void)
{
 802af74:	b580      	push	{r7, lr}
 802af76:	b082      	sub	sp, #8
 802af78:	af00      	add	r7, sp, #0
	char str_out[6];
	sprintf(str_out, "ATE0\r\n");
 802af7a:	463b      	mov	r3, r7
 802af7c:	491f      	ldr	r1, [pc, #124]	; (802affc <ATE0+0x88>)
 802af7e:	4618      	mov	r0, r3
 802af80:	f003 fa50 	bl	802e424 <siprintf>

	read_rx_state = ACTIVE;
 802af84:	4b1e      	ldr	r3, [pc, #120]	; (802b000 <ATE0+0x8c>)
 802af86:	2201      	movs	r2, #1
 802af88:	701a      	strb	r2, [r3, #0]
	modem_rx_number = 0;
 802af8a:	4b1e      	ldr	r3, [pc, #120]	; (802b004 <ATE0+0x90>)
 802af8c:	2200      	movs	r2, #0
 802af8e:	701a      	strb	r2, [r3, #0]
	modem_rx_buffer_clear();
 802af90:	f7ff ffd6 	bl	802af40 <modem_rx_buffer_clear>
	HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 802af94:	2201      	movs	r2, #1
 802af96:	491c      	ldr	r1, [pc, #112]	; (802b008 <ATE0+0x94>)
 802af98:	481c      	ldr	r0, [pc, #112]	; (802b00c <ATE0+0x98>)
 802af9a:	f7ec ffc3 	bl	8017f24 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart3, str_out, 6);
 802af9e:	463b      	mov	r3, r7
 802afa0:	2206      	movs	r2, #6
 802afa2:	4619      	mov	r1, r3
 802afa4:	4819      	ldr	r0, [pc, #100]	; (802b00c <ATE0+0x98>)
 802afa6:	f7ec ff3f 	bl	8017e28 <HAL_UART_Transmit_DMA>
	//HAL_UART_Transmit_DMA(&huart3, at, 3);

	osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 802afaa:	4b19      	ldr	r3, [pc, #100]	; (802b010 <ATE0+0x9c>)
 802afac:	681b      	ldr	r3, [r3, #0]
 802afae:	f04f 31ff 	mov.w	r1, #4294967295
 802afb2:	4618      	mov	r0, r3
 802afb4:	f7ee fa2e 	bl	8019414 <osSemaphoreWait>

	osTimerStart(AT_TimerHandle, 300);
 802afb8:	4b16      	ldr	r3, [pc, #88]	; (802b014 <ATE0+0xa0>)
 802afba:	681b      	ldr	r3, [r3, #0]
 802afbc:	f44f 7196 	mov.w	r1, #300	; 0x12c
 802afc0:	4618      	mov	r0, r3
 802afc2:	f7ee f8d9 	bl	8019178 <osTimerStart>
	while(read_rx_state == ACTIVE)
 802afc6:	e010      	b.n	802afea <ATE0+0x76>
	{
		if(strstr(modem_rx_buffer, "OK\r\n") != NULL )
 802afc8:	4913      	ldr	r1, [pc, #76]	; (802b018 <ATE0+0xa4>)
 802afca:	4814      	ldr	r0, [pc, #80]	; (802b01c <ATE0+0xa8>)
 802afcc:	f003 fa4a 	bl	802e464 <strstr>
 802afd0:	4603      	mov	r3, r0
 802afd2:	2b00      	cmp	r3, #0
 802afd4:	d009      	beq.n	802afea <ATE0+0x76>
		{
			osTimerStop(AT_TimerHandle);
 802afd6:	4b0f      	ldr	r3, [pc, #60]	; (802b014 <ATE0+0xa0>)
 802afd8:	681b      	ldr	r3, [r3, #0]
 802afda:	4618      	mov	r0, r3
 802afdc:	f7ee f910 	bl	8019200 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 802afe0:	4b07      	ldr	r3, [pc, #28]	; (802b000 <ATE0+0x8c>)
 802afe2:	2200      	movs	r2, #0
 802afe4:	701a      	strb	r2, [r3, #0]
			return AT_OK;
 802afe6:	2300      	movs	r3, #0
 802afe8:	e004      	b.n	802aff4 <ATE0+0x80>
	while(read_rx_state == ACTIVE)
 802afea:	4b05      	ldr	r3, [pc, #20]	; (802b000 <ATE0+0x8c>)
 802afec:	781b      	ldrb	r3, [r3, #0]
 802afee:	2b01      	cmp	r3, #1
 802aff0:	d0ea      	beq.n	802afc8 <ATE0+0x54>
		}
	}
	return AT_ERROR;
 802aff2:	2301      	movs	r3, #1
}
 802aff4:	4618      	mov	r0, r3
 802aff6:	3708      	adds	r7, #8
 802aff8:	46bd      	mov	sp, r7
 802affa:	bd80      	pop	{r7, pc}
 802affc:	0802fd58 	.word	0x0802fd58
 802b000:	20009b10 	.word	0x20009b10
 802b004:	20000864 	.word	0x20000864
 802b008:	20009bbc 	.word	0x20009bbc
 802b00c:	2000825c 	.word	0x2000825c
 802b010:	20009ea0 	.word	0x20009ea0
 802b014:	20009714 	.word	0x20009714
 802b018:	0802fd60 	.word	0x0802fd60
 802b01c:	20009cc4 	.word	0x20009cc4

0802b020 <AT>:


uint8_t AT (void)
{
 802b020:	b580      	push	{r7, lr}
 802b022:	b082      	sub	sp, #8
 802b024:	af00      	add	r7, sp, #0
	char str_out[4];
	sprintf(str_out, "AT\r\n");
 802b026:	1d3b      	adds	r3, r7, #4
 802b028:	491f      	ldr	r1, [pc, #124]	; (802b0a8 <AT+0x88>)
 802b02a:	4618      	mov	r0, r3
 802b02c:	f003 f9fa 	bl	802e424 <siprintf>

	read_rx_state = ACTIVE;
 802b030:	4b1e      	ldr	r3, [pc, #120]	; (802b0ac <AT+0x8c>)
 802b032:	2201      	movs	r2, #1
 802b034:	701a      	strb	r2, [r3, #0]
	modem_rx_number = 0;
 802b036:	4b1e      	ldr	r3, [pc, #120]	; (802b0b0 <AT+0x90>)
 802b038:	2200      	movs	r2, #0
 802b03a:	701a      	strb	r2, [r3, #0]
	modem_rx_buffer_clear();
 802b03c:	f7ff ff80 	bl	802af40 <modem_rx_buffer_clear>
	HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 802b040:	2201      	movs	r2, #1
 802b042:	491c      	ldr	r1, [pc, #112]	; (802b0b4 <AT+0x94>)
 802b044:	481c      	ldr	r0, [pc, #112]	; (802b0b8 <AT+0x98>)
 802b046:	f7ec ff6d 	bl	8017f24 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart3, str_out, 4);
 802b04a:	1d3b      	adds	r3, r7, #4
 802b04c:	2204      	movs	r2, #4
 802b04e:	4619      	mov	r1, r3
 802b050:	4819      	ldr	r0, [pc, #100]	; (802b0b8 <AT+0x98>)
 802b052:	f7ec fee9 	bl	8017e28 <HAL_UART_Transmit_DMA>
	//HAL_UART_Transmit_DMA(&huart3, at, 3);

	osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 802b056:	4b19      	ldr	r3, [pc, #100]	; (802b0bc <AT+0x9c>)
 802b058:	681b      	ldr	r3, [r3, #0]
 802b05a:	f04f 31ff 	mov.w	r1, #4294967295
 802b05e:	4618      	mov	r0, r3
 802b060:	f7ee f9d8 	bl	8019414 <osSemaphoreWait>

	osTimerStart(AT_TimerHandle, 300);
 802b064:	4b16      	ldr	r3, [pc, #88]	; (802b0c0 <AT+0xa0>)
 802b066:	681b      	ldr	r3, [r3, #0]
 802b068:	f44f 7196 	mov.w	r1, #300	; 0x12c
 802b06c:	4618      	mov	r0, r3
 802b06e:	f7ee f883 	bl	8019178 <osTimerStart>
	while(read_rx_state == ACTIVE)
 802b072:	e010      	b.n	802b096 <AT+0x76>
	{
		if(strstr(modem_rx_buffer, "OK\r\n") != NULL )
 802b074:	4913      	ldr	r1, [pc, #76]	; (802b0c4 <AT+0xa4>)
 802b076:	4814      	ldr	r0, [pc, #80]	; (802b0c8 <AT+0xa8>)
 802b078:	f003 f9f4 	bl	802e464 <strstr>
 802b07c:	4603      	mov	r3, r0
 802b07e:	2b00      	cmp	r3, #0
 802b080:	d009      	beq.n	802b096 <AT+0x76>
		{
			osTimerStop(AT_TimerHandle);
 802b082:	4b0f      	ldr	r3, [pc, #60]	; (802b0c0 <AT+0xa0>)
 802b084:	681b      	ldr	r3, [r3, #0]
 802b086:	4618      	mov	r0, r3
 802b088:	f7ee f8ba 	bl	8019200 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 802b08c:	4b07      	ldr	r3, [pc, #28]	; (802b0ac <AT+0x8c>)
 802b08e:	2200      	movs	r2, #0
 802b090:	701a      	strb	r2, [r3, #0]
			return AT_OK;
 802b092:	2300      	movs	r3, #0
 802b094:	e004      	b.n	802b0a0 <AT+0x80>
	while(read_rx_state == ACTIVE)
 802b096:	4b05      	ldr	r3, [pc, #20]	; (802b0ac <AT+0x8c>)
 802b098:	781b      	ldrb	r3, [r3, #0]
 802b09a:	2b01      	cmp	r3, #1
 802b09c:	d0ea      	beq.n	802b074 <AT+0x54>
		}
	}
	return AT_ERROR;
 802b09e:	2301      	movs	r3, #1
}
 802b0a0:	4618      	mov	r0, r3
 802b0a2:	3708      	adds	r7, #8
 802b0a4:	46bd      	mov	sp, r7
 802b0a6:	bd80      	pop	{r7, pc}
 802b0a8:	0802fd68 	.word	0x0802fd68
 802b0ac:	20009b10 	.word	0x20009b10
 802b0b0:	20000864 	.word	0x20000864
 802b0b4:	20009bbc 	.word	0x20009bbc
 802b0b8:	2000825c 	.word	0x2000825c
 802b0bc:	20009ea0 	.word	0x20009ea0
 802b0c0:	20009714 	.word	0x20009714
 802b0c4:	0802fd60 	.word	0x0802fd60
 802b0c8:	20009cc4 	.word	0x20009cc4

0802b0cc <request_to_server>:


uint8_t request_to_server() // функция запроса к серверу, чтобы тот прочитал регистры из устройства
{
 802b0cc:	b580      	push	{r7, lr}
 802b0ce:	b082      	sub	sp, #8
 802b0d0:	af00      	add	r7, sp, #0
	uint8_t send_out[5] = {0x01, 0x02, 0x03, 0x04, 0x05};
 802b0d2:	4a0b      	ldr	r2, [pc, #44]	; (802b100 <request_to_server+0x34>)
 802b0d4:	463b      	mov	r3, r7
 802b0d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 802b0da:	6018      	str	r0, [r3, #0]
 802b0dc:	3304      	adds	r3, #4
 802b0de:	7019      	strb	r1, [r3, #0]

	if( AT_CIPSEND(&send_out[0], 5) == AT_OK )
 802b0e0:	463b      	mov	r3, r7
 802b0e2:	2105      	movs	r1, #5
 802b0e4:	4618      	mov	r0, r3
 802b0e6:	f000 fbe5 	bl	802b8b4 <AT_CIPSEND>
 802b0ea:	4603      	mov	r3, r0
 802b0ec:	2b00      	cmp	r3, #0
 802b0ee:	d101      	bne.n	802b0f4 <request_to_server+0x28>
	{
		return AT_OK;
 802b0f0:	2300      	movs	r3, #0
 802b0f2:	e000      	b.n	802b0f6 <request_to_server+0x2a>
	}

	return AT_ERROR;
 802b0f4:	2301      	movs	r3, #1
}
 802b0f6:	4618      	mov	r0, r3
 802b0f8:	3708      	adds	r7, #8
 802b0fa:	46bd      	mov	sp, r7
 802b0fc:	bd80      	pop	{r7, pc}
 802b0fe:	bf00      	nop
 802b100:	0802fd70 	.word	0x0802fd70

0802b104 <AT_CSQ>:
	}
	return AT_ERROR;
}

uint8_t AT_CSQ (uint8_t* signal_level)
{
 802b104:	b580      	push	{r7, lr}
 802b106:	b084      	sub	sp, #16
 802b108:	af00      	add	r7, sp, #0
 802b10a:	6078      	str	r0, [r7, #4]
	char str_out[8];
	sprintf(str_out, "AT+CSQ\r\n");
 802b10c:	f107 0308 	add.w	r3, r7, #8
 802b110:	4931      	ldr	r1, [pc, #196]	; (802b1d8 <AT_CSQ+0xd4>)
 802b112:	4618      	mov	r0, r3
 802b114:	f003 f986 	bl	802e424 <siprintf>

	read_rx_state = ACTIVE;
 802b118:	4b30      	ldr	r3, [pc, #192]	; (802b1dc <AT_CSQ+0xd8>)
 802b11a:	2201      	movs	r2, #1
 802b11c:	701a      	strb	r2, [r3, #0]
	modem_rx_number = 0;
 802b11e:	4b30      	ldr	r3, [pc, #192]	; (802b1e0 <AT_CSQ+0xdc>)
 802b120:	2200      	movs	r2, #0
 802b122:	701a      	strb	r2, [r3, #0]
	modem_rx_buffer_clear();
 802b124:	f7ff ff0c 	bl	802af40 <modem_rx_buffer_clear>
	HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 802b128:	2201      	movs	r2, #1
 802b12a:	492e      	ldr	r1, [pc, #184]	; (802b1e4 <AT_CSQ+0xe0>)
 802b12c:	482e      	ldr	r0, [pc, #184]	; (802b1e8 <AT_CSQ+0xe4>)
 802b12e:	f7ec fef9 	bl	8017f24 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart3, str_out, 8);
 802b132:	f107 0308 	add.w	r3, r7, #8
 802b136:	2208      	movs	r2, #8
 802b138:	4619      	mov	r1, r3
 802b13a:	482b      	ldr	r0, [pc, #172]	; (802b1e8 <AT_CSQ+0xe4>)
 802b13c:	f7ec fe74 	bl	8017e28 <HAL_UART_Transmit_DMA>
	//HAL_UART_Transmit_DMA(&huart3, at_csq, 7);

	osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 802b140:	4b2a      	ldr	r3, [pc, #168]	; (802b1ec <AT_CSQ+0xe8>)
 802b142:	681b      	ldr	r3, [r3, #0]
 802b144:	f04f 31ff 	mov.w	r1, #4294967295
 802b148:	4618      	mov	r0, r3
 802b14a:	f7ee f963 	bl	8019414 <osSemaphoreWait>

	osTimerStart(AT_TimerHandle, 300);
 802b14e:	4b28      	ldr	r3, [pc, #160]	; (802b1f0 <AT_CSQ+0xec>)
 802b150:	681b      	ldr	r3, [r3, #0]
 802b152:	f44f 7196 	mov.w	r1, #300	; 0x12c
 802b156:	4618      	mov	r0, r3
 802b158:	f7ee f80e 	bl	8019178 <osTimerStart>
	while(read_rx_state == ACTIVE)
 802b15c:	e033      	b.n	802b1c6 <AT_CSQ+0xc2>
	{
		//osThreadSuspend(M95TaskHandle);
		if(strstr(modem_rx_buffer, "+CSQ:") != NULL )
 802b15e:	4925      	ldr	r1, [pc, #148]	; (802b1f4 <AT_CSQ+0xf0>)
 802b160:	4825      	ldr	r0, [pc, #148]	; (802b1f8 <AT_CSQ+0xf4>)
 802b162:	f003 f97f 	bl	802e464 <strstr>
 802b166:	4603      	mov	r3, r0
 802b168:	2b00      	cmp	r3, #0
 802b16a:	d01b      	beq.n	802b1a4 <AT_CSQ+0xa0>
		{
			if(modem_rx_buffer[9]==',') // в случае, если ATE0 (эхо выключено)
 802b16c:	4b22      	ldr	r3, [pc, #136]	; (802b1f8 <AT_CSQ+0xf4>)
 802b16e:	7a5b      	ldrb	r3, [r3, #9]
 802b170:	2b2c      	cmp	r3, #44	; 0x2c
 802b172:	d106      	bne.n	802b182 <AT_CSQ+0x7e>
			{
				*signal_level = modem_rx_buffer[8]-0x30;
 802b174:	4b20      	ldr	r3, [pc, #128]	; (802b1f8 <AT_CSQ+0xf4>)
 802b176:	7a1b      	ldrb	r3, [r3, #8]
 802b178:	3b30      	subs	r3, #48	; 0x30
 802b17a:	b2da      	uxtb	r2, r3
 802b17c:	687b      	ldr	r3, [r7, #4]
 802b17e:	701a      	strb	r2, [r3, #0]
 802b180:	e010      	b.n	802b1a4 <AT_CSQ+0xa0>
			}
			else
			{
				*signal_level = (modem_rx_buffer[8]-0x30)*10 + (modem_rx_buffer[9]-0x30);
 802b182:	4b1d      	ldr	r3, [pc, #116]	; (802b1f8 <AT_CSQ+0xf4>)
 802b184:	7a1b      	ldrb	r3, [r3, #8]
 802b186:	3b30      	subs	r3, #48	; 0x30
 802b188:	b2db      	uxtb	r3, r3
 802b18a:	461a      	mov	r2, r3
 802b18c:	0092      	lsls	r2, r2, #2
 802b18e:	4413      	add	r3, r2
 802b190:	005b      	lsls	r3, r3, #1
 802b192:	b2da      	uxtb	r2, r3
 802b194:	4b18      	ldr	r3, [pc, #96]	; (802b1f8 <AT_CSQ+0xf4>)
 802b196:	7a5b      	ldrb	r3, [r3, #9]
 802b198:	4413      	add	r3, r2
 802b19a:	b2db      	uxtb	r3, r3
 802b19c:	3b30      	subs	r3, #48	; 0x30
 802b19e:	b2da      	uxtb	r2, r3
 802b1a0:	687b      	ldr	r3, [r7, #4]
 802b1a2:	701a      	strb	r2, [r3, #0]
			//{
				//*signal_level = (modem_rx_buffer[14]-0x30)*10 + (modem_rx_buffer[15]-0x30);
			//}

		}
		if(strstr(modem_rx_buffer, "OK") != NULL )
 802b1a4:	4915      	ldr	r1, [pc, #84]	; (802b1fc <AT_CSQ+0xf8>)
 802b1a6:	4814      	ldr	r0, [pc, #80]	; (802b1f8 <AT_CSQ+0xf4>)
 802b1a8:	f003 f95c 	bl	802e464 <strstr>
 802b1ac:	4603      	mov	r3, r0
 802b1ae:	2b00      	cmp	r3, #0
 802b1b0:	d009      	beq.n	802b1c6 <AT_CSQ+0xc2>
		{
			osTimerStop(AT_TimerHandle);
 802b1b2:	4b0f      	ldr	r3, [pc, #60]	; (802b1f0 <AT_CSQ+0xec>)
 802b1b4:	681b      	ldr	r3, [r3, #0]
 802b1b6:	4618      	mov	r0, r3
 802b1b8:	f7ee f822 	bl	8019200 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 802b1bc:	4b07      	ldr	r3, [pc, #28]	; (802b1dc <AT_CSQ+0xd8>)
 802b1be:	2200      	movs	r2, #0
 802b1c0:	701a      	strb	r2, [r3, #0]
			return AT_OK;
 802b1c2:	2300      	movs	r3, #0
 802b1c4:	e004      	b.n	802b1d0 <AT_CSQ+0xcc>
	while(read_rx_state == ACTIVE)
 802b1c6:	4b05      	ldr	r3, [pc, #20]	; (802b1dc <AT_CSQ+0xd8>)
 802b1c8:	781b      	ldrb	r3, [r3, #0]
 802b1ca:	2b01      	cmp	r3, #1
 802b1cc:	d0c7      	beq.n	802b15e <AT_CSQ+0x5a>
		}
	}
	return AT_ERROR;
 802b1ce:	2301      	movs	r3, #1
}
 802b1d0:	4618      	mov	r0, r3
 802b1d2:	3710      	adds	r7, #16
 802b1d4:	46bd      	mov	sp, r7
 802b1d6:	bd80      	pop	{r7, pc}
 802b1d8:	0802fd84 	.word	0x0802fd84
 802b1dc:	20009b10 	.word	0x20009b10
 802b1e0:	20000864 	.word	0x20000864
 802b1e4:	20009bbc 	.word	0x20009bbc
 802b1e8:	2000825c 	.word	0x2000825c
 802b1ec:	20009ea0 	.word	0x20009ea0
 802b1f0:	20009714 	.word	0x20009714
 802b1f4:	0802fd90 	.word	0x0802fd90
 802b1f8:	20009cc4 	.word	0x20009cc4
 802b1fc:	0802fd98 	.word	0x0802fd98

0802b200 <AT_CIPSTATUS>:

uint8_t AT_CIPSTATUS (void)
{
 802b200:	b580      	push	{r7, lr}
 802b202:	b084      	sub	sp, #16
 802b204:	af00      	add	r7, sp, #0
	uint8_t str_out[14];
	sprintf(str_out, "AT+CIPSTATUS\r\n");
 802b206:	463b      	mov	r3, r7
 802b208:	4986      	ldr	r1, [pc, #536]	; (802b424 <AT_CIPSTATUS+0x224>)
 802b20a:	4618      	mov	r0, r3
 802b20c:	f003 f90a 	bl	802e424 <siprintf>
	read_rx_state = ACTIVE;
 802b210:	4b85      	ldr	r3, [pc, #532]	; (802b428 <AT_CIPSTATUS+0x228>)
 802b212:	2201      	movs	r2, #1
 802b214:	701a      	strb	r2, [r3, #0]
	modem_rx_number = 0;
 802b216:	4b85      	ldr	r3, [pc, #532]	; (802b42c <AT_CIPSTATUS+0x22c>)
 802b218:	2200      	movs	r2, #0
 802b21a:	701a      	strb	r2, [r3, #0]
	modem_rx_buffer_clear();
 802b21c:	f7ff fe90 	bl	802af40 <modem_rx_buffer_clear>

	HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 802b220:	2201      	movs	r2, #1
 802b222:	4983      	ldr	r1, [pc, #524]	; (802b430 <AT_CIPSTATUS+0x230>)
 802b224:	4883      	ldr	r0, [pc, #524]	; (802b434 <AT_CIPSTATUS+0x234>)
 802b226:	f7ec fe7d 	bl	8017f24 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart3, str_out, 14);
 802b22a:	463b      	mov	r3, r7
 802b22c:	220e      	movs	r2, #14
 802b22e:	4619      	mov	r1, r3
 802b230:	4880      	ldr	r0, [pc, #512]	; (802b434 <AT_CIPSTATUS+0x234>)
 802b232:	f7ec fdf9 	bl	8017e28 <HAL_UART_Transmit_DMA>

	osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 802b236:	4b80      	ldr	r3, [pc, #512]	; (802b438 <AT_CIPSTATUS+0x238>)
 802b238:	681b      	ldr	r3, [r3, #0]
 802b23a:	f04f 31ff 	mov.w	r1, #4294967295
 802b23e:	4618      	mov	r0, r3
 802b240:	f7ee f8e8 	bl	8019414 <osSemaphoreWait>

	osTimerStart(AT_TimerHandle, 300);
 802b244:	4b7d      	ldr	r3, [pc, #500]	; (802b43c <AT_CIPSTATUS+0x23c>)
 802b246:	681b      	ldr	r3, [r3, #0]
 802b248:	f44f 7196 	mov.w	r1, #300	; 0x12c
 802b24c:	4618      	mov	r0, r3
 802b24e:	f7ed ff93 	bl	8019178 <osTimerStart>
	while(read_rx_state == ACTIVE)
 802b252:	e0dc      	b.n	802b40e <AT_CIPSTATUS+0x20e>
	{
		//osThreadSuspend(M95TaskHandle);
		if(strstr(modem_rx_buffer, "IP INITIAL\r\n") != NULL )
 802b254:	497a      	ldr	r1, [pc, #488]	; (802b440 <AT_CIPSTATUS+0x240>)
 802b256:	487b      	ldr	r0, [pc, #492]	; (802b444 <AT_CIPSTATUS+0x244>)
 802b258:	f003 f904 	bl	802e464 <strstr>
 802b25c:	4603      	mov	r3, r0
 802b25e:	2b00      	cmp	r3, #0
 802b260:	d009      	beq.n	802b276 <AT_CIPSTATUS+0x76>
		{
			osTimerStop(AT_TimerHandle);
 802b262:	4b76      	ldr	r3, [pc, #472]	; (802b43c <AT_CIPSTATUS+0x23c>)
 802b264:	681b      	ldr	r3, [r3, #0]
 802b266:	4618      	mov	r0, r3
 802b268:	f7ed ffca 	bl	8019200 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 802b26c:	4b6e      	ldr	r3, [pc, #440]	; (802b428 <AT_CIPSTATUS+0x228>)
 802b26e:	2200      	movs	r2, #0
 802b270:	701a      	strb	r2, [r3, #0]
			return IP_INITIAL;
 802b272:	2302      	movs	r3, #2
 802b274:	e0d1      	b.n	802b41a <AT_CIPSTATUS+0x21a>
		}
		if(strstr(modem_rx_buffer, "IP START\r\n") != NULL )
 802b276:	4974      	ldr	r1, [pc, #464]	; (802b448 <AT_CIPSTATUS+0x248>)
 802b278:	4872      	ldr	r0, [pc, #456]	; (802b444 <AT_CIPSTATUS+0x244>)
 802b27a:	f003 f8f3 	bl	802e464 <strstr>
 802b27e:	4603      	mov	r3, r0
 802b280:	2b00      	cmp	r3, #0
 802b282:	d009      	beq.n	802b298 <AT_CIPSTATUS+0x98>
		{
			osTimerStop(AT_TimerHandle);
 802b284:	4b6d      	ldr	r3, [pc, #436]	; (802b43c <AT_CIPSTATUS+0x23c>)
 802b286:	681b      	ldr	r3, [r3, #0]
 802b288:	4618      	mov	r0, r3
 802b28a:	f7ed ffb9 	bl	8019200 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 802b28e:	4b66      	ldr	r3, [pc, #408]	; (802b428 <AT_CIPSTATUS+0x228>)
 802b290:	2200      	movs	r2, #0
 802b292:	701a      	strb	r2, [r3, #0]
			return IP_START;
 802b294:	2303      	movs	r3, #3
 802b296:	e0c0      	b.n	802b41a <AT_CIPSTATUS+0x21a>
		}
		if(strstr(modem_rx_buffer, "IP CONFIG\r\n") != NULL )
 802b298:	496c      	ldr	r1, [pc, #432]	; (802b44c <AT_CIPSTATUS+0x24c>)
 802b29a:	486a      	ldr	r0, [pc, #424]	; (802b444 <AT_CIPSTATUS+0x244>)
 802b29c:	f003 f8e2 	bl	802e464 <strstr>
 802b2a0:	4603      	mov	r3, r0
 802b2a2:	2b00      	cmp	r3, #0
 802b2a4:	d009      	beq.n	802b2ba <AT_CIPSTATUS+0xba>
		{
			osTimerStop(AT_TimerHandle);
 802b2a6:	4b65      	ldr	r3, [pc, #404]	; (802b43c <AT_CIPSTATUS+0x23c>)
 802b2a8:	681b      	ldr	r3, [r3, #0]
 802b2aa:	4618      	mov	r0, r3
 802b2ac:	f7ed ffa8 	bl	8019200 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 802b2b0:	4b5d      	ldr	r3, [pc, #372]	; (802b428 <AT_CIPSTATUS+0x228>)
 802b2b2:	2200      	movs	r2, #0
 802b2b4:	701a      	strb	r2, [r3, #0]
			return IP_CONFIG;
 802b2b6:	2304      	movs	r3, #4
 802b2b8:	e0af      	b.n	802b41a <AT_CIPSTATUS+0x21a>
		}
		if(strstr(modem_rx_buffer, "IP IND\r\n") != NULL )
 802b2ba:	4965      	ldr	r1, [pc, #404]	; (802b450 <AT_CIPSTATUS+0x250>)
 802b2bc:	4861      	ldr	r0, [pc, #388]	; (802b444 <AT_CIPSTATUS+0x244>)
 802b2be:	f003 f8d1 	bl	802e464 <strstr>
 802b2c2:	4603      	mov	r3, r0
 802b2c4:	2b00      	cmp	r3, #0
 802b2c6:	d009      	beq.n	802b2dc <AT_CIPSTATUS+0xdc>
		{
			osTimerStop(AT_TimerHandle);
 802b2c8:	4b5c      	ldr	r3, [pc, #368]	; (802b43c <AT_CIPSTATUS+0x23c>)
 802b2ca:	681b      	ldr	r3, [r3, #0]
 802b2cc:	4618      	mov	r0, r3
 802b2ce:	f7ed ff97 	bl	8019200 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 802b2d2:	4b55      	ldr	r3, [pc, #340]	; (802b428 <AT_CIPSTATUS+0x228>)
 802b2d4:	2200      	movs	r2, #0
 802b2d6:	701a      	strb	r2, [r3, #0]
			return IP_IND;
 802b2d8:	2305      	movs	r3, #5
 802b2da:	e09e      	b.n	802b41a <AT_CIPSTATUS+0x21a>
		}
		if(strstr(modem_rx_buffer, "IP GPRSACT\r\n") != NULL )
 802b2dc:	495d      	ldr	r1, [pc, #372]	; (802b454 <AT_CIPSTATUS+0x254>)
 802b2de:	4859      	ldr	r0, [pc, #356]	; (802b444 <AT_CIPSTATUS+0x244>)
 802b2e0:	f003 f8c0 	bl	802e464 <strstr>
 802b2e4:	4603      	mov	r3, r0
 802b2e6:	2b00      	cmp	r3, #0
 802b2e8:	d009      	beq.n	802b2fe <AT_CIPSTATUS+0xfe>
		{
			osTimerStop(AT_TimerHandle);
 802b2ea:	4b54      	ldr	r3, [pc, #336]	; (802b43c <AT_CIPSTATUS+0x23c>)
 802b2ec:	681b      	ldr	r3, [r3, #0]
 802b2ee:	4618      	mov	r0, r3
 802b2f0:	f7ed ff86 	bl	8019200 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 802b2f4:	4b4c      	ldr	r3, [pc, #304]	; (802b428 <AT_CIPSTATUS+0x228>)
 802b2f6:	2200      	movs	r2, #0
 802b2f8:	701a      	strb	r2, [r3, #0]
			return IP_GPRSACT;
 802b2fa:	2306      	movs	r3, #6
 802b2fc:	e08d      	b.n	802b41a <AT_CIPSTATUS+0x21a>
		}
		if(strstr(modem_rx_buffer, "IP STATUS\r\n") != NULL )
 802b2fe:	4956      	ldr	r1, [pc, #344]	; (802b458 <AT_CIPSTATUS+0x258>)
 802b300:	4850      	ldr	r0, [pc, #320]	; (802b444 <AT_CIPSTATUS+0x244>)
 802b302:	f003 f8af 	bl	802e464 <strstr>
 802b306:	4603      	mov	r3, r0
 802b308:	2b00      	cmp	r3, #0
 802b30a:	d009      	beq.n	802b320 <AT_CIPSTATUS+0x120>
		{
			osTimerStop(AT_TimerHandle);
 802b30c:	4b4b      	ldr	r3, [pc, #300]	; (802b43c <AT_CIPSTATUS+0x23c>)
 802b30e:	681b      	ldr	r3, [r3, #0]
 802b310:	4618      	mov	r0, r3
 802b312:	f7ed ff75 	bl	8019200 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 802b316:	4b44      	ldr	r3, [pc, #272]	; (802b428 <AT_CIPSTATUS+0x228>)
 802b318:	2200      	movs	r2, #0
 802b31a:	701a      	strb	r2, [r3, #0]
			return IP_STATUS;
 802b31c:	2307      	movs	r3, #7
 802b31e:	e07c      	b.n	802b41a <AT_CIPSTATUS+0x21a>
		}
		if(strstr(modem_rx_buffer, "TCP CONNECTING\r\n") != NULL )
 802b320:	494e      	ldr	r1, [pc, #312]	; (802b45c <AT_CIPSTATUS+0x25c>)
 802b322:	4848      	ldr	r0, [pc, #288]	; (802b444 <AT_CIPSTATUS+0x244>)
 802b324:	f003 f89e 	bl	802e464 <strstr>
 802b328:	4603      	mov	r3, r0
 802b32a:	2b00      	cmp	r3, #0
 802b32c:	d009      	beq.n	802b342 <AT_CIPSTATUS+0x142>
		{
			osTimerStop(AT_TimerHandle);
 802b32e:	4b43      	ldr	r3, [pc, #268]	; (802b43c <AT_CIPSTATUS+0x23c>)
 802b330:	681b      	ldr	r3, [r3, #0]
 802b332:	4618      	mov	r0, r3
 802b334:	f7ed ff64 	bl	8019200 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 802b338:	4b3b      	ldr	r3, [pc, #236]	; (802b428 <AT_CIPSTATUS+0x228>)
 802b33a:	2200      	movs	r2, #0
 802b33c:	701a      	strb	r2, [r3, #0]
			return TCP_CONNECTING;
 802b33e:	2308      	movs	r3, #8
 802b340:	e06b      	b.n	802b41a <AT_CIPSTATUS+0x21a>
		}
		if(strstr(modem_rx_buffer, "UDP CONNECTING\r\n") != NULL )
 802b342:	4947      	ldr	r1, [pc, #284]	; (802b460 <AT_CIPSTATUS+0x260>)
 802b344:	483f      	ldr	r0, [pc, #252]	; (802b444 <AT_CIPSTATUS+0x244>)
 802b346:	f003 f88d 	bl	802e464 <strstr>
 802b34a:	4603      	mov	r3, r0
 802b34c:	2b00      	cmp	r3, #0
 802b34e:	d009      	beq.n	802b364 <AT_CIPSTATUS+0x164>
		{
			osTimerStop(AT_TimerHandle);
 802b350:	4b3a      	ldr	r3, [pc, #232]	; (802b43c <AT_CIPSTATUS+0x23c>)
 802b352:	681b      	ldr	r3, [r3, #0]
 802b354:	4618      	mov	r0, r3
 802b356:	f7ed ff53 	bl	8019200 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 802b35a:	4b33      	ldr	r3, [pc, #204]	; (802b428 <AT_CIPSTATUS+0x228>)
 802b35c:	2200      	movs	r2, #0
 802b35e:	701a      	strb	r2, [r3, #0]
			return UDP_CONNECTING;
 802b360:	2309      	movs	r3, #9
 802b362:	e05a      	b.n	802b41a <AT_CIPSTATUS+0x21a>
		}
		if(strstr(modem_rx_buffer, "IP CLOSE\r\n") != NULL )
 802b364:	493f      	ldr	r1, [pc, #252]	; (802b464 <AT_CIPSTATUS+0x264>)
 802b366:	4837      	ldr	r0, [pc, #220]	; (802b444 <AT_CIPSTATUS+0x244>)
 802b368:	f003 f87c 	bl	802e464 <strstr>
 802b36c:	4603      	mov	r3, r0
 802b36e:	2b00      	cmp	r3, #0
 802b370:	d009      	beq.n	802b386 <AT_CIPSTATUS+0x186>
		{
			osTimerStop(AT_TimerHandle);
 802b372:	4b32      	ldr	r3, [pc, #200]	; (802b43c <AT_CIPSTATUS+0x23c>)
 802b374:	681b      	ldr	r3, [r3, #0]
 802b376:	4618      	mov	r0, r3
 802b378:	f7ed ff42 	bl	8019200 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 802b37c:	4b2a      	ldr	r3, [pc, #168]	; (802b428 <AT_CIPSTATUS+0x228>)
 802b37e:	2200      	movs	r2, #0
 802b380:	701a      	strb	r2, [r3, #0]
			return IP_CLOSE;
 802b382:	230a      	movs	r3, #10
 802b384:	e049      	b.n	802b41a <AT_CIPSTATUS+0x21a>
		}
		if(strstr(modem_rx_buffer, "CONNECT OK\r\n") != NULL )
 802b386:	4938      	ldr	r1, [pc, #224]	; (802b468 <AT_CIPSTATUS+0x268>)
 802b388:	482e      	ldr	r0, [pc, #184]	; (802b444 <AT_CIPSTATUS+0x244>)
 802b38a:	f003 f86b 	bl	802e464 <strstr>
 802b38e:	4603      	mov	r3, r0
 802b390:	2b00      	cmp	r3, #0
 802b392:	d009      	beq.n	802b3a8 <AT_CIPSTATUS+0x1a8>
		{
			osTimerStop(AT_TimerHandle);
 802b394:	4b29      	ldr	r3, [pc, #164]	; (802b43c <AT_CIPSTATUS+0x23c>)
 802b396:	681b      	ldr	r3, [r3, #0]
 802b398:	4618      	mov	r0, r3
 802b39a:	f7ed ff31 	bl	8019200 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 802b39e:	4b22      	ldr	r3, [pc, #136]	; (802b428 <AT_CIPSTATUS+0x228>)
 802b3a0:	2200      	movs	r2, #0
 802b3a2:	701a      	strb	r2, [r3, #0]
			return CONNECT_OK;
 802b3a4:	230b      	movs	r3, #11
 802b3a6:	e038      	b.n	802b41a <AT_CIPSTATUS+0x21a>
		}
		if(strstr(modem_rx_buffer, "PDP DEACT\r\n") != NULL )
 802b3a8:	4930      	ldr	r1, [pc, #192]	; (802b46c <AT_CIPSTATUS+0x26c>)
 802b3aa:	4826      	ldr	r0, [pc, #152]	; (802b444 <AT_CIPSTATUS+0x244>)
 802b3ac:	f003 f85a 	bl	802e464 <strstr>
 802b3b0:	4603      	mov	r3, r0
 802b3b2:	2b00      	cmp	r3, #0
 802b3b4:	d009      	beq.n	802b3ca <AT_CIPSTATUS+0x1ca>
		{
			osTimerStop(AT_TimerHandle);
 802b3b6:	4b21      	ldr	r3, [pc, #132]	; (802b43c <AT_CIPSTATUS+0x23c>)
 802b3b8:	681b      	ldr	r3, [r3, #0]
 802b3ba:	4618      	mov	r0, r3
 802b3bc:	f7ed ff20 	bl	8019200 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 802b3c0:	4b19      	ldr	r3, [pc, #100]	; (802b428 <AT_CIPSTATUS+0x228>)
 802b3c2:	2200      	movs	r2, #0
 802b3c4:	701a      	strb	r2, [r3, #0]
			return PDP_DEACT;
 802b3c6:	230c      	movs	r3, #12
 802b3c8:	e027      	b.n	802b41a <AT_CIPSTATUS+0x21a>
		}
		if(strstr(modem_rx_buffer, "ERROR\r\n") != NULL )
 802b3ca:	4929      	ldr	r1, [pc, #164]	; (802b470 <AT_CIPSTATUS+0x270>)
 802b3cc:	481d      	ldr	r0, [pc, #116]	; (802b444 <AT_CIPSTATUS+0x244>)
 802b3ce:	f003 f849 	bl	802e464 <strstr>
 802b3d2:	4603      	mov	r3, r0
 802b3d4:	2b00      	cmp	r3, #0
 802b3d6:	d009      	beq.n	802b3ec <AT_CIPSTATUS+0x1ec>
		{
			osTimerStop(AT_TimerHandle);
 802b3d8:	4b18      	ldr	r3, [pc, #96]	; (802b43c <AT_CIPSTATUS+0x23c>)
 802b3da:	681b      	ldr	r3, [r3, #0]
 802b3dc:	4618      	mov	r0, r3
 802b3de:	f7ed ff0f 	bl	8019200 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 802b3e2:	4b11      	ldr	r3, [pc, #68]	; (802b428 <AT_CIPSTATUS+0x228>)
 802b3e4:	2200      	movs	r2, #0
 802b3e6:	701a      	strb	r2, [r3, #0]
			return AT_ERROR;
 802b3e8:	2301      	movs	r3, #1
 802b3ea:	e016      	b.n	802b41a <AT_CIPSTATUS+0x21a>
		}
		if(strstr(modem_rx_buffer, "TCP CLOSED\r\n") != NULL )
 802b3ec:	4921      	ldr	r1, [pc, #132]	; (802b474 <AT_CIPSTATUS+0x274>)
 802b3ee:	4815      	ldr	r0, [pc, #84]	; (802b444 <AT_CIPSTATUS+0x244>)
 802b3f0:	f003 f838 	bl	802e464 <strstr>
 802b3f4:	4603      	mov	r3, r0
 802b3f6:	2b00      	cmp	r3, #0
 802b3f8:	d009      	beq.n	802b40e <AT_CIPSTATUS+0x20e>
		{
			osTimerStop(AT_TimerHandle);
 802b3fa:	4b10      	ldr	r3, [pc, #64]	; (802b43c <AT_CIPSTATUS+0x23c>)
 802b3fc:	681b      	ldr	r3, [r3, #0]
 802b3fe:	4618      	mov	r0, r3
 802b400:	f7ed fefe 	bl	8019200 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 802b404:	4b08      	ldr	r3, [pc, #32]	; (802b428 <AT_CIPSTATUS+0x228>)
 802b406:	2200      	movs	r2, #0
 802b408:	701a      	strb	r2, [r3, #0]
			return TCP_CLOSED;
 802b40a:	230d      	movs	r3, #13
 802b40c:	e005      	b.n	802b41a <AT_CIPSTATUS+0x21a>
	while(read_rx_state == ACTIVE)
 802b40e:	4b06      	ldr	r3, [pc, #24]	; (802b428 <AT_CIPSTATUS+0x228>)
 802b410:	781b      	ldrb	r3, [r3, #0]
 802b412:	2b01      	cmp	r3, #1
 802b414:	f43f af1e 	beq.w	802b254 <AT_CIPSTATUS+0x54>
		}

	}
	return AT_ERROR;
 802b418:	2301      	movs	r3, #1
}
 802b41a:	4618      	mov	r0, r3
 802b41c:	3710      	adds	r7, #16
 802b41e:	46bd      	mov	sp, r7
 802b420:	bd80      	pop	{r7, pc}
 802b422:	bf00      	nop
 802b424:	0802fd9c 	.word	0x0802fd9c
 802b428:	20009b10 	.word	0x20009b10
 802b42c:	20000864 	.word	0x20000864
 802b430:	20009bbc 	.word	0x20009bbc
 802b434:	2000825c 	.word	0x2000825c
 802b438:	20009ea0 	.word	0x20009ea0
 802b43c:	20009714 	.word	0x20009714
 802b440:	0802fdac 	.word	0x0802fdac
 802b444:	20009cc4 	.word	0x20009cc4
 802b448:	0802fdbc 	.word	0x0802fdbc
 802b44c:	0802fdc8 	.word	0x0802fdc8
 802b450:	0802fdd4 	.word	0x0802fdd4
 802b454:	0802fde0 	.word	0x0802fde0
 802b458:	0802fdf0 	.word	0x0802fdf0
 802b45c:	0802fdfc 	.word	0x0802fdfc
 802b460:	0802fe10 	.word	0x0802fe10
 802b464:	0802fe24 	.word	0x0802fe24
 802b468:	0802fe30 	.word	0x0802fe30
 802b46c:	0802fe40 	.word	0x0802fe40
 802b470:	0802fe4c 	.word	0x0802fe4c
 802b474:	0802fe54 	.word	0x0802fe54

0802b478 <AT_CSTT>:

uint8_t AT_CSTT  (char* apn, char* user, char* password)
{
 802b478:	b580      	push	{r7, lr}
 802b47a:	b0a0      	sub	sp, #128	; 0x80
 802b47c:	af02      	add	r7, sp, #8
 802b47e:	60f8      	str	r0, [r7, #12]
 802b480:	60b9      	str	r1, [r7, #8]
 802b482:	607a      	str	r2, [r7, #4]
	uint8_t n;
	char str_out[101];
	sprintf(str_out, "AT+CSTT=\"%s\",\"%s\",\"%s\"\r\n", apn, user, password);
 802b484:	f107 0010 	add.w	r0, r7, #16
 802b488:	687b      	ldr	r3, [r7, #4]
 802b48a:	9300      	str	r3, [sp, #0]
 802b48c:	68bb      	ldr	r3, [r7, #8]
 802b48e:	68fa      	ldr	r2, [r7, #12]
 802b490:	492d      	ldr	r1, [pc, #180]	; (802b548 <AT_CSTT+0xd0>)
 802b492:	f002 ffc7 	bl	802e424 <siprintf>
	n = strlen(str_out);
 802b496:	f107 0310 	add.w	r3, r7, #16
 802b49a:	4618      	mov	r0, r3
 802b49c:	f7e4 fe98 	bl	80101d0 <strlen>
 802b4a0:	4603      	mov	r3, r0
 802b4a2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	read_rx_state = ACTIVE;
 802b4a6:	4b29      	ldr	r3, [pc, #164]	; (802b54c <AT_CSTT+0xd4>)
 802b4a8:	2201      	movs	r2, #1
 802b4aa:	701a      	strb	r2, [r3, #0]
	modem_rx_number = 0;
 802b4ac:	4b28      	ldr	r3, [pc, #160]	; (802b550 <AT_CSTT+0xd8>)
 802b4ae:	2200      	movs	r2, #0
 802b4b0:	701a      	strb	r2, [r3, #0]
	modem_rx_buffer_clear();
 802b4b2:	f7ff fd45 	bl	802af40 <modem_rx_buffer_clear>

	HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 802b4b6:	2201      	movs	r2, #1
 802b4b8:	4926      	ldr	r1, [pc, #152]	; (802b554 <AT_CSTT+0xdc>)
 802b4ba:	4827      	ldr	r0, [pc, #156]	; (802b558 <AT_CSTT+0xe0>)
 802b4bc:	f7ec fd32 	bl	8017f24 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart3, str_out, n);
 802b4c0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 802b4c4:	b29a      	uxth	r2, r3
 802b4c6:	f107 0310 	add.w	r3, r7, #16
 802b4ca:	4619      	mov	r1, r3
 802b4cc:	4822      	ldr	r0, [pc, #136]	; (802b558 <AT_CSTT+0xe0>)
 802b4ce:	f7ec fcab 	bl	8017e28 <HAL_UART_Transmit_DMA>

	osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 802b4d2:	4b22      	ldr	r3, [pc, #136]	; (802b55c <AT_CSTT+0xe4>)
 802b4d4:	681b      	ldr	r3, [r3, #0]
 802b4d6:	f04f 31ff 	mov.w	r1, #4294967295
 802b4da:	4618      	mov	r0, r3
 802b4dc:	f7ed ff9a 	bl	8019414 <osSemaphoreWait>

	osTimerStart(AT_TimerHandle, 300);
 802b4e0:	4b1f      	ldr	r3, [pc, #124]	; (802b560 <AT_CSTT+0xe8>)
 802b4e2:	681b      	ldr	r3, [r3, #0]
 802b4e4:	f44f 7196 	mov.w	r1, #300	; 0x12c
 802b4e8:	4618      	mov	r0, r3
 802b4ea:	f7ed fe45 	bl	8019178 <osTimerStart>
	while(read_rx_state == ACTIVE)
 802b4ee:	e021      	b.n	802b534 <AT_CSTT+0xbc>
	{
		//osThreadSuspend(M95TaskHandle);
		if(strstr(modem_rx_buffer, "OK\r\n") != NULL )
 802b4f0:	491c      	ldr	r1, [pc, #112]	; (802b564 <AT_CSTT+0xec>)
 802b4f2:	481d      	ldr	r0, [pc, #116]	; (802b568 <AT_CSTT+0xf0>)
 802b4f4:	f002 ffb6 	bl	802e464 <strstr>
 802b4f8:	4603      	mov	r3, r0
 802b4fa:	2b00      	cmp	r3, #0
 802b4fc:	d009      	beq.n	802b512 <AT_CSTT+0x9a>
		{
			osTimerStop(AT_TimerHandle);
 802b4fe:	4b18      	ldr	r3, [pc, #96]	; (802b560 <AT_CSTT+0xe8>)
 802b500:	681b      	ldr	r3, [r3, #0]
 802b502:	4618      	mov	r0, r3
 802b504:	f7ed fe7c 	bl	8019200 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 802b508:	4b10      	ldr	r3, [pc, #64]	; (802b54c <AT_CSTT+0xd4>)
 802b50a:	2200      	movs	r2, #0
 802b50c:	701a      	strb	r2, [r3, #0]
			return AT_OK;
 802b50e:	2300      	movs	r3, #0
 802b510:	e015      	b.n	802b53e <AT_CSTT+0xc6>
		}
		if(strstr(modem_rx_buffer, "ERROR\r\n") != NULL )
 802b512:	4916      	ldr	r1, [pc, #88]	; (802b56c <AT_CSTT+0xf4>)
 802b514:	4814      	ldr	r0, [pc, #80]	; (802b568 <AT_CSTT+0xf0>)
 802b516:	f002 ffa5 	bl	802e464 <strstr>
 802b51a:	4603      	mov	r3, r0
 802b51c:	2b00      	cmp	r3, #0
 802b51e:	d009      	beq.n	802b534 <AT_CSTT+0xbc>
		{
			osTimerStop(AT_TimerHandle);
 802b520:	4b0f      	ldr	r3, [pc, #60]	; (802b560 <AT_CSTT+0xe8>)
 802b522:	681b      	ldr	r3, [r3, #0]
 802b524:	4618      	mov	r0, r3
 802b526:	f7ed fe6b 	bl	8019200 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 802b52a:	4b08      	ldr	r3, [pc, #32]	; (802b54c <AT_CSTT+0xd4>)
 802b52c:	2200      	movs	r2, #0
 802b52e:	701a      	strb	r2, [r3, #0]
			return AT_ERROR;
 802b530:	2301      	movs	r3, #1
 802b532:	e004      	b.n	802b53e <AT_CSTT+0xc6>
	while(read_rx_state == ACTIVE)
 802b534:	4b05      	ldr	r3, [pc, #20]	; (802b54c <AT_CSTT+0xd4>)
 802b536:	781b      	ldrb	r3, [r3, #0]
 802b538:	2b01      	cmp	r3, #1
 802b53a:	d0d9      	beq.n	802b4f0 <AT_CSTT+0x78>
		}

	}
	return AT_ERROR;
 802b53c:	2301      	movs	r3, #1

}
 802b53e:	4618      	mov	r0, r3
 802b540:	3778      	adds	r7, #120	; 0x78
 802b542:	46bd      	mov	sp, r7
 802b544:	bd80      	pop	{r7, pc}
 802b546:	bf00      	nop
 802b548:	0802fe64 	.word	0x0802fe64
 802b54c:	20009b10 	.word	0x20009b10
 802b550:	20000864 	.word	0x20000864
 802b554:	20009bbc 	.word	0x20009bbc
 802b558:	2000825c 	.word	0x2000825c
 802b55c:	20009ea0 	.word	0x20009ea0
 802b560:	20009714 	.word	0x20009714
 802b564:	0802fd60 	.word	0x0802fd60
 802b568:	20009cc4 	.word	0x20009cc4
 802b56c:	0802fe4c 	.word	0x0802fe4c

0802b570 <AT_CIICR>:

uint8_t AT_CIICR  (void)
{
 802b570:	b580      	push	{r7, lr}
 802b572:	b084      	sub	sp, #16
 802b574:	af00      	add	r7, sp, #0
	uint8_t str_out[10];
	sprintf(str_out, "AT+CIICR\r\n");
 802b576:	1d3b      	adds	r3, r7, #4
 802b578:	4928      	ldr	r1, [pc, #160]	; (802b61c <AT_CIICR+0xac>)
 802b57a:	4618      	mov	r0, r3
 802b57c:	f002 ff52 	bl	802e424 <siprintf>

	read_rx_state = ACTIVE;
 802b580:	4b27      	ldr	r3, [pc, #156]	; (802b620 <AT_CIICR+0xb0>)
 802b582:	2201      	movs	r2, #1
 802b584:	701a      	strb	r2, [r3, #0]
	modem_rx_number = 0;
 802b586:	4b27      	ldr	r3, [pc, #156]	; (802b624 <AT_CIICR+0xb4>)
 802b588:	2200      	movs	r2, #0
 802b58a:	701a      	strb	r2, [r3, #0]
	modem_rx_buffer_clear();
 802b58c:	f7ff fcd8 	bl	802af40 <modem_rx_buffer_clear>

	HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 802b590:	2201      	movs	r2, #1
 802b592:	4925      	ldr	r1, [pc, #148]	; (802b628 <AT_CIICR+0xb8>)
 802b594:	4825      	ldr	r0, [pc, #148]	; (802b62c <AT_CIICR+0xbc>)
 802b596:	f7ec fcc5 	bl	8017f24 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart3, str_out, 10);
 802b59a:	1d3b      	adds	r3, r7, #4
 802b59c:	220a      	movs	r2, #10
 802b59e:	4619      	mov	r1, r3
 802b5a0:	4822      	ldr	r0, [pc, #136]	; (802b62c <AT_CIICR+0xbc>)
 802b5a2:	f7ec fc41 	bl	8017e28 <HAL_UART_Transmit_DMA>

	osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 802b5a6:	4b22      	ldr	r3, [pc, #136]	; (802b630 <AT_CIICR+0xc0>)
 802b5a8:	681b      	ldr	r3, [r3, #0]
 802b5aa:	f04f 31ff 	mov.w	r1, #4294967295
 802b5ae:	4618      	mov	r0, r3
 802b5b0:	f7ed ff30 	bl	8019414 <osSemaphoreWait>

	osTimerStart(AT_TimerHandle, 5000);
 802b5b4:	4b1f      	ldr	r3, [pc, #124]	; (802b634 <AT_CIICR+0xc4>)
 802b5b6:	681b      	ldr	r3, [r3, #0]
 802b5b8:	f241 3188 	movw	r1, #5000	; 0x1388
 802b5bc:	4618      	mov	r0, r3
 802b5be:	f7ed fddb 	bl	8019178 <osTimerStart>
	while(read_rx_state == ACTIVE)
 802b5c2:	e021      	b.n	802b608 <AT_CIICR+0x98>
	{
		//osThreadSuspend(M95TaskHandle);
		if(strstr(modem_rx_buffer, "OK\r\n") != NULL )
 802b5c4:	491c      	ldr	r1, [pc, #112]	; (802b638 <AT_CIICR+0xc8>)
 802b5c6:	481d      	ldr	r0, [pc, #116]	; (802b63c <AT_CIICR+0xcc>)
 802b5c8:	f002 ff4c 	bl	802e464 <strstr>
 802b5cc:	4603      	mov	r3, r0
 802b5ce:	2b00      	cmp	r3, #0
 802b5d0:	d009      	beq.n	802b5e6 <AT_CIICR+0x76>
		{
			osTimerStop(AT_TimerHandle);
 802b5d2:	4b18      	ldr	r3, [pc, #96]	; (802b634 <AT_CIICR+0xc4>)
 802b5d4:	681b      	ldr	r3, [r3, #0]
 802b5d6:	4618      	mov	r0, r3
 802b5d8:	f7ed fe12 	bl	8019200 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 802b5dc:	4b10      	ldr	r3, [pc, #64]	; (802b620 <AT_CIICR+0xb0>)
 802b5de:	2200      	movs	r2, #0
 802b5e0:	701a      	strb	r2, [r3, #0]
			return AT_OK;
 802b5e2:	2300      	movs	r3, #0
 802b5e4:	e015      	b.n	802b612 <AT_CIICR+0xa2>
		}
		if(strstr(modem_rx_buffer, "ERROR\r\n") != NULL )
 802b5e6:	4916      	ldr	r1, [pc, #88]	; (802b640 <AT_CIICR+0xd0>)
 802b5e8:	4814      	ldr	r0, [pc, #80]	; (802b63c <AT_CIICR+0xcc>)
 802b5ea:	f002 ff3b 	bl	802e464 <strstr>
 802b5ee:	4603      	mov	r3, r0
 802b5f0:	2b00      	cmp	r3, #0
 802b5f2:	d009      	beq.n	802b608 <AT_CIICR+0x98>
		{
			osTimerStop(AT_TimerHandle);
 802b5f4:	4b0f      	ldr	r3, [pc, #60]	; (802b634 <AT_CIICR+0xc4>)
 802b5f6:	681b      	ldr	r3, [r3, #0]
 802b5f8:	4618      	mov	r0, r3
 802b5fa:	f7ed fe01 	bl	8019200 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 802b5fe:	4b08      	ldr	r3, [pc, #32]	; (802b620 <AT_CIICR+0xb0>)
 802b600:	2200      	movs	r2, #0
 802b602:	701a      	strb	r2, [r3, #0]
			return AT_ERROR;
 802b604:	2301      	movs	r3, #1
 802b606:	e004      	b.n	802b612 <AT_CIICR+0xa2>
	while(read_rx_state == ACTIVE)
 802b608:	4b05      	ldr	r3, [pc, #20]	; (802b620 <AT_CIICR+0xb0>)
 802b60a:	781b      	ldrb	r3, [r3, #0]
 802b60c:	2b01      	cmp	r3, #1
 802b60e:	d0d9      	beq.n	802b5c4 <AT_CIICR+0x54>
		}

	}
	return AT_ERROR;
 802b610:	2301      	movs	r3, #1

}
 802b612:	4618      	mov	r0, r3
 802b614:	3710      	adds	r7, #16
 802b616:	46bd      	mov	sp, r7
 802b618:	bd80      	pop	{r7, pc}
 802b61a:	bf00      	nop
 802b61c:	0802fe80 	.word	0x0802fe80
 802b620:	20009b10 	.word	0x20009b10
 802b624:	20000864 	.word	0x20000864
 802b628:	20009bbc 	.word	0x20009bbc
 802b62c:	2000825c 	.word	0x2000825c
 802b630:	20009ea0 	.word	0x20009ea0
 802b634:	20009714 	.word	0x20009714
 802b638:	0802fd60 	.word	0x0802fd60
 802b63c:	20009cc4 	.word	0x20009cc4
 802b640:	0802fe4c 	.word	0x0802fe4c

0802b644 <AT_CIFSR>:

uint8_t AT_CIFSR  (void)
{
 802b644:	b580      	push	{r7, lr}
 802b646:	b084      	sub	sp, #16
 802b648:	af00      	add	r7, sp, #0
	uint8_t str_out[10];
	sprintf(str_out, "AT+CIFSR\r\n");
 802b64a:	1d3b      	adds	r3, r7, #4
 802b64c:	4928      	ldr	r1, [pc, #160]	; (802b6f0 <AT_CIFSR+0xac>)
 802b64e:	4618      	mov	r0, r3
 802b650:	f002 fee8 	bl	802e424 <siprintf>

	read_rx_state = ACTIVE;
 802b654:	4b27      	ldr	r3, [pc, #156]	; (802b6f4 <AT_CIFSR+0xb0>)
 802b656:	2201      	movs	r2, #1
 802b658:	701a      	strb	r2, [r3, #0]
	modem_rx_number = 0;
 802b65a:	4b27      	ldr	r3, [pc, #156]	; (802b6f8 <AT_CIFSR+0xb4>)
 802b65c:	2200      	movs	r2, #0
 802b65e:	701a      	strb	r2, [r3, #0]
	modem_rx_buffer_clear();
 802b660:	f7ff fc6e 	bl	802af40 <modem_rx_buffer_clear>

	HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 802b664:	2201      	movs	r2, #1
 802b666:	4925      	ldr	r1, [pc, #148]	; (802b6fc <AT_CIFSR+0xb8>)
 802b668:	4825      	ldr	r0, [pc, #148]	; (802b700 <AT_CIFSR+0xbc>)
 802b66a:	f7ec fc5b 	bl	8017f24 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart3, str_out, 10);
 802b66e:	1d3b      	adds	r3, r7, #4
 802b670:	220a      	movs	r2, #10
 802b672:	4619      	mov	r1, r3
 802b674:	4822      	ldr	r0, [pc, #136]	; (802b700 <AT_CIFSR+0xbc>)
 802b676:	f7ec fbd7 	bl	8017e28 <HAL_UART_Transmit_DMA>

	osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 802b67a:	4b22      	ldr	r3, [pc, #136]	; (802b704 <AT_CIFSR+0xc0>)
 802b67c:	681b      	ldr	r3, [r3, #0]
 802b67e:	f04f 31ff 	mov.w	r1, #4294967295
 802b682:	4618      	mov	r0, r3
 802b684:	f7ed fec6 	bl	8019414 <osSemaphoreWait>

	osTimerStart(AT_TimerHandle, 5000);
 802b688:	4b1f      	ldr	r3, [pc, #124]	; (802b708 <AT_CIFSR+0xc4>)
 802b68a:	681b      	ldr	r3, [r3, #0]
 802b68c:	f241 3188 	movw	r1, #5000	; 0x1388
 802b690:	4618      	mov	r0, r3
 802b692:	f7ed fd71 	bl	8019178 <osTimerStart>
	while(read_rx_state == ACTIVE)
 802b696:	e021      	b.n	802b6dc <AT_CIFSR+0x98>
	{
		//osThreadSuspend(M95TaskHandle);
		if(strstr(modem_rx_buffer, "OK\r\n") != NULL )
 802b698:	491c      	ldr	r1, [pc, #112]	; (802b70c <AT_CIFSR+0xc8>)
 802b69a:	481d      	ldr	r0, [pc, #116]	; (802b710 <AT_CIFSR+0xcc>)
 802b69c:	f002 fee2 	bl	802e464 <strstr>
 802b6a0:	4603      	mov	r3, r0
 802b6a2:	2b00      	cmp	r3, #0
 802b6a4:	d009      	beq.n	802b6ba <AT_CIFSR+0x76>
		{
			osTimerStop(AT_TimerHandle);
 802b6a6:	4b18      	ldr	r3, [pc, #96]	; (802b708 <AT_CIFSR+0xc4>)
 802b6a8:	681b      	ldr	r3, [r3, #0]
 802b6aa:	4618      	mov	r0, r3
 802b6ac:	f7ed fda8 	bl	8019200 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 802b6b0:	4b10      	ldr	r3, [pc, #64]	; (802b6f4 <AT_CIFSR+0xb0>)
 802b6b2:	2200      	movs	r2, #0
 802b6b4:	701a      	strb	r2, [r3, #0]
			return AT_OK;
 802b6b6:	2300      	movs	r3, #0
 802b6b8:	e015      	b.n	802b6e6 <AT_CIFSR+0xa2>
		}
		if(strstr(modem_rx_buffer, "ERROR\r\n") != NULL )
 802b6ba:	4916      	ldr	r1, [pc, #88]	; (802b714 <AT_CIFSR+0xd0>)
 802b6bc:	4814      	ldr	r0, [pc, #80]	; (802b710 <AT_CIFSR+0xcc>)
 802b6be:	f002 fed1 	bl	802e464 <strstr>
 802b6c2:	4603      	mov	r3, r0
 802b6c4:	2b00      	cmp	r3, #0
 802b6c6:	d009      	beq.n	802b6dc <AT_CIFSR+0x98>
		{
			osTimerStop(AT_TimerHandle);
 802b6c8:	4b0f      	ldr	r3, [pc, #60]	; (802b708 <AT_CIFSR+0xc4>)
 802b6ca:	681b      	ldr	r3, [r3, #0]
 802b6cc:	4618      	mov	r0, r3
 802b6ce:	f7ed fd97 	bl	8019200 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 802b6d2:	4b08      	ldr	r3, [pc, #32]	; (802b6f4 <AT_CIFSR+0xb0>)
 802b6d4:	2200      	movs	r2, #0
 802b6d6:	701a      	strb	r2, [r3, #0]
			return AT_ERROR;
 802b6d8:	2301      	movs	r3, #1
 802b6da:	e004      	b.n	802b6e6 <AT_CIFSR+0xa2>
	while(read_rx_state == ACTIVE)
 802b6dc:	4b05      	ldr	r3, [pc, #20]	; (802b6f4 <AT_CIFSR+0xb0>)
 802b6de:	781b      	ldrb	r3, [r3, #0]
 802b6e0:	2b01      	cmp	r3, #1
 802b6e2:	d0d9      	beq.n	802b698 <AT_CIFSR+0x54>
		}

	}
	return AT_ERROR;
 802b6e4:	2301      	movs	r3, #1

}
 802b6e6:	4618      	mov	r0, r3
 802b6e8:	3710      	adds	r7, #16
 802b6ea:	46bd      	mov	sp, r7
 802b6ec:	bd80      	pop	{r7, pc}
 802b6ee:	bf00      	nop
 802b6f0:	0802fe8c 	.word	0x0802fe8c
 802b6f4:	20009b10 	.word	0x20009b10
 802b6f8:	20000864 	.word	0x20000864
 802b6fc:	20009bbc 	.word	0x20009bbc
 802b700:	2000825c 	.word	0x2000825c
 802b704:	20009ea0 	.word	0x20009ea0
 802b708:	20009714 	.word	0x20009714
 802b70c:	0802fd60 	.word	0x0802fd60
 802b710:	20009cc4 	.word	0x20009cc4
 802b714:	0802fe4c 	.word	0x0802fe4c

0802b718 <AT_CIPSTART>:

uint8_t AT_CIPSTART (char* type , uint8_t ip1, uint8_t ip2, uint8_t ip3, uint8_t ip4, uint16_t port)
{
 802b718:	b580      	push	{r7, lr}
 802b71a:	b098      	sub	sp, #96	; 0x60
 802b71c:	af04      	add	r7, sp, #16
 802b71e:	6078      	str	r0, [r7, #4]
 802b720:	4608      	mov	r0, r1
 802b722:	4611      	mov	r1, r2
 802b724:	461a      	mov	r2, r3
 802b726:	4603      	mov	r3, r0
 802b728:	70fb      	strb	r3, [r7, #3]
 802b72a:	460b      	mov	r3, r1
 802b72c:	70bb      	strb	r3, [r7, #2]
 802b72e:	4613      	mov	r3, r2
 802b730:	707b      	strb	r3, [r7, #1]
	char str5[3];
	char str6[5];
	char str7[42];
	uint8_t n;

	sprintf(str1, "%s", type);
 802b732:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 802b736:	687a      	ldr	r2, [r7, #4]
 802b738:	4951      	ldr	r1, [pc, #324]	; (802b880 <AT_CIPSTART+0x168>)
 802b73a:	4618      	mov	r0, r3
 802b73c:	f002 fe72 	bl	802e424 <siprintf>
	sprintf(str2, "%u", ip1);
 802b740:	78fa      	ldrb	r2, [r7, #3]
 802b742:	f107 0348 	add.w	r3, r7, #72	; 0x48
 802b746:	494f      	ldr	r1, [pc, #316]	; (802b884 <AT_CIPSTART+0x16c>)
 802b748:	4618      	mov	r0, r3
 802b74a:	f002 fe6b 	bl	802e424 <siprintf>
	sprintf(str3, "%u", ip2);
 802b74e:	78ba      	ldrb	r2, [r7, #2]
 802b750:	f107 0344 	add.w	r3, r7, #68	; 0x44
 802b754:	494b      	ldr	r1, [pc, #300]	; (802b884 <AT_CIPSTART+0x16c>)
 802b756:	4618      	mov	r0, r3
 802b758:	f002 fe64 	bl	802e424 <siprintf>
	sprintf(str4, "%u", ip3);
 802b75c:	787a      	ldrb	r2, [r7, #1]
 802b75e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 802b762:	4948      	ldr	r1, [pc, #288]	; (802b884 <AT_CIPSTART+0x16c>)
 802b764:	4618      	mov	r0, r3
 802b766:	f002 fe5d 	bl	802e424 <siprintf>
	sprintf(str5, "%u", ip4);
 802b76a:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 802b76e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 802b772:	4944      	ldr	r1, [pc, #272]	; (802b884 <AT_CIPSTART+0x16c>)
 802b774:	4618      	mov	r0, r3
 802b776:	f002 fe55 	bl	802e424 <siprintf>
	sprintf(str6, "%u", port);
 802b77a:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 802b77e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 802b782:	4940      	ldr	r1, [pc, #256]	; (802b884 <AT_CIPSTART+0x16c>)
 802b784:	4618      	mov	r0, r3
 802b786:	f002 fe4d 	bl	802e424 <siprintf>

	n = sprintf(str7, "AT+CIPSTART=\"%s\",\"%s.%s.%s.%s\",%s\r\n", str1, str2, str3, str4, str5, str6);
 802b78a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 802b78e:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 802b792:	f107 0008 	add.w	r0, r7, #8
 802b796:	f107 0334 	add.w	r3, r7, #52	; 0x34
 802b79a:	9303      	str	r3, [sp, #12]
 802b79c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 802b7a0:	9302      	str	r3, [sp, #8]
 802b7a2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 802b7a6:	9301      	str	r3, [sp, #4]
 802b7a8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 802b7ac:	9300      	str	r3, [sp, #0]
 802b7ae:	460b      	mov	r3, r1
 802b7b0:	4935      	ldr	r1, [pc, #212]	; (802b888 <AT_CIPSTART+0x170>)
 802b7b2:	f002 fe37 	bl	802e424 <siprintf>
 802b7b6:	4603      	mov	r3, r0
 802b7b8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

 	read_rx_state = ACTIVE;
 802b7bc:	4b33      	ldr	r3, [pc, #204]	; (802b88c <AT_CIPSTART+0x174>)
 802b7be:	2201      	movs	r2, #1
 802b7c0:	701a      	strb	r2, [r3, #0]
	modem_rx_number = 0;
 802b7c2:	4b33      	ldr	r3, [pc, #204]	; (802b890 <AT_CIPSTART+0x178>)
 802b7c4:	2200      	movs	r2, #0
 802b7c6:	701a      	strb	r2, [r3, #0]
	modem_rx_buffer_clear();
 802b7c8:	f7ff fbba 	bl	802af40 <modem_rx_buffer_clear>

	HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 802b7cc:	2201      	movs	r2, #1
 802b7ce:	4931      	ldr	r1, [pc, #196]	; (802b894 <AT_CIPSTART+0x17c>)
 802b7d0:	4831      	ldr	r0, [pc, #196]	; (802b898 <AT_CIPSTART+0x180>)
 802b7d2:	f7ec fba7 	bl	8017f24 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart3, str7, n);
 802b7d6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 802b7da:	b29a      	uxth	r2, r3
 802b7dc:	f107 0308 	add.w	r3, r7, #8
 802b7e0:	4619      	mov	r1, r3
 802b7e2:	482d      	ldr	r0, [pc, #180]	; (802b898 <AT_CIPSTART+0x180>)
 802b7e4:	f7ec fb20 	bl	8017e28 <HAL_UART_Transmit_DMA>

	osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 802b7e8:	4b2c      	ldr	r3, [pc, #176]	; (802b89c <AT_CIPSTART+0x184>)
 802b7ea:	681b      	ldr	r3, [r3, #0]
 802b7ec:	f04f 31ff 	mov.w	r1, #4294967295
 802b7f0:	4618      	mov	r0, r3
 802b7f2:	f7ed fe0f 	bl	8019414 <osSemaphoreWait>

	osTimerStart(AT_TimerHandle, 3000);
 802b7f6:	4b2a      	ldr	r3, [pc, #168]	; (802b8a0 <AT_CIPSTART+0x188>)
 802b7f8:	681b      	ldr	r3, [r3, #0]
 802b7fa:	f640 31b8 	movw	r1, #3000	; 0xbb8
 802b7fe:	4618      	mov	r0, r3
 802b800:	f7ed fcba 	bl	8019178 <osTimerStart>
	while(read_rx_state == ACTIVE)
 802b804:	e032      	b.n	802b86c <AT_CIPSTART+0x154>
	{
		//osThreadSuspend(M95TaskHandle);
		if( (strstr(modem_rx_buffer, "CONNECT OK\r\n") != NULL) )
 802b806:	4927      	ldr	r1, [pc, #156]	; (802b8a4 <AT_CIPSTART+0x18c>)
 802b808:	4827      	ldr	r0, [pc, #156]	; (802b8a8 <AT_CIPSTART+0x190>)
 802b80a:	f002 fe2b 	bl	802e464 <strstr>
 802b80e:	4603      	mov	r3, r0
 802b810:	2b00      	cmp	r3, #0
 802b812:	d009      	beq.n	802b828 <AT_CIPSTART+0x110>
		{
			osTimerStop(AT_TimerHandle);
 802b814:	4b22      	ldr	r3, [pc, #136]	; (802b8a0 <AT_CIPSTART+0x188>)
 802b816:	681b      	ldr	r3, [r3, #0]
 802b818:	4618      	mov	r0, r3
 802b81a:	f7ed fcf1 	bl	8019200 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 802b81e:	4b1b      	ldr	r3, [pc, #108]	; (802b88c <AT_CIPSTART+0x174>)
 802b820:	2200      	movs	r2, #0
 802b822:	701a      	strb	r2, [r3, #0]
			return AT_OK;
 802b824:	2300      	movs	r3, #0
 802b826:	e026      	b.n	802b876 <AT_CIPSTART+0x15e>
		}
		else if( (strstr(modem_rx_buffer, "ALREADY CONNECT\r\n") != NULL) )
 802b828:	4920      	ldr	r1, [pc, #128]	; (802b8ac <AT_CIPSTART+0x194>)
 802b82a:	481f      	ldr	r0, [pc, #124]	; (802b8a8 <AT_CIPSTART+0x190>)
 802b82c:	f002 fe1a 	bl	802e464 <strstr>
 802b830:	4603      	mov	r3, r0
 802b832:	2b00      	cmp	r3, #0
 802b834:	d009      	beq.n	802b84a <AT_CIPSTART+0x132>
		{
			osTimerStop(AT_TimerHandle);
 802b836:	4b1a      	ldr	r3, [pc, #104]	; (802b8a0 <AT_CIPSTART+0x188>)
 802b838:	681b      	ldr	r3, [r3, #0]
 802b83a:	4618      	mov	r0, r3
 802b83c:	f7ed fce0 	bl	8019200 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 802b840:	4b12      	ldr	r3, [pc, #72]	; (802b88c <AT_CIPSTART+0x174>)
 802b842:	2200      	movs	r2, #0
 802b844:	701a      	strb	r2, [r3, #0]
			return AT_OK;
 802b846:	2300      	movs	r3, #0
 802b848:	e015      	b.n	802b876 <AT_CIPSTART+0x15e>
		}
		else if( (strstr(modem_rx_buffer, "CONNECT FAIL\r\n") != NULL) )
 802b84a:	4919      	ldr	r1, [pc, #100]	; (802b8b0 <AT_CIPSTART+0x198>)
 802b84c:	4816      	ldr	r0, [pc, #88]	; (802b8a8 <AT_CIPSTART+0x190>)
 802b84e:	f002 fe09 	bl	802e464 <strstr>
 802b852:	4603      	mov	r3, r0
 802b854:	2b00      	cmp	r3, #0
 802b856:	d009      	beq.n	802b86c <AT_CIPSTART+0x154>
		{
			osTimerStop(AT_TimerHandle);
 802b858:	4b11      	ldr	r3, [pc, #68]	; (802b8a0 <AT_CIPSTART+0x188>)
 802b85a:	681b      	ldr	r3, [r3, #0]
 802b85c:	4618      	mov	r0, r3
 802b85e:	f7ed fccf 	bl	8019200 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 802b862:	4b0a      	ldr	r3, [pc, #40]	; (802b88c <AT_CIPSTART+0x174>)
 802b864:	2200      	movs	r2, #0
 802b866:	701a      	strb	r2, [r3, #0]
			return AT_ERROR;
 802b868:	2301      	movs	r3, #1
 802b86a:	e004      	b.n	802b876 <AT_CIPSTART+0x15e>
	while(read_rx_state == ACTIVE)
 802b86c:	4b07      	ldr	r3, [pc, #28]	; (802b88c <AT_CIPSTART+0x174>)
 802b86e:	781b      	ldrb	r3, [r3, #0]
 802b870:	2b01      	cmp	r3, #1
 802b872:	d0c8      	beq.n	802b806 <AT_CIPSTART+0xee>
		}

	}
	return AT_ERROR;
 802b874:	2301      	movs	r3, #1

}
 802b876:	4618      	mov	r0, r3
 802b878:	3750      	adds	r7, #80	; 0x50
 802b87a:	46bd      	mov	sp, r7
 802b87c:	bd80      	pop	{r7, pc}
 802b87e:	bf00      	nop
 802b880:	0802fe98 	.word	0x0802fe98
 802b884:	0802fe9c 	.word	0x0802fe9c
 802b888:	0802fea0 	.word	0x0802fea0
 802b88c:	20009b10 	.word	0x20009b10
 802b890:	20000864 	.word	0x20000864
 802b894:	20009bbc 	.word	0x20009bbc
 802b898:	2000825c 	.word	0x2000825c
 802b89c:	20009ea0 	.word	0x20009ea0
 802b8a0:	20009714 	.word	0x20009714
 802b8a4:	0802fe30 	.word	0x0802fe30
 802b8a8:	20009cc4 	.word	0x20009cc4
 802b8ac:	0802fec4 	.word	0x0802fec4
 802b8b0:	0802fed8 	.word	0x0802fed8

0802b8b4 <AT_CIPSEND>:

uint8_t AT_CIPSEND (uint8_t* buf, uint16_t length) // maximum length = 1460
{
 802b8b4:	b580      	push	{r7, lr}
 802b8b6:	b088      	sub	sp, #32
 802b8b8:	af00      	add	r7, sp, #0
 802b8ba:	6078      	str	r0, [r7, #4]
 802b8bc:	460b      	mov	r3, r1
 802b8be:	807b      	strh	r3, [r7, #2]
	uint8_t n1;
	char str_out[17];

	n1 = sprintf(str_out, "AT+CIPSEND=%u\r\n", length);
 802b8c0:	887a      	ldrh	r2, [r7, #2]
 802b8c2:	f107 030c 	add.w	r3, r7, #12
 802b8c6:	493b      	ldr	r1, [pc, #236]	; (802b9b4 <AT_CIPSEND+0x100>)
 802b8c8:	4618      	mov	r0, r3
 802b8ca:	f002 fdab 	bl	802e424 <siprintf>
 802b8ce:	4603      	mov	r3, r0
 802b8d0:	77fb      	strb	r3, [r7, #31]

 	read_rx_state = ACTIVE;
 802b8d2:	4b39      	ldr	r3, [pc, #228]	; (802b9b8 <AT_CIPSEND+0x104>)
 802b8d4:	2201      	movs	r2, #1
 802b8d6:	701a      	strb	r2, [r3, #0]
	modem_rx_number = 0;
 802b8d8:	4b38      	ldr	r3, [pc, #224]	; (802b9bc <AT_CIPSEND+0x108>)
 802b8da:	2200      	movs	r2, #0
 802b8dc:	701a      	strb	r2, [r3, #0]
	modem_rx_buffer_clear();
 802b8de:	f7ff fb2f 	bl	802af40 <modem_rx_buffer_clear>

	HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 802b8e2:	2201      	movs	r2, #1
 802b8e4:	4936      	ldr	r1, [pc, #216]	; (802b9c0 <AT_CIPSEND+0x10c>)
 802b8e6:	4837      	ldr	r0, [pc, #220]	; (802b9c4 <AT_CIPSEND+0x110>)
 802b8e8:	f7ec fb1c 	bl	8017f24 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart3, str_out, n1);
 802b8ec:	7ffb      	ldrb	r3, [r7, #31]
 802b8ee:	b29a      	uxth	r2, r3
 802b8f0:	f107 030c 	add.w	r3, r7, #12
 802b8f4:	4619      	mov	r1, r3
 802b8f6:	4833      	ldr	r0, [pc, #204]	; (802b9c4 <AT_CIPSEND+0x110>)
 802b8f8:	f7ec fa96 	bl	8017e28 <HAL_UART_Transmit_DMA>

	osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 802b8fc:	4b32      	ldr	r3, [pc, #200]	; (802b9c8 <AT_CIPSEND+0x114>)
 802b8fe:	681b      	ldr	r3, [r3, #0]
 802b900:	f04f 31ff 	mov.w	r1, #4294967295
 802b904:	4618      	mov	r0, r3
 802b906:	f7ed fd85 	bl	8019414 <osSemaphoreWait>

	osTimerStart(AT_TimerHandle, 300);
 802b90a:	4b30      	ldr	r3, [pc, #192]	; (802b9cc <AT_CIPSEND+0x118>)
 802b90c:	681b      	ldr	r3, [r3, #0]
 802b90e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 802b912:	4618      	mov	r0, r3
 802b914:	f7ed fc30 	bl	8019178 <osTimerStart>
	while(read_rx_state == ACTIVE)
 802b918:	e043      	b.n	802b9a2 <AT_CIPSEND+0xee>
	{
		//osThreadSuspend(osThreadGetId());
		//osSemaphoreWait(ReceiveStateHandle, osWaitForever);
		if( strstr(modem_rx_buffer, "> ") != NULL )
 802b91a:	492d      	ldr	r1, [pc, #180]	; (802b9d0 <AT_CIPSEND+0x11c>)
 802b91c:	482d      	ldr	r0, [pc, #180]	; (802b9d4 <AT_CIPSEND+0x120>)
 802b91e:	f002 fda1 	bl	802e464 <strstr>
 802b922:	4603      	mov	r3, r0
 802b924:	2b00      	cmp	r3, #0
 802b926:	d03c      	beq.n	802b9a2 <AT_CIPSEND+0xee>
		{
			osTimerStop(AT_TimerHandle);
 802b928:	4b28      	ldr	r3, [pc, #160]	; (802b9cc <AT_CIPSEND+0x118>)
 802b92a:	681b      	ldr	r3, [r3, #0]
 802b92c:	4618      	mov	r0, r3
 802b92e:	f7ed fc67 	bl	8019200 <osTimerStop>
			modem_rx_number = 0;
 802b932:	4b22      	ldr	r3, [pc, #136]	; (802b9bc <AT_CIPSEND+0x108>)
 802b934:	2200      	movs	r2, #0
 802b936:	701a      	strb	r2, [r3, #0]
			modem_rx_buffer_clear();
 802b938:	f7ff fb02 	bl	802af40 <modem_rx_buffer_clear>

			HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 802b93c:	2201      	movs	r2, #1
 802b93e:	4920      	ldr	r1, [pc, #128]	; (802b9c0 <AT_CIPSEND+0x10c>)
 802b940:	4820      	ldr	r0, [pc, #128]	; (802b9c4 <AT_CIPSEND+0x110>)
 802b942:	f7ec faef 	bl	8017f24 <HAL_UART_Receive_DMA>
			HAL_UART_Transmit_DMA(&huart3, buf, length);
 802b946:	887b      	ldrh	r3, [r7, #2]
 802b948:	461a      	mov	r2, r3
 802b94a:	6879      	ldr	r1, [r7, #4]
 802b94c:	481d      	ldr	r0, [pc, #116]	; (802b9c4 <AT_CIPSEND+0x110>)
 802b94e:	f7ec fa6b 	bl	8017e28 <HAL_UART_Transmit_DMA>

			osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 802b952:	4b1d      	ldr	r3, [pc, #116]	; (802b9c8 <AT_CIPSEND+0x114>)
 802b954:	681b      	ldr	r3, [r3, #0]
 802b956:	f04f 31ff 	mov.w	r1, #4294967295
 802b95a:	4618      	mov	r0, r3
 802b95c:	f7ed fd5a 	bl	8019414 <osSemaphoreWait>

			osTimerStart(AT_TimerHandle, 3000); // маленькое время!!!!!
 802b960:	4b1a      	ldr	r3, [pc, #104]	; (802b9cc <AT_CIPSEND+0x118>)
 802b962:	681b      	ldr	r3, [r3, #0]
 802b964:	f640 31b8 	movw	r1, #3000	; 0xbb8
 802b968:	4618      	mov	r0, r3
 802b96a:	f7ed fc05 	bl	8019178 <osTimerStart>
			while(read_rx_state == ACTIVE)
 802b96e:	e012      	b.n	802b996 <AT_CIPSEND+0xe2>
			{
				//osThreadSuspend(osThreadGetId());
				//osSemaphoreWait(ReceiveStateHandle, osWaitForever);

				if( find_str(modem_rx_buffer, 255, send_ok, 7) == 1 )
 802b970:	2307      	movs	r3, #7
 802b972:	4a19      	ldr	r2, [pc, #100]	; (802b9d8 <AT_CIPSEND+0x124>)
 802b974:	21ff      	movs	r1, #255	; 0xff
 802b976:	4817      	ldr	r0, [pc, #92]	; (802b9d4 <AT_CIPSEND+0x120>)
 802b978:	f7ff fa6e 	bl	802ae58 <find_str>
 802b97c:	4603      	mov	r3, r0
 802b97e:	2b01      	cmp	r3, #1
 802b980:	d109      	bne.n	802b996 <AT_CIPSEND+0xe2>
				{
					osTimerStop(AT_TimerHandle);
 802b982:	4b12      	ldr	r3, [pc, #72]	; (802b9cc <AT_CIPSEND+0x118>)
 802b984:	681b      	ldr	r3, [r3, #0]
 802b986:	4618      	mov	r0, r3
 802b988:	f7ed fc3a 	bl	8019200 <osTimerStop>
					read_rx_state = NOT_ACTIVE;
 802b98c:	4b0a      	ldr	r3, [pc, #40]	; (802b9b8 <AT_CIPSEND+0x104>)
 802b98e:	2200      	movs	r2, #0
 802b990:	701a      	strb	r2, [r3, #0]
					return AT_OK;
 802b992:	2300      	movs	r3, #0
 802b994:	e00a      	b.n	802b9ac <AT_CIPSEND+0xf8>
			while(read_rx_state == ACTIVE)
 802b996:	4b08      	ldr	r3, [pc, #32]	; (802b9b8 <AT_CIPSEND+0x104>)
 802b998:	781b      	ldrb	r3, [r3, #0]
 802b99a:	2b01      	cmp	r3, #1
 802b99c:	d0e8      	beq.n	802b970 <AT_CIPSEND+0xbc>
					read_rx_state = NOT_ACTIVE;
					return AT_ERROR;
				}
				*/
			}
			return AT_ERROR;
 802b99e:	2301      	movs	r3, #1
 802b9a0:	e004      	b.n	802b9ac <AT_CIPSEND+0xf8>
	while(read_rx_state == ACTIVE)
 802b9a2:	4b05      	ldr	r3, [pc, #20]	; (802b9b8 <AT_CIPSEND+0x104>)
 802b9a4:	781b      	ldrb	r3, [r3, #0]
 802b9a6:	2b01      	cmp	r3, #1
 802b9a8:	d0b7      	beq.n	802b91a <AT_CIPSEND+0x66>
			read_rx_state = NOT_ACTIVE;
			return AT_ERROR;
		}*/

	}
	return AT_ERROR;
 802b9aa:	2301      	movs	r3, #1

}
 802b9ac:	4618      	mov	r0, r3
 802b9ae:	3720      	adds	r7, #32
 802b9b0:	46bd      	mov	sp, r7
 802b9b2:	bd80      	pop	{r7, pc}
 802b9b4:	0802fee8 	.word	0x0802fee8
 802b9b8:	20009b10 	.word	0x20009b10
 802b9bc:	20000864 	.word	0x20000864
 802b9c0:	20009bbc 	.word	0x20009bbc
 802b9c4:	2000825c 	.word	0x2000825c
 802b9c8:	20009ea0 	.word	0x20009ea0
 802b9cc:	20009714 	.word	0x20009714
 802b9d0:	0802fef8 	.word	0x0802fef8
 802b9d4:	20009cc4 	.word	0x20009cc4
 802b9d8:	20000070 	.word	0x20000070

0802b9dc <AT_CIPSHUT>:

uint8_t AT_CIPSHUT  (void)
{
 802b9dc:	b580      	push	{r7, lr}
 802b9de:	b084      	sub	sp, #16
 802b9e0:	af00      	add	r7, sp, #0
	uint8_t str_out[12];
	sprintf(str_out, "AT+CIPSHUT\r\n");
 802b9e2:	1d3b      	adds	r3, r7, #4
 802b9e4:	4928      	ldr	r1, [pc, #160]	; (802ba88 <AT_CIPSHUT+0xac>)
 802b9e6:	4618      	mov	r0, r3
 802b9e8:	f002 fd1c 	bl	802e424 <siprintf>

	read_rx_state = ACTIVE;
 802b9ec:	4b27      	ldr	r3, [pc, #156]	; (802ba8c <AT_CIPSHUT+0xb0>)
 802b9ee:	2201      	movs	r2, #1
 802b9f0:	701a      	strb	r2, [r3, #0]
	modem_rx_number = 0;
 802b9f2:	4b27      	ldr	r3, [pc, #156]	; (802ba90 <AT_CIPSHUT+0xb4>)
 802b9f4:	2200      	movs	r2, #0
 802b9f6:	701a      	strb	r2, [r3, #0]
	modem_rx_buffer_clear();
 802b9f8:	f7ff faa2 	bl	802af40 <modem_rx_buffer_clear>

	HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 802b9fc:	2201      	movs	r2, #1
 802b9fe:	4925      	ldr	r1, [pc, #148]	; (802ba94 <AT_CIPSHUT+0xb8>)
 802ba00:	4825      	ldr	r0, [pc, #148]	; (802ba98 <AT_CIPSHUT+0xbc>)
 802ba02:	f7ec fa8f 	bl	8017f24 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart3, str_out, 12);
 802ba06:	1d3b      	adds	r3, r7, #4
 802ba08:	220c      	movs	r2, #12
 802ba0a:	4619      	mov	r1, r3
 802ba0c:	4822      	ldr	r0, [pc, #136]	; (802ba98 <AT_CIPSHUT+0xbc>)
 802ba0e:	f7ec fa0b 	bl	8017e28 <HAL_UART_Transmit_DMA>

	osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 802ba12:	4b22      	ldr	r3, [pc, #136]	; (802ba9c <AT_CIPSHUT+0xc0>)
 802ba14:	681b      	ldr	r3, [r3, #0]
 802ba16:	f04f 31ff 	mov.w	r1, #4294967295
 802ba1a:	4618      	mov	r0, r3
 802ba1c:	f7ed fcfa 	bl	8019414 <osSemaphoreWait>

	osTimerStart(AT_TimerHandle, 10000);
 802ba20:	4b1f      	ldr	r3, [pc, #124]	; (802baa0 <AT_CIPSHUT+0xc4>)
 802ba22:	681b      	ldr	r3, [r3, #0]
 802ba24:	f242 7110 	movw	r1, #10000	; 0x2710
 802ba28:	4618      	mov	r0, r3
 802ba2a:	f7ed fba5 	bl	8019178 <osTimerStart>
	while(read_rx_state == ACTIVE)
 802ba2e:	e021      	b.n	802ba74 <AT_CIPSHUT+0x98>
	{
		//osThreadSuspend(M95TaskHandle);
		if(strstr(modem_rx_buffer, "OK\r\n") != NULL )
 802ba30:	491c      	ldr	r1, [pc, #112]	; (802baa4 <AT_CIPSHUT+0xc8>)
 802ba32:	481d      	ldr	r0, [pc, #116]	; (802baa8 <AT_CIPSHUT+0xcc>)
 802ba34:	f002 fd16 	bl	802e464 <strstr>
 802ba38:	4603      	mov	r3, r0
 802ba3a:	2b00      	cmp	r3, #0
 802ba3c:	d009      	beq.n	802ba52 <AT_CIPSHUT+0x76>
		{
			osTimerStop(AT_TimerHandle);
 802ba3e:	4b18      	ldr	r3, [pc, #96]	; (802baa0 <AT_CIPSHUT+0xc4>)
 802ba40:	681b      	ldr	r3, [r3, #0]
 802ba42:	4618      	mov	r0, r3
 802ba44:	f7ed fbdc 	bl	8019200 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 802ba48:	4b10      	ldr	r3, [pc, #64]	; (802ba8c <AT_CIPSHUT+0xb0>)
 802ba4a:	2200      	movs	r2, #0
 802ba4c:	701a      	strb	r2, [r3, #0]
			return AT_OK;
 802ba4e:	2300      	movs	r3, #0
 802ba50:	e015      	b.n	802ba7e <AT_CIPSHUT+0xa2>
		}
		if(strstr(modem_rx_buffer, "ERROR\r\n") != NULL )
 802ba52:	4916      	ldr	r1, [pc, #88]	; (802baac <AT_CIPSHUT+0xd0>)
 802ba54:	4814      	ldr	r0, [pc, #80]	; (802baa8 <AT_CIPSHUT+0xcc>)
 802ba56:	f002 fd05 	bl	802e464 <strstr>
 802ba5a:	4603      	mov	r3, r0
 802ba5c:	2b00      	cmp	r3, #0
 802ba5e:	d009      	beq.n	802ba74 <AT_CIPSHUT+0x98>
		{
			osTimerStop(AT_TimerHandle);
 802ba60:	4b0f      	ldr	r3, [pc, #60]	; (802baa0 <AT_CIPSHUT+0xc4>)
 802ba62:	681b      	ldr	r3, [r3, #0]
 802ba64:	4618      	mov	r0, r3
 802ba66:	f7ed fbcb 	bl	8019200 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 802ba6a:	4b08      	ldr	r3, [pc, #32]	; (802ba8c <AT_CIPSHUT+0xb0>)
 802ba6c:	2200      	movs	r2, #0
 802ba6e:	701a      	strb	r2, [r3, #0]
			return AT_ERROR;
 802ba70:	2301      	movs	r3, #1
 802ba72:	e004      	b.n	802ba7e <AT_CIPSHUT+0xa2>
	while(read_rx_state == ACTIVE)
 802ba74:	4b05      	ldr	r3, [pc, #20]	; (802ba8c <AT_CIPSHUT+0xb0>)
 802ba76:	781b      	ldrb	r3, [r3, #0]
 802ba78:	2b01      	cmp	r3, #1
 802ba7a:	d0d9      	beq.n	802ba30 <AT_CIPSHUT+0x54>
		}

	}
	return AT_ERROR;
 802ba7c:	2301      	movs	r3, #1

}
 802ba7e:	4618      	mov	r0, r3
 802ba80:	3710      	adds	r7, #16
 802ba82:	46bd      	mov	sp, r7
 802ba84:	bd80      	pop	{r7, pc}
 802ba86:	bf00      	nop
 802ba88:	0802fefc 	.word	0x0802fefc
 802ba8c:	20009b10 	.word	0x20009b10
 802ba90:	20000864 	.word	0x20000864
 802ba94:	20009bbc 	.word	0x20009bbc
 802ba98:	2000825c 	.word	0x2000825c
 802ba9c:	20009ea0 	.word	0x20009ea0
 802baa0:	20009714 	.word	0x20009714
 802baa4:	0802fd60 	.word	0x0802fd60
 802baa8:	20009cc4 	.word	0x20009cc4
 802baac:	0802fe4c 	.word	0x0802fe4c

0802bab0 <AT_CCID>:

uint8_t AT_CCID ( uint8_t* id, uint64_t* temp_id) // Команда для для чтения CCID сим карты. id - указатель к массиву в которую будет сохраняться CCID симкарты (должен быть 8 байт), temp_id - указатель к временному массиву для расчета (должен быть 20 байт)
{
 802bab0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 802bab4:	b0ae      	sub	sp, #184	; 0xb8
 802bab6:	af00      	add	r7, sp, #0
 802bab8:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
 802babc:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
	//uint64_t id1[20];
	char str_out[9];
	sprintf(str_out, "AT+CCID\r\n");
 802bac0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 802bac4:	491d      	ldr	r1, [pc, #116]	; (802bb3c <AT_CCID+0x8c>)
 802bac6:	4618      	mov	r0, r3
 802bac8:	f002 fcac 	bl	802e424 <siprintf>
	read_rx_state = ACTIVE;
 802bacc:	4a1c      	ldr	r2, [pc, #112]	; (802bb40 <AT_CCID+0x90>)
 802bace:	2301      	movs	r3, #1
 802bad0:	7013      	strb	r3, [r2, #0]
	modem_rx_number = 0;
 802bad2:	4a1c      	ldr	r2, [pc, #112]	; (802bb44 <AT_CCID+0x94>)
 802bad4:	2300      	movs	r3, #0
 802bad6:	7013      	strb	r3, [r2, #0]
	modem_rx_buffer_clear();
 802bad8:	f7ff fa32 	bl	802af40 <modem_rx_buffer_clear>
	HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 802badc:	2201      	movs	r2, #1
 802bade:	491a      	ldr	r1, [pc, #104]	; (802bb48 <AT_CCID+0x98>)
 802bae0:	481a      	ldr	r0, [pc, #104]	; (802bb4c <AT_CCID+0x9c>)
 802bae2:	f7ec fa1f 	bl	8017f24 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart3, str_out, 9);
 802bae6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 802baea:	2209      	movs	r2, #9
 802baec:	4619      	mov	r1, r3
 802baee:	4817      	ldr	r0, [pc, #92]	; (802bb4c <AT_CCID+0x9c>)
 802baf0:	f7ec f99a 	bl	8017e28 <HAL_UART_Transmit_DMA>

	osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 802baf4:	4b16      	ldr	r3, [pc, #88]	; (802bb50 <AT_CCID+0xa0>)
 802baf6:	681b      	ldr	r3, [r3, #0]
 802baf8:	f04f 31ff 	mov.w	r1, #4294967295
 802bafc:	4618      	mov	r0, r3
 802bafe:	f7ed fc89 	bl	8019414 <osSemaphoreWait>

	osTimerStart(AT_TimerHandle, 300);
 802bb02:	4b14      	ldr	r3, [pc, #80]	; (802bb54 <AT_CCID+0xa4>)
 802bb04:	681b      	ldr	r3, [r3, #0]
 802bb06:	f44f 7196 	mov.w	r1, #300	; 0x12c
 802bb0a:	4618      	mov	r0, r3
 802bb0c:	f7ed fb34 	bl	8019178 <osTimerStart>
	while(read_rx_state == ACTIVE)
 802bb10:	e34b      	b.n	802c1aa <AT_CCID+0x6fa>
	{
		//osThreadSuspend(M95TaskHandle);
		if(strstr(modem_rx_buffer, "OK\r\n") != NULL )
 802bb12:	4911      	ldr	r1, [pc, #68]	; (802bb58 <AT_CCID+0xa8>)
 802bb14:	4811      	ldr	r0, [pc, #68]	; (802bb5c <AT_CCID+0xac>)
 802bb16:	f002 fca5 	bl	802e464 <strstr>
 802bb1a:	4603      	mov	r3, r0
 802bb1c:	2b00      	cmp	r3, #0
 802bb1e:	f000 8344 	beq.w	802c1aa <AT_CCID+0x6fa>
		{
			osTimerStop(AT_TimerHandle);
 802bb22:	4b0c      	ldr	r3, [pc, #48]	; (802bb54 <AT_CCID+0xa4>)
 802bb24:	681b      	ldr	r3, [r3, #0]
 802bb26:	4618      	mov	r0, r3
 802bb28:	f7ed fb6a 	bl	8019200 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 802bb2c:	4a04      	ldr	r2, [pc, #16]	; (802bb40 <AT_CCID+0x90>)
 802bb2e:	2300      	movs	r3, #0
 802bb30:	7013      	strb	r3, [r2, #0]

			// В случае, когда ATE0, эхо выключено
			for(uint8_t i=0; i<19; i++)
 802bb32:	2300      	movs	r3, #0
 802bb34:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 802bb38:	e029      	b.n	802bb8e <AT_CCID+0xde>
 802bb3a:	bf00      	nop
 802bb3c:	0802ff0c 	.word	0x0802ff0c
 802bb40:	20009b10 	.word	0x20009b10
 802bb44:	20000864 	.word	0x20000864
 802bb48:	20009bbc 	.word	0x20009bbc
 802bb4c:	2000825c 	.word	0x2000825c
 802bb50:	20009ea0 	.word	0x20009ea0
 802bb54:	20009714 	.word	0x20009714
 802bb58:	0802fd60 	.word	0x0802fd60
 802bb5c:	20009cc4 	.word	0x20009cc4
			{
				*(temp_id+i) = (uint8_t)modem_rx_buffer[4+i] - 48;
 802bb60:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 802bb64:	1d1a      	adds	r2, r3, #4
 802bb66:	4bde      	ldr	r3, [pc, #888]	; (802bee0 <AT_CCID+0x430>)
 802bb68:	5c9b      	ldrb	r3, [r3, r2]
 802bb6a:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 802bb6e:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 802bb72:	00da      	lsls	r2, r3, #3
 802bb74:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 802bb78:	1899      	adds	r1, r3, r2
 802bb7a:	4602      	mov	r2, r0
 802bb7c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 802bb80:	e9c1 2300 	strd	r2, r3, [r1]
			for(uint8_t i=0; i<19; i++)
 802bb84:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 802bb88:	3301      	adds	r3, #1
 802bb8a:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 802bb8e:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 802bb92:	2b12      	cmp	r3, #18
 802bb94:	d9e4      	bls.n	802bb60 <AT_CCID+0xb0>
				*(temp_id+i) = (uint8_t)modem_rx_buffer[10+i] - 48;
				//temp_id[i] = (uint8_t)modem_rx_buffer[10+i] - 48;
			}
			*/

			*(temp_id+19) = *temp_id*1000000000000000000 + *(temp_id+1)*100000000000000000 + *(temp_id+2)*10000000000000000 + *(temp_id+3)*1000000000000000 + *(temp_id+4)*100000000000000 + *(temp_id+5)*10000000000000 + *(temp_id+6)*1000000000000 + *(temp_id+7)*100000000000 + *(temp_id+8)*10000000000 + *(temp_id+9)*1000000000 + *(temp_id+10)*100000000 + *(temp_id+11)*10000000 + *(temp_id+12)*1000000 + *(temp_id+13)*100000 + *(temp_id+14)*10000 + *(temp_id+15)*1000 + *(temp_id+16)*100 + *(temp_id+17)*10 + *(temp_id+18);
 802bb96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 802bb9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802bb9e:	49d1      	ldr	r1, [pc, #836]	; (802bee4 <AT_CCID+0x434>)
 802bba0:	fb01 f003 	mul.w	r0, r1, r3
 802bba4:	49d0      	ldr	r1, [pc, #832]	; (802bee8 <AT_CCID+0x438>)
 802bba6:	fb01 f102 	mul.w	r1, r1, r2
 802bbaa:	4408      	add	r0, r1
 802bbac:	49cd      	ldr	r1, [pc, #820]	; (802bee4 <AT_CCID+0x434>)
 802bbae:	fba2 4501 	umull	r4, r5, r2, r1
 802bbb2:	1943      	adds	r3, r0, r5
 802bbb4:	461d      	mov	r5, r3
 802bbb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 802bbba:	3308      	adds	r3, #8
 802bbbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 802bbc0:	49ca      	ldr	r1, [pc, #808]	; (802beec <AT_CCID+0x43c>)
 802bbc2:	fb01 f003 	mul.w	r0, r1, r3
 802bbc6:	49ca      	ldr	r1, [pc, #808]	; (802bef0 <AT_CCID+0x440>)
 802bbc8:	fb01 f102 	mul.w	r1, r1, r2
 802bbcc:	4408      	add	r0, r1
 802bbce:	49c7      	ldr	r1, [pc, #796]	; (802beec <AT_CCID+0x43c>)
 802bbd0:	fba2 2301 	umull	r2, r3, r2, r1
 802bbd4:	18c1      	adds	r1, r0, r3
 802bbd6:	460b      	mov	r3, r1
 802bbd8:	eb14 0a02 	adds.w	sl, r4, r2
 802bbdc:	eb45 0b03 	adc.w	fp, r5, r3
 802bbe0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 802bbe4:	3318      	adds	r3, #24
 802bbe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 802bbea:	49c2      	ldr	r1, [pc, #776]	; (802bef4 <AT_CCID+0x444>)
 802bbec:	fb01 f003 	mul.w	r0, r1, r3
 802bbf0:	49c1      	ldr	r1, [pc, #772]	; (802bef8 <AT_CCID+0x448>)
 802bbf2:	fb01 f102 	mul.w	r1, r1, r2
 802bbf6:	4408      	add	r0, r1
 802bbf8:	49be      	ldr	r1, [pc, #760]	; (802bef4 <AT_CCID+0x444>)
 802bbfa:	fba2 4501 	umull	r4, r5, r2, r1
 802bbfe:	1943      	adds	r3, r0, r5
 802bc00:	461d      	mov	r5, r3
 802bc02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 802bc06:	3310      	adds	r3, #16
 802bc08:	e9d3 2300 	ldrd	r2, r3, [r3]
 802bc0c:	49bb      	ldr	r1, [pc, #748]	; (802befc <AT_CCID+0x44c>)
 802bc0e:	fb01 f003 	mul.w	r0, r1, r3
 802bc12:	49bb      	ldr	r1, [pc, #748]	; (802bf00 <AT_CCID+0x450>)
 802bc14:	fb01 f102 	mul.w	r1, r1, r2
 802bc18:	4408      	add	r0, r1
 802bc1a:	49b8      	ldr	r1, [pc, #736]	; (802befc <AT_CCID+0x44c>)
 802bc1c:	fba2 2301 	umull	r2, r3, r2, r1
 802bc20:	18c1      	adds	r1, r0, r3
 802bc22:	460b      	mov	r3, r1
 802bc24:	eb14 0802 	adds.w	r8, r4, r2
 802bc28:	eb45 0903 	adc.w	r9, r5, r3
 802bc2c:	eb1a 0308 	adds.w	r3, sl, r8
 802bc30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 802bc34:	eb4b 0309 	adc.w	r3, fp, r9
 802bc38:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 802bc3c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 802bc40:	3328      	adds	r3, #40	; 0x28
 802bc42:	e9d3 2300 	ldrd	r2, r3, [r3]
 802bc46:	49af      	ldr	r1, [pc, #700]	; (802bf04 <AT_CCID+0x454>)
 802bc48:	fb01 f003 	mul.w	r0, r1, r3
 802bc4c:	f640 1118 	movw	r1, #2328	; 0x918
 802bc50:	fb01 f102 	mul.w	r1, r1, r2
 802bc54:	4408      	add	r0, r1
 802bc56:	49ab      	ldr	r1, [pc, #684]	; (802bf04 <AT_CCID+0x454>)
 802bc58:	fba2 4501 	umull	r4, r5, r2, r1
 802bc5c:	1943      	adds	r3, r0, r5
 802bc5e:	461d      	mov	r5, r3
 802bc60:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 802bc64:	3320      	adds	r3, #32
 802bc66:	e9d3 2300 	ldrd	r2, r3, [r3]
 802bc6a:	49a7      	ldr	r1, [pc, #668]	; (802bf08 <AT_CCID+0x458>)
 802bc6c:	fb01 f003 	mul.w	r0, r1, r3
 802bc70:	f645 21f3 	movw	r1, #23283	; 0x5af3
 802bc74:	fb01 f102 	mul.w	r1, r1, r2
 802bc78:	4408      	add	r0, r1
 802bc7a:	49a3      	ldr	r1, [pc, #652]	; (802bf08 <AT_CCID+0x458>)
 802bc7c:	fba2 2301 	umull	r2, r3, r2, r1
 802bc80:	18c1      	adds	r1, r0, r3
 802bc82:	460b      	mov	r3, r1
 802bc84:	18a1      	adds	r1, r4, r2
 802bc86:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 802bc8a:	eb45 0303 	adc.w	r3, r5, r3
 802bc8e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 802bc92:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 802bc96:	4623      	mov	r3, r4
 802bc98:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 802bc9c:	4602      	mov	r2, r0
 802bc9e:	189b      	adds	r3, r3, r2
 802bca0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 802bca4:	460b      	mov	r3, r1
 802bca6:	462a      	mov	r2, r5
 802bca8:	eb42 0303 	adc.w	r3, r2, r3
 802bcac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 802bcb0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 802bcb4:	3338      	adds	r3, #56	; 0x38
 802bcb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 802bcba:	4994      	ldr	r1, [pc, #592]	; (802bf0c <AT_CCID+0x45c>)
 802bcbc:	fb01 f003 	mul.w	r0, r1, r3
 802bcc0:	2117      	movs	r1, #23
 802bcc2:	fb01 f102 	mul.w	r1, r1, r2
 802bcc6:	4408      	add	r0, r1
 802bcc8:	4990      	ldr	r1, [pc, #576]	; (802bf0c <AT_CCID+0x45c>)
 802bcca:	fba2 4501 	umull	r4, r5, r2, r1
 802bcce:	1943      	adds	r3, r0, r5
 802bcd0:	461d      	mov	r5, r3
 802bcd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 802bcd6:	3330      	adds	r3, #48	; 0x30
 802bcd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 802bcdc:	498c      	ldr	r1, [pc, #560]	; (802bf10 <AT_CCID+0x460>)
 802bcde:	fb01 f003 	mul.w	r0, r1, r3
 802bce2:	21e8      	movs	r1, #232	; 0xe8
 802bce4:	fb01 f102 	mul.w	r1, r1, r2
 802bce8:	4408      	add	r0, r1
 802bcea:	4989      	ldr	r1, [pc, #548]	; (802bf10 <AT_CCID+0x460>)
 802bcec:	fba2 2301 	umull	r2, r3, r2, r1
 802bcf0:	18c1      	adds	r1, r0, r3
 802bcf2:	460b      	mov	r3, r1
 802bcf4:	18a1      	adds	r1, r4, r2
 802bcf6:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 802bcfa:	eb45 0303 	adc.w	r3, r5, r3
 802bcfe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 802bd02:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 802bd06:	4623      	mov	r3, r4
 802bd08:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 802bd0c:	4602      	mov	r2, r0
 802bd0e:	189b      	adds	r3, r3, r2
 802bd10:	67bb      	str	r3, [r7, #120]	; 0x78
 802bd12:	460b      	mov	r3, r1
 802bd14:	462a      	mov	r2, r5
 802bd16:	eb42 0303 	adc.w	r3, r2, r3
 802bd1a:	67fb      	str	r3, [r7, #124]	; 0x7c
 802bd1c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 802bd20:	3348      	adds	r3, #72	; 0x48
 802bd22:	e9d3 2300 	ldrd	r2, r3, [r3]
 802bd26:	497b      	ldr	r1, [pc, #492]	; (802bf14 <AT_CCID+0x464>)
 802bd28:	fb01 f003 	mul.w	r0, r1, r3
 802bd2c:	2100      	movs	r1, #0
 802bd2e:	fb01 f102 	mul.w	r1, r1, r2
 802bd32:	4408      	add	r0, r1
 802bd34:	4977      	ldr	r1, [pc, #476]	; (802bf14 <AT_CCID+0x464>)
 802bd36:	fba2 4501 	umull	r4, r5, r2, r1
 802bd3a:	1943      	adds	r3, r0, r5
 802bd3c:	461d      	mov	r5, r3
 802bd3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 802bd42:	3340      	adds	r3, #64	; 0x40
 802bd44:	e9d3 2300 	ldrd	r2, r3, [r3]
 802bd48:	4973      	ldr	r1, [pc, #460]	; (802bf18 <AT_CCID+0x468>)
 802bd4a:	fb01 f003 	mul.w	r0, r1, r3
 802bd4e:	2102      	movs	r1, #2
 802bd50:	fb01 f102 	mul.w	r1, r1, r2
 802bd54:	4408      	add	r0, r1
 802bd56:	4970      	ldr	r1, [pc, #448]	; (802bf18 <AT_CCID+0x468>)
 802bd58:	fba2 2301 	umull	r2, r3, r2, r1
 802bd5c:	18c1      	adds	r1, r0, r3
 802bd5e:	460b      	mov	r3, r1
 802bd60:	18a1      	adds	r1, r4, r2
 802bd62:	6739      	str	r1, [r7, #112]	; 0x70
 802bd64:	eb45 0303 	adc.w	r3, r5, r3
 802bd68:	677b      	str	r3, [r7, #116]	; 0x74
 802bd6a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 802bd6e:	4623      	mov	r3, r4
 802bd70:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 802bd74:	4602      	mov	r2, r0
 802bd76:	189b      	adds	r3, r3, r2
 802bd78:	66bb      	str	r3, [r7, #104]	; 0x68
 802bd7a:	460b      	mov	r3, r1
 802bd7c:	462a      	mov	r2, r5
 802bd7e:	eb42 0303 	adc.w	r3, r2, r3
 802bd82:	66fb      	str	r3, [r7, #108]	; 0x6c
 802bd84:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 802bd88:	3358      	adds	r3, #88	; 0x58
 802bd8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802bd8e:	4963      	ldr	r1, [pc, #396]	; (802bf1c <AT_CCID+0x46c>)
 802bd90:	fb01 f003 	mul.w	r0, r1, r3
 802bd94:	2100      	movs	r1, #0
 802bd96:	fb01 f102 	mul.w	r1, r1, r2
 802bd9a:	4408      	add	r0, r1
 802bd9c:	495f      	ldr	r1, [pc, #380]	; (802bf1c <AT_CCID+0x46c>)
 802bd9e:	fba2 4501 	umull	r4, r5, r2, r1
 802bda2:	1943      	adds	r3, r0, r5
 802bda4:	461d      	mov	r5, r3
 802bda6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 802bdaa:	3350      	adds	r3, #80	; 0x50
 802bdac:	e9d3 2300 	ldrd	r2, r3, [r3]
 802bdb0:	495b      	ldr	r1, [pc, #364]	; (802bf20 <AT_CCID+0x470>)
 802bdb2:	fb01 f003 	mul.w	r0, r1, r3
 802bdb6:	2100      	movs	r1, #0
 802bdb8:	fb01 f102 	mul.w	r1, r1, r2
 802bdbc:	4408      	add	r0, r1
 802bdbe:	4958      	ldr	r1, [pc, #352]	; (802bf20 <AT_CCID+0x470>)
 802bdc0:	fba2 2301 	umull	r2, r3, r2, r1
 802bdc4:	18c1      	adds	r1, r0, r3
 802bdc6:	460b      	mov	r3, r1
 802bdc8:	18a1      	adds	r1, r4, r2
 802bdca:	6639      	str	r1, [r7, #96]	; 0x60
 802bdcc:	eb45 0303 	adc.w	r3, r5, r3
 802bdd0:	667b      	str	r3, [r7, #100]	; 0x64
 802bdd2:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 802bdd6:	4623      	mov	r3, r4
 802bdd8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 802bddc:	4602      	mov	r2, r0
 802bdde:	189b      	adds	r3, r3, r2
 802bde0:	65bb      	str	r3, [r7, #88]	; 0x58
 802bde2:	460b      	mov	r3, r1
 802bde4:	462a      	mov	r2, r5
 802bde6:	eb42 0303 	adc.w	r3, r2, r3
 802bdea:	65fb      	str	r3, [r7, #92]	; 0x5c
 802bdec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 802bdf0:	3368      	adds	r3, #104	; 0x68
 802bdf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 802bdf6:	494b      	ldr	r1, [pc, #300]	; (802bf24 <AT_CCID+0x474>)
 802bdf8:	fb01 f003 	mul.w	r0, r1, r3
 802bdfc:	2100      	movs	r1, #0
 802bdfe:	fb01 f102 	mul.w	r1, r1, r2
 802be02:	4408      	add	r0, r1
 802be04:	4947      	ldr	r1, [pc, #284]	; (802bf24 <AT_CCID+0x474>)
 802be06:	fba2 8901 	umull	r8, r9, r2, r1
 802be0a:	eb00 0309 	add.w	r3, r0, r9
 802be0e:	4699      	mov	r9, r3
 802be10:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 802be14:	3360      	adds	r3, #96	; 0x60
 802be16:	e9d3 4500 	ldrd	r4, r5, [r3]
 802be1a:	4622      	mov	r2, r4
 802be1c:	462b      	mov	r3, r5
 802be1e:	f04f 0000 	mov.w	r0, #0
 802be22:	f04f 0100 	mov.w	r1, #0
 802be26:	0159      	lsls	r1, r3, #5
 802be28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 802be2c:	0150      	lsls	r0, r2, #5
 802be2e:	4602      	mov	r2, r0
 802be30:	460b      	mov	r3, r1
 802be32:	1b12      	subs	r2, r2, r4
 802be34:	eb63 0305 	sbc.w	r3, r3, r5
 802be38:	f04f 0000 	mov.w	r0, #0
 802be3c:	f04f 0100 	mov.w	r1, #0
 802be40:	0259      	lsls	r1, r3, #9
 802be42:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 802be46:	0250      	lsls	r0, r2, #9
 802be48:	4602      	mov	r2, r0
 802be4a:	460b      	mov	r3, r1
 802be4c:	1912      	adds	r2, r2, r4
 802be4e:	eb45 0303 	adc.w	r3, r5, r3
 802be52:	f04f 0000 	mov.w	r0, #0
 802be56:	f04f 0100 	mov.w	r1, #0
 802be5a:	0199      	lsls	r1, r3, #6
 802be5c:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 802be60:	0190      	lsls	r0, r2, #6
 802be62:	1a80      	subs	r0, r0, r2
 802be64:	eb61 0103 	sbc.w	r1, r1, r3
 802be68:	1903      	adds	r3, r0, r4
 802be6a:	653b      	str	r3, [r7, #80]	; 0x50
 802be6c:	eb41 0305 	adc.w	r3, r1, r5
 802be70:	657b      	str	r3, [r7, #84]	; 0x54
 802be72:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 802be76:	460b      	mov	r3, r1
 802be78:	eb18 0303 	adds.w	r3, r8, r3
 802be7c:	64bb      	str	r3, [r7, #72]	; 0x48
 802be7e:	4613      	mov	r3, r2
 802be80:	eb49 0303 	adc.w	r3, r9, r3
 802be84:	64fb      	str	r3, [r7, #76]	; 0x4c
 802be86:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 802be8a:	4623      	mov	r3, r4
 802be8c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 802be90:	4602      	mov	r2, r0
 802be92:	189b      	adds	r3, r3, r2
 802be94:	643b      	str	r3, [r7, #64]	; 0x40
 802be96:	460b      	mov	r3, r1
 802be98:	462a      	mov	r2, r5
 802be9a:	eb42 0303 	adc.w	r3, r2, r3
 802be9e:	647b      	str	r3, [r7, #68]	; 0x44
 802bea0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 802bea4:	3378      	adds	r3, #120	; 0x78
 802bea6:	e9d3 4500 	ldrd	r4, r5, [r3]
 802beaa:	4622      	mov	r2, r4
 802beac:	462b      	mov	r3, r5
 802beae:	f04f 0000 	mov.w	r0, #0
 802beb2:	f04f 0100 	mov.w	r1, #0
 802beb6:	0159      	lsls	r1, r3, #5
 802beb8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 802bebc:	0150      	lsls	r0, r2, #5
 802bebe:	4602      	mov	r2, r0
 802bec0:	460b      	mov	r3, r1
 802bec2:	1b12      	subs	r2, r2, r4
 802bec4:	eb63 0305 	sbc.w	r3, r3, r5
 802bec8:	f04f 0000 	mov.w	r0, #0
 802becc:	f04f 0100 	mov.w	r1, #0
 802bed0:	0099      	lsls	r1, r3, #2
 802bed2:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 802bed6:	0090      	lsls	r0, r2, #2
 802bed8:	4602      	mov	r2, r0
 802beda:	460b      	mov	r3, r1
 802bedc:	1912      	adds	r2, r2, r4
 802bede:	e023      	b.n	802bf28 <AT_CCID+0x478>
 802bee0:	20009cc4 	.word	0x20009cc4
 802bee4:	a7640000 	.word	0xa7640000
 802bee8:	0de0b6b3 	.word	0x0de0b6b3
 802beec:	5d8a0000 	.word	0x5d8a0000
 802bef0:	01634578 	.word	0x01634578
 802bef4:	a4c68000 	.word	0xa4c68000
 802bef8:	00038d7e 	.word	0x00038d7e
 802befc:	6fc10000 	.word	0x6fc10000
 802bf00:	002386f2 	.word	0x002386f2
 802bf04:	4e72a000 	.word	0x4e72a000
 802bf08:	107a4000 	.word	0x107a4000
 802bf0c:	4876e800 	.word	0x4876e800
 802bf10:	d4a51000 	.word	0xd4a51000
 802bf14:	3b9aca00 	.word	0x3b9aca00
 802bf18:	540be400 	.word	0x540be400
 802bf1c:	00989680 	.word	0x00989680
 802bf20:	05f5e100 	.word	0x05f5e100
 802bf24:	000186a0 	.word	0x000186a0
 802bf28:	eb45 0303 	adc.w	r3, r5, r3
 802bf2c:	f04f 0000 	mov.w	r0, #0
 802bf30:	f04f 0100 	mov.w	r1, #0
 802bf34:	00d9      	lsls	r1, r3, #3
 802bf36:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 802bf3a:	00d0      	lsls	r0, r2, #3
 802bf3c:	4602      	mov	r2, r0
 802bf3e:	460b      	mov	r3, r1
 802bf40:	4690      	mov	r8, r2
 802bf42:	4699      	mov	r9, r3
 802bf44:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 802bf48:	3370      	adds	r3, #112	; 0x70
 802bf4a:	e9d3 4500 	ldrd	r4, r5, [r3]
 802bf4e:	4622      	mov	r2, r4
 802bf50:	462b      	mov	r3, r5
 802bf52:	f04f 0000 	mov.w	r0, #0
 802bf56:	f04f 0100 	mov.w	r1, #0
 802bf5a:	0099      	lsls	r1, r3, #2
 802bf5c:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 802bf60:	0090      	lsls	r0, r2, #2
 802bf62:	4602      	mov	r2, r0
 802bf64:	460b      	mov	r3, r1
 802bf66:	1912      	adds	r2, r2, r4
 802bf68:	eb45 0303 	adc.w	r3, r5, r3
 802bf6c:	f04f 0000 	mov.w	r0, #0
 802bf70:	f04f 0100 	mov.w	r1, #0
 802bf74:	00d9      	lsls	r1, r3, #3
 802bf76:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 802bf7a:	00d0      	lsls	r0, r2, #3
 802bf7c:	4602      	mov	r2, r0
 802bf7e:	460b      	mov	r3, r1
 802bf80:	1b12      	subs	r2, r2, r4
 802bf82:	eb63 0305 	sbc.w	r3, r3, r5
 802bf86:	f04f 0000 	mov.w	r0, #0
 802bf8a:	f04f 0100 	mov.w	r1, #0
 802bf8e:	0119      	lsls	r1, r3, #4
 802bf90:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 802bf94:	0110      	lsls	r0, r2, #4
 802bf96:	4602      	mov	r2, r0
 802bf98:	460b      	mov	r3, r1
 802bf9a:	1912      	adds	r2, r2, r4
 802bf9c:	eb45 0303 	adc.w	r3, r5, r3
 802bfa0:	f04f 0000 	mov.w	r0, #0
 802bfa4:	f04f 0100 	mov.w	r1, #0
 802bfa8:	0119      	lsls	r1, r3, #4
 802bfaa:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 802bfae:	0110      	lsls	r0, r2, #4
 802bfb0:	4602      	mov	r2, r0
 802bfb2:	460b      	mov	r3, r1
 802bfb4:	eb18 0102 	adds.w	r1, r8, r2
 802bfb8:	63b9      	str	r1, [r7, #56]	; 0x38
 802bfba:	eb49 0303 	adc.w	r3, r9, r3
 802bfbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 802bfc0:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 802bfc4:	4623      	mov	r3, r4
 802bfc6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 802bfca:	4602      	mov	r2, r0
 802bfcc:	189b      	adds	r3, r3, r2
 802bfce:	633b      	str	r3, [r7, #48]	; 0x30
 802bfd0:	460b      	mov	r3, r1
 802bfd2:	462a      	mov	r2, r5
 802bfd4:	eb42 0303 	adc.w	r3, r2, r3
 802bfd8:	637b      	str	r3, [r7, #52]	; 0x34
 802bfda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 802bfde:	3388      	adds	r3, #136	; 0x88
 802bfe0:	e9d3 4500 	ldrd	r4, r5, [r3]
 802bfe4:	4622      	mov	r2, r4
 802bfe6:	462b      	mov	r3, r5
 802bfe8:	f04f 0000 	mov.w	r0, #0
 802bfec:	f04f 0100 	mov.w	r1, #0
 802bff0:	0099      	lsls	r1, r3, #2
 802bff2:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 802bff6:	0090      	lsls	r0, r2, #2
 802bff8:	4602      	mov	r2, r0
 802bffa:	460b      	mov	r3, r1
 802bffc:	1912      	adds	r2, r2, r4
 802bffe:	eb45 0303 	adc.w	r3, r5, r3
 802c002:	1891      	adds	r1, r2, r2
 802c004:	60b9      	str	r1, [r7, #8]
 802c006:	415b      	adcs	r3, r3
 802c008:	60fb      	str	r3, [r7, #12]
 802c00a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 802c00e:	4690      	mov	r8, r2
 802c010:	4699      	mov	r9, r3
 802c012:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 802c016:	3380      	adds	r3, #128	; 0x80
 802c018:	e9d3 4500 	ldrd	r4, r5, [r3]
 802c01c:	4622      	mov	r2, r4
 802c01e:	462b      	mov	r3, r5
 802c020:	1891      	adds	r1, r2, r2
 802c022:	6039      	str	r1, [r7, #0]
 802c024:	415b      	adcs	r3, r3
 802c026:	607b      	str	r3, [r7, #4]
 802c028:	e9d7 2300 	ldrd	r2, r3, [r7]
 802c02c:	1912      	adds	r2, r2, r4
 802c02e:	eb45 0303 	adc.w	r3, r5, r3
 802c032:	f04f 0000 	mov.w	r0, #0
 802c036:	f04f 0100 	mov.w	r1, #0
 802c03a:	0159      	lsls	r1, r3, #5
 802c03c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 802c040:	0150      	lsls	r0, r2, #5
 802c042:	1812      	adds	r2, r2, r0
 802c044:	eb41 0303 	adc.w	r3, r1, r3
 802c048:	1911      	adds	r1, r2, r4
 802c04a:	62b9      	str	r1, [r7, #40]	; 0x28
 802c04c:	416b      	adcs	r3, r5
 802c04e:	62fb      	str	r3, [r7, #44]	; 0x2c
 802c050:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 802c054:	460b      	mov	r3, r1
 802c056:	eb18 0303 	adds.w	r3, r8, r3
 802c05a:	623b      	str	r3, [r7, #32]
 802c05c:	4613      	mov	r3, r2
 802c05e:	eb49 0303 	adc.w	r3, r9, r3
 802c062:	627b      	str	r3, [r7, #36]	; 0x24
 802c064:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 802c068:	4623      	mov	r3, r4
 802c06a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 802c06e:	4602      	mov	r2, r0
 802c070:	189b      	adds	r3, r3, r2
 802c072:	61bb      	str	r3, [r7, #24]
 802c074:	460b      	mov	r3, r1
 802c076:	462a      	mov	r2, r5
 802c078:	eb42 0303 	adc.w	r3, r2, r3
 802c07c:	61fb      	str	r3, [r7, #28]
 802c07e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 802c082:	3390      	adds	r3, #144	; 0x90
 802c084:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c088:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 802c08c:	3198      	adds	r1, #152	; 0x98
 802c08e:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 802c092:	4620      	mov	r0, r4
 802c094:	1880      	adds	r0, r0, r2
 802c096:	6138      	str	r0, [r7, #16]
 802c098:	4628      	mov	r0, r5
 802c09a:	eb43 0000 	adc.w	r0, r3, r0
 802c09e:	6178      	str	r0, [r7, #20]
 802c0a0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 802c0a4:	e9c1 3400 	strd	r3, r4, [r1]
			//temp_id[19] = temp_id[0]*1000000000000000000 + temp_id[1]*100000000000000000 + temp_id[2]*10000000000000000 + temp_id[3]*1000000000000000 + temp_id[4]*100000000000000 + temp_id[5]*10000000000000 + temp_id[6]*1000000000000 + temp_id[7]*100000000000 + temp_id[8]*10000000000 + temp_id[9]*1000000000 + temp_id[10]*100000000 + temp_id[11]*10000000 + temp_id[12]*1000000 + temp_id[13]*100000 + temp_id[14]*10000 + temp_id[15]*1000 + temp_id[16]*100 + temp_id[17]*10 + temp_id[18];

			*id = (uint8_t)(*(temp_id+19)>>56);
 802c0a8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 802c0ac:	3398      	adds	r3, #152	; 0x98
 802c0ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 802c0b2:	f04f 0200 	mov.w	r2, #0
 802c0b6:	f04f 0300 	mov.w	r3, #0
 802c0ba:	0e0a      	lsrs	r2, r1, #24
 802c0bc:	2300      	movs	r3, #0
 802c0be:	b2d2      	uxtb	r2, r2
 802c0c0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 802c0c4:	701a      	strb	r2, [r3, #0]
			*(id+1) = (uint8_t)(*(temp_id+19)>>48);
 802c0c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 802c0ca:	3398      	adds	r3, #152	; 0x98
 802c0cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 802c0d0:	f04f 0200 	mov.w	r2, #0
 802c0d4:	f04f 0300 	mov.w	r3, #0
 802c0d8:	0c0a      	lsrs	r2, r1, #16
 802c0da:	2300      	movs	r3, #0
 802c0dc:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 802c0e0:	3101      	adds	r1, #1
 802c0e2:	b2d3      	uxtb	r3, r2
 802c0e4:	700b      	strb	r3, [r1, #0]
			*(id+2) = (uint8_t)(*(temp_id+19)>>40);
 802c0e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 802c0ea:	3398      	adds	r3, #152	; 0x98
 802c0ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 802c0f0:	f04f 0200 	mov.w	r2, #0
 802c0f4:	f04f 0300 	mov.w	r3, #0
 802c0f8:	0a0a      	lsrs	r2, r1, #8
 802c0fa:	2300      	movs	r3, #0
 802c0fc:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 802c100:	3102      	adds	r1, #2
 802c102:	b2d3      	uxtb	r3, r2
 802c104:	700b      	strb	r3, [r1, #0]
			*(id+3) = (uint8_t)(*(temp_id+19)>>32);
 802c106:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 802c10a:	3398      	adds	r3, #152	; 0x98
 802c10c:	e9d3 0100 	ldrd	r0, r1, [r3]
 802c110:	f04f 0200 	mov.w	r2, #0
 802c114:	f04f 0300 	mov.w	r3, #0
 802c118:	000a      	movs	r2, r1
 802c11a:	2300      	movs	r3, #0
 802c11c:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 802c120:	3103      	adds	r1, #3
 802c122:	b2d3      	uxtb	r3, r2
 802c124:	700b      	strb	r3, [r1, #0]
			*(id+4) = (uint8_t)(*(temp_id+19)>>24);
 802c126:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 802c12a:	3398      	adds	r3, #152	; 0x98
 802c12c:	e9d3 0100 	ldrd	r0, r1, [r3]
 802c130:	f04f 0200 	mov.w	r2, #0
 802c134:	f04f 0300 	mov.w	r3, #0
 802c138:	0e02      	lsrs	r2, r0, #24
 802c13a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 802c13e:	0e0b      	lsrs	r3, r1, #24
 802c140:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 802c144:	3104      	adds	r1, #4
 802c146:	b2d3      	uxtb	r3, r2
 802c148:	700b      	strb	r3, [r1, #0]
			*(id+5) = (uint8_t)(*(temp_id+19)>>16);
 802c14a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 802c14e:	3398      	adds	r3, #152	; 0x98
 802c150:	e9d3 0100 	ldrd	r0, r1, [r3]
 802c154:	f04f 0200 	mov.w	r2, #0
 802c158:	f04f 0300 	mov.w	r3, #0
 802c15c:	0c02      	lsrs	r2, r0, #16
 802c15e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 802c162:	0c0b      	lsrs	r3, r1, #16
 802c164:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 802c168:	3105      	adds	r1, #5
 802c16a:	b2d3      	uxtb	r3, r2
 802c16c:	700b      	strb	r3, [r1, #0]
			*(id+6) = (uint8_t)(*(temp_id+19)>>8);
 802c16e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 802c172:	3398      	adds	r3, #152	; 0x98
 802c174:	e9d3 0100 	ldrd	r0, r1, [r3]
 802c178:	f04f 0200 	mov.w	r2, #0
 802c17c:	f04f 0300 	mov.w	r3, #0
 802c180:	0a02      	lsrs	r2, r0, #8
 802c182:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 802c186:	0a0b      	lsrs	r3, r1, #8
 802c188:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 802c18c:	3106      	adds	r1, #6
 802c18e:	b2d3      	uxtb	r3, r2
 802c190:	700b      	strb	r3, [r1, #0]
			*(id+7) = (uint8_t)*(temp_id+19);
 802c192:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 802c196:	3398      	adds	r3, #152	; 0x98
 802c198:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c19c:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 802c1a0:	3107      	adds	r1, #7
 802c1a2:	b2d3      	uxtb	r3, r2
 802c1a4:	700b      	strb	r3, [r1, #0]

			return AT_OK;
 802c1a6:	2300      	movs	r3, #0
 802c1a8:	e005      	b.n	802c1b6 <AT_CCID+0x706>
	while(read_rx_state == ACTIVE)
 802c1aa:	4b05      	ldr	r3, [pc, #20]	; (802c1c0 <AT_CCID+0x710>)
 802c1ac:	781b      	ldrb	r3, [r3, #0]
 802c1ae:	2b01      	cmp	r3, #1
 802c1b0:	f43f acaf 	beq.w	802bb12 <AT_CCID+0x62>
		}

	}
	return AT_ERROR;
 802c1b4:	2301      	movs	r3, #1
}
 802c1b6:	4618      	mov	r0, r3
 802c1b8:	37b8      	adds	r7, #184	; 0xb8
 802c1ba:	46bd      	mov	sp, r7
 802c1bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 802c1c0:	20009b10 	.word	0x20009b10

0802c1c4 <read_status_registers>:
bootloader_register_struct bootloader_registers;
ibutton_register_struct ibutton_registers;

//----функция чтения из памяти регистров статуса--------------------------
void read_status_registers(void)
{
 802c1c4:	b580      	push	{r7, lr}
 802c1c6:	b082      	sub	sp, #8
 802c1c8:	af00      	add	r7, sp, #0
	uint8_t status_reg_temp_h;
	uint8_t status_reg_temp_l;

	osMutexWait(Fm25v02MutexHandle, osWaitForever);
 802c1ca:	4bbc      	ldr	r3, [pc, #752]	; (802c4bc <read_status_registers+0x2f8>)
 802c1cc:	681b      	ldr	r3, [r3, #0]
 802c1ce:	f04f 31ff 	mov.w	r1, #4294967295
 802c1d2:	4618      	mov	r0, r3
 802c1d4:	f7ed f868 	bl	80192a8 <osMutexWait>

	fm25v02_read(2*VERSION_REG, &status_reg_temp_h);
 802c1d8:	1dfb      	adds	r3, r7, #7
 802c1da:	4619      	mov	r1, r3
 802c1dc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 802c1e0:	f7fe fc1a 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*VERSION_REG+1, &status_reg_temp_l);
 802c1e4:	1dbb      	adds	r3, r7, #6
 802c1e6:	4619      	mov	r1, r3
 802c1e8:	f242 0001 	movw	r0, #8193	; 0x2001
 802c1ec:	f7fe fc14 	bl	802aa18 <fm25v02_read>
	status_registers.version_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802c1f0:	79fb      	ldrb	r3, [r7, #7]
 802c1f2:	021b      	lsls	r3, r3, #8
 802c1f4:	b21a      	sxth	r2, r3
 802c1f6:	79bb      	ldrb	r3, [r7, #6]
 802c1f8:	b21b      	sxth	r3, r3
 802c1fa:	4313      	orrs	r3, r2
 802c1fc:	b21b      	sxth	r3, r3
 802c1fe:	b29a      	uxth	r2, r3
 802c200:	4baf      	ldr	r3, [pc, #700]	; (802c4c0 <read_status_registers+0x2fc>)
 802c202:	801a      	strh	r2, [r3, #0]

	fm25v02_read(2*SECURITY_STATUS_REG, &status_reg_temp_h);
 802c204:	1dfb      	adds	r3, r7, #7
 802c206:	4619      	mov	r1, r3
 802c208:	f242 0002 	movw	r0, #8194	; 0x2002
 802c20c:	f7fe fc04 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*SECURITY_STATUS_REG+1, &status_reg_temp_l);
 802c210:	1dbb      	adds	r3, r7, #6
 802c212:	4619      	mov	r1, r3
 802c214:	f242 0003 	movw	r0, #8195	; 0x2003
 802c218:	f7fe fbfe 	bl	802aa18 <fm25v02_read>
	status_registers.security_status_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802c21c:	79fb      	ldrb	r3, [r7, #7]
 802c21e:	021b      	lsls	r3, r3, #8
 802c220:	b21a      	sxth	r2, r3
 802c222:	79bb      	ldrb	r3, [r7, #6]
 802c224:	b21b      	sxth	r3, r3
 802c226:	4313      	orrs	r3, r2
 802c228:	b21b      	sxth	r3, r3
 802c22a:	b29a      	uxth	r2, r3
 802c22c:	4ba4      	ldr	r3, [pc, #656]	; (802c4c0 <read_status_registers+0x2fc>)
 802c22e:	805a      	strh	r2, [r3, #2]

	fm25v02_read(2*STATUS_LOOP_REG, &status_reg_temp_h);
 802c230:	1dfb      	adds	r3, r7, #7
 802c232:	4619      	mov	r1, r3
 802c234:	f242 0004 	movw	r0, #8196	; 0x2004
 802c238:	f7fe fbee 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*STATUS_LOOP_REG+1, &status_reg_temp_l);
 802c23c:	1dbb      	adds	r3, r7, #6
 802c23e:	4619      	mov	r1, r3
 802c240:	f242 0005 	movw	r0, #8197	; 0x2005
 802c244:	f7fe fbe8 	bl	802aa18 <fm25v02_read>
	status_registers.status_loop_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802c248:	79fb      	ldrb	r3, [r7, #7]
 802c24a:	021b      	lsls	r3, r3, #8
 802c24c:	b21a      	sxth	r2, r3
 802c24e:	79bb      	ldrb	r3, [r7, #6]
 802c250:	b21b      	sxth	r3, r3
 802c252:	4313      	orrs	r3, r2
 802c254:	b21b      	sxth	r3, r3
 802c256:	b29a      	uxth	r2, r3
 802c258:	4b99      	ldr	r3, [pc, #612]	; (802c4c0 <read_status_registers+0x2fc>)
 802c25a:	809a      	strh	r2, [r3, #4]

	fm25v02_read(2*ERROR_LOOP_REG, &status_reg_temp_h);
 802c25c:	1dfb      	adds	r3, r7, #7
 802c25e:	4619      	mov	r1, r3
 802c260:	f242 0006 	movw	r0, #8198	; 0x2006
 802c264:	f7fe fbd8 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*ERROR_LOOP_REG+1, &status_reg_temp_l);
 802c268:	1dbb      	adds	r3, r7, #6
 802c26a:	4619      	mov	r1, r3
 802c26c:	f242 0007 	movw	r0, #8199	; 0x2007
 802c270:	f7fe fbd2 	bl	802aa18 <fm25v02_read>
	status_registers.error_loop_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802c274:	79fb      	ldrb	r3, [r7, #7]
 802c276:	021b      	lsls	r3, r3, #8
 802c278:	b21a      	sxth	r2, r3
 802c27a:	79bb      	ldrb	r3, [r7, #6]
 802c27c:	b21b      	sxth	r3, r3
 802c27e:	4313      	orrs	r3, r2
 802c280:	b21b      	sxth	r3, r3
 802c282:	b29a      	uxth	r2, r3
 802c284:	4b8e      	ldr	r3, [pc, #568]	; (802c4c0 <read_status_registers+0x2fc>)
 802c286:	80da      	strh	r2, [r3, #6]

	fm25v02_read(2*ALARM_LOOP_REG, &status_reg_temp_h);
 802c288:	1dfb      	adds	r3, r7, #7
 802c28a:	4619      	mov	r1, r3
 802c28c:	f242 0008 	movw	r0, #8200	; 0x2008
 802c290:	f7fe fbc2 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*ALARM_LOOP_REG+1, &status_reg_temp_l);
 802c294:	1dbb      	adds	r3, r7, #6
 802c296:	4619      	mov	r1, r3
 802c298:	f242 0009 	movw	r0, #8201	; 0x2009
 802c29c:	f7fe fbbc 	bl	802aa18 <fm25v02_read>
	status_registers.alarm_loop_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802c2a0:	79fb      	ldrb	r3, [r7, #7]
 802c2a2:	021b      	lsls	r3, r3, #8
 802c2a4:	b21a      	sxth	r2, r3
 802c2a6:	79bb      	ldrb	r3, [r7, #6]
 802c2a8:	b21b      	sxth	r3, r3
 802c2aa:	4313      	orrs	r3, r2
 802c2ac:	b21b      	sxth	r3, r3
 802c2ae:	b29a      	uxth	r2, r3
 802c2b0:	4b83      	ldr	r3, [pc, #524]	; (802c4c0 <read_status_registers+0x2fc>)
 802c2b2:	811a      	strh	r2, [r3, #8]

	fm25v02_read(2*TIME_CURRENT_YEAR_REG, &status_reg_temp_h);
 802c2b4:	1dfb      	adds	r3, r7, #7
 802c2b6:	4619      	mov	r1, r3
 802c2b8:	f242 000a 	movw	r0, #8202	; 0x200a
 802c2bc:	f7fe fbac 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*TIME_CURRENT_YEAR_REG+1, &status_reg_temp_l);
 802c2c0:	1dbb      	adds	r3, r7, #6
 802c2c2:	4619      	mov	r1, r3
 802c2c4:	f242 000b 	movw	r0, #8203	; 0x200b
 802c2c8:	f7fe fba6 	bl	802aa18 <fm25v02_read>
	status_registers.time_current_year_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802c2cc:	79fb      	ldrb	r3, [r7, #7]
 802c2ce:	021b      	lsls	r3, r3, #8
 802c2d0:	b21a      	sxth	r2, r3
 802c2d2:	79bb      	ldrb	r3, [r7, #6]
 802c2d4:	b21b      	sxth	r3, r3
 802c2d6:	4313      	orrs	r3, r2
 802c2d8:	b21b      	sxth	r3, r3
 802c2da:	b29a      	uxth	r2, r3
 802c2dc:	4b78      	ldr	r3, [pc, #480]	; (802c4c0 <read_status_registers+0x2fc>)
 802c2de:	815a      	strh	r2, [r3, #10]

	fm25v02_read(2*TIME_CURRENT_MONTH_REG, &status_reg_temp_h);
 802c2e0:	1dfb      	adds	r3, r7, #7
 802c2e2:	4619      	mov	r1, r3
 802c2e4:	f242 000c 	movw	r0, #8204	; 0x200c
 802c2e8:	f7fe fb96 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*TIME_CURRENT_MONTH_REG+1, &status_reg_temp_l);
 802c2ec:	1dbb      	adds	r3, r7, #6
 802c2ee:	4619      	mov	r1, r3
 802c2f0:	f242 000d 	movw	r0, #8205	; 0x200d
 802c2f4:	f7fe fb90 	bl	802aa18 <fm25v02_read>
	status_registers.time_current_month_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802c2f8:	79fb      	ldrb	r3, [r7, #7]
 802c2fa:	021b      	lsls	r3, r3, #8
 802c2fc:	b21a      	sxth	r2, r3
 802c2fe:	79bb      	ldrb	r3, [r7, #6]
 802c300:	b21b      	sxth	r3, r3
 802c302:	4313      	orrs	r3, r2
 802c304:	b21b      	sxth	r3, r3
 802c306:	b29a      	uxth	r2, r3
 802c308:	4b6d      	ldr	r3, [pc, #436]	; (802c4c0 <read_status_registers+0x2fc>)
 802c30a:	819a      	strh	r2, [r3, #12]

	fm25v02_read(2*TIME_CURRENT_DAY_REG, &status_reg_temp_h);
 802c30c:	1dfb      	adds	r3, r7, #7
 802c30e:	4619      	mov	r1, r3
 802c310:	f242 000e 	movw	r0, #8206	; 0x200e
 802c314:	f7fe fb80 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*TIME_CURRENT_DAY_REG+1, &status_reg_temp_l);
 802c318:	1dbb      	adds	r3, r7, #6
 802c31a:	4619      	mov	r1, r3
 802c31c:	f242 000f 	movw	r0, #8207	; 0x200f
 802c320:	f7fe fb7a 	bl	802aa18 <fm25v02_read>
	status_registers.time_current_day_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802c324:	79fb      	ldrb	r3, [r7, #7]
 802c326:	021b      	lsls	r3, r3, #8
 802c328:	b21a      	sxth	r2, r3
 802c32a:	79bb      	ldrb	r3, [r7, #6]
 802c32c:	b21b      	sxth	r3, r3
 802c32e:	4313      	orrs	r3, r2
 802c330:	b21b      	sxth	r3, r3
 802c332:	b29a      	uxth	r2, r3
 802c334:	4b62      	ldr	r3, [pc, #392]	; (802c4c0 <read_status_registers+0x2fc>)
 802c336:	81da      	strh	r2, [r3, #14]

	fm25v02_read(2*TIME_CURRENT_HOUR_REG, &status_reg_temp_h);
 802c338:	1dfb      	adds	r3, r7, #7
 802c33a:	4619      	mov	r1, r3
 802c33c:	f242 0010 	movw	r0, #8208	; 0x2010
 802c340:	f7fe fb6a 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*TIME_CURRENT_HOUR_REG+1, &status_reg_temp_l);
 802c344:	1dbb      	adds	r3, r7, #6
 802c346:	4619      	mov	r1, r3
 802c348:	f242 0011 	movw	r0, #8209	; 0x2011
 802c34c:	f7fe fb64 	bl	802aa18 <fm25v02_read>
	status_registers.time_current_hour_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802c350:	79fb      	ldrb	r3, [r7, #7]
 802c352:	021b      	lsls	r3, r3, #8
 802c354:	b21a      	sxth	r2, r3
 802c356:	79bb      	ldrb	r3, [r7, #6]
 802c358:	b21b      	sxth	r3, r3
 802c35a:	4313      	orrs	r3, r2
 802c35c:	b21b      	sxth	r3, r3
 802c35e:	b29a      	uxth	r2, r3
 802c360:	4b57      	ldr	r3, [pc, #348]	; (802c4c0 <read_status_registers+0x2fc>)
 802c362:	821a      	strh	r2, [r3, #16]

	fm25v02_read(2*TIME_CURRENT_MINUTE_REG, &status_reg_temp_h);
 802c364:	1dfb      	adds	r3, r7, #7
 802c366:	4619      	mov	r1, r3
 802c368:	f242 0012 	movw	r0, #8210	; 0x2012
 802c36c:	f7fe fb54 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*TIME_CURRENT_MINUTE_REG+1, &status_reg_temp_l);
 802c370:	1dbb      	adds	r3, r7, #6
 802c372:	4619      	mov	r1, r3
 802c374:	f242 0013 	movw	r0, #8211	; 0x2013
 802c378:	f7fe fb4e 	bl	802aa18 <fm25v02_read>
	status_registers.time_current_minute_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802c37c:	79fb      	ldrb	r3, [r7, #7]
 802c37e:	021b      	lsls	r3, r3, #8
 802c380:	b21a      	sxth	r2, r3
 802c382:	79bb      	ldrb	r3, [r7, #6]
 802c384:	b21b      	sxth	r3, r3
 802c386:	4313      	orrs	r3, r2
 802c388:	b21b      	sxth	r3, r3
 802c38a:	b29a      	uxth	r2, r3
 802c38c:	4b4c      	ldr	r3, [pc, #304]	; (802c4c0 <read_status_registers+0x2fc>)
 802c38e:	825a      	strh	r2, [r3, #18]

	fm25v02_read(2*TIME_CURRENT_SECOND_REG, &status_reg_temp_h);
 802c390:	1dfb      	adds	r3, r7, #7
 802c392:	4619      	mov	r1, r3
 802c394:	f242 0014 	movw	r0, #8212	; 0x2014
 802c398:	f7fe fb3e 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*TIME_CURRENT_SECOND_REG+1, &status_reg_temp_l);
 802c39c:	1dbb      	adds	r3, r7, #6
 802c39e:	4619      	mov	r1, r3
 802c3a0:	f242 0015 	movw	r0, #8213	; 0x2015
 802c3a4:	f7fe fb38 	bl	802aa18 <fm25v02_read>
	status_registers.time_current_second_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802c3a8:	79fb      	ldrb	r3, [r7, #7]
 802c3aa:	021b      	lsls	r3, r3, #8
 802c3ac:	b21a      	sxth	r2, r3
 802c3ae:	79bb      	ldrb	r3, [r7, #6]
 802c3b0:	b21b      	sxth	r3, r3
 802c3b2:	4313      	orrs	r3, r2
 802c3b4:	b21b      	sxth	r3, r3
 802c3b6:	b29a      	uxth	r2, r3
 802c3b8:	4b41      	ldr	r3, [pc, #260]	; (802c4c0 <read_status_registers+0x2fc>)
 802c3ba:	829a      	strh	r2, [r3, #20]

	fm25v02_read(2*TIME_CURRENT_WEEKDAY_REG, &status_reg_temp_h);
 802c3bc:	1dfb      	adds	r3, r7, #7
 802c3be:	4619      	mov	r1, r3
 802c3c0:	f242 0016 	movw	r0, #8214	; 0x2016
 802c3c4:	f7fe fb28 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*TIME_CURRENT_WEEKDAY_REG+1, &status_reg_temp_l);
 802c3c8:	1dbb      	adds	r3, r7, #6
 802c3ca:	4619      	mov	r1, r3
 802c3cc:	f242 0017 	movw	r0, #8215	; 0x2017
 802c3d0:	f7fe fb22 	bl	802aa18 <fm25v02_read>
	status_registers.time_current_weekday_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802c3d4:	79fb      	ldrb	r3, [r7, #7]
 802c3d6:	021b      	lsls	r3, r3, #8
 802c3d8:	b21a      	sxth	r2, r3
 802c3da:	79bb      	ldrb	r3, [r7, #6]
 802c3dc:	b21b      	sxth	r3, r3
 802c3de:	4313      	orrs	r3, r2
 802c3e0:	b21b      	sxth	r3, r3
 802c3e2:	b29a      	uxth	r2, r3
 802c3e4:	4b36      	ldr	r3, [pc, #216]	; (802c4c0 <read_status_registers+0x2fc>)
 802c3e6:	82da      	strh	r2, [r3, #22]

	fm25v02_read(2*ADDRESS_PROCESSED_EVENT_H_REG, &status_reg_temp_h);
 802c3e8:	1dfb      	adds	r3, r7, #7
 802c3ea:	4619      	mov	r1, r3
 802c3ec:	f242 0018 	movw	r0, #8216	; 0x2018
 802c3f0:	f7fe fb12 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*ADDRESS_PROCESSED_EVENT_H_REG+1, &status_reg_temp_l);
 802c3f4:	1dbb      	adds	r3, r7, #6
 802c3f6:	4619      	mov	r1, r3
 802c3f8:	f242 0019 	movw	r0, #8217	; 0x2019
 802c3fc:	f7fe fb0c 	bl	802aa18 <fm25v02_read>
	status_registers.address_processed_event_h_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802c400:	79fb      	ldrb	r3, [r7, #7]
 802c402:	021b      	lsls	r3, r3, #8
 802c404:	b21a      	sxth	r2, r3
 802c406:	79bb      	ldrb	r3, [r7, #6]
 802c408:	b21b      	sxth	r3, r3
 802c40a:	4313      	orrs	r3, r2
 802c40c:	b21b      	sxth	r3, r3
 802c40e:	b29a      	uxth	r2, r3
 802c410:	4b2b      	ldr	r3, [pc, #172]	; (802c4c0 <read_status_registers+0x2fc>)
 802c412:	831a      	strh	r2, [r3, #24]

	fm25v02_read(2*ADDRESS_PROCESSED_EVENT_L_REG, &status_reg_temp_h);
 802c414:	1dfb      	adds	r3, r7, #7
 802c416:	4619      	mov	r1, r3
 802c418:	f242 001a 	movw	r0, #8218	; 0x201a
 802c41c:	f7fe fafc 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*ADDRESS_PROCESSED_EVENT_L_REG+1, &status_reg_temp_l);
 802c420:	1dbb      	adds	r3, r7, #6
 802c422:	4619      	mov	r1, r3
 802c424:	f242 001b 	movw	r0, #8219	; 0x201b
 802c428:	f7fe faf6 	bl	802aa18 <fm25v02_read>
	status_registers.address_processed_event_l_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802c42c:	79fb      	ldrb	r3, [r7, #7]
 802c42e:	021b      	lsls	r3, r3, #8
 802c430:	b21a      	sxth	r2, r3
 802c432:	79bb      	ldrb	r3, [r7, #6]
 802c434:	b21b      	sxth	r3, r3
 802c436:	4313      	orrs	r3, r2
 802c438:	b21b      	sxth	r3, r3
 802c43a:	b29a      	uxth	r2, r3
 802c43c:	4b20      	ldr	r3, [pc, #128]	; (802c4c0 <read_status_registers+0x2fc>)
 802c43e:	835a      	strh	r2, [r3, #26]

	fm25v02_read(2*ADDRESS_LAST_EVENT_H_REG, &status_reg_temp_h);
 802c440:	1dfb      	adds	r3, r7, #7
 802c442:	4619      	mov	r1, r3
 802c444:	f242 001c 	movw	r0, #8220	; 0x201c
 802c448:	f7fe fae6 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*ADDRESS_LAST_EVENT_H_REG+1, &status_reg_temp_l);
 802c44c:	1dbb      	adds	r3, r7, #6
 802c44e:	4619      	mov	r1, r3
 802c450:	f242 001d 	movw	r0, #8221	; 0x201d
 802c454:	f7fe fae0 	bl	802aa18 <fm25v02_read>
	status_registers.address_last_event_h_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802c458:	79fb      	ldrb	r3, [r7, #7]
 802c45a:	021b      	lsls	r3, r3, #8
 802c45c:	b21a      	sxth	r2, r3
 802c45e:	79bb      	ldrb	r3, [r7, #6]
 802c460:	b21b      	sxth	r3, r3
 802c462:	4313      	orrs	r3, r2
 802c464:	b21b      	sxth	r3, r3
 802c466:	b29a      	uxth	r2, r3
 802c468:	4b15      	ldr	r3, [pc, #84]	; (802c4c0 <read_status_registers+0x2fc>)
 802c46a:	839a      	strh	r2, [r3, #28]

	fm25v02_read(2*ADDRESS_LAST_EVENT_L_REG, &status_reg_temp_h);
 802c46c:	1dfb      	adds	r3, r7, #7
 802c46e:	4619      	mov	r1, r3
 802c470:	f242 001e 	movw	r0, #8222	; 0x201e
 802c474:	f7fe fad0 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*ADDRESS_LAST_EVENT_L_REG+1, &status_reg_temp_l);
 802c478:	1dbb      	adds	r3, r7, #6
 802c47a:	4619      	mov	r1, r3
 802c47c:	f242 001f 	movw	r0, #8223	; 0x201f
 802c480:	f7fe faca 	bl	802aa18 <fm25v02_read>
	status_registers.address_last_event_l_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802c484:	79fb      	ldrb	r3, [r7, #7]
 802c486:	021b      	lsls	r3, r3, #8
 802c488:	b21a      	sxth	r2, r3
 802c48a:	79bb      	ldrb	r3, [r7, #6]
 802c48c:	b21b      	sxth	r3, r3
 802c48e:	4313      	orrs	r3, r2
 802c490:	b21b      	sxth	r3, r3
 802c492:	b29a      	uxth	r2, r3
 802c494:	4b0a      	ldr	r3, [pc, #40]	; (802c4c0 <read_status_registers+0x2fc>)
 802c496:	83da      	strh	r2, [r3, #30]

	fm25v02_read(2*SYSTEM_STATUS_REG, &status_reg_temp_h);
 802c498:	1dfb      	adds	r3, r7, #7
 802c49a:	4619      	mov	r1, r3
 802c49c:	f242 0020 	movw	r0, #8224	; 0x2020
 802c4a0:	f7fe faba 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*SYSTEM_STATUS_REG+1, &status_reg_temp_l);
 802c4a4:	1dbb      	adds	r3, r7, #6
 802c4a6:	4619      	mov	r1, r3
 802c4a8:	f242 0021 	movw	r0, #8225	; 0x2021
 802c4ac:	f7fe fab4 	bl	802aa18 <fm25v02_read>
	status_registers.system_status_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802c4b0:	79fb      	ldrb	r3, [r7, #7]
 802c4b2:	021b      	lsls	r3, r3, #8
 802c4b4:	b21a      	sxth	r2, r3
 802c4b6:	79bb      	ldrb	r3, [r7, #6]
 802c4b8:	e004      	b.n	802c4c4 <read_status_registers+0x300>
 802c4ba:	bf00      	nop
 802c4bc:	20009bb8 	.word	0x20009bb8
 802c4c0:	2000af40 	.word	0x2000af40
 802c4c4:	b21b      	sxth	r3, r3
 802c4c6:	4313      	orrs	r3, r2
 802c4c8:	b21b      	sxth	r3, r3
 802c4ca:	b29a      	uxth	r2, r3
 802c4cc:	4bbc      	ldr	r3, [pc, #752]	; (802c7c0 <read_status_registers+0x5fc>)
 802c4ce:	841a      	strh	r2, [r3, #32]

	fm25v02_read(2*POWER_ON_REG, &status_reg_temp_h);
 802c4d0:	1dfb      	adds	r3, r7, #7
 802c4d2:	4619      	mov	r1, r3
 802c4d4:	f242 0022 	movw	r0, #8226	; 0x2022
 802c4d8:	f7fe fa9e 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*POWER_ON_REG+1, &status_reg_temp_l);
 802c4dc:	1dbb      	adds	r3, r7, #6
 802c4de:	4619      	mov	r1, r3
 802c4e0:	f242 0023 	movw	r0, #8227	; 0x2023
 802c4e4:	f7fe fa98 	bl	802aa18 <fm25v02_read>
	status_registers.power_on_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802c4e8:	79fb      	ldrb	r3, [r7, #7]
 802c4ea:	021b      	lsls	r3, r3, #8
 802c4ec:	b21a      	sxth	r2, r3
 802c4ee:	79bb      	ldrb	r3, [r7, #6]
 802c4f0:	b21b      	sxth	r3, r3
 802c4f2:	4313      	orrs	r3, r2
 802c4f4:	b21b      	sxth	r3, r3
 802c4f6:	b29a      	uxth	r2, r3
 802c4f8:	4bb1      	ldr	r3, [pc, #708]	; (802c7c0 <read_status_registers+0x5fc>)
 802c4fa:	845a      	strh	r2, [r3, #34]	; 0x22

	fm25v02_read(2*ERROR_RTC_REG, &status_reg_temp_h);
 802c4fc:	1dfb      	adds	r3, r7, #7
 802c4fe:	4619      	mov	r1, r3
 802c500:	f242 0024 	movw	r0, #8228	; 0x2024
 802c504:	f7fe fa88 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*ERROR_RTC_REG+1, &status_reg_temp_l);
 802c508:	1dbb      	adds	r3, r7, #6
 802c50a:	4619      	mov	r1, r3
 802c50c:	f242 0025 	movw	r0, #8229	; 0x2025
 802c510:	f7fe fa82 	bl	802aa18 <fm25v02_read>
	status_registers.error_rtc_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802c514:	79fb      	ldrb	r3, [r7, #7]
 802c516:	021b      	lsls	r3, r3, #8
 802c518:	b21a      	sxth	r2, r3
 802c51a:	79bb      	ldrb	r3, [r7, #6]
 802c51c:	b21b      	sxth	r3, r3
 802c51e:	4313      	orrs	r3, r2
 802c520:	b21b      	sxth	r3, r3
 802c522:	b29a      	uxth	r2, r3
 802c524:	4ba6      	ldr	r3, [pc, #664]	; (802c7c0 <read_status_registers+0x5fc>)
 802c526:	849a      	strh	r2, [r3, #36]	; 0x24

	fm25v02_read(2*POWER_ON_LIGHTING_REG, &status_reg_temp_h);
 802c528:	1dfb      	adds	r3, r7, #7
 802c52a:	4619      	mov	r1, r3
 802c52c:	f242 0026 	movw	r0, #8230	; 0x2026
 802c530:	f7fe fa72 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*POWER_ON_LIGHTING_REG+1, &status_reg_temp_l);
 802c534:	1dbb      	adds	r3, r7, #6
 802c536:	4619      	mov	r1, r3
 802c538:	f242 0027 	movw	r0, #8231	; 0x2027
 802c53c:	f7fe fa6c 	bl	802aa18 <fm25v02_read>
	status_registers.power_on_lighting_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802c540:	79fb      	ldrb	r3, [r7, #7]
 802c542:	021b      	lsls	r3, r3, #8
 802c544:	b21a      	sxth	r2, r3
 802c546:	79bb      	ldrb	r3, [r7, #6]
 802c548:	b21b      	sxth	r3, r3
 802c54a:	4313      	orrs	r3, r2
 802c54c:	b21b      	sxth	r3, r3
 802c54e:	b29a      	uxth	r2, r3
 802c550:	4b9b      	ldr	r3, [pc, #620]	; (802c7c0 <read_status_registers+0x5fc>)
 802c552:	84da      	strh	r2, [r3, #38]	; 0x26

	fm25v02_read(2*IBUTTON_COMPLETE_0_REG, &status_reg_temp_h);
 802c554:	1dfb      	adds	r3, r7, #7
 802c556:	4619      	mov	r1, r3
 802c558:	f242 002a 	movw	r0, #8234	; 0x202a
 802c55c:	f7fe fa5c 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*IBUTTON_COMPLETE_0_REG+1, &status_reg_temp_l);
 802c560:	1dbb      	adds	r3, r7, #6
 802c562:	4619      	mov	r1, r3
 802c564:	f242 002b 	movw	r0, #8235	; 0x202b
 802c568:	f7fe fa56 	bl	802aa18 <fm25v02_read>
	status_registers.ibutton_complite_0_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802c56c:	79fb      	ldrb	r3, [r7, #7]
 802c56e:	021b      	lsls	r3, r3, #8
 802c570:	b21a      	sxth	r2, r3
 802c572:	79bb      	ldrb	r3, [r7, #6]
 802c574:	b21b      	sxth	r3, r3
 802c576:	4313      	orrs	r3, r2
 802c578:	b21b      	sxth	r3, r3
 802c57a:	b29a      	uxth	r2, r3
 802c57c:	4b90      	ldr	r3, [pc, #576]	; (802c7c0 <read_status_registers+0x5fc>)
 802c57e:	855a      	strh	r2, [r3, #42]	; 0x2a

	fm25v02_read(2*IBUTTON_COMPLETE_1_REG, &status_reg_temp_h);
 802c580:	1dfb      	adds	r3, r7, #7
 802c582:	4619      	mov	r1, r3
 802c584:	f242 002c 	movw	r0, #8236	; 0x202c
 802c588:	f7fe fa46 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*IBUTTON_COMPLETE_1_REG+1, &status_reg_temp_l);
 802c58c:	1dbb      	adds	r3, r7, #6
 802c58e:	4619      	mov	r1, r3
 802c590:	f242 002d 	movw	r0, #8237	; 0x202d
 802c594:	f7fe fa40 	bl	802aa18 <fm25v02_read>
	status_registers.ibutton_complite_1_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802c598:	79fb      	ldrb	r3, [r7, #7]
 802c59a:	021b      	lsls	r3, r3, #8
 802c59c:	b21a      	sxth	r2, r3
 802c59e:	79bb      	ldrb	r3, [r7, #6]
 802c5a0:	b21b      	sxth	r3, r3
 802c5a2:	4313      	orrs	r3, r2
 802c5a4:	b21b      	sxth	r3, r3
 802c5a6:	b29a      	uxth	r2, r3
 802c5a8:	4b85      	ldr	r3, [pc, #532]	; (802c7c0 <read_status_registers+0x5fc>)
 802c5aa:	859a      	strh	r2, [r3, #44]	; 0x2c

	fm25v02_read(2*IBUTTON_COMPLETE_2_REG, &status_reg_temp_h);
 802c5ac:	1dfb      	adds	r3, r7, #7
 802c5ae:	4619      	mov	r1, r3
 802c5b0:	f242 002e 	movw	r0, #8238	; 0x202e
 802c5b4:	f7fe fa30 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*IBUTTON_COMPLETE_2_REG+1, &status_reg_temp_l);
 802c5b8:	1dbb      	adds	r3, r7, #6
 802c5ba:	4619      	mov	r1, r3
 802c5bc:	f242 002f 	movw	r0, #8239	; 0x202f
 802c5c0:	f7fe fa2a 	bl	802aa18 <fm25v02_read>
	status_registers.ibutton_complite_2_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802c5c4:	79fb      	ldrb	r3, [r7, #7]
 802c5c6:	021b      	lsls	r3, r3, #8
 802c5c8:	b21a      	sxth	r2, r3
 802c5ca:	79bb      	ldrb	r3, [r7, #6]
 802c5cc:	b21b      	sxth	r3, r3
 802c5ce:	4313      	orrs	r3, r2
 802c5d0:	b21b      	sxth	r3, r3
 802c5d2:	b29a      	uxth	r2, r3
 802c5d4:	4b7a      	ldr	r3, [pc, #488]	; (802c7c0 <read_status_registers+0x5fc>)
 802c5d6:	85da      	strh	r2, [r3, #46]	; 0x2e

	fm25v02_read(2*IBUTTON_COMPLETE_3_REG, &status_reg_temp_h);
 802c5d8:	1dfb      	adds	r3, r7, #7
 802c5da:	4619      	mov	r1, r3
 802c5dc:	f242 0030 	movw	r0, #8240	; 0x2030
 802c5e0:	f7fe fa1a 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*IBUTTON_COMPLETE_3_REG+1, &status_reg_temp_l);
 802c5e4:	1dbb      	adds	r3, r7, #6
 802c5e6:	4619      	mov	r1, r3
 802c5e8:	f242 0031 	movw	r0, #8241	; 0x2031
 802c5ec:	f7fe fa14 	bl	802aa18 <fm25v02_read>
	status_registers.ibutton_complite_3_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802c5f0:	79fb      	ldrb	r3, [r7, #7]
 802c5f2:	021b      	lsls	r3, r3, #8
 802c5f4:	b21a      	sxth	r2, r3
 802c5f6:	79bb      	ldrb	r3, [r7, #6]
 802c5f8:	b21b      	sxth	r3, r3
 802c5fa:	4313      	orrs	r3, r2
 802c5fc:	b21b      	sxth	r3, r3
 802c5fe:	b29a      	uxth	r2, r3
 802c600:	4b6f      	ldr	r3, [pc, #444]	; (802c7c0 <read_status_registers+0x5fc>)
 802c602:	861a      	strh	r2, [r3, #48]	; 0x30

	fm25v02_read(2*IBUTTON_COMPLETE_4_REG, &status_reg_temp_h);
 802c604:	1dfb      	adds	r3, r7, #7
 802c606:	4619      	mov	r1, r3
 802c608:	f242 0032 	movw	r0, #8242	; 0x2032
 802c60c:	f7fe fa04 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*IBUTTON_COMPLETE_4_REG+1, &status_reg_temp_l);
 802c610:	1dbb      	adds	r3, r7, #6
 802c612:	4619      	mov	r1, r3
 802c614:	f242 0033 	movw	r0, #8243	; 0x2033
 802c618:	f7fe f9fe 	bl	802aa18 <fm25v02_read>
	status_registers.ibutton_complite_4_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802c61c:	79fb      	ldrb	r3, [r7, #7]
 802c61e:	021b      	lsls	r3, r3, #8
 802c620:	b21a      	sxth	r2, r3
 802c622:	79bb      	ldrb	r3, [r7, #6]
 802c624:	b21b      	sxth	r3, r3
 802c626:	4313      	orrs	r3, r2
 802c628:	b21b      	sxth	r3, r3
 802c62a:	b29a      	uxth	r2, r3
 802c62c:	4b64      	ldr	r3, [pc, #400]	; (802c7c0 <read_status_registers+0x5fc>)
 802c62e:	865a      	strh	r2, [r3, #50]	; 0x32

	fm25v02_read(2*IBUTTON_COMPLETE_5_REG, &status_reg_temp_h);
 802c630:	1dfb      	adds	r3, r7, #7
 802c632:	4619      	mov	r1, r3
 802c634:	f242 0034 	movw	r0, #8244	; 0x2034
 802c638:	f7fe f9ee 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*IBUTTON_COMPLETE_5_REG+1, &status_reg_temp_l);
 802c63c:	1dbb      	adds	r3, r7, #6
 802c63e:	4619      	mov	r1, r3
 802c640:	f242 0035 	movw	r0, #8245	; 0x2035
 802c644:	f7fe f9e8 	bl	802aa18 <fm25v02_read>
	status_registers.ibutton_complite_5_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802c648:	79fb      	ldrb	r3, [r7, #7]
 802c64a:	021b      	lsls	r3, r3, #8
 802c64c:	b21a      	sxth	r2, r3
 802c64e:	79bb      	ldrb	r3, [r7, #6]
 802c650:	b21b      	sxth	r3, r3
 802c652:	4313      	orrs	r3, r2
 802c654:	b21b      	sxth	r3, r3
 802c656:	b29a      	uxth	r2, r3
 802c658:	4b59      	ldr	r3, [pc, #356]	; (802c7c0 <read_status_registers+0x5fc>)
 802c65a:	869a      	strh	r2, [r3, #52]	; 0x34

	fm25v02_read(2*IBUTTON_COMPLETE_6_REG, &status_reg_temp_h);
 802c65c:	1dfb      	adds	r3, r7, #7
 802c65e:	4619      	mov	r1, r3
 802c660:	f242 0036 	movw	r0, #8246	; 0x2036
 802c664:	f7fe f9d8 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*IBUTTON_COMPLETE_6_REG+1, &status_reg_temp_l);
 802c668:	1dbb      	adds	r3, r7, #6
 802c66a:	4619      	mov	r1, r3
 802c66c:	f242 0037 	movw	r0, #8247	; 0x2037
 802c670:	f7fe f9d2 	bl	802aa18 <fm25v02_read>
	status_registers.ibutton_complite_6_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802c674:	79fb      	ldrb	r3, [r7, #7]
 802c676:	021b      	lsls	r3, r3, #8
 802c678:	b21a      	sxth	r2, r3
 802c67a:	79bb      	ldrb	r3, [r7, #6]
 802c67c:	b21b      	sxth	r3, r3
 802c67e:	4313      	orrs	r3, r2
 802c680:	b21b      	sxth	r3, r3
 802c682:	b29a      	uxth	r2, r3
 802c684:	4b4e      	ldr	r3, [pc, #312]	; (802c7c0 <read_status_registers+0x5fc>)
 802c686:	86da      	strh	r2, [r3, #54]	; 0x36

	fm25v02_read(2*IBUTTON_COMPLETE_7_REG, &status_reg_temp_h);
 802c688:	1dfb      	adds	r3, r7, #7
 802c68a:	4619      	mov	r1, r3
 802c68c:	f242 0038 	movw	r0, #8248	; 0x2038
 802c690:	f7fe f9c2 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*IBUTTON_COMPLETE_7_REG+1, &status_reg_temp_l);
 802c694:	1dbb      	adds	r3, r7, #6
 802c696:	4619      	mov	r1, r3
 802c698:	f242 0039 	movw	r0, #8249	; 0x2039
 802c69c:	f7fe f9bc 	bl	802aa18 <fm25v02_read>
	status_registers.ibutton_complite_7_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802c6a0:	79fb      	ldrb	r3, [r7, #7]
 802c6a2:	021b      	lsls	r3, r3, #8
 802c6a4:	b21a      	sxth	r2, r3
 802c6a6:	79bb      	ldrb	r3, [r7, #6]
 802c6a8:	b21b      	sxth	r3, r3
 802c6aa:	4313      	orrs	r3, r2
 802c6ac:	b21b      	sxth	r3, r3
 802c6ae:	b29a      	uxth	r2, r3
 802c6b0:	4b43      	ldr	r3, [pc, #268]	; (802c7c0 <read_status_registers+0x5fc>)
 802c6b2:	871a      	strh	r2, [r3, #56]	; 0x38

	fm25v02_read(2*CE_303_ERROR_REG, &status_reg_temp_h);
 802c6b4:	1dfb      	adds	r3, r7, #7
 802c6b6:	4619      	mov	r1, r3
 802c6b8:	f242 003c 	movw	r0, #8252	; 0x203c
 802c6bc:	f7fe f9ac 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*CE_303_ERROR_REG+1, &status_reg_temp_l);
 802c6c0:	1dbb      	adds	r3, r7, #6
 802c6c2:	4619      	mov	r1, r3
 802c6c4:	f242 003d 	movw	r0, #8253	; 0x203d
 802c6c8:	f7fe f9a6 	bl	802aa18 <fm25v02_read>
	status_registers.ce303_error_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802c6cc:	79fb      	ldrb	r3, [r7, #7]
 802c6ce:	021b      	lsls	r3, r3, #8
 802c6d0:	b21a      	sxth	r2, r3
 802c6d2:	79bb      	ldrb	r3, [r7, #6]
 802c6d4:	b21b      	sxth	r3, r3
 802c6d6:	4313      	orrs	r3, r2
 802c6d8:	b21b      	sxth	r3, r3
 802c6da:	b29a      	uxth	r2, r3
 802c6dc:	4b38      	ldr	r3, [pc, #224]	; (802c7c0 <read_status_registers+0x5fc>)
 802c6de:	879a      	strh	r2, [r3, #60]	; 0x3c

	fm25v02_read(2*CE_303_CURRENT_A_REG, &status_reg_temp_h);
 802c6e0:	1dfb      	adds	r3, r7, #7
 802c6e2:	4619      	mov	r1, r3
 802c6e4:	f242 003e 	movw	r0, #8254	; 0x203e
 802c6e8:	f7fe f996 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*CE_303_CURRENT_A_REG+1, &status_reg_temp_l);
 802c6ec:	1dbb      	adds	r3, r7, #6
 802c6ee:	4619      	mov	r1, r3
 802c6f0:	f242 003f 	movw	r0, #8255	; 0x203f
 802c6f4:	f7fe f990 	bl	802aa18 <fm25v02_read>
	status_registers.ce303_current_a_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802c6f8:	79fb      	ldrb	r3, [r7, #7]
 802c6fa:	021b      	lsls	r3, r3, #8
 802c6fc:	b21a      	sxth	r2, r3
 802c6fe:	79bb      	ldrb	r3, [r7, #6]
 802c700:	b21b      	sxth	r3, r3
 802c702:	4313      	orrs	r3, r2
 802c704:	b21b      	sxth	r3, r3
 802c706:	b29a      	uxth	r2, r3
 802c708:	4b2d      	ldr	r3, [pc, #180]	; (802c7c0 <read_status_registers+0x5fc>)
 802c70a:	87da      	strh	r2, [r3, #62]	; 0x3e

	fm25v02_read(2*CE_303_CURRENT_B_REG, &status_reg_temp_h);
 802c70c:	1dfb      	adds	r3, r7, #7
 802c70e:	4619      	mov	r1, r3
 802c710:	f44f 5001 	mov.w	r0, #8256	; 0x2040
 802c714:	f7fe f980 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*CE_303_CURRENT_B_REG+1, &status_reg_temp_l);
 802c718:	1dbb      	adds	r3, r7, #6
 802c71a:	4619      	mov	r1, r3
 802c71c:	f242 0041 	movw	r0, #8257	; 0x2041
 802c720:	f7fe f97a 	bl	802aa18 <fm25v02_read>
	status_registers.ce303_current_b_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802c724:	79fb      	ldrb	r3, [r7, #7]
 802c726:	021b      	lsls	r3, r3, #8
 802c728:	b21a      	sxth	r2, r3
 802c72a:	79bb      	ldrb	r3, [r7, #6]
 802c72c:	b21b      	sxth	r3, r3
 802c72e:	4313      	orrs	r3, r2
 802c730:	b21b      	sxth	r3, r3
 802c732:	b29a      	uxth	r2, r3
 802c734:	4b22      	ldr	r3, [pc, #136]	; (802c7c0 <read_status_registers+0x5fc>)
 802c736:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

	fm25v02_read(2*CE_303_CURRENT_C_REG, &status_reg_temp_h);
 802c73a:	1dfb      	adds	r3, r7, #7
 802c73c:	4619      	mov	r1, r3
 802c73e:	f242 0042 	movw	r0, #8258	; 0x2042
 802c742:	f7fe f969 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*CE_303_CURRENT_C_REG+1, &status_reg_temp_l);
 802c746:	1dbb      	adds	r3, r7, #6
 802c748:	4619      	mov	r1, r3
 802c74a:	f242 0043 	movw	r0, #8259	; 0x2043
 802c74e:	f7fe f963 	bl	802aa18 <fm25v02_read>
	status_registers.ce303_current_c_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802c752:	79fb      	ldrb	r3, [r7, #7]
 802c754:	021b      	lsls	r3, r3, #8
 802c756:	b21a      	sxth	r2, r3
 802c758:	79bb      	ldrb	r3, [r7, #6]
 802c75a:	b21b      	sxth	r3, r3
 802c75c:	4313      	orrs	r3, r2
 802c75e:	b21b      	sxth	r3, r3
 802c760:	b29a      	uxth	r2, r3
 802c762:	4b17      	ldr	r3, [pc, #92]	; (802c7c0 <read_status_registers+0x5fc>)
 802c764:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

	fm25v02_read(2*CE_303_CURRENT_MIL_A_REG, &status_reg_temp_h);
 802c768:	1dfb      	adds	r3, r7, #7
 802c76a:	4619      	mov	r1, r3
 802c76c:	f242 0044 	movw	r0, #8260	; 0x2044
 802c770:	f7fe f952 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*CE_303_CURRENT_MIL_A_REG+1, &status_reg_temp_l);
 802c774:	1dbb      	adds	r3, r7, #6
 802c776:	4619      	mov	r1, r3
 802c778:	f242 0045 	movw	r0, #8261	; 0x2045
 802c77c:	f7fe f94c 	bl	802aa18 <fm25v02_read>
	status_registers.ce303_current_mil_a_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802c780:	79fb      	ldrb	r3, [r7, #7]
 802c782:	021b      	lsls	r3, r3, #8
 802c784:	b21a      	sxth	r2, r3
 802c786:	79bb      	ldrb	r3, [r7, #6]
 802c788:	b21b      	sxth	r3, r3
 802c78a:	4313      	orrs	r3, r2
 802c78c:	b21b      	sxth	r3, r3
 802c78e:	b29a      	uxth	r2, r3
 802c790:	4b0b      	ldr	r3, [pc, #44]	; (802c7c0 <read_status_registers+0x5fc>)
 802c792:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	fm25v02_read(2*CE_303_CURRENT_MIL_B_REG, &status_reg_temp_h);
 802c796:	1dfb      	adds	r3, r7, #7
 802c798:	4619      	mov	r1, r3
 802c79a:	f242 0046 	movw	r0, #8262	; 0x2046
 802c79e:	f7fe f93b 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*CE_303_CURRENT_MIL_B_REG+1, &status_reg_temp_l);
 802c7a2:	1dbb      	adds	r3, r7, #6
 802c7a4:	4619      	mov	r1, r3
 802c7a6:	f242 0047 	movw	r0, #8263	; 0x2047
 802c7aa:	f7fe f935 	bl	802aa18 <fm25v02_read>
	status_registers.ce303_current_mil_b_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802c7ae:	79fb      	ldrb	r3, [r7, #7]
 802c7b0:	021b      	lsls	r3, r3, #8
 802c7b2:	b21a      	sxth	r2, r3
 802c7b4:	79bb      	ldrb	r3, [r7, #6]
 802c7b6:	b21b      	sxth	r3, r3
 802c7b8:	4313      	orrs	r3, r2
 802c7ba:	b21b      	sxth	r3, r3
 802c7bc:	e002      	b.n	802c7c4 <read_status_registers+0x600>
 802c7be:	bf00      	nop
 802c7c0:	2000af40 	.word	0x2000af40
 802c7c4:	b29a      	uxth	r2, r3
 802c7c6:	4bc3      	ldr	r3, [pc, #780]	; (802cad4 <read_status_registers+0x910>)
 802c7c8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

	fm25v02_read(2*CE_303_CURRENT_MIL_C_REG, &status_reg_temp_h);
 802c7cc:	1dfb      	adds	r3, r7, #7
 802c7ce:	4619      	mov	r1, r3
 802c7d0:	f242 0048 	movw	r0, #8264	; 0x2048
 802c7d4:	f7fe f920 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*CE_303_CURRENT_MIL_C_REG+1, &status_reg_temp_l);
 802c7d8:	1dbb      	adds	r3, r7, #6
 802c7da:	4619      	mov	r1, r3
 802c7dc:	f242 0049 	movw	r0, #8265	; 0x2049
 802c7e0:	f7fe f91a 	bl	802aa18 <fm25v02_read>
	status_registers.ce303_current_mil_c_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802c7e4:	79fb      	ldrb	r3, [r7, #7]
 802c7e6:	021b      	lsls	r3, r3, #8
 802c7e8:	b21a      	sxth	r2, r3
 802c7ea:	79bb      	ldrb	r3, [r7, #6]
 802c7ec:	b21b      	sxth	r3, r3
 802c7ee:	4313      	orrs	r3, r2
 802c7f0:	b21b      	sxth	r3, r3
 802c7f2:	b29a      	uxth	r2, r3
 802c7f4:	4bb7      	ldr	r3, [pc, #732]	; (802cad4 <read_status_registers+0x910>)
 802c7f6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

	fm25v02_read(2*CE_303_VOLT_A_REG, &status_reg_temp_h);
 802c7fa:	1dfb      	adds	r3, r7, #7
 802c7fc:	4619      	mov	r1, r3
 802c7fe:	f242 004a 	movw	r0, #8266	; 0x204a
 802c802:	f7fe f909 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*CE_303_VOLT_A_REG+1, &status_reg_temp_l);
 802c806:	1dbb      	adds	r3, r7, #6
 802c808:	4619      	mov	r1, r3
 802c80a:	f242 004b 	movw	r0, #8267	; 0x204b
 802c80e:	f7fe f903 	bl	802aa18 <fm25v02_read>
	status_registers.ce303_volt_a_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802c812:	79fb      	ldrb	r3, [r7, #7]
 802c814:	021b      	lsls	r3, r3, #8
 802c816:	b21a      	sxth	r2, r3
 802c818:	79bb      	ldrb	r3, [r7, #6]
 802c81a:	b21b      	sxth	r3, r3
 802c81c:	4313      	orrs	r3, r2
 802c81e:	b21b      	sxth	r3, r3
 802c820:	b29a      	uxth	r2, r3
 802c822:	4bac      	ldr	r3, [pc, #688]	; (802cad4 <read_status_registers+0x910>)
 802c824:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

	fm25v02_read(2*CE_303_VOLT_B_REG, &status_reg_temp_h);
 802c828:	1dfb      	adds	r3, r7, #7
 802c82a:	4619      	mov	r1, r3
 802c82c:	f242 004c 	movw	r0, #8268	; 0x204c
 802c830:	f7fe f8f2 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*CE_303_VOLT_B_REG+1, &status_reg_temp_l);
 802c834:	1dbb      	adds	r3, r7, #6
 802c836:	4619      	mov	r1, r3
 802c838:	f242 004d 	movw	r0, #8269	; 0x204d
 802c83c:	f7fe f8ec 	bl	802aa18 <fm25v02_read>
	status_registers.ce303_volt_b_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802c840:	79fb      	ldrb	r3, [r7, #7]
 802c842:	021b      	lsls	r3, r3, #8
 802c844:	b21a      	sxth	r2, r3
 802c846:	79bb      	ldrb	r3, [r7, #6]
 802c848:	b21b      	sxth	r3, r3
 802c84a:	4313      	orrs	r3, r2
 802c84c:	b21b      	sxth	r3, r3
 802c84e:	b29a      	uxth	r2, r3
 802c850:	4ba0      	ldr	r3, [pc, #640]	; (802cad4 <read_status_registers+0x910>)
 802c852:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

	fm25v02_read(2*CE_303_VOLT_C_REG, &status_reg_temp_h);
 802c856:	1dfb      	adds	r3, r7, #7
 802c858:	4619      	mov	r1, r3
 802c85a:	f242 004e 	movw	r0, #8270	; 0x204e
 802c85e:	f7fe f8db 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*CE_303_VOLT_C_REG+1, &status_reg_temp_l);
 802c862:	1dbb      	adds	r3, r7, #6
 802c864:	4619      	mov	r1, r3
 802c866:	f242 004f 	movw	r0, #8271	; 0x204f
 802c86a:	f7fe f8d5 	bl	802aa18 <fm25v02_read>
	status_registers.ce303_volt_c_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802c86e:	79fb      	ldrb	r3, [r7, #7]
 802c870:	021b      	lsls	r3, r3, #8
 802c872:	b21a      	sxth	r2, r3
 802c874:	79bb      	ldrb	r3, [r7, #6]
 802c876:	b21b      	sxth	r3, r3
 802c878:	4313      	orrs	r3, r2
 802c87a:	b21b      	sxth	r3, r3
 802c87c:	b29a      	uxth	r2, r3
 802c87e:	4b95      	ldr	r3, [pc, #596]	; (802cad4 <read_status_registers+0x910>)
 802c880:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

	fm25v02_read(2*CE_303_VOLT_MIL_A_REG, &status_reg_temp_h);
 802c884:	1dfb      	adds	r3, r7, #7
 802c886:	4619      	mov	r1, r3
 802c888:	f242 0050 	movw	r0, #8272	; 0x2050
 802c88c:	f7fe f8c4 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*CE_303_VOLT_MIL_A_REG+1, &status_reg_temp_l);
 802c890:	1dbb      	adds	r3, r7, #6
 802c892:	4619      	mov	r1, r3
 802c894:	f242 0051 	movw	r0, #8273	; 0x2051
 802c898:	f7fe f8be 	bl	802aa18 <fm25v02_read>
	status_registers.ce303_volt_mil_a_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802c89c:	79fb      	ldrb	r3, [r7, #7]
 802c89e:	021b      	lsls	r3, r3, #8
 802c8a0:	b21a      	sxth	r2, r3
 802c8a2:	79bb      	ldrb	r3, [r7, #6]
 802c8a4:	b21b      	sxth	r3, r3
 802c8a6:	4313      	orrs	r3, r2
 802c8a8:	b21b      	sxth	r3, r3
 802c8aa:	b29a      	uxth	r2, r3
 802c8ac:	4b89      	ldr	r3, [pc, #548]	; (802cad4 <read_status_registers+0x910>)
 802c8ae:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

	fm25v02_read(2*CE_303_VOLT_MIL_B_REG, &status_reg_temp_h);
 802c8b2:	1dfb      	adds	r3, r7, #7
 802c8b4:	4619      	mov	r1, r3
 802c8b6:	f242 0052 	movw	r0, #8274	; 0x2052
 802c8ba:	f7fe f8ad 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*CE_303_VOLT_MIL_B_REG+1, &status_reg_temp_l);
 802c8be:	1dbb      	adds	r3, r7, #6
 802c8c0:	4619      	mov	r1, r3
 802c8c2:	f242 0053 	movw	r0, #8275	; 0x2053
 802c8c6:	f7fe f8a7 	bl	802aa18 <fm25v02_read>
	status_registers.ce303_volt_mil_b_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802c8ca:	79fb      	ldrb	r3, [r7, #7]
 802c8cc:	021b      	lsls	r3, r3, #8
 802c8ce:	b21a      	sxth	r2, r3
 802c8d0:	79bb      	ldrb	r3, [r7, #6]
 802c8d2:	b21b      	sxth	r3, r3
 802c8d4:	4313      	orrs	r3, r2
 802c8d6:	b21b      	sxth	r3, r3
 802c8d8:	b29a      	uxth	r2, r3
 802c8da:	4b7e      	ldr	r3, [pc, #504]	; (802cad4 <read_status_registers+0x910>)
 802c8dc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

	fm25v02_read(2*CE_303_VOLT_MIL_C_REG, &status_reg_temp_h);
 802c8e0:	1dfb      	adds	r3, r7, #7
 802c8e2:	4619      	mov	r1, r3
 802c8e4:	f242 0054 	movw	r0, #8276	; 0x2054
 802c8e8:	f7fe f896 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*CE_303_VOLT_MIL_C_REG+1, &status_reg_temp_l);
 802c8ec:	1dbb      	adds	r3, r7, #6
 802c8ee:	4619      	mov	r1, r3
 802c8f0:	f242 0055 	movw	r0, #8277	; 0x2055
 802c8f4:	f7fe f890 	bl	802aa18 <fm25v02_read>
	status_registers.ce303_volt_mil_c_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802c8f8:	79fb      	ldrb	r3, [r7, #7]
 802c8fa:	021b      	lsls	r3, r3, #8
 802c8fc:	b21a      	sxth	r2, r3
 802c8fe:	79bb      	ldrb	r3, [r7, #6]
 802c900:	b21b      	sxth	r3, r3
 802c902:	4313      	orrs	r3, r2
 802c904:	b21b      	sxth	r3, r3
 802c906:	b29a      	uxth	r2, r3
 802c908:	4b72      	ldr	r3, [pc, #456]	; (802cad4 <read_status_registers+0x910>)
 802c90a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

	fm25v02_read(2*CE_303_POWER_A_REG, &status_reg_temp_h);
 802c90e:	1dfb      	adds	r3, r7, #7
 802c910:	4619      	mov	r1, r3
 802c912:	f242 0056 	movw	r0, #8278	; 0x2056
 802c916:	f7fe f87f 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*CE_303_POWER_A_REG+1, &status_reg_temp_l);
 802c91a:	1dbb      	adds	r3, r7, #6
 802c91c:	4619      	mov	r1, r3
 802c91e:	f242 0057 	movw	r0, #8279	; 0x2057
 802c922:	f7fe f879 	bl	802aa18 <fm25v02_read>
	status_registers.ce303_power_a_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802c926:	79fb      	ldrb	r3, [r7, #7]
 802c928:	021b      	lsls	r3, r3, #8
 802c92a:	b21a      	sxth	r2, r3
 802c92c:	79bb      	ldrb	r3, [r7, #6]
 802c92e:	b21b      	sxth	r3, r3
 802c930:	4313      	orrs	r3, r2
 802c932:	b21b      	sxth	r3, r3
 802c934:	b29a      	uxth	r2, r3
 802c936:	4b67      	ldr	r3, [pc, #412]	; (802cad4 <read_status_registers+0x910>)
 802c938:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

	fm25v02_read(2*CE_303_POWER_B_REG, &status_reg_temp_h);
 802c93c:	1dfb      	adds	r3, r7, #7
 802c93e:	4619      	mov	r1, r3
 802c940:	f242 0058 	movw	r0, #8280	; 0x2058
 802c944:	f7fe f868 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*CE_303_POWER_B_REG+1, &status_reg_temp_l);
 802c948:	1dbb      	adds	r3, r7, #6
 802c94a:	4619      	mov	r1, r3
 802c94c:	f242 0059 	movw	r0, #8281	; 0x2059
 802c950:	f7fe f862 	bl	802aa18 <fm25v02_read>
	status_registers.ce303_power_b_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802c954:	79fb      	ldrb	r3, [r7, #7]
 802c956:	021b      	lsls	r3, r3, #8
 802c958:	b21a      	sxth	r2, r3
 802c95a:	79bb      	ldrb	r3, [r7, #6]
 802c95c:	b21b      	sxth	r3, r3
 802c95e:	4313      	orrs	r3, r2
 802c960:	b21b      	sxth	r3, r3
 802c962:	b29a      	uxth	r2, r3
 802c964:	4b5b      	ldr	r3, [pc, #364]	; (802cad4 <read_status_registers+0x910>)
 802c966:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

	fm25v02_read(2*CE_303_POWER_C_REG, &status_reg_temp_h);
 802c96a:	1dfb      	adds	r3, r7, #7
 802c96c:	4619      	mov	r1, r3
 802c96e:	f242 005a 	movw	r0, #8282	; 0x205a
 802c972:	f7fe f851 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*CE_303_POWER_C_REG+1, &status_reg_temp_l);
 802c976:	1dbb      	adds	r3, r7, #6
 802c978:	4619      	mov	r1, r3
 802c97a:	f242 005b 	movw	r0, #8283	; 0x205b
 802c97e:	f7fe f84b 	bl	802aa18 <fm25v02_read>
	status_registers.ce303_power_c_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802c982:	79fb      	ldrb	r3, [r7, #7]
 802c984:	021b      	lsls	r3, r3, #8
 802c986:	b21a      	sxth	r2, r3
 802c988:	79bb      	ldrb	r3, [r7, #6]
 802c98a:	b21b      	sxth	r3, r3
 802c98c:	4313      	orrs	r3, r2
 802c98e:	b21b      	sxth	r3, r3
 802c990:	b29a      	uxth	r2, r3
 802c992:	4b50      	ldr	r3, [pc, #320]	; (802cad4 <read_status_registers+0x910>)
 802c994:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

	fm25v02_read(2*CE_303_POWER_MIL_A_REG, &status_reg_temp_h);
 802c998:	1dfb      	adds	r3, r7, #7
 802c99a:	4619      	mov	r1, r3
 802c99c:	f242 005c 	movw	r0, #8284	; 0x205c
 802c9a0:	f7fe f83a 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*CE_303_POWER_MIL_A_REG+1, &status_reg_temp_l);
 802c9a4:	1dbb      	adds	r3, r7, #6
 802c9a6:	4619      	mov	r1, r3
 802c9a8:	f242 005d 	movw	r0, #8285	; 0x205d
 802c9ac:	f7fe f834 	bl	802aa18 <fm25v02_read>
	status_registers.ce303_power_mil_a_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802c9b0:	79fb      	ldrb	r3, [r7, #7]
 802c9b2:	021b      	lsls	r3, r3, #8
 802c9b4:	b21a      	sxth	r2, r3
 802c9b6:	79bb      	ldrb	r3, [r7, #6]
 802c9b8:	b21b      	sxth	r3, r3
 802c9ba:	4313      	orrs	r3, r2
 802c9bc:	b21b      	sxth	r3, r3
 802c9be:	b29a      	uxth	r2, r3
 802c9c0:	4b44      	ldr	r3, [pc, #272]	; (802cad4 <read_status_registers+0x910>)
 802c9c2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

	fm25v02_read(2*CE_303_POWER_MIL_B_REG, &status_reg_temp_h);
 802c9c6:	1dfb      	adds	r3, r7, #7
 802c9c8:	4619      	mov	r1, r3
 802c9ca:	f242 005e 	movw	r0, #8286	; 0x205e
 802c9ce:	f7fe f823 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*CE_303_POWER_MIL_B_REG+1, &status_reg_temp_l);
 802c9d2:	1dbb      	adds	r3, r7, #6
 802c9d4:	4619      	mov	r1, r3
 802c9d6:	f242 005f 	movw	r0, #8287	; 0x205f
 802c9da:	f7fe f81d 	bl	802aa18 <fm25v02_read>
	status_registers.ce303_power_mil_b_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802c9de:	79fb      	ldrb	r3, [r7, #7]
 802c9e0:	021b      	lsls	r3, r3, #8
 802c9e2:	b21a      	sxth	r2, r3
 802c9e4:	79bb      	ldrb	r3, [r7, #6]
 802c9e6:	b21b      	sxth	r3, r3
 802c9e8:	4313      	orrs	r3, r2
 802c9ea:	b21b      	sxth	r3, r3
 802c9ec:	b29a      	uxth	r2, r3
 802c9ee:	4b39      	ldr	r3, [pc, #228]	; (802cad4 <read_status_registers+0x910>)
 802c9f0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

	fm25v02_read(2*CE_303_POWER_MIL_C_REG, &status_reg_temp_h);
 802c9f4:	1dfb      	adds	r3, r7, #7
 802c9f6:	4619      	mov	r1, r3
 802c9f8:	f242 0060 	movw	r0, #8288	; 0x2060
 802c9fc:	f7fe f80c 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*CE_303_POWER_MIL_C_REG+1, &status_reg_temp_l);
 802ca00:	1dbb      	adds	r3, r7, #6
 802ca02:	4619      	mov	r1, r3
 802ca04:	f242 0061 	movw	r0, #8289	; 0x2061
 802ca08:	f7fe f806 	bl	802aa18 <fm25v02_read>
	status_registers.ce303_power_mil_c_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802ca0c:	79fb      	ldrb	r3, [r7, #7]
 802ca0e:	021b      	lsls	r3, r3, #8
 802ca10:	b21a      	sxth	r2, r3
 802ca12:	79bb      	ldrb	r3, [r7, #6]
 802ca14:	b21b      	sxth	r3, r3
 802ca16:	4313      	orrs	r3, r2
 802ca18:	b21b      	sxth	r3, r3
 802ca1a:	b29a      	uxth	r2, r3
 802ca1c:	4b2d      	ldr	r3, [pc, #180]	; (802cad4 <read_status_registers+0x910>)
 802ca1e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

	fm25v02_read(2*LIGHTING_STATUS_REG, &status_reg_temp_h);
 802ca22:	1dfb      	adds	r3, r7, #7
 802ca24:	4619      	mov	r1, r3
 802ca26:	f242 0062 	movw	r0, #8290	; 0x2062
 802ca2a:	f7fd fff5 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*LIGHTING_STATUS_REG+1, &status_reg_temp_l);
 802ca2e:	1dbb      	adds	r3, r7, #6
 802ca30:	4619      	mov	r1, r3
 802ca32:	f242 0063 	movw	r0, #8291	; 0x2063
 802ca36:	f7fd ffef 	bl	802aa18 <fm25v02_read>
	status_registers.lighting_status_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802ca3a:	79fb      	ldrb	r3, [r7, #7]
 802ca3c:	021b      	lsls	r3, r3, #8
 802ca3e:	b21a      	sxth	r2, r3
 802ca40:	79bb      	ldrb	r3, [r7, #6]
 802ca42:	b21b      	sxth	r3, r3
 802ca44:	4313      	orrs	r3, r2
 802ca46:	b21b      	sxth	r3, r3
 802ca48:	b29a      	uxth	r2, r3
 802ca4a:	4b22      	ldr	r3, [pc, #136]	; (802cad4 <read_status_registers+0x910>)
 802ca4c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

	fm25v02_read(2*LIGHTING_ALARM_REG, &status_reg_temp_h);
 802ca50:	1dfb      	adds	r3, r7, #7
 802ca52:	4619      	mov	r1, r3
 802ca54:	f242 0064 	movw	r0, #8292	; 0x2064
 802ca58:	f7fd ffde 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*LIGHTING_ALARM_REG+1, &status_reg_temp_l);
 802ca5c:	1dbb      	adds	r3, r7, #6
 802ca5e:	4619      	mov	r1, r3
 802ca60:	f242 0065 	movw	r0, #8293	; 0x2065
 802ca64:	f7fd ffd8 	bl	802aa18 <fm25v02_read>
	status_registers.lighting_alarm_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802ca68:	79fb      	ldrb	r3, [r7, #7]
 802ca6a:	021b      	lsls	r3, r3, #8
 802ca6c:	b21a      	sxth	r2, r3
 802ca6e:	79bb      	ldrb	r3, [r7, #6]
 802ca70:	b21b      	sxth	r3, r3
 802ca72:	4313      	orrs	r3, r2
 802ca74:	b21b      	sxth	r3, r3
 802ca76:	b29a      	uxth	r2, r3
 802ca78:	4b16      	ldr	r3, [pc, #88]	; (802cad4 <read_status_registers+0x910>)
 802ca7a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

	fm25v02_read(2*MONTH_LIGHTING_OFF_REG, &status_reg_temp_h);
 802ca7e:	1dfb      	adds	r3, r7, #7
 802ca80:	4619      	mov	r1, r3
 802ca82:	f242 0066 	movw	r0, #8294	; 0x2066
 802ca86:	f7fd ffc7 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*MONTH_LIGHTING_OFF_REG+1, &status_reg_temp_l);
 802ca8a:	1dbb      	adds	r3, r7, #6
 802ca8c:	4619      	mov	r1, r3
 802ca8e:	f242 0067 	movw	r0, #8295	; 0x2067
 802ca92:	f7fd ffc1 	bl	802aa18 <fm25v02_read>
	status_registers.month_lighting_off_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802ca96:	79fb      	ldrb	r3, [r7, #7]
 802ca98:	021b      	lsls	r3, r3, #8
 802ca9a:	b21a      	sxth	r2, r3
 802ca9c:	79bb      	ldrb	r3, [r7, #6]
 802ca9e:	b21b      	sxth	r3, r3
 802caa0:	4313      	orrs	r3, r2
 802caa2:	b21b      	sxth	r3, r3
 802caa4:	b29a      	uxth	r2, r3
 802caa6:	4b0b      	ldr	r3, [pc, #44]	; (802cad4 <read_status_registers+0x910>)
 802caa8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

	fm25v02_read(2*DAY_LIGHTING_OFF_REG, &status_reg_temp_h);
 802caac:	1dfb      	adds	r3, r7, #7
 802caae:	4619      	mov	r1, r3
 802cab0:	f242 0068 	movw	r0, #8296	; 0x2068
 802cab4:	f7fd ffb0 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*DAY_LIGHTING_OFF_REG+1, &status_reg_temp_l);
 802cab8:	1dbb      	adds	r3, r7, #6
 802caba:	4619      	mov	r1, r3
 802cabc:	f242 0069 	movw	r0, #8297	; 0x2069
 802cac0:	f7fd ffaa 	bl	802aa18 <fm25v02_read>
	status_registers.day_lighting_off_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802cac4:	79fb      	ldrb	r3, [r7, #7]
 802cac6:	021b      	lsls	r3, r3, #8
 802cac8:	b21a      	sxth	r2, r3
 802caca:	79bb      	ldrb	r3, [r7, #6]
 802cacc:	b21b      	sxth	r3, r3
 802cace:	4313      	orrs	r3, r2
 802cad0:	b21b      	sxth	r3, r3
 802cad2:	e001      	b.n	802cad8 <read_status_registers+0x914>
 802cad4:	2000af40 	.word	0x2000af40
 802cad8:	b29a      	uxth	r2, r3
 802cada:	4bc3      	ldr	r3, [pc, #780]	; (802cde8 <read_status_registers+0xc24>)
 802cadc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

	fm25v02_read(2*HOUR_LIGHTING_OFF_REG, &status_reg_temp_h);
 802cae0:	1dfb      	adds	r3, r7, #7
 802cae2:	4619      	mov	r1, r3
 802cae4:	f242 006a 	movw	r0, #8298	; 0x206a
 802cae8:	f7fd ff96 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*HOUR_LIGHTING_OFF_REG+1, &status_reg_temp_l);
 802caec:	1dbb      	adds	r3, r7, #6
 802caee:	4619      	mov	r1, r3
 802caf0:	f242 006b 	movw	r0, #8299	; 0x206b
 802caf4:	f7fd ff90 	bl	802aa18 <fm25v02_read>
	status_registers.hour_lighting_off_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802caf8:	79fb      	ldrb	r3, [r7, #7]
 802cafa:	021b      	lsls	r3, r3, #8
 802cafc:	b21a      	sxth	r2, r3
 802cafe:	79bb      	ldrb	r3, [r7, #6]
 802cb00:	b21b      	sxth	r3, r3
 802cb02:	4313      	orrs	r3, r2
 802cb04:	b21b      	sxth	r3, r3
 802cb06:	b29a      	uxth	r2, r3
 802cb08:	4bb7      	ldr	r3, [pc, #732]	; (802cde8 <read_status_registers+0xc24>)
 802cb0a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

	fm25v02_read(2*MINUTE_LIGHTING_OFF_REG, &status_reg_temp_h);
 802cb0e:	1dfb      	adds	r3, r7, #7
 802cb10:	4619      	mov	r1, r3
 802cb12:	f242 006c 	movw	r0, #8300	; 0x206c
 802cb16:	f7fd ff7f 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*MINUTE_LIGHTING_OFF_REG+1, &status_reg_temp_l);
 802cb1a:	1dbb      	adds	r3, r7, #6
 802cb1c:	4619      	mov	r1, r3
 802cb1e:	f242 006d 	movw	r0, #8301	; 0x206d
 802cb22:	f7fd ff79 	bl	802aa18 <fm25v02_read>
	status_registers.minute_lighting_off_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802cb26:	79fb      	ldrb	r3, [r7, #7]
 802cb28:	021b      	lsls	r3, r3, #8
 802cb2a:	b21a      	sxth	r2, r3
 802cb2c:	79bb      	ldrb	r3, [r7, #6]
 802cb2e:	b21b      	sxth	r3, r3
 802cb30:	4313      	orrs	r3, r2
 802cb32:	b21b      	sxth	r3, r3
 802cb34:	b29a      	uxth	r2, r3
 802cb36:	4bac      	ldr	r3, [pc, #688]	; (802cde8 <read_status_registers+0xc24>)
 802cb38:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c

	fm25v02_read(2*MONTH_LIGHTING_ON_REG, &status_reg_temp_h);
 802cb3c:	1dfb      	adds	r3, r7, #7
 802cb3e:	4619      	mov	r1, r3
 802cb40:	f242 006e 	movw	r0, #8302	; 0x206e
 802cb44:	f7fd ff68 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*MONTH_LIGHTING_ON_REG+1, &status_reg_temp_l);
 802cb48:	1dbb      	adds	r3, r7, #6
 802cb4a:	4619      	mov	r1, r3
 802cb4c:	f242 006f 	movw	r0, #8303	; 0x206f
 802cb50:	f7fd ff62 	bl	802aa18 <fm25v02_read>
	status_registers.month_lighting_on_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802cb54:	79fb      	ldrb	r3, [r7, #7]
 802cb56:	021b      	lsls	r3, r3, #8
 802cb58:	b21a      	sxth	r2, r3
 802cb5a:	79bb      	ldrb	r3, [r7, #6]
 802cb5c:	b21b      	sxth	r3, r3
 802cb5e:	4313      	orrs	r3, r2
 802cb60:	b21b      	sxth	r3, r3
 802cb62:	b29a      	uxth	r2, r3
 802cb64:	4ba0      	ldr	r3, [pc, #640]	; (802cde8 <read_status_registers+0xc24>)
 802cb66:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e

	fm25v02_read(2*DAY_LIGHTING_ON_REG, &status_reg_temp_h);
 802cb6a:	1dfb      	adds	r3, r7, #7
 802cb6c:	4619      	mov	r1, r3
 802cb6e:	f242 0070 	movw	r0, #8304	; 0x2070
 802cb72:	f7fd ff51 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*DAY_LIGHTING_ON_REG+1, &status_reg_temp_l);
 802cb76:	1dbb      	adds	r3, r7, #6
 802cb78:	4619      	mov	r1, r3
 802cb7a:	f242 0071 	movw	r0, #8305	; 0x2071
 802cb7e:	f7fd ff4b 	bl	802aa18 <fm25v02_read>
	status_registers.day_lighting_on_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802cb82:	79fb      	ldrb	r3, [r7, #7]
 802cb84:	021b      	lsls	r3, r3, #8
 802cb86:	b21a      	sxth	r2, r3
 802cb88:	79bb      	ldrb	r3, [r7, #6]
 802cb8a:	b21b      	sxth	r3, r3
 802cb8c:	4313      	orrs	r3, r2
 802cb8e:	b21b      	sxth	r3, r3
 802cb90:	b29a      	uxth	r2, r3
 802cb92:	4b95      	ldr	r3, [pc, #596]	; (802cde8 <read_status_registers+0xc24>)
 802cb94:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70

	fm25v02_read(2*HOUR_LIGHTING_ON_REG, &status_reg_temp_h);
 802cb98:	1dfb      	adds	r3, r7, #7
 802cb9a:	4619      	mov	r1, r3
 802cb9c:	f242 0072 	movw	r0, #8306	; 0x2072
 802cba0:	f7fd ff3a 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*HOUR_LIGHTING_ON_REG+1, &status_reg_temp_l);
 802cba4:	1dbb      	adds	r3, r7, #6
 802cba6:	4619      	mov	r1, r3
 802cba8:	f242 0073 	movw	r0, #8307	; 0x2073
 802cbac:	f7fd ff34 	bl	802aa18 <fm25v02_read>
	status_registers.hour_lighting_on_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802cbb0:	79fb      	ldrb	r3, [r7, #7]
 802cbb2:	021b      	lsls	r3, r3, #8
 802cbb4:	b21a      	sxth	r2, r3
 802cbb6:	79bb      	ldrb	r3, [r7, #6]
 802cbb8:	b21b      	sxth	r3, r3
 802cbba:	4313      	orrs	r3, r2
 802cbbc:	b21b      	sxth	r3, r3
 802cbbe:	b29a      	uxth	r2, r3
 802cbc0:	4b89      	ldr	r3, [pc, #548]	; (802cde8 <read_status_registers+0xc24>)
 802cbc2:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72

	fm25v02_read(2*MINUTE_LIGHTING_ON_REG, &status_reg_temp_h);
 802cbc6:	1dfb      	adds	r3, r7, #7
 802cbc8:	4619      	mov	r1, r3
 802cbca:	f242 0074 	movw	r0, #8308	; 0x2074
 802cbce:	f7fd ff23 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*MINUTE_LIGHTING_ON_REG+1, &status_reg_temp_l);
 802cbd2:	1dbb      	adds	r3, r7, #6
 802cbd4:	4619      	mov	r1, r3
 802cbd6:	f242 0075 	movw	r0, #8309	; 0x2075
 802cbda:	f7fd ff1d 	bl	802aa18 <fm25v02_read>
	status_registers.minute_lighting_on_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802cbde:	79fb      	ldrb	r3, [r7, #7]
 802cbe0:	021b      	lsls	r3, r3, #8
 802cbe2:	b21a      	sxth	r2, r3
 802cbe4:	79bb      	ldrb	r3, [r7, #6]
 802cbe6:	b21b      	sxth	r3, r3
 802cbe8:	4313      	orrs	r3, r2
 802cbea:	b21b      	sxth	r3, r3
 802cbec:	b29a      	uxth	r2, r3
 802cbee:	4b7e      	ldr	r3, [pc, #504]	; (802cde8 <read_status_registers+0xc24>)
 802cbf0:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74

	fm25v02_read(2*CURRENT_PHASE_A_REG, &status_reg_temp_h);
 802cbf4:	1dfb      	adds	r3, r7, #7
 802cbf6:	4619      	mov	r1, r3
 802cbf8:	f242 0076 	movw	r0, #8310	; 0x2076
 802cbfc:	f7fd ff0c 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*CURRENT_PHASE_A_REG+1, &status_reg_temp_l);
 802cc00:	1dbb      	adds	r3, r7, #6
 802cc02:	4619      	mov	r1, r3
 802cc04:	f242 0077 	movw	r0, #8311	; 0x2077
 802cc08:	f7fd ff06 	bl	802aa18 <fm25v02_read>
	status_registers.current_phase_a_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802cc0c:	79fb      	ldrb	r3, [r7, #7]
 802cc0e:	021b      	lsls	r3, r3, #8
 802cc10:	b21a      	sxth	r2, r3
 802cc12:	79bb      	ldrb	r3, [r7, #6]
 802cc14:	b21b      	sxth	r3, r3
 802cc16:	4313      	orrs	r3, r2
 802cc18:	b21b      	sxth	r3, r3
 802cc1a:	b29a      	uxth	r2, r3
 802cc1c:	4b72      	ldr	r3, [pc, #456]	; (802cde8 <read_status_registers+0xc24>)
 802cc1e:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76

	fm25v02_read(2*CURRENT_PHASE_B_REG, &status_reg_temp_h);
 802cc22:	1dfb      	adds	r3, r7, #7
 802cc24:	4619      	mov	r1, r3
 802cc26:	f242 0078 	movw	r0, #8312	; 0x2078
 802cc2a:	f7fd fef5 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*CURRENT_PHASE_B_REG+1, &status_reg_temp_l);
 802cc2e:	1dbb      	adds	r3, r7, #6
 802cc30:	4619      	mov	r1, r3
 802cc32:	f242 0079 	movw	r0, #8313	; 0x2079
 802cc36:	f7fd feef 	bl	802aa18 <fm25v02_read>
	status_registers.current_phase_b_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802cc3a:	79fb      	ldrb	r3, [r7, #7]
 802cc3c:	021b      	lsls	r3, r3, #8
 802cc3e:	b21a      	sxth	r2, r3
 802cc40:	79bb      	ldrb	r3, [r7, #6]
 802cc42:	b21b      	sxth	r3, r3
 802cc44:	4313      	orrs	r3, r2
 802cc46:	b21b      	sxth	r3, r3
 802cc48:	b29a      	uxth	r2, r3
 802cc4a:	4b67      	ldr	r3, [pc, #412]	; (802cde8 <read_status_registers+0xc24>)
 802cc4c:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78

	fm25v02_read(2*CURRENT_PHASE_C_REG, &status_reg_temp_h);
 802cc50:	1dfb      	adds	r3, r7, #7
 802cc52:	4619      	mov	r1, r3
 802cc54:	f242 007a 	movw	r0, #8314	; 0x207a
 802cc58:	f7fd fede 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*CURRENT_PHASE_C_REG+1, &status_reg_temp_l);
 802cc5c:	1dbb      	adds	r3, r7, #6
 802cc5e:	4619      	mov	r1, r3
 802cc60:	f242 007b 	movw	r0, #8315	; 0x207b
 802cc64:	f7fd fed8 	bl	802aa18 <fm25v02_read>
	status_registers.current_phase_c_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802cc68:	79fb      	ldrb	r3, [r7, #7]
 802cc6a:	021b      	lsls	r3, r3, #8
 802cc6c:	b21a      	sxth	r2, r3
 802cc6e:	79bb      	ldrb	r3, [r7, #6]
 802cc70:	b21b      	sxth	r3, r3
 802cc72:	4313      	orrs	r3, r2
 802cc74:	b21b      	sxth	r3, r3
 802cc76:	b29a      	uxth	r2, r3
 802cc78:	4b5b      	ldr	r3, [pc, #364]	; (802cde8 <read_status_registers+0xc24>)
 802cc7a:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a

	fm25v02_read(2*CURRENT_VOLTAGE_A_REG, &status_reg_temp_h);
 802cc7e:	1dfb      	adds	r3, r7, #7
 802cc80:	4619      	mov	r1, r3
 802cc82:	f242 007c 	movw	r0, #8316	; 0x207c
 802cc86:	f7fd fec7 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*CURRENT_VOLTAGE_A_REG+1, &status_reg_temp_l);
 802cc8a:	1dbb      	adds	r3, r7, #6
 802cc8c:	4619      	mov	r1, r3
 802cc8e:	f242 007d 	movw	r0, #8317	; 0x207d
 802cc92:	f7fd fec1 	bl	802aa18 <fm25v02_read>
	status_registers.current_voltage_a_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802cc96:	79fb      	ldrb	r3, [r7, #7]
 802cc98:	021b      	lsls	r3, r3, #8
 802cc9a:	b21a      	sxth	r2, r3
 802cc9c:	79bb      	ldrb	r3, [r7, #6]
 802cc9e:	b21b      	sxth	r3, r3
 802cca0:	4313      	orrs	r3, r2
 802cca2:	b21b      	sxth	r3, r3
 802cca4:	b29a      	uxth	r2, r3
 802cca6:	4b50      	ldr	r3, [pc, #320]	; (802cde8 <read_status_registers+0xc24>)
 802cca8:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c

	fm25v02_read(2*CURRENT_VOLTAGE_B_REG, &status_reg_temp_h);
 802ccac:	1dfb      	adds	r3, r7, #7
 802ccae:	4619      	mov	r1, r3
 802ccb0:	f242 007e 	movw	r0, #8318	; 0x207e
 802ccb4:	f7fd feb0 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*CURRENT_VOLTAGE_B_REG+1, &status_reg_temp_l);
 802ccb8:	1dbb      	adds	r3, r7, #6
 802ccba:	4619      	mov	r1, r3
 802ccbc:	f242 007f 	movw	r0, #8319	; 0x207f
 802ccc0:	f7fd feaa 	bl	802aa18 <fm25v02_read>
	status_registers.current_voltage_b_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802ccc4:	79fb      	ldrb	r3, [r7, #7]
 802ccc6:	021b      	lsls	r3, r3, #8
 802ccc8:	b21a      	sxth	r2, r3
 802ccca:	79bb      	ldrb	r3, [r7, #6]
 802cccc:	b21b      	sxth	r3, r3
 802ccce:	4313      	orrs	r3, r2
 802ccd0:	b21b      	sxth	r3, r3
 802ccd2:	b29a      	uxth	r2, r3
 802ccd4:	4b44      	ldr	r3, [pc, #272]	; (802cde8 <read_status_registers+0xc24>)
 802ccd6:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

	fm25v02_read(2*CURRENT_VOLTAGE_C_REG, &status_reg_temp_h);
 802ccda:	1dfb      	adds	r3, r7, #7
 802ccdc:	4619      	mov	r1, r3
 802ccde:	f44f 5002 	mov.w	r0, #8320	; 0x2080
 802cce2:	f7fd fe99 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*CURRENT_VOLTAGE_C_REG+1, &status_reg_temp_l);
 802cce6:	1dbb      	adds	r3, r7, #6
 802cce8:	4619      	mov	r1, r3
 802ccea:	f242 0081 	movw	r0, #8321	; 0x2081
 802ccee:	f7fd fe93 	bl	802aa18 <fm25v02_read>
	status_registers.current_voltage_c_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802ccf2:	79fb      	ldrb	r3, [r7, #7]
 802ccf4:	021b      	lsls	r3, r3, #8
 802ccf6:	b21a      	sxth	r2, r3
 802ccf8:	79bb      	ldrb	r3, [r7, #6]
 802ccfa:	b21b      	sxth	r3, r3
 802ccfc:	4313      	orrs	r3, r2
 802ccfe:	b21b      	sxth	r3, r3
 802cd00:	b29a      	uxth	r2, r3
 802cd02:	4b39      	ldr	r3, [pc, #228]	; (802cde8 <read_status_registers+0xc24>)
 802cd04:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80

	fm25v02_read(2*CE_303_TOTAL_POWER_H_REG, &status_reg_temp_h);
 802cd08:	1dfb      	adds	r3, r7, #7
 802cd0a:	4619      	mov	r1, r3
 802cd0c:	f242 0082 	movw	r0, #8322	; 0x2082
 802cd10:	f7fd fe82 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*CE_303_TOTAL_POWER_H_REG+1, &status_reg_temp_l);
 802cd14:	1dbb      	adds	r3, r7, #6
 802cd16:	4619      	mov	r1, r3
 802cd18:	f242 0083 	movw	r0, #8323	; 0x2083
 802cd1c:	f7fd fe7c 	bl	802aa18 <fm25v02_read>
	status_registers.ce303_total_power_h_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802cd20:	79fb      	ldrb	r3, [r7, #7]
 802cd22:	021b      	lsls	r3, r3, #8
 802cd24:	b21a      	sxth	r2, r3
 802cd26:	79bb      	ldrb	r3, [r7, #6]
 802cd28:	b21b      	sxth	r3, r3
 802cd2a:	4313      	orrs	r3, r2
 802cd2c:	b21b      	sxth	r3, r3
 802cd2e:	b29a      	uxth	r2, r3
 802cd30:	4b2d      	ldr	r3, [pc, #180]	; (802cde8 <read_status_registers+0xc24>)
 802cd32:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82

	fm25v02_read(2*CE_303_TOTAL_POWER_L_REG, &status_reg_temp_h);
 802cd36:	1dfb      	adds	r3, r7, #7
 802cd38:	4619      	mov	r1, r3
 802cd3a:	f242 0084 	movw	r0, #8324	; 0x2084
 802cd3e:	f7fd fe6b 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*CE_303_TOTAL_POWER_L_REG+1, &status_reg_temp_l);
 802cd42:	1dbb      	adds	r3, r7, #6
 802cd44:	4619      	mov	r1, r3
 802cd46:	f242 0085 	movw	r0, #8325	; 0x2085
 802cd4a:	f7fd fe65 	bl	802aa18 <fm25v02_read>
	status_registers.ce303_total_power_l_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802cd4e:	79fb      	ldrb	r3, [r7, #7]
 802cd50:	021b      	lsls	r3, r3, #8
 802cd52:	b21a      	sxth	r2, r3
 802cd54:	79bb      	ldrb	r3, [r7, #6]
 802cd56:	b21b      	sxth	r3, r3
 802cd58:	4313      	orrs	r3, r2
 802cd5a:	b21b      	sxth	r3, r3
 802cd5c:	b29a      	uxth	r2, r3
 802cd5e:	4b22      	ldr	r3, [pc, #136]	; (802cde8 <read_status_registers+0xc24>)
 802cd60:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84

	fm25v02_read(2*CE_303_TOTAL_POWER_M_REG, &status_reg_temp_h);
 802cd64:	1dfb      	adds	r3, r7, #7
 802cd66:	4619      	mov	r1, r3
 802cd68:	f242 0086 	movw	r0, #8326	; 0x2086
 802cd6c:	f7fd fe54 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*CE_303_TOTAL_POWER_M_REG+1, &status_reg_temp_l);
 802cd70:	1dbb      	adds	r3, r7, #6
 802cd72:	4619      	mov	r1, r3
 802cd74:	f242 0087 	movw	r0, #8327	; 0x2087
 802cd78:	f7fd fe4e 	bl	802aa18 <fm25v02_read>
	status_registers.ce303_total_power_m_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802cd7c:	79fb      	ldrb	r3, [r7, #7]
 802cd7e:	021b      	lsls	r3, r3, #8
 802cd80:	b21a      	sxth	r2, r3
 802cd82:	79bb      	ldrb	r3, [r7, #6]
 802cd84:	b21b      	sxth	r3, r3
 802cd86:	4313      	orrs	r3, r2
 802cd88:	b21b      	sxth	r3, r3
 802cd8a:	b29a      	uxth	r2, r3
 802cd8c:	4b16      	ldr	r3, [pc, #88]	; (802cde8 <read_status_registers+0xc24>)
 802cd8e:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86

	fm25v02_read(2*CE_303_TARIF1_POWER_H_REG, &status_reg_temp_h);
 802cd92:	1dfb      	adds	r3, r7, #7
 802cd94:	4619      	mov	r1, r3
 802cd96:	f242 0088 	movw	r0, #8328	; 0x2088
 802cd9a:	f7fd fe3d 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*CE_303_TARIF1_POWER_H_REG+1, &status_reg_temp_l);
 802cd9e:	1dbb      	adds	r3, r7, #6
 802cda0:	4619      	mov	r1, r3
 802cda2:	f242 0089 	movw	r0, #8329	; 0x2089
 802cda6:	f7fd fe37 	bl	802aa18 <fm25v02_read>
	status_registers.ce303_tarif1_power_h_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802cdaa:	79fb      	ldrb	r3, [r7, #7]
 802cdac:	021b      	lsls	r3, r3, #8
 802cdae:	b21a      	sxth	r2, r3
 802cdb0:	79bb      	ldrb	r3, [r7, #6]
 802cdb2:	b21b      	sxth	r3, r3
 802cdb4:	4313      	orrs	r3, r2
 802cdb6:	b21b      	sxth	r3, r3
 802cdb8:	b29a      	uxth	r2, r3
 802cdba:	4b0b      	ldr	r3, [pc, #44]	; (802cde8 <read_status_registers+0xc24>)
 802cdbc:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88

	fm25v02_read(2*CE_303_TARIF1_POWER_L_REG, &status_reg_temp_h);
 802cdc0:	1dfb      	adds	r3, r7, #7
 802cdc2:	4619      	mov	r1, r3
 802cdc4:	f242 008a 	movw	r0, #8330	; 0x208a
 802cdc8:	f7fd fe26 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*CE_303_TARIF1_POWER_L_REG+1, &status_reg_temp_l);
 802cdcc:	1dbb      	adds	r3, r7, #6
 802cdce:	4619      	mov	r1, r3
 802cdd0:	f242 008b 	movw	r0, #8331	; 0x208b
 802cdd4:	f7fd fe20 	bl	802aa18 <fm25v02_read>
	status_registers.ce303_tarif1_power_l_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802cdd8:	79fb      	ldrb	r3, [r7, #7]
 802cdda:	021b      	lsls	r3, r3, #8
 802cddc:	b21a      	sxth	r2, r3
 802cdde:	79bb      	ldrb	r3, [r7, #6]
 802cde0:	b21b      	sxth	r3, r3
 802cde2:	4313      	orrs	r3, r2
 802cde4:	b21b      	sxth	r3, r3
 802cde6:	e001      	b.n	802cdec <read_status_registers+0xc28>
 802cde8:	2000af40 	.word	0x2000af40
 802cdec:	b29a      	uxth	r2, r3
 802cdee:	4bc3      	ldr	r3, [pc, #780]	; (802d0fc <read_status_registers+0xf38>)
 802cdf0:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a

	fm25v02_read(2*CE_303_TARIF1_POWER_MIL_REG, &status_reg_temp_h);
 802cdf4:	1dfb      	adds	r3, r7, #7
 802cdf6:	4619      	mov	r1, r3
 802cdf8:	f242 008c 	movw	r0, #8332	; 0x208c
 802cdfc:	f7fd fe0c 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*CE_303_TARIF1_POWER_MIL_REG+1, &status_reg_temp_l);
 802ce00:	1dbb      	adds	r3, r7, #6
 802ce02:	4619      	mov	r1, r3
 802ce04:	f242 008d 	movw	r0, #8333	; 0x208d
 802ce08:	f7fd fe06 	bl	802aa18 <fm25v02_read>
	status_registers.ce303_tarif1_power_mil_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802ce0c:	79fb      	ldrb	r3, [r7, #7]
 802ce0e:	021b      	lsls	r3, r3, #8
 802ce10:	b21a      	sxth	r2, r3
 802ce12:	79bb      	ldrb	r3, [r7, #6]
 802ce14:	b21b      	sxth	r3, r3
 802ce16:	4313      	orrs	r3, r2
 802ce18:	b21b      	sxth	r3, r3
 802ce1a:	b29a      	uxth	r2, r3
 802ce1c:	4bb7      	ldr	r3, [pc, #732]	; (802d0fc <read_status_registers+0xf38>)
 802ce1e:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c

	fm25v02_read(2*CE_303_TARIF2_POWER_H_REG, &status_reg_temp_h);
 802ce22:	1dfb      	adds	r3, r7, #7
 802ce24:	4619      	mov	r1, r3
 802ce26:	f242 008e 	movw	r0, #8334	; 0x208e
 802ce2a:	f7fd fdf5 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*CE_303_TARIF2_POWER_H_REG+1, &status_reg_temp_l);
 802ce2e:	1dbb      	adds	r3, r7, #6
 802ce30:	4619      	mov	r1, r3
 802ce32:	f242 008f 	movw	r0, #8335	; 0x208f
 802ce36:	f7fd fdef 	bl	802aa18 <fm25v02_read>
	status_registers.ce303_tarif2_power_h_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802ce3a:	79fb      	ldrb	r3, [r7, #7]
 802ce3c:	021b      	lsls	r3, r3, #8
 802ce3e:	b21a      	sxth	r2, r3
 802ce40:	79bb      	ldrb	r3, [r7, #6]
 802ce42:	b21b      	sxth	r3, r3
 802ce44:	4313      	orrs	r3, r2
 802ce46:	b21b      	sxth	r3, r3
 802ce48:	b29a      	uxth	r2, r3
 802ce4a:	4bac      	ldr	r3, [pc, #688]	; (802d0fc <read_status_registers+0xf38>)
 802ce4c:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e

	fm25v02_read(2*CE_303_TARIF2_POWER_L_REG, &status_reg_temp_h);
 802ce50:	1dfb      	adds	r3, r7, #7
 802ce52:	4619      	mov	r1, r3
 802ce54:	f242 0090 	movw	r0, #8336	; 0x2090
 802ce58:	f7fd fdde 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*CE_303_TARIF2_POWER_L_REG+1, &status_reg_temp_l);
 802ce5c:	1dbb      	adds	r3, r7, #6
 802ce5e:	4619      	mov	r1, r3
 802ce60:	f242 0091 	movw	r0, #8337	; 0x2091
 802ce64:	f7fd fdd8 	bl	802aa18 <fm25v02_read>
	status_registers.ce303_tarif2_power_l_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802ce68:	79fb      	ldrb	r3, [r7, #7]
 802ce6a:	021b      	lsls	r3, r3, #8
 802ce6c:	b21a      	sxth	r2, r3
 802ce6e:	79bb      	ldrb	r3, [r7, #6]
 802ce70:	b21b      	sxth	r3, r3
 802ce72:	4313      	orrs	r3, r2
 802ce74:	b21b      	sxth	r3, r3
 802ce76:	b29a      	uxth	r2, r3
 802ce78:	4ba0      	ldr	r3, [pc, #640]	; (802d0fc <read_status_registers+0xf38>)
 802ce7a:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90

	fm25v02_read(2*CE_303_TARIF2_POWER_MIL_REG, &status_reg_temp_h);
 802ce7e:	1dfb      	adds	r3, r7, #7
 802ce80:	4619      	mov	r1, r3
 802ce82:	f242 0092 	movw	r0, #8338	; 0x2092
 802ce86:	f7fd fdc7 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*CE_303_TARIF2_POWER_MIL_REG+1, &status_reg_temp_l);
 802ce8a:	1dbb      	adds	r3, r7, #6
 802ce8c:	4619      	mov	r1, r3
 802ce8e:	f242 0093 	movw	r0, #8339	; 0x2093
 802ce92:	f7fd fdc1 	bl	802aa18 <fm25v02_read>
	status_registers.ce303_tarif2_power_mil_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802ce96:	79fb      	ldrb	r3, [r7, #7]
 802ce98:	021b      	lsls	r3, r3, #8
 802ce9a:	b21a      	sxth	r2, r3
 802ce9c:	79bb      	ldrb	r3, [r7, #6]
 802ce9e:	b21b      	sxth	r3, r3
 802cea0:	4313      	orrs	r3, r2
 802cea2:	b21b      	sxth	r3, r3
 802cea4:	b29a      	uxth	r2, r3
 802cea6:	4b95      	ldr	r3, [pc, #596]	; (802d0fc <read_status_registers+0xf38>)
 802cea8:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92

	fm25v02_read(2*CE_303_TARIF3_POWER_H_REG, &status_reg_temp_h);
 802ceac:	1dfb      	adds	r3, r7, #7
 802ceae:	4619      	mov	r1, r3
 802ceb0:	f242 0094 	movw	r0, #8340	; 0x2094
 802ceb4:	f7fd fdb0 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*CE_303_TARIF3_POWER_H_REG+1, &status_reg_temp_l);
 802ceb8:	1dbb      	adds	r3, r7, #6
 802ceba:	4619      	mov	r1, r3
 802cebc:	f242 0095 	movw	r0, #8341	; 0x2095
 802cec0:	f7fd fdaa 	bl	802aa18 <fm25v02_read>
	status_registers.ce303_tarif3_power_h_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802cec4:	79fb      	ldrb	r3, [r7, #7]
 802cec6:	021b      	lsls	r3, r3, #8
 802cec8:	b21a      	sxth	r2, r3
 802ceca:	79bb      	ldrb	r3, [r7, #6]
 802cecc:	b21b      	sxth	r3, r3
 802cece:	4313      	orrs	r3, r2
 802ced0:	b21b      	sxth	r3, r3
 802ced2:	b29a      	uxth	r2, r3
 802ced4:	4b89      	ldr	r3, [pc, #548]	; (802d0fc <read_status_registers+0xf38>)
 802ced6:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94

	fm25v02_read(2*CE_303_TARIF3_POWER_L_REG, &status_reg_temp_h);
 802ceda:	1dfb      	adds	r3, r7, #7
 802cedc:	4619      	mov	r1, r3
 802cede:	f242 0096 	movw	r0, #8342	; 0x2096
 802cee2:	f7fd fd99 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*CE_303_TARIF3_POWER_L_REG+1, &status_reg_temp_l);
 802cee6:	1dbb      	adds	r3, r7, #6
 802cee8:	4619      	mov	r1, r3
 802ceea:	f242 0097 	movw	r0, #8343	; 0x2097
 802ceee:	f7fd fd93 	bl	802aa18 <fm25v02_read>
	status_registers.ce303_tarif3_power_l_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802cef2:	79fb      	ldrb	r3, [r7, #7]
 802cef4:	021b      	lsls	r3, r3, #8
 802cef6:	b21a      	sxth	r2, r3
 802cef8:	79bb      	ldrb	r3, [r7, #6]
 802cefa:	b21b      	sxth	r3, r3
 802cefc:	4313      	orrs	r3, r2
 802cefe:	b21b      	sxth	r3, r3
 802cf00:	b29a      	uxth	r2, r3
 802cf02:	4b7e      	ldr	r3, [pc, #504]	; (802d0fc <read_status_registers+0xf38>)
 802cf04:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96

	fm25v02_read(2*CE_303_TARIF3_POWER_MIL_REG, &status_reg_temp_h);
 802cf08:	1dfb      	adds	r3, r7, #7
 802cf0a:	4619      	mov	r1, r3
 802cf0c:	f242 0098 	movw	r0, #8344	; 0x2098
 802cf10:	f7fd fd82 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*CE_303_TARIF3_POWER_MIL_REG+1, &status_reg_temp_l);
 802cf14:	1dbb      	adds	r3, r7, #6
 802cf16:	4619      	mov	r1, r3
 802cf18:	f242 0099 	movw	r0, #8345	; 0x2099
 802cf1c:	f7fd fd7c 	bl	802aa18 <fm25v02_read>
	status_registers.ce303_tarif3_power_mil_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802cf20:	79fb      	ldrb	r3, [r7, #7]
 802cf22:	021b      	lsls	r3, r3, #8
 802cf24:	b21a      	sxth	r2, r3
 802cf26:	79bb      	ldrb	r3, [r7, #6]
 802cf28:	b21b      	sxth	r3, r3
 802cf2a:	4313      	orrs	r3, r2
 802cf2c:	b21b      	sxth	r3, r3
 802cf2e:	b29a      	uxth	r2, r3
 802cf30:	4b72      	ldr	r3, [pc, #456]	; (802d0fc <read_status_registers+0xf38>)
 802cf32:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98

	fm25v02_read(2*CE_303_TARIF4_POWER_H_REG, &status_reg_temp_h);
 802cf36:	1dfb      	adds	r3, r7, #7
 802cf38:	4619      	mov	r1, r3
 802cf3a:	f242 009a 	movw	r0, #8346	; 0x209a
 802cf3e:	f7fd fd6b 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*CE_303_TARIF4_POWER_H_REG+1, &status_reg_temp_l);
 802cf42:	1dbb      	adds	r3, r7, #6
 802cf44:	4619      	mov	r1, r3
 802cf46:	f242 009b 	movw	r0, #8347	; 0x209b
 802cf4a:	f7fd fd65 	bl	802aa18 <fm25v02_read>
	status_registers.ce303_tarif4_power_h_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802cf4e:	79fb      	ldrb	r3, [r7, #7]
 802cf50:	021b      	lsls	r3, r3, #8
 802cf52:	b21a      	sxth	r2, r3
 802cf54:	79bb      	ldrb	r3, [r7, #6]
 802cf56:	b21b      	sxth	r3, r3
 802cf58:	4313      	orrs	r3, r2
 802cf5a:	b21b      	sxth	r3, r3
 802cf5c:	b29a      	uxth	r2, r3
 802cf5e:	4b67      	ldr	r3, [pc, #412]	; (802d0fc <read_status_registers+0xf38>)
 802cf60:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a

	fm25v02_read(2*CE_303_TARIF4_POWER_L_REG, &status_reg_temp_h);
 802cf64:	1dfb      	adds	r3, r7, #7
 802cf66:	4619      	mov	r1, r3
 802cf68:	f242 009c 	movw	r0, #8348	; 0x209c
 802cf6c:	f7fd fd54 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*CE_303_TARIF4_POWER_L_REG+1, &status_reg_temp_l);
 802cf70:	1dbb      	adds	r3, r7, #6
 802cf72:	4619      	mov	r1, r3
 802cf74:	f242 009d 	movw	r0, #8349	; 0x209d
 802cf78:	f7fd fd4e 	bl	802aa18 <fm25v02_read>
	status_registers.ce303_tarif4_power_l_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802cf7c:	79fb      	ldrb	r3, [r7, #7]
 802cf7e:	021b      	lsls	r3, r3, #8
 802cf80:	b21a      	sxth	r2, r3
 802cf82:	79bb      	ldrb	r3, [r7, #6]
 802cf84:	b21b      	sxth	r3, r3
 802cf86:	4313      	orrs	r3, r2
 802cf88:	b21b      	sxth	r3, r3
 802cf8a:	b29a      	uxth	r2, r3
 802cf8c:	4b5b      	ldr	r3, [pc, #364]	; (802d0fc <read_status_registers+0xf38>)
 802cf8e:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

	fm25v02_read(2*CE_303_TARIF4_POWER_MIL_REG, &status_reg_temp_h);
 802cf92:	1dfb      	adds	r3, r7, #7
 802cf94:	4619      	mov	r1, r3
 802cf96:	f242 009e 	movw	r0, #8350	; 0x209e
 802cf9a:	f7fd fd3d 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*CE_303_TARIF4_POWER_MIL_REG+1, &status_reg_temp_l);
 802cf9e:	1dbb      	adds	r3, r7, #6
 802cfa0:	4619      	mov	r1, r3
 802cfa2:	f242 009f 	movw	r0, #8351	; 0x209f
 802cfa6:	f7fd fd37 	bl	802aa18 <fm25v02_read>
	status_registers.ce303_tarif4_power_mil_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802cfaa:	79fb      	ldrb	r3, [r7, #7]
 802cfac:	021b      	lsls	r3, r3, #8
 802cfae:	b21a      	sxth	r2, r3
 802cfb0:	79bb      	ldrb	r3, [r7, #6]
 802cfb2:	b21b      	sxth	r3, r3
 802cfb4:	4313      	orrs	r3, r2
 802cfb6:	b21b      	sxth	r3, r3
 802cfb8:	b29a      	uxth	r2, r3
 802cfba:	4b50      	ldr	r3, [pc, #320]	; (802d0fc <read_status_registers+0xf38>)
 802cfbc:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e

	fm25v02_read(2*CE_303_TARIF5_POWER_H_REG, &status_reg_temp_h);
 802cfc0:	1dfb      	adds	r3, r7, #7
 802cfc2:	4619      	mov	r1, r3
 802cfc4:	f242 00a0 	movw	r0, #8352	; 0x20a0
 802cfc8:	f7fd fd26 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*CE_303_TARIF5_POWER_H_REG+1, &status_reg_temp_l);
 802cfcc:	1dbb      	adds	r3, r7, #6
 802cfce:	4619      	mov	r1, r3
 802cfd0:	f242 00a1 	movw	r0, #8353	; 0x20a1
 802cfd4:	f7fd fd20 	bl	802aa18 <fm25v02_read>
	status_registers.ce303_tarif5_power_h_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802cfd8:	79fb      	ldrb	r3, [r7, #7]
 802cfda:	021b      	lsls	r3, r3, #8
 802cfdc:	b21a      	sxth	r2, r3
 802cfde:	79bb      	ldrb	r3, [r7, #6]
 802cfe0:	b21b      	sxth	r3, r3
 802cfe2:	4313      	orrs	r3, r2
 802cfe4:	b21b      	sxth	r3, r3
 802cfe6:	b29a      	uxth	r2, r3
 802cfe8:	4b44      	ldr	r3, [pc, #272]	; (802d0fc <read_status_registers+0xf38>)
 802cfea:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0

	fm25v02_read(2*CE_303_TARIF5_POWER_L_REG, &status_reg_temp_h);
 802cfee:	1dfb      	adds	r3, r7, #7
 802cff0:	4619      	mov	r1, r3
 802cff2:	f242 00a2 	movw	r0, #8354	; 0x20a2
 802cff6:	f7fd fd0f 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*CE_303_TARIF5_POWER_L_REG+1, &status_reg_temp_l);
 802cffa:	1dbb      	adds	r3, r7, #6
 802cffc:	4619      	mov	r1, r3
 802cffe:	f242 00a3 	movw	r0, #8355	; 0x20a3
 802d002:	f7fd fd09 	bl	802aa18 <fm25v02_read>
	status_registers.ce303_tarif5_power_l_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802d006:	79fb      	ldrb	r3, [r7, #7]
 802d008:	021b      	lsls	r3, r3, #8
 802d00a:	b21a      	sxth	r2, r3
 802d00c:	79bb      	ldrb	r3, [r7, #6]
 802d00e:	b21b      	sxth	r3, r3
 802d010:	4313      	orrs	r3, r2
 802d012:	b21b      	sxth	r3, r3
 802d014:	b29a      	uxth	r2, r3
 802d016:	4b39      	ldr	r3, [pc, #228]	; (802d0fc <read_status_registers+0xf38>)
 802d018:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2

	fm25v02_read(2*CE_303_TARIF5_POWER_MIL_REG, &status_reg_temp_h);
 802d01c:	1dfb      	adds	r3, r7, #7
 802d01e:	4619      	mov	r1, r3
 802d020:	f242 00a4 	movw	r0, #8356	; 0x20a4
 802d024:	f7fd fcf8 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*CE_303_TARIF5_POWER_MIL_REG+1, &status_reg_temp_l);
 802d028:	1dbb      	adds	r3, r7, #6
 802d02a:	4619      	mov	r1, r3
 802d02c:	f242 00a5 	movw	r0, #8357	; 0x20a5
 802d030:	f7fd fcf2 	bl	802aa18 <fm25v02_read>
	status_registers.ce303_tarif5_power_mil_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802d034:	79fb      	ldrb	r3, [r7, #7]
 802d036:	021b      	lsls	r3, r3, #8
 802d038:	b21a      	sxth	r2, r3
 802d03a:	79bb      	ldrb	r3, [r7, #6]
 802d03c:	b21b      	sxth	r3, r3
 802d03e:	4313      	orrs	r3, r2
 802d040:	b21b      	sxth	r3, r3
 802d042:	b29a      	uxth	r2, r3
 802d044:	4b2d      	ldr	r3, [pc, #180]	; (802d0fc <read_status_registers+0xf38>)
 802d046:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4

	fm25v02_read(2*SIGNAL_LEVEL_REG, &status_reg_temp_h);
 802d04a:	1dfb      	adds	r3, r7, #7
 802d04c:	4619      	mov	r1, r3
 802d04e:	f242 00a6 	movw	r0, #8358	; 0x20a6
 802d052:	f7fd fce1 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*SIGNAL_LEVEL_REG+1, &status_reg_temp_l);
 802d056:	1dbb      	adds	r3, r7, #6
 802d058:	4619      	mov	r1, r3
 802d05a:	f242 00a7 	movw	r0, #8359	; 0x20a7
 802d05e:	f7fd fcdb 	bl	802aa18 <fm25v02_read>
	status_registers.signal_level_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802d062:	79fb      	ldrb	r3, [r7, #7]
 802d064:	021b      	lsls	r3, r3, #8
 802d066:	b21a      	sxth	r2, r3
 802d068:	79bb      	ldrb	r3, [r7, #6]
 802d06a:	b21b      	sxth	r3, r3
 802d06c:	4313      	orrs	r3, r2
 802d06e:	b21b      	sxth	r3, r3
 802d070:	b29a      	uxth	r2, r3
 802d072:	4b22      	ldr	r3, [pc, #136]	; (802d0fc <read_status_registers+0xf38>)
 802d074:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6

	fm25v02_read(2*ADVANCED_LOOP_REG, &status_reg_temp_h);
 802d078:	1dfb      	adds	r3, r7, #7
 802d07a:	4619      	mov	r1, r3
 802d07c:	f242 00aa 	movw	r0, #8362	; 0x20aa
 802d080:	f7fd fcca 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*ADVANCED_LOOP_REG+1, &status_reg_temp_l);
 802d084:	1dbb      	adds	r3, r7, #6
 802d086:	4619      	mov	r1, r3
 802d088:	f242 00ab 	movw	r0, #8363	; 0x20ab
 802d08c:	f7fd fcc4 	bl	802aa18 <fm25v02_read>
	status_registers.advanced_loop_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802d090:	79fb      	ldrb	r3, [r7, #7]
 802d092:	021b      	lsls	r3, r3, #8
 802d094:	b21a      	sxth	r2, r3
 802d096:	79bb      	ldrb	r3, [r7, #6]
 802d098:	b21b      	sxth	r3, r3
 802d09a:	4313      	orrs	r3, r2
 802d09c:	b21b      	sxth	r3, r3
 802d09e:	b29a      	uxth	r2, r3
 802d0a0:	4b16      	ldr	r3, [pc, #88]	; (802d0fc <read_status_registers+0xf38>)
 802d0a2:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8

	fm25v02_read(2*ADDITIONAL_INPUT_REG1, &status_reg_temp_h);
 802d0a6:	1dfb      	adds	r3, r7, #7
 802d0a8:	4619      	mov	r1, r3
 802d0aa:	f242 00ac 	movw	r0, #8364	; 0x20ac
 802d0ae:	f7fd fcb3 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*ADDITIONAL_INPUT_REG1+1, &status_reg_temp_l);
 802d0b2:	1dbb      	adds	r3, r7, #6
 802d0b4:	4619      	mov	r1, r3
 802d0b6:	f242 00ad 	movw	r0, #8365	; 0x20ad
 802d0ba:	f7fd fcad 	bl	802aa18 <fm25v02_read>
	status_registers.additional_input_reg1 = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802d0be:	79fb      	ldrb	r3, [r7, #7]
 802d0c0:	021b      	lsls	r3, r3, #8
 802d0c2:	b21a      	sxth	r2, r3
 802d0c4:	79bb      	ldrb	r3, [r7, #6]
 802d0c6:	b21b      	sxth	r3, r3
 802d0c8:	4313      	orrs	r3, r2
 802d0ca:	b21b      	sxth	r3, r3
 802d0cc:	b29a      	uxth	r2, r3
 802d0ce:	4b0b      	ldr	r3, [pc, #44]	; (802d0fc <read_status_registers+0xf38>)
 802d0d0:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa

	fm25v02_read(2*ADDITIONAL_INPUT_REG2, &status_reg_temp_h);
 802d0d4:	1dfb      	adds	r3, r7, #7
 802d0d6:	4619      	mov	r1, r3
 802d0d8:	f242 00ae 	movw	r0, #8366	; 0x20ae
 802d0dc:	f7fd fc9c 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*ADDITIONAL_INPUT_REG2+1, &status_reg_temp_l);
 802d0e0:	1dbb      	adds	r3, r7, #6
 802d0e2:	4619      	mov	r1, r3
 802d0e4:	f242 00af 	movw	r0, #8367	; 0x20af
 802d0e8:	f7fd fc96 	bl	802aa18 <fm25v02_read>
	status_registers.additional_input_reg2 = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802d0ec:	79fb      	ldrb	r3, [r7, #7]
 802d0ee:	021b      	lsls	r3, r3, #8
 802d0f0:	b21a      	sxth	r2, r3
 802d0f2:	79bb      	ldrb	r3, [r7, #6]
 802d0f4:	b21b      	sxth	r3, r3
 802d0f6:	4313      	orrs	r3, r2
 802d0f8:	b21b      	sxth	r3, r3
 802d0fa:	e001      	b.n	802d100 <read_status_registers+0xf3c>
 802d0fc:	2000af40 	.word	0x2000af40
 802d100:	b29a      	uxth	r2, r3
 802d102:	4b62      	ldr	r3, [pc, #392]	; (802d28c <read_status_registers+0x10c8>)
 802d104:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac

	fm25v02_read(2*ICCID_NUMBER_REG1, &status_reg_temp_h);
 802d108:	1dfb      	adds	r3, r7, #7
 802d10a:	4619      	mov	r1, r3
 802d10c:	f242 00b0 	movw	r0, #8368	; 0x20b0
 802d110:	f7fd fc82 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*ICCID_NUMBER_REG1+1, &status_reg_temp_l);
 802d114:	1dbb      	adds	r3, r7, #6
 802d116:	4619      	mov	r1, r3
 802d118:	f242 00b1 	movw	r0, #8369	; 0x20b1
 802d11c:	f7fd fc7c 	bl	802aa18 <fm25v02_read>
	status_registers.iccid_number_reg1 = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802d120:	79fb      	ldrb	r3, [r7, #7]
 802d122:	021b      	lsls	r3, r3, #8
 802d124:	b21a      	sxth	r2, r3
 802d126:	79bb      	ldrb	r3, [r7, #6]
 802d128:	b21b      	sxth	r3, r3
 802d12a:	4313      	orrs	r3, r2
 802d12c:	b21b      	sxth	r3, r3
 802d12e:	b29a      	uxth	r2, r3
 802d130:	4b56      	ldr	r3, [pc, #344]	; (802d28c <read_status_registers+0x10c8>)
 802d132:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae

	fm25v02_read(2*ICCID_NUMBER_REG2, &status_reg_temp_h);
 802d136:	1dfb      	adds	r3, r7, #7
 802d138:	4619      	mov	r1, r3
 802d13a:	f242 00b2 	movw	r0, #8370	; 0x20b2
 802d13e:	f7fd fc6b 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*ICCID_NUMBER_REG2+1, &status_reg_temp_l);
 802d142:	1dbb      	adds	r3, r7, #6
 802d144:	4619      	mov	r1, r3
 802d146:	f242 00b3 	movw	r0, #8371	; 0x20b3
 802d14a:	f7fd fc65 	bl	802aa18 <fm25v02_read>
	status_registers.iccid_number_reg2 = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802d14e:	79fb      	ldrb	r3, [r7, #7]
 802d150:	021b      	lsls	r3, r3, #8
 802d152:	b21a      	sxth	r2, r3
 802d154:	79bb      	ldrb	r3, [r7, #6]
 802d156:	b21b      	sxth	r3, r3
 802d158:	4313      	orrs	r3, r2
 802d15a:	b21b      	sxth	r3, r3
 802d15c:	b29a      	uxth	r2, r3
 802d15e:	4b4b      	ldr	r3, [pc, #300]	; (802d28c <read_status_registers+0x10c8>)
 802d160:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0

	fm25v02_read(2*ICCID_NUMBER_REG3, &status_reg_temp_h);
 802d164:	1dfb      	adds	r3, r7, #7
 802d166:	4619      	mov	r1, r3
 802d168:	f242 00b4 	movw	r0, #8372	; 0x20b4
 802d16c:	f7fd fc54 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*ICCID_NUMBER_REG3+1, &status_reg_temp_l);
 802d170:	1dbb      	adds	r3, r7, #6
 802d172:	4619      	mov	r1, r3
 802d174:	f242 00b5 	movw	r0, #8373	; 0x20b5
 802d178:	f7fd fc4e 	bl	802aa18 <fm25v02_read>
	status_registers.iccid_number_reg3 = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802d17c:	79fb      	ldrb	r3, [r7, #7]
 802d17e:	021b      	lsls	r3, r3, #8
 802d180:	b21a      	sxth	r2, r3
 802d182:	79bb      	ldrb	r3, [r7, #6]
 802d184:	b21b      	sxth	r3, r3
 802d186:	4313      	orrs	r3, r2
 802d188:	b21b      	sxth	r3, r3
 802d18a:	b29a      	uxth	r2, r3
 802d18c:	4b3f      	ldr	r3, [pc, #252]	; (802d28c <read_status_registers+0x10c8>)
 802d18e:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2

	fm25v02_read(2*ICCID_NUMBER_REG4, &status_reg_temp_h);
 802d192:	1dfb      	adds	r3, r7, #7
 802d194:	4619      	mov	r1, r3
 802d196:	f242 00b6 	movw	r0, #8374	; 0x20b6
 802d19a:	f7fd fc3d 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*ICCID_NUMBER_REG4+1, &status_reg_temp_l);
 802d19e:	1dbb      	adds	r3, r7, #6
 802d1a0:	4619      	mov	r1, r3
 802d1a2:	f242 00b7 	movw	r0, #8375	; 0x20b7
 802d1a6:	f7fd fc37 	bl	802aa18 <fm25v02_read>
	status_registers.iccid_number_reg4 = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802d1aa:	79fb      	ldrb	r3, [r7, #7]
 802d1ac:	021b      	lsls	r3, r3, #8
 802d1ae:	b21a      	sxth	r2, r3
 802d1b0:	79bb      	ldrb	r3, [r7, #6]
 802d1b2:	b21b      	sxth	r3, r3
 802d1b4:	4313      	orrs	r3, r2
 802d1b6:	b21b      	sxth	r3, r3
 802d1b8:	b29a      	uxth	r2, r3
 802d1ba:	4b34      	ldr	r3, [pc, #208]	; (802d28c <read_status_registers+0x10c8>)
 802d1bc:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4

	fm25v02_read(2*ICCID_NUMBER_REG5, &status_reg_temp_h);
 802d1c0:	1dfb      	adds	r3, r7, #7
 802d1c2:	4619      	mov	r1, r3
 802d1c4:	f242 00b8 	movw	r0, #8376	; 0x20b8
 802d1c8:	f7fd fc26 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*ICCID_NUMBER_REG5+1, &status_reg_temp_l);
 802d1cc:	1dbb      	adds	r3, r7, #6
 802d1ce:	4619      	mov	r1, r3
 802d1d0:	f242 00b9 	movw	r0, #8377	; 0x20b9
 802d1d4:	f7fd fc20 	bl	802aa18 <fm25v02_read>
	status_registers.iccid_number_reg5 = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802d1d8:	79fb      	ldrb	r3, [r7, #7]
 802d1da:	021b      	lsls	r3, r3, #8
 802d1dc:	b21a      	sxth	r2, r3
 802d1de:	79bb      	ldrb	r3, [r7, #6]
 802d1e0:	b21b      	sxth	r3, r3
 802d1e2:	4313      	orrs	r3, r2
 802d1e4:	b21b      	sxth	r3, r3
 802d1e6:	b29a      	uxth	r2, r3
 802d1e8:	4b28      	ldr	r3, [pc, #160]	; (802d28c <read_status_registers+0x10c8>)
 802d1ea:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6

	fm25v02_read(2*ICCID_NUMBER_REG6, &status_reg_temp_h);
 802d1ee:	1dfb      	adds	r3, r7, #7
 802d1f0:	4619      	mov	r1, r3
 802d1f2:	f242 00ba 	movw	r0, #8378	; 0x20ba
 802d1f6:	f7fd fc0f 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*ICCID_NUMBER_REG6+1, &status_reg_temp_l);
 802d1fa:	1dbb      	adds	r3, r7, #6
 802d1fc:	4619      	mov	r1, r3
 802d1fe:	f242 00bb 	movw	r0, #8379	; 0x20bb
 802d202:	f7fd fc09 	bl	802aa18 <fm25v02_read>
	status_registers.iccid_number_reg6 = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802d206:	79fb      	ldrb	r3, [r7, #7]
 802d208:	021b      	lsls	r3, r3, #8
 802d20a:	b21a      	sxth	r2, r3
 802d20c:	79bb      	ldrb	r3, [r7, #6]
 802d20e:	b21b      	sxth	r3, r3
 802d210:	4313      	orrs	r3, r2
 802d212:	b21b      	sxth	r3, r3
 802d214:	b29a      	uxth	r2, r3
 802d216:	4b1d      	ldr	r3, [pc, #116]	; (802d28c <read_status_registers+0x10c8>)
 802d218:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8

	fm25v02_read(2*ICCID_NUMBER_REG7, &status_reg_temp_h);
 802d21c:	1dfb      	adds	r3, r7, #7
 802d21e:	4619      	mov	r1, r3
 802d220:	f242 00bc 	movw	r0, #8380	; 0x20bc
 802d224:	f7fd fbf8 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*ICCID_NUMBER_REG7+1, &status_reg_temp_l);
 802d228:	1dbb      	adds	r3, r7, #6
 802d22a:	4619      	mov	r1, r3
 802d22c:	f242 00bd 	movw	r0, #8381	; 0x20bd
 802d230:	f7fd fbf2 	bl	802aa18 <fm25v02_read>
	status_registers.iccid_number_reg7 = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802d234:	79fb      	ldrb	r3, [r7, #7]
 802d236:	021b      	lsls	r3, r3, #8
 802d238:	b21a      	sxth	r2, r3
 802d23a:	79bb      	ldrb	r3, [r7, #6]
 802d23c:	b21b      	sxth	r3, r3
 802d23e:	4313      	orrs	r3, r2
 802d240:	b21b      	sxth	r3, r3
 802d242:	b29a      	uxth	r2, r3
 802d244:	4b11      	ldr	r3, [pc, #68]	; (802d28c <read_status_registers+0x10c8>)
 802d246:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba

	fm25v02_read(2*ICCID_NUMBER_REG8, &status_reg_temp_h);
 802d24a:	1dfb      	adds	r3, r7, #7
 802d24c:	4619      	mov	r1, r3
 802d24e:	f242 00be 	movw	r0, #8382	; 0x20be
 802d252:	f7fd fbe1 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*ICCID_NUMBER_REG8+1, &status_reg_temp_l);
 802d256:	1dbb      	adds	r3, r7, #6
 802d258:	4619      	mov	r1, r3
 802d25a:	f242 00bf 	movw	r0, #8383	; 0x20bf
 802d25e:	f7fd fbdb 	bl	802aa18 <fm25v02_read>
	status_registers.iccid_number_reg8 = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802d262:	79fb      	ldrb	r3, [r7, #7]
 802d264:	021b      	lsls	r3, r3, #8
 802d266:	b21a      	sxth	r2, r3
 802d268:	79bb      	ldrb	r3, [r7, #6]
 802d26a:	b21b      	sxth	r3, r3
 802d26c:	4313      	orrs	r3, r2
 802d26e:	b21b      	sxth	r3, r3
 802d270:	b29a      	uxth	r2, r3
 802d272:	4b06      	ldr	r3, [pc, #24]	; (802d28c <read_status_registers+0x10c8>)
 802d274:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc

	osMutexRelease(Fm25v02MutexHandle);
 802d278:	4b05      	ldr	r3, [pc, #20]	; (802d290 <read_status_registers+0x10cc>)
 802d27a:	681b      	ldr	r3, [r3, #0]
 802d27c:	4618      	mov	r0, r3
 802d27e:	f7ec f861 	bl	8019344 <osMutexRelease>
}
 802d282:	bf00      	nop
 802d284:	3708      	adds	r7, #8
 802d286:	46bd      	mov	sp, r7
 802d288:	bd80      	pop	{r7, pc}
 802d28a:	bf00      	nop
 802d28c:	2000af40 	.word	0x2000af40
 802d290:	20009bb8 	.word	0x20009bb8

0802d294 <read_control_registers>:
//----------------------------------------------------------------

//----Функция чтения из памяти управляющих регистров--------------
void read_control_registers(void)
{
 802d294:	b580      	push	{r7, lr}
 802d296:	b082      	sub	sp, #8
 802d298:	af00      	add	r7, sp, #0
	uint8_t status_reg_temp_h;
	uint8_t status_reg_temp_l;

	osMutexWait(Fm25v02MutexHandle, osWaitForever);
 802d29a:	4bbc      	ldr	r3, [pc, #752]	; (802d58c <read_control_registers+0x2f8>)
 802d29c:	681b      	ldr	r3, [r3, #0]
 802d29e:	f04f 31ff 	mov.w	r1, #4294967295
 802d2a2:	4618      	mov	r0, r3
 802d2a4:	f7ec f800 	bl	80192a8 <osMutexWait>

	fm25v02_read(2*SECURITY_CONTROL_REG, &status_reg_temp_h);
 802d2a8:	1dfb      	adds	r3, r7, #7
 802d2aa:	4619      	mov	r1, r3
 802d2ac:	f242 1020 	movw	r0, #8480	; 0x2120
 802d2b0:	f7fd fbb2 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*SECURITY_CONTROL_REG+1, &status_reg_temp_l);
 802d2b4:	1dbb      	adds	r3, r7, #6
 802d2b6:	4619      	mov	r1, r3
 802d2b8:	f242 1021 	movw	r0, #8481	; 0x2121
 802d2bc:	f7fd fbac 	bl	802aa18 <fm25v02_read>
	control_registers.security_control_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 802d2c0:	79fb      	ldrb	r3, [r7, #7]
 802d2c2:	021b      	lsls	r3, r3, #8
 802d2c4:	b21a      	sxth	r2, r3
 802d2c6:	79bb      	ldrb	r3, [r7, #6]
 802d2c8:	b21b      	sxth	r3, r3
 802d2ca:	4313      	orrs	r3, r2
 802d2cc:	b21b      	sxth	r3, r3
 802d2ce:	b29a      	uxth	r2, r3
 802d2d0:	4baf      	ldr	r3, [pc, #700]	; (802d590 <read_control_registers+0x2fc>)
 802d2d2:	801a      	strh	r2, [r3, #0]

	fm25v02_read(2*CONTROL_LOOP_REG, &status_reg_temp_h);
 802d2d4:	1dfb      	adds	r3, r7, #7
 802d2d6:	4619      	mov	r1, r3
 802d2d8:	f242 1022 	movw	r0, #8482	; 0x2122
 802d2dc:	f7fd fb9c 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*CONTROL_LOOP_REG+1, &status_reg_temp_l);
 802d2e0:	1dbb      	adds	r3, r7, #6
 802d2e2:	4619      	mov	r1, r3
 802d2e4:	f242 1023 	movw	r0, #8483	; 0x2123
 802d2e8:	f7fd fb96 	bl	802aa18 <fm25v02_read>
	control_registers.control_loop_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802d2ec:	79fb      	ldrb	r3, [r7, #7]
 802d2ee:	021b      	lsls	r3, r3, #8
 802d2f0:	b21a      	sxth	r2, r3
 802d2f2:	79bb      	ldrb	r3, [r7, #6]
 802d2f4:	b21b      	sxth	r3, r3
 802d2f6:	4313      	orrs	r3, r2
 802d2f8:	b21b      	sxth	r3, r3
 802d2fa:	b29a      	uxth	r2, r3
 802d2fc:	4ba4      	ldr	r3, [pc, #656]	; (802d590 <read_control_registers+0x2fc>)
 802d2fe:	805a      	strh	r2, [r3, #2]

	fm25v02_read(2*FILTER_TIME_LOOP_REG, &status_reg_temp_h);
 802d300:	1dfb      	adds	r3, r7, #7
 802d302:	4619      	mov	r1, r3
 802d304:	f242 1024 	movw	r0, #8484	; 0x2124
 802d308:	f7fd fb86 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*FILTER_TIME_LOOP_REG+1, &status_reg_temp_l);
 802d30c:	1dbb      	adds	r3, r7, #6
 802d30e:	4619      	mov	r1, r3
 802d310:	f242 1025 	movw	r0, #8485	; 0x2125
 802d314:	f7fd fb80 	bl	802aa18 <fm25v02_read>
	control_registers.filter_time_loop_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802d318:	79fb      	ldrb	r3, [r7, #7]
 802d31a:	021b      	lsls	r3, r3, #8
 802d31c:	b21a      	sxth	r2, r3
 802d31e:	79bb      	ldrb	r3, [r7, #6]
 802d320:	b21b      	sxth	r3, r3
 802d322:	4313      	orrs	r3, r2
 802d324:	b21b      	sxth	r3, r3
 802d326:	b29a      	uxth	r2, r3
 802d328:	4b99      	ldr	r3, [pc, #612]	; (802d590 <read_control_registers+0x2fc>)
 802d32a:	809a      	strh	r2, [r3, #4]

	fm25v02_read(2*QUANTITY_FALSE_LOOP_REG, &status_reg_temp_h);
 802d32c:	1dfb      	adds	r3, r7, #7
 802d32e:	4619      	mov	r1, r3
 802d330:	f242 1026 	movw	r0, #8486	; 0x2126
 802d334:	f7fd fb70 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*QUANTITY_FALSE_LOOP_REG+1, &status_reg_temp_l);
 802d338:	1dbb      	adds	r3, r7, #6
 802d33a:	4619      	mov	r1, r3
 802d33c:	f242 1027 	movw	r0, #8487	; 0x2127
 802d340:	f7fd fb6a 	bl	802aa18 <fm25v02_read>
	control_registers.quantity_false_loop_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802d344:	79fb      	ldrb	r3, [r7, #7]
 802d346:	021b      	lsls	r3, r3, #8
 802d348:	b21a      	sxth	r2, r3
 802d34a:	79bb      	ldrb	r3, [r7, #6]
 802d34c:	b21b      	sxth	r3, r3
 802d34e:	4313      	orrs	r3, r2
 802d350:	b21b      	sxth	r3, r3
 802d352:	b29a      	uxth	r2, r3
 802d354:	4b8e      	ldr	r3, [pc, #568]	; (802d590 <read_control_registers+0x2fc>)
 802d356:	80da      	strh	r2, [r3, #6]

	fm25v02_read(2*TIME_FALSE_LOOP_REG, &status_reg_temp_h);
 802d358:	1dfb      	adds	r3, r7, #7
 802d35a:	4619      	mov	r1, r3
 802d35c:	f242 1028 	movw	r0, #8488	; 0x2128
 802d360:	f7fd fb5a 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*TIME_FALSE_LOOP_REG+1, &status_reg_temp_l);
 802d364:	1dbb      	adds	r3, r7, #6
 802d366:	4619      	mov	r1, r3
 802d368:	f242 1029 	movw	r0, #8489	; 0x2129
 802d36c:	f7fd fb54 	bl	802aa18 <fm25v02_read>
	control_registers.time_false_loop_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802d370:	79fb      	ldrb	r3, [r7, #7]
 802d372:	021b      	lsls	r3, r3, #8
 802d374:	b21a      	sxth	r2, r3
 802d376:	79bb      	ldrb	r3, [r7, #6]
 802d378:	b21b      	sxth	r3, r3
 802d37a:	4313      	orrs	r3, r2
 802d37c:	b21b      	sxth	r3, r3
 802d37e:	b29a      	uxth	r2, r3
 802d380:	4b83      	ldr	r3, [pc, #524]	; (802d590 <read_control_registers+0x2fc>)
 802d382:	811a      	strh	r2, [r3, #8]

	fm25v02_read(2*ALARM_LOOP_CLEAR_REG, &status_reg_temp_h);
 802d384:	1dfb      	adds	r3, r7, #7
 802d386:	4619      	mov	r1, r3
 802d388:	f242 102a 	movw	r0, #8490	; 0x212a
 802d38c:	f7fd fb44 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*ALARM_LOOP_CLEAR_REG+1, &status_reg_temp_l);
 802d390:	1dbb      	adds	r3, r7, #6
 802d392:	4619      	mov	r1, r3
 802d394:	f242 102b 	movw	r0, #8491	; 0x212b
 802d398:	f7fd fb3e 	bl	802aa18 <fm25v02_read>
	control_registers.alarm_loop_clear_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802d39c:	79fb      	ldrb	r3, [r7, #7]
 802d39e:	021b      	lsls	r3, r3, #8
 802d3a0:	b21a      	sxth	r2, r3
 802d3a2:	79bb      	ldrb	r3, [r7, #6]
 802d3a4:	b21b      	sxth	r3, r3
 802d3a6:	4313      	orrs	r3, r2
 802d3a8:	b21b      	sxth	r3, r3
 802d3aa:	b29a      	uxth	r2, r3
 802d3ac:	4b78      	ldr	r3, [pc, #480]	; (802d590 <read_control_registers+0x2fc>)
 802d3ae:	815a      	strh	r2, [r3, #10]

	fm25v02_read(2*FALSE_LOOP_CLEAR_REG, &status_reg_temp_h);
 802d3b0:	1dfb      	adds	r3, r7, #7
 802d3b2:	4619      	mov	r1, r3
 802d3b4:	f242 102c 	movw	r0, #8492	; 0x212c
 802d3b8:	f7fd fb2e 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*FALSE_LOOP_CLEAR_REG+1, &status_reg_temp_l);
 802d3bc:	1dbb      	adds	r3, r7, #6
 802d3be:	4619      	mov	r1, r3
 802d3c0:	f242 102d 	movw	r0, #8493	; 0x212d
 802d3c4:	f7fd fb28 	bl	802aa18 <fm25v02_read>
	control_registers.false_loop_clear_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802d3c8:	79fb      	ldrb	r3, [r7, #7]
 802d3ca:	021b      	lsls	r3, r3, #8
 802d3cc:	b21a      	sxth	r2, r3
 802d3ce:	79bb      	ldrb	r3, [r7, #6]
 802d3d0:	b21b      	sxth	r3, r3
 802d3d2:	4313      	orrs	r3, r2
 802d3d4:	b21b      	sxth	r3, r3
 802d3d6:	b29a      	uxth	r2, r3
 802d3d8:	4b6d      	ldr	r3, [pc, #436]	; (802d590 <read_control_registers+0x2fc>)
 802d3da:	819a      	strh	r2, [r3, #12]

	fm25v02_read(2*SECURITY_TIME_MAX_REG, &status_reg_temp_h);
 802d3dc:	1dfb      	adds	r3, r7, #7
 802d3de:	4619      	mov	r1, r3
 802d3e0:	f242 102e 	movw	r0, #8494	; 0x212e
 802d3e4:	f7fd fb18 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*SECURITY_TIME_MAX_REG+1, &status_reg_temp_l);
 802d3e8:	1dbb      	adds	r3, r7, #6
 802d3ea:	4619      	mov	r1, r3
 802d3ec:	f242 102f 	movw	r0, #8495	; 0x212f
 802d3f0:	f7fd fb12 	bl	802aa18 <fm25v02_read>
	control_registers.security_time_max_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802d3f4:	79fb      	ldrb	r3, [r7, #7]
 802d3f6:	021b      	lsls	r3, r3, #8
 802d3f8:	b21a      	sxth	r2, r3
 802d3fa:	79bb      	ldrb	r3, [r7, #6]
 802d3fc:	b21b      	sxth	r3, r3
 802d3fe:	4313      	orrs	r3, r2
 802d400:	b21b      	sxth	r3, r3
 802d402:	b29a      	uxth	r2, r3
 802d404:	4b62      	ldr	r3, [pc, #392]	; (802d590 <read_control_registers+0x2fc>)
 802d406:	81da      	strh	r2, [r3, #14]

	fm25v02_read(2*TIME_UPDATE_REG, &status_reg_temp_h);
 802d408:	1dfb      	adds	r3, r7, #7
 802d40a:	4619      	mov	r1, r3
 802d40c:	f242 1030 	movw	r0, #8496	; 0x2130
 802d410:	f7fd fb02 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*TIME_UPDATE_REG+1, &status_reg_temp_l);
 802d414:	1dbb      	adds	r3, r7, #6
 802d416:	4619      	mov	r1, r3
 802d418:	f242 1031 	movw	r0, #8497	; 0x2131
 802d41c:	f7fd fafc 	bl	802aa18 <fm25v02_read>
	control_registers.time_update_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802d420:	79fb      	ldrb	r3, [r7, #7]
 802d422:	021b      	lsls	r3, r3, #8
 802d424:	b21a      	sxth	r2, r3
 802d426:	79bb      	ldrb	r3, [r7, #6]
 802d428:	b21b      	sxth	r3, r3
 802d42a:	4313      	orrs	r3, r2
 802d42c:	b21b      	sxth	r3, r3
 802d42e:	b29a      	uxth	r2, r3
 802d430:	4b57      	ldr	r3, [pc, #348]	; (802d590 <read_control_registers+0x2fc>)
 802d432:	821a      	strh	r2, [r3, #16]

	fm25v02_read(2*TIME_YEAR_REG, &status_reg_temp_h);
 802d434:	1dfb      	adds	r3, r7, #7
 802d436:	4619      	mov	r1, r3
 802d438:	f242 1032 	movw	r0, #8498	; 0x2132
 802d43c:	f7fd faec 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*TIME_YEAR_REG+1, &status_reg_temp_l);
 802d440:	1dbb      	adds	r3, r7, #6
 802d442:	4619      	mov	r1, r3
 802d444:	f242 1033 	movw	r0, #8499	; 0x2133
 802d448:	f7fd fae6 	bl	802aa18 <fm25v02_read>
	control_registers.time_year_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802d44c:	79fb      	ldrb	r3, [r7, #7]
 802d44e:	021b      	lsls	r3, r3, #8
 802d450:	b21a      	sxth	r2, r3
 802d452:	79bb      	ldrb	r3, [r7, #6]
 802d454:	b21b      	sxth	r3, r3
 802d456:	4313      	orrs	r3, r2
 802d458:	b21b      	sxth	r3, r3
 802d45a:	b29a      	uxth	r2, r3
 802d45c:	4b4c      	ldr	r3, [pc, #304]	; (802d590 <read_control_registers+0x2fc>)
 802d45e:	825a      	strh	r2, [r3, #18]

	fm25v02_read(2*TIME_MONTH_REG, &status_reg_temp_h);
 802d460:	1dfb      	adds	r3, r7, #7
 802d462:	4619      	mov	r1, r3
 802d464:	f242 1034 	movw	r0, #8500	; 0x2134
 802d468:	f7fd fad6 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*TIME_MONTH_REG+1, &status_reg_temp_l);
 802d46c:	1dbb      	adds	r3, r7, #6
 802d46e:	4619      	mov	r1, r3
 802d470:	f242 1035 	movw	r0, #8501	; 0x2135
 802d474:	f7fd fad0 	bl	802aa18 <fm25v02_read>
	control_registers.time_month_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802d478:	79fb      	ldrb	r3, [r7, #7]
 802d47a:	021b      	lsls	r3, r3, #8
 802d47c:	b21a      	sxth	r2, r3
 802d47e:	79bb      	ldrb	r3, [r7, #6]
 802d480:	b21b      	sxth	r3, r3
 802d482:	4313      	orrs	r3, r2
 802d484:	b21b      	sxth	r3, r3
 802d486:	b29a      	uxth	r2, r3
 802d488:	4b41      	ldr	r3, [pc, #260]	; (802d590 <read_control_registers+0x2fc>)
 802d48a:	829a      	strh	r2, [r3, #20]

	fm25v02_read(2*TIME_DAY_REG, &status_reg_temp_h);
 802d48c:	1dfb      	adds	r3, r7, #7
 802d48e:	4619      	mov	r1, r3
 802d490:	f242 1036 	movw	r0, #8502	; 0x2136
 802d494:	f7fd fac0 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*TIME_DAY_REG+1, &status_reg_temp_l);
 802d498:	1dbb      	adds	r3, r7, #6
 802d49a:	4619      	mov	r1, r3
 802d49c:	f242 1037 	movw	r0, #8503	; 0x2137
 802d4a0:	f7fd faba 	bl	802aa18 <fm25v02_read>
	control_registers.time_day_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802d4a4:	79fb      	ldrb	r3, [r7, #7]
 802d4a6:	021b      	lsls	r3, r3, #8
 802d4a8:	b21a      	sxth	r2, r3
 802d4aa:	79bb      	ldrb	r3, [r7, #6]
 802d4ac:	b21b      	sxth	r3, r3
 802d4ae:	4313      	orrs	r3, r2
 802d4b0:	b21b      	sxth	r3, r3
 802d4b2:	b29a      	uxth	r2, r3
 802d4b4:	4b36      	ldr	r3, [pc, #216]	; (802d590 <read_control_registers+0x2fc>)
 802d4b6:	82da      	strh	r2, [r3, #22]

	fm25v02_read(2*TIME_HOUR_REG, &status_reg_temp_h);
 802d4b8:	1dfb      	adds	r3, r7, #7
 802d4ba:	4619      	mov	r1, r3
 802d4bc:	f242 1038 	movw	r0, #8504	; 0x2138
 802d4c0:	f7fd faaa 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*TIME_HOUR_REG+1, &status_reg_temp_l);
 802d4c4:	1dbb      	adds	r3, r7, #6
 802d4c6:	4619      	mov	r1, r3
 802d4c8:	f242 1039 	movw	r0, #8505	; 0x2139
 802d4cc:	f7fd faa4 	bl	802aa18 <fm25v02_read>
	control_registers.time_hour_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802d4d0:	79fb      	ldrb	r3, [r7, #7]
 802d4d2:	021b      	lsls	r3, r3, #8
 802d4d4:	b21a      	sxth	r2, r3
 802d4d6:	79bb      	ldrb	r3, [r7, #6]
 802d4d8:	b21b      	sxth	r3, r3
 802d4da:	4313      	orrs	r3, r2
 802d4dc:	b21b      	sxth	r3, r3
 802d4de:	b29a      	uxth	r2, r3
 802d4e0:	4b2b      	ldr	r3, [pc, #172]	; (802d590 <read_control_registers+0x2fc>)
 802d4e2:	831a      	strh	r2, [r3, #24]

	fm25v02_read(2*TIME_MINUTE_REG, &status_reg_temp_h);
 802d4e4:	1dfb      	adds	r3, r7, #7
 802d4e6:	4619      	mov	r1, r3
 802d4e8:	f242 103a 	movw	r0, #8506	; 0x213a
 802d4ec:	f7fd fa94 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*TIME_MINUTE_REG+1, &status_reg_temp_l);
 802d4f0:	1dbb      	adds	r3, r7, #6
 802d4f2:	4619      	mov	r1, r3
 802d4f4:	f242 103b 	movw	r0, #8507	; 0x213b
 802d4f8:	f7fd fa8e 	bl	802aa18 <fm25v02_read>
	control_registers.time_minute_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802d4fc:	79fb      	ldrb	r3, [r7, #7]
 802d4fe:	021b      	lsls	r3, r3, #8
 802d500:	b21a      	sxth	r2, r3
 802d502:	79bb      	ldrb	r3, [r7, #6]
 802d504:	b21b      	sxth	r3, r3
 802d506:	4313      	orrs	r3, r2
 802d508:	b21b      	sxth	r3, r3
 802d50a:	b29a      	uxth	r2, r3
 802d50c:	4b20      	ldr	r3, [pc, #128]	; (802d590 <read_control_registers+0x2fc>)
 802d50e:	835a      	strh	r2, [r3, #26]

	fm25v02_read(2*TIME_SECONDS_REG, &status_reg_temp_h);
 802d510:	1dfb      	adds	r3, r7, #7
 802d512:	4619      	mov	r1, r3
 802d514:	f242 103c 	movw	r0, #8508	; 0x213c
 802d518:	f7fd fa7e 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*TIME_SECONDS_REG+1, &status_reg_temp_l);
 802d51c:	1dbb      	adds	r3, r7, #6
 802d51e:	4619      	mov	r1, r3
 802d520:	f242 103d 	movw	r0, #8509	; 0x213d
 802d524:	f7fd fa78 	bl	802aa18 <fm25v02_read>
	control_registers.time_seconds_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802d528:	79fb      	ldrb	r3, [r7, #7]
 802d52a:	021b      	lsls	r3, r3, #8
 802d52c:	b21a      	sxth	r2, r3
 802d52e:	79bb      	ldrb	r3, [r7, #6]
 802d530:	b21b      	sxth	r3, r3
 802d532:	4313      	orrs	r3, r2
 802d534:	b21b      	sxth	r3, r3
 802d536:	b29a      	uxth	r2, r3
 802d538:	4b15      	ldr	r3, [pc, #84]	; (802d590 <read_control_registers+0x2fc>)
 802d53a:	839a      	strh	r2, [r3, #28]

	fm25v02_read(2*TIME_WEEKDAY_REG, &status_reg_temp_h);
 802d53c:	1dfb      	adds	r3, r7, #7
 802d53e:	4619      	mov	r1, r3
 802d540:	f242 103e 	movw	r0, #8510	; 0x213e
 802d544:	f7fd fa68 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*TIME_WEEKDAY_REG+1, &status_reg_temp_l);
 802d548:	1dbb      	adds	r3, r7, #6
 802d54a:	4619      	mov	r1, r3
 802d54c:	f242 103f 	movw	r0, #8511	; 0x213f
 802d550:	f7fd fa62 	bl	802aa18 <fm25v02_read>
	control_registers.time_weekday_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802d554:	79fb      	ldrb	r3, [r7, #7]
 802d556:	021b      	lsls	r3, r3, #8
 802d558:	b21a      	sxth	r2, r3
 802d55a:	79bb      	ldrb	r3, [r7, #6]
 802d55c:	b21b      	sxth	r3, r3
 802d55e:	4313      	orrs	r3, r2
 802d560:	b21b      	sxth	r3, r3
 802d562:	b29a      	uxth	r2, r3
 802d564:	4b0a      	ldr	r3, [pc, #40]	; (802d590 <read_control_registers+0x2fc>)
 802d566:	83da      	strh	r2, [r3, #30]

	fm25v02_read(2*MODBUS_IDLE_TIME_MAX_REG, &status_reg_temp_h);
 802d568:	1dfb      	adds	r3, r7, #7
 802d56a:	4619      	mov	r1, r3
 802d56c:	f44f 5005 	mov.w	r0, #8512	; 0x2140
 802d570:	f7fd fa52 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*MODBUS_IDLE_TIME_MAX_REG+1, &status_reg_temp_l);
 802d574:	1dbb      	adds	r3, r7, #6
 802d576:	4619      	mov	r1, r3
 802d578:	f242 1041 	movw	r0, #8513	; 0x2141
 802d57c:	f7fd fa4c 	bl	802aa18 <fm25v02_read>
	control_registers.modbus_idle_time_max_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802d580:	79fb      	ldrb	r3, [r7, #7]
 802d582:	021b      	lsls	r3, r3, #8
 802d584:	b21a      	sxth	r2, r3
 802d586:	79bb      	ldrb	r3, [r7, #6]
 802d588:	e004      	b.n	802d594 <read_control_registers+0x300>
 802d58a:	bf00      	nop
 802d58c:	20009bb8 	.word	0x20009bb8
 802d590:	2000b000 	.word	0x2000b000
 802d594:	b21b      	sxth	r3, r3
 802d596:	4313      	orrs	r3, r2
 802d598:	b21b      	sxth	r3, r3
 802d59a:	b29a      	uxth	r2, r3
 802d59c:	4bbb      	ldr	r3, [pc, #748]	; (802d88c <read_control_registers+0x5f8>)
 802d59e:	841a      	strh	r2, [r3, #32]

	fm25v02_read(2*TIME_CONNECTION_TEST_REG, &status_reg_temp_h);
 802d5a0:	1dfb      	adds	r3, r7, #7
 802d5a2:	4619      	mov	r1, r3
 802d5a4:	f242 1042 	movw	r0, #8514	; 0x2142
 802d5a8:	f7fd fa36 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*TIME_CONNECTION_TEST_REG+1, &status_reg_temp_l);
 802d5ac:	1dbb      	adds	r3, r7, #6
 802d5ae:	4619      	mov	r1, r3
 802d5b0:	f242 1043 	movw	r0, #8515	; 0x2143
 802d5b4:	f7fd fa30 	bl	802aa18 <fm25v02_read>
	control_registers.time_connection_test_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802d5b8:	79fb      	ldrb	r3, [r7, #7]
 802d5ba:	021b      	lsls	r3, r3, #8
 802d5bc:	b21a      	sxth	r2, r3
 802d5be:	79bb      	ldrb	r3, [r7, #6]
 802d5c0:	b21b      	sxth	r3, r3
 802d5c2:	4313      	orrs	r3, r2
 802d5c4:	b21b      	sxth	r3, r3
 802d5c6:	b29a      	uxth	r2, r3
 802d5c8:	4bb0      	ldr	r3, [pc, #704]	; (802d88c <read_control_registers+0x5f8>)
 802d5ca:	845a      	strh	r2, [r3, #34]	; 0x22

	fm25v02_read(2*EVENT_READ_REG, &status_reg_temp_h);
 802d5cc:	1dfb      	adds	r3, r7, #7
 802d5ce:	4619      	mov	r1, r3
 802d5d0:	f242 1044 	movw	r0, #8516	; 0x2144
 802d5d4:	f7fd fa20 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*EVENT_READ_REG+1, &status_reg_temp_l);
 802d5d8:	1dbb      	adds	r3, r7, #6
 802d5da:	4619      	mov	r1, r3
 802d5dc:	f242 1045 	movw	r0, #8517	; 0x2145
 802d5e0:	f7fd fa1a 	bl	802aa18 <fm25v02_read>
	control_registers.event_read_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802d5e4:	79fb      	ldrb	r3, [r7, #7]
 802d5e6:	021b      	lsls	r3, r3, #8
 802d5e8:	b21a      	sxth	r2, r3
 802d5ea:	79bb      	ldrb	r3, [r7, #6]
 802d5ec:	b21b      	sxth	r3, r3
 802d5ee:	4313      	orrs	r3, r2
 802d5f0:	b21b      	sxth	r3, r3
 802d5f2:	b29a      	uxth	r2, r3
 802d5f4:	4ba5      	ldr	r3, [pc, #660]	; (802d88c <read_control_registers+0x5f8>)
 802d5f6:	849a      	strh	r2, [r3, #36]	; 0x24

	fm25v02_read(2*EVENT_ADDRESS_HIGH_REG, &status_reg_temp_h);
 802d5f8:	1dfb      	adds	r3, r7, #7
 802d5fa:	4619      	mov	r1, r3
 802d5fc:	f242 1046 	movw	r0, #8518	; 0x2146
 802d600:	f7fd fa0a 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*EVENT_ADDRESS_HIGH_REG+1, &status_reg_temp_l);
 802d604:	1dbb      	adds	r3, r7, #6
 802d606:	4619      	mov	r1, r3
 802d608:	f242 1047 	movw	r0, #8519	; 0x2147
 802d60c:	f7fd fa04 	bl	802aa18 <fm25v02_read>
	control_registers.event_address_high_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802d610:	79fb      	ldrb	r3, [r7, #7]
 802d612:	021b      	lsls	r3, r3, #8
 802d614:	b21a      	sxth	r2, r3
 802d616:	79bb      	ldrb	r3, [r7, #6]
 802d618:	b21b      	sxth	r3, r3
 802d61a:	4313      	orrs	r3, r2
 802d61c:	b21b      	sxth	r3, r3
 802d61e:	b29a      	uxth	r2, r3
 802d620:	4b9a      	ldr	r3, [pc, #616]	; (802d88c <read_control_registers+0x5f8>)
 802d622:	84da      	strh	r2, [r3, #38]	; 0x26

	fm25v02_read(2*EVENT_ADDRESS_LOW_REG, &status_reg_temp_h);
 802d624:	1dfb      	adds	r3, r7, #7
 802d626:	4619      	mov	r1, r3
 802d628:	f242 1048 	movw	r0, #8520	; 0x2148
 802d62c:	f7fd f9f4 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*EVENT_ADDRESS_LOW_REG+1, &status_reg_temp_l);
 802d630:	1dbb      	adds	r3, r7, #6
 802d632:	4619      	mov	r1, r3
 802d634:	f242 1049 	movw	r0, #8521	; 0x2149
 802d638:	f7fd f9ee 	bl	802aa18 <fm25v02_read>
	control_registers.event_address_low_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802d63c:	79fb      	ldrb	r3, [r7, #7]
 802d63e:	021b      	lsls	r3, r3, #8
 802d640:	b21a      	sxth	r2, r3
 802d642:	79bb      	ldrb	r3, [r7, #6]
 802d644:	b21b      	sxth	r3, r3
 802d646:	4313      	orrs	r3, r2
 802d648:	b21b      	sxth	r3, r3
 802d64a:	b29a      	uxth	r2, r3
 802d64c:	4b8f      	ldr	r3, [pc, #572]	; (802d88c <read_control_registers+0x5f8>)
 802d64e:	851a      	strh	r2, [r3, #40]	; 0x28

	fm25v02_read(2*MODEM_RING_TRY_LOAD_REG, &status_reg_temp_h);
 802d650:	1dfb      	adds	r3, r7, #7
 802d652:	4619      	mov	r1, r3
 802d654:	f242 104a 	movw	r0, #8522	; 0x214a
 802d658:	f7fd f9de 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*MODEM_RING_TRY_LOAD_REG+1, &status_reg_temp_l);
 802d65c:	1dbb      	adds	r3, r7, #6
 802d65e:	4619      	mov	r1, r3
 802d660:	f242 104b 	movw	r0, #8523	; 0x214b
 802d664:	f7fd f9d8 	bl	802aa18 <fm25v02_read>
	control_registers.modem_ring_try_load_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802d668:	79fb      	ldrb	r3, [r7, #7]
 802d66a:	021b      	lsls	r3, r3, #8
 802d66c:	b21a      	sxth	r2, r3
 802d66e:	79bb      	ldrb	r3, [r7, #6]
 802d670:	b21b      	sxth	r3, r3
 802d672:	4313      	orrs	r3, r2
 802d674:	b21b      	sxth	r3, r3
 802d676:	b29a      	uxth	r2, r3
 802d678:	4b84      	ldr	r3, [pc, #528]	; (802d88c <read_control_registers+0x5f8>)
 802d67a:	855a      	strh	r2, [r3, #42]	; 0x2a

	fm25v02_read(2*MODEM_RING_PAUSE_LOAD_REG, &status_reg_temp_h);
 802d67c:	1dfb      	adds	r3, r7, #7
 802d67e:	4619      	mov	r1, r3
 802d680:	f242 104c 	movw	r0, #8524	; 0x214c
 802d684:	f7fd f9c8 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*MODEM_RING_PAUSE_LOAD_REG+1, &status_reg_temp_l);
 802d688:	1dbb      	adds	r3, r7, #6
 802d68a:	4619      	mov	r1, r3
 802d68c:	f242 104d 	movw	r0, #8525	; 0x214d
 802d690:	f7fd f9c2 	bl	802aa18 <fm25v02_read>
	control_registers.modem_ring_pause_load_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802d694:	79fb      	ldrb	r3, [r7, #7]
 802d696:	021b      	lsls	r3, r3, #8
 802d698:	b21a      	sxth	r2, r3
 802d69a:	79bb      	ldrb	r3, [r7, #6]
 802d69c:	b21b      	sxth	r3, r3
 802d69e:	4313      	orrs	r3, r2
 802d6a0:	b21b      	sxth	r3, r3
 802d6a2:	b29a      	uxth	r2, r3
 802d6a4:	4b79      	ldr	r3, [pc, #484]	; (802d88c <read_control_registers+0x5f8>)
 802d6a6:	859a      	strh	r2, [r3, #44]	; 0x2c

	fm25v02_read(2*MODEM_RING_PAUSE2_LOAD_REG, &status_reg_temp_h);
 802d6a8:	1dfb      	adds	r3, r7, #7
 802d6aa:	4619      	mov	r1, r3
 802d6ac:	f242 104e 	movw	r0, #8526	; 0x214e
 802d6b0:	f7fd f9b2 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*MODEM_RING_PAUSE2_LOAD_REG+1, &status_reg_temp_l);
 802d6b4:	1dbb      	adds	r3, r7, #6
 802d6b6:	4619      	mov	r1, r3
 802d6b8:	f242 104f 	movw	r0, #8527	; 0x214f
 802d6bc:	f7fd f9ac 	bl	802aa18 <fm25v02_read>
	control_registers.modem_ring_pause2_load_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802d6c0:	79fb      	ldrb	r3, [r7, #7]
 802d6c2:	021b      	lsls	r3, r3, #8
 802d6c4:	b21a      	sxth	r2, r3
 802d6c6:	79bb      	ldrb	r3, [r7, #6]
 802d6c8:	b21b      	sxth	r3, r3
 802d6ca:	4313      	orrs	r3, r2
 802d6cc:	b21b      	sxth	r3, r3
 802d6ce:	b29a      	uxth	r2, r3
 802d6d0:	4b6e      	ldr	r3, [pc, #440]	; (802d88c <read_control_registers+0x5f8>)
 802d6d2:	85da      	strh	r2, [r3, #46]	; 0x2e

	fm25v02_read(2*RING_MINUTE_TIME_REG, &status_reg_temp_h);
 802d6d4:	1dfb      	adds	r3, r7, #7
 802d6d6:	4619      	mov	r1, r3
 802d6d8:	f242 1050 	movw	r0, #8528	; 0x2150
 802d6dc:	f7fd f99c 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*RING_MINUTE_TIME_REG+1, &status_reg_temp_l);
 802d6e0:	1dbb      	adds	r3, r7, #6
 802d6e2:	4619      	mov	r1, r3
 802d6e4:	f242 1051 	movw	r0, #8529	; 0x2151
 802d6e8:	f7fd f996 	bl	802aa18 <fm25v02_read>
	control_registers.ring_minute_time_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802d6ec:	79fb      	ldrb	r3, [r7, #7]
 802d6ee:	021b      	lsls	r3, r3, #8
 802d6f0:	b21a      	sxth	r2, r3
 802d6f2:	79bb      	ldrb	r3, [r7, #6]
 802d6f4:	b21b      	sxth	r3, r3
 802d6f6:	4313      	orrs	r3, r2
 802d6f8:	b21b      	sxth	r3, r3
 802d6fa:	b29a      	uxth	r2, r3
 802d6fc:	4b63      	ldr	r3, [pc, #396]	; (802d88c <read_control_registers+0x5f8>)
 802d6fe:	861a      	strh	r2, [r3, #48]	; 0x30

	fm25v02_read(2*RING_HOUR_TIME_REG, &status_reg_temp_h);
 802d700:	1dfb      	adds	r3, r7, #7
 802d702:	4619      	mov	r1, r3
 802d704:	f242 1052 	movw	r0, #8530	; 0x2152
 802d708:	f7fd f986 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*RING_HOUR_TIME_REG+1, &status_reg_temp_l);
 802d70c:	1dbb      	adds	r3, r7, #6
 802d70e:	4619      	mov	r1, r3
 802d710:	f242 1053 	movw	r0, #8531	; 0x2153
 802d714:	f7fd f980 	bl	802aa18 <fm25v02_read>
	control_registers.ring_hour_time_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802d718:	79fb      	ldrb	r3, [r7, #7]
 802d71a:	021b      	lsls	r3, r3, #8
 802d71c:	b21a      	sxth	r2, r3
 802d71e:	79bb      	ldrb	r3, [r7, #6]
 802d720:	b21b      	sxth	r3, r3
 802d722:	4313      	orrs	r3, r2
 802d724:	b21b      	sxth	r3, r3
 802d726:	b29a      	uxth	r2, r3
 802d728:	4b58      	ldr	r3, [pc, #352]	; (802d88c <read_control_registers+0x5f8>)
 802d72a:	865a      	strh	r2, [r3, #50]	; 0x32

	fm25v02_read(2*ID_HIGH_REG, &status_reg_temp_h);
 802d72c:	1dfb      	adds	r3, r7, #7
 802d72e:	4619      	mov	r1, r3
 802d730:	f242 1056 	movw	r0, #8534	; 0x2156
 802d734:	f7fd f970 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*ID_HIGH_REG+1, &status_reg_temp_l);
 802d738:	1dbb      	adds	r3, r7, #6
 802d73a:	4619      	mov	r1, r3
 802d73c:	f242 1057 	movw	r0, #8535	; 0x2157
 802d740:	f7fd f96a 	bl	802aa18 <fm25v02_read>
	control_registers.id_high_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802d744:	79fb      	ldrb	r3, [r7, #7]
 802d746:	021b      	lsls	r3, r3, #8
 802d748:	b21a      	sxth	r2, r3
 802d74a:	79bb      	ldrb	r3, [r7, #6]
 802d74c:	b21b      	sxth	r3, r3
 802d74e:	4313      	orrs	r3, r2
 802d750:	b21b      	sxth	r3, r3
 802d752:	b29a      	uxth	r2, r3
 802d754:	4b4d      	ldr	r3, [pc, #308]	; (802d88c <read_control_registers+0x5f8>)
 802d756:	869a      	strh	r2, [r3, #52]	; 0x34

	fm25v02_read(2*ID_LOW_REG, &status_reg_temp_h);
 802d758:	1dfb      	adds	r3, r7, #7
 802d75a:	4619      	mov	r1, r3
 802d75c:	f242 1058 	movw	r0, #8536	; 0x2158
 802d760:	f7fd f95a 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*ID_LOW_REG+1, &status_reg_temp_l);
 802d764:	1dbb      	adds	r3, r7, #6
 802d766:	4619      	mov	r1, r3
 802d768:	f242 1059 	movw	r0, #8537	; 0x2159
 802d76c:	f7fd f954 	bl	802aa18 <fm25v02_read>
	control_registers.id_low_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802d770:	79fb      	ldrb	r3, [r7, #7]
 802d772:	021b      	lsls	r3, r3, #8
 802d774:	b21a      	sxth	r2, r3
 802d776:	79bb      	ldrb	r3, [r7, #6]
 802d778:	b21b      	sxth	r3, r3
 802d77a:	4313      	orrs	r3, r2
 802d77c:	b21b      	sxth	r3, r3
 802d77e:	b29a      	uxth	r2, r3
 802d780:	4b42      	ldr	r3, [pc, #264]	; (802d88c <read_control_registers+0x5f8>)
 802d782:	86da      	strh	r2, [r3, #54]	; 0x36

	fm25v02_read(2*RESET_CONTROL_REG, &status_reg_temp_h);
 802d784:	1dfb      	adds	r3, r7, #7
 802d786:	4619      	mov	r1, r3
 802d788:	f242 105a 	movw	r0, #8538	; 0x215a
 802d78c:	f7fd f944 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*RESET_CONTROL_REG+1, &status_reg_temp_l);
 802d790:	1dbb      	adds	r3, r7, #6
 802d792:	4619      	mov	r1, r3
 802d794:	f242 105b 	movw	r0, #8539	; 0x215b
 802d798:	f7fd f93e 	bl	802aa18 <fm25v02_read>
	control_registers.reset_control_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802d79c:	79fb      	ldrb	r3, [r7, #7]
 802d79e:	021b      	lsls	r3, r3, #8
 802d7a0:	b21a      	sxth	r2, r3
 802d7a2:	79bb      	ldrb	r3, [r7, #6]
 802d7a4:	b21b      	sxth	r3, r3
 802d7a6:	4313      	orrs	r3, r2
 802d7a8:	b21b      	sxth	r3, r3
 802d7aa:	b29a      	uxth	r2, r3
 802d7ac:	4b37      	ldr	r3, [pc, #220]	; (802d88c <read_control_registers+0x5f8>)
 802d7ae:	871a      	strh	r2, [r3, #56]	; 0x38

	fm25v02_read(2*METER_POLLING_REG, &status_reg_temp_h);
 802d7b0:	1dfb      	adds	r3, r7, #7
 802d7b2:	4619      	mov	r1, r3
 802d7b4:	f242 105c 	movw	r0, #8540	; 0x215c
 802d7b8:	f7fd f92e 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*METER_POLLING_REG+1, &status_reg_temp_l);
 802d7bc:	1dbb      	adds	r3, r7, #6
 802d7be:	4619      	mov	r1, r3
 802d7c0:	f242 105d 	movw	r0, #8541	; 0x215d
 802d7c4:	f7fd f928 	bl	802aa18 <fm25v02_read>
	control_registers.meter_polling_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802d7c8:	79fb      	ldrb	r3, [r7, #7]
 802d7ca:	021b      	lsls	r3, r3, #8
 802d7cc:	b21a      	sxth	r2, r3
 802d7ce:	79bb      	ldrb	r3, [r7, #6]
 802d7d0:	b21b      	sxth	r3, r3
 802d7d2:	4313      	orrs	r3, r2
 802d7d4:	b21b      	sxth	r3, r3
 802d7d6:	b29a      	uxth	r2, r3
 802d7d8:	4b2c      	ldr	r3, [pc, #176]	; (802d88c <read_control_registers+0x5f8>)
 802d7da:	875a      	strh	r2, [r3, #58]	; 0x3a

	fm25v02_read(2*IP_1_REG, &status_reg_temp_h);
 802d7dc:	1dfb      	adds	r3, r7, #7
 802d7de:	4619      	mov	r1, r3
 802d7e0:	f242 105e 	movw	r0, #8542	; 0x215e
 802d7e4:	f7fd f918 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*IP_1_REG+1, &status_reg_temp_l);
 802d7e8:	1dbb      	adds	r3, r7, #6
 802d7ea:	4619      	mov	r1, r3
 802d7ec:	f242 105f 	movw	r0, #8543	; 0x215f
 802d7f0:	f7fd f912 	bl	802aa18 <fm25v02_read>
	control_registers.ip1_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802d7f4:	79fb      	ldrb	r3, [r7, #7]
 802d7f6:	021b      	lsls	r3, r3, #8
 802d7f8:	b21a      	sxth	r2, r3
 802d7fa:	79bb      	ldrb	r3, [r7, #6]
 802d7fc:	b21b      	sxth	r3, r3
 802d7fe:	4313      	orrs	r3, r2
 802d800:	b21b      	sxth	r3, r3
 802d802:	b29a      	uxth	r2, r3
 802d804:	4b21      	ldr	r3, [pc, #132]	; (802d88c <read_control_registers+0x5f8>)
 802d806:	879a      	strh	r2, [r3, #60]	; 0x3c

	fm25v02_read(2*IP_2_REG, &status_reg_temp_h);
 802d808:	1dfb      	adds	r3, r7, #7
 802d80a:	4619      	mov	r1, r3
 802d80c:	f242 1060 	movw	r0, #8544	; 0x2160
 802d810:	f7fd f902 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*IP_2_REG+1, &status_reg_temp_l);
 802d814:	1dbb      	adds	r3, r7, #6
 802d816:	4619      	mov	r1, r3
 802d818:	f242 1061 	movw	r0, #8545	; 0x2161
 802d81c:	f7fd f8fc 	bl	802aa18 <fm25v02_read>
	control_registers.ip2_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802d820:	79fb      	ldrb	r3, [r7, #7]
 802d822:	021b      	lsls	r3, r3, #8
 802d824:	b21a      	sxth	r2, r3
 802d826:	79bb      	ldrb	r3, [r7, #6]
 802d828:	b21b      	sxth	r3, r3
 802d82a:	4313      	orrs	r3, r2
 802d82c:	b21b      	sxth	r3, r3
 802d82e:	b29a      	uxth	r2, r3
 802d830:	4b16      	ldr	r3, [pc, #88]	; (802d88c <read_control_registers+0x5f8>)
 802d832:	87da      	strh	r2, [r3, #62]	; 0x3e

	fm25v02_read(2*IP_3_REG, &status_reg_temp_h);
 802d834:	1dfb      	adds	r3, r7, #7
 802d836:	4619      	mov	r1, r3
 802d838:	f242 1062 	movw	r0, #8546	; 0x2162
 802d83c:	f7fd f8ec 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*IP_3_REG+1, &status_reg_temp_l);
 802d840:	1dbb      	adds	r3, r7, #6
 802d842:	4619      	mov	r1, r3
 802d844:	f242 1063 	movw	r0, #8547	; 0x2163
 802d848:	f7fd f8e6 	bl	802aa18 <fm25v02_read>
	control_registers.ip3_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802d84c:	79fb      	ldrb	r3, [r7, #7]
 802d84e:	021b      	lsls	r3, r3, #8
 802d850:	b21a      	sxth	r2, r3
 802d852:	79bb      	ldrb	r3, [r7, #6]
 802d854:	b21b      	sxth	r3, r3
 802d856:	4313      	orrs	r3, r2
 802d858:	b21b      	sxth	r3, r3
 802d85a:	b29a      	uxth	r2, r3
 802d85c:	4b0b      	ldr	r3, [pc, #44]	; (802d88c <read_control_registers+0x5f8>)
 802d85e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

	fm25v02_read(2*IP_4_REG, &status_reg_temp_h);
 802d862:	1dfb      	adds	r3, r7, #7
 802d864:	4619      	mov	r1, r3
 802d866:	f242 1064 	movw	r0, #8548	; 0x2164
 802d86a:	f7fd f8d5 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*IP_4_REG+1, &status_reg_temp_l);
 802d86e:	1dbb      	adds	r3, r7, #6
 802d870:	4619      	mov	r1, r3
 802d872:	f242 1065 	movw	r0, #8549	; 0x2165
 802d876:	f7fd f8cf 	bl	802aa18 <fm25v02_read>
	control_registers.ip4_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802d87a:	79fb      	ldrb	r3, [r7, #7]
 802d87c:	021b      	lsls	r3, r3, #8
 802d87e:	b21a      	sxth	r2, r3
 802d880:	79bb      	ldrb	r3, [r7, #6]
 802d882:	b21b      	sxth	r3, r3
 802d884:	4313      	orrs	r3, r2
 802d886:	b21b      	sxth	r3, r3
 802d888:	e002      	b.n	802d890 <read_control_registers+0x5fc>
 802d88a:	bf00      	nop
 802d88c:	2000b000 	.word	0x2000b000
 802d890:	b29a      	uxth	r2, r3
 802d892:	4bc3      	ldr	r3, [pc, #780]	; (802dba0 <read_control_registers+0x90c>)
 802d894:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

	fm25v02_read(2*PORT_HIGH_REG, &status_reg_temp_h);
 802d898:	1dfb      	adds	r3, r7, #7
 802d89a:	4619      	mov	r1, r3
 802d89c:	f242 1066 	movw	r0, #8550	; 0x2166
 802d8a0:	f7fd f8ba 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*PORT_HIGH_REG+1, &status_reg_temp_l);
 802d8a4:	1dbb      	adds	r3, r7, #6
 802d8a6:	4619      	mov	r1, r3
 802d8a8:	f242 1067 	movw	r0, #8551	; 0x2167
 802d8ac:	f7fd f8b4 	bl	802aa18 <fm25v02_read>
	control_registers.port_high_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802d8b0:	79fb      	ldrb	r3, [r7, #7]
 802d8b2:	021b      	lsls	r3, r3, #8
 802d8b4:	b21a      	sxth	r2, r3
 802d8b6:	79bb      	ldrb	r3, [r7, #6]
 802d8b8:	b21b      	sxth	r3, r3
 802d8ba:	4313      	orrs	r3, r2
 802d8bc:	b21b      	sxth	r3, r3
 802d8be:	b29a      	uxth	r2, r3
 802d8c0:	4bb7      	ldr	r3, [pc, #732]	; (802dba0 <read_control_registers+0x90c>)
 802d8c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	fm25v02_read(2*PORT_LOW_REG, &status_reg_temp_h);
 802d8c6:	1dfb      	adds	r3, r7, #7
 802d8c8:	4619      	mov	r1, r3
 802d8ca:	f242 1068 	movw	r0, #8552	; 0x2168
 802d8ce:	f7fd f8a3 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*PORT_LOW_REG+1, &status_reg_temp_l);
 802d8d2:	1dbb      	adds	r3, r7, #6
 802d8d4:	4619      	mov	r1, r3
 802d8d6:	f242 1069 	movw	r0, #8553	; 0x2169
 802d8da:	f7fd f89d 	bl	802aa18 <fm25v02_read>
	control_registers.port_low_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802d8de:	79fb      	ldrb	r3, [r7, #7]
 802d8e0:	021b      	lsls	r3, r3, #8
 802d8e2:	b21a      	sxth	r2, r3
 802d8e4:	79bb      	ldrb	r3, [r7, #6]
 802d8e6:	b21b      	sxth	r3, r3
 802d8e8:	4313      	orrs	r3, r2
 802d8ea:	b21b      	sxth	r3, r3
 802d8ec:	b29a      	uxth	r2, r3
 802d8ee:	4bac      	ldr	r3, [pc, #688]	; (802dba0 <read_control_registers+0x90c>)
 802d8f0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

	fm25v02_read(2*METER_ID_HIGH_REG, &status_reg_temp_h);
 802d8f4:	1dfb      	adds	r3, r7, #7
 802d8f6:	4619      	mov	r1, r3
 802d8f8:	f242 106a 	movw	r0, #8554	; 0x216a
 802d8fc:	f7fd f88c 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*METER_ID_HIGH_REG+1, &status_reg_temp_l);
 802d900:	1dbb      	adds	r3, r7, #6
 802d902:	4619      	mov	r1, r3
 802d904:	f242 106b 	movw	r0, #8555	; 0x216b
 802d908:	f7fd f886 	bl	802aa18 <fm25v02_read>
	control_registers.meter_id_high_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802d90c:	79fb      	ldrb	r3, [r7, #7]
 802d90e:	021b      	lsls	r3, r3, #8
 802d910:	b21a      	sxth	r2, r3
 802d912:	79bb      	ldrb	r3, [r7, #6]
 802d914:	b21b      	sxth	r3, r3
 802d916:	4313      	orrs	r3, r2
 802d918:	b21b      	sxth	r3, r3
 802d91a:	b29a      	uxth	r2, r3
 802d91c:	4ba0      	ldr	r3, [pc, #640]	; (802dba0 <read_control_registers+0x90c>)
 802d91e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

	fm25v02_read(2*METER_ID_LOW_REG, &status_reg_temp_h);
 802d922:	1dfb      	adds	r3, r7, #7
 802d924:	4619      	mov	r1, r3
 802d926:	f242 106c 	movw	r0, #8556	; 0x216c
 802d92a:	f7fd f875 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*METER_ID_LOW_REG+1, &status_reg_temp_l);
 802d92e:	1dbb      	adds	r3, r7, #6
 802d930:	4619      	mov	r1, r3
 802d932:	f242 106d 	movw	r0, #8557	; 0x216d
 802d936:	f7fd f86f 	bl	802aa18 <fm25v02_read>
	control_registers.meter_id_low_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802d93a:	79fb      	ldrb	r3, [r7, #7]
 802d93c:	021b      	lsls	r3, r3, #8
 802d93e:	b21a      	sxth	r2, r3
 802d940:	79bb      	ldrb	r3, [r7, #6]
 802d942:	b21b      	sxth	r3, r3
 802d944:	4313      	orrs	r3, r2
 802d946:	b21b      	sxth	r3, r3
 802d948:	b29a      	uxth	r2, r3
 802d94a:	4b95      	ldr	r3, [pc, #596]	; (802dba0 <read_control_registers+0x90c>)
 802d94c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

	fm25v02_read(2*GPRS_CALL_REG, &status_reg_temp_h);
 802d950:	1dfb      	adds	r3, r7, #7
 802d952:	4619      	mov	r1, r3
 802d954:	f242 106e 	movw	r0, #8558	; 0x216e
 802d958:	f7fd f85e 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*GPRS_CALL_REG+1, &status_reg_temp_l);
 802d95c:	1dbb      	adds	r3, r7, #6
 802d95e:	4619      	mov	r1, r3
 802d960:	f242 106f 	movw	r0, #8559	; 0x216f
 802d964:	f7fd f858 	bl	802aa18 <fm25v02_read>
	control_registers.gprs_call_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802d968:	79fb      	ldrb	r3, [r7, #7]
 802d96a:	021b      	lsls	r3, r3, #8
 802d96c:	b21a      	sxth	r2, r3
 802d96e:	79bb      	ldrb	r3, [r7, #6]
 802d970:	b21b      	sxth	r3, r3
 802d972:	4313      	orrs	r3, r2
 802d974:	b21b      	sxth	r3, r3
 802d976:	b29a      	uxth	r2, r3
 802d978:	4b89      	ldr	r3, [pc, #548]	; (802dba0 <read_control_registers+0x90c>)
 802d97a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

	fm25v02_read(2*MUTE_REG, &status_reg_temp_h);
 802d97e:	1dfb      	adds	r3, r7, #7
 802d980:	4619      	mov	r1, r3
 802d982:	f242 1072 	movw	r0, #8562	; 0x2172
 802d986:	f7fd f847 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*MUTE_REG+1, &status_reg_temp_l);
 802d98a:	1dbb      	adds	r3, r7, #6
 802d98c:	4619      	mov	r1, r3
 802d98e:	f242 1073 	movw	r0, #8563	; 0x2173
 802d992:	f7fd f841 	bl	802aa18 <fm25v02_read>
	control_registers.mute_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802d996:	79fb      	ldrb	r3, [r7, #7]
 802d998:	021b      	lsls	r3, r3, #8
 802d99a:	b21a      	sxth	r2, r3
 802d99c:	79bb      	ldrb	r3, [r7, #6]
 802d99e:	b21b      	sxth	r3, r3
 802d9a0:	4313      	orrs	r3, r2
 802d9a2:	b21b      	sxth	r3, r3
 802d9a4:	b29a      	uxth	r2, r3
 802d9a6:	4b7e      	ldr	r3, [pc, #504]	; (802dba0 <read_control_registers+0x90c>)
 802d9a8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

	fm25v02_read(2*DELAY_ON_SENSOR_REG, &status_reg_temp_h);
 802d9ac:	1dfb      	adds	r3, r7, #7
 802d9ae:	4619      	mov	r1, r3
 802d9b0:	f242 1074 	movw	r0, #8564	; 0x2174
 802d9b4:	f7fd f830 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*DELAY_ON_SENSOR_REG+1, &status_reg_temp_l);
 802d9b8:	1dbb      	adds	r3, r7, #6
 802d9ba:	4619      	mov	r1, r3
 802d9bc:	f242 1075 	movw	r0, #8565	; 0x2175
 802d9c0:	f7fd f82a 	bl	802aa18 <fm25v02_read>
	control_registers.delay_on_sensor_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802d9c4:	79fb      	ldrb	r3, [r7, #7]
 802d9c6:	021b      	lsls	r3, r3, #8
 802d9c8:	b21a      	sxth	r2, r3
 802d9ca:	79bb      	ldrb	r3, [r7, #6]
 802d9cc:	b21b      	sxth	r3, r3
 802d9ce:	4313      	orrs	r3, r2
 802d9d0:	b21b      	sxth	r3, r3
 802d9d2:	b29a      	uxth	r2, r3
 802d9d4:	4b72      	ldr	r3, [pc, #456]	; (802dba0 <read_control_registers+0x90c>)
 802d9d6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

	fm25v02_read(2*DELAY_OFF_SENSOR_REG, &status_reg_temp_h);
 802d9da:	1dfb      	adds	r3, r7, #7
 802d9dc:	4619      	mov	r1, r3
 802d9de:	f242 1076 	movw	r0, #8566	; 0x2176
 802d9e2:	f7fd f819 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*DELAY_OFF_SENSOR_REG+1, &status_reg_temp_l);
 802d9e6:	1dbb      	adds	r3, r7, #6
 802d9e8:	4619      	mov	r1, r3
 802d9ea:	f242 1077 	movw	r0, #8567	; 0x2177
 802d9ee:	f7fd f813 	bl	802aa18 <fm25v02_read>
	control_registers.delay_off_sensor_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802d9f2:	79fb      	ldrb	r3, [r7, #7]
 802d9f4:	021b      	lsls	r3, r3, #8
 802d9f6:	b21a      	sxth	r2, r3
 802d9f8:	79bb      	ldrb	r3, [r7, #6]
 802d9fa:	b21b      	sxth	r3, r3
 802d9fc:	4313      	orrs	r3, r2
 802d9fe:	b21b      	sxth	r3, r3
 802da00:	b29a      	uxth	r2, r3
 802da02:	4b67      	ldr	r3, [pc, #412]	; (802dba0 <read_control_registers+0x90c>)
 802da04:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

	fm25v02_read(2*LIGHTING_THRESHOLD_ON_REG, &status_reg_temp_h);
 802da08:	1dfb      	adds	r3, r7, #7
 802da0a:	4619      	mov	r1, r3
 802da0c:	f242 1078 	movw	r0, #8568	; 0x2178
 802da10:	f7fd f802 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*LIGHTING_THRESHOLD_ON_REG+1, &status_reg_temp_l);
 802da14:	1dbb      	adds	r3, r7, #6
 802da16:	4619      	mov	r1, r3
 802da18:	f242 1079 	movw	r0, #8569	; 0x2179
 802da1c:	f7fc fffc 	bl	802aa18 <fm25v02_read>
	control_registers.lighting_threshold_on_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802da20:	79fb      	ldrb	r3, [r7, #7]
 802da22:	021b      	lsls	r3, r3, #8
 802da24:	b21a      	sxth	r2, r3
 802da26:	79bb      	ldrb	r3, [r7, #6]
 802da28:	b21b      	sxth	r3, r3
 802da2a:	4313      	orrs	r3, r2
 802da2c:	b21b      	sxth	r3, r3
 802da2e:	b29a      	uxth	r2, r3
 802da30:	4b5b      	ldr	r3, [pc, #364]	; (802dba0 <read_control_registers+0x90c>)
 802da32:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

	fm25v02_read(2*LIGHTING_THRESHOLD_OFF_REG, &status_reg_temp_h);
 802da36:	1dfb      	adds	r3, r7, #7
 802da38:	4619      	mov	r1, r3
 802da3a:	f242 107a 	movw	r0, #8570	; 0x217a
 802da3e:	f7fc ffeb 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*LIGHTING_THRESHOLD_OFF_REG+1, &status_reg_temp_l);
 802da42:	1dbb      	adds	r3, r7, #6
 802da44:	4619      	mov	r1, r3
 802da46:	f242 107b 	movw	r0, #8571	; 0x217b
 802da4a:	f7fc ffe5 	bl	802aa18 <fm25v02_read>
	control_registers.lighting_threshold_off_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802da4e:	79fb      	ldrb	r3, [r7, #7]
 802da50:	021b      	lsls	r3, r3, #8
 802da52:	b21a      	sxth	r2, r3
 802da54:	79bb      	ldrb	r3, [r7, #6]
 802da56:	b21b      	sxth	r3, r3
 802da58:	4313      	orrs	r3, r2
 802da5a:	b21b      	sxth	r3, r3
 802da5c:	b29a      	uxth	r2, r3
 802da5e:	4b50      	ldr	r3, [pc, #320]	; (802dba0 <read_control_registers+0x90c>)
 802da60:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

	fm25v02_read(2*LIGHT_CONTROL_REG, &status_reg_temp_h);
 802da64:	1dfb      	adds	r3, r7, #7
 802da66:	4619      	mov	r1, r3
 802da68:	f242 1082 	movw	r0, #8578	; 0x2182
 802da6c:	f7fc ffd4 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*LIGHT_CONTROL_REG+1, &status_reg_temp_l);
 802da70:	1dbb      	adds	r3, r7, #6
 802da72:	4619      	mov	r1, r3
 802da74:	f242 1083 	movw	r0, #8579	; 0x2183
 802da78:	f7fc ffce 	bl	802aa18 <fm25v02_read>
	control_registers.light_control_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802da7c:	79fb      	ldrb	r3, [r7, #7]
 802da7e:	021b      	lsls	r3, r3, #8
 802da80:	b21a      	sxth	r2, r3
 802da82:	79bb      	ldrb	r3, [r7, #6]
 802da84:	b21b      	sxth	r3, r3
 802da86:	4313      	orrs	r3, r2
 802da88:	b21b      	sxth	r3, r3
 802da8a:	b29a      	uxth	r2, r3
 802da8c:	4b44      	ldr	r3, [pc, #272]	; (802dba0 <read_control_registers+0x90c>)
 802da8e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

	fm25v02_read(2*LIGHTING_ALARM_RESET_REG, &status_reg_temp_h);
 802da92:	1dfb      	adds	r3, r7, #7
 802da94:	4619      	mov	r1, r3
 802da96:	f242 1084 	movw	r0, #8580	; 0x2184
 802da9a:	f7fc ffbd 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*LIGHTING_ALARM_RESET_REG+1, &status_reg_temp_l);
 802da9e:	1dbb      	adds	r3, r7, #6
 802daa0:	4619      	mov	r1, r3
 802daa2:	f242 1085 	movw	r0, #8581	; 0x2185
 802daa6:	f7fc ffb7 	bl	802aa18 <fm25v02_read>
	control_registers.lighting_alarm_reset_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802daaa:	79fb      	ldrb	r3, [r7, #7]
 802daac:	021b      	lsls	r3, r3, #8
 802daae:	b21a      	sxth	r2, r3
 802dab0:	79bb      	ldrb	r3, [r7, #6]
 802dab2:	b21b      	sxth	r3, r3
 802dab4:	4313      	orrs	r3, r2
 802dab6:	b21b      	sxth	r3, r3
 802dab8:	b29a      	uxth	r2, r3
 802daba:	4b39      	ldr	r3, [pc, #228]	; (802dba0 <read_control_registers+0x90c>)
 802dabc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

	fm25v02_read(2*CURRENT_MEASUREMENT_ACCURACY_REG, &status_reg_temp_h);
 802dac0:	1dfb      	adds	r3, r7, #7
 802dac2:	4619      	mov	r1, r3
 802dac4:	f242 1086 	movw	r0, #8582	; 0x2186
 802dac8:	f7fc ffa6 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*CURRENT_MEASUREMENT_ACCURACY_REG+1, &status_reg_temp_l);
 802dacc:	1dbb      	adds	r3, r7, #6
 802dace:	4619      	mov	r1, r3
 802dad0:	f242 1087 	movw	r0, #8583	; 0x2187
 802dad4:	f7fc ffa0 	bl	802aa18 <fm25v02_read>
	control_registers.current_measurement_accuracy_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802dad8:	79fb      	ldrb	r3, [r7, #7]
 802dada:	021b      	lsls	r3, r3, #8
 802dadc:	b21a      	sxth	r2, r3
 802dade:	79bb      	ldrb	r3, [r7, #6]
 802dae0:	b21b      	sxth	r3, r3
 802dae2:	4313      	orrs	r3, r2
 802dae4:	b21b      	sxth	r3, r3
 802dae6:	b29a      	uxth	r2, r3
 802dae8:	4b2d      	ldr	r3, [pc, #180]	; (802dba0 <read_control_registers+0x90c>)
 802daea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

	fm25v02_read(2*MAX_CURRENT_PHASE_A, &status_reg_temp_h);
 802daee:	1dfb      	adds	r3, r7, #7
 802daf0:	4619      	mov	r1, r3
 802daf2:	f242 1088 	movw	r0, #8584	; 0x2188
 802daf6:	f7fc ff8f 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*MAX_CURRENT_PHASE_A+1, &status_reg_temp_l);
 802dafa:	1dbb      	adds	r3, r7, #6
 802dafc:	4619      	mov	r1, r3
 802dafe:	f242 1089 	movw	r0, #8585	; 0x2189
 802db02:	f7fc ff89 	bl	802aa18 <fm25v02_read>
	control_registers.max_current_phase_a = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802db06:	79fb      	ldrb	r3, [r7, #7]
 802db08:	021b      	lsls	r3, r3, #8
 802db0a:	b21a      	sxth	r2, r3
 802db0c:	79bb      	ldrb	r3, [r7, #6]
 802db0e:	b21b      	sxth	r3, r3
 802db10:	4313      	orrs	r3, r2
 802db12:	b21b      	sxth	r3, r3
 802db14:	b29a      	uxth	r2, r3
 802db16:	4b22      	ldr	r3, [pc, #136]	; (802dba0 <read_control_registers+0x90c>)
 802db18:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

	fm25v02_read(2*MAX_CURRENT_PHASE_B, &status_reg_temp_h);
 802db1c:	1dfb      	adds	r3, r7, #7
 802db1e:	4619      	mov	r1, r3
 802db20:	f242 108a 	movw	r0, #8586	; 0x218a
 802db24:	f7fc ff78 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*MAX_CURRENT_PHASE_B+1, &status_reg_temp_l);
 802db28:	1dbb      	adds	r3, r7, #6
 802db2a:	4619      	mov	r1, r3
 802db2c:	f242 108b 	movw	r0, #8587	; 0x218b
 802db30:	f7fc ff72 	bl	802aa18 <fm25v02_read>
	control_registers.max_current_phase_b = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802db34:	79fb      	ldrb	r3, [r7, #7]
 802db36:	021b      	lsls	r3, r3, #8
 802db38:	b21a      	sxth	r2, r3
 802db3a:	79bb      	ldrb	r3, [r7, #6]
 802db3c:	b21b      	sxth	r3, r3
 802db3e:	4313      	orrs	r3, r2
 802db40:	b21b      	sxth	r3, r3
 802db42:	b29a      	uxth	r2, r3
 802db44:	4b16      	ldr	r3, [pc, #88]	; (802dba0 <read_control_registers+0x90c>)
 802db46:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

	fm25v02_read(2*MAX_CURRENT_PHASE_C, &status_reg_temp_h);
 802db4a:	1dfb      	adds	r3, r7, #7
 802db4c:	4619      	mov	r1, r3
 802db4e:	f242 108c 	movw	r0, #8588	; 0x218c
 802db52:	f7fc ff61 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*MAX_CURRENT_PHASE_C+1, &status_reg_temp_l);
 802db56:	1dbb      	adds	r3, r7, #6
 802db58:	4619      	mov	r1, r3
 802db5a:	f242 108d 	movw	r0, #8589	; 0x218d
 802db5e:	f7fc ff5b 	bl	802aa18 <fm25v02_read>
	control_registers.max_current_phase_c = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802db62:	79fb      	ldrb	r3, [r7, #7]
 802db64:	021b      	lsls	r3, r3, #8
 802db66:	b21a      	sxth	r2, r3
 802db68:	79bb      	ldrb	r3, [r7, #6]
 802db6a:	b21b      	sxth	r3, r3
 802db6c:	4313      	orrs	r3, r2
 802db6e:	b21b      	sxth	r3, r3
 802db70:	b29a      	uxth	r2, r3
 802db72:	4b0b      	ldr	r3, [pc, #44]	; (802dba0 <read_control_registers+0x90c>)
 802db74:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

	fm25v02_read(2*LIGHTING_SWITCHING_REG, &status_reg_temp_h);
 802db78:	1dfb      	adds	r3, r7, #7
 802db7a:	4619      	mov	r1, r3
 802db7c:	f242 108e 	movw	r0, #8590	; 0x218e
 802db80:	f7fc ff4a 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*LIGHTING_SWITCHING_REG+1, &status_reg_temp_l);
 802db84:	1dbb      	adds	r3, r7, #6
 802db86:	4619      	mov	r1, r3
 802db88:	f242 108f 	movw	r0, #8591	; 0x218f
 802db8c:	f7fc ff44 	bl	802aa18 <fm25v02_read>
	control_registers.lighting_switching_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802db90:	79fb      	ldrb	r3, [r7, #7]
 802db92:	021b      	lsls	r3, r3, #8
 802db94:	b21a      	sxth	r2, r3
 802db96:	79bb      	ldrb	r3, [r7, #6]
 802db98:	b21b      	sxth	r3, r3
 802db9a:	4313      	orrs	r3, r2
 802db9c:	b21b      	sxth	r3, r3
 802db9e:	e001      	b.n	802dba4 <read_control_registers+0x910>
 802dba0:	2000b000 	.word	0x2000b000
 802dba4:	b29a      	uxth	r2, r3
 802dba6:	4b1d      	ldr	r3, [pc, #116]	; (802dc1c <read_control_registers+0x988>)
 802dba8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

	fm25v02_read(2*ALARM_SWITCHING_REG, &status_reg_temp_h);
 802dbac:	1dfb      	adds	r3, r7, #7
 802dbae:	4619      	mov	r1, r3
 802dbb0:	f242 1090 	movw	r0, #8592	; 0x2190
 802dbb4:	f7fc ff30 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*ALARM_SWITCHING_REG+1, &status_reg_temp_l);
 802dbb8:	1dbb      	adds	r3, r7, #6
 802dbba:	4619      	mov	r1, r3
 802dbbc:	f242 1091 	movw	r0, #8593	; 0x2191
 802dbc0:	f7fc ff2a 	bl	802aa18 <fm25v02_read>
	control_registers.alarm_switching_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802dbc4:	79fb      	ldrb	r3, [r7, #7]
 802dbc6:	021b      	lsls	r3, r3, #8
 802dbc8:	b21a      	sxth	r2, r3
 802dbca:	79bb      	ldrb	r3, [r7, #6]
 802dbcc:	b21b      	sxth	r3, r3
 802dbce:	4313      	orrs	r3, r2
 802dbd0:	b21b      	sxth	r3, r3
 802dbd2:	b29a      	uxth	r2, r3
 802dbd4:	4b11      	ldr	r3, [pc, #68]	; (802dc1c <read_control_registers+0x988>)
 802dbd6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

	fm25v02_read(2*OVERCURRENT_TIMELEFT_REG, &status_reg_temp_h);
 802dbda:	1dfb      	adds	r3, r7, #7
 802dbdc:	4619      	mov	r1, r3
 802dbde:	f242 1094 	movw	r0, #8596	; 0x2194
 802dbe2:	f7fc ff19 	bl	802aa18 <fm25v02_read>
	fm25v02_read(2*OVERCURRENT_TIMELEFT_REG+1, &status_reg_temp_l);
 802dbe6:	1dbb      	adds	r3, r7, #6
 802dbe8:	4619      	mov	r1, r3
 802dbea:	f242 1095 	movw	r0, #8597	; 0x2195
 802dbee:	f7fc ff13 	bl	802aa18 <fm25v02_read>
	control_registers.overcurrent_timeleft_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 802dbf2:	79fb      	ldrb	r3, [r7, #7]
 802dbf4:	021b      	lsls	r3, r3, #8
 802dbf6:	b21a      	sxth	r2, r3
 802dbf8:	79bb      	ldrb	r3, [r7, #6]
 802dbfa:	b21b      	sxth	r3, r3
 802dbfc:	4313      	orrs	r3, r2
 802dbfe:	b21b      	sxth	r3, r3
 802dc00:	b29a      	uxth	r2, r3
 802dc02:	4b06      	ldr	r3, [pc, #24]	; (802dc1c <read_control_registers+0x988>)
 802dc04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

	osMutexRelease(Fm25v02MutexHandle);
 802dc08:	4b05      	ldr	r3, [pc, #20]	; (802dc20 <read_control_registers+0x98c>)
 802dc0a:	681b      	ldr	r3, [r3, #0]
 802dc0c:	4618      	mov	r0, r3
 802dc0e:	f7eb fb99 	bl	8019344 <osMutexRelease>

}
 802dc12:	bf00      	nop
 802dc14:	3708      	adds	r7, #8
 802dc16:	46bd      	mov	sp, r7
 802dc18:	bd80      	pop	{r7, pc}
 802dc1a:	bf00      	nop
 802dc1c:	2000b000 	.word	0x2000b000
 802dc20:	20009bb8 	.word	0x20009bb8

0802dc24 <CRC16>:



//--------------------- Процедура расчета CRC16 -------------------------------------

 unsigned int CRC16( unsigned char * pucFrame, unsigned int usLen ){
 802dc24:	b480      	push	{r7}
 802dc26:	b085      	sub	sp, #20
 802dc28:	af00      	add	r7, sp, #0
 802dc2a:	6078      	str	r0, [r7, #4]
 802dc2c:	6039      	str	r1, [r7, #0]
  unsigned char MB_Slave_ucCRCHi = 0xFF;
 802dc2e:	23ff      	movs	r3, #255	; 0xff
 802dc30:	73fb      	strb	r3, [r7, #15]
  unsigned char MB_Slave_ucCRCLo = 0xFF;
 802dc32:	23ff      	movs	r3, #255	; 0xff
 802dc34:	73bb      	strb	r3, [r7, #14]
  int iIndex;
  //
  while( usLen-- ){
 802dc36:	e013      	b.n	802dc60 <CRC16+0x3c>
    iIndex = MB_Slave_ucCRCLo ^ *( pucFrame++ );
 802dc38:	687b      	ldr	r3, [r7, #4]
 802dc3a:	1c5a      	adds	r2, r3, #1
 802dc3c:	607a      	str	r2, [r7, #4]
 802dc3e:	781a      	ldrb	r2, [r3, #0]
 802dc40:	7bbb      	ldrb	r3, [r7, #14]
 802dc42:	4053      	eors	r3, r2
 802dc44:	b2db      	uxtb	r3, r3
 802dc46:	60bb      	str	r3, [r7, #8]
    MB_Slave_ucCRCLo = MB_Slave_ucCRCHi ^ MB_Slave_aucCRCHi[iIndex];
 802dc48:	4a0d      	ldr	r2, [pc, #52]	; (802dc80 <CRC16+0x5c>)
 802dc4a:	68bb      	ldr	r3, [r7, #8]
 802dc4c:	4413      	add	r3, r2
 802dc4e:	781a      	ldrb	r2, [r3, #0]
 802dc50:	7bfb      	ldrb	r3, [r7, #15]
 802dc52:	4053      	eors	r3, r2
 802dc54:	73bb      	strb	r3, [r7, #14]
    MB_Slave_ucCRCHi = MB_Slave_aucCRCLo[iIndex];
 802dc56:	4a0b      	ldr	r2, [pc, #44]	; (802dc84 <CRC16+0x60>)
 802dc58:	68bb      	ldr	r3, [r7, #8]
 802dc5a:	4413      	add	r3, r2
 802dc5c:	781b      	ldrb	r3, [r3, #0]
 802dc5e:	73fb      	strb	r3, [r7, #15]
  while( usLen-- ){
 802dc60:	683b      	ldr	r3, [r7, #0]
 802dc62:	1e5a      	subs	r2, r3, #1
 802dc64:	603a      	str	r2, [r7, #0]
 802dc66:	2b00      	cmp	r3, #0
 802dc68:	d1e6      	bne.n	802dc38 <CRC16+0x14>
  }
  return MB_Slave_ucCRCHi << 8 | MB_Slave_ucCRCLo;
 802dc6a:	7bfb      	ldrb	r3, [r7, #15]
 802dc6c:	021a      	lsls	r2, r3, #8
 802dc6e:	7bbb      	ldrb	r3, [r7, #14]
 802dc70:	4313      	orrs	r3, r2
}
 802dc72:	4618      	mov	r0, r3
 802dc74:	3714      	adds	r7, #20
 802dc76:	46bd      	mov	sp, r7
 802dc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 802dc7c:	4770      	bx	lr
 802dc7e:	bf00      	nop
 802dc80:	0802ff6c 	.word	0x0802ff6c
 802dc84:	0803006c 	.word	0x0803006c

0802dc88 <TSL2561_setPowerUp>:
 *      Author: Andriy
 */
#include "tsl2561.h"

bool TSL2561_setPowerUp(void)
{
 802dc88:	b580      	push	{r7, lr}
 802dc8a:	af00      	add	r7, sp, #0
	// Write 0x03 to command byte (power on)
	return(TSL2561_WriteByte(TSL2561_REG_CONTROL,0x03));
 802dc8c:	2103      	movs	r1, #3
 802dc8e:	2000      	movs	r0, #0
 802dc90:	f000 fa10 	bl	802e0b4 <TSL2561_WriteByte>
 802dc94:	4603      	mov	r3, r0
}
 802dc96:	4618      	mov	r0, r3
 802dc98:	bd80      	pop	{r7, pc}

0802dc9a <TSL2561_setTiming>:
	// If time = 1, integration will be 101ms
	// If time = 2, integration will be 402ms
	// If time = 3, use manual start / stop
	// Returns true (1) if successful, false (0) if there was an I2C error
	// (Also see getError() below)
{
 802dc9a:	b580      	push	{r7, lr}
 802dc9c:	b084      	sub	sp, #16
 802dc9e:	af00      	add	r7, sp, #0
 802dca0:	4603      	mov	r3, r0
 802dca2:	460a      	mov	r2, r1
 802dca4:	71fb      	strb	r3, [r7, #7]
 802dca6:	4613      	mov	r3, r2
 802dca8:	71bb      	strb	r3, [r7, #6]
	uint8_t timing;

	// Get timing byte
	if (TSL2561_ReadByte(TSL2561_REG_TIMING, &timing))
 802dcaa:	f107 030f 	add.w	r3, r7, #15
 802dcae:	4619      	mov	r1, r3
 802dcb0:	2001      	movs	r0, #1
 802dcb2:	f000 fa2b 	bl	802e10c <TSL2561_ReadByte>
 802dcb6:	4603      	mov	r3, r0
 802dcb8:	2b00      	cmp	r3, #0
 802dcba:	d027      	beq.n	802dd0c <TSL2561_setTiming+0x72>
	{
		// Set gain (0 or 1)
		if (gain)
 802dcbc:	79fb      	ldrb	r3, [r7, #7]
 802dcbe:	2b00      	cmp	r3, #0
 802dcc0:	d005      	beq.n	802dcce <TSL2561_setTiming+0x34>
			timing |= 0x10;
 802dcc2:	7bfb      	ldrb	r3, [r7, #15]
 802dcc4:	f043 0310 	orr.w	r3, r3, #16
 802dcc8:	b2db      	uxtb	r3, r3
 802dcca:	73fb      	strb	r3, [r7, #15]
 802dccc:	e004      	b.n	802dcd8 <TSL2561_setTiming+0x3e>
		else
			timing &= ~0x10;
 802dcce:	7bfb      	ldrb	r3, [r7, #15]
 802dcd0:	f023 0310 	bic.w	r3, r3, #16
 802dcd4:	b2db      	uxtb	r3, r3
 802dcd6:	73fb      	strb	r3, [r7, #15]

		// Set integration time (0 to 3)
		timing &= ~0x03;
 802dcd8:	7bfb      	ldrb	r3, [r7, #15]
 802dcda:	f023 0303 	bic.w	r3, r3, #3
 802dcde:	b2db      	uxtb	r3, r3
 802dce0:	73fb      	strb	r3, [r7, #15]
		timing |= (time & 0x03);
 802dce2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 802dce6:	f003 0303 	and.w	r3, r3, #3
 802dcea:	b25a      	sxtb	r2, r3
 802dcec:	7bfb      	ldrb	r3, [r7, #15]
 802dcee:	b25b      	sxtb	r3, r3
 802dcf0:	4313      	orrs	r3, r2
 802dcf2:	b25b      	sxtb	r3, r3
 802dcf4:	b2db      	uxtb	r3, r3
 802dcf6:	73fb      	strb	r3, [r7, #15]

		// Write modified timing byte back to device
		if (TSL2561_WriteByte(TSL2561_REG_TIMING, timing))
 802dcf8:	7bfb      	ldrb	r3, [r7, #15]
 802dcfa:	4619      	mov	r1, r3
 802dcfc:	2001      	movs	r0, #1
 802dcfe:	f000 f9d9 	bl	802e0b4 <TSL2561_WriteByte>
 802dd02:	4603      	mov	r3, r0
 802dd04:	2b00      	cmp	r3, #0
 802dd06:	d001      	beq.n	802dd0c <TSL2561_setTiming+0x72>
			return true;
 802dd08:	2301      	movs	r3, #1
 802dd0a:	e000      	b.n	802dd0e <TSL2561_setTiming+0x74>
	}
	return false;
 802dd0c:	2300      	movs	r3, #0
}
 802dd0e:	4618      	mov	r0, r3
 802dd10:	3710      	adds	r7, #16
 802dd12:	46bd      	mov	sp, r7
 802dd14:	bd80      	pop	{r7, pc}

0802dd16 <TSL2561_setTiming_ms>:
	// If time = 2, integration will be 402ms
	// If time = 3, use manual start / stop (ms = 0)
	// ms will be set to integration time
	// Returns true (1) if successful, false (0) if there was an I2C error
	// (Also see getError() below)
{
 802dd16:	b580      	push	{r7, lr}
 802dd18:	b082      	sub	sp, #8
 802dd1a:	af00      	add	r7, sp, #0
 802dd1c:	4603      	mov	r3, r0
 802dd1e:	603a      	str	r2, [r7, #0]
 802dd20:	71fb      	strb	r3, [r7, #7]
 802dd22:	460b      	mov	r3, r1
 802dd24:	71bb      	strb	r3, [r7, #6]
	// Calculate ms for user
	switch (time)
 802dd26:	79bb      	ldrb	r3, [r7, #6]
 802dd28:	2b02      	cmp	r3, #2
 802dd2a:	d00e      	beq.n	802dd4a <TSL2561_setTiming_ms+0x34>
 802dd2c:	2b02      	cmp	r3, #2
 802dd2e:	dc11      	bgt.n	802dd54 <TSL2561_setTiming_ms+0x3e>
 802dd30:	2b00      	cmp	r3, #0
 802dd32:	d002      	beq.n	802dd3a <TSL2561_setTiming_ms+0x24>
 802dd34:	2b01      	cmp	r3, #1
 802dd36:	d004      	beq.n	802dd42 <TSL2561_setTiming_ms+0x2c>
 802dd38:	e00c      	b.n	802dd54 <TSL2561_setTiming_ms+0x3e>
	{
		case 0:  *ms = 14; break;
 802dd3a:	683b      	ldr	r3, [r7, #0]
 802dd3c:	220e      	movs	r2, #14
 802dd3e:	601a      	str	r2, [r3, #0]
 802dd40:	e00b      	b.n	802dd5a <TSL2561_setTiming_ms+0x44>
		case 1:  *ms = 101; break;
 802dd42:	683b      	ldr	r3, [r7, #0]
 802dd44:	2265      	movs	r2, #101	; 0x65
 802dd46:	601a      	str	r2, [r3, #0]
 802dd48:	e007      	b.n	802dd5a <TSL2561_setTiming_ms+0x44>
		case 2:  *ms = 402; break;
 802dd4a:	683b      	ldr	r3, [r7, #0]
 802dd4c:	f44f 72c9 	mov.w	r2, #402	; 0x192
 802dd50:	601a      	str	r2, [r3, #0]
 802dd52:	e002      	b.n	802dd5a <TSL2561_setTiming_ms+0x44>
		default: *ms = 0;
 802dd54:	683b      	ldr	r3, [r7, #0]
 802dd56:	2200      	movs	r2, #0
 802dd58:	601a      	str	r2, [r3, #0]
	}
	// Set integration using base function
	return(TSL2561_setTiming(gain, time));
 802dd5a:	79ba      	ldrb	r2, [r7, #6]
 802dd5c:	79fb      	ldrb	r3, [r7, #7]
 802dd5e:	4611      	mov	r1, r2
 802dd60:	4618      	mov	r0, r3
 802dd62:	f7ff ff9a 	bl	802dc9a <TSL2561_setTiming>
 802dd66:	4603      	mov	r3, r0
}
 802dd68:	4618      	mov	r0, r3
 802dd6a:	3708      	adds	r7, #8
 802dd6c:	46bd      	mov	sp, r7
 802dd6e:	bd80      	pop	{r7, pc}

0802dd70 <TSL2561_getData>:
bool TSL2561_getData(unsigned int *data0, unsigned int *data1)
	// Retrieve raw integration results
	// data0 and data1 will be set to integration results
	// Returns true (1) if successful, false (0) if there was an I2C error
	// (Also see getError() below)
{
 802dd70:	b580      	push	{r7, lr}
 802dd72:	b082      	sub	sp, #8
 802dd74:	af00      	add	r7, sp, #0
 802dd76:	6078      	str	r0, [r7, #4]
 802dd78:	6039      	str	r1, [r7, #0]
	// Get data0 and data1 out of result registers
	return TSL2561_readUInt(TSL2561_REG_DATA_0, data0) && TSL2561_readUInt(TSL2561_REG_DATA_1, data1);
 802dd7a:	6879      	ldr	r1, [r7, #4]
 802dd7c:	200c      	movs	r0, #12
 802dd7e:	f000 f9f9 	bl	802e174 <TSL2561_readUInt>
 802dd82:	4603      	mov	r3, r0
 802dd84:	2b00      	cmp	r3, #0
 802dd86:	d008      	beq.n	802dd9a <TSL2561_getData+0x2a>
 802dd88:	6839      	ldr	r1, [r7, #0]
 802dd8a:	200e      	movs	r0, #14
 802dd8c:	f000 f9f2 	bl	802e174 <TSL2561_readUInt>
 802dd90:	4603      	mov	r3, r0
 802dd92:	2b00      	cmp	r3, #0
 802dd94:	d001      	beq.n	802dd9a <TSL2561_getData+0x2a>
 802dd96:	2301      	movs	r3, #1
 802dd98:	e000      	b.n	802dd9c <TSL2561_getData+0x2c>
 802dd9a:	2300      	movs	r3, #0
 802dd9c:	f003 0301 	and.w	r3, r3, #1
 802dda0:	b2db      	uxtb	r3, r3
}
 802dda2:	4618      	mov	r0, r3
 802dda4:	3708      	adds	r7, #8
 802dda6:	46bd      	mov	sp, r7
 802dda8:	bd80      	pop	{r7, pc}
 802ddaa:	0000      	movs	r0, r0
 802ddac:	0000      	movs	r0, r0
	...

0802ddb0 <TSL2561_getLux>:
	// ms: integration time in ms, from setTiming() or from manual integration
	// CH0, CH1: results from getData()
	// lux will be set to resulting lux calculation
	// returns true (1) if calculation was successful
	// RETURNS false (0) AND lux = 0.0 IF EITHER SENSOR WAS SATURATED (0XFFFF)
{
 802ddb0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 802ddb4:	b08a      	sub	sp, #40	; 0x28
 802ddb6:	af00      	add	r7, sp, #0
 802ddb8:	60b9      	str	r1, [r7, #8]
 802ddba:	607a      	str	r2, [r7, #4]
 802ddbc:	603b      	str	r3, [r7, #0]
 802ddbe:	4603      	mov	r3, r0
 802ddc0:	73fb      	strb	r3, [r7, #15]
	double ratio, d0, d1;

	// Determine if either sensor saturated (0xFFFF)
	// If so, abandon ship (calculation will not be accurate)
	if ((CH0 == 0xFFFF) || (CH1 == 0xFFFF))
 802ddc2:	687b      	ldr	r3, [r7, #4]
 802ddc4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802ddc8:	4293      	cmp	r3, r2
 802ddca:	d004      	beq.n	802ddd6 <TSL2561_getLux+0x26>
 802ddcc:	683b      	ldr	r3, [r7, #0]
 802ddce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802ddd2:	4293      	cmp	r3, r2
 802ddd4:	d108      	bne.n	802dde8 <TSL2561_getLux+0x38>
	{
		*lux = 0.0;
 802ddd6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 802ddd8:	f04f 0200 	mov.w	r2, #0
 802dddc:	f04f 0300 	mov.w	r3, #0
 802dde0:	e9c1 2300 	strd	r2, r3, [r1]
		return false;
 802dde4:	2300      	movs	r3, #0
 802dde6:	e114      	b.n	802e012 <TSL2561_getLux+0x262>
	}

	// Convert from unsigned integer to floating point
	d0 = CH0; d1 = CH1;
 802dde8:	6878      	ldr	r0, [r7, #4]
 802ddea:	f7e2 fb8b 	bl	8010504 <__aeabi_ui2d>
 802ddee:	4602      	mov	r2, r0
 802ddf0:	460b      	mov	r3, r1
 802ddf2:	e9c7 2308 	strd	r2, r3, [r7, #32]
 802ddf6:	6838      	ldr	r0, [r7, #0]
 802ddf8:	f7e2 fb84 	bl	8010504 <__aeabi_ui2d>
 802ddfc:	4602      	mov	r2, r0
 802ddfe:	460b      	mov	r3, r1
 802de00:	e9c7 2306 	strd	r2, r3, [r7, #24]

	// We will need the ratio for subsequent calculations
	ratio = d1 / d0;
 802de04:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 802de08:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 802de0c:	f7e2 fd1e 	bl	801084c <__aeabi_ddiv>
 802de10:	4602      	mov	r2, r0
 802de12:	460b      	mov	r3, r1
 802de14:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Normalize for integration time
	d0 *= (402.0/ms);
 802de18:	68b8      	ldr	r0, [r7, #8]
 802de1a:	f7e2 fb73 	bl	8010504 <__aeabi_ui2d>
 802de1e:	4602      	mov	r2, r0
 802de20:	460b      	mov	r3, r1
 802de22:	a199      	add	r1, pc, #612	; (adr r1, 802e088 <TSL2561_getLux+0x2d8>)
 802de24:	e9d1 0100 	ldrd	r0, r1, [r1]
 802de28:	f7e2 fd10 	bl	801084c <__aeabi_ddiv>
 802de2c:	4602      	mov	r2, r0
 802de2e:	460b      	mov	r3, r1
 802de30:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 802de34:	f7e2 fbe0 	bl	80105f8 <__aeabi_dmul>
 802de38:	4602      	mov	r2, r0
 802de3a:	460b      	mov	r3, r1
 802de3c:	e9c7 2308 	strd	r2, r3, [r7, #32]
	d1 *= (402.0/ms);
 802de40:	68b8      	ldr	r0, [r7, #8]
 802de42:	f7e2 fb5f 	bl	8010504 <__aeabi_ui2d>
 802de46:	4602      	mov	r2, r0
 802de48:	460b      	mov	r3, r1
 802de4a:	a18f      	add	r1, pc, #572	; (adr r1, 802e088 <TSL2561_getLux+0x2d8>)
 802de4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 802de50:	f7e2 fcfc 	bl	801084c <__aeabi_ddiv>
 802de54:	4602      	mov	r2, r0
 802de56:	460b      	mov	r3, r1
 802de58:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 802de5c:	f7e2 fbcc 	bl	80105f8 <__aeabi_dmul>
 802de60:	4602      	mov	r2, r0
 802de62:	460b      	mov	r3, r1
 802de64:	e9c7 2306 	strd	r2, r3, [r7, #24]

	// Normalize for gain
	if (!gain)
 802de68:	7bfb      	ldrb	r3, [r7, #15]
 802de6a:	2b00      	cmp	r3, #0
 802de6c:	d115      	bne.n	802de9a <TSL2561_getLux+0xea>
	{
		d0 *= 16;
 802de6e:	f04f 0200 	mov.w	r2, #0
 802de72:	4b83      	ldr	r3, [pc, #524]	; (802e080 <TSL2561_getLux+0x2d0>)
 802de74:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 802de78:	f7e2 fbbe 	bl	80105f8 <__aeabi_dmul>
 802de7c:	4602      	mov	r2, r0
 802de7e:	460b      	mov	r3, r1
 802de80:	e9c7 2308 	strd	r2, r3, [r7, #32]
		d1 *= 16;
 802de84:	f04f 0200 	mov.w	r2, #0
 802de88:	4b7d      	ldr	r3, [pc, #500]	; (802e080 <TSL2561_getLux+0x2d0>)
 802de8a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 802de8e:	f7e2 fbb3 	bl	80105f8 <__aeabi_dmul>
 802de92:	4602      	mov	r2, r0
 802de94:	460b      	mov	r3, r1
 802de96:	e9c7 2306 	strd	r2, r3, [r7, #24]
	}

	// Determine lux per datasheet equations:

	if (ratio < 0.5)
 802de9a:	f04f 0200 	mov.w	r2, #0
 802de9e:	4b79      	ldr	r3, [pc, #484]	; (802e084 <TSL2561_getLux+0x2d4>)
 802dea0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 802dea4:	f7e2 fe1a 	bl	8010adc <__aeabi_dcmplt>
 802dea8:	4603      	mov	r3, r0
 802deaa:	2b00      	cmp	r3, #0
 802deac:	d02e      	beq.n	802df0c <TSL2561_getLux+0x15c>
	{
		*lux = 0.0304 * d0 - 0.062 * d0 * pow(ratio,1.4);
 802deae:	a35c      	add	r3, pc, #368	; (adr r3, 802e020 <TSL2561_getLux+0x270>)
 802deb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 802deb4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 802deb8:	f7e2 fb9e 	bl	80105f8 <__aeabi_dmul>
 802debc:	4602      	mov	r2, r0
 802debe:	460b      	mov	r3, r1
 802dec0:	4614      	mov	r4, r2
 802dec2:	461d      	mov	r5, r3
 802dec4:	a358      	add	r3, pc, #352	; (adr r3, 802e028 <TSL2561_getLux+0x278>)
 802dec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 802deca:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 802dece:	f7e2 fb93 	bl	80105f8 <__aeabi_dmul>
 802ded2:	4602      	mov	r2, r0
 802ded4:	460b      	mov	r3, r1
 802ded6:	4690      	mov	r8, r2
 802ded8:	4699      	mov	r9, r3
 802deda:	ed9f 1b55 	vldr	d1, [pc, #340]	; 802e030 <TSL2561_getLux+0x280>
 802dede:	ed97 0b04 	vldr	d0, [r7, #16]
 802dee2:	f000 fe6b 	bl	802ebbc <pow>
 802dee6:	ec53 2b10 	vmov	r2, r3, d0
 802deea:	4640      	mov	r0, r8
 802deec:	4649      	mov	r1, r9
 802deee:	f7e2 fb83 	bl	80105f8 <__aeabi_dmul>
 802def2:	4602      	mov	r2, r0
 802def4:	460b      	mov	r3, r1
 802def6:	4620      	mov	r0, r4
 802def8:	4629      	mov	r1, r5
 802defa:	f7e2 f9c5 	bl	8010288 <__aeabi_dsub>
 802defe:	4602      	mov	r2, r0
 802df00:	460b      	mov	r3, r1
 802df02:	6c39      	ldr	r1, [r7, #64]	; 0x40
 802df04:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
 802df08:	2301      	movs	r3, #1
 802df0a:	e082      	b.n	802e012 <TSL2561_getLux+0x262>
	}

	if (ratio < 0.61)
 802df0c:	a34a      	add	r3, pc, #296	; (adr r3, 802e038 <TSL2561_getLux+0x288>)
 802df0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802df12:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 802df16:	f7e2 fde1 	bl	8010adc <__aeabi_dcmplt>
 802df1a:	4603      	mov	r3, r0
 802df1c:	2b00      	cmp	r3, #0
 802df1e:	d01e      	beq.n	802df5e <TSL2561_getLux+0x1ae>
	{
		*lux = 0.0224 * d0 - 0.031 * d1;
 802df20:	a347      	add	r3, pc, #284	; (adr r3, 802e040 <TSL2561_getLux+0x290>)
 802df22:	e9d3 2300 	ldrd	r2, r3, [r3]
 802df26:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 802df2a:	f7e2 fb65 	bl	80105f8 <__aeabi_dmul>
 802df2e:	4602      	mov	r2, r0
 802df30:	460b      	mov	r3, r1
 802df32:	4614      	mov	r4, r2
 802df34:	461d      	mov	r5, r3
 802df36:	a344      	add	r3, pc, #272	; (adr r3, 802e048 <TSL2561_getLux+0x298>)
 802df38:	e9d3 2300 	ldrd	r2, r3, [r3]
 802df3c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 802df40:	f7e2 fb5a 	bl	80105f8 <__aeabi_dmul>
 802df44:	4602      	mov	r2, r0
 802df46:	460b      	mov	r3, r1
 802df48:	4620      	mov	r0, r4
 802df4a:	4629      	mov	r1, r5
 802df4c:	f7e2 f99c 	bl	8010288 <__aeabi_dsub>
 802df50:	4602      	mov	r2, r0
 802df52:	460b      	mov	r3, r1
 802df54:	6c39      	ldr	r1, [r7, #64]	; 0x40
 802df56:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
 802df5a:	2301      	movs	r3, #1
 802df5c:	e059      	b.n	802e012 <TSL2561_getLux+0x262>
	}

	if (ratio < 0.80)
 802df5e:	a33c      	add	r3, pc, #240	; (adr r3, 802e050 <TSL2561_getLux+0x2a0>)
 802df60:	e9d3 2300 	ldrd	r2, r3, [r3]
 802df64:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 802df68:	f7e2 fdb8 	bl	8010adc <__aeabi_dcmplt>
 802df6c:	4603      	mov	r3, r0
 802df6e:	2b00      	cmp	r3, #0
 802df70:	d01e      	beq.n	802dfb0 <TSL2561_getLux+0x200>
	{
		*lux = 0.0128 * d0 - 0.0153 * d1;
 802df72:	a339      	add	r3, pc, #228	; (adr r3, 802e058 <TSL2561_getLux+0x2a8>)
 802df74:	e9d3 2300 	ldrd	r2, r3, [r3]
 802df78:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 802df7c:	f7e2 fb3c 	bl	80105f8 <__aeabi_dmul>
 802df80:	4602      	mov	r2, r0
 802df82:	460b      	mov	r3, r1
 802df84:	4614      	mov	r4, r2
 802df86:	461d      	mov	r5, r3
 802df88:	a335      	add	r3, pc, #212	; (adr r3, 802e060 <TSL2561_getLux+0x2b0>)
 802df8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802df8e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 802df92:	f7e2 fb31 	bl	80105f8 <__aeabi_dmul>
 802df96:	4602      	mov	r2, r0
 802df98:	460b      	mov	r3, r1
 802df9a:	4620      	mov	r0, r4
 802df9c:	4629      	mov	r1, r5
 802df9e:	f7e2 f973 	bl	8010288 <__aeabi_dsub>
 802dfa2:	4602      	mov	r2, r0
 802dfa4:	460b      	mov	r3, r1
 802dfa6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 802dfa8:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
 802dfac:	2301      	movs	r3, #1
 802dfae:	e030      	b.n	802e012 <TSL2561_getLux+0x262>
	}

	if (ratio < 1.30)
 802dfb0:	a32d      	add	r3, pc, #180	; (adr r3, 802e068 <TSL2561_getLux+0x2b8>)
 802dfb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 802dfb6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 802dfba:	f7e2 fd8f 	bl	8010adc <__aeabi_dcmplt>
 802dfbe:	4603      	mov	r3, r0
 802dfc0:	2b00      	cmp	r3, #0
 802dfc2:	d01e      	beq.n	802e002 <TSL2561_getLux+0x252>
	{
		*lux = 0.00146 * d0 - 0.00112 * d1;
 802dfc4:	a32a      	add	r3, pc, #168	; (adr r3, 802e070 <TSL2561_getLux+0x2c0>)
 802dfc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 802dfca:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 802dfce:	f7e2 fb13 	bl	80105f8 <__aeabi_dmul>
 802dfd2:	4602      	mov	r2, r0
 802dfd4:	460b      	mov	r3, r1
 802dfd6:	4614      	mov	r4, r2
 802dfd8:	461d      	mov	r5, r3
 802dfda:	a327      	add	r3, pc, #156	; (adr r3, 802e078 <TSL2561_getLux+0x2c8>)
 802dfdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 802dfe0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 802dfe4:	f7e2 fb08 	bl	80105f8 <__aeabi_dmul>
 802dfe8:	4602      	mov	r2, r0
 802dfea:	460b      	mov	r3, r1
 802dfec:	4620      	mov	r0, r4
 802dfee:	4629      	mov	r1, r5
 802dff0:	f7e2 f94a 	bl	8010288 <__aeabi_dsub>
 802dff4:	4602      	mov	r2, r0
 802dff6:	460b      	mov	r3, r1
 802dff8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 802dffa:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
 802dffe:	2301      	movs	r3, #1
 802e000:	e007      	b.n	802e012 <TSL2561_getLux+0x262>
	}

	// if (ratio > 1.30)
	*lux = 0.0;
 802e002:	6c39      	ldr	r1, [r7, #64]	; 0x40
 802e004:	f04f 0200 	mov.w	r2, #0
 802e008:	f04f 0300 	mov.w	r3, #0
 802e00c:	e9c1 2300 	strd	r2, r3, [r1]
	return true;
 802e010:	2301      	movs	r3, #1
}
 802e012:	4618      	mov	r0, r3
 802e014:	3728      	adds	r7, #40	; 0x28
 802e016:	46bd      	mov	sp, r7
 802e018:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 802e01c:	f3af 8000 	nop.w
 802e020:	77318fc5 	.word	0x77318fc5
 802e024:	3f9f212d 	.word	0x3f9f212d
 802e028:	c8b43958 	.word	0xc8b43958
 802e02c:	3fafbe76 	.word	0x3fafbe76
 802e030:	66666666 	.word	0x66666666
 802e034:	3ff66666 	.word	0x3ff66666
 802e038:	b851eb85 	.word	0xb851eb85
 802e03c:	3fe3851e 	.word	0x3fe3851e
 802e040:	8db8bac7 	.word	0x8db8bac7
 802e044:	3f96f006 	.word	0x3f96f006
 802e048:	c8b43958 	.word	0xc8b43958
 802e04c:	3f9fbe76 	.word	0x3f9fbe76
 802e050:	9999999a 	.word	0x9999999a
 802e054:	3fe99999 	.word	0x3fe99999
 802e058:	eb1c432d 	.word	0xeb1c432d
 802e05c:	3f8a36e2 	.word	0x3f8a36e2
 802e060:	3d07c84b 	.word	0x3d07c84b
 802e064:	3f8f559b 	.word	0x3f8f559b
 802e068:	cccccccd 	.word	0xcccccccd
 802e06c:	3ff4cccc 	.word	0x3ff4cccc
 802e070:	102363b2 	.word	0x102363b2
 802e074:	3f57ebaf 	.word	0x3f57ebaf
 802e078:	d7c6fbd2 	.word	0xd7c6fbd2
 802e07c:	3f52599e 	.word	0x3f52599e
 802e080:	40300000 	.word	0x40300000
 802e084:	3fe00000 	.word	0x3fe00000
 802e088:	00000000 	.word	0x00000000
 802e08c:	40792000 	.word	0x40792000

0802e090 <TSL2561_getID>:
bool TSL2561_getID(unsigned char *ID)
	// Retrieves part and revision code from TSL2561
	// Sets ID to part ID (see datasheet)
	// Returns true (1) if successful, false (0) if there was an I2C error
	// (Also see getError() below)
{
 802e090:	b580      	push	{r7, lr}
 802e092:	b082      	sub	sp, #8
 802e094:	af00      	add	r7, sp, #0
 802e096:	6078      	str	r0, [r7, #4]
	// Get ID byte from ID register
	if (TSL2561_ReadByte(TSL2561_REG_ID, ID))
 802e098:	6879      	ldr	r1, [r7, #4]
 802e09a:	200a      	movs	r0, #10
 802e09c:	f000 f836 	bl	802e10c <TSL2561_ReadByte>
 802e0a0:	4603      	mov	r3, r0
 802e0a2:	2b00      	cmp	r3, #0
 802e0a4:	d001      	beq.n	802e0aa <TSL2561_getID+0x1a>
	{
		return true;
 802e0a6:	2301      	movs	r3, #1
 802e0a8:	e000      	b.n	802e0ac <TSL2561_getID+0x1c>
	}

	return false;
 802e0aa:	2300      	movs	r3, #0
}
 802e0ac:	4618      	mov	r0, r3
 802e0ae:	3708      	adds	r7, #8
 802e0b0:	46bd      	mov	sp, r7
 802e0b2:	bd80      	pop	{r7, pc}

0802e0b4 <TSL2561_WriteByte>:

bool TSL2561_WriteByte(uint8_t regAdr, uint8_t value)
{
 802e0b4:	b580      	push	{r7, lr}
 802e0b6:	b086      	sub	sp, #24
 802e0b8:	af02      	add	r7, sp, #8
 802e0ba:	4603      	mov	r3, r0
 802e0bc:	460a      	mov	r2, r1
 802e0be:	71fb      	strb	r3, [r7, #7]
 802e0c0:	4613      	mov	r3, r2
 802e0c2:	71bb      	strb	r3, [r7, #6]
	uint8_t data[2] = {0, 0};
 802e0c4:	2300      	movs	r3, #0
 802e0c6:	81bb      	strh	r3, [r7, #12]

	data[0] = ((regAdr & 0x0F) | TSL2561_CMD);
 802e0c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802e0cc:	f003 030f 	and.w	r3, r3, #15
 802e0d0:	b25b      	sxtb	r3, r3
 802e0d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 802e0d6:	b25b      	sxtb	r3, r3
 802e0d8:	b2db      	uxtb	r3, r3
 802e0da:	733b      	strb	r3, [r7, #12]
	data[1] = value;
 802e0dc:	79bb      	ldrb	r3, [r7, #6]
 802e0de:	737b      	strb	r3, [r7, #13]

	if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) TSL2561_ADDR, data, 2, 1000) == HAL_OK)
 802e0e0:	f107 020c 	add.w	r2, r7, #12
 802e0e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802e0e8:	9300      	str	r3, [sp, #0]
 802e0ea:	2302      	movs	r3, #2
 802e0ec:	2172      	movs	r1, #114	; 0x72
 802e0ee:	4806      	ldr	r0, [pc, #24]	; (802e108 <TSL2561_WriteByte+0x54>)
 802e0f0:	f7e6 fd76 	bl	8014be0 <HAL_I2C_Master_Transmit>
 802e0f4:	4603      	mov	r3, r0
 802e0f6:	2b00      	cmp	r3, #0
 802e0f8:	d101      	bne.n	802e0fe <TSL2561_WriteByte+0x4a>
	{
		return true;
 802e0fa:	2301      	movs	r3, #1
 802e0fc:	e000      	b.n	802e100 <TSL2561_WriteByte+0x4c>
	}
	else
	{
		return false;
 802e0fe:	2300      	movs	r3, #0
	}
}
 802e100:	4618      	mov	r0, r3
 802e102:	3710      	adds	r7, #16
 802e104:	46bd      	mov	sp, r7
 802e106:	bd80      	pop	{r7, pc}
 802e108:	200082a4 	.word	0x200082a4

0802e10c <TSL2561_ReadByte>:

bool TSL2561_ReadByte(uint8_t regAdr, uint8_t *value)
{
 802e10c:	b580      	push	{r7, lr}
 802e10e:	b086      	sub	sp, #24
 802e110:	af02      	add	r7, sp, #8
 802e112:	4603      	mov	r3, r0
 802e114:	6039      	str	r1, [r7, #0]
 802e116:	71fb      	strb	r3, [r7, #7]
	uint8_t data = ((regAdr & 0x0F) | TSL2561_CMD);
 802e118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802e11c:	f003 030f 	and.w	r3, r3, #15
 802e120:	b25b      	sxtb	r3, r3
 802e122:	f063 037f 	orn	r3, r3, #127	; 0x7f
 802e126:	b25b      	sxtb	r3, r3
 802e128:	b2db      	uxtb	r3, r3
 802e12a:	73fb      	strb	r3, [r7, #15]

	if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) TSL2561_ADDR, &data, 1, 1000) == HAL_OK)
 802e12c:	f107 020f 	add.w	r2, r7, #15
 802e130:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802e134:	9300      	str	r3, [sp, #0]
 802e136:	2301      	movs	r3, #1
 802e138:	2172      	movs	r1, #114	; 0x72
 802e13a:	480d      	ldr	r0, [pc, #52]	; (802e170 <TSL2561_ReadByte+0x64>)
 802e13c:	f7e6 fd50 	bl	8014be0 <HAL_I2C_Master_Transmit>
 802e140:	4603      	mov	r3, r0
 802e142:	2b00      	cmp	r3, #0
 802e144:	d10f      	bne.n	802e166 <TSL2561_ReadByte+0x5a>
	{
		if(HAL_I2C_Master_Receive(&hi2c1, (uint16_t) TSL2561_ADDR, value, 1, 1000) == HAL_OK)
 802e146:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802e14a:	9300      	str	r3, [sp, #0]
 802e14c:	2301      	movs	r3, #1
 802e14e:	683a      	ldr	r2, [r7, #0]
 802e150:	2172      	movs	r1, #114	; 0x72
 802e152:	4807      	ldr	r0, [pc, #28]	; (802e170 <TSL2561_ReadByte+0x64>)
 802e154:	f7e6 fe42 	bl	8014ddc <HAL_I2C_Master_Receive>
 802e158:	4603      	mov	r3, r0
 802e15a:	2b00      	cmp	r3, #0
 802e15c:	d101      	bne.n	802e162 <TSL2561_ReadByte+0x56>
		{
			return true;
 802e15e:	2301      	movs	r3, #1
 802e160:	e002      	b.n	802e168 <TSL2561_ReadByte+0x5c>
		}
		else
		{
			return false;
 802e162:	2300      	movs	r3, #0
 802e164:	e000      	b.n	802e168 <TSL2561_ReadByte+0x5c>
		}
	}
	else
	{
		return false;
 802e166:	2300      	movs	r3, #0
	}
}
 802e168:	4618      	mov	r0, r3
 802e16a:	3710      	adds	r7, #16
 802e16c:	46bd      	mov	sp, r7
 802e16e:	bd80      	pop	{r7, pc}
 802e170:	200082a4 	.word	0x200082a4

0802e174 <TSL2561_readUInt>:
	// Reads an unsigned integer (16 bits) from a TSL2561 address (low byte first)
	// Address: TSL2561 address (0 to 15), low byte first
	// Value will be set to stored unsigned integer
	// Returns true (1) if successful, false (0) if there was an I2C error
	// (Also see getError() above)
{
 802e174:	b580      	push	{r7, lr}
 802e176:	b086      	sub	sp, #24
 802e178:	af02      	add	r7, sp, #8
 802e17a:	4603      	mov	r3, r0
 802e17c:	6039      	str	r1, [r7, #0]
 802e17e:	71fb      	strb	r3, [r7, #7]
	char high, low;

	// Set up command byte for read
	uint8_t data = ((address & 0x0F) | TSL2561_CMD);
 802e180:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802e184:	f003 030f 	and.w	r3, r3, #15
 802e188:	b25b      	sxtb	r3, r3
 802e18a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 802e18e:	b25b      	sxtb	r3, r3
 802e190:	b2db      	uxtb	r3, r3
 802e192:	737b      	strb	r3, [r7, #13]
	uint8_t tmpValue[2] = {0, 0};
 802e194:	2300      	movs	r3, #0
 802e196:	813b      	strh	r3, [r7, #8]

	if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) TSL2561_ADDR, &data, 1, 1000) == HAL_OK)
 802e198:	f107 020d 	add.w	r2, r7, #13
 802e19c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802e1a0:	9300      	str	r3, [sp, #0]
 802e1a2:	2301      	movs	r3, #1
 802e1a4:	2172      	movs	r1, #114	; 0x72
 802e1a6:	4813      	ldr	r0, [pc, #76]	; (802e1f4 <TSL2561_readUInt+0x80>)
 802e1a8:	f7e6 fd1a 	bl	8014be0 <HAL_I2C_Master_Transmit>
 802e1ac:	4603      	mov	r3, r0
 802e1ae:	2b00      	cmp	r3, #0
 802e1b0:	d11b      	bne.n	802e1ea <TSL2561_readUInt+0x76>
	{
		if(HAL_I2C_Master_Receive(&hi2c1, (uint16_t) TSL2561_ADDR, tmpValue, 2, 1000) == HAL_OK)
 802e1b2:	f107 0208 	add.w	r2, r7, #8
 802e1b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802e1ba:	9300      	str	r3, [sp, #0]
 802e1bc:	2302      	movs	r3, #2
 802e1be:	2172      	movs	r1, #114	; 0x72
 802e1c0:	480c      	ldr	r0, [pc, #48]	; (802e1f4 <TSL2561_readUInt+0x80>)
 802e1c2:	f7e6 fe0b 	bl	8014ddc <HAL_I2C_Master_Receive>
 802e1c6:	4603      	mov	r3, r0
 802e1c8:	2b00      	cmp	r3, #0
 802e1ca:	d10c      	bne.n	802e1e6 <TSL2561_readUInt+0x72>
		{
			low = tmpValue[0];
 802e1cc:	7a3b      	ldrb	r3, [r7, #8]
 802e1ce:	73fb      	strb	r3, [r7, #15]
			high = tmpValue[1];
 802e1d0:	7a7b      	ldrb	r3, [r7, #9]
 802e1d2:	73bb      	strb	r3, [r7, #14]
			// Combine bytes into unsigned int
			*value = high << 8 |  low;
 802e1d4:	7bbb      	ldrb	r3, [r7, #14]
 802e1d6:	021a      	lsls	r2, r3, #8
 802e1d8:	7bfb      	ldrb	r3, [r7, #15]
 802e1da:	4313      	orrs	r3, r2
 802e1dc:	461a      	mov	r2, r3
 802e1de:	683b      	ldr	r3, [r7, #0]
 802e1e0:	601a      	str	r2, [r3, #0]
			return true;
 802e1e2:	2301      	movs	r3, #1
 802e1e4:	e002      	b.n	802e1ec <TSL2561_readUInt+0x78>
		}
		else
		{
			return false;
 802e1e6:	2300      	movs	r3, #0
 802e1e8:	e000      	b.n	802e1ec <TSL2561_readUInt+0x78>
		}
	}
	else
	{
		return false;
 802e1ea:	2300      	movs	r3, #0
	}
}
 802e1ec:	4618      	mov	r0, r3
 802e1ee:	3710      	adds	r7, #16
 802e1f0:	46bd      	mov	sp, r7
 802e1f2:	bd80      	pop	{r7, pc}
 802e1f4:	200082a4 	.word	0x200082a4

0802e1f8 <__errno>:
 802e1f8:	4b01      	ldr	r3, [pc, #4]	; (802e200 <__errno+0x8>)
 802e1fa:	6818      	ldr	r0, [r3, #0]
 802e1fc:	4770      	bx	lr
 802e1fe:	bf00      	nop
 802e200:	20000078 	.word	0x20000078

0802e204 <__libc_init_array>:
 802e204:	b570      	push	{r4, r5, r6, lr}
 802e206:	4d0d      	ldr	r5, [pc, #52]	; (802e23c <__libc_init_array+0x38>)
 802e208:	4c0d      	ldr	r4, [pc, #52]	; (802e240 <__libc_init_array+0x3c>)
 802e20a:	1b64      	subs	r4, r4, r5
 802e20c:	10a4      	asrs	r4, r4, #2
 802e20e:	2600      	movs	r6, #0
 802e210:	42a6      	cmp	r6, r4
 802e212:	d109      	bne.n	802e228 <__libc_init_array+0x24>
 802e214:	4d0b      	ldr	r5, [pc, #44]	; (802e244 <__libc_init_array+0x40>)
 802e216:	4c0c      	ldr	r4, [pc, #48]	; (802e248 <__libc_init_array+0x44>)
 802e218:	f001 fc84 	bl	802fb24 <_init>
 802e21c:	1b64      	subs	r4, r4, r5
 802e21e:	10a4      	asrs	r4, r4, #2
 802e220:	2600      	movs	r6, #0
 802e222:	42a6      	cmp	r6, r4
 802e224:	d105      	bne.n	802e232 <__libc_init_array+0x2e>
 802e226:	bd70      	pop	{r4, r5, r6, pc}
 802e228:	f855 3b04 	ldr.w	r3, [r5], #4
 802e22c:	4798      	blx	r3
 802e22e:	3601      	adds	r6, #1
 802e230:	e7ee      	b.n	802e210 <__libc_init_array+0xc>
 802e232:	f855 3b04 	ldr.w	r3, [r5], #4
 802e236:	4798      	blx	r3
 802e238:	3601      	adds	r6, #1
 802e23a:	e7f2      	b.n	802e222 <__libc_init_array+0x1e>
 802e23c:	08030248 	.word	0x08030248
 802e240:	08030248 	.word	0x08030248
 802e244:	08030248 	.word	0x08030248
 802e248:	0803024c 	.word	0x0803024c

0802e24c <__retarget_lock_acquire_recursive>:
 802e24c:	4770      	bx	lr

0802e24e <__retarget_lock_release_recursive>:
 802e24e:	4770      	bx	lr

0802e250 <memcpy>:
 802e250:	440a      	add	r2, r1
 802e252:	4291      	cmp	r1, r2
 802e254:	f100 33ff 	add.w	r3, r0, #4294967295
 802e258:	d100      	bne.n	802e25c <memcpy+0xc>
 802e25a:	4770      	bx	lr
 802e25c:	b510      	push	{r4, lr}
 802e25e:	f811 4b01 	ldrb.w	r4, [r1], #1
 802e262:	f803 4f01 	strb.w	r4, [r3, #1]!
 802e266:	4291      	cmp	r1, r2
 802e268:	d1f9      	bne.n	802e25e <memcpy+0xe>
 802e26a:	bd10      	pop	{r4, pc}

0802e26c <memset>:
 802e26c:	4402      	add	r2, r0
 802e26e:	4603      	mov	r3, r0
 802e270:	4293      	cmp	r3, r2
 802e272:	d100      	bne.n	802e276 <memset+0xa>
 802e274:	4770      	bx	lr
 802e276:	f803 1b01 	strb.w	r1, [r3], #1
 802e27a:	e7f9      	b.n	802e270 <memset+0x4>

0802e27c <_malloc_r>:
 802e27c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802e27e:	1ccd      	adds	r5, r1, #3
 802e280:	f025 0503 	bic.w	r5, r5, #3
 802e284:	3508      	adds	r5, #8
 802e286:	2d0c      	cmp	r5, #12
 802e288:	bf38      	it	cc
 802e28a:	250c      	movcc	r5, #12
 802e28c:	2d00      	cmp	r5, #0
 802e28e:	4606      	mov	r6, r0
 802e290:	db01      	blt.n	802e296 <_malloc_r+0x1a>
 802e292:	42a9      	cmp	r1, r5
 802e294:	d903      	bls.n	802e29e <_malloc_r+0x22>
 802e296:	230c      	movs	r3, #12
 802e298:	6033      	str	r3, [r6, #0]
 802e29a:	2000      	movs	r0, #0
 802e29c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802e29e:	f000 f8f9 	bl	802e494 <__malloc_lock>
 802e2a2:	4921      	ldr	r1, [pc, #132]	; (802e328 <_malloc_r+0xac>)
 802e2a4:	680a      	ldr	r2, [r1, #0]
 802e2a6:	4614      	mov	r4, r2
 802e2a8:	b99c      	cbnz	r4, 802e2d2 <_malloc_r+0x56>
 802e2aa:	4f20      	ldr	r7, [pc, #128]	; (802e32c <_malloc_r+0xb0>)
 802e2ac:	683b      	ldr	r3, [r7, #0]
 802e2ae:	b923      	cbnz	r3, 802e2ba <_malloc_r+0x3e>
 802e2b0:	4621      	mov	r1, r4
 802e2b2:	4630      	mov	r0, r6
 802e2b4:	f000 f8a6 	bl	802e404 <_sbrk_r>
 802e2b8:	6038      	str	r0, [r7, #0]
 802e2ba:	4629      	mov	r1, r5
 802e2bc:	4630      	mov	r0, r6
 802e2be:	f000 f8a1 	bl	802e404 <_sbrk_r>
 802e2c2:	1c43      	adds	r3, r0, #1
 802e2c4:	d123      	bne.n	802e30e <_malloc_r+0x92>
 802e2c6:	230c      	movs	r3, #12
 802e2c8:	6033      	str	r3, [r6, #0]
 802e2ca:	4630      	mov	r0, r6
 802e2cc:	f000 f8e8 	bl	802e4a0 <__malloc_unlock>
 802e2d0:	e7e3      	b.n	802e29a <_malloc_r+0x1e>
 802e2d2:	6823      	ldr	r3, [r4, #0]
 802e2d4:	1b5b      	subs	r3, r3, r5
 802e2d6:	d417      	bmi.n	802e308 <_malloc_r+0x8c>
 802e2d8:	2b0b      	cmp	r3, #11
 802e2da:	d903      	bls.n	802e2e4 <_malloc_r+0x68>
 802e2dc:	6023      	str	r3, [r4, #0]
 802e2de:	441c      	add	r4, r3
 802e2e0:	6025      	str	r5, [r4, #0]
 802e2e2:	e004      	b.n	802e2ee <_malloc_r+0x72>
 802e2e4:	6863      	ldr	r3, [r4, #4]
 802e2e6:	42a2      	cmp	r2, r4
 802e2e8:	bf0c      	ite	eq
 802e2ea:	600b      	streq	r3, [r1, #0]
 802e2ec:	6053      	strne	r3, [r2, #4]
 802e2ee:	4630      	mov	r0, r6
 802e2f0:	f000 f8d6 	bl	802e4a0 <__malloc_unlock>
 802e2f4:	f104 000b 	add.w	r0, r4, #11
 802e2f8:	1d23      	adds	r3, r4, #4
 802e2fa:	f020 0007 	bic.w	r0, r0, #7
 802e2fe:	1ac2      	subs	r2, r0, r3
 802e300:	d0cc      	beq.n	802e29c <_malloc_r+0x20>
 802e302:	1a1b      	subs	r3, r3, r0
 802e304:	50a3      	str	r3, [r4, r2]
 802e306:	e7c9      	b.n	802e29c <_malloc_r+0x20>
 802e308:	4622      	mov	r2, r4
 802e30a:	6864      	ldr	r4, [r4, #4]
 802e30c:	e7cc      	b.n	802e2a8 <_malloc_r+0x2c>
 802e30e:	1cc4      	adds	r4, r0, #3
 802e310:	f024 0403 	bic.w	r4, r4, #3
 802e314:	42a0      	cmp	r0, r4
 802e316:	d0e3      	beq.n	802e2e0 <_malloc_r+0x64>
 802e318:	1a21      	subs	r1, r4, r0
 802e31a:	4630      	mov	r0, r6
 802e31c:	f000 f872 	bl	802e404 <_sbrk_r>
 802e320:	3001      	adds	r0, #1
 802e322:	d1dd      	bne.n	802e2e0 <_malloc_r+0x64>
 802e324:	e7cf      	b.n	802e2c6 <_malloc_r+0x4a>
 802e326:	bf00      	nop
 802e328:	20008030 	.word	0x20008030
 802e32c:	20008034 	.word	0x20008034

0802e330 <cleanup_glue>:
 802e330:	b538      	push	{r3, r4, r5, lr}
 802e332:	460c      	mov	r4, r1
 802e334:	6809      	ldr	r1, [r1, #0]
 802e336:	4605      	mov	r5, r0
 802e338:	b109      	cbz	r1, 802e33e <cleanup_glue+0xe>
 802e33a:	f7ff fff9 	bl	802e330 <cleanup_glue>
 802e33e:	4621      	mov	r1, r4
 802e340:	4628      	mov	r0, r5
 802e342:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802e346:	f000 b8b1 	b.w	802e4ac <_free_r>
	...

0802e34c <_reclaim_reent>:
 802e34c:	4b2c      	ldr	r3, [pc, #176]	; (802e400 <_reclaim_reent+0xb4>)
 802e34e:	681b      	ldr	r3, [r3, #0]
 802e350:	4283      	cmp	r3, r0
 802e352:	b570      	push	{r4, r5, r6, lr}
 802e354:	4604      	mov	r4, r0
 802e356:	d051      	beq.n	802e3fc <_reclaim_reent+0xb0>
 802e358:	6a43      	ldr	r3, [r0, #36]	; 0x24
 802e35a:	b143      	cbz	r3, 802e36e <_reclaim_reent+0x22>
 802e35c:	68db      	ldr	r3, [r3, #12]
 802e35e:	2b00      	cmp	r3, #0
 802e360:	d14a      	bne.n	802e3f8 <_reclaim_reent+0xac>
 802e362:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802e364:	6819      	ldr	r1, [r3, #0]
 802e366:	b111      	cbz	r1, 802e36e <_reclaim_reent+0x22>
 802e368:	4620      	mov	r0, r4
 802e36a:	f000 f89f 	bl	802e4ac <_free_r>
 802e36e:	6961      	ldr	r1, [r4, #20]
 802e370:	b111      	cbz	r1, 802e378 <_reclaim_reent+0x2c>
 802e372:	4620      	mov	r0, r4
 802e374:	f000 f89a 	bl	802e4ac <_free_r>
 802e378:	6a61      	ldr	r1, [r4, #36]	; 0x24
 802e37a:	b111      	cbz	r1, 802e382 <_reclaim_reent+0x36>
 802e37c:	4620      	mov	r0, r4
 802e37e:	f000 f895 	bl	802e4ac <_free_r>
 802e382:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 802e384:	b111      	cbz	r1, 802e38c <_reclaim_reent+0x40>
 802e386:	4620      	mov	r0, r4
 802e388:	f000 f890 	bl	802e4ac <_free_r>
 802e38c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 802e38e:	b111      	cbz	r1, 802e396 <_reclaim_reent+0x4a>
 802e390:	4620      	mov	r0, r4
 802e392:	f000 f88b 	bl	802e4ac <_free_r>
 802e396:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802e398:	b111      	cbz	r1, 802e3a0 <_reclaim_reent+0x54>
 802e39a:	4620      	mov	r0, r4
 802e39c:	f000 f886 	bl	802e4ac <_free_r>
 802e3a0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 802e3a2:	b111      	cbz	r1, 802e3aa <_reclaim_reent+0x5e>
 802e3a4:	4620      	mov	r0, r4
 802e3a6:	f000 f881 	bl	802e4ac <_free_r>
 802e3aa:	6da1      	ldr	r1, [r4, #88]	; 0x58
 802e3ac:	b111      	cbz	r1, 802e3b4 <_reclaim_reent+0x68>
 802e3ae:	4620      	mov	r0, r4
 802e3b0:	f000 f87c 	bl	802e4ac <_free_r>
 802e3b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802e3b6:	b111      	cbz	r1, 802e3be <_reclaim_reent+0x72>
 802e3b8:	4620      	mov	r0, r4
 802e3ba:	f000 f877 	bl	802e4ac <_free_r>
 802e3be:	69a3      	ldr	r3, [r4, #24]
 802e3c0:	b1e3      	cbz	r3, 802e3fc <_reclaim_reent+0xb0>
 802e3c2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 802e3c4:	4620      	mov	r0, r4
 802e3c6:	4798      	blx	r3
 802e3c8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 802e3ca:	b1b9      	cbz	r1, 802e3fc <_reclaim_reent+0xb0>
 802e3cc:	4620      	mov	r0, r4
 802e3ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802e3d2:	f7ff bfad 	b.w	802e330 <cleanup_glue>
 802e3d6:	5949      	ldr	r1, [r1, r5]
 802e3d8:	b941      	cbnz	r1, 802e3ec <_reclaim_reent+0xa0>
 802e3da:	3504      	adds	r5, #4
 802e3dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802e3de:	2d80      	cmp	r5, #128	; 0x80
 802e3e0:	68d9      	ldr	r1, [r3, #12]
 802e3e2:	d1f8      	bne.n	802e3d6 <_reclaim_reent+0x8a>
 802e3e4:	4620      	mov	r0, r4
 802e3e6:	f000 f861 	bl	802e4ac <_free_r>
 802e3ea:	e7ba      	b.n	802e362 <_reclaim_reent+0x16>
 802e3ec:	680e      	ldr	r6, [r1, #0]
 802e3ee:	4620      	mov	r0, r4
 802e3f0:	f000 f85c 	bl	802e4ac <_free_r>
 802e3f4:	4631      	mov	r1, r6
 802e3f6:	e7ef      	b.n	802e3d8 <_reclaim_reent+0x8c>
 802e3f8:	2500      	movs	r5, #0
 802e3fa:	e7ef      	b.n	802e3dc <_reclaim_reent+0x90>
 802e3fc:	bd70      	pop	{r4, r5, r6, pc}
 802e3fe:	bf00      	nop
 802e400:	20000078 	.word	0x20000078

0802e404 <_sbrk_r>:
 802e404:	b538      	push	{r3, r4, r5, lr}
 802e406:	4d06      	ldr	r5, [pc, #24]	; (802e420 <_sbrk_r+0x1c>)
 802e408:	2300      	movs	r3, #0
 802e40a:	4604      	mov	r4, r0
 802e40c:	4608      	mov	r0, r1
 802e40e:	602b      	str	r3, [r5, #0]
 802e410:	f7e4 fca2 	bl	8012d58 <_sbrk>
 802e414:	1c43      	adds	r3, r0, #1
 802e416:	d102      	bne.n	802e41e <_sbrk_r+0x1a>
 802e418:	682b      	ldr	r3, [r5, #0]
 802e41a:	b103      	cbz	r3, 802e41e <_sbrk_r+0x1a>
 802e41c:	6023      	str	r3, [r4, #0]
 802e41e:	bd38      	pop	{r3, r4, r5, pc}
 802e420:	2000b078 	.word	0x2000b078

0802e424 <siprintf>:
 802e424:	b40e      	push	{r1, r2, r3}
 802e426:	b500      	push	{lr}
 802e428:	b09c      	sub	sp, #112	; 0x70
 802e42a:	ab1d      	add	r3, sp, #116	; 0x74
 802e42c:	9002      	str	r0, [sp, #8]
 802e42e:	9006      	str	r0, [sp, #24]
 802e430:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 802e434:	4809      	ldr	r0, [pc, #36]	; (802e45c <siprintf+0x38>)
 802e436:	9107      	str	r1, [sp, #28]
 802e438:	9104      	str	r1, [sp, #16]
 802e43a:	4909      	ldr	r1, [pc, #36]	; (802e460 <siprintf+0x3c>)
 802e43c:	f853 2b04 	ldr.w	r2, [r3], #4
 802e440:	9105      	str	r1, [sp, #20]
 802e442:	6800      	ldr	r0, [r0, #0]
 802e444:	9301      	str	r3, [sp, #4]
 802e446:	a902      	add	r1, sp, #8
 802e448:	f000 f8dc 	bl	802e604 <_svfiprintf_r>
 802e44c:	9b02      	ldr	r3, [sp, #8]
 802e44e:	2200      	movs	r2, #0
 802e450:	701a      	strb	r2, [r3, #0]
 802e452:	b01c      	add	sp, #112	; 0x70
 802e454:	f85d eb04 	ldr.w	lr, [sp], #4
 802e458:	b003      	add	sp, #12
 802e45a:	4770      	bx	lr
 802e45c:	20000078 	.word	0x20000078
 802e460:	ffff0208 	.word	0xffff0208

0802e464 <strstr>:
 802e464:	b5f0      	push	{r4, r5, r6, r7, lr}
 802e466:	780c      	ldrb	r4, [r1, #0]
 802e468:	b164      	cbz	r4, 802e484 <strstr+0x20>
 802e46a:	4603      	mov	r3, r0
 802e46c:	781a      	ldrb	r2, [r3, #0]
 802e46e:	4618      	mov	r0, r3
 802e470:	1c5e      	adds	r6, r3, #1
 802e472:	b90a      	cbnz	r2, 802e478 <strstr+0x14>
 802e474:	4610      	mov	r0, r2
 802e476:	e005      	b.n	802e484 <strstr+0x20>
 802e478:	4294      	cmp	r4, r2
 802e47a:	d108      	bne.n	802e48e <strstr+0x2a>
 802e47c:	460d      	mov	r5, r1
 802e47e:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 802e482:	b902      	cbnz	r2, 802e486 <strstr+0x22>
 802e484:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802e486:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 802e48a:	4297      	cmp	r7, r2
 802e48c:	d0f7      	beq.n	802e47e <strstr+0x1a>
 802e48e:	4633      	mov	r3, r6
 802e490:	e7ec      	b.n	802e46c <strstr+0x8>
	...

0802e494 <__malloc_lock>:
 802e494:	4801      	ldr	r0, [pc, #4]	; (802e49c <__malloc_lock+0x8>)
 802e496:	f7ff bed9 	b.w	802e24c <__retarget_lock_acquire_recursive>
 802e49a:	bf00      	nop
 802e49c:	2000b070 	.word	0x2000b070

0802e4a0 <__malloc_unlock>:
 802e4a0:	4801      	ldr	r0, [pc, #4]	; (802e4a8 <__malloc_unlock+0x8>)
 802e4a2:	f7ff bed4 	b.w	802e24e <__retarget_lock_release_recursive>
 802e4a6:	bf00      	nop
 802e4a8:	2000b070 	.word	0x2000b070

0802e4ac <_free_r>:
 802e4ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802e4ae:	2900      	cmp	r1, #0
 802e4b0:	d048      	beq.n	802e544 <_free_r+0x98>
 802e4b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802e4b6:	9001      	str	r0, [sp, #4]
 802e4b8:	2b00      	cmp	r3, #0
 802e4ba:	f1a1 0404 	sub.w	r4, r1, #4
 802e4be:	bfb8      	it	lt
 802e4c0:	18e4      	addlt	r4, r4, r3
 802e4c2:	f7ff ffe7 	bl	802e494 <__malloc_lock>
 802e4c6:	4a20      	ldr	r2, [pc, #128]	; (802e548 <_free_r+0x9c>)
 802e4c8:	9801      	ldr	r0, [sp, #4]
 802e4ca:	6813      	ldr	r3, [r2, #0]
 802e4cc:	4615      	mov	r5, r2
 802e4ce:	b933      	cbnz	r3, 802e4de <_free_r+0x32>
 802e4d0:	6063      	str	r3, [r4, #4]
 802e4d2:	6014      	str	r4, [r2, #0]
 802e4d4:	b003      	add	sp, #12
 802e4d6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802e4da:	f7ff bfe1 	b.w	802e4a0 <__malloc_unlock>
 802e4de:	42a3      	cmp	r3, r4
 802e4e0:	d90b      	bls.n	802e4fa <_free_r+0x4e>
 802e4e2:	6821      	ldr	r1, [r4, #0]
 802e4e4:	1862      	adds	r2, r4, r1
 802e4e6:	4293      	cmp	r3, r2
 802e4e8:	bf04      	itt	eq
 802e4ea:	681a      	ldreq	r2, [r3, #0]
 802e4ec:	685b      	ldreq	r3, [r3, #4]
 802e4ee:	6063      	str	r3, [r4, #4]
 802e4f0:	bf04      	itt	eq
 802e4f2:	1852      	addeq	r2, r2, r1
 802e4f4:	6022      	streq	r2, [r4, #0]
 802e4f6:	602c      	str	r4, [r5, #0]
 802e4f8:	e7ec      	b.n	802e4d4 <_free_r+0x28>
 802e4fa:	461a      	mov	r2, r3
 802e4fc:	685b      	ldr	r3, [r3, #4]
 802e4fe:	b10b      	cbz	r3, 802e504 <_free_r+0x58>
 802e500:	42a3      	cmp	r3, r4
 802e502:	d9fa      	bls.n	802e4fa <_free_r+0x4e>
 802e504:	6811      	ldr	r1, [r2, #0]
 802e506:	1855      	adds	r5, r2, r1
 802e508:	42a5      	cmp	r5, r4
 802e50a:	d10b      	bne.n	802e524 <_free_r+0x78>
 802e50c:	6824      	ldr	r4, [r4, #0]
 802e50e:	4421      	add	r1, r4
 802e510:	1854      	adds	r4, r2, r1
 802e512:	42a3      	cmp	r3, r4
 802e514:	6011      	str	r1, [r2, #0]
 802e516:	d1dd      	bne.n	802e4d4 <_free_r+0x28>
 802e518:	681c      	ldr	r4, [r3, #0]
 802e51a:	685b      	ldr	r3, [r3, #4]
 802e51c:	6053      	str	r3, [r2, #4]
 802e51e:	4421      	add	r1, r4
 802e520:	6011      	str	r1, [r2, #0]
 802e522:	e7d7      	b.n	802e4d4 <_free_r+0x28>
 802e524:	d902      	bls.n	802e52c <_free_r+0x80>
 802e526:	230c      	movs	r3, #12
 802e528:	6003      	str	r3, [r0, #0]
 802e52a:	e7d3      	b.n	802e4d4 <_free_r+0x28>
 802e52c:	6825      	ldr	r5, [r4, #0]
 802e52e:	1961      	adds	r1, r4, r5
 802e530:	428b      	cmp	r3, r1
 802e532:	bf04      	itt	eq
 802e534:	6819      	ldreq	r1, [r3, #0]
 802e536:	685b      	ldreq	r3, [r3, #4]
 802e538:	6063      	str	r3, [r4, #4]
 802e53a:	bf04      	itt	eq
 802e53c:	1949      	addeq	r1, r1, r5
 802e53e:	6021      	streq	r1, [r4, #0]
 802e540:	6054      	str	r4, [r2, #4]
 802e542:	e7c7      	b.n	802e4d4 <_free_r+0x28>
 802e544:	b003      	add	sp, #12
 802e546:	bd30      	pop	{r4, r5, pc}
 802e548:	20008030 	.word	0x20008030

0802e54c <__ssputs_r>:
 802e54c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802e550:	688e      	ldr	r6, [r1, #8]
 802e552:	429e      	cmp	r6, r3
 802e554:	4682      	mov	sl, r0
 802e556:	460c      	mov	r4, r1
 802e558:	4690      	mov	r8, r2
 802e55a:	461f      	mov	r7, r3
 802e55c:	d838      	bhi.n	802e5d0 <__ssputs_r+0x84>
 802e55e:	898a      	ldrh	r2, [r1, #12]
 802e560:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802e564:	d032      	beq.n	802e5cc <__ssputs_r+0x80>
 802e566:	6825      	ldr	r5, [r4, #0]
 802e568:	6909      	ldr	r1, [r1, #16]
 802e56a:	eba5 0901 	sub.w	r9, r5, r1
 802e56e:	6965      	ldr	r5, [r4, #20]
 802e570:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802e574:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802e578:	3301      	adds	r3, #1
 802e57a:	444b      	add	r3, r9
 802e57c:	106d      	asrs	r5, r5, #1
 802e57e:	429d      	cmp	r5, r3
 802e580:	bf38      	it	cc
 802e582:	461d      	movcc	r5, r3
 802e584:	0553      	lsls	r3, r2, #21
 802e586:	d531      	bpl.n	802e5ec <__ssputs_r+0xa0>
 802e588:	4629      	mov	r1, r5
 802e58a:	f7ff fe77 	bl	802e27c <_malloc_r>
 802e58e:	4606      	mov	r6, r0
 802e590:	b950      	cbnz	r0, 802e5a8 <__ssputs_r+0x5c>
 802e592:	230c      	movs	r3, #12
 802e594:	f8ca 3000 	str.w	r3, [sl]
 802e598:	89a3      	ldrh	r3, [r4, #12]
 802e59a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802e59e:	81a3      	strh	r3, [r4, #12]
 802e5a0:	f04f 30ff 	mov.w	r0, #4294967295
 802e5a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802e5a8:	6921      	ldr	r1, [r4, #16]
 802e5aa:	464a      	mov	r2, r9
 802e5ac:	f7ff fe50 	bl	802e250 <memcpy>
 802e5b0:	89a3      	ldrh	r3, [r4, #12]
 802e5b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802e5b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802e5ba:	81a3      	strh	r3, [r4, #12]
 802e5bc:	6126      	str	r6, [r4, #16]
 802e5be:	6165      	str	r5, [r4, #20]
 802e5c0:	444e      	add	r6, r9
 802e5c2:	eba5 0509 	sub.w	r5, r5, r9
 802e5c6:	6026      	str	r6, [r4, #0]
 802e5c8:	60a5      	str	r5, [r4, #8]
 802e5ca:	463e      	mov	r6, r7
 802e5cc:	42be      	cmp	r6, r7
 802e5ce:	d900      	bls.n	802e5d2 <__ssputs_r+0x86>
 802e5d0:	463e      	mov	r6, r7
 802e5d2:	4632      	mov	r2, r6
 802e5d4:	6820      	ldr	r0, [r4, #0]
 802e5d6:	4641      	mov	r1, r8
 802e5d8:	f000 faa8 	bl	802eb2c <memmove>
 802e5dc:	68a3      	ldr	r3, [r4, #8]
 802e5de:	6822      	ldr	r2, [r4, #0]
 802e5e0:	1b9b      	subs	r3, r3, r6
 802e5e2:	4432      	add	r2, r6
 802e5e4:	60a3      	str	r3, [r4, #8]
 802e5e6:	6022      	str	r2, [r4, #0]
 802e5e8:	2000      	movs	r0, #0
 802e5ea:	e7db      	b.n	802e5a4 <__ssputs_r+0x58>
 802e5ec:	462a      	mov	r2, r5
 802e5ee:	f000 fab7 	bl	802eb60 <_realloc_r>
 802e5f2:	4606      	mov	r6, r0
 802e5f4:	2800      	cmp	r0, #0
 802e5f6:	d1e1      	bne.n	802e5bc <__ssputs_r+0x70>
 802e5f8:	6921      	ldr	r1, [r4, #16]
 802e5fa:	4650      	mov	r0, sl
 802e5fc:	f7ff ff56 	bl	802e4ac <_free_r>
 802e600:	e7c7      	b.n	802e592 <__ssputs_r+0x46>
	...

0802e604 <_svfiprintf_r>:
 802e604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802e608:	4698      	mov	r8, r3
 802e60a:	898b      	ldrh	r3, [r1, #12]
 802e60c:	061b      	lsls	r3, r3, #24
 802e60e:	b09d      	sub	sp, #116	; 0x74
 802e610:	4607      	mov	r7, r0
 802e612:	460d      	mov	r5, r1
 802e614:	4614      	mov	r4, r2
 802e616:	d50e      	bpl.n	802e636 <_svfiprintf_r+0x32>
 802e618:	690b      	ldr	r3, [r1, #16]
 802e61a:	b963      	cbnz	r3, 802e636 <_svfiprintf_r+0x32>
 802e61c:	2140      	movs	r1, #64	; 0x40
 802e61e:	f7ff fe2d 	bl	802e27c <_malloc_r>
 802e622:	6028      	str	r0, [r5, #0]
 802e624:	6128      	str	r0, [r5, #16]
 802e626:	b920      	cbnz	r0, 802e632 <_svfiprintf_r+0x2e>
 802e628:	230c      	movs	r3, #12
 802e62a:	603b      	str	r3, [r7, #0]
 802e62c:	f04f 30ff 	mov.w	r0, #4294967295
 802e630:	e0d1      	b.n	802e7d6 <_svfiprintf_r+0x1d2>
 802e632:	2340      	movs	r3, #64	; 0x40
 802e634:	616b      	str	r3, [r5, #20]
 802e636:	2300      	movs	r3, #0
 802e638:	9309      	str	r3, [sp, #36]	; 0x24
 802e63a:	2320      	movs	r3, #32
 802e63c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802e640:	f8cd 800c 	str.w	r8, [sp, #12]
 802e644:	2330      	movs	r3, #48	; 0x30
 802e646:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 802e7f0 <_svfiprintf_r+0x1ec>
 802e64a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802e64e:	f04f 0901 	mov.w	r9, #1
 802e652:	4623      	mov	r3, r4
 802e654:	469a      	mov	sl, r3
 802e656:	f813 2b01 	ldrb.w	r2, [r3], #1
 802e65a:	b10a      	cbz	r2, 802e660 <_svfiprintf_r+0x5c>
 802e65c:	2a25      	cmp	r2, #37	; 0x25
 802e65e:	d1f9      	bne.n	802e654 <_svfiprintf_r+0x50>
 802e660:	ebba 0b04 	subs.w	fp, sl, r4
 802e664:	d00b      	beq.n	802e67e <_svfiprintf_r+0x7a>
 802e666:	465b      	mov	r3, fp
 802e668:	4622      	mov	r2, r4
 802e66a:	4629      	mov	r1, r5
 802e66c:	4638      	mov	r0, r7
 802e66e:	f7ff ff6d 	bl	802e54c <__ssputs_r>
 802e672:	3001      	adds	r0, #1
 802e674:	f000 80aa 	beq.w	802e7cc <_svfiprintf_r+0x1c8>
 802e678:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802e67a:	445a      	add	r2, fp
 802e67c:	9209      	str	r2, [sp, #36]	; 0x24
 802e67e:	f89a 3000 	ldrb.w	r3, [sl]
 802e682:	2b00      	cmp	r3, #0
 802e684:	f000 80a2 	beq.w	802e7cc <_svfiprintf_r+0x1c8>
 802e688:	2300      	movs	r3, #0
 802e68a:	f04f 32ff 	mov.w	r2, #4294967295
 802e68e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802e692:	f10a 0a01 	add.w	sl, sl, #1
 802e696:	9304      	str	r3, [sp, #16]
 802e698:	9307      	str	r3, [sp, #28]
 802e69a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802e69e:	931a      	str	r3, [sp, #104]	; 0x68
 802e6a0:	4654      	mov	r4, sl
 802e6a2:	2205      	movs	r2, #5
 802e6a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 802e6a8:	4851      	ldr	r0, [pc, #324]	; (802e7f0 <_svfiprintf_r+0x1ec>)
 802e6aa:	f7e1 fd99 	bl	80101e0 <memchr>
 802e6ae:	9a04      	ldr	r2, [sp, #16]
 802e6b0:	b9d8      	cbnz	r0, 802e6ea <_svfiprintf_r+0xe6>
 802e6b2:	06d0      	lsls	r0, r2, #27
 802e6b4:	bf44      	itt	mi
 802e6b6:	2320      	movmi	r3, #32
 802e6b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802e6bc:	0711      	lsls	r1, r2, #28
 802e6be:	bf44      	itt	mi
 802e6c0:	232b      	movmi	r3, #43	; 0x2b
 802e6c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802e6c6:	f89a 3000 	ldrb.w	r3, [sl]
 802e6ca:	2b2a      	cmp	r3, #42	; 0x2a
 802e6cc:	d015      	beq.n	802e6fa <_svfiprintf_r+0xf6>
 802e6ce:	9a07      	ldr	r2, [sp, #28]
 802e6d0:	4654      	mov	r4, sl
 802e6d2:	2000      	movs	r0, #0
 802e6d4:	f04f 0c0a 	mov.w	ip, #10
 802e6d8:	4621      	mov	r1, r4
 802e6da:	f811 3b01 	ldrb.w	r3, [r1], #1
 802e6de:	3b30      	subs	r3, #48	; 0x30
 802e6e0:	2b09      	cmp	r3, #9
 802e6e2:	d94e      	bls.n	802e782 <_svfiprintf_r+0x17e>
 802e6e4:	b1b0      	cbz	r0, 802e714 <_svfiprintf_r+0x110>
 802e6e6:	9207      	str	r2, [sp, #28]
 802e6e8:	e014      	b.n	802e714 <_svfiprintf_r+0x110>
 802e6ea:	eba0 0308 	sub.w	r3, r0, r8
 802e6ee:	fa09 f303 	lsl.w	r3, r9, r3
 802e6f2:	4313      	orrs	r3, r2
 802e6f4:	9304      	str	r3, [sp, #16]
 802e6f6:	46a2      	mov	sl, r4
 802e6f8:	e7d2      	b.n	802e6a0 <_svfiprintf_r+0x9c>
 802e6fa:	9b03      	ldr	r3, [sp, #12]
 802e6fc:	1d19      	adds	r1, r3, #4
 802e6fe:	681b      	ldr	r3, [r3, #0]
 802e700:	9103      	str	r1, [sp, #12]
 802e702:	2b00      	cmp	r3, #0
 802e704:	bfbb      	ittet	lt
 802e706:	425b      	neglt	r3, r3
 802e708:	f042 0202 	orrlt.w	r2, r2, #2
 802e70c:	9307      	strge	r3, [sp, #28]
 802e70e:	9307      	strlt	r3, [sp, #28]
 802e710:	bfb8      	it	lt
 802e712:	9204      	strlt	r2, [sp, #16]
 802e714:	7823      	ldrb	r3, [r4, #0]
 802e716:	2b2e      	cmp	r3, #46	; 0x2e
 802e718:	d10c      	bne.n	802e734 <_svfiprintf_r+0x130>
 802e71a:	7863      	ldrb	r3, [r4, #1]
 802e71c:	2b2a      	cmp	r3, #42	; 0x2a
 802e71e:	d135      	bne.n	802e78c <_svfiprintf_r+0x188>
 802e720:	9b03      	ldr	r3, [sp, #12]
 802e722:	1d1a      	adds	r2, r3, #4
 802e724:	681b      	ldr	r3, [r3, #0]
 802e726:	9203      	str	r2, [sp, #12]
 802e728:	2b00      	cmp	r3, #0
 802e72a:	bfb8      	it	lt
 802e72c:	f04f 33ff 	movlt.w	r3, #4294967295
 802e730:	3402      	adds	r4, #2
 802e732:	9305      	str	r3, [sp, #20]
 802e734:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 802e800 <_svfiprintf_r+0x1fc>
 802e738:	7821      	ldrb	r1, [r4, #0]
 802e73a:	2203      	movs	r2, #3
 802e73c:	4650      	mov	r0, sl
 802e73e:	f7e1 fd4f 	bl	80101e0 <memchr>
 802e742:	b140      	cbz	r0, 802e756 <_svfiprintf_r+0x152>
 802e744:	2340      	movs	r3, #64	; 0x40
 802e746:	eba0 000a 	sub.w	r0, r0, sl
 802e74a:	fa03 f000 	lsl.w	r0, r3, r0
 802e74e:	9b04      	ldr	r3, [sp, #16]
 802e750:	4303      	orrs	r3, r0
 802e752:	3401      	adds	r4, #1
 802e754:	9304      	str	r3, [sp, #16]
 802e756:	f814 1b01 	ldrb.w	r1, [r4], #1
 802e75a:	4826      	ldr	r0, [pc, #152]	; (802e7f4 <_svfiprintf_r+0x1f0>)
 802e75c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802e760:	2206      	movs	r2, #6
 802e762:	f7e1 fd3d 	bl	80101e0 <memchr>
 802e766:	2800      	cmp	r0, #0
 802e768:	d038      	beq.n	802e7dc <_svfiprintf_r+0x1d8>
 802e76a:	4b23      	ldr	r3, [pc, #140]	; (802e7f8 <_svfiprintf_r+0x1f4>)
 802e76c:	bb1b      	cbnz	r3, 802e7b6 <_svfiprintf_r+0x1b2>
 802e76e:	9b03      	ldr	r3, [sp, #12]
 802e770:	3307      	adds	r3, #7
 802e772:	f023 0307 	bic.w	r3, r3, #7
 802e776:	3308      	adds	r3, #8
 802e778:	9303      	str	r3, [sp, #12]
 802e77a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802e77c:	4433      	add	r3, r6
 802e77e:	9309      	str	r3, [sp, #36]	; 0x24
 802e780:	e767      	b.n	802e652 <_svfiprintf_r+0x4e>
 802e782:	fb0c 3202 	mla	r2, ip, r2, r3
 802e786:	460c      	mov	r4, r1
 802e788:	2001      	movs	r0, #1
 802e78a:	e7a5      	b.n	802e6d8 <_svfiprintf_r+0xd4>
 802e78c:	2300      	movs	r3, #0
 802e78e:	3401      	adds	r4, #1
 802e790:	9305      	str	r3, [sp, #20]
 802e792:	4619      	mov	r1, r3
 802e794:	f04f 0c0a 	mov.w	ip, #10
 802e798:	4620      	mov	r0, r4
 802e79a:	f810 2b01 	ldrb.w	r2, [r0], #1
 802e79e:	3a30      	subs	r2, #48	; 0x30
 802e7a0:	2a09      	cmp	r2, #9
 802e7a2:	d903      	bls.n	802e7ac <_svfiprintf_r+0x1a8>
 802e7a4:	2b00      	cmp	r3, #0
 802e7a6:	d0c5      	beq.n	802e734 <_svfiprintf_r+0x130>
 802e7a8:	9105      	str	r1, [sp, #20]
 802e7aa:	e7c3      	b.n	802e734 <_svfiprintf_r+0x130>
 802e7ac:	fb0c 2101 	mla	r1, ip, r1, r2
 802e7b0:	4604      	mov	r4, r0
 802e7b2:	2301      	movs	r3, #1
 802e7b4:	e7f0      	b.n	802e798 <_svfiprintf_r+0x194>
 802e7b6:	ab03      	add	r3, sp, #12
 802e7b8:	9300      	str	r3, [sp, #0]
 802e7ba:	462a      	mov	r2, r5
 802e7bc:	4b0f      	ldr	r3, [pc, #60]	; (802e7fc <_svfiprintf_r+0x1f8>)
 802e7be:	a904      	add	r1, sp, #16
 802e7c0:	4638      	mov	r0, r7
 802e7c2:	f3af 8000 	nop.w
 802e7c6:	1c42      	adds	r2, r0, #1
 802e7c8:	4606      	mov	r6, r0
 802e7ca:	d1d6      	bne.n	802e77a <_svfiprintf_r+0x176>
 802e7cc:	89ab      	ldrh	r3, [r5, #12]
 802e7ce:	065b      	lsls	r3, r3, #25
 802e7d0:	f53f af2c 	bmi.w	802e62c <_svfiprintf_r+0x28>
 802e7d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 802e7d6:	b01d      	add	sp, #116	; 0x74
 802e7d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802e7dc:	ab03      	add	r3, sp, #12
 802e7de:	9300      	str	r3, [sp, #0]
 802e7e0:	462a      	mov	r2, r5
 802e7e2:	4b06      	ldr	r3, [pc, #24]	; (802e7fc <_svfiprintf_r+0x1f8>)
 802e7e4:	a904      	add	r1, sp, #16
 802e7e6:	4638      	mov	r0, r7
 802e7e8:	f000 f87a 	bl	802e8e0 <_printf_i>
 802e7ec:	e7eb      	b.n	802e7c6 <_svfiprintf_r+0x1c2>
 802e7ee:	bf00      	nop
 802e7f0:	080301cc 	.word	0x080301cc
 802e7f4:	080301d6 	.word	0x080301d6
 802e7f8:	00000000 	.word	0x00000000
 802e7fc:	0802e54d 	.word	0x0802e54d
 802e800:	080301d2 	.word	0x080301d2

0802e804 <_printf_common>:
 802e804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802e808:	4616      	mov	r6, r2
 802e80a:	4699      	mov	r9, r3
 802e80c:	688a      	ldr	r2, [r1, #8]
 802e80e:	690b      	ldr	r3, [r1, #16]
 802e810:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802e814:	4293      	cmp	r3, r2
 802e816:	bfb8      	it	lt
 802e818:	4613      	movlt	r3, r2
 802e81a:	6033      	str	r3, [r6, #0]
 802e81c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802e820:	4607      	mov	r7, r0
 802e822:	460c      	mov	r4, r1
 802e824:	b10a      	cbz	r2, 802e82a <_printf_common+0x26>
 802e826:	3301      	adds	r3, #1
 802e828:	6033      	str	r3, [r6, #0]
 802e82a:	6823      	ldr	r3, [r4, #0]
 802e82c:	0699      	lsls	r1, r3, #26
 802e82e:	bf42      	ittt	mi
 802e830:	6833      	ldrmi	r3, [r6, #0]
 802e832:	3302      	addmi	r3, #2
 802e834:	6033      	strmi	r3, [r6, #0]
 802e836:	6825      	ldr	r5, [r4, #0]
 802e838:	f015 0506 	ands.w	r5, r5, #6
 802e83c:	d106      	bne.n	802e84c <_printf_common+0x48>
 802e83e:	f104 0a19 	add.w	sl, r4, #25
 802e842:	68e3      	ldr	r3, [r4, #12]
 802e844:	6832      	ldr	r2, [r6, #0]
 802e846:	1a9b      	subs	r3, r3, r2
 802e848:	42ab      	cmp	r3, r5
 802e84a:	dc26      	bgt.n	802e89a <_printf_common+0x96>
 802e84c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802e850:	1e13      	subs	r3, r2, #0
 802e852:	6822      	ldr	r2, [r4, #0]
 802e854:	bf18      	it	ne
 802e856:	2301      	movne	r3, #1
 802e858:	0692      	lsls	r2, r2, #26
 802e85a:	d42b      	bmi.n	802e8b4 <_printf_common+0xb0>
 802e85c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802e860:	4649      	mov	r1, r9
 802e862:	4638      	mov	r0, r7
 802e864:	47c0      	blx	r8
 802e866:	3001      	adds	r0, #1
 802e868:	d01e      	beq.n	802e8a8 <_printf_common+0xa4>
 802e86a:	6823      	ldr	r3, [r4, #0]
 802e86c:	68e5      	ldr	r5, [r4, #12]
 802e86e:	6832      	ldr	r2, [r6, #0]
 802e870:	f003 0306 	and.w	r3, r3, #6
 802e874:	2b04      	cmp	r3, #4
 802e876:	bf08      	it	eq
 802e878:	1aad      	subeq	r5, r5, r2
 802e87a:	68a3      	ldr	r3, [r4, #8]
 802e87c:	6922      	ldr	r2, [r4, #16]
 802e87e:	bf0c      	ite	eq
 802e880:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802e884:	2500      	movne	r5, #0
 802e886:	4293      	cmp	r3, r2
 802e888:	bfc4      	itt	gt
 802e88a:	1a9b      	subgt	r3, r3, r2
 802e88c:	18ed      	addgt	r5, r5, r3
 802e88e:	2600      	movs	r6, #0
 802e890:	341a      	adds	r4, #26
 802e892:	42b5      	cmp	r5, r6
 802e894:	d11a      	bne.n	802e8cc <_printf_common+0xc8>
 802e896:	2000      	movs	r0, #0
 802e898:	e008      	b.n	802e8ac <_printf_common+0xa8>
 802e89a:	2301      	movs	r3, #1
 802e89c:	4652      	mov	r2, sl
 802e89e:	4649      	mov	r1, r9
 802e8a0:	4638      	mov	r0, r7
 802e8a2:	47c0      	blx	r8
 802e8a4:	3001      	adds	r0, #1
 802e8a6:	d103      	bne.n	802e8b0 <_printf_common+0xac>
 802e8a8:	f04f 30ff 	mov.w	r0, #4294967295
 802e8ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802e8b0:	3501      	adds	r5, #1
 802e8b2:	e7c6      	b.n	802e842 <_printf_common+0x3e>
 802e8b4:	18e1      	adds	r1, r4, r3
 802e8b6:	1c5a      	adds	r2, r3, #1
 802e8b8:	2030      	movs	r0, #48	; 0x30
 802e8ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802e8be:	4422      	add	r2, r4
 802e8c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802e8c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802e8c8:	3302      	adds	r3, #2
 802e8ca:	e7c7      	b.n	802e85c <_printf_common+0x58>
 802e8cc:	2301      	movs	r3, #1
 802e8ce:	4622      	mov	r2, r4
 802e8d0:	4649      	mov	r1, r9
 802e8d2:	4638      	mov	r0, r7
 802e8d4:	47c0      	blx	r8
 802e8d6:	3001      	adds	r0, #1
 802e8d8:	d0e6      	beq.n	802e8a8 <_printf_common+0xa4>
 802e8da:	3601      	adds	r6, #1
 802e8dc:	e7d9      	b.n	802e892 <_printf_common+0x8e>
	...

0802e8e0 <_printf_i>:
 802e8e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802e8e4:	460c      	mov	r4, r1
 802e8e6:	4691      	mov	r9, r2
 802e8e8:	7e27      	ldrb	r7, [r4, #24]
 802e8ea:	990c      	ldr	r1, [sp, #48]	; 0x30
 802e8ec:	2f78      	cmp	r7, #120	; 0x78
 802e8ee:	4680      	mov	r8, r0
 802e8f0:	469a      	mov	sl, r3
 802e8f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802e8f6:	d807      	bhi.n	802e908 <_printf_i+0x28>
 802e8f8:	2f62      	cmp	r7, #98	; 0x62
 802e8fa:	d80a      	bhi.n	802e912 <_printf_i+0x32>
 802e8fc:	2f00      	cmp	r7, #0
 802e8fe:	f000 80d8 	beq.w	802eab2 <_printf_i+0x1d2>
 802e902:	2f58      	cmp	r7, #88	; 0x58
 802e904:	f000 80a3 	beq.w	802ea4e <_printf_i+0x16e>
 802e908:	f104 0642 	add.w	r6, r4, #66	; 0x42
 802e90c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802e910:	e03a      	b.n	802e988 <_printf_i+0xa8>
 802e912:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802e916:	2b15      	cmp	r3, #21
 802e918:	d8f6      	bhi.n	802e908 <_printf_i+0x28>
 802e91a:	a001      	add	r0, pc, #4	; (adr r0, 802e920 <_printf_i+0x40>)
 802e91c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 802e920:	0802e979 	.word	0x0802e979
 802e924:	0802e98d 	.word	0x0802e98d
 802e928:	0802e909 	.word	0x0802e909
 802e92c:	0802e909 	.word	0x0802e909
 802e930:	0802e909 	.word	0x0802e909
 802e934:	0802e909 	.word	0x0802e909
 802e938:	0802e98d 	.word	0x0802e98d
 802e93c:	0802e909 	.word	0x0802e909
 802e940:	0802e909 	.word	0x0802e909
 802e944:	0802e909 	.word	0x0802e909
 802e948:	0802e909 	.word	0x0802e909
 802e94c:	0802ea99 	.word	0x0802ea99
 802e950:	0802e9bd 	.word	0x0802e9bd
 802e954:	0802ea7b 	.word	0x0802ea7b
 802e958:	0802e909 	.word	0x0802e909
 802e95c:	0802e909 	.word	0x0802e909
 802e960:	0802eabb 	.word	0x0802eabb
 802e964:	0802e909 	.word	0x0802e909
 802e968:	0802e9bd 	.word	0x0802e9bd
 802e96c:	0802e909 	.word	0x0802e909
 802e970:	0802e909 	.word	0x0802e909
 802e974:	0802ea83 	.word	0x0802ea83
 802e978:	680b      	ldr	r3, [r1, #0]
 802e97a:	1d1a      	adds	r2, r3, #4
 802e97c:	681b      	ldr	r3, [r3, #0]
 802e97e:	600a      	str	r2, [r1, #0]
 802e980:	f104 0642 	add.w	r6, r4, #66	; 0x42
 802e984:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802e988:	2301      	movs	r3, #1
 802e98a:	e0a3      	b.n	802ead4 <_printf_i+0x1f4>
 802e98c:	6825      	ldr	r5, [r4, #0]
 802e98e:	6808      	ldr	r0, [r1, #0]
 802e990:	062e      	lsls	r6, r5, #24
 802e992:	f100 0304 	add.w	r3, r0, #4
 802e996:	d50a      	bpl.n	802e9ae <_printf_i+0xce>
 802e998:	6805      	ldr	r5, [r0, #0]
 802e99a:	600b      	str	r3, [r1, #0]
 802e99c:	2d00      	cmp	r5, #0
 802e99e:	da03      	bge.n	802e9a8 <_printf_i+0xc8>
 802e9a0:	232d      	movs	r3, #45	; 0x2d
 802e9a2:	426d      	negs	r5, r5
 802e9a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802e9a8:	485e      	ldr	r0, [pc, #376]	; (802eb24 <_printf_i+0x244>)
 802e9aa:	230a      	movs	r3, #10
 802e9ac:	e019      	b.n	802e9e2 <_printf_i+0x102>
 802e9ae:	f015 0f40 	tst.w	r5, #64	; 0x40
 802e9b2:	6805      	ldr	r5, [r0, #0]
 802e9b4:	600b      	str	r3, [r1, #0]
 802e9b6:	bf18      	it	ne
 802e9b8:	b22d      	sxthne	r5, r5
 802e9ba:	e7ef      	b.n	802e99c <_printf_i+0xbc>
 802e9bc:	680b      	ldr	r3, [r1, #0]
 802e9be:	6825      	ldr	r5, [r4, #0]
 802e9c0:	1d18      	adds	r0, r3, #4
 802e9c2:	6008      	str	r0, [r1, #0]
 802e9c4:	0628      	lsls	r0, r5, #24
 802e9c6:	d501      	bpl.n	802e9cc <_printf_i+0xec>
 802e9c8:	681d      	ldr	r5, [r3, #0]
 802e9ca:	e002      	b.n	802e9d2 <_printf_i+0xf2>
 802e9cc:	0669      	lsls	r1, r5, #25
 802e9ce:	d5fb      	bpl.n	802e9c8 <_printf_i+0xe8>
 802e9d0:	881d      	ldrh	r5, [r3, #0]
 802e9d2:	4854      	ldr	r0, [pc, #336]	; (802eb24 <_printf_i+0x244>)
 802e9d4:	2f6f      	cmp	r7, #111	; 0x6f
 802e9d6:	bf0c      	ite	eq
 802e9d8:	2308      	moveq	r3, #8
 802e9da:	230a      	movne	r3, #10
 802e9dc:	2100      	movs	r1, #0
 802e9de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802e9e2:	6866      	ldr	r6, [r4, #4]
 802e9e4:	60a6      	str	r6, [r4, #8]
 802e9e6:	2e00      	cmp	r6, #0
 802e9e8:	bfa2      	ittt	ge
 802e9ea:	6821      	ldrge	r1, [r4, #0]
 802e9ec:	f021 0104 	bicge.w	r1, r1, #4
 802e9f0:	6021      	strge	r1, [r4, #0]
 802e9f2:	b90d      	cbnz	r5, 802e9f8 <_printf_i+0x118>
 802e9f4:	2e00      	cmp	r6, #0
 802e9f6:	d04d      	beq.n	802ea94 <_printf_i+0x1b4>
 802e9f8:	4616      	mov	r6, r2
 802e9fa:	fbb5 f1f3 	udiv	r1, r5, r3
 802e9fe:	fb03 5711 	mls	r7, r3, r1, r5
 802ea02:	5dc7      	ldrb	r7, [r0, r7]
 802ea04:	f806 7d01 	strb.w	r7, [r6, #-1]!
 802ea08:	462f      	mov	r7, r5
 802ea0a:	42bb      	cmp	r3, r7
 802ea0c:	460d      	mov	r5, r1
 802ea0e:	d9f4      	bls.n	802e9fa <_printf_i+0x11a>
 802ea10:	2b08      	cmp	r3, #8
 802ea12:	d10b      	bne.n	802ea2c <_printf_i+0x14c>
 802ea14:	6823      	ldr	r3, [r4, #0]
 802ea16:	07df      	lsls	r7, r3, #31
 802ea18:	d508      	bpl.n	802ea2c <_printf_i+0x14c>
 802ea1a:	6923      	ldr	r3, [r4, #16]
 802ea1c:	6861      	ldr	r1, [r4, #4]
 802ea1e:	4299      	cmp	r1, r3
 802ea20:	bfde      	ittt	le
 802ea22:	2330      	movle	r3, #48	; 0x30
 802ea24:	f806 3c01 	strble.w	r3, [r6, #-1]
 802ea28:	f106 36ff 	addle.w	r6, r6, #4294967295
 802ea2c:	1b92      	subs	r2, r2, r6
 802ea2e:	6122      	str	r2, [r4, #16]
 802ea30:	f8cd a000 	str.w	sl, [sp]
 802ea34:	464b      	mov	r3, r9
 802ea36:	aa03      	add	r2, sp, #12
 802ea38:	4621      	mov	r1, r4
 802ea3a:	4640      	mov	r0, r8
 802ea3c:	f7ff fee2 	bl	802e804 <_printf_common>
 802ea40:	3001      	adds	r0, #1
 802ea42:	d14c      	bne.n	802eade <_printf_i+0x1fe>
 802ea44:	f04f 30ff 	mov.w	r0, #4294967295
 802ea48:	b004      	add	sp, #16
 802ea4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802ea4e:	4835      	ldr	r0, [pc, #212]	; (802eb24 <_printf_i+0x244>)
 802ea50:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 802ea54:	6823      	ldr	r3, [r4, #0]
 802ea56:	680e      	ldr	r6, [r1, #0]
 802ea58:	061f      	lsls	r7, r3, #24
 802ea5a:	f856 5b04 	ldr.w	r5, [r6], #4
 802ea5e:	600e      	str	r6, [r1, #0]
 802ea60:	d514      	bpl.n	802ea8c <_printf_i+0x1ac>
 802ea62:	07d9      	lsls	r1, r3, #31
 802ea64:	bf44      	itt	mi
 802ea66:	f043 0320 	orrmi.w	r3, r3, #32
 802ea6a:	6023      	strmi	r3, [r4, #0]
 802ea6c:	b91d      	cbnz	r5, 802ea76 <_printf_i+0x196>
 802ea6e:	6823      	ldr	r3, [r4, #0]
 802ea70:	f023 0320 	bic.w	r3, r3, #32
 802ea74:	6023      	str	r3, [r4, #0]
 802ea76:	2310      	movs	r3, #16
 802ea78:	e7b0      	b.n	802e9dc <_printf_i+0xfc>
 802ea7a:	6823      	ldr	r3, [r4, #0]
 802ea7c:	f043 0320 	orr.w	r3, r3, #32
 802ea80:	6023      	str	r3, [r4, #0]
 802ea82:	2378      	movs	r3, #120	; 0x78
 802ea84:	4828      	ldr	r0, [pc, #160]	; (802eb28 <_printf_i+0x248>)
 802ea86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802ea8a:	e7e3      	b.n	802ea54 <_printf_i+0x174>
 802ea8c:	065e      	lsls	r6, r3, #25
 802ea8e:	bf48      	it	mi
 802ea90:	b2ad      	uxthmi	r5, r5
 802ea92:	e7e6      	b.n	802ea62 <_printf_i+0x182>
 802ea94:	4616      	mov	r6, r2
 802ea96:	e7bb      	b.n	802ea10 <_printf_i+0x130>
 802ea98:	680b      	ldr	r3, [r1, #0]
 802ea9a:	6826      	ldr	r6, [r4, #0]
 802ea9c:	6960      	ldr	r0, [r4, #20]
 802ea9e:	1d1d      	adds	r5, r3, #4
 802eaa0:	600d      	str	r5, [r1, #0]
 802eaa2:	0635      	lsls	r5, r6, #24
 802eaa4:	681b      	ldr	r3, [r3, #0]
 802eaa6:	d501      	bpl.n	802eaac <_printf_i+0x1cc>
 802eaa8:	6018      	str	r0, [r3, #0]
 802eaaa:	e002      	b.n	802eab2 <_printf_i+0x1d2>
 802eaac:	0671      	lsls	r1, r6, #25
 802eaae:	d5fb      	bpl.n	802eaa8 <_printf_i+0x1c8>
 802eab0:	8018      	strh	r0, [r3, #0]
 802eab2:	2300      	movs	r3, #0
 802eab4:	6123      	str	r3, [r4, #16]
 802eab6:	4616      	mov	r6, r2
 802eab8:	e7ba      	b.n	802ea30 <_printf_i+0x150>
 802eaba:	680b      	ldr	r3, [r1, #0]
 802eabc:	1d1a      	adds	r2, r3, #4
 802eabe:	600a      	str	r2, [r1, #0]
 802eac0:	681e      	ldr	r6, [r3, #0]
 802eac2:	6862      	ldr	r2, [r4, #4]
 802eac4:	2100      	movs	r1, #0
 802eac6:	4630      	mov	r0, r6
 802eac8:	f7e1 fb8a 	bl	80101e0 <memchr>
 802eacc:	b108      	cbz	r0, 802ead2 <_printf_i+0x1f2>
 802eace:	1b80      	subs	r0, r0, r6
 802ead0:	6060      	str	r0, [r4, #4]
 802ead2:	6863      	ldr	r3, [r4, #4]
 802ead4:	6123      	str	r3, [r4, #16]
 802ead6:	2300      	movs	r3, #0
 802ead8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802eadc:	e7a8      	b.n	802ea30 <_printf_i+0x150>
 802eade:	6923      	ldr	r3, [r4, #16]
 802eae0:	4632      	mov	r2, r6
 802eae2:	4649      	mov	r1, r9
 802eae4:	4640      	mov	r0, r8
 802eae6:	47d0      	blx	sl
 802eae8:	3001      	adds	r0, #1
 802eaea:	d0ab      	beq.n	802ea44 <_printf_i+0x164>
 802eaec:	6823      	ldr	r3, [r4, #0]
 802eaee:	079b      	lsls	r3, r3, #30
 802eaf0:	d413      	bmi.n	802eb1a <_printf_i+0x23a>
 802eaf2:	68e0      	ldr	r0, [r4, #12]
 802eaf4:	9b03      	ldr	r3, [sp, #12]
 802eaf6:	4298      	cmp	r0, r3
 802eaf8:	bfb8      	it	lt
 802eafa:	4618      	movlt	r0, r3
 802eafc:	e7a4      	b.n	802ea48 <_printf_i+0x168>
 802eafe:	2301      	movs	r3, #1
 802eb00:	4632      	mov	r2, r6
 802eb02:	4649      	mov	r1, r9
 802eb04:	4640      	mov	r0, r8
 802eb06:	47d0      	blx	sl
 802eb08:	3001      	adds	r0, #1
 802eb0a:	d09b      	beq.n	802ea44 <_printf_i+0x164>
 802eb0c:	3501      	adds	r5, #1
 802eb0e:	68e3      	ldr	r3, [r4, #12]
 802eb10:	9903      	ldr	r1, [sp, #12]
 802eb12:	1a5b      	subs	r3, r3, r1
 802eb14:	42ab      	cmp	r3, r5
 802eb16:	dcf2      	bgt.n	802eafe <_printf_i+0x21e>
 802eb18:	e7eb      	b.n	802eaf2 <_printf_i+0x212>
 802eb1a:	2500      	movs	r5, #0
 802eb1c:	f104 0619 	add.w	r6, r4, #25
 802eb20:	e7f5      	b.n	802eb0e <_printf_i+0x22e>
 802eb22:	bf00      	nop
 802eb24:	080301dd 	.word	0x080301dd
 802eb28:	080301ee 	.word	0x080301ee

0802eb2c <memmove>:
 802eb2c:	4288      	cmp	r0, r1
 802eb2e:	b510      	push	{r4, lr}
 802eb30:	eb01 0402 	add.w	r4, r1, r2
 802eb34:	d902      	bls.n	802eb3c <memmove+0x10>
 802eb36:	4284      	cmp	r4, r0
 802eb38:	4623      	mov	r3, r4
 802eb3a:	d807      	bhi.n	802eb4c <memmove+0x20>
 802eb3c:	1e43      	subs	r3, r0, #1
 802eb3e:	42a1      	cmp	r1, r4
 802eb40:	d008      	beq.n	802eb54 <memmove+0x28>
 802eb42:	f811 2b01 	ldrb.w	r2, [r1], #1
 802eb46:	f803 2f01 	strb.w	r2, [r3, #1]!
 802eb4a:	e7f8      	b.n	802eb3e <memmove+0x12>
 802eb4c:	4402      	add	r2, r0
 802eb4e:	4601      	mov	r1, r0
 802eb50:	428a      	cmp	r2, r1
 802eb52:	d100      	bne.n	802eb56 <memmove+0x2a>
 802eb54:	bd10      	pop	{r4, pc}
 802eb56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802eb5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802eb5e:	e7f7      	b.n	802eb50 <memmove+0x24>

0802eb60 <_realloc_r>:
 802eb60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802eb62:	4607      	mov	r7, r0
 802eb64:	4614      	mov	r4, r2
 802eb66:	460e      	mov	r6, r1
 802eb68:	b921      	cbnz	r1, 802eb74 <_realloc_r+0x14>
 802eb6a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 802eb6e:	4611      	mov	r1, r2
 802eb70:	f7ff bb84 	b.w	802e27c <_malloc_r>
 802eb74:	b922      	cbnz	r2, 802eb80 <_realloc_r+0x20>
 802eb76:	f7ff fc99 	bl	802e4ac <_free_r>
 802eb7a:	4625      	mov	r5, r4
 802eb7c:	4628      	mov	r0, r5
 802eb7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802eb80:	f000 f814 	bl	802ebac <_malloc_usable_size_r>
 802eb84:	42a0      	cmp	r0, r4
 802eb86:	d20f      	bcs.n	802eba8 <_realloc_r+0x48>
 802eb88:	4621      	mov	r1, r4
 802eb8a:	4638      	mov	r0, r7
 802eb8c:	f7ff fb76 	bl	802e27c <_malloc_r>
 802eb90:	4605      	mov	r5, r0
 802eb92:	2800      	cmp	r0, #0
 802eb94:	d0f2      	beq.n	802eb7c <_realloc_r+0x1c>
 802eb96:	4631      	mov	r1, r6
 802eb98:	4622      	mov	r2, r4
 802eb9a:	f7ff fb59 	bl	802e250 <memcpy>
 802eb9e:	4631      	mov	r1, r6
 802eba0:	4638      	mov	r0, r7
 802eba2:	f7ff fc83 	bl	802e4ac <_free_r>
 802eba6:	e7e9      	b.n	802eb7c <_realloc_r+0x1c>
 802eba8:	4635      	mov	r5, r6
 802ebaa:	e7e7      	b.n	802eb7c <_realloc_r+0x1c>

0802ebac <_malloc_usable_size_r>:
 802ebac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802ebb0:	1f18      	subs	r0, r3, #4
 802ebb2:	2b00      	cmp	r3, #0
 802ebb4:	bfbc      	itt	lt
 802ebb6:	580b      	ldrlt	r3, [r1, r0]
 802ebb8:	18c0      	addlt	r0, r0, r3
 802ebba:	4770      	bx	lr

0802ebbc <pow>:
 802ebbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802ebc0:	ec59 8b10 	vmov	r8, r9, d0
 802ebc4:	ec57 6b11 	vmov	r6, r7, d1
 802ebc8:	f000 f8a6 	bl	802ed18 <__ieee754_pow>
 802ebcc:	4b4e      	ldr	r3, [pc, #312]	; (802ed08 <pow+0x14c>)
 802ebce:	f993 3000 	ldrsb.w	r3, [r3]
 802ebd2:	3301      	adds	r3, #1
 802ebd4:	ec55 4b10 	vmov	r4, r5, d0
 802ebd8:	d015      	beq.n	802ec06 <pow+0x4a>
 802ebda:	4632      	mov	r2, r6
 802ebdc:	463b      	mov	r3, r7
 802ebde:	4630      	mov	r0, r6
 802ebe0:	4639      	mov	r1, r7
 802ebe2:	f7e1 ffa3 	bl	8010b2c <__aeabi_dcmpun>
 802ebe6:	b970      	cbnz	r0, 802ec06 <pow+0x4a>
 802ebe8:	4642      	mov	r2, r8
 802ebea:	464b      	mov	r3, r9
 802ebec:	4640      	mov	r0, r8
 802ebee:	4649      	mov	r1, r9
 802ebf0:	f7e1 ff9c 	bl	8010b2c <__aeabi_dcmpun>
 802ebf4:	2200      	movs	r2, #0
 802ebf6:	2300      	movs	r3, #0
 802ebf8:	b148      	cbz	r0, 802ec0e <pow+0x52>
 802ebfa:	4630      	mov	r0, r6
 802ebfc:	4639      	mov	r1, r7
 802ebfe:	f7e1 ff63 	bl	8010ac8 <__aeabi_dcmpeq>
 802ec02:	2800      	cmp	r0, #0
 802ec04:	d17d      	bne.n	802ed02 <pow+0x146>
 802ec06:	ec45 4b10 	vmov	d0, r4, r5
 802ec0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802ec0e:	4640      	mov	r0, r8
 802ec10:	4649      	mov	r1, r9
 802ec12:	f7e1 ff59 	bl	8010ac8 <__aeabi_dcmpeq>
 802ec16:	b1e0      	cbz	r0, 802ec52 <pow+0x96>
 802ec18:	2200      	movs	r2, #0
 802ec1a:	2300      	movs	r3, #0
 802ec1c:	4630      	mov	r0, r6
 802ec1e:	4639      	mov	r1, r7
 802ec20:	f7e1 ff52 	bl	8010ac8 <__aeabi_dcmpeq>
 802ec24:	2800      	cmp	r0, #0
 802ec26:	d16c      	bne.n	802ed02 <pow+0x146>
 802ec28:	ec47 6b10 	vmov	d0, r6, r7
 802ec2c:	f000 fe53 	bl	802f8d6 <finite>
 802ec30:	2800      	cmp	r0, #0
 802ec32:	d0e8      	beq.n	802ec06 <pow+0x4a>
 802ec34:	2200      	movs	r2, #0
 802ec36:	2300      	movs	r3, #0
 802ec38:	4630      	mov	r0, r6
 802ec3a:	4639      	mov	r1, r7
 802ec3c:	f7e1 ff4e 	bl	8010adc <__aeabi_dcmplt>
 802ec40:	2800      	cmp	r0, #0
 802ec42:	d0e0      	beq.n	802ec06 <pow+0x4a>
 802ec44:	f7ff fad8 	bl	802e1f8 <__errno>
 802ec48:	2321      	movs	r3, #33	; 0x21
 802ec4a:	6003      	str	r3, [r0, #0]
 802ec4c:	2400      	movs	r4, #0
 802ec4e:	4d2f      	ldr	r5, [pc, #188]	; (802ed0c <pow+0x150>)
 802ec50:	e7d9      	b.n	802ec06 <pow+0x4a>
 802ec52:	ec45 4b10 	vmov	d0, r4, r5
 802ec56:	f000 fe3e 	bl	802f8d6 <finite>
 802ec5a:	bbb8      	cbnz	r0, 802eccc <pow+0x110>
 802ec5c:	ec49 8b10 	vmov	d0, r8, r9
 802ec60:	f000 fe39 	bl	802f8d6 <finite>
 802ec64:	b390      	cbz	r0, 802eccc <pow+0x110>
 802ec66:	ec47 6b10 	vmov	d0, r6, r7
 802ec6a:	f000 fe34 	bl	802f8d6 <finite>
 802ec6e:	b368      	cbz	r0, 802eccc <pow+0x110>
 802ec70:	4622      	mov	r2, r4
 802ec72:	462b      	mov	r3, r5
 802ec74:	4620      	mov	r0, r4
 802ec76:	4629      	mov	r1, r5
 802ec78:	f7e1 ff58 	bl	8010b2c <__aeabi_dcmpun>
 802ec7c:	b160      	cbz	r0, 802ec98 <pow+0xdc>
 802ec7e:	f7ff fabb 	bl	802e1f8 <__errno>
 802ec82:	2321      	movs	r3, #33	; 0x21
 802ec84:	6003      	str	r3, [r0, #0]
 802ec86:	2200      	movs	r2, #0
 802ec88:	2300      	movs	r3, #0
 802ec8a:	4610      	mov	r0, r2
 802ec8c:	4619      	mov	r1, r3
 802ec8e:	f7e1 fddd 	bl	801084c <__aeabi_ddiv>
 802ec92:	4604      	mov	r4, r0
 802ec94:	460d      	mov	r5, r1
 802ec96:	e7b6      	b.n	802ec06 <pow+0x4a>
 802ec98:	f7ff faae 	bl	802e1f8 <__errno>
 802ec9c:	2322      	movs	r3, #34	; 0x22
 802ec9e:	6003      	str	r3, [r0, #0]
 802eca0:	2200      	movs	r2, #0
 802eca2:	2300      	movs	r3, #0
 802eca4:	4640      	mov	r0, r8
 802eca6:	4649      	mov	r1, r9
 802eca8:	f7e1 ff18 	bl	8010adc <__aeabi_dcmplt>
 802ecac:	2400      	movs	r4, #0
 802ecae:	b158      	cbz	r0, 802ecc8 <pow+0x10c>
 802ecb0:	ec47 6b10 	vmov	d0, r6, r7
 802ecb4:	f000 fe24 	bl	802f900 <rint>
 802ecb8:	4632      	mov	r2, r6
 802ecba:	ec51 0b10 	vmov	r0, r1, d0
 802ecbe:	463b      	mov	r3, r7
 802ecc0:	f7e1 ff02 	bl	8010ac8 <__aeabi_dcmpeq>
 802ecc4:	2800      	cmp	r0, #0
 802ecc6:	d0c2      	beq.n	802ec4e <pow+0x92>
 802ecc8:	4d11      	ldr	r5, [pc, #68]	; (802ed10 <pow+0x154>)
 802ecca:	e79c      	b.n	802ec06 <pow+0x4a>
 802eccc:	2200      	movs	r2, #0
 802ecce:	2300      	movs	r3, #0
 802ecd0:	4620      	mov	r0, r4
 802ecd2:	4629      	mov	r1, r5
 802ecd4:	f7e1 fef8 	bl	8010ac8 <__aeabi_dcmpeq>
 802ecd8:	2800      	cmp	r0, #0
 802ecda:	d094      	beq.n	802ec06 <pow+0x4a>
 802ecdc:	ec49 8b10 	vmov	d0, r8, r9
 802ece0:	f000 fdf9 	bl	802f8d6 <finite>
 802ece4:	2800      	cmp	r0, #0
 802ece6:	d08e      	beq.n	802ec06 <pow+0x4a>
 802ece8:	ec47 6b10 	vmov	d0, r6, r7
 802ecec:	f000 fdf3 	bl	802f8d6 <finite>
 802ecf0:	2800      	cmp	r0, #0
 802ecf2:	d088      	beq.n	802ec06 <pow+0x4a>
 802ecf4:	f7ff fa80 	bl	802e1f8 <__errno>
 802ecf8:	2322      	movs	r3, #34	; 0x22
 802ecfa:	6003      	str	r3, [r0, #0]
 802ecfc:	2400      	movs	r4, #0
 802ecfe:	2500      	movs	r5, #0
 802ed00:	e781      	b.n	802ec06 <pow+0x4a>
 802ed02:	4d04      	ldr	r5, [pc, #16]	; (802ed14 <pow+0x158>)
 802ed04:	2400      	movs	r4, #0
 802ed06:	e77e      	b.n	802ec06 <pow+0x4a>
 802ed08:	200000dc 	.word	0x200000dc
 802ed0c:	fff00000 	.word	0xfff00000
 802ed10:	7ff00000 	.word	0x7ff00000
 802ed14:	3ff00000 	.word	0x3ff00000

0802ed18 <__ieee754_pow>:
 802ed18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ed1c:	ed2d 8b06 	vpush	{d8-d10}
 802ed20:	b08d      	sub	sp, #52	; 0x34
 802ed22:	ed8d 1b02 	vstr	d1, [sp, #8]
 802ed26:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 802ed2a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 802ed2e:	ea56 0100 	orrs.w	r1, r6, r0
 802ed32:	ec53 2b10 	vmov	r2, r3, d0
 802ed36:	f000 84d1 	beq.w	802f6dc <__ieee754_pow+0x9c4>
 802ed3a:	497f      	ldr	r1, [pc, #508]	; (802ef38 <__ieee754_pow+0x220>)
 802ed3c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 802ed40:	428c      	cmp	r4, r1
 802ed42:	ee10 8a10 	vmov	r8, s0
 802ed46:	4699      	mov	r9, r3
 802ed48:	dc09      	bgt.n	802ed5e <__ieee754_pow+0x46>
 802ed4a:	d103      	bne.n	802ed54 <__ieee754_pow+0x3c>
 802ed4c:	b97a      	cbnz	r2, 802ed6e <__ieee754_pow+0x56>
 802ed4e:	42a6      	cmp	r6, r4
 802ed50:	dd02      	ble.n	802ed58 <__ieee754_pow+0x40>
 802ed52:	e00c      	b.n	802ed6e <__ieee754_pow+0x56>
 802ed54:	428e      	cmp	r6, r1
 802ed56:	dc02      	bgt.n	802ed5e <__ieee754_pow+0x46>
 802ed58:	428e      	cmp	r6, r1
 802ed5a:	d110      	bne.n	802ed7e <__ieee754_pow+0x66>
 802ed5c:	b178      	cbz	r0, 802ed7e <__ieee754_pow+0x66>
 802ed5e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 802ed62:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 802ed66:	ea54 0308 	orrs.w	r3, r4, r8
 802ed6a:	f000 84b7 	beq.w	802f6dc <__ieee754_pow+0x9c4>
 802ed6e:	4873      	ldr	r0, [pc, #460]	; (802ef3c <__ieee754_pow+0x224>)
 802ed70:	b00d      	add	sp, #52	; 0x34
 802ed72:	ecbd 8b06 	vpop	{d8-d10}
 802ed76:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ed7a:	f000 bdb9 	b.w	802f8f0 <nan>
 802ed7e:	f1b9 0f00 	cmp.w	r9, #0
 802ed82:	da36      	bge.n	802edf2 <__ieee754_pow+0xda>
 802ed84:	496e      	ldr	r1, [pc, #440]	; (802ef40 <__ieee754_pow+0x228>)
 802ed86:	428e      	cmp	r6, r1
 802ed88:	dc51      	bgt.n	802ee2e <__ieee754_pow+0x116>
 802ed8a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 802ed8e:	428e      	cmp	r6, r1
 802ed90:	f340 84af 	ble.w	802f6f2 <__ieee754_pow+0x9da>
 802ed94:	1531      	asrs	r1, r6, #20
 802ed96:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 802ed9a:	2914      	cmp	r1, #20
 802ed9c:	dd0f      	ble.n	802edbe <__ieee754_pow+0xa6>
 802ed9e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 802eda2:	fa20 fc01 	lsr.w	ip, r0, r1
 802eda6:	fa0c f101 	lsl.w	r1, ip, r1
 802edaa:	4281      	cmp	r1, r0
 802edac:	f040 84a1 	bne.w	802f6f2 <__ieee754_pow+0x9da>
 802edb0:	f00c 0c01 	and.w	ip, ip, #1
 802edb4:	f1cc 0102 	rsb	r1, ip, #2
 802edb8:	9100      	str	r1, [sp, #0]
 802edba:	b180      	cbz	r0, 802edde <__ieee754_pow+0xc6>
 802edbc:	e059      	b.n	802ee72 <__ieee754_pow+0x15a>
 802edbe:	2800      	cmp	r0, #0
 802edc0:	d155      	bne.n	802ee6e <__ieee754_pow+0x156>
 802edc2:	f1c1 0114 	rsb	r1, r1, #20
 802edc6:	fa46 fc01 	asr.w	ip, r6, r1
 802edca:	fa0c f101 	lsl.w	r1, ip, r1
 802edce:	42b1      	cmp	r1, r6
 802edd0:	f040 848c 	bne.w	802f6ec <__ieee754_pow+0x9d4>
 802edd4:	f00c 0c01 	and.w	ip, ip, #1
 802edd8:	f1cc 0102 	rsb	r1, ip, #2
 802eddc:	9100      	str	r1, [sp, #0]
 802edde:	4959      	ldr	r1, [pc, #356]	; (802ef44 <__ieee754_pow+0x22c>)
 802ede0:	428e      	cmp	r6, r1
 802ede2:	d12d      	bne.n	802ee40 <__ieee754_pow+0x128>
 802ede4:	2f00      	cmp	r7, #0
 802ede6:	da79      	bge.n	802eedc <__ieee754_pow+0x1c4>
 802ede8:	4956      	ldr	r1, [pc, #344]	; (802ef44 <__ieee754_pow+0x22c>)
 802edea:	2000      	movs	r0, #0
 802edec:	f7e1 fd2e 	bl	801084c <__aeabi_ddiv>
 802edf0:	e016      	b.n	802ee20 <__ieee754_pow+0x108>
 802edf2:	2100      	movs	r1, #0
 802edf4:	9100      	str	r1, [sp, #0]
 802edf6:	2800      	cmp	r0, #0
 802edf8:	d13b      	bne.n	802ee72 <__ieee754_pow+0x15a>
 802edfa:	494f      	ldr	r1, [pc, #316]	; (802ef38 <__ieee754_pow+0x220>)
 802edfc:	428e      	cmp	r6, r1
 802edfe:	d1ee      	bne.n	802edde <__ieee754_pow+0xc6>
 802ee00:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 802ee04:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 802ee08:	ea53 0308 	orrs.w	r3, r3, r8
 802ee0c:	f000 8466 	beq.w	802f6dc <__ieee754_pow+0x9c4>
 802ee10:	4b4d      	ldr	r3, [pc, #308]	; (802ef48 <__ieee754_pow+0x230>)
 802ee12:	429c      	cmp	r4, r3
 802ee14:	dd0d      	ble.n	802ee32 <__ieee754_pow+0x11a>
 802ee16:	2f00      	cmp	r7, #0
 802ee18:	f280 8464 	bge.w	802f6e4 <__ieee754_pow+0x9cc>
 802ee1c:	2000      	movs	r0, #0
 802ee1e:	2100      	movs	r1, #0
 802ee20:	ec41 0b10 	vmov	d0, r0, r1
 802ee24:	b00d      	add	sp, #52	; 0x34
 802ee26:	ecbd 8b06 	vpop	{d8-d10}
 802ee2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ee2e:	2102      	movs	r1, #2
 802ee30:	e7e0      	b.n	802edf4 <__ieee754_pow+0xdc>
 802ee32:	2f00      	cmp	r7, #0
 802ee34:	daf2      	bge.n	802ee1c <__ieee754_pow+0x104>
 802ee36:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 802ee3a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 802ee3e:	e7ef      	b.n	802ee20 <__ieee754_pow+0x108>
 802ee40:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 802ee44:	d104      	bne.n	802ee50 <__ieee754_pow+0x138>
 802ee46:	4610      	mov	r0, r2
 802ee48:	4619      	mov	r1, r3
 802ee4a:	f7e1 fbd5 	bl	80105f8 <__aeabi_dmul>
 802ee4e:	e7e7      	b.n	802ee20 <__ieee754_pow+0x108>
 802ee50:	493e      	ldr	r1, [pc, #248]	; (802ef4c <__ieee754_pow+0x234>)
 802ee52:	428f      	cmp	r7, r1
 802ee54:	d10d      	bne.n	802ee72 <__ieee754_pow+0x15a>
 802ee56:	f1b9 0f00 	cmp.w	r9, #0
 802ee5a:	db0a      	blt.n	802ee72 <__ieee754_pow+0x15a>
 802ee5c:	ec43 2b10 	vmov	d0, r2, r3
 802ee60:	b00d      	add	sp, #52	; 0x34
 802ee62:	ecbd 8b06 	vpop	{d8-d10}
 802ee66:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ee6a:	f000 bc77 	b.w	802f75c <__ieee754_sqrt>
 802ee6e:	2100      	movs	r1, #0
 802ee70:	9100      	str	r1, [sp, #0]
 802ee72:	ec43 2b10 	vmov	d0, r2, r3
 802ee76:	e9cd 2304 	strd	r2, r3, [sp, #16]
 802ee7a:	f000 fd23 	bl	802f8c4 <fabs>
 802ee7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802ee82:	ec51 0b10 	vmov	r0, r1, d0
 802ee86:	f1b8 0f00 	cmp.w	r8, #0
 802ee8a:	d12a      	bne.n	802eee2 <__ieee754_pow+0x1ca>
 802ee8c:	b12c      	cbz	r4, 802ee9a <__ieee754_pow+0x182>
 802ee8e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 802ef44 <__ieee754_pow+0x22c>
 802ee92:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 802ee96:	45e6      	cmp	lr, ip
 802ee98:	d123      	bne.n	802eee2 <__ieee754_pow+0x1ca>
 802ee9a:	2f00      	cmp	r7, #0
 802ee9c:	da05      	bge.n	802eeaa <__ieee754_pow+0x192>
 802ee9e:	4602      	mov	r2, r0
 802eea0:	460b      	mov	r3, r1
 802eea2:	2000      	movs	r0, #0
 802eea4:	4927      	ldr	r1, [pc, #156]	; (802ef44 <__ieee754_pow+0x22c>)
 802eea6:	f7e1 fcd1 	bl	801084c <__aeabi_ddiv>
 802eeaa:	f1b9 0f00 	cmp.w	r9, #0
 802eeae:	dab7      	bge.n	802ee20 <__ieee754_pow+0x108>
 802eeb0:	9b00      	ldr	r3, [sp, #0]
 802eeb2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 802eeb6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 802eeba:	4323      	orrs	r3, r4
 802eebc:	d108      	bne.n	802eed0 <__ieee754_pow+0x1b8>
 802eebe:	4602      	mov	r2, r0
 802eec0:	460b      	mov	r3, r1
 802eec2:	4610      	mov	r0, r2
 802eec4:	4619      	mov	r1, r3
 802eec6:	f7e1 f9df 	bl	8010288 <__aeabi_dsub>
 802eeca:	4602      	mov	r2, r0
 802eecc:	460b      	mov	r3, r1
 802eece:	e78d      	b.n	802edec <__ieee754_pow+0xd4>
 802eed0:	9b00      	ldr	r3, [sp, #0]
 802eed2:	2b01      	cmp	r3, #1
 802eed4:	d1a4      	bne.n	802ee20 <__ieee754_pow+0x108>
 802eed6:	4602      	mov	r2, r0
 802eed8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802eedc:	4610      	mov	r0, r2
 802eede:	4619      	mov	r1, r3
 802eee0:	e79e      	b.n	802ee20 <__ieee754_pow+0x108>
 802eee2:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 802eee6:	f10c 35ff 	add.w	r5, ip, #4294967295
 802eeea:	950a      	str	r5, [sp, #40]	; 0x28
 802eeec:	9d00      	ldr	r5, [sp, #0]
 802eeee:	46ac      	mov	ip, r5
 802eef0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 802eef2:	ea5c 0505 	orrs.w	r5, ip, r5
 802eef6:	d0e4      	beq.n	802eec2 <__ieee754_pow+0x1aa>
 802eef8:	4b15      	ldr	r3, [pc, #84]	; (802ef50 <__ieee754_pow+0x238>)
 802eefa:	429e      	cmp	r6, r3
 802eefc:	f340 80fc 	ble.w	802f0f8 <__ieee754_pow+0x3e0>
 802ef00:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 802ef04:	429e      	cmp	r6, r3
 802ef06:	4b10      	ldr	r3, [pc, #64]	; (802ef48 <__ieee754_pow+0x230>)
 802ef08:	dd07      	ble.n	802ef1a <__ieee754_pow+0x202>
 802ef0a:	429c      	cmp	r4, r3
 802ef0c:	dc0a      	bgt.n	802ef24 <__ieee754_pow+0x20c>
 802ef0e:	2f00      	cmp	r7, #0
 802ef10:	da84      	bge.n	802ee1c <__ieee754_pow+0x104>
 802ef12:	a307      	add	r3, pc, #28	; (adr r3, 802ef30 <__ieee754_pow+0x218>)
 802ef14:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ef18:	e795      	b.n	802ee46 <__ieee754_pow+0x12e>
 802ef1a:	429c      	cmp	r4, r3
 802ef1c:	dbf7      	blt.n	802ef0e <__ieee754_pow+0x1f6>
 802ef1e:	4b09      	ldr	r3, [pc, #36]	; (802ef44 <__ieee754_pow+0x22c>)
 802ef20:	429c      	cmp	r4, r3
 802ef22:	dd17      	ble.n	802ef54 <__ieee754_pow+0x23c>
 802ef24:	2f00      	cmp	r7, #0
 802ef26:	dcf4      	bgt.n	802ef12 <__ieee754_pow+0x1fa>
 802ef28:	e778      	b.n	802ee1c <__ieee754_pow+0x104>
 802ef2a:	bf00      	nop
 802ef2c:	f3af 8000 	nop.w
 802ef30:	8800759c 	.word	0x8800759c
 802ef34:	7e37e43c 	.word	0x7e37e43c
 802ef38:	7ff00000 	.word	0x7ff00000
 802ef3c:	080301d1 	.word	0x080301d1
 802ef40:	433fffff 	.word	0x433fffff
 802ef44:	3ff00000 	.word	0x3ff00000
 802ef48:	3fefffff 	.word	0x3fefffff
 802ef4c:	3fe00000 	.word	0x3fe00000
 802ef50:	41e00000 	.word	0x41e00000
 802ef54:	4b64      	ldr	r3, [pc, #400]	; (802f0e8 <__ieee754_pow+0x3d0>)
 802ef56:	2200      	movs	r2, #0
 802ef58:	f7e1 f996 	bl	8010288 <__aeabi_dsub>
 802ef5c:	a356      	add	r3, pc, #344	; (adr r3, 802f0b8 <__ieee754_pow+0x3a0>)
 802ef5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ef62:	4604      	mov	r4, r0
 802ef64:	460d      	mov	r5, r1
 802ef66:	f7e1 fb47 	bl	80105f8 <__aeabi_dmul>
 802ef6a:	a355      	add	r3, pc, #340	; (adr r3, 802f0c0 <__ieee754_pow+0x3a8>)
 802ef6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ef70:	4606      	mov	r6, r0
 802ef72:	460f      	mov	r7, r1
 802ef74:	4620      	mov	r0, r4
 802ef76:	4629      	mov	r1, r5
 802ef78:	f7e1 fb3e 	bl	80105f8 <__aeabi_dmul>
 802ef7c:	4b5b      	ldr	r3, [pc, #364]	; (802f0ec <__ieee754_pow+0x3d4>)
 802ef7e:	4682      	mov	sl, r0
 802ef80:	468b      	mov	fp, r1
 802ef82:	2200      	movs	r2, #0
 802ef84:	4620      	mov	r0, r4
 802ef86:	4629      	mov	r1, r5
 802ef88:	f7e1 fb36 	bl	80105f8 <__aeabi_dmul>
 802ef8c:	4602      	mov	r2, r0
 802ef8e:	460b      	mov	r3, r1
 802ef90:	a14d      	add	r1, pc, #308	; (adr r1, 802f0c8 <__ieee754_pow+0x3b0>)
 802ef92:	e9d1 0100 	ldrd	r0, r1, [r1]
 802ef96:	f7e1 f977 	bl	8010288 <__aeabi_dsub>
 802ef9a:	4622      	mov	r2, r4
 802ef9c:	462b      	mov	r3, r5
 802ef9e:	f7e1 fb2b 	bl	80105f8 <__aeabi_dmul>
 802efa2:	4602      	mov	r2, r0
 802efa4:	460b      	mov	r3, r1
 802efa6:	2000      	movs	r0, #0
 802efa8:	4951      	ldr	r1, [pc, #324]	; (802f0f0 <__ieee754_pow+0x3d8>)
 802efaa:	f7e1 f96d 	bl	8010288 <__aeabi_dsub>
 802efae:	4622      	mov	r2, r4
 802efb0:	4680      	mov	r8, r0
 802efb2:	4689      	mov	r9, r1
 802efb4:	462b      	mov	r3, r5
 802efb6:	4620      	mov	r0, r4
 802efb8:	4629      	mov	r1, r5
 802efba:	f7e1 fb1d 	bl	80105f8 <__aeabi_dmul>
 802efbe:	4602      	mov	r2, r0
 802efc0:	460b      	mov	r3, r1
 802efc2:	4640      	mov	r0, r8
 802efc4:	4649      	mov	r1, r9
 802efc6:	f7e1 fb17 	bl	80105f8 <__aeabi_dmul>
 802efca:	a341      	add	r3, pc, #260	; (adr r3, 802f0d0 <__ieee754_pow+0x3b8>)
 802efcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 802efd0:	f7e1 fb12 	bl	80105f8 <__aeabi_dmul>
 802efd4:	4602      	mov	r2, r0
 802efd6:	460b      	mov	r3, r1
 802efd8:	4650      	mov	r0, sl
 802efda:	4659      	mov	r1, fp
 802efdc:	f7e1 f954 	bl	8010288 <__aeabi_dsub>
 802efe0:	4602      	mov	r2, r0
 802efe2:	460b      	mov	r3, r1
 802efe4:	4680      	mov	r8, r0
 802efe6:	4689      	mov	r9, r1
 802efe8:	4630      	mov	r0, r6
 802efea:	4639      	mov	r1, r7
 802efec:	f7e1 f94e 	bl	801028c <__adddf3>
 802eff0:	2400      	movs	r4, #0
 802eff2:	4632      	mov	r2, r6
 802eff4:	463b      	mov	r3, r7
 802eff6:	4620      	mov	r0, r4
 802eff8:	460d      	mov	r5, r1
 802effa:	f7e1 f945 	bl	8010288 <__aeabi_dsub>
 802effe:	4602      	mov	r2, r0
 802f000:	460b      	mov	r3, r1
 802f002:	4640      	mov	r0, r8
 802f004:	4649      	mov	r1, r9
 802f006:	f7e1 f93f 	bl	8010288 <__aeabi_dsub>
 802f00a:	9b00      	ldr	r3, [sp, #0]
 802f00c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802f00e:	3b01      	subs	r3, #1
 802f010:	4313      	orrs	r3, r2
 802f012:	4682      	mov	sl, r0
 802f014:	468b      	mov	fp, r1
 802f016:	f040 81f1 	bne.w	802f3fc <__ieee754_pow+0x6e4>
 802f01a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 802f0d8 <__ieee754_pow+0x3c0>
 802f01e:	eeb0 8a47 	vmov.f32	s16, s14
 802f022:	eef0 8a67 	vmov.f32	s17, s15
 802f026:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 802f02a:	2600      	movs	r6, #0
 802f02c:	4632      	mov	r2, r6
 802f02e:	463b      	mov	r3, r7
 802f030:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802f034:	f7e1 f928 	bl	8010288 <__aeabi_dsub>
 802f038:	4622      	mov	r2, r4
 802f03a:	462b      	mov	r3, r5
 802f03c:	f7e1 fadc 	bl	80105f8 <__aeabi_dmul>
 802f040:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802f044:	4680      	mov	r8, r0
 802f046:	4689      	mov	r9, r1
 802f048:	4650      	mov	r0, sl
 802f04a:	4659      	mov	r1, fp
 802f04c:	f7e1 fad4 	bl	80105f8 <__aeabi_dmul>
 802f050:	4602      	mov	r2, r0
 802f052:	460b      	mov	r3, r1
 802f054:	4640      	mov	r0, r8
 802f056:	4649      	mov	r1, r9
 802f058:	f7e1 f918 	bl	801028c <__adddf3>
 802f05c:	4632      	mov	r2, r6
 802f05e:	463b      	mov	r3, r7
 802f060:	4680      	mov	r8, r0
 802f062:	4689      	mov	r9, r1
 802f064:	4620      	mov	r0, r4
 802f066:	4629      	mov	r1, r5
 802f068:	f7e1 fac6 	bl	80105f8 <__aeabi_dmul>
 802f06c:	460b      	mov	r3, r1
 802f06e:	4604      	mov	r4, r0
 802f070:	460d      	mov	r5, r1
 802f072:	4602      	mov	r2, r0
 802f074:	4649      	mov	r1, r9
 802f076:	4640      	mov	r0, r8
 802f078:	f7e1 f908 	bl	801028c <__adddf3>
 802f07c:	4b1d      	ldr	r3, [pc, #116]	; (802f0f4 <__ieee754_pow+0x3dc>)
 802f07e:	4299      	cmp	r1, r3
 802f080:	ec45 4b19 	vmov	d9, r4, r5
 802f084:	4606      	mov	r6, r0
 802f086:	460f      	mov	r7, r1
 802f088:	468b      	mov	fp, r1
 802f08a:	f340 82fe 	ble.w	802f68a <__ieee754_pow+0x972>
 802f08e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 802f092:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 802f096:	4303      	orrs	r3, r0
 802f098:	f000 81f0 	beq.w	802f47c <__ieee754_pow+0x764>
 802f09c:	a310      	add	r3, pc, #64	; (adr r3, 802f0e0 <__ieee754_pow+0x3c8>)
 802f09e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f0a2:	ec51 0b18 	vmov	r0, r1, d8
 802f0a6:	f7e1 faa7 	bl	80105f8 <__aeabi_dmul>
 802f0aa:	a30d      	add	r3, pc, #52	; (adr r3, 802f0e0 <__ieee754_pow+0x3c8>)
 802f0ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f0b0:	e6cb      	b.n	802ee4a <__ieee754_pow+0x132>
 802f0b2:	bf00      	nop
 802f0b4:	f3af 8000 	nop.w
 802f0b8:	60000000 	.word	0x60000000
 802f0bc:	3ff71547 	.word	0x3ff71547
 802f0c0:	f85ddf44 	.word	0xf85ddf44
 802f0c4:	3e54ae0b 	.word	0x3e54ae0b
 802f0c8:	55555555 	.word	0x55555555
 802f0cc:	3fd55555 	.word	0x3fd55555
 802f0d0:	652b82fe 	.word	0x652b82fe
 802f0d4:	3ff71547 	.word	0x3ff71547
 802f0d8:	00000000 	.word	0x00000000
 802f0dc:	bff00000 	.word	0xbff00000
 802f0e0:	8800759c 	.word	0x8800759c
 802f0e4:	7e37e43c 	.word	0x7e37e43c
 802f0e8:	3ff00000 	.word	0x3ff00000
 802f0ec:	3fd00000 	.word	0x3fd00000
 802f0f0:	3fe00000 	.word	0x3fe00000
 802f0f4:	408fffff 	.word	0x408fffff
 802f0f8:	4bd7      	ldr	r3, [pc, #860]	; (802f458 <__ieee754_pow+0x740>)
 802f0fa:	ea03 0309 	and.w	r3, r3, r9
 802f0fe:	2200      	movs	r2, #0
 802f100:	b92b      	cbnz	r3, 802f10e <__ieee754_pow+0x3f6>
 802f102:	4bd6      	ldr	r3, [pc, #856]	; (802f45c <__ieee754_pow+0x744>)
 802f104:	f7e1 fa78 	bl	80105f8 <__aeabi_dmul>
 802f108:	f06f 0234 	mvn.w	r2, #52	; 0x34
 802f10c:	460c      	mov	r4, r1
 802f10e:	1523      	asrs	r3, r4, #20
 802f110:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 802f114:	4413      	add	r3, r2
 802f116:	9309      	str	r3, [sp, #36]	; 0x24
 802f118:	4bd1      	ldr	r3, [pc, #836]	; (802f460 <__ieee754_pow+0x748>)
 802f11a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 802f11e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 802f122:	429c      	cmp	r4, r3
 802f124:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 802f128:	dd08      	ble.n	802f13c <__ieee754_pow+0x424>
 802f12a:	4bce      	ldr	r3, [pc, #824]	; (802f464 <__ieee754_pow+0x74c>)
 802f12c:	429c      	cmp	r4, r3
 802f12e:	f340 8163 	ble.w	802f3f8 <__ieee754_pow+0x6e0>
 802f132:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802f134:	3301      	adds	r3, #1
 802f136:	9309      	str	r3, [sp, #36]	; 0x24
 802f138:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 802f13c:	2400      	movs	r4, #0
 802f13e:	00e3      	lsls	r3, r4, #3
 802f140:	930b      	str	r3, [sp, #44]	; 0x2c
 802f142:	4bc9      	ldr	r3, [pc, #804]	; (802f468 <__ieee754_pow+0x750>)
 802f144:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 802f148:	ed93 7b00 	vldr	d7, [r3]
 802f14c:	4629      	mov	r1, r5
 802f14e:	ec53 2b17 	vmov	r2, r3, d7
 802f152:	eeb0 8a47 	vmov.f32	s16, s14
 802f156:	eef0 8a67 	vmov.f32	s17, s15
 802f15a:	4682      	mov	sl, r0
 802f15c:	f7e1 f894 	bl	8010288 <__aeabi_dsub>
 802f160:	4652      	mov	r2, sl
 802f162:	4606      	mov	r6, r0
 802f164:	460f      	mov	r7, r1
 802f166:	462b      	mov	r3, r5
 802f168:	ec51 0b18 	vmov	r0, r1, d8
 802f16c:	f7e1 f88e 	bl	801028c <__adddf3>
 802f170:	4602      	mov	r2, r0
 802f172:	460b      	mov	r3, r1
 802f174:	2000      	movs	r0, #0
 802f176:	49bd      	ldr	r1, [pc, #756]	; (802f46c <__ieee754_pow+0x754>)
 802f178:	f7e1 fb68 	bl	801084c <__aeabi_ddiv>
 802f17c:	ec41 0b19 	vmov	d9, r0, r1
 802f180:	4602      	mov	r2, r0
 802f182:	460b      	mov	r3, r1
 802f184:	4630      	mov	r0, r6
 802f186:	4639      	mov	r1, r7
 802f188:	f7e1 fa36 	bl	80105f8 <__aeabi_dmul>
 802f18c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 802f190:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 802f194:	e9cd 2304 	strd	r2, r3, [sp, #16]
 802f198:	2300      	movs	r3, #0
 802f19a:	9304      	str	r3, [sp, #16]
 802f19c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 802f1a0:	46ab      	mov	fp, r5
 802f1a2:	106d      	asrs	r5, r5, #1
 802f1a4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 802f1a8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 802f1ac:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 802f1b0:	2200      	movs	r2, #0
 802f1b2:	4640      	mov	r0, r8
 802f1b4:	4649      	mov	r1, r9
 802f1b6:	4614      	mov	r4, r2
 802f1b8:	461d      	mov	r5, r3
 802f1ba:	f7e1 fa1d 	bl	80105f8 <__aeabi_dmul>
 802f1be:	4602      	mov	r2, r0
 802f1c0:	460b      	mov	r3, r1
 802f1c2:	4630      	mov	r0, r6
 802f1c4:	4639      	mov	r1, r7
 802f1c6:	f7e1 f85f 	bl	8010288 <__aeabi_dsub>
 802f1ca:	ec53 2b18 	vmov	r2, r3, d8
 802f1ce:	4606      	mov	r6, r0
 802f1d0:	460f      	mov	r7, r1
 802f1d2:	4620      	mov	r0, r4
 802f1d4:	4629      	mov	r1, r5
 802f1d6:	f7e1 f857 	bl	8010288 <__aeabi_dsub>
 802f1da:	4602      	mov	r2, r0
 802f1dc:	460b      	mov	r3, r1
 802f1de:	4650      	mov	r0, sl
 802f1e0:	4659      	mov	r1, fp
 802f1e2:	f7e1 f851 	bl	8010288 <__aeabi_dsub>
 802f1e6:	4642      	mov	r2, r8
 802f1e8:	464b      	mov	r3, r9
 802f1ea:	f7e1 fa05 	bl	80105f8 <__aeabi_dmul>
 802f1ee:	4602      	mov	r2, r0
 802f1f0:	460b      	mov	r3, r1
 802f1f2:	4630      	mov	r0, r6
 802f1f4:	4639      	mov	r1, r7
 802f1f6:	f7e1 f847 	bl	8010288 <__aeabi_dsub>
 802f1fa:	ec53 2b19 	vmov	r2, r3, d9
 802f1fe:	f7e1 f9fb 	bl	80105f8 <__aeabi_dmul>
 802f202:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 802f206:	ec41 0b18 	vmov	d8, r0, r1
 802f20a:	4610      	mov	r0, r2
 802f20c:	4619      	mov	r1, r3
 802f20e:	f7e1 f9f3 	bl	80105f8 <__aeabi_dmul>
 802f212:	a37d      	add	r3, pc, #500	; (adr r3, 802f408 <__ieee754_pow+0x6f0>)
 802f214:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f218:	4604      	mov	r4, r0
 802f21a:	460d      	mov	r5, r1
 802f21c:	f7e1 f9ec 	bl	80105f8 <__aeabi_dmul>
 802f220:	a37b      	add	r3, pc, #492	; (adr r3, 802f410 <__ieee754_pow+0x6f8>)
 802f222:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f226:	f7e1 f831 	bl	801028c <__adddf3>
 802f22a:	4622      	mov	r2, r4
 802f22c:	462b      	mov	r3, r5
 802f22e:	f7e1 f9e3 	bl	80105f8 <__aeabi_dmul>
 802f232:	a379      	add	r3, pc, #484	; (adr r3, 802f418 <__ieee754_pow+0x700>)
 802f234:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f238:	f7e1 f828 	bl	801028c <__adddf3>
 802f23c:	4622      	mov	r2, r4
 802f23e:	462b      	mov	r3, r5
 802f240:	f7e1 f9da 	bl	80105f8 <__aeabi_dmul>
 802f244:	a376      	add	r3, pc, #472	; (adr r3, 802f420 <__ieee754_pow+0x708>)
 802f246:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f24a:	f7e1 f81f 	bl	801028c <__adddf3>
 802f24e:	4622      	mov	r2, r4
 802f250:	462b      	mov	r3, r5
 802f252:	f7e1 f9d1 	bl	80105f8 <__aeabi_dmul>
 802f256:	a374      	add	r3, pc, #464	; (adr r3, 802f428 <__ieee754_pow+0x710>)
 802f258:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f25c:	f7e1 f816 	bl	801028c <__adddf3>
 802f260:	4622      	mov	r2, r4
 802f262:	462b      	mov	r3, r5
 802f264:	f7e1 f9c8 	bl	80105f8 <__aeabi_dmul>
 802f268:	a371      	add	r3, pc, #452	; (adr r3, 802f430 <__ieee754_pow+0x718>)
 802f26a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f26e:	f7e1 f80d 	bl	801028c <__adddf3>
 802f272:	4622      	mov	r2, r4
 802f274:	4606      	mov	r6, r0
 802f276:	460f      	mov	r7, r1
 802f278:	462b      	mov	r3, r5
 802f27a:	4620      	mov	r0, r4
 802f27c:	4629      	mov	r1, r5
 802f27e:	f7e1 f9bb 	bl	80105f8 <__aeabi_dmul>
 802f282:	4602      	mov	r2, r0
 802f284:	460b      	mov	r3, r1
 802f286:	4630      	mov	r0, r6
 802f288:	4639      	mov	r1, r7
 802f28a:	f7e1 f9b5 	bl	80105f8 <__aeabi_dmul>
 802f28e:	4642      	mov	r2, r8
 802f290:	4604      	mov	r4, r0
 802f292:	460d      	mov	r5, r1
 802f294:	464b      	mov	r3, r9
 802f296:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802f29a:	f7e0 fff7 	bl	801028c <__adddf3>
 802f29e:	ec53 2b18 	vmov	r2, r3, d8
 802f2a2:	f7e1 f9a9 	bl	80105f8 <__aeabi_dmul>
 802f2a6:	4622      	mov	r2, r4
 802f2a8:	462b      	mov	r3, r5
 802f2aa:	f7e0 ffef 	bl	801028c <__adddf3>
 802f2ae:	4642      	mov	r2, r8
 802f2b0:	4682      	mov	sl, r0
 802f2b2:	468b      	mov	fp, r1
 802f2b4:	464b      	mov	r3, r9
 802f2b6:	4640      	mov	r0, r8
 802f2b8:	4649      	mov	r1, r9
 802f2ba:	f7e1 f99d 	bl	80105f8 <__aeabi_dmul>
 802f2be:	4b6c      	ldr	r3, [pc, #432]	; (802f470 <__ieee754_pow+0x758>)
 802f2c0:	2200      	movs	r2, #0
 802f2c2:	4606      	mov	r6, r0
 802f2c4:	460f      	mov	r7, r1
 802f2c6:	f7e0 ffe1 	bl	801028c <__adddf3>
 802f2ca:	4652      	mov	r2, sl
 802f2cc:	465b      	mov	r3, fp
 802f2ce:	f7e0 ffdd 	bl	801028c <__adddf3>
 802f2d2:	9c04      	ldr	r4, [sp, #16]
 802f2d4:	460d      	mov	r5, r1
 802f2d6:	4622      	mov	r2, r4
 802f2d8:	460b      	mov	r3, r1
 802f2da:	4640      	mov	r0, r8
 802f2dc:	4649      	mov	r1, r9
 802f2de:	f7e1 f98b 	bl	80105f8 <__aeabi_dmul>
 802f2e2:	4b63      	ldr	r3, [pc, #396]	; (802f470 <__ieee754_pow+0x758>)
 802f2e4:	4680      	mov	r8, r0
 802f2e6:	4689      	mov	r9, r1
 802f2e8:	2200      	movs	r2, #0
 802f2ea:	4620      	mov	r0, r4
 802f2ec:	4629      	mov	r1, r5
 802f2ee:	f7e0 ffcb 	bl	8010288 <__aeabi_dsub>
 802f2f2:	4632      	mov	r2, r6
 802f2f4:	463b      	mov	r3, r7
 802f2f6:	f7e0 ffc7 	bl	8010288 <__aeabi_dsub>
 802f2fa:	4602      	mov	r2, r0
 802f2fc:	460b      	mov	r3, r1
 802f2fe:	4650      	mov	r0, sl
 802f300:	4659      	mov	r1, fp
 802f302:	f7e0 ffc1 	bl	8010288 <__aeabi_dsub>
 802f306:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 802f30a:	f7e1 f975 	bl	80105f8 <__aeabi_dmul>
 802f30e:	4622      	mov	r2, r4
 802f310:	4606      	mov	r6, r0
 802f312:	460f      	mov	r7, r1
 802f314:	462b      	mov	r3, r5
 802f316:	ec51 0b18 	vmov	r0, r1, d8
 802f31a:	f7e1 f96d 	bl	80105f8 <__aeabi_dmul>
 802f31e:	4602      	mov	r2, r0
 802f320:	460b      	mov	r3, r1
 802f322:	4630      	mov	r0, r6
 802f324:	4639      	mov	r1, r7
 802f326:	f7e0 ffb1 	bl	801028c <__adddf3>
 802f32a:	4606      	mov	r6, r0
 802f32c:	460f      	mov	r7, r1
 802f32e:	4602      	mov	r2, r0
 802f330:	460b      	mov	r3, r1
 802f332:	4640      	mov	r0, r8
 802f334:	4649      	mov	r1, r9
 802f336:	f7e0 ffa9 	bl	801028c <__adddf3>
 802f33a:	9c04      	ldr	r4, [sp, #16]
 802f33c:	a33e      	add	r3, pc, #248	; (adr r3, 802f438 <__ieee754_pow+0x720>)
 802f33e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f342:	4620      	mov	r0, r4
 802f344:	460d      	mov	r5, r1
 802f346:	f7e1 f957 	bl	80105f8 <__aeabi_dmul>
 802f34a:	4642      	mov	r2, r8
 802f34c:	ec41 0b18 	vmov	d8, r0, r1
 802f350:	464b      	mov	r3, r9
 802f352:	4620      	mov	r0, r4
 802f354:	4629      	mov	r1, r5
 802f356:	f7e0 ff97 	bl	8010288 <__aeabi_dsub>
 802f35a:	4602      	mov	r2, r0
 802f35c:	460b      	mov	r3, r1
 802f35e:	4630      	mov	r0, r6
 802f360:	4639      	mov	r1, r7
 802f362:	f7e0 ff91 	bl	8010288 <__aeabi_dsub>
 802f366:	a336      	add	r3, pc, #216	; (adr r3, 802f440 <__ieee754_pow+0x728>)
 802f368:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f36c:	f7e1 f944 	bl	80105f8 <__aeabi_dmul>
 802f370:	a335      	add	r3, pc, #212	; (adr r3, 802f448 <__ieee754_pow+0x730>)
 802f372:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f376:	4606      	mov	r6, r0
 802f378:	460f      	mov	r7, r1
 802f37a:	4620      	mov	r0, r4
 802f37c:	4629      	mov	r1, r5
 802f37e:	f7e1 f93b 	bl	80105f8 <__aeabi_dmul>
 802f382:	4602      	mov	r2, r0
 802f384:	460b      	mov	r3, r1
 802f386:	4630      	mov	r0, r6
 802f388:	4639      	mov	r1, r7
 802f38a:	f7e0 ff7f 	bl	801028c <__adddf3>
 802f38e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802f390:	4b38      	ldr	r3, [pc, #224]	; (802f474 <__ieee754_pow+0x75c>)
 802f392:	4413      	add	r3, r2
 802f394:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f398:	f7e0 ff78 	bl	801028c <__adddf3>
 802f39c:	4682      	mov	sl, r0
 802f39e:	9809      	ldr	r0, [sp, #36]	; 0x24
 802f3a0:	468b      	mov	fp, r1
 802f3a2:	f7e1 f8bf 	bl	8010524 <__aeabi_i2d>
 802f3a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802f3a8:	4b33      	ldr	r3, [pc, #204]	; (802f478 <__ieee754_pow+0x760>)
 802f3aa:	4413      	add	r3, r2
 802f3ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 802f3b0:	4606      	mov	r6, r0
 802f3b2:	460f      	mov	r7, r1
 802f3b4:	4652      	mov	r2, sl
 802f3b6:	465b      	mov	r3, fp
 802f3b8:	ec51 0b18 	vmov	r0, r1, d8
 802f3bc:	f7e0 ff66 	bl	801028c <__adddf3>
 802f3c0:	4642      	mov	r2, r8
 802f3c2:	464b      	mov	r3, r9
 802f3c4:	f7e0 ff62 	bl	801028c <__adddf3>
 802f3c8:	4632      	mov	r2, r6
 802f3ca:	463b      	mov	r3, r7
 802f3cc:	f7e0 ff5e 	bl	801028c <__adddf3>
 802f3d0:	9c04      	ldr	r4, [sp, #16]
 802f3d2:	4632      	mov	r2, r6
 802f3d4:	463b      	mov	r3, r7
 802f3d6:	4620      	mov	r0, r4
 802f3d8:	460d      	mov	r5, r1
 802f3da:	f7e0 ff55 	bl	8010288 <__aeabi_dsub>
 802f3de:	4642      	mov	r2, r8
 802f3e0:	464b      	mov	r3, r9
 802f3e2:	f7e0 ff51 	bl	8010288 <__aeabi_dsub>
 802f3e6:	ec53 2b18 	vmov	r2, r3, d8
 802f3ea:	f7e0 ff4d 	bl	8010288 <__aeabi_dsub>
 802f3ee:	4602      	mov	r2, r0
 802f3f0:	460b      	mov	r3, r1
 802f3f2:	4650      	mov	r0, sl
 802f3f4:	4659      	mov	r1, fp
 802f3f6:	e606      	b.n	802f006 <__ieee754_pow+0x2ee>
 802f3f8:	2401      	movs	r4, #1
 802f3fa:	e6a0      	b.n	802f13e <__ieee754_pow+0x426>
 802f3fc:	ed9f 7b14 	vldr	d7, [pc, #80]	; 802f450 <__ieee754_pow+0x738>
 802f400:	e60d      	b.n	802f01e <__ieee754_pow+0x306>
 802f402:	bf00      	nop
 802f404:	f3af 8000 	nop.w
 802f408:	4a454eef 	.word	0x4a454eef
 802f40c:	3fca7e28 	.word	0x3fca7e28
 802f410:	93c9db65 	.word	0x93c9db65
 802f414:	3fcd864a 	.word	0x3fcd864a
 802f418:	a91d4101 	.word	0xa91d4101
 802f41c:	3fd17460 	.word	0x3fd17460
 802f420:	518f264d 	.word	0x518f264d
 802f424:	3fd55555 	.word	0x3fd55555
 802f428:	db6fabff 	.word	0xdb6fabff
 802f42c:	3fdb6db6 	.word	0x3fdb6db6
 802f430:	33333303 	.word	0x33333303
 802f434:	3fe33333 	.word	0x3fe33333
 802f438:	e0000000 	.word	0xe0000000
 802f43c:	3feec709 	.word	0x3feec709
 802f440:	dc3a03fd 	.word	0xdc3a03fd
 802f444:	3feec709 	.word	0x3feec709
 802f448:	145b01f5 	.word	0x145b01f5
 802f44c:	be3e2fe0 	.word	0xbe3e2fe0
 802f450:	00000000 	.word	0x00000000
 802f454:	3ff00000 	.word	0x3ff00000
 802f458:	7ff00000 	.word	0x7ff00000
 802f45c:	43400000 	.word	0x43400000
 802f460:	0003988e 	.word	0x0003988e
 802f464:	000bb679 	.word	0x000bb679
 802f468:	08030200 	.word	0x08030200
 802f46c:	3ff00000 	.word	0x3ff00000
 802f470:	40080000 	.word	0x40080000
 802f474:	08030220 	.word	0x08030220
 802f478:	08030210 	.word	0x08030210
 802f47c:	a3b5      	add	r3, pc, #724	; (adr r3, 802f754 <__ieee754_pow+0xa3c>)
 802f47e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f482:	4640      	mov	r0, r8
 802f484:	4649      	mov	r1, r9
 802f486:	f7e0 ff01 	bl	801028c <__adddf3>
 802f48a:	4622      	mov	r2, r4
 802f48c:	ec41 0b1a 	vmov	d10, r0, r1
 802f490:	462b      	mov	r3, r5
 802f492:	4630      	mov	r0, r6
 802f494:	4639      	mov	r1, r7
 802f496:	f7e0 fef7 	bl	8010288 <__aeabi_dsub>
 802f49a:	4602      	mov	r2, r0
 802f49c:	460b      	mov	r3, r1
 802f49e:	ec51 0b1a 	vmov	r0, r1, d10
 802f4a2:	f7e1 fb39 	bl	8010b18 <__aeabi_dcmpgt>
 802f4a6:	2800      	cmp	r0, #0
 802f4a8:	f47f adf8 	bne.w	802f09c <__ieee754_pow+0x384>
 802f4ac:	4aa4      	ldr	r2, [pc, #656]	; (802f740 <__ieee754_pow+0xa28>)
 802f4ae:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 802f4b2:	4293      	cmp	r3, r2
 802f4b4:	f340 810b 	ble.w	802f6ce <__ieee754_pow+0x9b6>
 802f4b8:	151b      	asrs	r3, r3, #20
 802f4ba:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 802f4be:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 802f4c2:	fa4a f303 	asr.w	r3, sl, r3
 802f4c6:	445b      	add	r3, fp
 802f4c8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 802f4cc:	4e9d      	ldr	r6, [pc, #628]	; (802f744 <__ieee754_pow+0xa2c>)
 802f4ce:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 802f4d2:	4116      	asrs	r6, r2
 802f4d4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 802f4d8:	2000      	movs	r0, #0
 802f4da:	ea23 0106 	bic.w	r1, r3, r6
 802f4de:	f1c2 0214 	rsb	r2, r2, #20
 802f4e2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 802f4e6:	fa4a fa02 	asr.w	sl, sl, r2
 802f4ea:	f1bb 0f00 	cmp.w	fp, #0
 802f4ee:	4602      	mov	r2, r0
 802f4f0:	460b      	mov	r3, r1
 802f4f2:	4620      	mov	r0, r4
 802f4f4:	4629      	mov	r1, r5
 802f4f6:	bfb8      	it	lt
 802f4f8:	f1ca 0a00 	rsblt	sl, sl, #0
 802f4fc:	f7e0 fec4 	bl	8010288 <__aeabi_dsub>
 802f500:	ec41 0b19 	vmov	d9, r0, r1
 802f504:	4642      	mov	r2, r8
 802f506:	464b      	mov	r3, r9
 802f508:	ec51 0b19 	vmov	r0, r1, d9
 802f50c:	f7e0 febe 	bl	801028c <__adddf3>
 802f510:	2400      	movs	r4, #0
 802f512:	a379      	add	r3, pc, #484	; (adr r3, 802f6f8 <__ieee754_pow+0x9e0>)
 802f514:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f518:	4620      	mov	r0, r4
 802f51a:	460d      	mov	r5, r1
 802f51c:	f7e1 f86c 	bl	80105f8 <__aeabi_dmul>
 802f520:	ec53 2b19 	vmov	r2, r3, d9
 802f524:	4606      	mov	r6, r0
 802f526:	460f      	mov	r7, r1
 802f528:	4620      	mov	r0, r4
 802f52a:	4629      	mov	r1, r5
 802f52c:	f7e0 feac 	bl	8010288 <__aeabi_dsub>
 802f530:	4602      	mov	r2, r0
 802f532:	460b      	mov	r3, r1
 802f534:	4640      	mov	r0, r8
 802f536:	4649      	mov	r1, r9
 802f538:	f7e0 fea6 	bl	8010288 <__aeabi_dsub>
 802f53c:	a370      	add	r3, pc, #448	; (adr r3, 802f700 <__ieee754_pow+0x9e8>)
 802f53e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f542:	f7e1 f859 	bl	80105f8 <__aeabi_dmul>
 802f546:	a370      	add	r3, pc, #448	; (adr r3, 802f708 <__ieee754_pow+0x9f0>)
 802f548:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f54c:	4680      	mov	r8, r0
 802f54e:	4689      	mov	r9, r1
 802f550:	4620      	mov	r0, r4
 802f552:	4629      	mov	r1, r5
 802f554:	f7e1 f850 	bl	80105f8 <__aeabi_dmul>
 802f558:	4602      	mov	r2, r0
 802f55a:	460b      	mov	r3, r1
 802f55c:	4640      	mov	r0, r8
 802f55e:	4649      	mov	r1, r9
 802f560:	f7e0 fe94 	bl	801028c <__adddf3>
 802f564:	4604      	mov	r4, r0
 802f566:	460d      	mov	r5, r1
 802f568:	4602      	mov	r2, r0
 802f56a:	460b      	mov	r3, r1
 802f56c:	4630      	mov	r0, r6
 802f56e:	4639      	mov	r1, r7
 802f570:	f7e0 fe8c 	bl	801028c <__adddf3>
 802f574:	4632      	mov	r2, r6
 802f576:	463b      	mov	r3, r7
 802f578:	4680      	mov	r8, r0
 802f57a:	4689      	mov	r9, r1
 802f57c:	f7e0 fe84 	bl	8010288 <__aeabi_dsub>
 802f580:	4602      	mov	r2, r0
 802f582:	460b      	mov	r3, r1
 802f584:	4620      	mov	r0, r4
 802f586:	4629      	mov	r1, r5
 802f588:	f7e0 fe7e 	bl	8010288 <__aeabi_dsub>
 802f58c:	4642      	mov	r2, r8
 802f58e:	4606      	mov	r6, r0
 802f590:	460f      	mov	r7, r1
 802f592:	464b      	mov	r3, r9
 802f594:	4640      	mov	r0, r8
 802f596:	4649      	mov	r1, r9
 802f598:	f7e1 f82e 	bl	80105f8 <__aeabi_dmul>
 802f59c:	a35c      	add	r3, pc, #368	; (adr r3, 802f710 <__ieee754_pow+0x9f8>)
 802f59e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f5a2:	4604      	mov	r4, r0
 802f5a4:	460d      	mov	r5, r1
 802f5a6:	f7e1 f827 	bl	80105f8 <__aeabi_dmul>
 802f5aa:	a35b      	add	r3, pc, #364	; (adr r3, 802f718 <__ieee754_pow+0xa00>)
 802f5ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f5b0:	f7e0 fe6a 	bl	8010288 <__aeabi_dsub>
 802f5b4:	4622      	mov	r2, r4
 802f5b6:	462b      	mov	r3, r5
 802f5b8:	f7e1 f81e 	bl	80105f8 <__aeabi_dmul>
 802f5bc:	a358      	add	r3, pc, #352	; (adr r3, 802f720 <__ieee754_pow+0xa08>)
 802f5be:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f5c2:	f7e0 fe63 	bl	801028c <__adddf3>
 802f5c6:	4622      	mov	r2, r4
 802f5c8:	462b      	mov	r3, r5
 802f5ca:	f7e1 f815 	bl	80105f8 <__aeabi_dmul>
 802f5ce:	a356      	add	r3, pc, #344	; (adr r3, 802f728 <__ieee754_pow+0xa10>)
 802f5d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f5d4:	f7e0 fe58 	bl	8010288 <__aeabi_dsub>
 802f5d8:	4622      	mov	r2, r4
 802f5da:	462b      	mov	r3, r5
 802f5dc:	f7e1 f80c 	bl	80105f8 <__aeabi_dmul>
 802f5e0:	a353      	add	r3, pc, #332	; (adr r3, 802f730 <__ieee754_pow+0xa18>)
 802f5e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f5e6:	f7e0 fe51 	bl	801028c <__adddf3>
 802f5ea:	4622      	mov	r2, r4
 802f5ec:	462b      	mov	r3, r5
 802f5ee:	f7e1 f803 	bl	80105f8 <__aeabi_dmul>
 802f5f2:	4602      	mov	r2, r0
 802f5f4:	460b      	mov	r3, r1
 802f5f6:	4640      	mov	r0, r8
 802f5f8:	4649      	mov	r1, r9
 802f5fa:	f7e0 fe45 	bl	8010288 <__aeabi_dsub>
 802f5fe:	4604      	mov	r4, r0
 802f600:	460d      	mov	r5, r1
 802f602:	4602      	mov	r2, r0
 802f604:	460b      	mov	r3, r1
 802f606:	4640      	mov	r0, r8
 802f608:	4649      	mov	r1, r9
 802f60a:	f7e0 fff5 	bl	80105f8 <__aeabi_dmul>
 802f60e:	2200      	movs	r2, #0
 802f610:	ec41 0b19 	vmov	d9, r0, r1
 802f614:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 802f618:	4620      	mov	r0, r4
 802f61a:	4629      	mov	r1, r5
 802f61c:	f7e0 fe34 	bl	8010288 <__aeabi_dsub>
 802f620:	4602      	mov	r2, r0
 802f622:	460b      	mov	r3, r1
 802f624:	ec51 0b19 	vmov	r0, r1, d9
 802f628:	f7e1 f910 	bl	801084c <__aeabi_ddiv>
 802f62c:	4632      	mov	r2, r6
 802f62e:	4604      	mov	r4, r0
 802f630:	460d      	mov	r5, r1
 802f632:	463b      	mov	r3, r7
 802f634:	4640      	mov	r0, r8
 802f636:	4649      	mov	r1, r9
 802f638:	f7e0 ffde 	bl	80105f8 <__aeabi_dmul>
 802f63c:	4632      	mov	r2, r6
 802f63e:	463b      	mov	r3, r7
 802f640:	f7e0 fe24 	bl	801028c <__adddf3>
 802f644:	4602      	mov	r2, r0
 802f646:	460b      	mov	r3, r1
 802f648:	4620      	mov	r0, r4
 802f64a:	4629      	mov	r1, r5
 802f64c:	f7e0 fe1c 	bl	8010288 <__aeabi_dsub>
 802f650:	4642      	mov	r2, r8
 802f652:	464b      	mov	r3, r9
 802f654:	f7e0 fe18 	bl	8010288 <__aeabi_dsub>
 802f658:	460b      	mov	r3, r1
 802f65a:	4602      	mov	r2, r0
 802f65c:	493a      	ldr	r1, [pc, #232]	; (802f748 <__ieee754_pow+0xa30>)
 802f65e:	2000      	movs	r0, #0
 802f660:	f7e0 fe12 	bl	8010288 <__aeabi_dsub>
 802f664:	e9cd 0100 	strd	r0, r1, [sp]
 802f668:	9b01      	ldr	r3, [sp, #4]
 802f66a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 802f66e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 802f672:	da2f      	bge.n	802f6d4 <__ieee754_pow+0x9bc>
 802f674:	4650      	mov	r0, sl
 802f676:	ed9d 0b00 	vldr	d0, [sp]
 802f67a:	f000 f9cd 	bl	802fa18 <scalbn>
 802f67e:	ec51 0b10 	vmov	r0, r1, d0
 802f682:	ec53 2b18 	vmov	r2, r3, d8
 802f686:	f7ff bbe0 	b.w	802ee4a <__ieee754_pow+0x132>
 802f68a:	4b30      	ldr	r3, [pc, #192]	; (802f74c <__ieee754_pow+0xa34>)
 802f68c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 802f690:	429e      	cmp	r6, r3
 802f692:	f77f af0b 	ble.w	802f4ac <__ieee754_pow+0x794>
 802f696:	4b2e      	ldr	r3, [pc, #184]	; (802f750 <__ieee754_pow+0xa38>)
 802f698:	440b      	add	r3, r1
 802f69a:	4303      	orrs	r3, r0
 802f69c:	d00b      	beq.n	802f6b6 <__ieee754_pow+0x99e>
 802f69e:	a326      	add	r3, pc, #152	; (adr r3, 802f738 <__ieee754_pow+0xa20>)
 802f6a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f6a4:	ec51 0b18 	vmov	r0, r1, d8
 802f6a8:	f7e0 ffa6 	bl	80105f8 <__aeabi_dmul>
 802f6ac:	a322      	add	r3, pc, #136	; (adr r3, 802f738 <__ieee754_pow+0xa20>)
 802f6ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f6b2:	f7ff bbca 	b.w	802ee4a <__ieee754_pow+0x132>
 802f6b6:	4622      	mov	r2, r4
 802f6b8:	462b      	mov	r3, r5
 802f6ba:	f7e0 fde5 	bl	8010288 <__aeabi_dsub>
 802f6be:	4642      	mov	r2, r8
 802f6c0:	464b      	mov	r3, r9
 802f6c2:	f7e1 fa1f 	bl	8010b04 <__aeabi_dcmpge>
 802f6c6:	2800      	cmp	r0, #0
 802f6c8:	f43f aef0 	beq.w	802f4ac <__ieee754_pow+0x794>
 802f6cc:	e7e7      	b.n	802f69e <__ieee754_pow+0x986>
 802f6ce:	f04f 0a00 	mov.w	sl, #0
 802f6d2:	e717      	b.n	802f504 <__ieee754_pow+0x7ec>
 802f6d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 802f6d8:	4619      	mov	r1, r3
 802f6da:	e7d2      	b.n	802f682 <__ieee754_pow+0x96a>
 802f6dc:	491a      	ldr	r1, [pc, #104]	; (802f748 <__ieee754_pow+0xa30>)
 802f6de:	2000      	movs	r0, #0
 802f6e0:	f7ff bb9e 	b.w	802ee20 <__ieee754_pow+0x108>
 802f6e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802f6e8:	f7ff bb9a 	b.w	802ee20 <__ieee754_pow+0x108>
 802f6ec:	9000      	str	r0, [sp, #0]
 802f6ee:	f7ff bb76 	b.w	802edde <__ieee754_pow+0xc6>
 802f6f2:	2100      	movs	r1, #0
 802f6f4:	f7ff bb60 	b.w	802edb8 <__ieee754_pow+0xa0>
 802f6f8:	00000000 	.word	0x00000000
 802f6fc:	3fe62e43 	.word	0x3fe62e43
 802f700:	fefa39ef 	.word	0xfefa39ef
 802f704:	3fe62e42 	.word	0x3fe62e42
 802f708:	0ca86c39 	.word	0x0ca86c39
 802f70c:	be205c61 	.word	0xbe205c61
 802f710:	72bea4d0 	.word	0x72bea4d0
 802f714:	3e663769 	.word	0x3e663769
 802f718:	c5d26bf1 	.word	0xc5d26bf1
 802f71c:	3ebbbd41 	.word	0x3ebbbd41
 802f720:	af25de2c 	.word	0xaf25de2c
 802f724:	3f11566a 	.word	0x3f11566a
 802f728:	16bebd93 	.word	0x16bebd93
 802f72c:	3f66c16c 	.word	0x3f66c16c
 802f730:	5555553e 	.word	0x5555553e
 802f734:	3fc55555 	.word	0x3fc55555
 802f738:	c2f8f359 	.word	0xc2f8f359
 802f73c:	01a56e1f 	.word	0x01a56e1f
 802f740:	3fe00000 	.word	0x3fe00000
 802f744:	000fffff 	.word	0x000fffff
 802f748:	3ff00000 	.word	0x3ff00000
 802f74c:	4090cbff 	.word	0x4090cbff
 802f750:	3f6f3400 	.word	0x3f6f3400
 802f754:	652b82fe 	.word	0x652b82fe
 802f758:	3c971547 	.word	0x3c971547

0802f75c <__ieee754_sqrt>:
 802f75c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802f760:	ec55 4b10 	vmov	r4, r5, d0
 802f764:	4e56      	ldr	r6, [pc, #344]	; (802f8c0 <__ieee754_sqrt+0x164>)
 802f766:	43ae      	bics	r6, r5
 802f768:	ee10 0a10 	vmov	r0, s0
 802f76c:	ee10 3a10 	vmov	r3, s0
 802f770:	4629      	mov	r1, r5
 802f772:	462a      	mov	r2, r5
 802f774:	d110      	bne.n	802f798 <__ieee754_sqrt+0x3c>
 802f776:	ee10 2a10 	vmov	r2, s0
 802f77a:	462b      	mov	r3, r5
 802f77c:	f7e0 ff3c 	bl	80105f8 <__aeabi_dmul>
 802f780:	4602      	mov	r2, r0
 802f782:	460b      	mov	r3, r1
 802f784:	4620      	mov	r0, r4
 802f786:	4629      	mov	r1, r5
 802f788:	f7e0 fd80 	bl	801028c <__adddf3>
 802f78c:	4604      	mov	r4, r0
 802f78e:	460d      	mov	r5, r1
 802f790:	ec45 4b10 	vmov	d0, r4, r5
 802f794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802f798:	2d00      	cmp	r5, #0
 802f79a:	dc10      	bgt.n	802f7be <__ieee754_sqrt+0x62>
 802f79c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 802f7a0:	4330      	orrs	r0, r6
 802f7a2:	d0f5      	beq.n	802f790 <__ieee754_sqrt+0x34>
 802f7a4:	b15d      	cbz	r5, 802f7be <__ieee754_sqrt+0x62>
 802f7a6:	ee10 2a10 	vmov	r2, s0
 802f7aa:	462b      	mov	r3, r5
 802f7ac:	ee10 0a10 	vmov	r0, s0
 802f7b0:	f7e0 fd6a 	bl	8010288 <__aeabi_dsub>
 802f7b4:	4602      	mov	r2, r0
 802f7b6:	460b      	mov	r3, r1
 802f7b8:	f7e1 f848 	bl	801084c <__aeabi_ddiv>
 802f7bc:	e7e6      	b.n	802f78c <__ieee754_sqrt+0x30>
 802f7be:	1509      	asrs	r1, r1, #20
 802f7c0:	d076      	beq.n	802f8b0 <__ieee754_sqrt+0x154>
 802f7c2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 802f7c6:	07ce      	lsls	r6, r1, #31
 802f7c8:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 802f7cc:	bf5e      	ittt	pl
 802f7ce:	0fda      	lsrpl	r2, r3, #31
 802f7d0:	005b      	lslpl	r3, r3, #1
 802f7d2:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 802f7d6:	0fda      	lsrs	r2, r3, #31
 802f7d8:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 802f7dc:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 802f7e0:	2000      	movs	r0, #0
 802f7e2:	106d      	asrs	r5, r5, #1
 802f7e4:	005b      	lsls	r3, r3, #1
 802f7e6:	f04f 0e16 	mov.w	lr, #22
 802f7ea:	4684      	mov	ip, r0
 802f7ec:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 802f7f0:	eb0c 0401 	add.w	r4, ip, r1
 802f7f4:	4294      	cmp	r4, r2
 802f7f6:	bfde      	ittt	le
 802f7f8:	1b12      	suble	r2, r2, r4
 802f7fa:	eb04 0c01 	addle.w	ip, r4, r1
 802f7fe:	1840      	addle	r0, r0, r1
 802f800:	0052      	lsls	r2, r2, #1
 802f802:	f1be 0e01 	subs.w	lr, lr, #1
 802f806:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 802f80a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 802f80e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 802f812:	d1ed      	bne.n	802f7f0 <__ieee754_sqrt+0x94>
 802f814:	4671      	mov	r1, lr
 802f816:	2720      	movs	r7, #32
 802f818:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 802f81c:	4562      	cmp	r2, ip
 802f81e:	eb04 060e 	add.w	r6, r4, lr
 802f822:	dc02      	bgt.n	802f82a <__ieee754_sqrt+0xce>
 802f824:	d113      	bne.n	802f84e <__ieee754_sqrt+0xf2>
 802f826:	429e      	cmp	r6, r3
 802f828:	d811      	bhi.n	802f84e <__ieee754_sqrt+0xf2>
 802f82a:	2e00      	cmp	r6, #0
 802f82c:	eb06 0e04 	add.w	lr, r6, r4
 802f830:	da43      	bge.n	802f8ba <__ieee754_sqrt+0x15e>
 802f832:	f1be 0f00 	cmp.w	lr, #0
 802f836:	db40      	blt.n	802f8ba <__ieee754_sqrt+0x15e>
 802f838:	f10c 0801 	add.w	r8, ip, #1
 802f83c:	eba2 020c 	sub.w	r2, r2, ip
 802f840:	429e      	cmp	r6, r3
 802f842:	bf88      	it	hi
 802f844:	f102 32ff 	addhi.w	r2, r2, #4294967295
 802f848:	1b9b      	subs	r3, r3, r6
 802f84a:	4421      	add	r1, r4
 802f84c:	46c4      	mov	ip, r8
 802f84e:	0052      	lsls	r2, r2, #1
 802f850:	3f01      	subs	r7, #1
 802f852:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 802f856:	ea4f 0454 	mov.w	r4, r4, lsr #1
 802f85a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 802f85e:	d1dd      	bne.n	802f81c <__ieee754_sqrt+0xc0>
 802f860:	4313      	orrs	r3, r2
 802f862:	d006      	beq.n	802f872 <__ieee754_sqrt+0x116>
 802f864:	1c4c      	adds	r4, r1, #1
 802f866:	bf13      	iteet	ne
 802f868:	3101      	addne	r1, #1
 802f86a:	3001      	addeq	r0, #1
 802f86c:	4639      	moveq	r1, r7
 802f86e:	f021 0101 	bicne.w	r1, r1, #1
 802f872:	1043      	asrs	r3, r0, #1
 802f874:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 802f878:	0849      	lsrs	r1, r1, #1
 802f87a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 802f87e:	07c2      	lsls	r2, r0, #31
 802f880:	bf48      	it	mi
 802f882:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 802f886:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 802f88a:	460c      	mov	r4, r1
 802f88c:	463d      	mov	r5, r7
 802f88e:	e77f      	b.n	802f790 <__ieee754_sqrt+0x34>
 802f890:	0ada      	lsrs	r2, r3, #11
 802f892:	3815      	subs	r0, #21
 802f894:	055b      	lsls	r3, r3, #21
 802f896:	2a00      	cmp	r2, #0
 802f898:	d0fa      	beq.n	802f890 <__ieee754_sqrt+0x134>
 802f89a:	02d7      	lsls	r7, r2, #11
 802f89c:	d50a      	bpl.n	802f8b4 <__ieee754_sqrt+0x158>
 802f89e:	f1c1 0420 	rsb	r4, r1, #32
 802f8a2:	fa23 f404 	lsr.w	r4, r3, r4
 802f8a6:	1e4d      	subs	r5, r1, #1
 802f8a8:	408b      	lsls	r3, r1
 802f8aa:	4322      	orrs	r2, r4
 802f8ac:	1b41      	subs	r1, r0, r5
 802f8ae:	e788      	b.n	802f7c2 <__ieee754_sqrt+0x66>
 802f8b0:	4608      	mov	r0, r1
 802f8b2:	e7f0      	b.n	802f896 <__ieee754_sqrt+0x13a>
 802f8b4:	0052      	lsls	r2, r2, #1
 802f8b6:	3101      	adds	r1, #1
 802f8b8:	e7ef      	b.n	802f89a <__ieee754_sqrt+0x13e>
 802f8ba:	46e0      	mov	r8, ip
 802f8bc:	e7be      	b.n	802f83c <__ieee754_sqrt+0xe0>
 802f8be:	bf00      	nop
 802f8c0:	7ff00000 	.word	0x7ff00000

0802f8c4 <fabs>:
 802f8c4:	ec51 0b10 	vmov	r0, r1, d0
 802f8c8:	ee10 2a10 	vmov	r2, s0
 802f8cc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 802f8d0:	ec43 2b10 	vmov	d0, r2, r3
 802f8d4:	4770      	bx	lr

0802f8d6 <finite>:
 802f8d6:	b082      	sub	sp, #8
 802f8d8:	ed8d 0b00 	vstr	d0, [sp]
 802f8dc:	9801      	ldr	r0, [sp, #4]
 802f8de:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 802f8e2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 802f8e6:	0fc0      	lsrs	r0, r0, #31
 802f8e8:	b002      	add	sp, #8
 802f8ea:	4770      	bx	lr
 802f8ec:	0000      	movs	r0, r0
	...

0802f8f0 <nan>:
 802f8f0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 802f8f8 <nan+0x8>
 802f8f4:	4770      	bx	lr
 802f8f6:	bf00      	nop
 802f8f8:	00000000 	.word	0x00000000
 802f8fc:	7ff80000 	.word	0x7ff80000

0802f900 <rint>:
 802f900:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802f902:	ec51 0b10 	vmov	r0, r1, d0
 802f906:	f3c1 520a 	ubfx	r2, r1, #20, #11
 802f90a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 802f90e:	2e13      	cmp	r6, #19
 802f910:	ee10 4a10 	vmov	r4, s0
 802f914:	460b      	mov	r3, r1
 802f916:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 802f91a:	dc58      	bgt.n	802f9ce <rint+0xce>
 802f91c:	2e00      	cmp	r6, #0
 802f91e:	da2b      	bge.n	802f978 <rint+0x78>
 802f920:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 802f924:	4302      	orrs	r2, r0
 802f926:	d023      	beq.n	802f970 <rint+0x70>
 802f928:	f3c1 0213 	ubfx	r2, r1, #0, #20
 802f92c:	4302      	orrs	r2, r0
 802f92e:	4254      	negs	r4, r2
 802f930:	4314      	orrs	r4, r2
 802f932:	0c4b      	lsrs	r3, r1, #17
 802f934:	0b24      	lsrs	r4, r4, #12
 802f936:	045b      	lsls	r3, r3, #17
 802f938:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 802f93c:	ea44 0103 	orr.w	r1, r4, r3
 802f940:	4b32      	ldr	r3, [pc, #200]	; (802fa0c <rint+0x10c>)
 802f942:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 802f946:	e9d3 6700 	ldrd	r6, r7, [r3]
 802f94a:	4602      	mov	r2, r0
 802f94c:	460b      	mov	r3, r1
 802f94e:	4630      	mov	r0, r6
 802f950:	4639      	mov	r1, r7
 802f952:	f7e0 fc9b 	bl	801028c <__adddf3>
 802f956:	e9cd 0100 	strd	r0, r1, [sp]
 802f95a:	463b      	mov	r3, r7
 802f95c:	e9dd 0100 	ldrd	r0, r1, [sp]
 802f960:	4632      	mov	r2, r6
 802f962:	f7e0 fc91 	bl	8010288 <__aeabi_dsub>
 802f966:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 802f96a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 802f96e:	4639      	mov	r1, r7
 802f970:	ec41 0b10 	vmov	d0, r0, r1
 802f974:	b003      	add	sp, #12
 802f976:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802f978:	4a25      	ldr	r2, [pc, #148]	; (802fa10 <rint+0x110>)
 802f97a:	4132      	asrs	r2, r6
 802f97c:	ea01 0702 	and.w	r7, r1, r2
 802f980:	4307      	orrs	r7, r0
 802f982:	d0f5      	beq.n	802f970 <rint+0x70>
 802f984:	0851      	lsrs	r1, r2, #1
 802f986:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 802f98a:	4314      	orrs	r4, r2
 802f98c:	d00c      	beq.n	802f9a8 <rint+0xa8>
 802f98e:	ea23 0201 	bic.w	r2, r3, r1
 802f992:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 802f996:	2e13      	cmp	r6, #19
 802f998:	fa43 f606 	asr.w	r6, r3, r6
 802f99c:	bf0c      	ite	eq
 802f99e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 802f9a2:	2400      	movne	r4, #0
 802f9a4:	ea42 0306 	orr.w	r3, r2, r6
 802f9a8:	4918      	ldr	r1, [pc, #96]	; (802fa0c <rint+0x10c>)
 802f9aa:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 802f9ae:	4622      	mov	r2, r4
 802f9b0:	e9d5 4500 	ldrd	r4, r5, [r5]
 802f9b4:	4620      	mov	r0, r4
 802f9b6:	4629      	mov	r1, r5
 802f9b8:	f7e0 fc68 	bl	801028c <__adddf3>
 802f9bc:	e9cd 0100 	strd	r0, r1, [sp]
 802f9c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 802f9c4:	4622      	mov	r2, r4
 802f9c6:	462b      	mov	r3, r5
 802f9c8:	f7e0 fc5e 	bl	8010288 <__aeabi_dsub>
 802f9cc:	e7d0      	b.n	802f970 <rint+0x70>
 802f9ce:	2e33      	cmp	r6, #51	; 0x33
 802f9d0:	dd07      	ble.n	802f9e2 <rint+0xe2>
 802f9d2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 802f9d6:	d1cb      	bne.n	802f970 <rint+0x70>
 802f9d8:	ee10 2a10 	vmov	r2, s0
 802f9dc:	f7e0 fc56 	bl	801028c <__adddf3>
 802f9e0:	e7c6      	b.n	802f970 <rint+0x70>
 802f9e2:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 802f9e6:	f04f 36ff 	mov.w	r6, #4294967295
 802f9ea:	40d6      	lsrs	r6, r2
 802f9ec:	4230      	tst	r0, r6
 802f9ee:	d0bf      	beq.n	802f970 <rint+0x70>
 802f9f0:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 802f9f4:	ea4f 0156 	mov.w	r1, r6, lsr #1
 802f9f8:	bf1f      	itttt	ne
 802f9fa:	ea24 0101 	bicne.w	r1, r4, r1
 802f9fe:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 802fa02:	fa44 f202 	asrne.w	r2, r4, r2
 802fa06:	ea41 0402 	orrne.w	r4, r1, r2
 802fa0a:	e7cd      	b.n	802f9a8 <rint+0xa8>
 802fa0c:	08030230 	.word	0x08030230
 802fa10:	000fffff 	.word	0x000fffff
 802fa14:	00000000 	.word	0x00000000

0802fa18 <scalbn>:
 802fa18:	b570      	push	{r4, r5, r6, lr}
 802fa1a:	ec55 4b10 	vmov	r4, r5, d0
 802fa1e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 802fa22:	4606      	mov	r6, r0
 802fa24:	462b      	mov	r3, r5
 802fa26:	b99a      	cbnz	r2, 802fa50 <scalbn+0x38>
 802fa28:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 802fa2c:	4323      	orrs	r3, r4
 802fa2e:	d036      	beq.n	802fa9e <scalbn+0x86>
 802fa30:	4b39      	ldr	r3, [pc, #228]	; (802fb18 <scalbn+0x100>)
 802fa32:	4629      	mov	r1, r5
 802fa34:	ee10 0a10 	vmov	r0, s0
 802fa38:	2200      	movs	r2, #0
 802fa3a:	f7e0 fddd 	bl	80105f8 <__aeabi_dmul>
 802fa3e:	4b37      	ldr	r3, [pc, #220]	; (802fb1c <scalbn+0x104>)
 802fa40:	429e      	cmp	r6, r3
 802fa42:	4604      	mov	r4, r0
 802fa44:	460d      	mov	r5, r1
 802fa46:	da10      	bge.n	802fa6a <scalbn+0x52>
 802fa48:	a32b      	add	r3, pc, #172	; (adr r3, 802faf8 <scalbn+0xe0>)
 802fa4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802fa4e:	e03a      	b.n	802fac6 <scalbn+0xae>
 802fa50:	f240 71ff 	movw	r1, #2047	; 0x7ff
 802fa54:	428a      	cmp	r2, r1
 802fa56:	d10c      	bne.n	802fa72 <scalbn+0x5a>
 802fa58:	ee10 2a10 	vmov	r2, s0
 802fa5c:	4620      	mov	r0, r4
 802fa5e:	4629      	mov	r1, r5
 802fa60:	f7e0 fc14 	bl	801028c <__adddf3>
 802fa64:	4604      	mov	r4, r0
 802fa66:	460d      	mov	r5, r1
 802fa68:	e019      	b.n	802fa9e <scalbn+0x86>
 802fa6a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 802fa6e:	460b      	mov	r3, r1
 802fa70:	3a36      	subs	r2, #54	; 0x36
 802fa72:	4432      	add	r2, r6
 802fa74:	f240 71fe 	movw	r1, #2046	; 0x7fe
 802fa78:	428a      	cmp	r2, r1
 802fa7a:	dd08      	ble.n	802fa8e <scalbn+0x76>
 802fa7c:	2d00      	cmp	r5, #0
 802fa7e:	a120      	add	r1, pc, #128	; (adr r1, 802fb00 <scalbn+0xe8>)
 802fa80:	e9d1 0100 	ldrd	r0, r1, [r1]
 802fa84:	da1c      	bge.n	802fac0 <scalbn+0xa8>
 802fa86:	a120      	add	r1, pc, #128	; (adr r1, 802fb08 <scalbn+0xf0>)
 802fa88:	e9d1 0100 	ldrd	r0, r1, [r1]
 802fa8c:	e018      	b.n	802fac0 <scalbn+0xa8>
 802fa8e:	2a00      	cmp	r2, #0
 802fa90:	dd08      	ble.n	802faa4 <scalbn+0x8c>
 802fa92:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802fa96:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 802fa9a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 802fa9e:	ec45 4b10 	vmov	d0, r4, r5
 802faa2:	bd70      	pop	{r4, r5, r6, pc}
 802faa4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 802faa8:	da19      	bge.n	802fade <scalbn+0xc6>
 802faaa:	f24c 3350 	movw	r3, #50000	; 0xc350
 802faae:	429e      	cmp	r6, r3
 802fab0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 802fab4:	dd0a      	ble.n	802facc <scalbn+0xb4>
 802fab6:	a112      	add	r1, pc, #72	; (adr r1, 802fb00 <scalbn+0xe8>)
 802fab8:	e9d1 0100 	ldrd	r0, r1, [r1]
 802fabc:	2b00      	cmp	r3, #0
 802fabe:	d1e2      	bne.n	802fa86 <scalbn+0x6e>
 802fac0:	a30f      	add	r3, pc, #60	; (adr r3, 802fb00 <scalbn+0xe8>)
 802fac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 802fac6:	f7e0 fd97 	bl	80105f8 <__aeabi_dmul>
 802faca:	e7cb      	b.n	802fa64 <scalbn+0x4c>
 802facc:	a10a      	add	r1, pc, #40	; (adr r1, 802faf8 <scalbn+0xe0>)
 802face:	e9d1 0100 	ldrd	r0, r1, [r1]
 802fad2:	2b00      	cmp	r3, #0
 802fad4:	d0b8      	beq.n	802fa48 <scalbn+0x30>
 802fad6:	a10e      	add	r1, pc, #56	; (adr r1, 802fb10 <scalbn+0xf8>)
 802fad8:	e9d1 0100 	ldrd	r0, r1, [r1]
 802fadc:	e7b4      	b.n	802fa48 <scalbn+0x30>
 802fade:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802fae2:	3236      	adds	r2, #54	; 0x36
 802fae4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 802fae8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 802faec:	4620      	mov	r0, r4
 802faee:	4b0c      	ldr	r3, [pc, #48]	; (802fb20 <scalbn+0x108>)
 802faf0:	2200      	movs	r2, #0
 802faf2:	e7e8      	b.n	802fac6 <scalbn+0xae>
 802faf4:	f3af 8000 	nop.w
 802faf8:	c2f8f359 	.word	0xc2f8f359
 802fafc:	01a56e1f 	.word	0x01a56e1f
 802fb00:	8800759c 	.word	0x8800759c
 802fb04:	7e37e43c 	.word	0x7e37e43c
 802fb08:	8800759c 	.word	0x8800759c
 802fb0c:	fe37e43c 	.word	0xfe37e43c
 802fb10:	c2f8f359 	.word	0xc2f8f359
 802fb14:	81a56e1f 	.word	0x81a56e1f
 802fb18:	43500000 	.word	0x43500000
 802fb1c:	ffff3cb0 	.word	0xffff3cb0
 802fb20:	3c900000 	.word	0x3c900000

0802fb24 <_init>:
 802fb24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802fb26:	bf00      	nop
 802fb28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802fb2a:	bc08      	pop	{r3}
 802fb2c:	469e      	mov	lr, r3
 802fb2e:	4770      	bx	lr

0802fb30 <_fini>:
 802fb30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802fb32:	bf00      	nop
 802fb34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802fb36:	bc08      	pop	{r3}
 802fb38:	469e      	mov	lr, r3
 802fb3a:	4770      	bx	lr
